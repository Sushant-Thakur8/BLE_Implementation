
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000160  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c0a8  08000160  08000160  00001160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002674  0802c208  0802c208  0002d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e87c  0802e87c  00030598  2**0
                  CONTENTS
  4 .ARM          00000008  0802e87c  0802e87c  0002f87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e884  0802e884  00030598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e884  0802e884  0002f884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e888  0802e888  0002f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000598  20000000  0802e88c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ce4  200005a0  0802ee24  000305a0  2**4
                  ALLOC
 10 ._user_heap_stack 00004004  2000a284  0802ee24  00031284  2**0
                  ALLOC
 11 .ARM.attributes 0000003c  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005dd8d  00000000  00000000  000305d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d68a  00000000  00000000  0008e361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00021852  00000000  00000000  0009b9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003550  00000000  00000000  000bd240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00004ce3  00000000  00000000  000c0790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039e57  00000000  00000000  000c5473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006bb33  00000000  00000000  000ff2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011aa50  00000000  00000000  0016adfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000087  00000000  00000000  0028584d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000146c4  00000000  00000000  002858d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cb  00000000  00000000  00299f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000160 <__do_global_dtors_aux>:
 8000160:	b510      	push	{r4, lr}
 8000162:	4c05      	ldr	r4, [pc, #20]	@ (8000178 <__do_global_dtors_aux+0x18>)
 8000164:	7823      	ldrb	r3, [r4, #0]
 8000166:	b933      	cbnz	r3, 8000176 <__do_global_dtors_aux+0x16>
 8000168:	4b04      	ldr	r3, [pc, #16]	@ (800017c <__do_global_dtors_aux+0x1c>)
 800016a:	b113      	cbz	r3, 8000172 <__do_global_dtors_aux+0x12>
 800016c:	4804      	ldr	r0, [pc, #16]	@ (8000180 <__do_global_dtors_aux+0x20>)
 800016e:	f3af 8000 	nop.w
 8000172:	2301      	movs	r3, #1
 8000174:	7023      	strb	r3, [r4, #0]
 8000176:	bd10      	pop	{r4, pc}
 8000178:	200005a0 	.word	0x200005a0
 800017c:	00000000 	.word	0x00000000
 8000180:	0802c1f0 	.word	0x0802c1f0

08000184 <frame_dummy>:
 8000184:	b508      	push	{r3, lr}
 8000186:	4b03      	ldr	r3, [pc, #12]	@ (8000194 <frame_dummy+0x10>)
 8000188:	b11b      	cbz	r3, 8000192 <frame_dummy+0xe>
 800018a:	4903      	ldr	r1, [pc, #12]	@ (8000198 <frame_dummy+0x14>)
 800018c:	4803      	ldr	r0, [pc, #12]	@ (800019c <frame_dummy+0x18>)
 800018e:	f3af 8000 	nop.w
 8000192:	bd08      	pop	{r3, pc}
 8000194:	00000000 	.word	0x00000000
 8000198:	200005a4 	.word	0x200005a4
 800019c:	0802c1f0 	.word	0x0802c1f0

080001a0 <__aeabi_memset>:
 80001a0:	b470      	push	{r4, r5, r6}
 80001a2:	0784      	lsls	r4, r0, #30
 80001a4:	d046      	beq.n	8000234 <__aeabi_memset+0x94>
 80001a6:	1e4c      	subs	r4, r1, #1
 80001a8:	2900      	cmp	r1, #0
 80001aa:	d041      	beq.n	8000230 <__aeabi_memset+0x90>
 80001ac:	b2d5      	uxtb	r5, r2
 80001ae:	4603      	mov	r3, r0
 80001b0:	e002      	b.n	80001b8 <__aeabi_memset+0x18>
 80001b2:	1e61      	subs	r1, r4, #1
 80001b4:	b3e4      	cbz	r4, 8000230 <__aeabi_memset+0x90>
 80001b6:	460c      	mov	r4, r1
 80001b8:	f803 5b01 	strb.w	r5, [r3], #1
 80001bc:	0799      	lsls	r1, r3, #30
 80001be:	d1f8      	bne.n	80001b2 <__aeabi_memset+0x12>
 80001c0:	2c03      	cmp	r4, #3
 80001c2:	d92e      	bls.n	8000222 <__aeabi_memset+0x82>
 80001c4:	b2d5      	uxtb	r5, r2
 80001c6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80001ca:	2c0f      	cmp	r4, #15
 80001cc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80001d0:	d919      	bls.n	8000206 <__aeabi_memset+0x66>
 80001d2:	4626      	mov	r6, r4
 80001d4:	f103 0110 	add.w	r1, r3, #16
 80001d8:	3e10      	subs	r6, #16
 80001da:	2e0f      	cmp	r6, #15
 80001dc:	f841 5c10 	str.w	r5, [r1, #-16]
 80001e0:	f841 5c0c 	str.w	r5, [r1, #-12]
 80001e4:	f841 5c08 	str.w	r5, [r1, #-8]
 80001e8:	f841 5c04 	str.w	r5, [r1, #-4]
 80001ec:	f101 0110 	add.w	r1, r1, #16
 80001f0:	d8f2      	bhi.n	80001d8 <__aeabi_memset+0x38>
 80001f2:	f1a4 0110 	sub.w	r1, r4, #16
 80001f6:	f021 010f 	bic.w	r1, r1, #15
 80001fa:	f004 040f 	and.w	r4, r4, #15
 80001fe:	3110      	adds	r1, #16
 8000200:	2c03      	cmp	r4, #3
 8000202:	440b      	add	r3, r1
 8000204:	d90d      	bls.n	8000222 <__aeabi_memset+0x82>
 8000206:	461e      	mov	r6, r3
 8000208:	4621      	mov	r1, r4
 800020a:	3904      	subs	r1, #4
 800020c:	2903      	cmp	r1, #3
 800020e:	f846 5b04 	str.w	r5, [r6], #4
 8000212:	d8fa      	bhi.n	800020a <__aeabi_memset+0x6a>
 8000214:	1f21      	subs	r1, r4, #4
 8000216:	f021 0103 	bic.w	r1, r1, #3
 800021a:	3104      	adds	r1, #4
 800021c:	440b      	add	r3, r1
 800021e:	f004 0403 	and.w	r4, r4, #3
 8000222:	b12c      	cbz	r4, 8000230 <__aeabi_memset+0x90>
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	441c      	add	r4, r3
 8000228:	f803 2b01 	strb.w	r2, [r3], #1
 800022c:	42a3      	cmp	r3, r4
 800022e:	d1fb      	bne.n	8000228 <__aeabi_memset+0x88>
 8000230:	bc70      	pop	{r4, r5, r6}
 8000232:	4770      	bx	lr
 8000234:	460c      	mov	r4, r1
 8000236:	4603      	mov	r3, r0
 8000238:	e7c2      	b.n	80001c0 <__aeabi_memset+0x20>
	...

0800023c <__aeabi_uldivmod>:
 800023c:	b953      	cbnz	r3, 8000254 <__aeabi_uldivmod+0x18>
 800023e:	b94a      	cbnz	r2, 8000254 <__aeabi_uldivmod+0x18>
 8000240:	2900      	cmp	r1, #0
 8000242:	bf08      	it	eq
 8000244:	2800      	cmpeq	r0, #0
 8000246:	bf1c      	itt	ne
 8000248:	f04f 31ff 	movne.w	r1, #4294967295
 800024c:	f04f 30ff 	movne.w	r0, #4294967295
 8000250:	f000 b97e 	b.w	8000550 <__aeabi_idiv0>
 8000254:	f1ad 0c08 	sub.w	ip, sp, #8
 8000258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000268:	b004      	add	sp, #16
 800026a:	4770      	bx	lr

0800026c <__udivmoddi4>:
 800026c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000270:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000272:	460c      	mov	r4, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14d      	bne.n	8000314 <__udivmoddi4+0xa8>
 8000278:	428a      	cmp	r2, r1
 800027a:	460f      	mov	r7, r1
 800027c:	4684      	mov	ip, r0
 800027e:	4696      	mov	lr, r2
 8000280:	fab2 f382 	clz	r3, r2
 8000284:	d960      	bls.n	8000348 <__udivmoddi4+0xdc>
 8000286:	b14b      	cbz	r3, 800029c <__udivmoddi4+0x30>
 8000288:	fa02 fe03 	lsl.w	lr, r2, r3
 800028c:	f1c3 0220 	rsb	r2, r3, #32
 8000290:	409f      	lsls	r7, r3
 8000292:	fa00 fc03 	lsl.w	ip, r0, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002a0:	fa1f f48e 	uxth.w	r4, lr
 80002a4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002a8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002ac:	fb06 7711 	mls	r7, r6, r1, r7
 80002b0:	fb01 f004 	mul.w	r0, r1, r4
 80002b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d908      	bls.n	80002ce <__udivmoddi4+0x62>
 80002bc:	eb1e 0202 	adds.w	r2, lr, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	d202      	bcs.n	80002cc <__udivmoddi4+0x60>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f200 812d 	bhi.w	8000526 <__udivmoddi4+0x2ba>
 80002cc:	4639      	mov	r1, r7
 80002ce:	1a12      	subs	r2, r2, r0
 80002d0:	fa1f fc8c 	uxth.w	ip, ip
 80002d4:	fbb2 f0f6 	udiv	r0, r2, r6
 80002d8:	fb06 2210 	mls	r2, r6, r0, r2
 80002dc:	fb00 f404 	mul.w	r4, r0, r4
 80002e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80002e4:	4564      	cmp	r4, ip
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x8e>
 80002e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x8c>
 80002f2:	4564      	cmp	r4, ip
 80002f4:	f200 811a 	bhi.w	800052c <__udivmoddi4+0x2c0>
 80002f8:	4610      	mov	r0, r2
 80002fa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fe:	ebac 0c04 	sub.w	ip, ip, r4
 8000302:	2100      	movs	r1, #0
 8000304:	b125      	cbz	r5, 8000310 <__udivmoddi4+0xa4>
 8000306:	fa2c f303 	lsr.w	r3, ip, r3
 800030a:	2200      	movs	r2, #0
 800030c:	e9c5 3200 	strd	r3, r2, [r5]
 8000310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000314:	428b      	cmp	r3, r1
 8000316:	d905      	bls.n	8000324 <__udivmoddi4+0xb8>
 8000318:	b10d      	cbz	r5, 800031e <__udivmoddi4+0xb2>
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	2100      	movs	r1, #0
 8000320:	4608      	mov	r0, r1
 8000322:	e7f5      	b.n	8000310 <__udivmoddi4+0xa4>
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d14d      	bne.n	80003c8 <__udivmoddi4+0x15c>
 800032c:	42a3      	cmp	r3, r4
 800032e:	f0c0 80f2 	bcc.w	8000516 <__udivmoddi4+0x2aa>
 8000332:	4290      	cmp	r0, r2
 8000334:	f080 80ef 	bcs.w	8000516 <__udivmoddi4+0x2aa>
 8000338:	4606      	mov	r6, r0
 800033a:	4623      	mov	r3, r4
 800033c:	4608      	mov	r0, r1
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e6      	beq.n	8000310 <__udivmoddi4+0xa4>
 8000342:	e9c5 6300 	strd	r6, r3, [r5]
 8000346:	e7e3      	b.n	8000310 <__udivmoddi4+0xa4>
 8000348:	2b00      	cmp	r3, #0
 800034a:	f040 80a2 	bne.w	8000492 <__udivmoddi4+0x226>
 800034e:	1a8a      	subs	r2, r1, r2
 8000350:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000354:	fa1f f68e 	uxth.w	r6, lr
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 f4f7 	udiv	r4, r2, r7
 800035e:	fb07 2014 	mls	r0, r7, r4, r2
 8000362:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb06 f004 	mul.w	r0, r6, r4
 800036e:	4290      	cmp	r0, r2
 8000370:	d90f      	bls.n	8000392 <__udivmoddi4+0x126>
 8000372:	eb1e 0202 	adds.w	r2, lr, r2
 8000376:	f104 38ff 	add.w	r8, r4, #4294967295
 800037a:	bf2c      	ite	cs
 800037c:	f04f 0901 	movcs.w	r9, #1
 8000380:	f04f 0900 	movcc.w	r9, #0
 8000384:	4290      	cmp	r0, r2
 8000386:	d903      	bls.n	8000390 <__udivmoddi4+0x124>
 8000388:	f1b9 0f00 	cmp.w	r9, #0
 800038c:	f000 80c8 	beq.w	8000520 <__udivmoddi4+0x2b4>
 8000390:	4644      	mov	r4, r8
 8000392:	1a12      	subs	r2, r2, r0
 8000394:	fa1f fc8c 	uxth.w	ip, ip
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	fb00 f606 	mul.w	r6, r0, r6
 80003a4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003a8:	4566      	cmp	r6, ip
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x152>
 80003ac:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x150>
 80003b6:	4566      	cmp	r6, ip
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c6>
 80003bc:	4610      	mov	r0, r2
 80003be:	ebac 0c06 	sub.w	ip, ip, r6
 80003c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003c6:	e79d      	b.n	8000304 <__udivmoddi4+0x98>
 80003c8:	f1c1 0620 	rsb	r6, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa04 fe01 	lsl.w	lr, r4, r1
 80003d2:	fa22 f706 	lsr.w	r7, r2, r6
 80003d6:	fa20 fc06 	lsr.w	ip, r0, r6
 80003da:	40f4      	lsrs	r4, r6
 80003dc:	408a      	lsls	r2, r1
 80003de:	431f      	orrs	r7, r3
 80003e0:	ea4e 030c 	orr.w	r3, lr, ip
 80003e4:	fa00 fe01 	lsl.w	lr, r0, r1
 80003e8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003ec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f0:	fa1f fc87 	uxth.w	ip, r7
 80003f4:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f8:	fb08 4410 	mls	r4, r8, r0, r4
 80003fc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000400:	fb00 f90c 	mul.w	r9, r0, ip
 8000404:	45a1      	cmp	r9, r4
 8000406:	d90e      	bls.n	8000426 <__udivmoddi4+0x1ba>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 3aff 	add.w	sl, r0, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	45a1      	cmp	r9, r4
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b8>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 8093 	beq.w	800054a <__udivmoddi4+0x2de>
 8000424:	4650      	mov	r0, sl
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000432:	fb08 4413 	mls	r4, r8, r3, r4
 8000436:	fb03 fc0c 	mul.w	ip, r3, ip
 800043a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043e:	45a4      	cmp	ip, r4
 8000440:	d906      	bls.n	8000450 <__udivmoddi4+0x1e4>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 38ff 	add.w	r8, r3, #4294967295
 8000448:	d201      	bcs.n	800044e <__udivmoddi4+0x1e2>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d87a      	bhi.n	8000544 <__udivmoddi4+0x2d8>
 800044e:	4643      	mov	r3, r8
 8000450:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000454:	eba4 040c 	sub.w	r4, r4, ip
 8000458:	fba0 9802 	umull	r9, r8, r0, r2
 800045c:	4544      	cmp	r4, r8
 800045e:	46cc      	mov	ip, r9
 8000460:	4643      	mov	r3, r8
 8000462:	d302      	bcc.n	800046a <__udivmoddi4+0x1fe>
 8000464:	d106      	bne.n	8000474 <__udivmoddi4+0x208>
 8000466:	45ce      	cmp	lr, r9
 8000468:	d204      	bcs.n	8000474 <__udivmoddi4+0x208>
 800046a:	3801      	subs	r0, #1
 800046c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000470:	eb68 0307 	sbc.w	r3, r8, r7
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x222>
 8000476:	ebbe 020c 	subs.w	r2, lr, ip
 800047a:	eb64 0403 	sbc.w	r4, r4, r3
 800047e:	fa04 f606 	lsl.w	r6, r4, r6
 8000482:	fa22 f301 	lsr.w	r3, r2, r1
 8000486:	40cc      	lsrs	r4, r1
 8000488:	431e      	orrs	r6, r3
 800048a:	e9c5 6400 	strd	r6, r4, [r5]
 800048e:	2100      	movs	r1, #0
 8000490:	e73e      	b.n	8000310 <__udivmoddi4+0xa4>
 8000492:	fa02 fe03 	lsl.w	lr, r2, r3
 8000496:	f1c3 0120 	rsb	r1, r3, #32
 800049a:	fa04 f203 	lsl.w	r2, r4, r3
 800049e:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a2:	40cc      	lsrs	r4, r1
 80004a4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004a8:	fa20 f101 	lsr.w	r1, r0, r1
 80004ac:	fa1f f68e 	uxth.w	r6, lr
 80004b0:	fbb4 f0f7 	udiv	r0, r4, r7
 80004b4:	430a      	orrs	r2, r1
 80004b6:	fb07 4410 	mls	r4, r7, r0, r4
 80004ba:	0c11      	lsrs	r1, r2, #16
 80004bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004c0:	fb00 f406 	mul.w	r4, r0, r6
 80004c4:	428c      	cmp	r4, r1
 80004c6:	d90e      	bls.n	80004e6 <__udivmoddi4+0x27a>
 80004c8:	eb1e 0101 	adds.w	r1, lr, r1
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d0:	bf2c      	ite	cs
 80004d2:	f04f 0901 	movcs.w	r9, #1
 80004d6:	f04f 0900 	movcc.w	r9, #0
 80004da:	428c      	cmp	r4, r1
 80004dc:	d902      	bls.n	80004e4 <__udivmoddi4+0x278>
 80004de:	f1b9 0f00 	cmp.w	r9, #0
 80004e2:	d02c      	beq.n	800053e <__udivmoddi4+0x2d2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	1b09      	subs	r1, r1, r4
 80004e8:	b292      	uxth	r2, r2
 80004ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ee:	fb07 1114 	mls	r1, r7, r4, r1
 80004f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f6:	fb04 f106 	mul.w	r1, r4, r6
 80004fa:	4291      	cmp	r1, r2
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x2a2>
 80004fe:	eb1e 0202 	adds.w	r2, lr, r2
 8000502:	f104 38ff 	add.w	r8, r4, #4294967295
 8000506:	d201      	bcs.n	800050c <__udivmoddi4+0x2a0>
 8000508:	4291      	cmp	r1, r2
 800050a:	d815      	bhi.n	8000538 <__udivmoddi4+0x2cc>
 800050c:	4644      	mov	r4, r8
 800050e:	1a52      	subs	r2, r2, r1
 8000510:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000514:	e721      	b.n	800035a <__udivmoddi4+0xee>
 8000516:	1a86      	subs	r6, r0, r2
 8000518:	eb64 0303 	sbc.w	r3, r4, r3
 800051c:	2001      	movs	r0, #1
 800051e:	e70e      	b.n	800033e <__udivmoddi4+0xd2>
 8000520:	3c02      	subs	r4, #2
 8000522:	4472      	add	r2, lr
 8000524:	e735      	b.n	8000392 <__udivmoddi4+0x126>
 8000526:	3902      	subs	r1, #2
 8000528:	4472      	add	r2, lr
 800052a:	e6d0      	b.n	80002ce <__udivmoddi4+0x62>
 800052c:	44f4      	add	ip, lr
 800052e:	3802      	subs	r0, #2
 8000530:	e6e3      	b.n	80002fa <__udivmoddi4+0x8e>
 8000532:	44f4      	add	ip, lr
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x152>
 8000538:	3c02      	subs	r4, #2
 800053a:	4472      	add	r2, lr
 800053c:	e7e7      	b.n	800050e <__udivmoddi4+0x2a2>
 800053e:	3802      	subs	r0, #2
 8000540:	4471      	add	r1, lr
 8000542:	e7d0      	b.n	80004e6 <__udivmoddi4+0x27a>
 8000544:	3b02      	subs	r3, #2
 8000546:	443c      	add	r4, r7
 8000548:	e782      	b.n	8000450 <__udivmoddi4+0x1e4>
 800054a:	3802      	subs	r0, #2
 800054c:	443c      	add	r4, r7
 800054e:	e76a      	b.n	8000426 <__udivmoddi4+0x1ba>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <AMM_WrapperFree>:
  return (uint32_t *)UTIL_MM_GetBuffer (((size_t)BufferSize * sizeof(uint32_t)));
}

static void AMM_WrapperFree (uint32_t * const p_BufferAddr)
{
  UTIL_MM_ReleaseBuffer ((void *)p_BufferAddr);
 8000554:	f005 bcaa 	b.w	8005eac <UTIL_MM_ReleaseBuffer>

08000558 <AMM_WrapperAllocate>:
  return (uint32_t *)UTIL_MM_GetBuffer (((size_t)BufferSize * sizeof(uint32_t)));
 8000558:	0080      	lsls	r0, r0, #2
 800055a:	f005 bc25 	b.w	8005da8 <UTIL_MM_GetBuffer>
 800055e:	bf00      	nop

08000560 <AMM_WrapperInit>:
  UTIL_MM_Init ((uint8_t *)p_PoolAddr, ((size_t)PoolSize * sizeof(uint32_t)));
 8000560:	0089      	lsls	r1, r1, #2
 8000562:	f005 bcef 	b.w	8005f44 <UTIL_MM_Init>
 8000566:	bf00      	nop

08000568 <Button_TriggerActions>:

  return;
}

static void Button_TriggerActions(void *arg)
{
 8000568:	b510      	push	{r4, lr}
 800056a:	4604      	mov	r4, r0
  ButtonDesc_t *p_buttonDesc = arg;

  p_buttonDesc->longPressed = BSP_PB_GetState(p_buttonDesc->button);
 800056c:	7800      	ldrb	r0, [r0, #0]
 800056e:	f007 fa8f 	bl	8007a90 <BSP_PB_GetState>
 8000572:	4684      	mov	ip, r0

  LOG_INFO_APP("Button %d pressed\n", (p_buttonDesc->button + 1));
 8000574:	7823      	ldrb	r3, [r4, #0]
 8000576:	2102      	movs	r1, #2
 8000578:	2000      	movs	r0, #0
 800057a:	4a10      	ldr	r2, [pc, #64]	@ (80005bc <Button_TriggerActions+0x54>)
 800057c:	3301      	adds	r3, #1
  p_buttonDesc->longPressed = BSP_PB_GetState(p_buttonDesc->button);
 800057e:	f884 c01c 	strb.w	ip, [r4, #28]
  LOG_INFO_APP("Button %d pressed\n", (p_buttonDesc->button + 1));
 8000582:	f002 fa45 	bl	8002a10 <Log_Module_Print>
  switch (p_buttonDesc->button)
 8000586:	7821      	ldrb	r1, [r4, #0]
 8000588:	2901      	cmp	r1, #1
 800058a:	d003      	beq.n	8000594 <Button_TriggerActions+0x2c>
 800058c:	2902      	cmp	r1, #2
 800058e:	d00e      	beq.n	80005ae <Button_TriggerActions+0x46>
 8000590:	b139      	cbz	r1, 80005a2 <Button_TriggerActions+0x3a>
    default:
      break;
  }

  return;
}
 8000592:	bd10      	pop	{r4, pc}
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
 8000594:	2100      	movs	r1, #0
}
 8000596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_2, CFG_SEQ_PRIO_0);
 800059a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800059e:	f00b bdf1 	b.w	800c184 <UTIL_SEQ_SetTask>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
 80005a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
}
 80005a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_1, CFG_SEQ_PRIO_0);
 80005aa:	f00b bdeb 	b.w	800c184 <UTIL_SEQ_SetTask>
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
 80005ae:	2100      	movs	r1, #0
}
 80005b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      UTIL_SEQ_SetTask(1U << TASK_BUTTON_3, CFG_SEQ_PRIO_0);
 80005b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80005b8:	f00b bde4 	b.w	800c184 <UTIL_SEQ_SetTask>
 80005bc:	0802c22c 	.word	0x0802c22c

080005c0 <MX_APPE_Config>:
  OTP_Data_s* otp_ptr = NULL;
 80005c0:	2000      	movs	r0, #0
{
 80005c2:	b500      	push	{lr}
 80005c4:	b083      	sub	sp, #12
  if (OTP_Read(DEFAULT_OTP_IDX, &otp_ptr) != HAL_OK)
 80005c6:	a901      	add	r1, sp, #4
  OTP_Data_s* otp_ptr = NULL;
 80005c8:	9001      	str	r0, [sp, #4]
  if (OTP_Read(DEFAULT_OTP_IDX, &otp_ptr) != HAL_OK)
 80005ca:	f006 fb11 	bl	8006bf0 <OTP_Read>
 80005ce:	b128      	cbz	r0, 80005dc <MX_APPE_Config+0x1c>
    HAL_RCCEx_HSESetTrimming(0x0C);
 80005d0:	200c      	movs	r0, #12
 80005d2:	f009 fd4f 	bl	800a074 <HAL_RCCEx_HSESetTrimming>
}
 80005d6:	b003      	add	sp, #12
 80005d8:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCCEx_HSESetTrimming(otp_ptr->hsetune);
 80005dc:	9b01      	ldr	r3, [sp, #4]
 80005de:	7b98      	ldrb	r0, [r3, #14]
 80005e0:	f009 fd48 	bl	800a074 <HAL_RCCEx_HSESetTrimming>
}
 80005e4:	b003      	add	sp, #12
 80005e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ea:	bf00      	nop

080005ec <MX_APPE_Init>:
{
 80005ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
 80005f0:	2000      	movs	r0, #0
{
 80005f2:	b082      	sub	sp, #8
  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
 80005f4:	f002 f9e4 	bl	80029c0 <APP_DEBUG_SIGNAL_SET>
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80005f8:	4a54      	ldr	r2, [pc, #336]	@ (800074c <MX_APPE_Init+0x160>)
 80005fa:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80005fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000602:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  UTIL_TIMER_Init();
 8000606:	f00b ff13 	bl	800c430 <UTIL_TIMER_Init>
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN7_HIGH_3);
 800060a:	4851      	ldr	r0, [pc, #324]	@ (8000750 <MX_APPE_Init+0x164>)
 800060c:	f008 fe26 	bl	800925c <HAL_PWR_EnableWakeUpPin>
  Log_Module_Init( Log_Module_Config );
 8000610:	4b50      	ldr	r3, [pc, #320]	@ (8000754 <MX_APPE_Init+0x168>)
 8000612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000616:	f002 fa09 	bl	8002a2c <Log_Module_Init>
  Serial_CMD_Interpreter_Init();
 800061a:	f005 fedf 	bl	80063dc <Serial_CMD_Interpreter_Init>
  ADCCTRL_Init ();
 800061e:	f005 ff99 	bl	8006554 <ADCCTRL_Init>
  scm_init();
 8000622:	f006 fded 	bl	8007200 <scm_init>
  TEMPMEAS_Init ();
 8000626:	f006 ff01 	bl	800742c <TEMPMEAS_Init>
  if( AMM_Init(&ammInitConfig) != AMM_ERROR_OK )
 800062a:	484b      	ldr	r0, [pc, #300]	@ (8000758 <MX_APPE_Init+0x16c>)
 800062c:	f005 f98c 	bl	8005948 <AMM_Init>
 8000630:	2800      	cmp	r0, #0
 8000632:	f040 8084 	bne.w	800073e <MX_APPE_Init+0x152>
  UTIL_SEQ_RegTask(1U << CFG_TASK_AMM, UTIL_SEQ_RFU, AMM_BackgroundProcess);
 8000636:	2100      	movs	r1, #0
 8000638:	2020      	movs	r0, #32
 800063a:	4a48      	ldr	r2, [pc, #288]	@ (800075c <MX_APPE_Init+0x170>)
 800063c:	f00b fd8a 	bl	800c154 <UTIL_SEQ_RegTask>
  HW_RNG_Start();
 8000640:	f002 fc62 	bl	8002f08 <HW_RNG_Start>
  UTIL_SEQ_RegTask(1U << CFG_TASK_HW_RNG, UTIL_SEQ_RFU, (void (*)(void))HW_RNG_Process);
 8000644:	2100      	movs	r1, #0
 8000646:	2001      	movs	r0, #1
 8000648:	4a45      	ldr	r2, [pc, #276]	@ (8000760 <MX_APPE_Init+0x174>)
 800064a:	f00b fd83 	bl	800c154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_FLASH_MANAGER, UTIL_SEQ_RFU, FM_BackgroundProcess);
 800064e:	4a45      	ldr	r2, [pc, #276]	@ (8000764 <MX_APPE_Init+0x178>)
 8000650:	2100      	movs	r1, #0
 8000652:	2080      	movs	r0, #128	@ 0x80
 8000654:	f00b fd7e 	bl	800c154 <UTIL_SEQ_RegTask>
  FD_SetStatus (FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8000658:	2101      	movs	r1, #1
  buttonDesc[B1].button = B1;
 800065a:	2500      	movs	r5, #0
  buttonDesc[B3].button = B3;
 800065c:	f04f 0a02 	mov.w	sl, #2
  buttonDesc[B2].button = B2;
 8000660:	460e      	mov	r6, r1
  FD_SetStatus (FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8000662:	4608      	mov	r0, r1
 8000664:	f003 f8e0 	bl	8003828 <FD_SetStatus>
  FD_SetStatus (FD_FLASHACCESS_RFTS_BYPASS, LL_FLASH_ENABLE);
 8000668:	4629      	mov	r1, r5
 800066a:	4650      	mov	r0, sl
 800066c:	f003 f8dc 	bl	8003828 <FD_SetStatus>
  FD_SetStatus (FD_FLASHACCESS_SYSTEM, LL_FLASH_ENABLE);
 8000670:	4629      	mov	r1, r5
 8000672:	4628      	mov	r0, r5
 8000674:	f003 f8d8 	bl	8003828 <FD_SetStatus>
  BSP_LED_Init(LED_BLUE);
 8000678:	4628      	mov	r0, r5
 800067a:	f007 f913 	bl	80078a4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800067e:	4630      	mov	r0, r6
 8000680:	f007 f910 	bl	80078a4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000684:	4650      	mov	r0, sl
  buttonDesc[B1].button = B1;
 8000686:	4f38      	ldr	r7, [pc, #224]	@ (8000768 <MX_APPE_Init+0x17c>)
  BSP_LED_Init(LED_RED);
 8000688:	f007 f90c 	bl	80078a4 <BSP_LED_Init>
  BSP_LED_On(LED_GREEN);
 800068c:	4630      	mov	r0, r6
 800068e:	f007 f951 	bl	8007934 <BSP_LED_On>
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 8000692:	4631      	mov	r1, r6
 8000694:	4628      	mov	r0, r5
  buttonDesc[B1].button = B1;
 8000696:	703d      	strb	r5, [r7, #0]
  buttonDesc[B2].button = B2;
 8000698:	f887 6020 	strb.w	r6, [r7, #32]
  buttonDesc[B3].button = B3;
 800069c:	f887 a040 	strb.w	sl, [r7, #64]	@ 0x40
  BSP_PB_Init(B1, BUTTON_MODE_EXTI);
 80006a0:	f007 f96c 	bl	800797c <BSP_PB_Init>
  BSP_PB_Init(B2, BUTTON_MODE_EXTI);
 80006a4:	4631      	mov	r1, r6
 80006a6:	4630      	mov	r0, r6
 80006a8:	f007 f968 	bl	800797c <BSP_PB_Init>
  BSP_PB_Init(B3, BUTTON_MODE_EXTI);
 80006ac:	4631      	mov	r1, r6
 80006ae:	4650      	mov	r0, sl
 80006b0:	f007 f964 	bl	800797c <BSP_PB_Init>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_1, UTIL_SEQ_RFU, APPE_Button1Action);
 80006b4:	4629      	mov	r1, r5
 80006b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_APPE_Init+0x180>)
 80006bc:	f00b fd4a 	bl	800c154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_2, UTIL_SEQ_RFU, APPE_Button2Action);
 80006c0:	4629      	mov	r1, r5
 80006c2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80006c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000770 <MX_APPE_Init+0x184>)
 80006c8:	f00b fd44 	bl	800c154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_3, UTIL_SEQ_RFU, APPE_Button3Action);
 80006cc:	4629      	mov	r1, r5
 80006ce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80006d2:	4a28      	ldr	r2, [pc, #160]	@ (8000774 <MX_APPE_Init+0x188>)
 80006d4:	463c      	mov	r4, r7
    UTIL_TIMER_Create( &buttonDesc[buttonIndex].longTimerId,
 80006d6:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8000784 <MX_APPE_Init+0x198>
 80006da:	f107 0860 	add.w	r8, r7, #96	@ 0x60
  UTIL_SEQ_RegTask(1U << TASK_BUTTON_3, UTIL_SEQ_RFU, APPE_Button3Action);
 80006de:	f00b fd39 	bl	800c154 <UTIL_SEQ_RegTask>
    UTIL_TIMER_Create( &buttonDesc[buttonIndex].longTimerId,
 80006e2:	2200      	movs	r2, #0
 80006e4:	9400      	str	r4, [sp, #0]
 80006e6:	1d20      	adds	r0, r4, #4
 80006e8:	464b      	mov	r3, r9
 80006ea:	4611      	mov	r1, r2
  for ( buttonIndex = B1; buttonIndex < BUTTON_NB_MAX; buttonIndex++ )
 80006ec:	3420      	adds	r4, #32
    UTIL_TIMER_Create( &buttonDesc[buttonIndex].longTimerId,
 80006ee:	f00b fea9 	bl	800c444 <UTIL_TIMER_Create>
  for ( buttonIndex = B1; buttonIndex < BUTTON_NB_MAX; buttonIndex++ )
 80006f2:	45a0      	cmp	r8, r4
 80006f4:	d1f5      	bne.n	80006e2 <MX_APPE_Init+0xf6>
  UTIL_SEQ_RegTask(1U << CFG_TASK_BPKA, UTIL_SEQ_RFU, BPKA_BG_Process);
 80006f6:	2040      	movs	r0, #64	@ 0x40
 80006f8:	2100      	movs	r1, #0
 80006fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000778 <MX_APPE_Init+0x18c>)
 80006fc:	f00b fd2a 	bl	800c154 <UTIL_SEQ_RegTask>
  if( SNVMA_Init((uint32_t *)CFG_SNVMA_START_ADDRESS) != SNVMA_ERROR_OK )
 8000700:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <MX_APPE_Init+0x190>)
 8000706:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 800070a:	1e53      	subs	r3, r2, #1
 800070c:	b29b      	uxth	r3, r3
 800070e:	428b      	cmp	r3, r1
 8000710:	bf9b      	ittet	ls
 8000712:	f643 70fe 	movwls	r0, #16382	@ 0x3ffe
 8000716:	eb00 00d2 	addls.w	r0, r0, r2, lsr #3
 800071a:	4819      	ldrhi	r0, [pc, #100]	@ (8000780 <MX_APPE_Init+0x194>)
 800071c:	0340      	lslls	r0, r0, #13
 800071e:	f004 fc99 	bl	8005054 <SNVMA_Init>
 8000722:	b978      	cbnz	r0, 8000744 <MX_APPE_Init+0x158>
  APP_BLE_Init();
 8000724:	f000 fe02 	bl	800132c <APP_BLE_Init>
  FD_SetStatus (FD_FLASHACCESS_RFTS_BYPASS, LL_FLASH_DISABLE);
 8000728:	2101      	movs	r1, #1
 800072a:	2002      	movs	r0, #2
 800072c:	f003 f87c 	bl	8003828 <FD_SetStatus>
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
 8000730:	2000      	movs	r0, #0
 8000732:	f002 f947 	bl	80029c4 <APP_DEBUG_SIGNAL_RESET>
}
 8000736:	2000      	movs	r0, #0
 8000738:	b002      	add	sp, #8
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    Error_Handler();
 800073e:	f000 f9ed 	bl	8000b1c <Error_Handler>
 8000742:	e778      	b.n	8000636 <MX_APPE_Init+0x4a>
    Error_Handler();
 8000744:	f000 f9ea 	bl	8000b1c <Error_Handler>
 8000748:	e7ec      	b.n	8000724 <MX_APPE_Init+0x138>
 800074a:	bf00      	nop
 800074c:	46020c00 	.word	0x46020c00
 8000750:	30000040 	.word	0x30000040
 8000754:	0802c240 	.word	0x0802c240
 8000758:	20000000 	.word	0x20000000
 800075c:	08005d6d 	.word	0x08005d6d
 8000760:	080030fd 	.word	0x080030fd
 8000764:	08003add 	.word	0x08003add
 8000768:	200005bc 	.word	0x200005bc
 800076c:	08001c8d 	.word	0x08001c8d
 8000770:	08001d91 	.word	0x08001d91
 8000774:	08001ddd 	.word	0x08001ddd
 8000778:	08002491 	.word	0x08002491
 800077c:	0bf90700 	.word	0x0bf90700
 8000780:	080fc000 	.word	0x080fc000
 8000784:	08000569 	.word	0x08000569

08000788 <MX_APPE_Process>:
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f00b bd1a 	b.w	800c1c4 <UTIL_SEQ_Run>

08000790 <UTIL_SEQ_Idle>:
  HAL_SuspendTick();
  UTIL_LPM_EnterLowPower();
  HAL_ResumeTick();
#endif /* CFG_LPM_LEVEL */
  return;
}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop

08000794 <UTIL_SEQ_PreIdle>:

void UTIL_SEQ_PreIdle( void )
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop

08000798 <UTIL_SEQ_PostIdle>:

  /* USER CODE END UTIL_SEQ_PreIdle_2 */
  return;
}

void UTIL_SEQ_PostIdle( void )
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <BPKACB_Process>:
  return;
}

void BPKACB_Process( void )
{
  UTIL_SEQ_SetTask(1U << CFG_TASK_BPKA, CFG_SEQ_PRIO_0);
 800079c:	2100      	movs	r1, #0
 800079e:	2040      	movs	r0, #64	@ 0x40
 80007a0:	f00b bcf0 	b.w	800c184 <UTIL_SEQ_SetTask>

080007a4 <HWCB_RNG_Process>:
/**
 * @brief Callback used by Random Number Generator to launch Task to generate Random Numbers
 */
void HWCB_RNG_Process( void )
{
  UTIL_SEQ_SetTask(1U << CFG_TASK_HW_RNG, TASK_PRIO_RNG);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2001      	movs	r0, #1
 80007a8:	f00b bcec 	b.w	800c184 <UTIL_SEQ_SetTask>

080007ac <AMM_RegisterBasicMemoryManager>:
}

void AMM_RegisterBasicMemoryManager (AMM_BasicMemoryManagerFunctions_t * const p_BasicMemoryManagerFunctions)
{
  /* Fulfill the function handle */
  p_BasicMemoryManagerFunctions->Init = AMM_WrapperInit;
 80007ac:	4903      	ldr	r1, [pc, #12]	@ (80007bc <AMM_RegisterBasicMemoryManager+0x10>)
  p_BasicMemoryManagerFunctions->Allocate = AMM_WrapperAllocate;
 80007ae:	4a04      	ldr	r2, [pc, #16]	@ (80007c0 <AMM_RegisterBasicMemoryManager+0x14>)
  p_BasicMemoryManagerFunctions->Free = AMM_WrapperFree;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <AMM_RegisterBasicMemoryManager+0x18>)
  p_BasicMemoryManagerFunctions->Allocate = AMM_WrapperAllocate;
 80007b2:	e9c0 1200 	strd	r1, r2, [r0]
  p_BasicMemoryManagerFunctions->Free = AMM_WrapperFree;
 80007b6:	6083      	str	r3, [r0, #8]
}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	08000561 	.word	0x08000561
 80007c0:	08000559 	.word	0x08000559
 80007c4:	08000555 	.word	0x08000555

080007c8 <AMM_ProcessRequest>:

void AMM_ProcessRequest(void)
{
  /* Trigger to call Advance Memory Manager process function */
  UTIL_SEQ_SetTask(1U << CFG_TASK_AMM, CFG_SEQ_PRIO_0);
 80007c8:	2100      	movs	r1, #0
 80007ca:	2020      	movs	r0, #32
 80007cc:	f00b bcda 	b.w	800c184 <UTIL_SEQ_SetTask>

080007d0 <FM_ProcessRequest>:
}

void FM_ProcessRequest(void)
{
  /* Trigger to call Flash Manager process function */
  UTIL_SEQ_SetTask(1U << CFG_TASK_FLASH_MANAGER, CFG_SEQ_PRIO_0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	2080      	movs	r0, #128	@ 0x80
 80007d4:	f00b bcd6 	b.w	800c184 <UTIL_SEQ_SetTask>

080007d8 <UTIL_ADV_TRACE_PreSendHook>:
  /* USER CODE END SCM_HSI_CLK_OFF_2 */
}
#endif /* ((CFG_LOG_SUPPORTED == 0) && (CFG_LPM_LEVEL != 0)) */

#if (CFG_LOG_SUPPORTED != 0)
void UTIL_ADV_TRACE_PreSendHook(void)
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop

080007dc <UTIL_ADV_TRACE_PostSendHook>:
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook */
}

void UTIL_ADV_TRACE_PostSendHook(void)
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <BSP_PB_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
#if (CFG_BUTTON_SUPPORTED == 1)
void BSP_PB_Callback(Button_TypeDef Button)
{
  buttonDesc[Button].longPressed = 0;
 80007e0:	2200      	movs	r2, #0
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <BSP_PB_Callback+0x18>)
  UTIL_TIMER_StartWithPeriod(&buttonDesc[Button].longTimerId, BUTTON_LONG_PRESS_THRESHOLD_MS);
 80007e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007e8:	eb03 1c40 	add.w	ip, r3, r0, lsl #5
 80007ec:	f10c 0004 	add.w	r0, ip, #4
  buttonDesc[Button].longPressed = 0;
 80007f0:	f88c 201c 	strb.w	r2, [ip, #28]
  UTIL_TIMER_StartWithPeriod(&buttonDesc[Button].longTimerId, BUTTON_LONG_PRESS_THRESHOLD_MS);
 80007f4:	f00b be9e 	b.w	800c534 <UTIL_TIMER_StartWithPeriod>
 80007f8:	200005bc 	.word	0x200005bc

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	2540      	movs	r5, #64	@ 0x40
{
 8000800:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	2100      	movs	r1, #0
 8000804:	462a      	mov	r2, r5
 8000806:	a808      	add	r0, sp, #32
 8000808:	f02b f876 	bl	802b8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	2220      	movs	r2, #32
 800080e:	2100      	movs	r1, #0
 8000810:	4668      	mov	r0, sp
 8000812:	f02b f871 	bl	802b8f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY);
 8000816:	2002      	movs	r0, #2
 8000818:	f008 fd7c 	bl	8009314 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800081c:	2000      	movs	r0, #0
 800081e:	f008 fd3d 	bl	800929c <HAL_PWREx_ControlVoltageScaling>
 8000822:	b108      	cbz	r0, 8000828 <SystemClock_Config+0x2c>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000826:	e7fe      	b.n	8000826 <SystemClock_Config+0x2a>
  HAL_PWR_EnableBkUpAccess();
 8000828:	4604      	mov	r4, r0
 800082a:	f008 fd0f 	bl	800924c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 800082e:	4a1e      	ldr	r2, [pc, #120]	@ (80008a8 <SystemClock_Config+0xac>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3e80 	mov.w	lr, #65536	@ 0x10000
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 8000834:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000838:	2181      	movs	r1, #129	@ 0x81
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMLOW);
 800083a:	f023 0318 	bic.w	r3, r3, #24
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000846:	2607      	movs	r6, #7
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000848:	2310      	movs	r3, #16
 800084a:	f44f 7280 	mov.w	r2, #256	@ 0x100
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV2;
 800084e:	f44f 1780 	mov.w	r7, #1048576	@ 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000858:	e9cd 6e08 	strd	r6, lr, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085c:	e9cd 710a 	strd	r7, r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
 8000860:	9410      	str	r4, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f008 fe0b 	bl	800947c <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	b108      	cbz	r0, 800086e <SystemClock_Config+0x72>
 800086a:	b672      	cpsid	i
  while (1)
 800086c:	e7fe      	b.n	800086c <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000870:	2402      	movs	r4, #2
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000872:	4668      	mov	r0, sp
 8000874:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	e9cd 3302 	strd	r3, r3, [sp, #8]
  RCC_ClkInitStruct.AHB5_PLL1_CLKDivider = RCC_SYSCLK_PLL1_DIV1;
 800087a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800087e:	e9cd 2400 	strd	r2, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000882:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHB5_HSEHSI_CLKDivider = RCC_SYSCLK_HSEHSI_DIV1;
 8000884:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000886:	f009 f8d3 	bl	8009a30 <HAL_RCC_ClockConfig>
 800088a:	b108      	cbz	r0, 8000890 <SystemClock_Config+0x94>
 800088c:	b672      	cpsid	i
  while (1)
 800088e:	e7fe      	b.n	800088e <SystemClock_Config+0x92>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_LSE);
 8000890:	4620      	mov	r0, r4
 8000892:	f007 fd51 	bl	8008338 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000896:	200e      	movs	r0, #14
 8000898:	f007 f9a4 	bl	8007be4 <HAL_InitTick>
 800089c:	b108      	cbz	r0, 80008a2 <SystemClock_Config+0xa6>
 800089e:	b672      	cpsid	i
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <SystemClock_Config+0xa4>
}
 80008a2:	b019      	add	sp, #100	@ 0x64
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	46020c00 	.word	0x46020c00

080008ac <PeriphCommonClock_Config>:
{
 80008ac:	b500      	push	{lr}
 80008ae:	b093      	sub	sp, #76	@ 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	2240      	movs	r2, #64	@ 0x40
 80008b2:	2100      	movs	r1, #0
 80008b4:	a801      	add	r0, sp, #4
 80008b6:	f02b f81f 	bl	802b8f8 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RADIOST;
 80008ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
  PeriphClkInit.RadioSlpTimClockSelection = RCC_RADIOSTCLKSOURCE_LSE;
 80008be:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c2:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RADIOST;
 80008c4:	9200      	str	r2, [sp, #0]
  PeriphClkInit.RadioSlpTimClockSelection = RCC_RADIOSTCLKSOURCE_LSE;
 80008c6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f009 fa6e 	bl	8009da8 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	b108      	cbz	r0, 80008d2 <PeriphCommonClock_Config+0x26>
 80008ce:	b672      	cpsid	i
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <PeriphCommonClock_Config+0x24>
}
 80008d2:	b013      	add	sp, #76	@ 0x4c
 80008d4:	f85d fb04 	ldr.w	pc, [sp], #4

080008d8 <MX_GPDMA1_Init>:
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <MX_GPDMA1_Init+0x44>)
{
 80008da:	b500      	push	{lr}
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008dc:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
{
 80008e0:	b083      	sub	sp, #12
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008e2:	f040 0001 	orr.w	r0, r0, #1
 80008e6:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 6, 0);
 80008ee:	2200      	movs	r2, #0
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008f0:	f003 0301 	and.w	r3, r3, #1
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 6, 0);
 80008f4:	2106      	movs	r1, #6
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008f6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 6, 0);
 80008f8:	201d      	movs	r0, #29
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80008fa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 6, 0);
 80008fc:	f007 fca2 	bl	8008244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8000900:	201d      	movs	r0, #29
 8000902:	f007 fcdb 	bl	80082bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 8000906:	201e      	movs	r0, #30
 8000908:	2200      	movs	r2, #0
 800090a:	2105      	movs	r1, #5
 800090c:	f007 fc9a 	bl	8008244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000910:	201e      	movs	r0, #30
}
 8000912:	b003      	add	sp, #12
 8000914:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8000918:	f007 bcd0 	b.w	80082bc <HAL_NVIC_EnableIRQ>
 800091c:	46020c00 	.word	0x46020c00

08000920 <MX_ICACHE_Init>:
  *         @arg @ref LL_PWR_ICACHERAM_STOP_FULL_RETENTION
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetICacheRAMStopRetention(uint32_t ICRAMPageRetention)
{
  MODIFY_REG(PWR->CR2, PWR_CR2_ICRAMPDS,
 8000920:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <MX_ICACHE_Init+0x24>)
{
 8000922:	b508      	push	{r3, lr}
 8000924:	6853      	ldr	r3, [r2, #4]
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000926:	2000      	movs	r0, #0
 8000928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092c:	6053      	str	r3, [r2, #4]
 800092e:	f008 fc6f 	bl	8009210 <HAL_ICACHE_ConfigAssociativityMode>
 8000932:	b108      	cbz	r0, 8000938 <MX_ICACHE_Init+0x18>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <MX_ICACHE_Init+0x16>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000938:	f008 fc7e 	bl	8009238 <HAL_ICACHE_Enable>
 800093c:	b108      	cbz	r0, 8000942 <MX_ICACHE_Init+0x22>
 800093e:	b672      	cpsid	i
  while (1)
 8000940:	e7fe      	b.n	8000940 <MX_ICACHE_Init+0x20>
}
 8000942:	bd08      	pop	{r3, pc}
 8000944:	46020800 	.word	0x46020800

08000948 <MX_RNG_Init>:
{
 8000948:	b508      	push	{r3, lr}
  hrng.Init.ClockErrorDetection = RNG_CED_DISABLE;
 800094a:	2320      	movs	r3, #32
  hrng.Instance = RNG;
 800094c:	4806      	ldr	r0, [pc, #24]	@ (8000968 <MX_RNG_Init+0x20>)
 800094e:	4a07      	ldr	r2, [pc, #28]	@ (800096c <MX_RNG_Init+0x24>)
  hrng.Init.ClockErrorDetection = RNG_CED_DISABLE;
 8000950:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000954:	f009 fbae 	bl	800a0b4 <HAL_RNG_Init>
 8000958:	b108      	cbz	r0, 800095e <MX_RNG_Init+0x16>
 800095a:	b672      	cpsid	i
  while (1)
 800095c:	e7fe      	b.n	800095c <MX_RNG_Init+0x14>
}
 800095e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HW_RNG_Disable( );
 8000962:	f002 ba39 	b.w	8002dd8 <HW_RNG_Disable>
 8000966:	bf00      	nop
 8000968:	200017c0 	.word	0x200017c0
 800096c:	420c0800 	.word	0x420c0800

08000970 <MX_RTC_Init>:
{
 8000970:	b570      	push	{r4, r5, r6, lr}
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000972:	2400      	movs	r4, #0
{
 8000974:	b094      	sub	sp, #80	@ 0x50
  RTC_AlarmTypeDef sAlarm = {0};
 8000976:	2230      	movs	r2, #48	@ 0x30
 8000978:	4621      	mov	r1, r4
 800097a:	a808      	add	r0, sp, #32
  hrtc.Instance = RTC;
 800097c:	4d22      	ldr	r5, [pc, #136]	@ (8000a08 <MX_RTC_Init+0x98>)
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800097e:	e9cd 4400 	strd	r4, r4, [sp]
 8000982:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000986:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800098a:	9406      	str	r4, [sp, #24]
  RTC_AlarmTypeDef sAlarm = {0};
 800098c:	f02a ffb4 	bl	802b8f8 <memset>
  hrtc.Instance = RTC;
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_RTC_Init+0x9c>)
  hrtc.Init.AsynchPrediv = 31;
 8000992:	221f      	movs	r2, #31
  hrtc.Instance = RTC;
 8000994:	602b      	str	r3, [r5, #0]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000996:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hrtc.Init.AsynchPrediv = 31;
 800099a:	60aa      	str	r2, [r5, #8]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800099c:	61eb      	str	r3, [r5, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009a4:	4628      	mov	r0, r5
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009a6:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009aa:	e9c5 2308 	strd	r2, r3, [r5, #32]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ae:	612c      	str	r4, [r5, #16]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009b0:	f009 fd6e 	bl	800a490 <HAL_RTC_Init>
 80009b4:	b108      	cbz	r0, 80009ba <MX_RTC_Init+0x4a>
 80009b6:	b672      	cpsid	i
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <MX_RTC_Init+0x48>
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80009ba:	4603      	mov	r3, r0
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80009bc:	4669      	mov	r1, sp
 80009be:	4628      	mov	r0, r5
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80009c0:	e9cd 3303 	strd	r3, r3, [sp, #12]
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80009c4:	9300      	str	r3, [sp, #0]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80009c6:	9305      	str	r3, [sp, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80009c8:	f009 fe16 	bl	800a5f8 <HAL_RTCEx_PrivilegeModeSet>
 80009cc:	b108      	cbz	r0, 80009d2 <MX_RTC_Init+0x62>
 80009ce:	b672      	cpsid	i
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MX_RTC_Init+0x60>
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80009d2:	4628      	mov	r0, r5
 80009d4:	f009 fdec 	bl	800a5b0 <HAL_RTCEx_SetSSRU_IT>
 80009d8:	4603      	mov	r3, r0
 80009da:	b108      	cbz	r0, 80009e0 <MX_RTC_Init+0x70>
 80009dc:	b672      	cpsid	i
  while (1)
 80009de:	e7fe      	b.n	80009de <MX_RTC_Init+0x6e>
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009e0:	f04f 567c 	mov.w	r6, #1056964608	@ 0x3f000000
  sAlarm.Alarm = RTC_ALARM_A;
 80009e4:	f44f 7480 	mov.w	r4, #256	@ 0x100
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009e8:	4628      	mov	r0, r5
 80009ea:	2201      	movs	r2, #1
 80009ec:	a908      	add	r1, sp, #32
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80009ee:	930f      	str	r3, [sp, #60]	@ 0x3c
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009f0:	9309      	str	r3, [sp, #36]	@ 0x24
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80009f4:	960e      	str	r6, [sp, #56]	@ 0x38
  sAlarm.Alarm = RTC_ALARM_A;
 80009f6:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009f8:	f009 fbca 	bl	800a190 <HAL_RTC_SetAlarm_IT>
 80009fc:	b108      	cbz	r0, 8000a02 <MX_RTC_Init+0x92>
 80009fe:	b672      	cpsid	i
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MX_RTC_Init+0x90>
}
 8000a02:	b014      	add	sp, #80	@ 0x50
 8000a04:	bd70      	pop	{r4, r5, r6, pc}
 8000a06:	bf00      	nop
 8000a08:	20001790 	.word	0x20001790
 8000a0c:	46007800 	.word	0x46007800

08000a10 <MX_USART1_UART_Init>:
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a10:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a12:	210c      	movs	r1, #12
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
  huart1.Init.BaudRate = 115200;
 8000a18:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
{
 8000a1c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000a1e:	4c14      	ldr	r4, [pc, #80]	@ (8000a70 <MX_USART1_UART_Init+0x60>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	e9c4 3104 	strd	r3, r1, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000a28:	e9c4 3206 	strd	r3, r2, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8000a30:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart1.Instance = USART1;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART1_UART_Init+0x64>)
  huart1.Init.BaudRate = 115200;
 8000a34:	6060      	str	r0, [r4, #4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4620      	mov	r0, r4
  huart1.Instance = USART1;
 8000a38:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3a:	f00a fedb 	bl	800b7f4 <HAL_UART_Init>
 8000a3e:	b108      	cbz	r0, 8000a44 <MX_USART1_UART_Init+0x34>
 8000a40:	b672      	cpsid	i
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <MX_USART1_UART_Init+0x32>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	4601      	mov	r1, r0
 8000a46:	4620      	mov	r0, r4
 8000a48:	f00b f8b8 	bl	800bbbc <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	b108      	cbz	r0, 8000a52 <MX_USART1_UART_Init+0x42>
 8000a4e:	b672      	cpsid	i
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MX_USART1_UART_Init+0x40>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	4601      	mov	r1, r0
 8000a54:	4620      	mov	r0, r4
 8000a56:	f00b f8f3 	bl	800bc40 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	b108      	cbz	r0, 8000a60 <MX_USART1_UART_Init+0x50>
 8000a5c:	b672      	cpsid	i
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <MX_USART1_UART_Init+0x4e>
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000a60:	4620      	mov	r0, r4
 8000a62:	f00b f86d 	bl	800bb40 <HAL_UARTEx_EnableFifoMode>
 8000a66:	b108      	cbz	r0, 8000a6c <MX_USART1_UART_Init+0x5c>
 8000a68:	b672      	cpsid	i
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <MX_USART1_UART_Init+0x5a>
}
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	200016c8 	.word	0x200016c8
 8000a74:	40013800 	.word	0x40013800

08000a78 <MX_GPIO_Init>:
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_GPIO_Init+0x54>)
{
 8000a7a:	b084      	sub	sp, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000a80:	f042 0202 	orr.w	r2, r2, #2
 8000a84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000a88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000a8c:	f002 0202 	and.w	r2, r2, #2
 8000a90:	9201      	str	r2, [sp, #4]
 8000a92:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000a98:	f042 0201 	orr.w	r2, r2, #1
 8000a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000aa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000aa4:	f002 0201 	and.w	r2, r2, #1
 8000aa8:	9202      	str	r2, [sp, #8]
 8000aaa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000ab0:	f042 0204 	orr.w	r2, r2, #4
 8000ab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	9303      	str	r3, [sp, #12]
 8000ac2:	9b03      	ldr	r3, [sp, #12]
}
 8000ac4:	b004      	add	sp, #16
  RT_DEBUG_GPIO_Init();
 8000ac6:	f001 bf7f 	b.w	80029c8 <RT_DEBUG_GPIO_Init>
 8000aca:	bf00      	nop
 8000acc:	46020c00 	.word	0x46020c00

08000ad0 <main>:
{
 8000ad0:	b508      	push	{r3, lr}
  HAL_Init();
 8000ad2:	f007 f8db 	bl	8007c8c <HAL_Init>
  MX_APPE_Config();
 8000ad6:	f7ff fd73 	bl	80005c0 <MX_APPE_Config>
  SystemClock_Config();
 8000ada:	f7ff fe8f 	bl	80007fc <SystemClock_Config>
  PeriphCommonClock_Config();
 8000ade:	f7ff fee5 	bl	80008ac <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000ae2:	f7ff ffc9 	bl	8000a78 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000ae6:	f7ff fef7 	bl	80008d8 <MX_GPDMA1_Init>
  hramcfg_SRAM1.Instance = RAMCFG_SRAM1;
 8000aea:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <main+0x44>)
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <main+0x48>)
 8000aee:	6003      	str	r3, [r0, #0]
  if (HAL_RAMCFG_Init(&hramcfg_SRAM1) != HAL_OK)
 8000af0:	f008 fc48 	bl	8009384 <HAL_RAMCFG_Init>
 8000af4:	b108      	cbz	r0, 8000afa <main+0x2a>
 8000af6:	b672      	cpsid	i
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <main+0x28>
 8000afa:	4604      	mov	r4, r0
  MX_RTC_Init();
 8000afc:	f7ff ff38 	bl	8000970 <MX_RTC_Init>
  MX_RNG_Init();
 8000b00:	f7ff ff22 	bl	8000948 <MX_RNG_Init>
  MX_ICACHE_Init();
 8000b04:	f7ff ff0c 	bl	8000920 <MX_ICACHE_Init>
  MX_APPE_Init(NULL);
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fd6f 	bl	80005ec <MX_APPE_Init>
    MX_APPE_Process();
 8000b0e:	f7ff fe3b 	bl	8000788 <MX_APPE_Process>
  while (1)
 8000b12:	e7fc      	b.n	8000b0e <main+0x3e>
 8000b14:	200017d4 	.word	0x200017d4
 8000b18:	40026000 	.word	0x40026000

08000b1c <Error_Handler>:
 8000b1c:	b672      	cpsid	i
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <Error_Handler+0x2>

08000b20 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <HAL_MspInit+0x44>)
{
 8000b22:	b500      	push	{lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
{
 8000b28:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	f040 0004 	orr.w	r0, r0, #4
 8000b2e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
 8000b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000b36:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	f003 0304 	and.w	r3, r3, #4
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000b3c:	2101      	movs	r1, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000b40:	2009      	movs	r0, #9
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8000b44:	f007 fb7e 	bl	8008244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b48:	2009      	movs	r0, #9
 8000b4a:	f007 fbb7 	bl	80082bc <HAL_NVIC_EnableIRQ>
  /* RADIO_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RADIO_IRQn, RADIO_INTR_PRIO_LOW, 0);
 8000b4e:	2042      	movs	r0, #66	@ 0x42
 8000b50:	2200      	movs	r2, #0
 8000b52:	2105      	movs	r1, #5
 8000b54:	f007 fb76 	bl	8008244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_IRQn);
 8000b58:	2042      	movs	r0, #66	@ 0x42

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	b003      	add	sp, #12
 8000b5c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(RADIO_IRQn);
 8000b60:	f007 bbac 	b.w	80082bc <HAL_NVIC_EnableIRQ>
 8000b64:	46020c00 	.word	0x46020c00

08000b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6e:	2248      	movs	r2, #72	@ 0x48
 8000b70:	2100      	movs	r1, #0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f02a fec0 	bl	802b8f8 <memset>
  if(hadc->Instance==ADC4)
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_ADC_MspInit+0x50>)
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d001      	beq.n	8000b84 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC4_MspInit 1 */

  }

}
 8000b80:	b014      	add	sp, #80	@ 0x50
 8000b82:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b8a:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f009 f90c 	bl	8009da8 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	b970      	cbnz	r0, 8000bb0 <HAL_ADC_MspInit+0x48>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_ADC_MspInit+0x54>)
 8000b94:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8000b98:	f042 0220 	orr.w	r2, r2, #32
 8000b9c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ba4:	f003 0320 	and.w	r3, r3, #32
 8000ba8:	9301      	str	r3, [sp, #4]
 8000baa:	9b01      	ldr	r3, [sp, #4]
}
 8000bac:	b014      	add	sp, #80	@ 0x50
 8000bae:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000bb0:	f7ff ffb4 	bl	8000b1c <Error_Handler>
 8000bb4:	e7ed      	b.n	8000b92 <HAL_ADC_MspInit+0x2a>
 8000bb6:	bf00      	nop
 8000bb8:	46021000 	.word	0x46021000
 8000bbc:	46020c00 	.word	0x46020c00

08000bc0 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC4)
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_ADC_MspDeInit+0x1c>)
 8000bc2:	6802      	ldr	r2, [r0, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d000      	beq.n	8000bca <HAL_ADC_MspDeInit+0xa>
  /* USER CODE BEGIN ADC4_MspDeInit 1 */

  /* USER CODE END ADC4_MspDeInit 1 */
  }

}
 8000bc8:	4770      	bx	lr
    __HAL_RCC_ADC4_CLK_DISABLE();
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <HAL_ADC_MspDeInit+0x20>)
 8000bcc:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8000bd0:	f023 0320 	bic.w	r3, r3, #32
 8000bd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	46021000 	.word	0x46021000
 8000be0:	46020c00 	.word	0x46020c00

08000be4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000be4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HAL_CRC_MspInit+0x2c>)
 8000be6:	6802      	ldr	r2, [r0, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d000      	beq.n	8000bee <HAL_CRC_MspInit+0xa>
 8000bec:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_CRC_MspInit+0x30>)
{
 8000bf0:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000bf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000c0a:	b002      	add	sp, #8
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40023000 	.word	0x40023000
 8000c14:	46020c00 	.word	0x46020c00

08000c18 <HAL_CRC_MspDeInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_CRC_MspDeInit+0x1c>)
 8000c1a:	6802      	ldr	r2, [r0, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d000      	beq.n	8000c22 <HAL_CRC_MspDeInit+0xa>
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8000c20:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_DISABLE();
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <HAL_CRC_MspDeInit+0x20>)
 8000c24:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023000 	.word	0x40023000
 8000c38:	46020c00 	.word	0x46020c00

08000c3c <HAL_RAMCFG_MspInit>:
{
  /* USER CODE BEGIN RAMCFG_MspInit 0 */

  /* USER CODE END RAMCFG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RAMCFG_CLK_ENABLE();
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <HAL_RAMCFG_MspInit+0x20>)
{
 8000c3e:	b082      	sub	sp, #8
    __HAL_RCC_RAMCFG_CLK_ENABLE();
 8000c40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000c44:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8000c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RAMCFG_MspInit 1 */

  /* USER CODE END RAMCFG_MspInit 1 */

}
 8000c58:	b002      	add	sp, #8
 8000c5a:	4770      	bx	lr
 8000c5c:	46020c00 	.word	0x46020c00

08000c60 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000c60:	b510      	push	{r4, lr}
 8000c62:	4604      	mov	r4, r0
 8000c64:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c66:	2248      	movs	r2, #72	@ 0x48
 8000c68:	2100      	movs	r1, #0
 8000c6a:	a802      	add	r0, sp, #8
 8000c6c:	f02a fe44 	bl	802b8f8 <memset>
  if(hrng->Instance==RNG)
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_RNG_MspInit+0x54>)
 8000c72:	6822      	ldr	r2, [r4, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d001      	beq.n	8000c7c <HAL_RNG_MspInit+0x1c>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000c78:	b014      	add	sp, #80	@ 0x50
 8000c7a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI;
 8000c80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000c86:	9202      	str	r2, [sp, #8]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI;
 8000c88:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8a:	f009 f88d 	bl	8009da8 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	b970      	cbnz	r0, 8000cae <HAL_RNG_MspInit+0x4e>
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_RNG_MspInit+0x58>)
 8000c92:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000c96:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9b01      	ldr	r3, [sp, #4]
}
 8000caa:	b014      	add	sp, #80	@ 0x50
 8000cac:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000cae:	f7ff ff35 	bl	8000b1c <Error_Handler>
 8000cb2:	e7ed      	b.n	8000c90 <HAL_RNG_MspInit+0x30>
 8000cb4:	420c0800 	.word	0x420c0800
 8000cb8:	46020c00 	.word	0x46020c00

08000cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cbc:	b510      	push	{r4, lr}
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc2:	2248      	movs	r2, #72	@ 0x48
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	a802      	add	r0, sp, #8
 8000cc8:	f02a fe16 	bl	802b8f8 <memset>
  if(hrtc->Instance==RTC)
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <HAL_RTC_MspInit+0x64>)
 8000cce:	6822      	ldr	r2, [r4, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d001      	beq.n	8000cd8 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cd4:	b014      	add	sp, #80	@ 0x50
 8000cd6:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cd8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ce2:	9202      	str	r2, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ce4:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce6:	f009 f85f 	bl	8009da8 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	b9b0      	cbnz	r0, 8000d1a <HAL_RTC_MspInit+0x5e>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <HAL_RTC_MspInit+0x68>)
    HAL_NVIC_SetPriority(RTC_IRQn, 4, 0);
 8000cee:	2200      	movs	r2, #0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cf0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
    HAL_NVIC_SetPriority(RTC_IRQn, 4, 0);
 8000cf4:	2002      	movs	r0, #2
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cf6:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8000cfa:	f8c3 10a8 	str.w	r1, [r3, #168]	@ 0xa8
 8000cfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
    HAL_NVIC_SetPriority(RTC_IRQn, 4, 0);
 8000d02:	2104      	movs	r1, #4
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_IRQn, 4, 0);
 8000d0c:	f007 fa9a 	bl	8008244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f007 fad3 	bl	80082bc <HAL_NVIC_EnableIRQ>
}
 8000d16:	b014      	add	sp, #80	@ 0x50
 8000d18:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000d1a:	f7ff feff 	bl	8000b1c <Error_Handler>
 8000d1e:	e7e5      	b.n	8000cec <HAL_RTC_MspInit+0x30>
 8000d20:	46007800 	.word	0x46007800
 8000d24:	46020c00 	.word	0x46020c00

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	2100      	movs	r1, #0
{
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	b09b      	sub	sp, #108	@ 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	2248      	movs	r2, #72	@ 0x48
 8000d32:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8000d38:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8000d3c:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3e:	f02a fddb 	bl	802b8f8 <memset>
  if(huart->Instance==USART1)
 8000d42:	4b53      	ldr	r3, [pc, #332]	@ (8000e90 <HAL_UART_MspInit+0x168>)
 8000d44:	6822      	ldr	r2, [r4, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x26>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d4a:	b01b      	add	sp, #108	@ 0x6c
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d52:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d54:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	f009 f826 	bl	8009da8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	f040 8088 	bne.w	8000e72 <HAL_UART_MspInit+0x14a>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d64:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6a:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6c:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <HAL_UART_MspInit+0x16c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	a903      	add	r1, sp, #12
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000d78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000d7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8000d80:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000d84:	9200      	str	r2, [sp, #0]
 8000d86:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d8c:	433a      	orrs	r2, r7
 8000d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000d92:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000d96:	403a      	ands	r2, r7
 8000d98:	9201      	str	r2, [sp, #4]
 8000d9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8000da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dac:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	4839      	ldr	r0, [pc, #228]	@ (8000e98 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000db6:	e9cd 6506 	strd	r6, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	e9cd 7604 	strd	r7, r6, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f008 f8ea 	bl	8008f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	4834      	ldr	r0, [pc, #208]	@ (8000e9c <HAL_UART_MspInit+0x174>)
 8000dca:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dcc:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	e9cd 6605 	strd	r6, r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f008 f8df 	bl	8008f98 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8000dda:	220b      	movs	r2, #11
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000ddc:	4d30      	ldr	r5, [pc, #192]	@ (8000ea0 <HAL_UART_MspInit+0x178>)
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8000dde:	2301      	movs	r3, #1
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8000de0:	606a      	str	r2, [r5, #4]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 8000de2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000de6:	492f      	ldr	r1, [pc, #188]	@ (8000ea4 <HAL_UART_MspInit+0x17c>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000de8:	4628      	mov	r0, r5
    handle_GPDMA1_Channel1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	e9c5 6602 	strd	r6, r6, [r5, #8]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000dee:	e9c5 6606 	strd	r6, r6, [r5, #24]
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000df2:	e9c5 660b 	strd	r6, r6, [r5, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8000df6:	6029      	str	r1, [r5, #0]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 8000df8:	612e      	str	r6, [r5, #16]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000dfa:	622e      	str	r6, [r5, #32]
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8000dfc:	636e      	str	r6, [r5, #52]	@ 0x34
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8000dfe:	626b      	str	r3, [r5, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8000e00:	62ab      	str	r3, [r5, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 8000e02:	616a      	str	r2, [r5, #20]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8000e04:	f007 fc1c 	bl	8008640 <HAL_DMA_Init>
 8000e08:	2800      	cmp	r0, #0
 8000e0a:	d13e      	bne.n	8000e8a <HAL_UART_MspInit+0x162>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4824      	ldr	r0, [pc, #144]	@ (8000ea0 <HAL_UART_MspInit+0x178>)
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel1);
 8000e10:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000e14:	65ec      	str	r4, [r5, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e16:	f007 fe71 	bl	8008afc <HAL_DMA_ConfigChannelAttributes>
 8000e1a:	bb98      	cbnz	r0, 8000e84 <HAL_UART_MspInit+0x15c>
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000e20:	4d21      	ldr	r5, [pc, #132]	@ (8000ea8 <HAL_UART_MspInit+0x180>)
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000e22:	2300      	movs	r3, #0
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8000e24:	200c      	movs	r0, #12
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8000e26:	2201      	movs	r2, #1
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e28:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000e2a:	2108      	movs	r1, #8
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000e2c:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000e30:	e9c5 3305 	strd	r3, r3, [r5, #20]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000e34:	e9c5 3307 	strd	r3, r3, [r5, #28]
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000e38:	e9c5 330b 	strd	r3, r3, [r5, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8000e3c:	636b      	str	r3, [r5, #52]	@ 0x34
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <HAL_UART_MspInit+0x184>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000e40:	4628      	mov	r0, r5
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8000e42:	e9c5 2209 	strd	r2, r2, [r5, #36]	@ 0x24
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8000e46:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000e48:	6129      	str	r1, [r5, #16]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8000e4a:	f007 fbf9 	bl	8008640 <HAL_DMA_Init>
 8000e4e:	b9b0      	cbnz	r0, 8000e7e <HAL_UART_MspInit+0x156>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e50:	2110      	movs	r1, #16
 8000e52:	4815      	ldr	r0, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0x180>)
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8000e54:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8000e56:	65ec      	str	r4, [r5, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e58:	f007 fe50 	bl	8008afc <HAL_DMA_ConfigChannelAttributes>
 8000e5c:	b960      	cbnz	r0, 8000e78 <HAL_UART_MspInit+0x150>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2107      	movs	r1, #7
 8000e62:	202e      	movs	r0, #46	@ 0x2e
 8000e64:	f007 f9ee 	bl	8008244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e68:	202e      	movs	r0, #46	@ 0x2e
 8000e6a:	f007 fa27 	bl	80082bc <HAL_NVIC_EnableIRQ>
}
 8000e6e:	b01b      	add	sp, #108	@ 0x6c
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000e72:	f7ff fe53 	bl	8000b1c <Error_Handler>
 8000e76:	e774      	b.n	8000d62 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8000e78:	f7ff fe50 	bl	8000b1c <Error_Handler>
 8000e7c:	e7ef      	b.n	8000e5e <HAL_UART_MspInit+0x136>
      Error_Handler();
 8000e7e:	f7ff fe4d 	bl	8000b1c <Error_Handler>
 8000e82:	e7e5      	b.n	8000e50 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8000e84:	f7ff fe4a 	bl	8000b1c <Error_Handler>
 8000e88:	e7c8      	b.n	8000e1c <HAL_UART_MspInit+0xf4>
      Error_Handler();
 8000e8a:	f7ff fe47 	bl	8000b1c <Error_Handler>
 8000e8e:	e7bd      	b.n	8000e0c <HAL_UART_MspInit+0xe4>
 8000e90:	40013800 	.word	0x40013800
 8000e94:	46020c00 	.word	0x46020c00
 8000e98:	42020400 	.word	0x42020400
 8000e9c:	42020000 	.word	0x42020000
 8000ea0:	2000164c 	.word	0x2000164c
 8000ea4:	400200d0 	.word	0x400200d0
 8000ea8:	200015d4 	.word	0x200015d4
 8000eac:	40020050 	.word	0x40020050

08000eb0 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_UART_MspDeInit+0x48>)
 8000eb2:	6802      	ldr	r2, [r0, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d000      	beq.n	8000eba <HAL_UART_MspDeInit+0xa>
 8000eb8:	4770      	bx	lr
{
 8000eba:	b510      	push	{r4, lr}
 8000ebc:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8000efc <HAL_UART_MspDeInit+0x4c>)

    /**USART1 GPIO Configuration
    PB12     ------> USART1_TX
    PA8     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000ec0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
    __HAL_RCC_USART1_CLK_DISABLE();
 8000ec4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <HAL_UART_MspDeInit+0x50>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8000eca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ece:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8000ed2:	f008 f925 	bl	8009120 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eda:	480a      	ldr	r0, [pc, #40]	@ (8000f04 <HAL_UART_MspDeInit+0x54>)
 8000edc:	f008 f920 	bl	8009120 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8000ee0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8000ee4:	f007 fc52 	bl	800878c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8000ee8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8000eea:	f007 fc4f 	bl	800878c <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000ef2:	202e      	movs	r0, #46	@ 0x2e
 8000ef4:	f007 b9f0 	b.w	80082d8 <HAL_NVIC_DisableIRQ>
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	46020c00 	.word	0x46020c00
 8000f00:	42020400 	.word	0x42020400
 8000f04:	42020000 	.word	0x42020000

08000f08 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler>
 8000f0a:	bf00      	nop

08000f0c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <HardFault_Handler>
 8000f0e:	bf00      	nop

08000f10 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler>
 8000f12:	bf00      	nop

08000f14 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <BusFault_Handler>
 8000f16:	bf00      	nop

08000f18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler>
 8000f1a:	bf00      	nop

08000f1c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f006 becc 	b.w	8007cc4 <HAL_IncTick>

08000f2c <RTC_IRQHandler>:
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f2c:	4801      	ldr	r0, [pc, #4]	@ (8000f34 <RTC_IRQHandler+0x8>)
 8000f2e:	f009 ba41 	b.w	800a3b4 <HAL_RTC_AlarmIRQHandler>
 8000f32:	bf00      	nop
 8000f34:	20001790 	.word	0x20001790

08000f38 <RCC_IRQHandler>:
{
  /* USER CODE BEGIN RCC_IRQn 0 */

  /* USER CODE END RCC_IRQn 0 */
  /* Check the RCC interrupt source */
  if(__HAL_RCC_GET_IT(RCC_IT_HSERDY))
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <RCC_IRQHandler+0x20>)
 8000f3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000f3c:	06d1      	lsls	r1, r2, #27
 8000f3e:	d407      	bmi.n	8000f50 <RCC_IRQHandler+0x18>
    __HAL_RCC_CLEAR_IT(RCC_IT_HSERDY);
    #if (CFG_SCM_SUPPORTED == 1)
      scm_hserdy_isr();
    #endif /* CFG_SCM_SUPPORTED */
  }
  else if(__HAL_RCC_GET_IT(RCC_IT_PLL1RDY))
 8000f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000f42:	0652      	lsls	r2, r2, #25
 8000f44:	d400      	bmi.n	8000f48 <RCC_IRQHandler+0x10>
    #endif /* CFG_SCM_SUPPORTED */
  }
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f46:	4770      	bx	lr
    __HAL_RCC_CLEAR_IT(RCC_IT_PLL1RDY);
 8000f48:	2240      	movs	r2, #64	@ 0x40
 8000f4a:	659a      	str	r2, [r3, #88]	@ 0x58
      scm_pllrdy_isr();
 8000f4c:	f006 b9dc 	b.w	8007308 <scm_pllrdy_isr>
    __HAL_RCC_CLEAR_IT(RCC_IT_HSERDY);
 8000f50:	2210      	movs	r2, #16
 8000f52:	659a      	str	r2, [r3, #88]	@ 0x58
      scm_hserdy_isr();
 8000f54:	f006 b84a 	b.w	8006fec <scm_hserdy_isr>
 8000f58:	46020c00 	.word	0x46020c00

08000f5c <GPDMA1_Channel0_IRQHandler>:
void GPDMA1_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8000f5c:	4801      	ldr	r0, [pc, #4]	@ (8000f64 <GPDMA1_Channel0_IRQHandler+0x8>)
 8000f5e:	f007 bd0d 	b.w	800897c <HAL_DMA_IRQHandler>
 8000f62:	bf00      	nop
 8000f64:	200015d4 	.word	0x200015d4

08000f68 <GPDMA1_Channel1_IRQHandler>:
void GPDMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8000f68:	4801      	ldr	r0, [pc, #4]	@ (8000f70 <GPDMA1_Channel1_IRQHandler+0x8>)
 8000f6a:	f007 bd07 	b.w	800897c <HAL_DMA_IRQHandler>
 8000f6e:	bf00      	nop
 8000f70:	2000164c 	.word	0x2000164c

08000f74 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f74:	4801      	ldr	r0, [pc, #4]	@ (8000f7c <USART1_IRQHandler+0x8>)
 8000f76:	f00a b8f3 	b.w	800b160 <HAL_UART_IRQHandler>
 8000f7a:	bf00      	nop
 8000f7c:	200016c8 	.word	0x200016c8

08000f80 <RADIO_IRQHandler>:

/**
  * @brief This function handles 2.4GHz RADIO global interrupt.
  */
void RADIO_IRQHandler(void)
{
 8000f80:	b500      	push	{lr}
 8000f82:	b083      	sub	sp, #12
  /* USER CODE BEGIN RADIO_IRQn 0 */
  /* WORKAROUND : Force AHB5 synchronization by waiting one edge of the LL Sleep Clock */
  uint32_t mul,div;
  ll_intf_get_aligned_us_now(&mul, &div);
 8000f84:	4668      	mov	r0, sp
 8000f86:	a901      	add	r1, sp, #4
 8000f88:	f00f fcac 	bl	80108e4 <ll_intf_get_aligned_us_now>
  /* USER CODE END RADIO_IRQn 0 */

  if(NULL != radio_callback)
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <RADIO_IRQHandler+0x2c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b103      	cbz	r3, 8000f94 <RADIO_IRQHandler+0x14>
  {
    radio_callback();
 8000f92:	4798      	blx	r3
  CLEAR_BIT(RCC->RADIOENR, RCC_RADIOENR_STRADIOCLKON);
 8000f94:	4a06      	ldr	r2, [pc, #24]	@ (8000fb0 <RADIO_IRQHandler+0x30>)
 8000f96:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f9e:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
  __ASM volatile ("isb 0xF":::"memory");
 8000fa2:	f3bf 8f6f 	isb	sy
  __ISB();

  /* USER CODE BEGIN RADIO_IRQn 1 */

  /* USER CODE END RADIO_IRQn 1 */
}
 8000fa6:	b003      	add	sp, #12
 8000fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fac:	2000578c 	.word	0x2000578c
 8000fb0:	46020c00 	.word	0x46020c00

08000fb4 <HASH_IRQHandler>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HASH_IRQHandler+0x44>)

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8000fba:	b510      	push	{r4, lr}
 8000fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fc4:	f3bf 8f6f 	isb	sy
  /* USER CODE END HASH_IRQn 0 */

  /* Disable SW radio low interrupt to prevent nested calls */
  NVIC_DisableIRQ(RADIO_SW_LOW_INTR_NUM);

  if(NULL != low_isr_callback) {
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HASH_IRQHandler+0x48>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	b103      	cbz	r3, 8000fd0 <HASH_IRQHandler+0x1c>
    low_isr_callback();
 8000fce:	4798      	blx	r3
  }

  /* Check if nested SW radio low interrupt has been requested*/
  if(radio_sw_low_isr_is_running_high_prio != 0) {
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8001000 <HASH_IRQHandler+0x4c>)
 8000fd2:	7823      	ldrb	r3, [r4, #0]
 8000fd4:	b923      	cbnz	r3, 8000fe0 <HASH_IRQHandler+0x2c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <HASH_IRQHandler+0x44>)
 8000fdc:	605a      	str	r2, [r3, #4]
  NVIC_EnableIRQ(RADIO_SW_LOW_INTR_NUM);

  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 8000fde:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, RADIO_INTR_PRIO_LOW, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	203d      	movs	r0, #61	@ 0x3d
 8000fe6:	f007 f92d 	bl	8008244 <HAL_NVIC_SetPriority>
    radio_sw_low_isr_is_running_high_prio = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	7023      	strb	r3, [r4, #0]
 8000fee:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ff2:	4b01      	ldr	r3, [pc, #4]	@ (8000ff8 <HASH_IRQHandler+0x44>)
 8000ff4:	605a      	str	r2, [r3, #4]
}
 8000ff6:	bd10      	pop	{r4, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	20005788 	.word	0x20005788
 8001000:	2000576e 	.word	0x2000576e

08001004 <EXTI6_IRQHandler>:
/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
  BSP_PB_IRQHandler(B2);
 8001004:	2001      	movs	r0, #1
 8001006:	f006 bd67 	b.w	8007ad8 <BSP_PB_IRQHandler>
 800100a:	bf00      	nop

0800100c <EXTI7_IRQHandler>:
/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
  BSP_PB_IRQHandler(B3);
 800100c:	2002      	movs	r0, #2
 800100e:	f006 bd63 	b.w	8007ad8 <BSP_PB_IRQHandler>
 8001012:	bf00      	nop

08001014 <EXTI13_IRQHandler>:
/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
  BSP_PB_IRQHandler(B1);
 8001014:	2000      	movs	r0, #0
 8001016:	f006 bd5f 	b.w	8007ad8 <BSP_PB_IRQHandler>
 800101a:	bf00      	nop

0800101c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	490d      	ldr	r1, [pc, #52]	@ (8001054 <_sbrk+0x38>)
{
 800101e:	4603      	mov	r3, r0
 8001020:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001022:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <_sbrk+0x3c>)
 8001024:	4c0d      	ldr	r4, [pc, #52]	@ (800105c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001026:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800102a:	b120      	cbz	r0, 8001036 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102c:	4403      	add	r3, r0
 800102e:	4293      	cmp	r3, r2
 8001030:	d807      	bhi.n	8001042 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001032:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001034:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001036:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <_sbrk+0x44>)
 8001038:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4403      	add	r3, r0
 800103c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800103e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001040:	d9f7      	bls.n	8001032 <_sbrk+0x16>
    errno = ENOMEM;
 8001042:	f02a fc61 	bl	802b908 <__errno>
 8001046:	220c      	movs	r2, #12
 8001048:	4603      	mov	r3, r0
    return (void *)-1;
 800104a:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bd10      	pop	{r4, pc}
 8001052:	bf00      	nop
 8001054:	200017e0 	.word	0x200017e0
 8001058:	20020000 	.word	0x20020000
 800105c:	00001000 	.word	0x00001000
 8001060:	2000a288 	.word	0x2000a288

08001064 <Switch_OFF_GPIO>:
  return;
}

static void Switch_OFF_GPIO(void *arg)
{
  BSP_LED_Off(LED_GREEN);
 8001064:	2001      	movs	r0, #1
 8001066:	f006 bc77 	b.w	8007958 <BSP_LED_Off>
 800106a:	bf00      	nop

0800106c <Adv_Cancel_Req>:
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SEQ_PRIO_0);
 800106c:	2100      	movs	r1, #0
 800106e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001072:	f00b b887 	b.w	800c184 <UTIL_SEQ_SetTask>
 8001076:	bf00      	nop

08001078 <Ble_UserEvtRx>:
  BleEvtPacket_t *phcievt = NULL;
 8001078:	2300      	movs	r3, #0
{
 800107a:	b500      	push	{lr}
 800107c:	b083      	sub	sp, #12
  LST_remove_head ( &BleAsynchEventQueue, (tListNode **)&phcievt );
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <Ble_UserEvtRx+0x50>)
 8001080:	a901      	add	r1, sp, #4
  BleEvtPacket_t *phcievt = NULL;
 8001082:	9301      	str	r3, [sp, #4]
  LST_remove_head ( &BleAsynchEventQueue, (tListNode **)&phcievt );
 8001084:	f006 f9b6 	bl	80073f4 <LST_remove_head>
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(phcievt->evtserial));
 8001088:	9801      	ldr	r0, [sp, #4]
 800108a:	3008      	adds	r0, #8
 800108c:	f00a ff02 	bl	800be94 <SVCCTL_UserEvtRx>
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001090:	b188      	cbz	r0, 80010b6 <Ble_UserEvtRx+0x3e>
    AMM_Free((uint32_t *)phcievt);
 8001092:	9801      	ldr	r0, [sp, #4]
 8001094:	f004 fde2 	bl	8005c5c <AMM_Free>
  if ((LST_is_empty(&BleAsynchEventQueue) == FALSE) && (svctl_return_status != SVCCTL_UserEvtFlowDisable) )
 8001098:	480b      	ldr	r0, [pc, #44]	@ (80010c8 <Ble_UserEvtRx+0x50>)
 800109a:	f006 f97b 	bl	8007394 <LST_is_empty>
 800109e:	b918      	cbnz	r0, 80010a8 <Ble_UserEvtRx+0x30>
    UTIL_SEQ_SetTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SEQ_PRIO_0);
 80010a0:	4601      	mov	r1, r0
 80010a2:	2004      	movs	r0, #4
 80010a4:	f00b f86e 	bl	800c184 <UTIL_SEQ_SetTask>
  UTIL_SEQ_SetTask(1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 80010a8:	2100      	movs	r1, #0
 80010aa:	2010      	movs	r0, #16
 80010ac:	f00b f86a 	bl	800c184 <UTIL_SEQ_SetTask>
}
 80010b0:	b003      	add	sp, #12
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4
    LST_insert_head ( &BleAsynchEventQueue, (tListNode *)phcievt );
 80010b6:	9901      	ldr	r1, [sp, #4]
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <Ble_UserEvtRx+0x50>)
 80010ba:	f006 f977 	bl	80073ac <LST_insert_head>
  if ((LST_is_empty(&BleAsynchEventQueue) == FALSE) && (svctl_return_status != SVCCTL_UserEvtFlowDisable) )
 80010be:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <Ble_UserEvtRx+0x50>)
 80010c0:	f006 f968 	bl	8007394 <LST_is_empty>
 80010c4:	e7f0      	b.n	80010a8 <Ble_UserEvtRx+0x30>
 80010c6:	bf00      	nop
 80010c8:	200055fc 	.word	0x200055fc

080010cc <BleStack_Process_BG>:
{
 80010cc:	b508      	push	{r3, lr}
  if (BleStack_Process( ) == 0x0)
 80010ce:	f022 faf3 	bl	80236b8 <BleStack_Process>
 80010d2:	b100      	cbz	r0, 80010d6 <BleStack_Process_BG+0xa>
}
 80010d4:	bd08      	pop	{r3, pc}
 80010d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BleStackCB_Process( );
 80010da:	f001 ba47 	b.w	800256c <BleStackCB_Process>
 80010de:	bf00      	nop

080010e0 <BLE_ResumeFlowProcessCallback>:
  ll_intf_chng_evnt_hndlr_state( notify_options );
 80010e0:	f04f 000f 	mov.w	r0, #15
 80010e4:	f00f bc1a 	b.w	801091c <ll_intf_chng_evnt_hndlr_state>

080010e8 <BLE_NvmCallback>:
  if (CbkStatus != SNVMA_OPERATION_COMPLETE)
 80010e8:	b900      	cbnz	r0, 80010ec <BLE_NvmCallback+0x4>
}
 80010ea:	4770      	bx	lr
    SNVMA_Write (APP_BLE_NvmBuffer,
 80010ec:	2000      	movs	r0, #0
 80010ee:	4901      	ldr	r1, [pc, #4]	@ (80010f4 <BLE_NvmCallback+0xc>)
 80010f0:	f004 bb4a 	b.w	8005788 <SNVMA_Write>
 80010f4:	080010e9 	.word	0x080010e9

080010f8 <Adv_Cancel>:
  return;
}

static void Adv_Cancel(void)
{
 80010f8:	b510      	push	{r4, lr}
  BSP_LED_Off(LED_GREEN);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f006 fc2c 	bl	8007958 <BSP_LED_Off>
      status = aci_gap_set_non_discoverable();
 8001100:	f001 f894 	bl	800222c <aci_gap_set_non_discoverable>
 8001104:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 8001106:	b130      	cbz	r0, 8001116 <Adv_Cancel+0x1e>

  APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_STOP);

  return;
}
 8001108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_INFO_APP("aci_gap_set_non_discoverable - fail, result: 0x%02X\n",status);
 800110c:	2102      	movs	r1, #2
 800110e:	2000      	movs	r0, #0
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <Adv_Cancel+0x30>)
 8001112:	f001 bc7d 	b.w	8002a10 <Log_Module_Print>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 8001116:	4c05      	ldr	r4, [pc, #20]	@ (800112c <Adv_Cancel+0x34>)
        LOG_INFO_APP("==>> aci_gap_set_non_discoverable - Success\n");
 8001118:	2102      	movs	r1, #2
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 800111a:	7620      	strb	r0, [r4, #24]
        LOG_INFO_APP("==>> aci_gap_set_non_discoverable - Success\n");
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <Adv_Cancel+0x38>)
}
 800111e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LOG_INFO_APP("==>> aci_gap_set_non_discoverable - Success\n");
 8001122:	f001 bc75 	b.w	8002a10 <Log_Module_Print>
 8001126:	bf00      	nop
 8001128:	0802c248 	.word	0x0802c248
 800112c:	200055a4 	.word	0x200055a4
 8001130:	0802c280 	.word	0x0802c280

08001134 <APP_BLE_Procedure_Gap_Peripheral>:
{
 8001134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001138:	4604      	mov	r4, r0
 800113a:	b088      	sub	sp, #32
  switch(ProcGapPeripheralId)
 800113c:	2806      	cmp	r0, #6
 800113e:	d825      	bhi.n	800118c <APP_BLE_Procedure_Gap_Peripheral+0x58>
 8001140:	e8df f000 	tbb	[pc, r0]
 8001144:	752b7c84 	.word	0x752b7c84
 8001148:	2424      	.short	0x2424
 800114a:	04          	.byte	0x04
 800114b:	00          	.byte	0x00
       status = aci_l2cap_connection_parameter_update_req(
 800114c:	2300      	movs	r3, #0
      if (bleAppContext.connIntervalFlag != 0)
 800114e:	4965      	ldr	r1, [pc, #404]	@ (80012e4 <APP_BLE_Procedure_Gap_Peripheral+0x1b0>)
       status = aci_l2cap_connection_parameter_update_req(
 8001150:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
      if (bleAppContext.connIntervalFlag != 0)
 8001154:	f891 204c 	ldrb.w	r2, [r1, #76]	@ 0x4c
       status = aci_l2cap_connection_parameter_update_req(
 8001158:	8ac8      	ldrh	r0, [r1, #22]
 800115a:	429a      	cmp	r2, r3
 800115c:	bf19      	ittee	ne
 800115e:	461c      	movne	r4, r3
 8001160:	2228      	movne	r2, #40	@ 0x28
 8001162:	f44f 7248 	moveq.w	r2, #800	@ 0x320
 8001166:	2401      	moveq	r4, #1
 8001168:	9500      	str	r5, [sp, #0]
        bleAppContext.connIntervalFlag = 0;
 800116a:	f881 404c 	strb.w	r4, [r1, #76]	@ 0x4c
       status = aci_l2cap_connection_parameter_update_req(
 800116e:	4611      	mov	r1, r2
 8001170:	f001 f8b4 	bl	80022dc <aci_l2cap_connection_parameter_update_req>
 8001174:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 8001176:	2800      	cmp	r0, #0
 8001178:	f000 8098 	beq.w	80012ac <APP_BLE_Procedure_Gap_Peripheral+0x178>
        LOG_INFO_APP("aci_l2cap_connection_parameter_update_req - fail, result: 0x%02X\n",status);
 800117c:	2102      	movs	r1, #2
 800117e:	2000      	movs	r0, #0
 8001180:	4a59      	ldr	r2, [pc, #356]	@ (80012e8 <APP_BLE_Procedure_Gap_Peripheral+0x1b4>)
}
 8001182:	b008      	add	sp, #32
 8001184:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("aci_gap_set_non_discoverable - fail, result: 0x%02X\n",status);
 8001188:	f001 bc42 	b.w	8002a10 <Log_Module_Print>
  switch(ProcGapPeripheralId)
 800118c:	2805      	cmp	r0, #5
 800118e:	d070      	beq.n	8001272 <APP_BLE_Procedure_Gap_Peripheral+0x13e>
 8001190:	2804      	cmp	r0, #4
 8001192:	d062      	beq.n	800125a <APP_BLE_Procedure_Gap_Peripheral+0x126>
}
 8001194:	b008      	add	sp, #32
 8001196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch(ProcGapPeripheralId)
 800119a:	f04f 0807 	mov.w	r8, #7
 800119e:	f44f 6a7a 	mov.w	sl, #4000	@ 0xfa0
 80011a2:	f44f 69c8 	mov.w	r9, #1600	@ 0x640
 80011a6:	2403      	movs	r4, #3
    	LOG_INFO_APP("Inside the Set discoverable \r \n");
 80011a8:	2102      	movs	r1, #2
 80011aa:	2000      	movs	r0, #0
 80011ac:	4a4f      	ldr	r2, [pc, #316]	@ (80012ec <APP_BLE_Procedure_Gap_Peripheral+0x1b8>)
 80011ae:	f001 fc2f 	bl	8002a10 <Log_Module_Print>
    		for(int i = 0 ; i < 9 ; i ++ ) {
 80011b2:	4d4f      	ldr	r5, [pc, #316]	@ (80012f0 <APP_BLE_Procedure_Gap_Peripheral+0x1bc>)
    			LOG_INFO_APP("%02x:",Meter_Serial_Number_Received[i]);
 80011b4:	4f4f      	ldr	r7, [pc, #316]	@ (80012f4 <APP_BLE_Procedure_Gap_Peripheral+0x1c0>)
 80011b6:	f105 0609 	add.w	r6, r5, #9
 80011ba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80011be:	463a      	mov	r2, r7
 80011c0:	2102      	movs	r1, #2
 80011c2:	2000      	movs	r0, #0
 80011c4:	f001 fc24 	bl	8002a10 <Log_Module_Print>
    		for(int i = 0 ; i < 9 ; i ++ ) {
 80011c8:	42ae      	cmp	r6, r5
 80011ca:	d1f6      	bne.n	80011ba <APP_BLE_Procedure_Gap_Peripheral+0x86>
    		LOG_INFO_APP("\n \r");
 80011cc:	2102      	movs	r1, #2
 80011ce:	2000      	movs	r0, #0
 80011d0:	4a49      	ldr	r2, [pc, #292]	@ (80012f8 <APP_BLE_Procedure_Gap_Peripheral+0x1c4>)
 80011d2:	f001 fc1d 	bl	8002a10 <Log_Module_Print>
      status = aci_gap_set_discoverable(paramD,
 80011d6:	2309      	movs	r3, #9
 80011d8:	2500      	movs	r5, #0
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <APP_BLE_Procedure_Gap_Peripheral+0x1c8>)
 80011de:	4652      	mov	r2, sl
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	4649      	mov	r1, r9
 80011e4:	462b      	mov	r3, r5
 80011e6:	4620      	mov	r0, r4
 80011e8:	e9cd 5505 	strd	r5, r5, [sp, #20]
 80011ec:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80011f0:	9500      	str	r5, [sp, #0]
 80011f2:	f001 f81d 	bl	8002230 <aci_gap_set_discoverable>
 80011f6:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d064      	beq.n	80012c6 <APP_BLE_Procedure_Gap_Peripheral+0x192>
        LOG_INFO_APP("==>> aci_gap_set_discoverable - fail, result: 0x%02X\n", status);
 80011fc:	2102      	movs	r1, #2
 80011fe:	4628      	mov	r0, r5
 8001200:	4a3f      	ldr	r2, [pc, #252]	@ (8001300 <APP_BLE_Procedure_Gap_Peripheral+0x1cc>)
 8001202:	f001 fc05 	bl	8002a10 <Log_Module_Print>
        status = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8001206:	200a      	movs	r0, #10
 8001208:	f001 f842 	bl	8002290 <aci_gap_delete_ad_type>
       if (status != BLE_STATUS_SUCCESS)
 800120c:	2800      	cmp	r0, #0
 800120e:	d162      	bne.n	80012d6 <APP_BLE_Procedure_Gap_Peripheral+0x1a2>
       status = aci_gap_update_adv_data(adv_data_len, adv_data_p);
 8001210:	493c      	ldr	r1, [pc, #240]	@ (8001304 <APP_BLE_Procedure_Gap_Peripheral+0x1d0>)
 8001212:	2010      	movs	r0, #16
 8001214:	f001 f83a 	bl	800228c <aci_gap_update_adv_data>
         LOG_INFO_APP("==>> Start Advertising Failed, result: 0x%02X\n", status);
 8001218:	2102      	movs	r1, #2
       status = aci_gap_update_adv_data(adv_data_len, adv_data_p);
 800121a:	4603      	mov	r3, r0
       if (status != BLE_STATUS_SUCCESS)
 800121c:	2800      	cmp	r0, #0
 800121e:	d04c      	beq.n	80012ba <APP_BLE_Procedure_Gap_Peripheral+0x186>
         LOG_INFO_APP("==>> Start Advertising Failed, result: 0x%02X\n", status);
 8001220:	2000      	movs	r0, #0
 8001222:	4a39      	ldr	r2, [pc, #228]	@ (8001308 <APP_BLE_Procedure_Gap_Peripheral+0x1d4>)
}
 8001224:	b008      	add	sp, #32
 8001226:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("aci_gap_set_non_discoverable - fail, result: 0x%02X\n",status);
 800122a:	f001 bbf1 	b.w	8002a10 <Log_Module_Print>
  switch(ProcGapPeripheralId)
 800122e:	f04f 0806 	mov.w	r8, #6
 8001232:	f04f 0aa0 	mov.w	sl, #160	@ 0xa0
 8001236:	f04f 0980 	mov.w	r9, #128	@ 0x80
 800123a:	e7b5      	b.n	80011a8 <APP_BLE_Procedure_Gap_Peripheral+0x74>
 800123c:	f04f 0804 	mov.w	r8, #4
 8001240:	f04f 0aa0 	mov.w	sl, #160	@ 0xa0
 8001244:	f04f 0980 	mov.w	r9, #128	@ 0x80
 8001248:	2400      	movs	r4, #0
 800124a:	e7ad      	b.n	80011a8 <APP_BLE_Procedure_Gap_Peripheral+0x74>
 800124c:	f04f 0805 	mov.w	r8, #5
 8001250:	f44f 6a7a 	mov.w	sl, #4000	@ 0xfa0
 8001254:	f44f 69c8 	mov.w	r9, #1600	@ 0x640
 8001258:	e7a6      	b.n	80011a8 <APP_BLE_Procedure_Gap_Peripheral+0x74>
      status = aci_gap_set_non_discoverable();
 800125a:	f000 ffe7 	bl	800222c <aci_gap_set_non_discoverable>
 800125e:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 8001260:	b1a8      	cbz	r0, 800128e <APP_BLE_Procedure_Gap_Peripheral+0x15a>
        LOG_INFO_APP("aci_gap_set_non_discoverable - fail, result: 0x%02X\n",status);
 8001262:	2102      	movs	r1, #2
 8001264:	2000      	movs	r0, #0
 8001266:	4a29      	ldr	r2, [pc, #164]	@ (800130c <APP_BLE_Procedure_Gap_Peripheral+0x1d8>)
}
 8001268:	b008      	add	sp, #32
 800126a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("aci_gap_set_non_discoverable - fail, result: 0x%02X\n",status);
 800126e:	f001 bbcf 	b.w	8002a10 <Log_Module_Print>
      status = hci_le_set_advertising_data(adv_data_len, adv_data_p);
 8001272:	4924      	ldr	r1, [pc, #144]	@ (8001304 <APP_BLE_Procedure_Gap_Peripheral+0x1d0>)
 8001274:	2010      	movs	r0, #16
 8001276:	f000 ffcf 	bl	8002218 <hci_le_set_advertising_data>
        LOG_INFO_APP("aci_gap_update_adv_data - fail, result: 0x%02X\n",status);
 800127a:	2102      	movs	r1, #2
      status = hci_le_set_advertising_data(adv_data_len, adv_data_p);
 800127c:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 800127e:	b178      	cbz	r0, 80012a0 <APP_BLE_Procedure_Gap_Peripheral+0x16c>
        LOG_INFO_APP("aci_gap_update_adv_data - fail, result: 0x%02X\n",status);
 8001280:	2000      	movs	r0, #0
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <APP_BLE_Procedure_Gap_Peripheral+0x1dc>)
}
 8001284:	b008      	add	sp, #32
 8001286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("aci_gap_set_non_discoverable - fail, result: 0x%02X\n",status);
 800128a:	f001 bbc1 	b.w	8002a10 <Log_Module_Print>
        LOG_INFO_APP("==>> aci_gap_set_non_discoverable - Success\n");
 800128e:	2102      	movs	r1, #2
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 8001290:	4c14      	ldr	r4, [pc, #80]	@ (80012e4 <APP_BLE_Procedure_Gap_Peripheral+0x1b0>)
        LOG_INFO_APP("==>> aci_gap_set_non_discoverable - Success\n");
 8001292:	4a20      	ldr	r2, [pc, #128]	@ (8001314 <APP_BLE_Procedure_Gap_Peripheral+0x1e0>)
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 8001294:	7620      	strb	r0, [r4, #24]
}
 8001296:	b008      	add	sp, #32
 8001298:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("==>> aci_l2cap_connection_parameter_update_req - Success\n");
 800129c:	f001 bbb8 	b.w	8002a10 <Log_Module_Print>
        LOG_INFO_APP("==>> aci_gap_update_adv_data - Success\n");
 80012a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001318 <APP_BLE_Procedure_Gap_Peripheral+0x1e4>)
}
 80012a2:	b008      	add	sp, #32
 80012a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("==>> aci_l2cap_connection_parameter_update_req - Success\n");
 80012a8:	f001 bbb2 	b.w	8002a10 <Log_Module_Print>
 80012ac:	2102      	movs	r1, #2
 80012ae:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <APP_BLE_Procedure_Gap_Peripheral+0x1e8>)
}
 80012b0:	b008      	add	sp, #32
 80012b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("==>> aci_l2cap_connection_parameter_update_req - Success\n");
 80012b6:	f001 bbab 	b.w	8002a10 <Log_Module_Print>
         LOG_INFO_APP("==>> Success: Start Advertising\n");
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <APP_BLE_Procedure_Gap_Peripheral+0x1ec>)
}
 80012bc:	b008      	add	sp, #32
 80012be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        LOG_INFO_APP("==>> aci_l2cap_connection_parameter_update_req - Success\n");
 80012c2:	f001 bba5 	b.w	8002a10 <Log_Module_Print>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <APP_BLE_Procedure_Gap_Peripheral+0x1b0>)
        LOG_INFO_APP("==>> aci_gap_set_discoverable - Success\n");
 80012c8:	2102      	movs	r1, #2
 80012ca:	4a16      	ldr	r2, [pc, #88]	@ (8001324 <APP_BLE_Procedure_Gap_Peripheral+0x1f0>)
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 80012cc:	f883 8018 	strb.w	r8, [r3, #24]
        LOG_INFO_APP("==>> aci_gap_set_discoverable - Success\n");
 80012d0:	f001 fb9e 	bl	8002a10 <Log_Module_Print>
 80012d4:	e797      	b.n	8001206 <APP_BLE_Procedure_Gap_Peripheral+0xd2>
         LOG_INFO_APP("==>> delete tx power level - fail, result: 0x%02X\n", status);
 80012d6:	4603      	mov	r3, r0
 80012d8:	2102      	movs	r1, #2
 80012da:	2000      	movs	r0, #0
 80012dc:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <APP_BLE_Procedure_Gap_Peripheral+0x1f4>)
 80012de:	f001 fb97 	bl	8002a10 <Log_Module_Print>
 80012e2:	e795      	b.n	8001210 <APP_BLE_Procedure_Gap_Peripheral+0xdc>
 80012e4:	200055a4 	.word	0x200055a4
 80012e8:	0802c420 	.word	0x0802c420
 80012ec:	0802c2b0 	.word	0x0802c2b0
 80012f0:	200017e3 	.word	0x200017e3
 80012f4:	0802c2d0 	.word	0x0802c2d0
 80012f8:	0802c2d8 	.word	0x0802c2d8
 80012fc:	200017e4 	.word	0x200017e4
 8001300:	0802c2dc 	.word	0x0802c2dc
 8001304:	20000020 	.word	0x20000020
 8001308:	0802c374 	.word	0x0802c374
 800130c:	0802c248 	.word	0x0802c248
 8001310:	0802c3c8 	.word	0x0802c3c8
 8001314:	0802c280 	.word	0x0802c280
 8001318:	0802c3f8 	.word	0x0802c3f8
 800131c:	0802c464 	.word	0x0802c464
 8001320:	0802c3a4 	.word	0x0802c3a4
 8001324:	0802c314 	.word	0x0802c314
 8001328:	0802c340 	.word	0x0802c340

0800132c <APP_BLE_Init>:
{
 800132c:	b530      	push	{r4, r5, lr}
  LST_init_head(&BleAsynchEventQueue);
 800132e:	48c1      	ldr	r0, [pc, #772]	@ (8001634 <APP_BLE_Init+0x308>)
{
 8001330:	b08d      	sub	sp, #52	@ 0x34
  LST_init_head(&BleAsynchEventQueue);
 8001332:	f006 f82b 	bl	800738c <LST_init_head>
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_HOST, UTIL_SEQ_RFU, BleStack_Process_BG);
 8001336:	2100      	movs	r1, #0
 8001338:	2010      	movs	r0, #16
 800133a:	4abf      	ldr	r2, [pc, #764]	@ (8001638 <APP_BLE_Init+0x30c>)
 800133c:	f00a ff0a 	bl	800c154 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, Ble_UserEvtRx);
 8001340:	2100      	movs	r1, #0
 8001342:	2004      	movs	r0, #4
 8001344:	4abd      	ldr	r2, [pc, #756]	@ (800163c <APP_BLE_Init+0x310>)
 8001346:	f00a ff05 	bl	800c154 <UTIL_SEQ_RegTask>
  NVM_Init(buffer_nvm, 0, CFG_BLEPLAT_NVM_MAX_SIZE);
 800134a:	22fc      	movs	r2, #252	@ 0xfc
 800134c:	2100      	movs	r1, #0
 800134e:	48bc      	ldr	r0, [pc, #752]	@ (8001640 <APP_BLE_Init+0x314>)
 8001350:	f004 fe24 	bl	8005f9c <NVM_Init>
  SNVMA_Register (APP_BLE_NvmBuffer,
 8001354:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8001358:	49b9      	ldr	r1, [pc, #740]	@ (8001640 <APP_BLE_Init+0x314>)
 800135a:	2000      	movs	r0, #0
 800135c:	f004 f824 	bl	80053a8 <SNVMA_Register>
  SNVMA_Restore (APP_BLE_NvmBuffer);
 8001360:	2000      	movs	r0, #0
 8001362:	f004 f8c5 	bl	80054f0 <SNVMA_Restore>
  if (NVM_Get (NVM_FIRST, 0xFF, 0, 0, 0) != NVM_EOF)
 8001366:	2300      	movs	r3, #0
 8001368:	21ff      	movs	r1, #255	@ 0xff
 800136a:	461a      	mov	r2, r3
 800136c:	4618      	mov	r0, r3
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	f004 fe2e 	bl	8005fd0 <NVM_Get>
 8001374:	3003      	adds	r0, #3
 8001376:	d002      	beq.n	800137e <APP_BLE_Init+0x52>
    NVM_Discard (NVM_ALL);
 8001378:	2003      	movs	r0, #3
 800137a:	f004 ff85 	bl	8006288 <NVM_Discard>
  pInitParams.options                 = CFG_BLE_OPTIONS;
 800137e:	2300      	movs	r3, #0
  pInitParams.total_buffer_size       = BLE_DYN_ALLOC_SIZE;
 8001380:	f242 413c 	movw	r1, #9276	@ 0x243c
  pInitParams.total_buffer_size_GATT  = BLE_GATT_BUF_SIZE;
 8001384:	f44f 528b 	mov.w	r2, #4448	@ 0x1160
  pInitParams.bleStartRamAddress      = (uint8_t*)buffer;
 8001388:	48ae      	ldr	r0, [pc, #696]	@ (8001644 <APP_BLE_Init+0x318>)
 800138a:	4caf      	ldr	r4, [pc, #700]	@ (8001648 <APP_BLE_Init+0x31c>)
  pInitParams.max_coc_mps             = CFG_BLE_COC_MPS_MAX;
 800138c:	4daf      	ldr	r5, [pc, #700]	@ (800164c <APP_BLE_Init+0x320>)
  pInitParams.bleStartRamAddress      = (uint8_t*)buffer;
 800138e:	6004      	str	r4, [r0, #0]
  pInitParams.bleStartRamAddress_GATT = (uint8_t*)gatt_buffer;
 8001390:	4caf      	ldr	r4, [pc, #700]	@ (8001650 <APP_BLE_Init+0x324>)
  pInitParams.options                 = CFG_BLE_OPTIONS;
 8001392:	8403      	strh	r3, [r0, #32]
  pInitParams.bleStartRamAddress_GATT = (uint8_t*)gatt_buffer;
 8001394:	6084      	str	r4, [r0, #8]
  pInitParams.numAttrRecord           = CFG_BLE_NUM_GATT_ATTRIBUTES;
 8001396:	4caf      	ldr	r4, [pc, #700]	@ (8001654 <APP_BLE_Init+0x328>)
  pInitParams.total_buffer_size       = BLE_DYN_ALLOC_SIZE;
 8001398:	6041      	str	r1, [r0, #4]
  pInitParams.numAttrRecord           = CFG_BLE_NUM_GATT_ATTRIBUTES;
 800139a:	6104      	str	r4, [r0, #16]
  pInitParams.attrValueArrSize        = CFG_BLE_ATT_VALUE_ARRAY_SIZE;
 800139c:	f104 54f0 	add.w	r4, r4, #503316480	@ 0x1e000000
 80013a0:	f204 44fc 	addw	r4, r4, #1276	@ 0x4fc
 80013a4:	6144      	str	r4, [r0, #20]
  pInitParams.max_coc_mps             = CFG_BLE_COC_MPS_MAX;
 80013a6:	4cac      	ldr	r4, [pc, #688]	@ (8001658 <APP_BLE_Init+0x32c>)
  pInitParams.total_buffer_size_GATT  = BLE_GATT_BUF_SIZE;
 80013a8:	60c2      	str	r2, [r0, #12]
  pInitParams.max_coc_mps             = CFG_BLE_COC_MPS_MAX;
 80013aa:	e9c0 5406 	strd	r5, r4, [r0, #24]
  pInitParams.debug                   = 0U;
 80013ae:	6243      	str	r3, [r0, #36]	@ 0x24
  return_status = BleStack_Init(&pInitParams);
 80013b0:	f022 f920 	bl	80235f4 <BleStack_Init>
  if (HOST_BLE_Init() == 0u)
 80013b4:	4604      	mov	r4, r0
 80013b6:	b128      	cbz	r0, 80013c4 <APP_BLE_Init+0x98>
  bleAppContext.connIntervalFlag = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	4da8      	ldr	r5, [pc, #672]	@ (800165c <APP_BLE_Init+0x330>)
 80013bc:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
}
 80013c0:	b00d      	add	sp, #52	@ 0x34
 80013c2:	bd30      	pop	{r4, r5, pc}
  LOG_INFO_APP("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80013c4:	2102      	movs	r1, #2
  a_BdAddr[0] = (uint8_t)(CFG_BD_ADDRESS & 0x0000000000FF);
 80013c6:	4da6      	ldr	r5, [pc, #664]	@ (8001660 <APP_BLE_Init+0x334>)
  LOG_INFO_APP("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80013c8:	4aa6      	ldr	r2, [pc, #664]	@ (8001664 <APP_BLE_Init+0x338>)
  uint16_t gap_service_handle = 0U, gap_dev_name_char_handle = 0U, gap_appearance_char_handle = 0U;
 80013ca:	f8ad 001e 	strh.w	r0, [sp, #30]
 80013ce:	f8ad 0020 	strh.w	r0, [sp, #32]
 80013d2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
  uint16_t a_appearance[1] = {CFG_GAP_APPEARANCE};
 80013d6:	f8ad 001c 	strh.w	r0, [sp, #28]
  LOG_INFO_APP("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80013da:	f001 fb19 	bl	8002a10 <Log_Module_Print>
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80013de:	4aa2      	ldr	r2, [pc, #648]	@ (8001668 <APP_BLE_Init+0x33c>)
  memset(&a_BDAddrNull[0], 0x00, sizeof(a_BDAddrNull));
 80013e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80013e2:	f8ad 402c 	strh.w	r4, [sp, #44]	@ 0x2c
  a_BdAddr[0] = (uint8_t)(CFG_BD_ADDRESS & 0x0000000000FF);
 80013e6:	602c      	str	r4, [r5, #0]
 80013e8:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	@ 0xa00
  OTP_Data_s *p_otp_addr = NULL;
 80013ec:	9409      	str	r4, [sp, #36]	@ 0x24
    if (udn != 0xFFFFFFFF)
 80013ee:	1c59      	adds	r1, r3, #1
  a_BdAddr[4] = (uint8_t)((CFG_BD_ADDRESS & 0x00FF00000000) >> 32);
 80013f0:	80ac      	strh	r4, [r5, #4]
    if (udn != 0xFFFFFFFF)
 80013f2:	f000 81c1 	beq.w	8001778 <APP_BLE_Init+0x44c>
  * @note   For STM32WBAxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80013f6:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
      a_BdAddr[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80013fa:	0a18      	lsrs	r0, r3, #8
      a_BdAddr[0] = (uint8_t)(udn & 0x000000FF);
 80013fc:	f363 0407 	bfi	r4, r3, #0, #8
 8001400:	f360 240f 	bfi	r4, r0, #8, #8
      a_BdAddr[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8001404:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8001408:	0a11      	lsrs	r1, r2, #8
      a_BdAddr[0] = (uint8_t)(udn & 0x000000FF);
 800140a:	f362 4417 	bfi	r4, r2, #16, #8
      a_BdAddr[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800140e:	f885 c004 	strb.w	ip, [r5, #4]
      a_BdAddr[0] = (uint8_t)(udn & 0x000000FF);
 8001412:	f361 641f 	bfi	r4, r1, #24, #8
      a_BdAddr[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8001416:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800141a:	f885 c005 	strb.w	ip, [r5, #5]
      a_BdAddr[0] = (uint8_t)(udn & 0x000000FF);
 800141e:	602c      	str	r4, [r5, #0]
    p_bd_addr = (const uint8_t *)a_BdAddr;
 8001420:	4d8f      	ldr	r5, [pc, #572]	@ (8001660 <APP_BLE_Init+0x334>)
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8001422:	462a      	mov	r2, r5
 8001424:	2106      	movs	r1, #6
 8001426:	2000      	movs	r0, #0
 8001428:	f000 fefa 	bl	8002220 <aci_hal_write_config_data>
  if (ret != BLE_STATUS_SUCCESS)
 800142c:	4604      	mov	r4, r0
 800142e:	2800      	cmp	r0, #0
 8001430:	f000 8150 	beq.w	80016d4 <APP_BLE_Init+0x3a8>
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%02X\n", ret);
 8001434:	4603      	mov	r3, r0
 8001436:	2102      	movs	r1, #2
 8001438:	2000      	movs	r0, #0
 800143a:	4a8c      	ldr	r2, [pc, #560]	@ (800166c <APP_BLE_Init+0x340>)
 800143c:	f001 fae8 	bl	8002a10 <Log_Module_Print>
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8001440:	2110      	movs	r1, #16
 8001442:	2018      	movs	r0, #24
 8001444:	4a8a      	ldr	r2, [pc, #552]	@ (8001670 <APP_BLE_Init+0x344>)
 8001446:	f000 feeb 	bl	8002220 <aci_hal_write_config_data>
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%02X\n", ret);
 800144a:	2102      	movs	r1, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800144c:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 800144e:	2800      	cmp	r0, #0
 8001450:	f000 818a 	beq.w	8001768 <APP_BLE_Init+0x43c>
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%02X\n", ret);
 8001454:	2000      	movs	r0, #0
 8001456:	4a87      	ldr	r2, [pc, #540]	@ (8001674 <APP_BLE_Init+0x348>)
 8001458:	f001 fada 	bl	8002a10 <Log_Module_Print>
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800145c:	2110      	movs	r1, #16
 800145e:	2008      	movs	r0, #8
 8001460:	4a85      	ldr	r2, [pc, #532]	@ (8001678 <APP_BLE_Init+0x34c>)
 8001462:	f000 fedd 	bl	8002220 <aci_hal_write_config_data>
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%02X\n", ret);
 8001466:	2102      	movs	r1, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8001468:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 800146a:	2800      	cmp	r0, #0
 800146c:	f000 8178 	beq.w	8001760 <APP_BLE_Init+0x434>
    LOG_INFO_APP("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%02X\n", ret);
 8001470:	2000      	movs	r0, #0
 8001472:	4a82      	ldr	r2, [pc, #520]	@ (800167c <APP_BLE_Init+0x350>)
 8001474:	f001 facc 	bl	8002a10 <Log_Module_Print>
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8001478:	2119      	movs	r1, #25
 800147a:	2001      	movs	r0, #1
 800147c:	f000 fed2 	bl	8002224 <aci_hal_set_tx_power_level>
    LOG_INFO_APP("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
 8001480:	2102      	movs	r1, #2
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8001482:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 8001484:	2800      	cmp	r0, #0
 8001486:	f000 8167 	beq.w	8001758 <APP_BLE_Init+0x42c>
    LOG_INFO_APP("  Fail   : aci_hal_set_tx_power_level command, result: 0x%02X\n", ret);
 800148a:	2000      	movs	r0, #0
 800148c:	4a7c      	ldr	r2, [pc, #496]	@ (8001680 <APP_BLE_Init+0x354>)
 800148e:	f001 fabf 	bl	8002a10 <Log_Module_Print>
  ret = aci_gatt_init();
 8001492:	f000 ff07 	bl	80022a4 <aci_gatt_init>
    LOG_INFO_APP("  Fail   : aci_gatt_init command, result: 0x%02X\n", ret);
 8001496:	2102      	movs	r1, #2
  ret = aci_gatt_init();
 8001498:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 800149a:	2800      	cmp	r0, #0
 800149c:	f000 8158 	beq.w	8001750 <APP_BLE_Init+0x424>
    LOG_INFO_APP("  Fail   : aci_gatt_init command, result: 0x%02X\n", ret);
 80014a0:	2000      	movs	r0, #0
 80014a2:	4a78      	ldr	r2, [pc, #480]	@ (8001684 <APP_BLE_Init+0x358>)
 80014a4:	f001 fab4 	bl	8002a10 <Log_Module_Print>
    ret = aci_gap_init(role,
 80014a8:	ab08      	add	r3, sp, #32
 80014aa:	f10d 0422 	add.w	r4, sp, #34	@ 0x22
 80014ae:	2100      	movs	r1, #0
 80014b0:	e9cd 3400 	strd	r3, r4, [sp]
 80014b4:	2209      	movs	r2, #9
 80014b6:	f10d 031e 	add.w	r3, sp, #30
 80014ba:	2001      	movs	r0, #1
 80014bc:	f000 fee2 	bl	8002284 <aci_gap_init>
      LOG_INFO_APP("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
 80014c0:	2102      	movs	r1, #2
    ret = aci_gap_init(role,
 80014c2:	4603      	mov	r3, r0
    if (ret != BLE_STATUS_SUCCESS)
 80014c4:	2800      	cmp	r0, #0
 80014c6:	f000 813f 	beq.w	8001748 <APP_BLE_Init+0x41c>
      LOG_INFO_APP("  Fail   : aci_gap_init command, result: 0x%02X\n", ret);
 80014ca:	2000      	movs	r0, #0
 80014cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001688 <APP_BLE_Init+0x35c>)
 80014ce:	f001 fa9f 	bl	8002a10 <Log_Module_Print>
    ret = aci_gatt_update_char_value(gap_service_handle,
 80014d2:	4c6e      	ldr	r4, [pc, #440]	@ (800168c <APP_BLE_Init+0x360>)
 80014d4:	2309      	movs	r3, #9
 80014d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80014da:	2200      	movs	r2, #0
 80014dc:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80014e0:	9400      	str	r4, [sp, #0]
 80014e2:	f000 fef7 	bl	80022d4 <aci_gatt_update_char_value>
      LOG_INFO_APP("  Fail   : aci_gatt_update_char_value - Device Name, result: 0x%02X\n", ret);
 80014e6:	2102      	movs	r1, #2
    ret = aci_gatt_update_char_value(gap_service_handle,
 80014e8:	4603      	mov	r3, r0
    if (ret != BLE_STATUS_SUCCESS)
 80014ea:	2800      	cmp	r0, #0
 80014ec:	f000 8128 	beq.w	8001740 <APP_BLE_Init+0x414>
      LOG_INFO_APP("  Fail   : aci_gatt_update_char_value - Device Name, result: 0x%02X\n", ret);
 80014f0:	2000      	movs	r0, #0
 80014f2:	4a67      	ldr	r2, [pc, #412]	@ (8001690 <APP_BLE_Init+0x364>)
 80014f4:	f001 fa8c 	bl	8002a10 <Log_Module_Print>
    ret = aci_gatt_update_char_value(gap_service_handle,
 80014f8:	ac07      	add	r4, sp, #28
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8001500:	2200      	movs	r2, #0
 8001502:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8001506:	9400      	str	r4, [sp, #0]
 8001508:	f000 fee4 	bl	80022d4 <aci_gatt_update_char_value>
      LOG_INFO_APP("  Fail   : aci_gatt_update_char_value - Appearance, result: 0x%02X\n", ret);
 800150c:	2102      	movs	r1, #2
    ret = aci_gatt_update_char_value(gap_service_handle,
 800150e:	4603      	mov	r3, r0
    if (ret != BLE_STATUS_SUCCESS)
 8001510:	2800      	cmp	r0, #0
 8001512:	f000 8111 	beq.w	8001738 <APP_BLE_Init+0x40c>
      LOG_INFO_APP("  Fail   : aci_gatt_update_char_value - Appearance, result: 0x%02X\n", ret);
 8001516:	2000      	movs	r0, #0
 8001518:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <APP_BLE_Init+0x368>)
 800151a:	f001 fa79 	bl	8002a10 <Log_Module_Print>
  ret = hci_le_set_default_phy(CFG_PHY_PREF, CFG_PHY_PREF_TX, CFG_PHY_PREF_RX);
 800151e:	2202      	movs	r2, #2
 8001520:	2000      	movs	r0, #0
 8001522:	4611      	mov	r1, r2
 8001524:	f000 fe7a 	bl	800221c <hci_le_set_default_phy>
    LOG_INFO_APP("  Fail   : hci_le_set_default_phy command, result: 0x%02X\n", ret);
 8001528:	2102      	movs	r1, #2
  ret = hci_le_set_default_phy(CFG_PHY_PREF, CFG_PHY_PREF_TX, CFG_PHY_PREF_RX);
 800152a:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 800152c:	2800      	cmp	r0, #0
 800152e:	f000 80ff 	beq.w	8001730 <APP_BLE_Init+0x404>
    LOG_INFO_APP("  Fail   : hci_le_set_default_phy command, result: 0x%02X\n", ret);
 8001532:	2000      	movs	r0, #0
 8001534:	4a58      	ldr	r2, [pc, #352]	@ (8001698 <APP_BLE_Init+0x36c>)
 8001536:	f001 fa6b 	bl	8002a10 <Log_Module_Print>
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800153a:	2001      	movs	r0, #1
 800153c:	4d47      	ldr	r5, [pc, #284]	@ (800165c <APP_BLE_Init+0x330>)
 800153e:	7028      	strb	r0, [r5, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001540:	f000 fe8a 	bl	8002258 <aci_gap_set_io_capability>
    LOG_INFO_APP("  Fail   : aci_gap_set_io_capability command, result: 0x%02X\n", ret);
 8001544:	2102      	movs	r1, #2
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8001546:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 8001548:	2800      	cmp	r0, #0
 800154a:	f000 80ed 	beq.w	8001728 <APP_BLE_Init+0x3fc>
    LOG_INFO_APP("  Fail   : aci_gap_set_io_capability command, result: 0x%02X\n", ret);
 800154e:	2000      	movs	r0, #0
 8001550:	4a52      	ldr	r2, [pc, #328]	@ (800169c <APP_BLE_Init+0x370>)
 8001552:	f001 fa5d 	bl	8002a10 <Log_Module_Print>
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin             = CFG_FIXED_PIN;
 8001556:	4952      	ldr	r1, [pc, #328]	@ (80016a0 <APP_BLE_Init+0x374>)
  ret = aci_gap_set_authentication_requirement(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001558:	2400      	movs	r4, #0
 800155a:	9103      	str	r1, [sp, #12]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin             = CFG_FIXED_PIN;
 800155c:	60a9      	str	r1, [r5, #8]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
 800155e:	4951      	ldr	r1, [pc, #324]	@ (80016a4 <APP_BLE_Init+0x378>)
  ret = aci_gap_set_authentication_requirement(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001560:	2201      	movs	r2, #1
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
 8001562:	f8c5 1001 	str.w	r1, [r5, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001566:	2310      	movs	r3, #16
  ret = aci_gap_set_authentication_requirement(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001568:	2108      	movs	r1, #8
 800156a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800156e:	9404      	str	r4, [sp, #16]
 8001570:	4610      	mov	r0, r2
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8001572:	716b      	strb	r3, [r5, #5]
  ret = aci_gap_set_authentication_requirement(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001574:	4623      	mov	r3, r4
 8001576:	9100      	str	r1, [sp, #0]
 8001578:	4611      	mov	r1, r2
 800157a:	f000 fe6f 	bl	800225c <aci_gap_set_authentication_requirement>
    LOG_INFO_APP("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%02X\n", ret);
 800157e:	2102      	movs	r1, #2
  ret = aci_gap_set_authentication_requirement(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001580:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 8001582:	2800      	cmp	r0, #0
 8001584:	f000 80bf 	beq.w	8001706 <APP_BLE_Init+0x3da>
    LOG_INFO_APP("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%02X\n", ret);
 8001588:	4620      	mov	r0, r4
 800158a:	4a47      	ldr	r2, [pc, #284]	@ (80016a8 <APP_BLE_Init+0x37c>)
 800158c:	f001 fa40 	bl	8002a10 <Log_Module_Print>
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001590:	78ab      	ldrb	r3, [r5, #2]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 80be 	bne.w	8001714 <APP_BLE_Init+0x3e8>
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
 8001598:	2400      	movs	r4, #0
  LOG_INFO_APP("==>> End Ble_Hci_Gap_Gatt_Init function\n");
 800159a:	2102      	movs	r1, #2
 800159c:	4620      	mov	r0, r4
 800159e:	4a43      	ldr	r2, [pc, #268]	@ (80016ac <APP_BLE_Init+0x380>)
 80015a0:	f001 fa36 	bl	8002a10 <Log_Module_Print>
    SVCCTL_Init();
 80015a4:	f00a fc5e 	bl	800be64 <SVCCTL_Init>
    bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80015a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80015ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015b0:	4621      	mov	r1, r4
 80015b2:	4a3f      	ldr	r2, [pc, #252]	@ (80016b0 <APP_BLE_Init+0x384>)
    bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80015b4:	82eb      	strh	r3, [r5, #22]
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
 80015b6:	762c      	strb	r4, [r5, #24]
    UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80015b8:	f00a fdcc 	bl	800c154 <UTIL_SEQ_RegTask>
    UTIL_TIMER_Create(&(bleAppContext.Advertising_mgr_timer_Id),
 80015bc:	4622      	mov	r2, r4
 80015be:	4621      	mov	r1, r4
 80015c0:	4b3c      	ldr	r3, [pc, #240]	@ (80016b4 <APP_BLE_Init+0x388>)
 80015c2:	483d      	ldr	r0, [pc, #244]	@ (80016b8 <APP_BLE_Init+0x38c>)
 80015c4:	9400      	str	r4, [sp, #0]
 80015c6:	f00a ff3d 	bl	800c444 <UTIL_TIMER_Create>
    UTIL_TIMER_Create(&(bleAppContext.SwitchOffGPIO_timer_Id),
 80015ca:	4b3c      	ldr	r3, [pc, #240]	@ (80016bc <APP_BLE_Init+0x390>)
 80015cc:	4622      	mov	r2, r4
 80015ce:	4621      	mov	r1, r4
 80015d0:	483b      	ldr	r0, [pc, #236]	@ (80016c0 <APP_BLE_Init+0x394>)
 80015d2:	9400      	str	r4, [sp, #0]
 80015d4:	f00a ff36 	bl	800c444 <UTIL_TIMER_Create>
    LOG_INFO_APP("\n");
 80015d8:	2102      	movs	r1, #2
 80015da:	4620      	mov	r0, r4
 80015dc:	4a39      	ldr	r2, [pc, #228]	@ (80016c4 <APP_BLE_Init+0x398>)
 80015de:	f001 fa17 	bl	8002a10 <Log_Module_Print>
    LOG_INFO_APP("Services and Characteristics creation\n");
 80015e2:	2102      	movs	r1, #2
 80015e4:	4620      	mov	r0, r4
 80015e6:	4a38      	ldr	r2, [pc, #224]	@ (80016c8 <APP_BLE_Init+0x39c>)
 80015e8:	f001 fa12 	bl	8002a10 <Log_Module_Print>
    P2P_SERVER_APP_Init();
 80015ec:	f000 fdfc 	bl	80021e8 <P2P_SERVER_APP_Init>
    LOG_INFO_APP("End of Services and Characteristics creation\n");
 80015f0:	2102      	movs	r1, #2
 80015f2:	4620      	mov	r0, r4
 80015f4:	4a35      	ldr	r2, [pc, #212]	@ (80016cc <APP_BLE_Init+0x3a0>)
 80015f6:	f001 fa0b 	bl	8002a10 <Log_Module_Print>
    LOG_INFO_APP("\n");
 80015fa:	2102      	movs	r1, #2
 80015fc:	4620      	mov	r0, r4
 80015fe:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <APP_BLE_Init+0x398>)
 8001600:	f001 fa06 	bl	8002a10 <Log_Module_Print>
    ret = aci_hal_set_radio_activity_mask(0x0006);
 8001604:	2006      	movs	r0, #6
 8001606:	f000 fe0f 	bl	8002228 <aci_hal_set_radio_activity_mask>
      LOG_INFO_APP("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%2X\n", ret);
 800160a:	2102      	movs	r1, #2
    ret = aci_hal_set_radio_activity_mask(0x0006);
 800160c:	4603      	mov	r3, r0
    if (ret != BLE_STATUS_SUCCESS)
 800160e:	2800      	cmp	r0, #0
 8001610:	d075      	beq.n	80016fe <APP_BLE_Init+0x3d2>
      LOG_INFO_APP("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%2X\n", ret);
 8001612:	4620      	mov	r0, r4
 8001614:	4a2e      	ldr	r2, [pc, #184]	@ (80016d0 <APP_BLE_Init+0x3a4>)
 8001616:	f001 f9fb 	bl	8002a10 <Log_Module_Print>
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff fd8a 	bl	8001134 <APP_BLE_Procedure_Gap_Peripheral>
    UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
 8001620:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001624:	4824      	ldr	r0, [pc, #144]	@ (80016b8 <APP_BLE_Init+0x38c>)
 8001626:	f00a ff85 	bl	800c534 <UTIL_TIMER_StartWithPeriod>
  bleAppContext.connIntervalFlag = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
}
 8001630:	b00d      	add	sp, #52	@ 0x34
 8001632:	bd30      	pop	{r4, r5, pc}
 8001634:	200055fc 	.word	0x200055fc
 8001638:	080010cd 	.word	0x080010cd
 800163c:	08001079 	.word	0x08001079
 8001640:	20004dc0 	.word	0x20004dc0
 8001644:	200017f0 	.word	0x200017f0
 8001648:	20002978 	.word	0x20002978
 800164c:	00fb00b1 	.word	0x00fb00b1
 8001650:	20001818 	.word	0x20001818
 8001654:	00080044 	.word	0x00080044
 8001658:	204000f8 	.word	0x204000f8
 800165c:	200055a4 	.word	0x200055a4
 8001660:	200055f4 	.word	0x200055f4
 8001664:	0802c4a0 	.word	0x0802c4a0
 8001668:	0bf90000 	.word	0x0bf90000
 800166c:	0802c4cc 	.word	0x0802c4cc
 8001670:	0802d134 	.word	0x0802d134
 8001674:	0802c5b0 	.word	0x0802c5b0
 8001678:	0802d124 	.word	0x0802d124
 800167c:	0802c650 	.word	0x0802c650
 8001680:	0802c6f0 	.word	0x0802c6f0
 8001684:	0802c760 	.word	0x0802c760
 8001688:	0802c7b8 	.word	0x0802c7b8
 800168c:	200017e5 	.word	0x200017e5
 8001690:	0802c810 	.word	0x0802c810
 8001694:	0802c890 	.word	0x0802c890
 8001698:	0802c908 	.word	0x0802c908
 800169c:	0802c970 	.word	0x0802c970
 80016a0:	0001b207 	.word	0x0001b207
 80016a4:	08000101 	.word	0x08000101
 80016a8:	0802c9e0 	.word	0x0802c9e0
 80016ac:	0802cad8 	.word	0x0802cad8
 80016b0:	080010f9 	.word	0x080010f9
 80016b4:	0800106d 	.word	0x0800106d
 80016b8:	200055c0 	.word	0x200055c0
 80016bc:	08001065 	.word	0x08001065
 80016c0:	200055d8 	.word	0x200055d8
 80016c4:	0802d564 	.word	0x0802d564
 80016c8:	0802cb04 	.word	0x0802cb04
 80016cc:	0802cb2c 	.word	0x0802cb2c
 80016d0:	0802cb5c 	.word	0x0802cb5c
    LOG_INFO_APP("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80016d4:	2102      	movs	r1, #2
 80016d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001794 <APP_BLE_Init+0x468>)
 80016d8:	f001 f99a 	bl	8002a10 <Log_Module_Print>
    LOG_INFO_APP("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80016dc:	782a      	ldrb	r2, [r5, #0]
 80016de:	796b      	ldrb	r3, [r5, #5]
 80016e0:	9204      	str	r2, [sp, #16]
 80016e2:	786a      	ldrb	r2, [r5, #1]
 80016e4:	4620      	mov	r0, r4
 80016e6:	9203      	str	r2, [sp, #12]
 80016e8:	78aa      	ldrb	r2, [r5, #2]
 80016ea:	2102      	movs	r1, #2
 80016ec:	9202      	str	r2, [sp, #8]
 80016ee:	78ea      	ldrb	r2, [r5, #3]
 80016f0:	9201      	str	r2, [sp, #4]
 80016f2:	792c      	ldrb	r4, [r5, #4]
 80016f4:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <APP_BLE_Init+0x46c>)
 80016f6:	9400      	str	r4, [sp, #0]
 80016f8:	f001 f98a 	bl	8002a10 <Log_Module_Print>
 80016fc:	e6a0      	b.n	8001440 <APP_BLE_Init+0x114>
      LOG_INFO_APP("  Success: aci_hal_set_radio_activity_mask command\n\r");
 80016fe:	4a27      	ldr	r2, [pc, #156]	@ (800179c <APP_BLE_Init+0x470>)
 8001700:	f001 f986 	bl	8002a10 <Log_Module_Print>
 8001704:	e789      	b.n	800161a <APP_BLE_Init+0x2ee>
    LOG_INFO_APP("  Success: aci_gap_set_authentication_requirement command\n");
 8001706:	4a26      	ldr	r2, [pc, #152]	@ (80017a0 <APP_BLE_Init+0x474>)
 8001708:	f001 f982 	bl	8002a10 <Log_Module_Print>
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800170c:	78ab      	ldrb	r3, [r5, #2]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f43f af42 	beq.w	8001598 <APP_BLE_Init+0x26c>
    ret = aci_gap_configure_whitelist();
 8001714:	f000 fdbe 	bl	8002294 <aci_gap_configure_filter_accept_list>
      LOG_INFO_APP("  Fail   : aci_gap_configure_whitelist command, result: 0x%02X\n", ret);
 8001718:	2102      	movs	r1, #2
    ret = aci_gap_configure_whitelist();
 800171a:	4603      	mov	r3, r0
    if (ret != BLE_STATUS_SUCCESS)
 800171c:	b340      	cbz	r0, 8001770 <APP_BLE_Init+0x444>
      LOG_INFO_APP("  Fail   : aci_gap_configure_whitelist command, result: 0x%02X\n", ret);
 800171e:	2000      	movs	r0, #0
 8001720:	4a20      	ldr	r2, [pc, #128]	@ (80017a4 <APP_BLE_Init+0x478>)
 8001722:	f001 f975 	bl	8002a10 <Log_Module_Print>
 8001726:	e737      	b.n	8001598 <APP_BLE_Init+0x26c>
    LOG_INFO_APP("  Success: aci_gap_set_io_capability command\n");
 8001728:	4a1f      	ldr	r2, [pc, #124]	@ (80017a8 <APP_BLE_Init+0x47c>)
 800172a:	f001 f971 	bl	8002a10 <Log_Module_Print>
 800172e:	e712      	b.n	8001556 <APP_BLE_Init+0x22a>
    LOG_INFO_APP("  Success: hci_le_set_default_phy command\n");
 8001730:	4a1e      	ldr	r2, [pc, #120]	@ (80017ac <APP_BLE_Init+0x480>)
 8001732:	f001 f96d 	bl	8002a10 <Log_Module_Print>
 8001736:	e700      	b.n	800153a <APP_BLE_Init+0x20e>
      LOG_INFO_APP("  Success: aci_gatt_update_char_value - Appearance\n");
 8001738:	4a1d      	ldr	r2, [pc, #116]	@ (80017b0 <APP_BLE_Init+0x484>)
 800173a:	f001 f969 	bl	8002a10 <Log_Module_Print>
 800173e:	e6ee      	b.n	800151e <APP_BLE_Init+0x1f2>
      LOG_INFO_APP("  Success: aci_gatt_update_char_value - Device Name\n");
 8001740:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <APP_BLE_Init+0x488>)
 8001742:	f001 f965 	bl	8002a10 <Log_Module_Print>
 8001746:	e6d7      	b.n	80014f8 <APP_BLE_Init+0x1cc>
      LOG_INFO_APP("  Success: aci_gap_init command\n");
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <APP_BLE_Init+0x48c>)
 800174a:	f001 f961 	bl	8002a10 <Log_Module_Print>
 800174e:	e6c0      	b.n	80014d2 <APP_BLE_Init+0x1a6>
    LOG_INFO_APP("  Success: aci_gatt_init command\n");
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <APP_BLE_Init+0x490>)
 8001752:	f001 f95d 	bl	8002a10 <Log_Module_Print>
 8001756:	e6a7      	b.n	80014a8 <APP_BLE_Init+0x17c>
    LOG_INFO_APP("  Success: aci_hal_set_tx_power_level command\n");
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <APP_BLE_Init+0x494>)
 800175a:	f001 f959 	bl	8002a10 <Log_Module_Print>
 800175e:	e698      	b.n	8001492 <APP_BLE_Init+0x166>
    LOG_INFO_APP("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8001760:	4a18      	ldr	r2, [pc, #96]	@ (80017c4 <APP_BLE_Init+0x498>)
 8001762:	f001 f955 	bl	8002a10 <Log_Module_Print>
 8001766:	e687      	b.n	8001478 <APP_BLE_Init+0x14c>
    LOG_INFO_APP("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8001768:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <APP_BLE_Init+0x49c>)
 800176a:	f001 f951 	bl	8002a10 <Log_Module_Print>
 800176e:	e675      	b.n	800145c <APP_BLE_Init+0x130>
      LOG_INFO_APP("  Success: aci_gap_configure_whitelist command\n");
 8001770:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <APP_BLE_Init+0x4a0>)
 8001772:	f001 f94d 	bl	8002a10 <Log_Module_Print>
 8001776:	e70f      	b.n	8001598 <APP_BLE_Init+0x26c>
      if (OTP_Read(0, &p_otp_addr) == HAL_OK)
 8001778:	4620      	mov	r0, r4
 800177a:	a909      	add	r1, sp, #36	@ 0x24
 800177c:	f005 fa38 	bl	8006bf0 <OTP_Read>
 8001780:	b928      	cbnz	r0, 800178e <APP_BLE_Init+0x462>
        a_BdAddr[0] = p_otp_addr->bd_address[0];
 8001782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001784:	689a      	ldr	r2, [r3, #8]
        a_BdAddr[4] = p_otp_addr->bd_address[4];
 8001786:	899b      	ldrh	r3, [r3, #12]
        a_BdAddr[0] = p_otp_addr->bd_address[0];
 8001788:	602a      	str	r2, [r5, #0]
        a_BdAddr[4] = p_otp_addr->bd_address[4];
 800178a:	80ab      	strh	r3, [r5, #4]
        p_bd_addr = (const uint8_t *)a_BdAddr;
 800178c:	e648      	b.n	8001420 <APP_BLE_Init+0xf4>
        p_bd_addr = (const uint8_t *)a_BdAddrDefault;
 800178e:	4d10      	ldr	r5, [pc, #64]	@ (80017d0 <APP_BLE_Init+0x4a4>)
 8001790:	e647      	b.n	8001422 <APP_BLE_Init+0xf6>
 8001792:	bf00      	nop
 8001794:	0802c528 	.word	0x0802c528
 8001798:	0802c574 	.word	0x0802c574
 800179c:	0802cba0 	.word	0x0802cba0
 80017a0:	0802ca2c 	.word	0x0802ca2c
 80017a4:	0802ca68 	.word	0x0802ca68
 80017a8:	0802c9b0 	.word	0x0802c9b0
 80017ac:	0802c944 	.word	0x0802c944
 80017b0:	0802c8d4 	.word	0x0802c8d4
 80017b4:	0802c858 	.word	0x0802c858
 80017b8:	0802c7ec 	.word	0x0802c7ec
 80017bc:	0802c794 	.word	0x0802c794
 80017c0:	0802c730 	.word	0x0802c730
 80017c4:	0802c6a8 	.word	0x0802c6a8
 80017c8:	0802c608 	.word	0x0802c608
 80017cc:	0802caa8 	.word	0x0802caa8
 80017d0:	0802d144 	.word	0x0802d144

080017d4 <SVCCTL_App_Notification>:
{
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (p_event_pckt->evt)
 80017d6:	7843      	ldrb	r3, [r0, #1]
{
 80017d8:	4604      	mov	r4, r0
  switch (p_event_pckt->evt)
 80017da:	2b3e      	cmp	r3, #62	@ 0x3e
{
 80017dc:	b087      	sub	sp, #28
  switch (p_event_pckt->evt)
 80017de:	d006      	beq.n	80017ee <SVCCTL_App_Notification+0x1a>
 80017e0:	2bff      	cmp	r3, #255	@ 0xff
 80017e2:	d040      	beq.n	8001866 <SVCCTL_App_Notification+0x92>
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d021      	beq.n	800182c <SVCCTL_App_Notification+0x58>
}
 80017e8:	2001      	movs	r0, #1
 80017ea:	b007      	add	sp, #28
 80017ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (p_meta_evt->subevent)
 80017ee:	78c3      	ldrb	r3, [r0, #3]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	2b0b      	cmp	r3, #11
 80017f4:	d8f8      	bhi.n	80017e8 <SVCCTL_App_Notification+0x14>
 80017f6:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <SVCCTL_App_Notification+0x28>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	080019c3 	.word	0x080019c3
 8001800:	080017e9 	.word	0x080017e9
 8001804:	08001975 	.word	0x08001975
 8001808:	080017e9 	.word	0x080017e9
 800180c:	080017e9 	.word	0x080017e9
 8001810:	080017e9 	.word	0x080017e9
 8001814:	080017e9 	.word	0x080017e9
 8001818:	080017e9 	.word	0x080017e9
 800181c:	080017e9 	.word	0x080017e9
 8001820:	080018db 	.word	0x080018db
 8001824:	080017e9 	.word	0x080017e9
 8001828:	080018d3 	.word	0x080018d3
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
 800182c:	4bb3      	ldr	r3, [pc, #716]	@ (8001afc <SVCCTL_App_Notification+0x328>)
 800182e:	8881      	ldrh	r1, [r0, #4]
 8001830:	8ada      	ldrh	r2, [r3, #22]
 8001832:	4291      	cmp	r1, r2
 8001834:	d03c      	beq.n	80018b0 <SVCCTL_App_Notification+0xdc>
      P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_DISCON_HANDLE_EVT;
 8001836:	2501      	movs	r5, #1
  UTIL_SEQ_SetEvt(1U << CFG_IDLEEVT_PROC_GAP_COMPLETE);
 8001838:	4628      	mov	r0, r5
 800183a:	f00a fcb7 	bl	800c1ac <UTIL_SEQ_SetEvt>
      P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_DISCON_HANDLE_EVT;
 800183e:	48b0      	ldr	r0, [pc, #704]	@ (8001b00 <SVCCTL_App_Notification+0x32c>)
      P2P_SERVERHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
 8001840:	7923      	ldrb	r3, [r4, #4]
      P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_DISCON_HANDLE_EVT;
 8001842:	7005      	strb	r5, [r0, #0]
      P2P_SERVERHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
 8001844:	7962      	ldrb	r2, [r4, #5]
 8001846:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800184a:	8043      	strh	r3, [r0, #2]
      P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
 800184c:	f000 fcbc 	bl	80021c8 <P2P_SERVER_APP_EvtRx>
      APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
 8001850:	4628      	mov	r0, r5
 8001852:	f7ff fc6f 	bl	8001134 <APP_BLE_Procedure_Gap_Peripheral>
      UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
 8001856:	f64e 2160 	movw	r1, #60000	@ 0xea60
 800185a:	48aa      	ldr	r0, [pc, #680]	@ (8001b04 <SVCCTL_App_Notification+0x330>)
 800185c:	f00a fe6a 	bl	800c534 <UTIL_TIMER_StartWithPeriod>
}
 8001860:	2001      	movs	r0, #1
 8001862:	b007      	add	sp, #28
 8001864:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (p_blecore_evt->ecode)
 8001866:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800186a:	2b04      	cmp	r3, #4
 800186c:	f000 8197 	beq.w	8001b9e <SVCCTL_App_Notification+0x3ca>
 8001870:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001874:	4413      	add	r3, r2
 8001876:	b29a      	uxth	r2, r3
 8001878:	2a09      	cmp	r2, #9
 800187a:	d8b5      	bhi.n	80017e8 <SVCCTL_App_Notification+0x14>
 800187c:	2b09      	cmp	r3, #9
 800187e:	d8b3      	bhi.n	80017e8 <SVCCTL_App_Notification+0x14>
 8001880:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <SVCCTL_App_Notification+0xb4>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	08001a7b 	.word	0x08001a7b
 800188c:	08001aa7 	.word	0x08001aa7
 8001890:	080017e9 	.word	0x080017e9
 8001894:	080017e9 	.word	0x080017e9
 8001898:	08001ad9 	.word	0x08001ad9
 800189c:	080017e9 	.word	0x080017e9
 80018a0:	08001acd 	.word	0x08001acd
 80018a4:	080017e9 	.word	0x080017e9
 80018a8:	08001b55 	.word	0x08001b55
 80018ac:	08001a6f 	.word	0x08001a6f
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0;
 80018b0:	2500      	movs	r5, #0
        LOG_INFO_APP(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80018b2:	2102      	movs	r1, #2
 80018b4:	4628      	mov	r0, r5
 80018b6:	4a94      	ldr	r2, [pc, #592]	@ (8001b08 <SVCCTL_App_Notification+0x334>)
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0;
 80018b8:	82dd      	strh	r5, [r3, #22]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
 80018ba:	761d      	strb	r5, [r3, #24]
        LOG_INFO_APP(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80018bc:	f001 f8a8 	bl	8002a10 <Log_Module_Print>
        LOG_INFO_APP("     - Connection Handle:   0x%02X\n     - Reason:    0x%02X\n",
 80018c0:	79a2      	ldrb	r2, [r4, #6]
 80018c2:	88a3      	ldrh	r3, [r4, #4]
 80018c4:	2102      	movs	r1, #2
 80018c6:	9200      	str	r2, [sp, #0]
 80018c8:	4628      	mov	r0, r5
 80018ca:	4a90      	ldr	r2, [pc, #576]	@ (8001b0c <SVCCTL_App_Notification+0x338>)
 80018cc:	f001 f8a0 	bl	8002a10 <Log_Module_Print>
 80018d0:	e7b1      	b.n	8001836 <SVCCTL_App_Notification+0x62>
  UTIL_SEQ_SetEvt(1U << CFG_IDLEEVT_PROC_GAP_COMPLETE);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f00a fc6a 	bl	800c1ac <UTIL_SEQ_SetEvt>
  return;
 80018d8:	e786      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          conn_interval_us = p_enhanced_conn_complete->Conn_Interval * 1250;
 80018da:	f8b0 501b 	ldrh.w	r5, [r0, #27]
          LOG_INFO_APP(">>== HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%04X\n", p_enhanced_conn_complete->Connection_Handle);
 80018de:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 80018e2:	2102      	movs	r1, #2
 80018e4:	2000      	movs	r0, #0
 80018e6:	4a8a      	ldr	r2, [pc, #552]	@ (8001b10 <SVCCTL_App_Notification+0x33c>)
 80018e8:	f001 f892 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80018ec:	7a62      	ldrb	r2, [r4, #9]
 80018ee:	7aa3      	ldrb	r3, [r4, #10]
          conn_interval_us = p_enhanced_conn_complete->Conn_Interval * 1250;
 80018f0:	f240 47e2 	movw	r7, #1250	@ 0x4e2
          LOG_INFO_APP("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80018f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80018f8:	7ae2      	ldrb	r2, [r4, #11]
 80018fa:	7b23      	ldrb	r3, [r4, #12]
 80018fc:	2102      	movs	r1, #2
 80018fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001902:	7b62      	ldrb	r2, [r4, #13]
 8001904:	7ba3      	ldrb	r3, [r4, #14]
 8001906:	2000      	movs	r0, #0
 8001908:	9200      	str	r2, [sp, #0]
 800190a:	4a82      	ldr	r2, [pc, #520]	@ (8001b14 <SVCCTL_App_Notification+0x340>)
 800190c:	f001 f880 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 8001910:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
          conn_interval_us = p_enhanced_conn_complete->Conn_Interval * 1250;
 8001914:	fb07 f505 	mul.w	r5, r7, r5
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 8001918:	4b7f      	ldr	r3, [pc, #508]	@ (8001b18 <SVCCTL_App_Notification+0x344>)
 800191a:	f8b4 201f 	ldrh.w	r2, [r4, #31]
 800191e:	fba3 1305 	umull	r1, r3, r3, r5
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	fb0c 5513 	mls	r5, ip, r3, r5
 8001928:	4f7c      	ldr	r7, [pc, #496]	@ (8001b1c <SVCCTL_App_Notification+0x348>)
 800192a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800192e:	fba7 7505 	umull	r7, r5, r7, r5
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	9202      	str	r2, [sp, #8]
 8001936:	f8b4 201d 	ldrh.w	r2, [r4, #29]
          if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800193a:	4e70      	ldr	r6, [pc, #448]	@ (8001afc <SVCCTL_App_Notification+0x328>)
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 800193c:	08ed      	lsrs	r5, r5, #3
 800193e:	2102      	movs	r1, #2
 8001940:	9201      	str	r2, [sp, #4]
 8001942:	2000      	movs	r0, #0
 8001944:	4a76      	ldr	r2, [pc, #472]	@ (8001b20 <SVCCTL_App_Notification+0x34c>)
 8001946:	9500      	str	r5, [sp, #0]
 8001948:	f001 f862 	bl	8002a10 <Log_Module_Print>
          if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800194c:	7e33      	ldrb	r3, [r6, #24]
          P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
 800194e:	2200      	movs	r2, #0
            bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8001950:	2b01      	cmp	r3, #1
 8001952:	bf14      	ite	ne
 8001954:	2302      	movne	r3, #2
 8001956:	2303      	moveq	r3, #3
 8001958:	7633      	strb	r3, [r6, #24]
          P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
 800195a:	4869      	ldr	r0, [pc, #420]	@ (8001b00 <SVCCTL_App_Notification+0x32c>)
          bleAppContext.BleApplicationContext_legacy.connectionHandle = p_enhanced_conn_complete->Connection_Handle;
 800195c:	f8b4 3005 	ldrh.w	r3, [r4, #5]
          P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
 8001960:	7002      	strb	r2, [r0, #0]
          P2P_SERVERHandleNotification.ConnectionHandle = p_enhanced_conn_complete->Connection_Handle;
 8001962:	8043      	strh	r3, [r0, #2]
          bleAppContext.BleApplicationContext_legacy.connectionHandle = p_enhanced_conn_complete->Connection_Handle;
 8001964:	82f3      	strh	r3, [r6, #22]
          P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
 8001966:	f000 fc2f 	bl	80021c8 <P2P_SERVER_APP_EvtRx>
          UTIL_TIMER_Stop(&(bleAppContext.Advertising_mgr_timer_Id));
 800196a:	f106 001c 	add.w	r0, r6, #28
 800196e:	f00a fd97 	bl	800c4a0 <UTIL_TIMER_Stop>
          break; /* HCI_LE_ENHANCED_CONNECTION_COMPLETE_SUBEVT_CODE */
 8001972:	e739      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          conn_interval_us = p_conn_update_complete->Conn_Interval * 1250;
 8001974:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8001978:	f8b0 5007 	ldrh.w	r5, [r0, #7]
          LOG_INFO_APP(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800197c:	2102      	movs	r1, #2
 800197e:	2000      	movs	r0, #0
 8001980:	4a68      	ldr	r2, [pc, #416]	@ (8001b24 <SVCCTL_App_Notification+0x350>)
          conn_interval_us = p_conn_update_complete->Conn_Interval * 1250;
 8001982:	fb03 f505 	mul.w	r5, r3, r5
          LOG_INFO_APP(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8001986:	f001 f843 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 800198a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800198e:	4b62      	ldr	r3, [pc, #392]	@ (8001b18 <SVCCTL_App_Notification+0x344>)
 8001990:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 8001994:	fba3 1305 	umull	r1, r3, r3, r5
 8001998:	099b      	lsrs	r3, r3, #6
 800199a:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800199e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019a2:	fb00 5413 	mls	r4, r0, r3, r5
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	9202      	str	r2, [sp, #8]
 80019aa:	4a5c      	ldr	r2, [pc, #368]	@ (8001b1c <SVCCTL_App_Notification+0x348>)
 80019ac:	9101      	str	r1, [sp, #4]
 80019ae:	fba2 2404 	umull	r2, r4, r2, r4
 80019b2:	08e4      	lsrs	r4, r4, #3
 80019b4:	2102      	movs	r1, #2
 80019b6:	2000      	movs	r0, #0
 80019b8:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <SVCCTL_App_Notification+0x34c>)
 80019ba:	9400      	str	r4, [sp, #0]
 80019bc:	f001 f828 	bl	8002a10 <Log_Module_Print>
          break;
 80019c0:	e712      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          conn_interval_us = p_conn_complete->Conn_Interval * 1250;
 80019c2:	f8b0 500f 	ldrh.w	r5, [r0, #15]
          LOG_INFO_APP(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%04X\n", p_conn_complete->Connection_Handle);
 80019c6:	2102      	movs	r1, #2
 80019c8:	2000      	movs	r0, #0
 80019ca:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 80019ce:	4a56      	ldr	r2, [pc, #344]	@ (8001b28 <SVCCTL_App_Notification+0x354>)
 80019d0:	f001 f81e 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80019d4:	7a62      	ldrb	r2, [r4, #9]
 80019d6:	7aa3      	ldrb	r3, [r4, #10]
          conn_interval_us = p_conn_complete->Conn_Interval * 1250;
 80019d8:	f240 47e2 	movw	r7, #1250	@ 0x4e2
          LOG_INFO_APP("     - Connection established with @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80019dc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80019e0:	7ae2      	ldrb	r2, [r4, #11]
 80019e2:	7b23      	ldrb	r3, [r4, #12]
 80019e4:	2102      	movs	r1, #2
 80019e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80019ea:	7b62      	ldrb	r2, [r4, #13]
 80019ec:	7ba3      	ldrb	r3, [r4, #14]
 80019ee:	2000      	movs	r0, #0
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <SVCCTL_App_Notification+0x340>)
 80019f4:	f001 f80c 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 80019f8:	f44f 7c7a 	mov.w	ip, #1000	@ 0x3e8
          conn_interval_us = p_conn_complete->Conn_Interval * 1250;
 80019fc:	fb07 f505 	mul.w	r5, r7, r5
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <SVCCTL_App_Notification+0x344>)
 8001a02:	f8b4 2013 	ldrh.w	r2, [r4, #19]
 8001a06:	fba3 1305 	umull	r1, r3, r3, r5
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	fb0c 5513 	mls	r5, ip, r3, r5
 8001a10:	4f42      	ldr	r7, [pc, #264]	@ (8001b1c <SVCCTL_App_Notification+0x348>)
 8001a12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a16:	fba7 7505 	umull	r7, r5, r7, r5
 8001a1a:	0052      	lsls	r2, r2, #1
 8001a1c:	9202      	str	r2, [sp, #8]
 8001a1e:	f8b4 2011 	ldrh.w	r2, [r4, #17]
          if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8001a22:	4e36      	ldr	r6, [pc, #216]	@ (8001afc <SVCCTL_App_Notification+0x328>)
          LOG_INFO_APP("     - Connection Interval:   %d.%02d ms\n     - Connection latency:    %d\n     - Supervision Timeout:   %d ms\n",
 8001a24:	08ed      	lsrs	r5, r5, #3
 8001a26:	2000      	movs	r0, #0
 8001a28:	9201      	str	r2, [sp, #4]
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b20 <SVCCTL_App_Notification+0x34c>)
 8001a2e:	9500      	str	r5, [sp, #0]
 8001a30:	f000 ffee 	bl	8002a10 <Log_Module_Print>
          if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8001a34:	7e33      	ldrb	r3, [r6, #24]
            bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	bf14      	ite	ne
 8001a3a:	2302      	movne	r3, #2
 8001a3c:	2303      	moveq	r3, #3
 8001a3e:	7633      	strb	r3, [r6, #24]
          bleAppContext.BleApplicationContext_legacy.connectionHandle = p_conn_complete->Connection_Handle;
 8001a40:	f8b4 3005 	ldrh.w	r3, [r4, #5]
          Pairing_Req_RetVal = aci_gap_peripheral_security_req(p_conn_complete->Connection_Handle);
 8001a44:	b298      	uxth	r0, r3
          bleAppContext.BleApplicationContext_legacy.connectionHandle = p_conn_complete->Connection_Handle;
 8001a46:	82f3      	strh	r3, [r6, #22]
          Pairing_Req_RetVal = aci_gap_peripheral_security_req(p_conn_complete->Connection_Handle);
 8001a48:	f000 fc1e 	bl	8002288 <aci_gap_peripheral_security_req>
          if (Pairing_Req_RetVal == BLE_STATUS_SUCCESS)
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	f000 80a1 	beq.w	8001b94 <SVCCTL_App_Notification+0x3c0>
          P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
 8001a52:	2200      	movs	r2, #0
 8001a54:	482a      	ldr	r0, [pc, #168]	@ (8001b00 <SVCCTL_App_Notification+0x32c>)
          P2P_SERVERHandleNotification.ConnectionHandle = p_conn_complete->Connection_Handle;
 8001a56:	7963      	ldrb	r3, [r4, #5]
          P2P_SERVERHandleNotification.EvtOpcode = P2P_SERVER_CONN_HANDLE_EVT;
 8001a58:	7002      	strb	r2, [r0, #0]
          P2P_SERVERHandleNotification.ConnectionHandle = p_conn_complete->Connection_Handle;
 8001a5a:	79a2      	ldrb	r2, [r4, #6]
 8001a5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a60:	8043      	strh	r3, [r0, #2]
          P2P_SERVER_APP_EvtRx(&P2P_SERVERHandleNotification);
 8001a62:	f000 fbb1 	bl	80021c8 <P2P_SERVER_APP_EvtRx>
          UTIL_TIMER_Stop(&(bleAppContext.Advertising_mgr_timer_Id));
 8001a66:	4827      	ldr	r0, [pc, #156]	@ (8001b04 <SVCCTL_App_Notification+0x330>)
 8001a68:	f00a fd1a 	bl	800c4a0 <UTIL_TIMER_Stop>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8001a6c:	e6bc      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          LOG_INFO_APP(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8001a6e:	2102      	movs	r1, #2
 8001a70:	2000      	movs	r0, #0
 8001a72:	4a2e      	ldr	r2, [pc, #184]	@ (8001b2c <SVCCTL_App_Notification+0x358>)
 8001a74:	f000 ffcc 	bl	8002a10 <Log_Module_Print>
          break;
 8001a78:	e6b6      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          LOG_INFO_APP(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b30 <SVCCTL_App_Notification+0x35c>)
 8001a80:	f000 ffc6 	bl	8002a10 <Log_Module_Print>
          if (p_pairing_complete->Status != 0)
 8001a84:	79e3      	ldrb	r3, [r4, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8091 	beq.w	8001bae <SVCCTL_App_Notification+0x3da>
            LOG_INFO_APP("     - Pairing KO\n     - Status: 0x%02X\n     - Reason: 0x%02X\n",
 8001a8c:	7a24      	ldrb	r4, [r4, #8]
 8001a8e:	2102      	movs	r1, #2
 8001a90:	2000      	movs	r0, #0
 8001a92:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <SVCCTL_App_Notification+0x360>)
 8001a94:	9400      	str	r4, [sp, #0]
 8001a96:	f000 ffbb 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("\n");
 8001a9a:	2102      	movs	r1, #2
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	4a26      	ldr	r2, [pc, #152]	@ (8001b38 <SVCCTL_App_Notification+0x364>)
 8001aa0:	f000 ffb6 	bl	8002a10 <Log_Module_Print>
          break;
 8001aa4:	e6a0      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          LOG_INFO_APP(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE\n");
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	4a24      	ldr	r2, [pc, #144]	@ (8001b3c <SVCCTL_App_Notification+0x368>)
 8001aac:	f000 ffb0 	bl	8002a10 <Log_Module_Print>
          ret = aci_gap_pass_key_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, pin);
 8001ab0:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <SVCCTL_App_Notification+0x328>)
 8001ab2:	4923      	ldr	r1, [pc, #140]	@ (8001b40 <SVCCTL_App_Notification+0x36c>)
 8001ab4:	8ad8      	ldrh	r0, [r3, #22]
 8001ab6:	f000 fbe3 	bl	8002280 <aci_gap_pass_key_resp>
            LOG_INFO_APP("==>> aci_gap_pass_key_resp : Fail, reason: 0x%02X\n", ret);
 8001aba:	2102      	movs	r1, #2
          ret = aci_gap_pass_key_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, pin);
 8001abc:	4603      	mov	r3, r0
          if (ret != BLE_STATUS_SUCCESS)
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d07f      	beq.n	8001bc2 <SVCCTL_App_Notification+0x3ee>
            LOG_INFO_APP("==>> aci_gap_pass_key_resp : Fail, reason: 0x%02X\n", ret);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <SVCCTL_App_Notification+0x370>)
 8001ac6:	f000 ffa3 	bl	8002a10 <Log_Module_Print>
 8001aca:	e68d      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          LOG_INFO_APP(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE\n");
 8001acc:	2102      	movs	r1, #2
 8001ace:	2000      	movs	r0, #0
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <SVCCTL_App_Notification+0x374>)
 8001ad2:	f000 ff9d 	bl	8002a10 <Log_Module_Print>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8001ad6:	e687      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
          LOG_INFO_APP(">>== ACI_GAP_BOND_LOST_EVENT\n");
 8001ad8:	2102      	movs	r1, #2
 8001ada:	2000      	movs	r0, #0
 8001adc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <SVCCTL_App_Notification+0x378>)
 8001ade:	f000 ff97 	bl	8002a10 <Log_Module_Print>
          ret = aci_gap_allow_rebond(bleAppContext.BleApplicationContext_legacy.connectionHandle);
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SVCCTL_App_Notification+0x328>)
 8001ae4:	8ad8      	ldrh	r0, [r3, #22]
 8001ae6:	f000 fbd9 	bl	800229c <aci_gap_allow_rebond>
            LOG_INFO_APP("==>> aci_gap_allow_rebond : Fail, reason: 0x%02X\n", ret);
 8001aea:	2102      	movs	r1, #2
          ret = aci_gap_allow_rebond(bleAppContext.BleApplicationContext_legacy.connectionHandle);
 8001aec:	4603      	mov	r3, r0
          if (ret != BLE_STATUS_SUCCESS)
 8001aee:	2800      	cmp	r0, #0
 8001af0:	d06b      	beq.n	8001bca <SVCCTL_App_Notification+0x3f6>
            LOG_INFO_APP("==>> aci_gap_allow_rebond : Fail, reason: 0x%02X\n", ret);
 8001af2:	2000      	movs	r0, #0
 8001af4:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <SVCCTL_App_Notification+0x37c>)
 8001af6:	f000 ff8b 	bl	8002a10 <Log_Module_Print>
 8001afa:	e675      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
 8001afc:	200055a4 	.word	0x200055a4
 8001b00:	200055a0 	.word	0x200055a0
 8001b04:	200055c0 	.word	0x200055c0
 8001b08:	0802cbd8 	.word	0x0802cbd8
 8001b0c:	0802cc04 	.word	0x0802cc04
 8001b10:	0802cce8 	.word	0x0802cce8
 8001b14:	0802cd3c 	.word	0x0802cd3c
 8001b18:	10624dd3 	.word	0x10624dd3
 8001b1c:	cccccccd 	.word	0xcccccccd
 8001b20:	0802cc78 	.word	0x0802cc78
 8001b24:	0802cc44 	.word	0x0802cc44
 8001b28:	0802cd80 	.word	0x0802cd80
 8001b2c:	0802ce08 	.word	0x0802ce08
 8001b30:	0802cfb0 	.word	0x0802cfb0
 8001b34:	0802cfdc 	.word	0x0802cfdc
 8001b38:	0802d564 	.word	0x0802d564
 8001b3c:	0802ce38 	.word	0x0802ce38
 8001b40:	0001b207 	.word	0x0001b207
 8001b44:	0802ce60 	.word	0x0802ce60
 8001b48:	0802cde0 	.word	0x0802cde0
 8001b4c:	0802d034 	.word	0x0802d034
 8001b50:	0802d054 	.word	0x0802d054
          LOG_INFO_APP(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8001b54:	2102      	movs	r1, #2
 8001b56:	2000      	movs	r0, #0
 8001b58:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <SVCCTL_App_Notification+0x400>)
 8001b5a:	f000 ff59 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - numeric_value = %ld\n",
 8001b5e:	2102      	movs	r1, #2
 8001b60:	2000      	movs	r0, #0
 8001b62:	f8d4 3007 	ldr.w	r3, [r4, #7]
 8001b66:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd8 <SVCCTL_App_Notification+0x404>)
 8001b68:	f000 ff52 	bl	8002a10 <Log_Module_Print>
          LOG_INFO_APP("     - Hex_value = %lx\n",
 8001b6c:	2102      	movs	r1, #2
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f8d4 3007 	ldr.w	r3, [r4, #7]
 8001b74:	4a19      	ldr	r2, [pc, #100]	@ (8001bdc <SVCCTL_App_Notification+0x408>)
 8001b76:	f000 ff4b 	bl	8002a10 <Log_Module_Print>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(bleAppContext.BleApplicationContext_legacy.connectionHandle, confirm_value);
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <SVCCTL_App_Notification+0x40c>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	8ad8      	ldrh	r0, [r3, #22]
 8001b80:	f000 fb8e 	bl	80022a0 <aci_gap_numeric_comparison_value_confirm_yesno>
            LOG_INFO_APP("==>> aci_gap_numeric_comparison_value_confirm_yesno : Fail, reason: 0x%02X\n", ret);
 8001b84:	2102      	movs	r1, #2
          ret = aci_gap_numeric_comparison_value_confirm_yesno(bleAppContext.BleApplicationContext_legacy.connectionHandle, confirm_value);
 8001b86:	4603      	mov	r3, r0
          if (ret != BLE_STATUS_SUCCESS)
 8001b88:	b1b8      	cbz	r0, 8001bba <SVCCTL_App_Notification+0x3e6>
            LOG_INFO_APP("==>> aci_gap_numeric_comparison_value_confirm_yesno : Fail, reason: 0x%02X\n", ret);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <SVCCTL_App_Notification+0x410>)
 8001b8e:	f000 ff3f 	bl	8002a10 <Log_Module_Print>
 8001b92:	e629      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
        	  LOG_INFO_APP("Passkey asked\n \r");
 8001b94:	2102      	movs	r1, #2
 8001b96:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <SVCCTL_App_Notification+0x414>)
 8001b98:	f000 ff3a 	bl	8002a10 <Log_Module_Print>
 8001b9c:	e759      	b.n	8001a52 <SVCCTL_App_Notification+0x27e>
          BSP_LED_On(LED_GREEN);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f005 fec8 	bl	8007934 <BSP_LED_On>
          UTIL_TIMER_StartWithPeriod(&bleAppContext.SwitchOffGPIO_timer_Id, LED_ON_TIMEOUT_MS);
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	4811      	ldr	r0, [pc, #68]	@ (8001bec <SVCCTL_App_Notification+0x418>)
 8001ba8:	f00a fcc4 	bl	800c534 <UTIL_TIMER_StartWithPeriod>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8001bac:	e61c      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
            LOG_INFO_APP("     - Pairing Success\n");
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <SVCCTL_App_Notification+0x41c>)
 8001bb4:	f000 ff2c 	bl	8002a10 <Log_Module_Print>
 8001bb8:	e76f      	b.n	8001a9a <SVCCTL_App_Notification+0x2c6>
            LOG_INFO_APP("==>> aci_gap_numeric_comparison_value_confirm_yesno : Success\n");
 8001bba:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <SVCCTL_App_Notification+0x420>)
 8001bbc:	f000 ff28 	bl	8002a10 <Log_Module_Print>
 8001bc0:	e612      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
            LOG_INFO_APP("==>> aci_gap_pass_key_resp : Success\n");
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf8 <SVCCTL_App_Notification+0x424>)
 8001bc4:	f000 ff24 	bl	8002a10 <Log_Module_Print>
 8001bc8:	e60e      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
            LOG_INFO_APP("==>> aci_gap_allow_rebond : Success\n");
 8001bca:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <SVCCTL_App_Notification+0x428>)
 8001bcc:	f000 ff20 	bl	8002a10 <Log_Module_Print>
 8001bd0:	e60a      	b.n	80017e8 <SVCCTL_App_Notification+0x14>
 8001bd2:	bf00      	nop
 8001bd4:	0802cebc 	.word	0x0802cebc
 8001bd8:	0802cef0 	.word	0x0802cef0
 8001bdc:	0802cf0c 	.word	0x0802cf0c
 8001be0:	200055a4 	.word	0x200055a4
 8001be4:	0802cf24 	.word	0x0802cf24
 8001be8:	0802cdcc 	.word	0x0802cdcc
 8001bec:	200055d8 	.word	0x200055d8
 8001bf0:	0802d01c 	.word	0x0802d01c
 8001bf4:	0802cf70 	.word	0x0802cf70
 8001bf8:	0802ce94 	.word	0x0802ce94
 8001bfc:	0802d088 	.word	0x0802d088

08001c00 <BLECB_Indication>:

tBleStatus BLECB_Indication( const uint8_t* data,
                          uint16_t length,
                          const uint8_t* ext_data,
                          uint16_t ext_length )
{
 8001c00:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t status = BLE_STATUS_FAILED;
  BleEvtPacket_t *phcievt = NULL;
 8001c02:	2500      	movs	r5, #0
  uint16_t total_length = (length+ext_length);

  UNUSED(ext_data);

  if (data[0] == HCI_EVENT_PKT_TYPE)
 8001c04:	7806      	ldrb	r6, [r0, #0]
{
 8001c06:	b083      	sub	sp, #12
  if (data[0] == HCI_EVENT_PKT_TYPE)
 8001c08:	2e04      	cmp	r6, #4
  BleEvtPacket_t *phcievt = NULL;
 8001c0a:	9501      	str	r5, [sp, #4]
  if (data[0] == HCI_EVENT_PKT_TYPE)
 8001c0c:	d004      	beq.n	8001c18 <BLECB_Indication+0x18>
      LST_insert_tail(&BleAsynchEventQueue, (tListNode *)phcievt);
      UTIL_SEQ_SetTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SEQ_PRIO_0);
      status = BLE_STATUS_SUCCESS;
    }
  }
  else if (data[0] == HCI_ACLDATA_PKT_TYPE)
 8001c0e:	2e02      	cmp	r6, #2
 8001c10:	d025      	beq.n	8001c5e <BLECB_Indication+0x5e>
  uint8_t status = BLE_STATUS_FAILED;
 8001c12:	2091      	movs	r0, #145	@ 0x91
  {
    status = BLE_STATUS_SUCCESS;
  }
  return status;
}
 8001c14:	b003      	add	sp, #12
 8001c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t total_length = (length+ext_length);
 8001c18:	4419      	add	r1, r3
    APP_BLE_ResumeFlowProcessCb.Callback = BLE_ResumeFlowProcessCallback;
 8001c1a:	4a15      	ldr	r2, [pc, #84]	@ (8001c70 <BLECB_Indication+0x70>)
 8001c1c:	4b15      	ldr	r3, [pc, #84]	@ (8001c74 <BLECB_Indication+0x74>)
                   DIVC((sizeof(BleEvtPacketHeader_t) + total_length), sizeof (uint32_t)),
 8001c1e:	b289      	uxth	r1, r1
 8001c20:	310b      	adds	r1, #11
    APP_BLE_ResumeFlowProcessCb.Callback = BLE_ResumeFlowProcessCallback;
 8001c22:	609a      	str	r2, [r3, #8]
    if (AMM_Alloc (CFG_AMM_VIRTUAL_APP_BLE,
 8001c24:	4604      	mov	r4, r0
 8001c26:	0889      	lsrs	r1, r1, #2
 8001c28:	2002      	movs	r0, #2
 8001c2a:	aa01      	add	r2, sp, #4
 8001c2c:	f003 ff54 	bl	8005ad8 <AMM_Alloc>
 8001c30:	4607      	mov	r7, r0
 8001c32:	b9b8      	cbnz	r0, 8001c64 <BLECB_Indication+0x64>
    else if (phcievt != (BleEvtPacket_t *)0 )
 8001c34:	9d01      	ldr	r5, [sp, #4]
 8001c36:	2d00      	cmp	r5, #0
 8001c38:	d0eb      	beq.n	8001c12 <BLECB_Indication+0x12>
      phcievt->evtserial.type = HCI_EVENT_PKT_TYPE;
 8001c3a:	722e      	strb	r6, [r5, #8]
      phcievt->evtserial.evt.evtcode = data[1];
 8001c3c:	7863      	ldrb	r3, [r4, #1]
      memcpy( (void*)&phcievt->evtserial.evt.payload, &data[3], data[2]);
 8001c3e:	1ce1      	adds	r1, r4, #3
      phcievt->evtserial.evt.evtcode = data[1];
 8001c40:	726b      	strb	r3, [r5, #9]
      phcievt->evtserial.evt.plen  = data[2];
 8001c42:	78a2      	ldrb	r2, [r4, #2]
      memcpy( (void*)&phcievt->evtserial.evt.payload, &data[3], data[2]);
 8001c44:	f105 000b 	add.w	r0, r5, #11
      phcievt->evtserial.evt.plen  = data[2];
 8001c48:	72aa      	strb	r2, [r5, #10]
      memcpy( (void*)&phcievt->evtserial.evt.payload, &data[3], data[2]);
 8001c4a:	f029 fe8c 	bl	802b966 <memcpy>
      LST_insert_tail(&BleAsynchEventQueue, (tListNode *)phcievt);
 8001c4e:	4629      	mov	r1, r5
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <BLECB_Indication+0x78>)
 8001c52:	f005 fbb7 	bl	80073c4 <LST_insert_tail>
      UTIL_SEQ_SetTask(1U << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SEQ_PRIO_0);
 8001c56:	4639      	mov	r1, r7
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f00a fa93 	bl	800c184 <UTIL_SEQ_SetTask>
    status = BLE_STATUS_SUCCESS;
 8001c5e:	2000      	movs	r0, #0
}
 8001c60:	b003      	add	sp, #12
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LOG_INFO_APP("Alloc failed\n");
 8001c64:	2102      	movs	r1, #2
 8001c66:	4628      	mov	r0, r5
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <BLECB_Indication+0x7c>)
 8001c6a:	f000 fed1 	bl	8002a10 <Log_Module_Print>
      status = BLE_STATUS_FAILED;
 8001c6e:	e7d0      	b.n	8001c12 <BLECB_Indication+0x12>
 8001c70:	080010e1 	.word	0x080010e1
 8001c74:	20004db4 	.word	0x20004db4
 8001c78:	200055fc 	.word	0x200055fc
 8001c7c:	0802d0b0 	.word	0x0802d0b0

08001c80 <NVMCB_Store>:
{
  UNUSED(ptr);
  UNUSED(size);

  /* Call SNVMA for storing - Without callback */
  SNVMA_Write (APP_BLE_NvmBuffer,
 8001c80:	2000      	movs	r0, #0
 8001c82:	4901      	ldr	r1, [pc, #4]	@ (8001c88 <NVMCB_Store+0x8>)
 8001c84:	f003 bd80 	b.w	8005788 <SNVMA_Write>
 8001c88:	080010e9 	.word	0x080010e9

08001c8c <APPE_Button1Action>:
}

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
#if (CFG_BUTTON_SUPPORTED == 1)
void APPE_Button1Action(void)
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (bleAppContext.Device_Connection_Status == APP_BLE_IDLE)
 8001c8e:	4f33      	ldr	r7, [pc, #204]	@ (8001d5c <APPE_Button1Action+0xd0>)
{
 8001c90:	b089      	sub	sp, #36	@ 0x24
  if (bleAppContext.Device_Connection_Status == APP_BLE_IDLE)
 8001c92:	7e38      	ldrb	r0, [r7, #24]
 8001c94:	2800      	cmp	r0, #0
 8001c96:	d144      	bne.n	8001d22 <APPE_Button1Action+0x96>
    	LOG_INFO_APP("Inside the Set discoverable \r \n");
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4a31      	ldr	r2, [pc, #196]	@ (8001d60 <APPE_Button1Action+0xd4>)
 8001c9c:	f000 feb8 	bl	8002a10 <Log_Module_Print>
    		for(int i = 0 ; i < 9 ; i ++ ) {
 8001ca0:	4c30      	ldr	r4, [pc, #192]	@ (8001d64 <APPE_Button1Action+0xd8>)
    			LOG_INFO_APP("%02x:",Meter_Serial_Number_Received[i]);
 8001ca2:	4e31      	ldr	r6, [pc, #196]	@ (8001d68 <APPE_Button1Action+0xdc>)
 8001ca4:	f104 0509 	add.w	r5, r4, #9
 8001ca8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001cac:	4632      	mov	r2, r6
 8001cae:	2102      	movs	r1, #2
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f000 fead 	bl	8002a10 <Log_Module_Print>
    		for(int i = 0 ; i < 9 ; i ++ ) {
 8001cb6:	42ac      	cmp	r4, r5
 8001cb8:	d1f6      	bne.n	8001ca8 <APPE_Button1Action+0x1c>
    		LOG_INFO_APP("\n \r");
 8001cba:	2102      	movs	r1, #2
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <APPE_Button1Action+0xe0>)
 8001cc0:	f000 fea6 	bl	8002a10 <Log_Module_Print>
      status = aci_gap_set_discoverable(paramD,
 8001cc4:	2400      	movs	r4, #0
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <APPE_Button1Action+0xe4>)
 8001cca:	e9cd 4000 	strd	r4, r0, [sp]
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	22a0      	movs	r2, #160	@ 0xa0
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	2180      	movs	r1, #128	@ 0x80
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001cdc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001ce0:	f000 faa6 	bl	8002230 <aci_gap_set_discoverable>
 8001ce4:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 8001ce6:	bb20      	cbnz	r0, 8001d32 <APPE_Button1Action+0xa6>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 8001ce8:	2304      	movs	r3, #4
        LOG_INFO_APP("==>> aci_gap_set_discoverable - Success\n");
 8001cea:	2102      	movs	r1, #2
 8001cec:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <APPE_Button1Action+0xe8>)
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
 8001cee:	763b      	strb	r3, [r7, #24]
        LOG_INFO_APP("==>> aci_gap_set_discoverable - Success\n");
 8001cf0:	f000 fe8e 	bl	8002a10 <Log_Module_Print>
        status = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f000 facb 	bl	8002290 <aci_gap_delete_ad_type>
       if (status != BLE_STATUS_SUCCESS)
 8001cfa:	bb20      	cbnz	r0, 8001d46 <APPE_Button1Action+0xba>
       status = aci_gap_update_adv_data(adv_data_len, adv_data_p);
 8001cfc:	491e      	ldr	r1, [pc, #120]	@ (8001d78 <APPE_Button1Action+0xec>)
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f000 fac4 	bl	800228c <aci_gap_update_adv_data>
         LOG_INFO_APP("==>> Start Advertising Failed, result: 0x%02X\n", status);
 8001d04:	2102      	movs	r1, #2
       status = aci_gap_update_adv_data(adv_data_len, adv_data_p);
 8001d06:	4603      	mov	r3, r0
       if (status != BLE_STATUS_SUCCESS)
 8001d08:	b320      	cbz	r0, 8001d54 <APPE_Button1Action+0xc8>
         LOG_INFO_APP("==>> Start Advertising Failed, result: 0x%02X\n", status);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d7c <APPE_Button1Action+0xf0>)
 8001d0e:	f000 fe7f 	bl	8002a10 <Log_Module_Print>
  {
    /* Relaunch advertising */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
    UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
 8001d12:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8001d16:	481a      	ldr	r0, [pc, #104]	@ (8001d80 <APPE_Button1Action+0xf4>)
  else
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
  }
  return;
}
 8001d18:	b009      	add	sp, #36	@ 0x24
 8001d1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
 8001d1e:	f00a bc09 	b.w	800c534 <UTIL_TIMER_StartWithPeriod>
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
}
 8001d28:	b009      	add	sp, #36	@ 0x24
 8001d2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    UTIL_SEQ_SetTask( 1<<CFG_TASK_SEND_NOTIF_ID, CFG_SEQ_PRIO_0);
 8001d2e:	f00a ba29 	b.w	800c184 <UTIL_SEQ_SetTask>
        LOG_INFO_APP("==>> aci_gap_set_discoverable - fail, result: 0x%02X\n", status);
 8001d32:	4620      	mov	r0, r4
 8001d34:	2102      	movs	r1, #2
 8001d36:	4a13      	ldr	r2, [pc, #76]	@ (8001d84 <APPE_Button1Action+0xf8>)
 8001d38:	f000 fe6a 	bl	8002a10 <Log_Module_Print>
        status = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8001d3c:	200a      	movs	r0, #10
 8001d3e:	f000 faa7 	bl	8002290 <aci_gap_delete_ad_type>
       if (status != BLE_STATUS_SUCCESS)
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d0da      	beq.n	8001cfc <APPE_Button1Action+0x70>
         LOG_INFO_APP("==>> delete tx power level - fail, result: 0x%02X\n", status);
 8001d46:	4603      	mov	r3, r0
 8001d48:	2102      	movs	r1, #2
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <APPE_Button1Action+0xfc>)
 8001d4e:	f000 fe5f 	bl	8002a10 <Log_Module_Print>
 8001d52:	e7d3      	b.n	8001cfc <APPE_Button1Action+0x70>
         LOG_INFO_APP("==>> Success: Start Advertising\n");
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <APPE_Button1Action+0x100>)
 8001d56:	f000 fe5b 	bl	8002a10 <Log_Module_Print>
 8001d5a:	e7da      	b.n	8001d12 <APPE_Button1Action+0x86>
 8001d5c:	200055a4 	.word	0x200055a4
 8001d60:	0802c2b0 	.word	0x0802c2b0
 8001d64:	200017e3 	.word	0x200017e3
 8001d68:	0802c2d0 	.word	0x0802c2d0
 8001d6c:	0802c2d8 	.word	0x0802c2d8
 8001d70:	200017e4 	.word	0x200017e4
 8001d74:	0802c314 	.word	0x0802c314
 8001d78:	20000020 	.word	0x20000020
 8001d7c:	0802c374 	.word	0x0802c374
 8001d80:	200055c0 	.word	0x200055c0
 8001d84:	0802c2dc 	.word	0x0802c2dc
 8001d88:	0802c340 	.word	0x0802c340
 8001d8c:	0802c3a4 	.word	0x0802c3a4

08001d90 <APPE_Button2Action>:

void APPE_Button2Action(void)
{
 8001d90:	b510      	push	{r4, lr}
  tBleStatus ret;

  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8001d92:	4c0f      	ldr	r4, [pc, #60]	@ (8001dd0 <APPE_Button2Action+0x40>)
 8001d94:	7e23      	ldrb	r3, [r4, #24]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d00f      	beq.n	8001dba <APPE_Button2Action+0x2a>
  {
    ret = aci_gap_clear_security_db();
 8001d9a:	f000 fa7d 	bl	8002298 <aci_gap_clear_security_db>
    if (ret != BLE_STATUS_SUCCESS)
    {
      LOG_INFO_APP("==>> aci_gap_clear_security_db - Fail, result: 0x%02X\n", ret);
 8001d9e:	2102      	movs	r1, #2
    ret = aci_gap_clear_security_db();
 8001da0:	4603      	mov	r3, r0
    if (ret != BLE_STATUS_SUCCESS)
 8001da2:	b128      	cbz	r0, 8001db0 <APPE_Button2Action+0x20>
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
    UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
  }

  return;
}
 8001da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LOG_INFO_APP("==>> aci_gap_clear_security_db - Fail, result: 0x%02X\n", ret);
 8001da8:	2000      	movs	r0, #0
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <APPE_Button2Action+0x44>)
 8001dac:	f000 be30 	b.w	8002a10 <Log_Module_Print>
      LOG_INFO_APP("==>> aci_gap_clear_security_db - Success\n");
 8001db0:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <APPE_Button2Action+0x48>)
}
 8001db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LOG_INFO_APP("==>> aci_gap_clear_security_db - Success\n");
 8001db6:	f000 be2b 	b.w	8002a10 <Log_Module_Print>
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff f9ba 	bl	8001134 <APP_BLE_Procedure_Gap_Peripheral>
    UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
 8001dc0:	f104 001c 	add.w	r0, r4, #28
 8001dc4:	f64e 2160 	movw	r1, #60000	@ 0xea60
}
 8001dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UTIL_TIMER_StartWithPeriod(&bleAppContext.Advertising_mgr_timer_Id, ADV_TIMEOUT_MS);
 8001dcc:	f00a bbb2 	b.w	800c534 <UTIL_TIMER_StartWithPeriod>
 8001dd0:	200055a4 	.word	0x200055a4
 8001dd4:	0802d0c0 	.word	0x0802d0c0
 8001dd8:	0802d0f8 	.word	0x0802d0f8

08001ddc <APPE_Button3Action>:

void APPE_Button3Action(void)
{
 8001ddc:	b530      	push	{r4, r5, lr}
  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8001dde:	4916      	ldr	r1, [pc, #88]	@ (8001e38 <APPE_Button3Action+0x5c>)
{
 8001de0:	b083      	sub	sp, #12
  if (bleAppContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8001de2:	7e0c      	ldrb	r4, [r1, #24]
 8001de4:	2c02      	cmp	r4, #2
 8001de6:	d001      	beq.n	8001dec <APPE_Button3Action+0x10>
  {
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_CONN_PARAM_UPDATE);
  }

  return;
}
 8001de8:	b003      	add	sp, #12
 8001dea:	bd30      	pop	{r4, r5, pc}
      if (bleAppContext.connIntervalFlag != 0)
 8001dec:	f891 304c 	ldrb.w	r3, [r1, #76]	@ 0x4c
       status = aci_l2cap_connection_parameter_update_req(
 8001df0:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
      if (bleAppContext.connIntervalFlag != 0)
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0b      	itete	eq
 8001df8:	f44f 7248 	moveq.w	r2, #800	@ 0x320
 8001dfc:	2228      	movne	r2, #40	@ 0x28
 8001dfe:	f04f 0c01 	moveq.w	ip, #1
 8001e02:	f04f 0c00 	movne.w	ip, #0
       status = aci_l2cap_connection_parameter_update_req(
 8001e06:	8ac8      	ldrh	r0, [r1, #22]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9500      	str	r5, [sp, #0]
 8001e0c:	f881 c04c 	strb.w	ip, [r1, #76]	@ 0x4c
 8001e10:	4611      	mov	r1, r2
 8001e12:	f000 fa63 	bl	80022dc <aci_l2cap_connection_parameter_update_req>
        LOG_INFO_APP("aci_l2cap_connection_parameter_update_req - fail, result: 0x%02X\n",status);
 8001e16:	4621      	mov	r1, r4
       status = aci_l2cap_connection_parameter_update_req(
 8001e18:	4603      	mov	r3, r0
      if (status != BLE_STATUS_SUCCESS)
 8001e1a:	b130      	cbz	r0, 8001e2a <APPE_Button3Action+0x4e>
        LOG_INFO_APP("aci_l2cap_connection_parameter_update_req - fail, result: 0x%02X\n",status);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	4a07      	ldr	r2, [pc, #28]	@ (8001e3c <APPE_Button3Action+0x60>)
}
 8001e20:	b003      	add	sp, #12
 8001e22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        LOG_INFO_APP("aci_l2cap_connection_parameter_update_req - fail, result: 0x%02X\n",status);
 8001e26:	f000 bdf3 	b.w	8002a10 <Log_Module_Print>
        LOG_INFO_APP("==>> aci_l2cap_connection_parameter_update_req - Success\n");
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <APPE_Button3Action+0x64>)
}
 8001e2c:	b003      	add	sp, #12
 8001e2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        LOG_INFO_APP("==>> aci_l2cap_connection_parameter_update_req - Success\n");
 8001e32:	f000 bded 	b.w	8002a10 <Log_Module_Print>
 8001e36:	bf00      	nop
 8001e38:	200055a4 	.word	0x200055a4
 8001e3c:	0802c420 	.word	0x0802c420
 8001e40:	0802c464 	.word	0x0802c464

08001e44 <P2P_SERVER_EventHandler>:
  /* USER CODE END Service1_EventHandler_1 */

  return_value = SVCCTL_EvtNotAck;
  p_event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)p_Event)->data);

  switch(p_event_pckt->evt)
 8001e44:	7843      	ldrb	r3, [r0, #1]
 8001e46:	2bff      	cmp	r3, #255	@ 0xff
 8001e48:	d001      	beq.n	8001e4e <P2P_SERVER_EventHandler+0xa>
  return_value = SVCCTL_EvtNotAck;
 8001e4a:	2000      	movs	r0, #0
  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
}/* end P2P_SERVER_EventHandler */
 8001e4c:	4770      	bx	lr
      switch(p_blecore_evt->ecode)
 8001e4e:	f640 4201 	movw	r2, #3073	@ 0xc01
{
 8001e52:	b530      	push	{r4, r5, lr}
      switch(p_blecore_evt->ecode)
 8001e54:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 8001e58:	4604      	mov	r4, r0
 8001e5a:	4293      	cmp	r3, r2
{
 8001e5c:	b087      	sub	sp, #28
 8001e5e:	d012      	beq.n	8001e86 <P2P_SERVER_EventHandler+0x42>
 8001e60:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d002      	beq.n	8001e6e <P2P_SERVER_EventHandler+0x2a>
  return_value = SVCCTL_EvtNotAck;
 8001e68:	2000      	movs	r0, #0
}/* end P2P_SERVER_EventHandler */
 8001e6a:	b007      	add	sp, #28
 8001e6c:	bd30      	pop	{r4, r5, pc}
            tBleStatus status = aci_gatt_confirm_indication(pr->Connection_Handle);
 8001e6e:	f8b0 0005 	ldrh.w	r0, [r0, #5]
 8001e72:	f000 fa31 	bl	80022d8 <aci_gatt_confirm_indication>
              LOG_INFO_APP("  Fail   : aci_gatt_confirm_indication command, result: 0x%x \n", status);
 8001e76:	2102      	movs	r1, #2
            tBleStatus status = aci_gatt_confirm_indication(pr->Connection_Handle);
 8001e78:	4603      	mov	r3, r0
            if (status != BLE_STATUS_SUCCESS)
 8001e7a:	b360      	cbz	r0, 8001ed6 <P2P_SERVER_EventHandler+0x92>
              LOG_INFO_APP("  Fail   : aci_gatt_confirm_indication command, result: 0x%x \n", status);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4a21      	ldr	r2, [pc, #132]	@ (8001f04 <P2P_SERVER_EventHandler+0xc0>)
 8001e80:	f000 fdc6 	bl	8002a10 <Log_Module_Print>
 8001e84:	e7f0      	b.n	8001e68 <P2P_SERVER_EventHandler+0x24>
          notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
 8001e86:	f8b0 300b 	ldrh.w	r3, [r0, #11]
          if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8001e8a:	491f      	ldr	r1, [pc, #124]	@ (8001f08 <P2P_SERVER_EventHandler+0xc4>)
          notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
 8001e8c:	f88d 300c 	strb.w	r3, [sp, #12]
          if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8001e90:	888b      	ldrh	r3, [r1, #4]
          notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
 8001e92:	f8d0 2005 	ldr.w	r2, [r0, #5]
          if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8001e96:	3302      	adds	r3, #2
          notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
 8001e98:	f100 050d 	add.w	r5, r0, #13
          if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8001e9c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
          notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
 8001ea0:	9204      	str	r2, [sp, #16]
          notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
 8001ea2:	9502      	str	r5, [sp, #8]
          if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Switch_CCharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8001ea4:	ea4f 4012 	mov.w	r0, r2, lsr #16
 8001ea8:	d019      	beq.n	8001ede <P2P_SERVER_EventHandler+0x9a>
          else if(p_attribute_modified->Attr_Handle == (P2P_SERVER_Context.Led_CCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8001eaa:	884b      	ldrh	r3, [r1, #2]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4298      	cmp	r0, r3
 8001eb0:	d1da      	bne.n	8001e68 <P2P_SERVER_EventHandler+0x24>
            notification.EvtOpcode = P2P_SERVER_LED_C_WRITE_NO_RESP_EVT;
 8001eb2:	2301      	movs	r3, #1
            LOG_INFO_APP("-- GATT : LED CONFIGURATION RECEIVED\n");
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <P2P_SERVER_EventHandler+0xc8>)
            notification.EvtOpcode = P2P_SERVER_LED_C_WRITE_NO_RESP_EVT;
 8001eba:	f88d 3004 	strb.w	r3, [sp, #4]
            LOG_INFO_APP("-- GATT : LED CONFIGURATION RECEIVED\n");
 8001ebe:	f000 fda7 	bl	8002a10 <Log_Module_Print>
            notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
 8001ec2:	f8b4 300b 	ldrh.w	r3, [r4, #11]
            P2P_SERVER_Notification(&notification);
 8001ec6:	a801      	add	r0, sp, #4
            notification.DataTransfered.Length = p_attribute_modified->Attr_Data_Length;
 8001ec8:	f88d 300c 	strb.w	r3, [sp, #12]
            notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
 8001ecc:	9502      	str	r5, [sp, #8]
            P2P_SERVER_Notification(&notification);
 8001ece:	f000 f927 	bl	8002120 <P2P_SERVER_Notification>
  return_value = SVCCTL_EvtNotAck;
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	e7c9      	b.n	8001e6a <P2P_SERVER_EventHandler+0x26>
              LOG_INFO_APP("  Success: aci_gatt_confirm_indication command\n");
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <P2P_SERVER_EventHandler+0xcc>)
 8001ed8:	f000 fd9a 	bl	8002a10 <Log_Module_Print>
 8001edc:	e7c4      	b.n	8001e68 <P2P_SERVER_EventHandler+0x24>
            switch(p_attribute_modified->Attr_Data[0])
 8001ede:	7b63      	ldrb	r3, [r4, #13]
 8001ee0:	b143      	cbz	r3, 8001ef4 <P2P_SERVER_EventHandler+0xb0>
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d1f5      	bne.n	8001ed2 <P2P_SERVER_EventHandler+0x8e>
                notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_ENABLED_EVT;
 8001ee6:	2302      	movs	r3, #2
                P2P_SERVER_Notification(&notification);
 8001ee8:	a801      	add	r0, sp, #4
                notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_ENABLED_EVT;
 8001eea:	f88d 3004 	strb.w	r3, [sp, #4]
                P2P_SERVER_Notification(&notification);
 8001eee:	f000 f917 	bl	8002120 <P2P_SERVER_Notification>
                break;
 8001ef2:	e7ee      	b.n	8001ed2 <P2P_SERVER_EventHandler+0x8e>
                notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_DISABLED_EVT;
 8001ef4:	2303      	movs	r3, #3
                P2P_SERVER_Notification(&notification);
 8001ef6:	a801      	add	r0, sp, #4
                notification.EvtOpcode = P2P_SERVER_SWITCH_C_NOTIFY_DISABLED_EVT;
 8001ef8:	f88d 3004 	strb.w	r3, [sp, #4]
                P2P_SERVER_Notification(&notification);
 8001efc:	f000 f910 	bl	8002120 <P2P_SERVER_Notification>
                break;
 8001f00:	e7e7      	b.n	8001ed2 <P2P_SERVER_EventHandler+0x8e>
 8001f02:	bf00      	nop
 8001f04:	0802d174 	.word	0x0802d174
 8001f08:	20005604 	.word	0x20005604
 8001f0c:	0802d14c 	.word	0x0802d14c
 8001f10:	0802d1b4 	.word	0x0802d1b4

08001f14 <P2P_SERVER_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2P_SERVER_Init(void)
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE END SVCCTL_InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(P2P_SERVER_EventHandler);
 8001f16:	4837      	ldr	r0, [pc, #220]	@ (8001ff4 <P2P_SERVER_Init+0xe0>)
{
 8001f18:	b08a      	sub	sp, #40	@ 0x28
  SVCCTL_RegisterSvcHandler(P2P_SERVER_EventHandler);
 8001f1a:	f009 ffb1 	bl	800be80 <SVCCTL_RegisterSvcHandler>
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8001f1e:	f64f 6040 	movw	r0, #65088	@ 0xfe40
 8001f22:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <P2P_SERVER_Init+0xe4>)
 8001f24:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <P2P_SERVER_Init+0xe8>)
 8001f26:	4a36      	ldr	r2, [pc, #216]	@ (8002000 <P2P_SERVER_Init+0xec>)
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8001f28:	4c36      	ldr	r4, [pc, #216]	@ (8002004 <P2P_SERVER_Init+0xf0>)
  COPY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8001f2a:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8001f2e:	9208      	str	r2, [sp, #32]
 8001f30:	9009      	str	r0, [sp, #36]	@ 0x24
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8001f32:	2306      	movs	r3, #6
 8001f34:	2201      	movs	r2, #1
 8001f36:	2002      	movs	r0, #2
 8001f38:	9400      	str	r4, [sp, #0]
 8001f3a:	a906      	add	r1, sp, #24
 8001f3c:	f000 f9b4 	bl	80022a8 <aci_gatt_add_service>
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(P2P_SERVER_Context.P2p_serverSvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d048      	beq.n	8001fd6 <P2P_SERVER_Init+0xc2>
 8001f44:	4603      	mov	r3, r0
  {
    LOG_INFO_APP("  Fail   : aci_gatt_add_service command: P2P_Server, error code: 0x%x \n\r", ret);
 8001f46:	2102      	movs	r1, #2
 8001f48:	2000      	movs	r0, #0
 8001f4a:	4a2f      	ldr	r2, [pc, #188]	@ (8002008 <P2P_SERVER_Init+0xf4>)
 8001f4c:	f000 fd60 	bl	8002a10 <Log_Module_Print>
  }

  /**
   * LED_C
   */
  COPY_LED_C_UUID(uuid.Char_UUID_128);
 8001f50:	f64f 6141 	movw	r1, #65089	@ 0xfe41
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f54:	2201      	movs	r2, #1
  COPY_LED_C_UUID(uuid.Char_UUID_128);
 8001f56:	9109      	str	r1, [sp, #36]	@ 0x24
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f58:	492c      	ldr	r1, [pc, #176]	@ (800200c <P2P_SERVER_Init+0xf8>)
 8001f5a:	2010      	movs	r0, #16
 8001f5c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8001f60:	2106      	movs	r1, #6
 8001f62:	9202      	str	r2, [sp, #8]
 8001f64:	2209      	movs	r2, #9
 8001f66:	2302      	movs	r3, #2
 8001f68:	9003      	str	r0, [sp, #12]
 8001f6a:	9100      	str	r1, [sp, #0]
  COPY_LED_C_UUID(uuid.Char_UUID_128);
 8001f6c:	4828      	ldr	r0, [pc, #160]	@ (8002010 <P2P_SERVER_Init+0xfc>)
 8001f6e:	4929      	ldr	r1, [pc, #164]	@ (8002014 <P2P_SERVER_Init+0x100>)
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f70:	9201      	str	r2, [sp, #4]
  COPY_LED_C_UUID(uuid.Char_UUID_128);
 8001f72:	4d29      	ldr	r5, [pc, #164]	@ (8002018 <P2P_SERVER_Init+0x104>)
 8001f74:	9007      	str	r0, [sp, #28]
 8001f76:	9108      	str	r1, [sp, #32]
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f78:	8820      	ldrh	r0, [r4, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	aa06      	add	r2, sp, #24
  COPY_LED_C_UUID(uuid.Char_UUID_128);
 8001f7e:	9506      	str	r5, [sp, #24]
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f80:	f000 f994 	bl	80022ac <aci_gatt_add_char>
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(P2P_SERVER_Context.Led_CCharHdle));
  if (ret != BLE_STATUS_SUCCESS)
  {
    LOG_INFO_APP("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%2X\n", ret);
 8001f84:	2102      	movs	r1, #2
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f86:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 8001f88:	b378      	cbz	r0, 8001fea <P2P_SERVER_Init+0xd6>
    LOG_INFO_APP("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%2X\n", ret);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	4a23      	ldr	r2, [pc, #140]	@ (800201c <P2P_SERVER_Init+0x108>)
 8001f8e:	f000 fd3f 	bl	8002a10 <Log_Module_Print>
  /* USER CODE END SVCCTL_InitService1Char1 */

  /**
   * SWITCH_C
   */
  COPY_SWITCH_C_UUID(uuid.Char_UUID_128);
 8001f92:	f64f 6342 	movw	r3, #65090	@ 0xfe42
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f96:	2501      	movs	r5, #1
 8001f98:	2110      	movs	r1, #16
  COPY_SWITCH_C_UUID(uuid.Char_UUID_128);
 8001f9a:	9309      	str	r3, [sp, #36]	@ 0x24
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001f9c:	4b20      	ldr	r3, [pc, #128]	@ (8002020 <P2P_SERVER_Init+0x10c>)
 8001f9e:	8820      	ldrh	r0, [r4, #0]
 8001fa0:	2609      	movs	r6, #9
 8001fa2:	e9cd 5304 	strd	r5, r3, [sp, #16]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e9cd 5102 	strd	r5, r1, [sp, #8]
  COPY_SWITCH_C_UUID(uuid.Char_UUID_128);
 8001fac:	4a1a      	ldr	r2, [pc, #104]	@ (8002018 <P2P_SERVER_Init+0x104>)
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001fae:	9100      	str	r1, [sp, #0]
  COPY_SWITCH_C_UUID(uuid.Char_UUID_128);
 8001fb0:	4c17      	ldr	r4, [pc, #92]	@ (8002010 <P2P_SERVER_Init+0xfc>)
 8001fb2:	4918      	ldr	r1, [pc, #96]	@ (8002014 <P2P_SERVER_Init+0x100>)
 8001fb4:	9206      	str	r2, [sp, #24]
 8001fb6:	e9cd 4107 	strd	r4, r1, [sp, #28]
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001fba:	aa06      	add	r2, sp, #24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	9601      	str	r6, [sp, #4]
 8001fc0:	f000 f974 	bl	80022ac <aci_gatt_add_char>
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(P2P_SERVER_Context.Switch_CCharHdle));
  if (ret != BLE_STATUS_SUCCESS)
  {
    LOG_INFO_APP("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%2X\n", ret);
 8001fc4:	2102      	movs	r1, #2
  ret = aci_gatt_add_char(P2P_SERVER_Context.P2p_serverSvcHdle,
 8001fc6:	4603      	mov	r3, r0
  if (ret != BLE_STATUS_SUCCESS)
 8001fc8:	b150      	cbz	r0, 8001fe0 <P2P_SERVER_Init+0xcc>
    LOG_INFO_APP("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%2X\n", ret);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	4a15      	ldr	r2, [pc, #84]	@ (8002024 <P2P_SERVER_Init+0x110>)
 8001fce:	f000 fd1f 	bl	8002a10 <Log_Module_Print>
  /* USER CODE BEGIN SVCCTL_InitService1Svc_2 */

  /* USER CODE END SVCCTL_InitService1Svc_2 */

  return;
}
 8001fd2:	b00a      	add	sp, #40	@ 0x28
 8001fd4:	bd70      	pop	{r4, r5, r6, pc}
    LOG_INFO_APP("  Success: aci_gatt_add_service command: P2P_Server \n\r");
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	4a13      	ldr	r2, [pc, #76]	@ (8002028 <P2P_SERVER_Init+0x114>)
 8001fda:	f000 fd19 	bl	8002a10 <Log_Module_Print>
 8001fde:	e7b7      	b.n	8001f50 <P2P_SERVER_Init+0x3c>
    LOG_INFO_APP("  Success: aci_gatt_add_char command   : SWITCH_C\n");
 8001fe0:	4a12      	ldr	r2, [pc, #72]	@ (800202c <P2P_SERVER_Init+0x118>)
 8001fe2:	f000 fd15 	bl	8002a10 <Log_Module_Print>
}
 8001fe6:	b00a      	add	sp, #40	@ 0x28
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
    LOG_INFO_APP("  Success: aci_gatt_add_char command   : LED_C\n");
 8001fea:	4a11      	ldr	r2, [pc, #68]	@ (8002030 <P2P_SERVER_Init+0x11c>)
 8001fec:	f000 fd10 	bl	8002a10 <Log_Module_Print>
 8001ff0:	e7cf      	b.n	8001f92 <P2P_SERVER_Init+0x7e>
 8001ff2:	bf00      	nop
 8001ff4:	08001e45 	.word	0x08001e45
 8001ff8:	d5b3e58f 	.word	0xd5b3e58f
 8001ffc:	984a7f2e 	.word	0x984a7f2e
 8002000:	cc7a482a 	.word	0xcc7a482a
 8002004:	20005604 	.word	0x20005604
 8002008:	0802d1e4 	.word	0x0802d1e4
 800200c:	20005606 	.word	0x20005606
 8002010:	9d4c21ed 	.word	0x9d4c21ed
 8002014:	8e224541 	.word	0x8e224541
 8002018:	ae82ed19 	.word	0xae82ed19
 800201c:	0802d268 	.word	0x0802d268
 8002020:	20005608 	.word	0x20005608
 8002024:	0802d2dc 	.word	0x0802d2dc
 8002028:	0802d230 	.word	0x0802d230
 800202c:	0802d324 	.word	0x0802d324
 8002030:	0802d2ac 	.word	0x0802d2ac

08002034 <P2P_SERVER_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: Structure holding data to update
 *
 */
tBleStatus P2P_SERVER_UpdateValue(P2P_SERVER_CharOpcode_t CharOpcode, P2P_SERVER_Data_t *pData)
{
 8002034:	b530      	push	{r4, r5, lr}
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
 8002036:	4604      	mov	r4, r0
{
 8002038:	b083      	sub	sp, #12
  switch(CharOpcode)
 800203a:	b1c8      	cbz	r0, 8002070 <P2P_SERVER_UpdateValue+0x3c>
 800203c:	2801      	cmp	r0, #1
 800203e:	d113      	bne.n	8002068 <P2P_SERVER_UpdateValue+0x34>

      /* USER CODE END Service1_Char_Value_1*/
      break;

    case P2P_SERVER_SWITCH_C:
      ret = aci_gatt_update_char_value(P2P_SERVER_Context.P2p_serverSvcHdle,
 8002040:	680c      	ldr	r4, [r1, #0]
 8002042:	481c      	ldr	r0, [pc, #112]	@ (80020b4 <P2P_SERVER_UpdateValue+0x80>)
 8002044:	790b      	ldrb	r3, [r1, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	8881      	ldrh	r1, [r0, #4]
 800204a:	8800      	ldrh	r0, [r0, #0]
 800204c:	9400      	str	r4, [sp, #0]
 800204e:	f000 f941 	bl	80022d4 <aci_gatt_update_char_value>
                                       P2P_SERVER_Context.Switch_CCharHdle,
                                       0, /* charValOffset */
                                       pData->Length, /* charValueLen */
                                       (uint8_t *)pData->p_Payload);
      if (ret != BLE_STATUS_SUCCESS)
 8002052:	4605      	mov	r5, r0
 8002054:	b340      	cbz	r0, 80020a8 <P2P_SERVER_UpdateValue+0x74>
      {
        LOG_INFO_APP("  Fail   : aci_gatt_update_char_value SWITCH_C command, error code: 0x%2X\n", ret);
 8002056:	4603      	mov	r3, r0
 8002058:	2102      	movs	r1, #2
 800205a:	2000      	movs	r0, #0
 800205c:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <P2P_SERVER_UpdateValue+0x84>)
 800205e:	f000 fcd7 	bl	8002a10 <Log_Module_Print>
  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
}
 8002062:	4628      	mov	r0, r5
 8002064:	b003      	add	sp, #12
 8002066:	bd30      	pop	{r4, r5, pc}
  switch(CharOpcode)
 8002068:	2592      	movs	r5, #146	@ 0x92
}
 800206a:	4628      	mov	r0, r5
 800206c:	b003      	add	sp, #12
 800206e:	bd30      	pop	{r4, r5, pc}
      ret = aci_gatt_update_char_value(P2P_SERVER_Context.P2p_serverSvcHdle,
 8002070:	680d      	ldr	r5, [r1, #0]
 8002072:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <P2P_SERVER_UpdateValue+0x80>)
 8002074:	790b      	ldrb	r3, [r1, #4]
 8002076:	9500      	str	r5, [sp, #0]
 8002078:	8841      	ldrh	r1, [r0, #2]
 800207a:	4622      	mov	r2, r4
 800207c:	8800      	ldrh	r0, [r0, #0]
 800207e:	f000 f929 	bl	80022d4 <aci_gatt_update_char_value>
      if (ret != BLE_STATUS_SUCCESS)
 8002082:	4605      	mov	r5, r0
 8002084:	b938      	cbnz	r0, 8002096 <P2P_SERVER_UpdateValue+0x62>
        LOG_INFO_APP("  Success: aci_gatt_update_char_value LED_C command\n");
 8002086:	2102      	movs	r1, #2
 8002088:	4a0c      	ldr	r2, [pc, #48]	@ (80020bc <P2P_SERVER_UpdateValue+0x88>)
 800208a:	f000 fcc1 	bl	8002a10 <Log_Module_Print>
      ret = aci_gatt_update_char_value(P2P_SERVER_Context.P2p_serverSvcHdle,
 800208e:	2500      	movs	r5, #0
}
 8002090:	4628      	mov	r0, r5
 8002092:	b003      	add	sp, #12
 8002094:	bd30      	pop	{r4, r5, pc}
        LOG_INFO_APP("  Fail   : aci_gatt_update_char_value LED_C command, error code: 0x%2X\n", ret);
 8002096:	4603      	mov	r3, r0
 8002098:	2102      	movs	r1, #2
 800209a:	4620      	mov	r0, r4
 800209c:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <P2P_SERVER_UpdateValue+0x8c>)
 800209e:	f000 fcb7 	bl	8002a10 <Log_Module_Print>
}
 80020a2:	4628      	mov	r0, r5
 80020a4:	b003      	add	sp, #12
 80020a6:	bd30      	pop	{r4, r5, pc}
        LOG_INFO_APP("  Success: aci_gatt_update_char_value SWITCH_C command\n");
 80020a8:	2102      	movs	r1, #2
 80020aa:	4a06      	ldr	r2, [pc, #24]	@ (80020c4 <P2P_SERVER_UpdateValue+0x90>)
 80020ac:	f000 fcb0 	bl	8002a10 <Log_Module_Print>
 80020b0:	e7ed      	b.n	800208e <P2P_SERVER_UpdateValue+0x5a>
 80020b2:	bf00      	nop
 80020b4:	20005604 	.word	0x20005604
 80020b8:	0802d3d8 	.word	0x0802d3d8
 80020bc:	0802d3a0 	.word	0x0802d3a0
 80020c0:	0802d358 	.word	0x0802d358
 80020c4:	0802d424 	.word	0x0802d424

080020c8 <P2P_SERVER_Switch_c_SendNotification>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
__USED void P2P_SERVER_Switch_c_SendNotification(void) /* Property Notification */
{
 80020c8:	b510      	push	{r4, lr}
  p2p_server_notification_data.p_Payload = (uint8_t*)a_P2P_SERVER_UpdateCharData;
  p2p_server_notification_data.Length = 0;

  /* USER CODE BEGIN Service1Char2_NS_1*/

  if(P2P_SERVER_APP_Context.ButtonControl.ButtonStatus == 0x00)
 80020ca:	4811      	ldr	r0, [pc, #68]	@ (8002110 <P2P_SERVER_Switch_c_SendNotification+0x48>)
  } 
  else
  {
    P2P_SERVER_APP_Context.ButtonControl.ButtonStatus = 0x00;
  }
  a_P2P_SERVER_UpdateCharData[0] = 0x01; /* Device Led selection */
 80020cc:	2401      	movs	r4, #1
  if(P2P_SERVER_APP_Context.ButtonControl.ButtonStatus == 0x00)
 80020ce:	7903      	ldrb	r3, [r0, #4]
  a_P2P_SERVER_UpdateCharData[1] = P2P_SERVER_APP_Context.ButtonControl.ButtonStatus;
  /* Update notification data length */
  p2p_server_notification_data.Length = (p2p_server_notification_data.Length) + 2; 
 80020d0:	2102      	movs	r1, #2
  if(P2P_SERVER_APP_Context.ButtonControl.ButtonStatus == 0x00)
 80020d2:	fab3 f383 	clz	r3, r3
  p2p_server_notification_data.p_Payload = (uint8_t*)a_P2P_SERVER_UpdateCharData;
 80020d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002114 <P2P_SERVER_Switch_c_SendNotification+0x4c>)
{
 80020d8:	b082      	sub	sp, #8
  a_P2P_SERVER_UpdateCharData[0] = 0x01; /* Device Led selection */
 80020da:	7014      	strb	r4, [r2, #0]
  
  if(P2P_SERVER_APP_Context.Switch_c_Notification_Status == Switch_c_NOTIFICATION_ON)
 80020dc:	7804      	ldrb	r4, [r0, #0]
  if(P2P_SERVER_APP_Context.ButtonControl.ButtonStatus == 0x00)
 80020de:	095b      	lsrs	r3, r3, #5
  if(P2P_SERVER_APP_Context.Switch_c_Notification_Status == Switch_c_NOTIFICATION_ON)
 80020e0:	2c01      	cmp	r4, #1
 80020e2:	7103      	strb	r3, [r0, #4]
  p2p_server_notification_data.p_Payload = (uint8_t*)a_P2P_SERVER_UpdateCharData;
 80020e4:	9200      	str	r2, [sp, #0]
  { 
    LOG_INFO_APP("-- P2P APPLICATION SERVER : INFORM CLIENT BUTTON 1 PUSHED\n");
 80020e6:	f04f 0000 	mov.w	r0, #0
  p2p_server_notification_data.Length = (p2p_server_notification_data.Length) + 2; 
 80020ea:	f88d 1004 	strb.w	r1, [sp, #4]
  a_P2P_SERVER_UpdateCharData[1] = P2P_SERVER_APP_Context.ButtonControl.ButtonStatus;
 80020ee:	7053      	strb	r3, [r2, #1]
  if(P2P_SERVER_APP_Context.Switch_c_Notification_Status == Switch_c_NOTIFICATION_ON)
 80020f0:	d004      	beq.n	80020fc <P2P_SERVER_Switch_c_SendNotification+0x34>
    notification_on_off = Switch_c_NOTIFICATION_ON;
  } 
  else
  {
    LOG_INFO_APP("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT - NOTIFICATION DISABLED\n"); 
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <P2P_SERVER_Switch_c_SendNotification+0x50>)
 80020f4:	f000 fc8c 	bl	8002a10 <Log_Module_Print>
  /* USER CODE BEGIN Service1Char2_NS_Last*/

  /* USER CODE END Service1Char2_NS_Last*/

  return;
}
 80020f8:	b002      	add	sp, #8
 80020fa:	bd10      	pop	{r4, pc}
    LOG_INFO_APP("-- P2P APPLICATION SERVER : INFORM CLIENT BUTTON 1 PUSHED\n");
 80020fc:	4a07      	ldr	r2, [pc, #28]	@ (800211c <P2P_SERVER_Switch_c_SendNotification+0x54>)
 80020fe:	f000 fc87 	bl	8002a10 <Log_Module_Print>
    P2P_SERVER_UpdateValue(P2P_SERVER_SWITCH_C, &p2p_server_notification_data);
 8002102:	4620      	mov	r0, r4
 8002104:	4669      	mov	r1, sp
 8002106:	f7ff ff95 	bl	8002034 <P2P_SERVER_UpdateValue>
}
 800210a:	b002      	add	sp, #8
 800210c:	bd10      	pop	{r4, pc}
 800210e:	bf00      	nop
 8002110:	20005704 	.word	0x20005704
 8002114:	2000560c 	.word	0x2000560c
 8002118:	0802d498 	.word	0x0802d498
 800211c:	0802d45c 	.word	0x0802d45c

08002120 <P2P_SERVER_Notification>:
{
 8002120:	b538      	push	{r3, r4, r5, lr}
  switch(p_Notification->EvtOpcode)
 8002122:	7804      	ldrb	r4, [r0, #0]
 8002124:	2c02      	cmp	r4, #2
 8002126:	d025      	beq.n	8002174 <P2P_SERVER_Notification+0x54>
 8002128:	2c03      	cmp	r4, #3
 800212a:	d014      	beq.n	8002156 <P2P_SERVER_Notification+0x36>
 800212c:	2c01      	cmp	r4, #1
 800212e:	d000      	beq.n	8002132 <P2P_SERVER_Notification+0x12>
}
 8002130:	bd38      	pop	{r3, r4, r5, pc}
      if(p_Notification->DataTransfered.p_Payload[1] == 0x01)
 8002132:	6843      	ldr	r3, [r0, #4]
 8002134:	4605      	mov	r5, r0
 8002136:	785c      	ldrb	r4, [r3, #1]
 8002138:	2c01      	cmp	r4, #1
 800213a:	d02a      	beq.n	8002192 <P2P_SERVER_Notification+0x72>
      if(p_Notification->DataTransfered.p_Payload[1] == 0x00)
 800213c:	2c00      	cmp	r4, #0
 800213e:	d1f7      	bne.n	8002130 <P2P_SERVER_Notification+0x10>
        BSP_LED_Off(LED_BLUE);
 8002140:	4620      	mov	r0, r4
 8002142:	f005 fc09 	bl	8007958 <BSP_LED_Off>
        LOG_INFO_APP("-- P2P APPLICATION SERVER : LED1 OFF\n"); 
 8002146:	2102      	movs	r1, #2
 8002148:	4620      	mov	r0, r4
 800214a:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <P2P_SERVER_Notification+0x90>)
 800214c:	f000 fc60 	bl	8002a10 <Log_Module_Print>
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x00; /* LED1 OFF */
 8002150:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <P2P_SERVER_Notification+0x94>)
 8002152:	709c      	strb	r4, [r3, #2]
}
 8002154:	bd38      	pop	{r3, r4, r5, pc}
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_OFF;
 8002156:	2400      	movs	r4, #0
 8002158:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <P2P_SERVER_Notification+0x94>)
      LOG_INFO_APP("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n"); 
 800215a:	4620      	mov	r0, r4
 800215c:	2102      	movs	r1, #2
 800215e:	4a16      	ldr	r2, [pc, #88]	@ (80021b8 <P2P_SERVER_Notification+0x98>)
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_OFF;
 8002160:	701c      	strb	r4, [r3, #0]
      LOG_INFO_APP("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n"); 
 8002162:	f000 fc55 	bl	8002a10 <Log_Module_Print>
      LOG_INFO_APP(" \n\r");
 8002166:	4620      	mov	r0, r4
}
 8002168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      LOG_INFO_APP(" \n\r");
 800216c:	2102      	movs	r1, #2
 800216e:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <P2P_SERVER_Notification+0x9c>)
 8002170:	f000 bc4e 	b.w	8002a10 <Log_Module_Print>
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_ON;
 8002174:	2501      	movs	r5, #1
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <P2P_SERVER_Notification+0x94>)
      LOG_INFO_APP("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8002178:	4621      	mov	r1, r4
 800217a:	2000      	movs	r0, #0
 800217c:	4a10      	ldr	r2, [pc, #64]	@ (80021c0 <P2P_SERVER_Notification+0xa0>)
      P2P_SERVER_APP_Context.Switch_c_Notification_Status = Switch_c_NOTIFICATION_ON;
 800217e:	701d      	strb	r5, [r3, #0]
      LOG_INFO_APP("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8002180:	f000 fc46 	bl	8002a10 <Log_Module_Print>
      LOG_INFO_APP(" \n\r");
 8002184:	4621      	mov	r1, r4
}
 8002186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      LOG_INFO_APP(" \n\r");
 800218a:	2000      	movs	r0, #0
 800218c:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <P2P_SERVER_Notification+0x9c>)
 800218e:	f000 bc3f 	b.w	8002a10 <Log_Module_Print>
        BSP_LED_On(LED_BLUE);
 8002192:	2000      	movs	r0, #0
 8002194:	f005 fbce 	bl	8007934 <BSP_LED_On>
        LOG_INFO_APP("-- P2P APPLICATION SERVER : LED1 ON\n"); 
 8002198:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <P2P_SERVER_Notification+0xa4>)
 800219a:	2102      	movs	r1, #2
 800219c:	2000      	movs	r0, #0
 800219e:	f000 fc37 	bl	8002a10 <Log_Module_Print>
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x01; /* LED1 ON */
 80021a2:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <P2P_SERVER_Notification+0x94>)
      if(p_Notification->DataTransfered.p_Payload[1] == 0x00)
 80021a4:	686b      	ldr	r3, [r5, #4]
        P2P_SERVER_APP_Context.LedControl.Led1 = 0x01; /* LED1 ON */
 80021a6:	7094      	strb	r4, [r2, #2]
      if(p_Notification->DataTransfered.p_Payload[1] == 0x00)
 80021a8:	785c      	ldrb	r4, [r3, #1]
 80021aa:	2c00      	cmp	r4, #0
 80021ac:	d1c0      	bne.n	8002130 <P2P_SERVER_Notification+0x10>
 80021ae:	e7c7      	b.n	8002140 <P2P_SERVER_Notification+0x20>
 80021b0:	0802d50c 	.word	0x0802d50c
 80021b4:	20005704 	.word	0x20005704
 80021b8:	0802d56c 	.word	0x0802d56c
 80021bc:	0802d568 	.word	0x0802d568
 80021c0:	0802d534 	.word	0x0802d534
 80021c4:	0802d4e4 	.word	0x0802d4e4

080021c8 <P2P_SERVER_APP_EvtRx>:
{
 80021c8:	b508      	push	{r3, lr}
  switch(p_Notification->EvtOpcode)
 80021ca:	7803      	ldrb	r3, [r0, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d000      	beq.n	80021d2 <P2P_SERVER_APP_EvtRx+0xa>
}
 80021d0:	bd08      	pop	{r3, pc}
  BSP_LED_Off(LED_BLUE);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f005 fbc0 	bl	8007958 <BSP_LED_Off>
  P2P_SERVER_APP_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80021d8:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80021dc:	4b01      	ldr	r3, [pc, #4]	@ (80021e4 <P2P_SERVER_APP_EvtRx+0x1c>)
 80021de:	f8c3 2001 	str.w	r2, [r3, #1]
}
 80021e2:	bd08      	pop	{r3, pc}
 80021e4:	20005704 	.word	0x20005704

080021e8 <P2P_SERVER_APP_Init>:
{
 80021e8:	b510      	push	{r4, lr}
  P2P_SERVER_Init();
 80021ea:	f7ff fe93 	bl	8001f14 <P2P_SERVER_Init>
  UTIL_SEQ_RegTask( 1U << CFG_TASK_SEND_NOTIF_ID, UTIL_SEQ_RFU, P2P_SERVER_Switch_c_SendNotification);
 80021ee:	2100      	movs	r1, #0
 80021f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021f4:	4a06      	ldr	r2, [pc, #24]	@ (8002210 <P2P_SERVER_APP_Init+0x28>)
 80021f6:	f009 ffad 	bl	800c154 <UTIL_SEQ_RegTask>
  P2P_SERVER_APP_Context.Switch_c_Notification_Status= Switch_c_NOTIFICATION_OFF;
 80021fa:	2000      	movs	r0, #0
 80021fc:	4c05      	ldr	r4, [pc, #20]	@ (8002214 <P2P_SERVER_APP_Init+0x2c>)
 80021fe:	7020      	strb	r0, [r4, #0]
  BSP_LED_Off(LED_BLUE);
 8002200:	f005 fbaa 	bl	8007958 <BSP_LED_Off>
  P2P_SERVER_APP_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8002204:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002208:	f8c4 3001 	str.w	r3, [r4, #1]
}
 800220c:	bd10      	pop	{r4, pc}
 800220e:	bf00      	nop
 8002210:	080020c9 	.word	0x080020c9
 8002214:	20005704 	.word	0x20005704

08002218 <hci_le_set_advertising_data>:
/* HCI_LE_SET_ADVERTISING_DATA wrapper function */
tBleStatus hci_le_set_advertising_data( uint8_t Advertising_Data_Length,
                                        const uint8_t* Advertising_Data )
{
  BLE_WRAP_HCI_LE_SET_ADVERTISING_DATA_PREPROC( );
  tBleStatus status = HCI_LE_SET_ADVERTISING_DATA( Advertising_Data_Length,
 8002218:	f021 be26 	b.w	8023e68 <HCI_LE_SET_ADVERTISING_DATA>

0800221c <hci_le_set_default_phy>:
tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
  BLE_WRAP_HCI_LE_SET_DEFAULT_PHY_PREPROC( );
  tBleStatus status = HCI_LE_SET_DEFAULT_PHY( ALL_PHYS,
 800221c:	f021 be42 	b.w	8023ea4 <HCI_LE_SET_DEFAULT_PHY>

08002220 <aci_hal_write_config_data>:
tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
  BLE_WRAP_ACI_HAL_WRITE_CONFIG_DATA_PREPROC( );
  tBleStatus status = ACI_HAL_WRITE_CONFIG_DATA( Offset,
 8002220:	f021 be70 	b.w	8023f04 <ACI_HAL_WRITE_CONFIG_DATA>

08002224 <aci_hal_set_tx_power_level>:
/* ACI_HAL_SET_TX_POWER_LEVEL wrapper function */
tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
  BLE_WRAP_ACI_HAL_SET_TX_POWER_LEVEL_PREPROC( );
  tBleStatus status = ACI_HAL_SET_TX_POWER_LEVEL( En_High_Power,
 8002224:	f021 be7e 	b.w	8023f24 <ACI_HAL_SET_TX_POWER_LEVEL>

08002228 <aci_hal_set_radio_activity_mask>:

/* ACI_HAL_SET_RADIO_ACTIVITY_MASK wrapper function */
tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
  BLE_WRAP_ACI_HAL_SET_RADIO_ACTIVITY_MASK_PREPROC( );
  tBleStatus status = ACI_HAL_SET_RADIO_ACTIVITY_MASK( Radio_Activity_Mask );
 8002228:	f021 bec0 	b.w	8023fac <ACI_HAL_SET_RADIO_ACTIVITY_MASK>

0800222c <aci_gap_set_non_discoverable>:

/* ACI_GAP_SET_NON_DISCOVERABLE wrapper function */
tBleStatus aci_gap_set_non_discoverable( void )
{
  BLE_WRAP_ACI_GAP_SET_NON_DISCOVERABLE_PREPROC( );
  tBleStatus status = ACI_GAP_SET_NON_DISCOVERABLE(  );
 800222c:	f022 bd30 	b.w	8024c90 <ACI_GAP_SET_NON_DISCOVERABLE>

08002230 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8002230:	b410      	push	{r4}
 8002232:	f89d 4004 	ldrb.w	r4, [sp, #4]
  BLE_WRAP_ACI_GAP_SET_DISCOVERABLE_PREPROC( );
  tBleStatus status = ACI_GAP_SET_DISCOVERABLE( Advertising_Type,
 8002236:	9401      	str	r4, [sp, #4]
{
 8002238:	f89d 4008 	ldrb.w	r4, [sp, #8]
  tBleStatus status = ACI_GAP_SET_DISCOVERABLE( Advertising_Type,
 800223c:	9402      	str	r4, [sp, #8]
{
 800223e:	f89d 4010 	ldrb.w	r4, [sp, #16]
  tBleStatus status = ACI_GAP_SET_DISCOVERABLE( Advertising_Type,
 8002242:	9404      	str	r4, [sp, #16]
{
 8002244:	f8bd 4018 	ldrh.w	r4, [sp, #24]
  tBleStatus status = ACI_GAP_SET_DISCOVERABLE( Advertising_Type,
 8002248:	9406      	str	r4, [sp, #24]
{
 800224a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
  tBleStatus status = ACI_GAP_SET_DISCOVERABLE( Advertising_Type,
 800224e:	9407      	str	r4, [sp, #28]
                                                Service_Uuid_List,
                                                Conn_Interval_Min,
                                                Conn_Interval_Max );
  BLE_WRAP_ACI_GAP_SET_DISCOVERABLE_POSTPROC( );
  return status;
}
 8002250:	f85d 4b04 	ldr.w	r4, [sp], #4
  tBleStatus status = ACI_GAP_SET_DISCOVERABLE( Advertising_Type,
 8002254:	f022 bc26 	b.w	8024aa4 <ACI_GAP_SET_DISCOVERABLE>

08002258 <aci_gap_set_io_capability>:

/* ACI_GAP_SET_IO_CAPABILITY wrapper function */
tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
  BLE_WRAP_ACI_GAP_SET_IO_CAPABILITY_PREPROC( );
  tBleStatus status = ACI_GAP_SET_IO_CAPABILITY( IO_Capability );
 8002258:	f027 b9ac 	b.w	80295b4 <ACI_GAP_SET_IO_CAPABILITY>

0800225c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800225c:	b410      	push	{r4}
 800225e:	f89d 4004 	ldrb.w	r4, [sp, #4]
  BLE_WRAP_ACI_GAP_SET_AUTHENTICATION_REQUIREMENT_PREPROC( );
  tBleStatus status = ACI_GAP_SET_AUTHENTICATION_REQUIREMENT( Bonding_Mode,
 8002262:	9401      	str	r4, [sp, #4]
{
 8002264:	f89d 4008 	ldrb.w	r4, [sp, #8]
  tBleStatus status = ACI_GAP_SET_AUTHENTICATION_REQUIREMENT( Bonding_Mode,
 8002268:	9402      	str	r4, [sp, #8]
{
 800226a:	f89d 400c 	ldrb.w	r4, [sp, #12]
  tBleStatus status = ACI_GAP_SET_AUTHENTICATION_REQUIREMENT( Bonding_Mode,
 800226e:	9403      	str	r4, [sp, #12]
{
 8002270:	f89d 4014 	ldrb.w	r4, [sp, #20]
  tBleStatus status = ACI_GAP_SET_AUTHENTICATION_REQUIREMENT( Bonding_Mode,
 8002274:	9405      	str	r4, [sp, #20]
                                                              Use_Fixed_Pin,
                                                              Fixed_Pin,
                                                              Identity_Address_Type );
  BLE_WRAP_ACI_GAP_SET_AUTHENTICATION_REQUIREMENT_POSTPROC( );
  return status;
}
 8002276:	f85d 4b04 	ldr.w	r4, [sp], #4
  tBleStatus status = ACI_GAP_SET_AUTHENTICATION_REQUIREMENT( Bonding_Mode,
 800227a:	f027 b9a5 	b.w	80295c8 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT>
 800227e:	bf00      	nop

08002280 <aci_gap_pass_key_resp>:
/* ACI_GAP_PASS_KEY_RESP wrapper function */
tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
  BLE_WRAP_ACI_GAP_PASS_KEY_RESP_PREPROC( );
  tBleStatus status = ACI_GAP_PASS_KEY_RESP( Connection_Handle,
 8002280:	f027 ba02 	b.w	8029688 <ACI_GAP_PASS_KEY_RESP>

08002284 <aci_gap_init>:
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
  BLE_WRAP_ACI_GAP_INIT_PREPROC( );
  tBleStatus status = ACI_GAP_INIT( Role,
 8002284:	f022 ba82 	b.w	802478c <ACI_GAP_INIT>

08002288 <aci_gap_peripheral_security_req>:

/* ACI_GAP_PERIPHERAL_SECURITY_REQ wrapper function */
tBleStatus aci_gap_peripheral_security_req( uint16_t Connection_Handle )
{
  BLE_WRAP_ACI_GAP_PERIPHERAL_SECURITY_REQ_PREPROC( );
  tBleStatus status = ACI_GAP_PERIPHERAL_SECURITY_REQ( Connection_Handle );
 8002288:	f028 b9ce 	b.w	802a628 <ACI_GAP_PERIPHERAL_SECURITY_REQ>

0800228c <aci_gap_update_adv_data>:
/* ACI_GAP_UPDATE_ADV_DATA wrapper function */
tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
  BLE_WRAP_ACI_GAP_UPDATE_ADV_DATA_PREPROC( );
  tBleStatus status = ACI_GAP_UPDATE_ADV_DATA( AdvDataLen,
 800228c:	f022 bc3c 	b.w	8024b08 <ACI_GAP_UPDATE_ADV_DATA>

08002290 <aci_gap_delete_ad_type>:

/* ACI_GAP_DELETE_AD_TYPE wrapper function */
tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
  BLE_WRAP_ACI_GAP_DELETE_AD_TYPE_PREPROC( );
  tBleStatus status = ACI_GAP_DELETE_AD_TYPE( ADType );
 8002290:	f022 bcc2 	b.w	8024c18 <ACI_GAP_DELETE_AD_TYPE>

08002294 <aci_gap_configure_filter_accept_list>:

/* ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST wrapper function */
tBleStatus aci_gap_configure_filter_accept_list( void )
{
  BLE_WRAP_ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST_PREPROC( );
  tBleStatus status = ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST(  );
 8002294:	f022 bd6c 	b.w	8024d70 <ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST>

08002298 <aci_gap_clear_security_db>:

/* ACI_GAP_CLEAR_SECURITY_DB wrapper function */
tBleStatus aci_gap_clear_security_db( void )
{
  BLE_WRAP_ACI_GAP_CLEAR_SECURITY_DB_PREPROC( );
  tBleStatus status = ACI_GAP_CLEAR_SECURITY_DB(  );
 8002298:	f026 bc0a 	b.w	8028ab0 <ACI_GAP_CLEAR_SECURITY_DB>

0800229c <aci_gap_allow_rebond>:

/* ACI_GAP_ALLOW_REBOND wrapper function */
tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
  BLE_WRAP_ACI_GAP_ALLOW_REBOND_PREPROC( );
  tBleStatus status = ACI_GAP_ALLOW_REBOND( Connection_Handle );
 800229c:	f027 b9e0 	b.w	8029660 <ACI_GAP_ALLOW_REBOND>

080022a0 <aci_gap_numeric_comparison_value_confirm_yesno>:
/* ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO wrapper function */
tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
  BLE_WRAP_ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO_PREPROC( );
  tBleStatus status = ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO( Connection_Handle,
 80022a0:	f029 b8e8 	b.w	802b474 <ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO>

080022a4 <aci_gatt_init>:

/* ACI_GATT_INIT wrapper function */
tBleStatus aci_gatt_init( void )
{
  BLE_WRAP_ACI_GATT_INIT_PREPROC( );
  tBleStatus status = ACI_GATT_INIT(  );
 80022a4:	f023 baca 	b.w	802583c <ACI_GATT_INIT>

080022a8 <aci_gatt_add_service>:
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
  BLE_WRAP_ACI_GATT_ADD_SERVICE_PREPROC( );
  tBleStatus status = ACI_GATT_ADD_SERVICE( Service_UUID_Type,
 80022a8:	f023 bb26 	b.w	80258f8 <ACI_GATT_ADD_SERVICE>

080022ac <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80022ac:	b410      	push	{r4}
 80022ae:	f89d 4004 	ldrb.w	r4, [sp, #4]
  BLE_WRAP_ACI_GATT_ADD_CHAR_PREPROC( );
  tBleStatus status = ACI_GATT_ADD_CHAR( Service_Handle,
 80022b2:	9401      	str	r4, [sp, #4]
{
 80022b4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  tBleStatus status = ACI_GATT_ADD_CHAR( Service_Handle,
 80022b8:	9402      	str	r4, [sp, #8]
{
 80022ba:	f89d 400c 	ldrb.w	r4, [sp, #12]
  tBleStatus status = ACI_GATT_ADD_CHAR( Service_Handle,
 80022be:	9403      	str	r4, [sp, #12]
{
 80022c0:	f89d 4010 	ldrb.w	r4, [sp, #16]
  tBleStatus status = ACI_GATT_ADD_CHAR( Service_Handle,
 80022c4:	9404      	str	r4, [sp, #16]
{
 80022c6:	f89d 4014 	ldrb.w	r4, [sp, #20]
  tBleStatus status = ACI_GATT_ADD_CHAR( Service_Handle,
 80022ca:	9405      	str	r4, [sp, #20]
                                         Enc_Key_Size,
                                         Is_Variable,
                                         Char_Handle );
  BLE_WRAP_ACI_GATT_ADD_CHAR_POSTPROC( );
  return status;
}
 80022cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  tBleStatus status = ACI_GATT_ADD_CHAR( Service_Handle,
 80022d0:	f023 befa 	b.w	80260c8 <ACI_GATT_ADD_CHAR>

080022d4 <aci_gatt_update_char_value>:
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
  BLE_WRAP_ACI_GATT_UPDATE_CHAR_VALUE_PREPROC( );
  tBleStatus status = ACI_GATT_UPDATE_CHAR_VALUE( Service_Handle,
 80022d4:	f023 bd50 	b.w	8025d78 <ACI_GATT_UPDATE_CHAR_VALUE>

080022d8 <aci_gatt_confirm_indication>:

/* ACI_GATT_CONFIRM_INDICATION wrapper function */
tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
  BLE_WRAP_ACI_GATT_CONFIRM_INDICATION_PREPROC( );
  tBleStatus status = ACI_GATT_CONFIRM_INDICATION( Connection_Handle );
 80022d8:	f023 ba1d 	b.w	8025716 <ACI_GATT_CONFIRM_INDICATION>

080022dc <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 80022dc:	b410      	push	{r4}
 80022de:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  BLE_WRAP_ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ_PREPROC( );
  tBleStatus status = ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ( Connection_Handle,
 80022e2:	9401      	str	r4, [sp, #4]
                                                                 Conn_Interval_Max,
                                                                 Latency,
                                                                 Timeout_Multiplier );
  BLE_WRAP_ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ_POSTPROC( );
  return status;
}
 80022e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  tBleStatus status = ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ( Connection_Handle,
 80022e8:	f026 b909 	b.w	80284fe <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ>

080022ec <BLEPLAT_Init>:
#include "ble_wrap.c"

/*****************************************************************************/

void BLEPLAT_Init( void )
{
 80022ec:	b508      	push	{r3, lr}
  BAES_Reset( );
 80022ee:	f005 fa37 	bl	8007760 <BAES_Reset>
  BPKA_Reset( );
 80022f2:	f000 f837 	bl	8002364 <BPKA_Reset>
  BLE_TIMER_Init();
}
 80022f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLE_TIMER_Init();
 80022fa:	f004 bad5 	b.w	80068a8 <BLE_TIMER_Init>
 80022fe:	bf00      	nop

08002300 <BLEPLAT_NvmAdd>:
int BLEPLAT_NvmAdd( uint8_t type,
                    const uint8_t* data,
                    uint16_t size,
                    const uint8_t* extra_data,
                    uint16_t extra_size )
{
 8002300:	b410      	push	{r4}
 8002302:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  return NVM_Add( type, data, size, extra_data, extra_size );
 8002306:	9401      	str	r4, [sp, #4]
}
 8002308:	f85d 4b04 	ldr.w	r4, [sp], #4
  return NVM_Add( type, data, size, extra_data, extra_size );
 800230c:	f003 befa 	b.w	8006104 <NVM_Add>

08002310 <BLEPLAT_NvmGet>:
int BLEPLAT_NvmGet( uint8_t mode,
                    uint8_t type,
                    uint16_t offset,
                    uint8_t* data,
                    uint16_t size )
{
 8002310:	b410      	push	{r4}
 8002312:	f8bd 4004 	ldrh.w	r4, [sp, #4]
  return NVM_Get( mode, type, offset, data, size );
 8002316:	9401      	str	r4, [sp, #4]
}
 8002318:	f85d 4b04 	ldr.w	r4, [sp], #4
  return NVM_Get( mode, type, offset, data, size );
 800231c:	f003 be58 	b.w	8005fd0 <NVM_Get>

08002320 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare( uint16_t offset,
                        const uint8_t* data,
                        uint16_t size )
{
  return NVM_Compare( offset, data, size );
 8002320:	f003 bec6 	b.w	80060b0 <NVM_Compare>

08002324 <BLEPLAT_NvmDiscard>:

/*****************************************************************************/

void BLEPLAT_NvmDiscard( uint8_t mode )
{
  NVM_Discard( mode );
 8002324:	f003 bfb0 	b.w	8006288 <NVM_Discard>

08002328 <BLEPLAT_RngGet>:

void BLEPLAT_RngGet( uint8_t n,
                     uint32_t* val )
{
  /* Read 32-bit random values from HW driver */
  HW_RNG_Get( n, val );
 8002328:	f000 beb2 	b.w	8003090 <HW_RNG_Get>

0800232c <BLEPLAT_AesEcbEncrypt>:

void BLEPLAT_AesEcbEncrypt( const uint8_t* key,
                            const uint8_t* input,
                            uint8_t* output )
{
  BAES_EcbCrypt( key, input, output, 1 );
 800232c:	2301      	movs	r3, #1
 800232e:	f005 ba19 	b.w	8007764 <BAES_EcbCrypt>
 8002332:	bf00      	nop

08002334 <BLEPLAT_AesCmacSetKey>:

/*****************************************************************************/

void BLEPLAT_AesCmacSetKey( const uint8_t* key )
{
  BAES_CmacSetKey( key );
 8002334:	f005 b8ac 	b.w	8007490 <BAES_CmacSetKey>

08002338 <BLEPLAT_AesCmacCompute>:

void BLEPLAT_AesCmacCompute( const uint8_t* input,
                             uint32_t input_length,
                             uint8_t* output_tag )
{
  BAES_CmacCompute( input, input_length, output_tag );
 8002338:	f005 b8bc 	b.w	80074b4 <BAES_CmacCompute>

0800233c <BLEPLAT_PkaStartP256Key>:

/*****************************************************************************/

int BLEPLAT_PkaStartP256Key( const uint32_t* local_private_key )
{
  return BPKA_StartP256Key( local_private_key );
 800233c:	f000 b858 	b.w	80023f0 <BPKA_StartP256Key>

08002340 <BLEPLAT_PkaReadP256Key>:

/*****************************************************************************/

void BLEPLAT_PkaReadP256Key( uint32_t* local_public_key )
{
  BPKA_ReadP256Key( local_public_key );
 8002340:	f000 b81a 	b.w	8002378 <BPKA_ReadP256Key>

08002344 <BLEPLAT_PkaStartDhKey>:
/*****************************************************************************/

int BLEPLAT_PkaStartDhKey( const uint32_t* local_private_key,
                           const uint32_t* remote_public_key )
{
  return BPKA_StartDhKey( local_private_key, remote_public_key );
 8002344:	f000 b86a 	b.w	800241c <BPKA_StartDhKey>

08002348 <BLEPLAT_PkaReadDhKey>:

/*****************************************************************************/

int BLEPLAT_PkaReadDhKey( uint32_t* dh_key )
{
  return BPKA_ReadDhKey( dh_key );
 8002348:	f000 b830 	b.w	80023ac <BPKA_ReadDhKey>

0800234c <BPKACB_Complete>:
}

/*****************************************************************************/

void BPKACB_Complete( void )
{
 800234c:	b508      	push	{r3, lr}
  BLEPLATCB_PkaComplete( );
 800234e:	f022 f9f1 	bl	8024734 <BLEPLATCB_PkaComplete>
  HostStack_Process( );
}
 8002352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HostStack_Process( );
 8002356:	f000 b8f1 	b.w	800253c <HostStack_Process>
 800235a:	bf00      	nop

0800235c <BLEPLAT_TimerStart>:
/*****************************************************************************/

uint8_t BLEPLAT_TimerStart( uint16_t layer,
                            uint32_t timeout )
{
  return BLE_TIMER_Start( layer, timeout );
 800235c:	f004 bab6 	b.w	80068cc <BLE_TIMER_Start>

08002360 <BLEPLAT_TimerStop>:

/*****************************************************************************/

void BLEPLAT_TimerStop( uint16_t layer )
{
  BLE_TIMER_Stop( layer );
 8002360:	f004 bb06 	b.w	8006970 <BLE_TIMER_Stop>

08002364 <BPKA_Reset>:
static uint32_t BPKA_buffer[24];

/*****************************************************************************/

void BPKA_Reset( void )
{
 8002364:	b508      	push	{r3, lr}
  /* Disable PKA hardware */
  HW_PKA_Disable( );
 8002366:	f000 fd0b 	bl	8002d80 <HW_PKA_Disable>

  BPKA_state = BPKA_IDLE;
 800236a:	2200      	movs	r2, #0
 800236c:	4b01      	ldr	r3, [pc, #4]	@ (8002374 <BPKA_Reset+0x10>)
 800236e:	701a      	strb	r2, [r3, #0]
}
 8002370:	bd08      	pop	{r3, pc}
 8002372:	bf00      	nop
 8002374:	2000576d 	.word	0x2000576d

08002378 <BPKA_ReadP256Key>:
/*****************************************************************************/

void BPKA_ReadP256Key( uint32_t* local_public_key )
{
  /* Get local public key from buffer */
  memcpy( local_public_key, BPKA_buffer, 64 );
 8002378:	4684      	mov	ip, r0
{
 800237a:	b530      	push	{r4, r5, lr}
  memcpy( local_public_key, BPKA_buffer, 64 );
 800237c:	4c0a      	ldr	r4, [pc, #40]	@ (80023a8 <BPKA_ReadP256Key+0x30>)
 800237e:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 8002382:	46a6      	mov	lr, r4
 8002384:	f10c 0c10 	add.w	ip, ip, #16
 8002388:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800238c:	45ae      	cmp	lr, r5
 800238e:	f104 0410 	add.w	r4, r4, #16
 8002392:	f84c 0c10 	str.w	r0, [ip, #-16]
 8002396:	f84c 1c0c 	str.w	r1, [ip, #-12]
 800239a:	f84c 2c08 	str.w	r2, [ip, #-8]
 800239e:	f84c 3c04 	str.w	r3, [ip, #-4]
 80023a2:	d1ee      	bne.n	8002382 <BPKA_ReadP256Key+0xa>
}
 80023a4:	bd30      	pop	{r4, r5, pc}
 80023a6:	bf00      	nop
 80023a8:	2000570c 	.word	0x2000570c

080023ac <BPKA_ReadDhKey>:
}

/*****************************************************************************/

int BPKA_ReadDhKey( uint32_t* dh_key )
{
 80023ac:	b510      	push	{r4, lr}
  if ( BPKA_error )
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <BPKA_ReadDhKey+0x3c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b9b3      	cbnz	r3, 80023e2 <BPKA_ReadDhKey+0x36>
 80023b4:	4684      	mov	ip, r0
    return BPKA_EOF;

  /* Get DH key from buffer */
  memcpy( dh_key, BPKA_buffer, 32 );
 80023b6:	4c0d      	ldr	r4, [pc, #52]	@ (80023ec <BPKA_ReadDhKey+0x40>)

  return BPKA_OK;
 80023b8:	469e      	mov	lr, r3
  memcpy( dh_key, BPKA_buffer, 32 );
 80023ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023bc:	f8cc 0000 	str.w	r0, [ip]
 80023c0:	f8cc 1004 	str.w	r1, [ip, #4]
 80023c4:	f8cc 2008 	str.w	r2, [ip, #8]
 80023c8:	f8cc 300c 	str.w	r3, [ip, #12]
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	f8cc 0010 	str.w	r0, [ip, #16]
 80023d2:	f8cc 1014 	str.w	r1, [ip, #20]
 80023d6:	f8cc 2018 	str.w	r2, [ip, #24]
 80023da:	f8cc 301c 	str.w	r3, [ip, #28]
}
 80023de:	4670      	mov	r0, lr
 80023e0:	bd10      	pop	{r4, pc}
    return BPKA_EOF;
 80023e2:	f06f 0e02 	mvn.w	lr, #2
 80023e6:	e7fa      	b.n	80023de <BPKA_ReadDhKey+0x32>
 80023e8:	2000576c 	.word	0x2000576c
 80023ec:	2000570c 	.word	0x2000570c

080023f0 <BPKA_StartP256Key>:
{
 80023f0:	b510      	push	{r4, lr}
 80023f2:	4604      	mov	r4, r0
  if ( ! HW_PKA_Enable( ) )
 80023f4:	f000 fbea 	bl	8002bcc <HW_PKA_Enable>
 80023f8:	b158      	cbz	r0, 8002412 <BPKA_StartP256Key+0x22>
  HW_PKA_P256_StartEccScalarMul( local_private_key, NULL, NULL );
 80023fa:	2200      	movs	r2, #0
 80023fc:	4620      	mov	r0, r4
 80023fe:	4611      	mov	r1, r2
 8002400:	f000 ffb6 	bl	8003370 <HW_PKA_P256_StartEccScalarMul>
  BPKA_state = BPKA_P256_KEY_GEN;
 8002404:	2201      	movs	r2, #1
 8002406:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <BPKA_StartP256Key+0x28>)
 8002408:	701a      	strb	r2, [r3, #0]
  BPKACB_Process( );
 800240a:	f7fe f9c7 	bl	800079c <BPKACB_Process>
  return BPKA_OK;
 800240e:	2000      	movs	r0, #0
}
 8002410:	bd10      	pop	{r4, pc}
    return BPKA_BUSY;
 8002412:	f06f 0001 	mvn.w	r0, #1
}
 8002416:	bd10      	pop	{r4, pc}
 8002418:	2000576d 	.word	0x2000576d

0800241c <BPKA_StartDhKey>:
{
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4606      	mov	r6, r0
 8002420:	460d      	mov	r5, r1
  if ( ! HW_PKA_Enable( ) )
 8002422:	f000 fbd3 	bl	8002bcc <HW_PKA_Enable>
 8002426:	b350      	cbz	r0, 800247e <BPKA_StartDhKey+0x62>
  HW_PKA_P256_StartRangeCheck( remote_public_key );
 8002428:	4628      	mov	r0, r5
 800242a:	f000 ff37 	bl	800329c <HW_PKA_P256_StartRangeCheck>
  memcpy( BPKA_buffer + 8, remote_public_key, 64 );
 800242e:	46ac      	mov	ip, r5
  memcpy( BPKA_buffer, local_private_key, 32 );
 8002430:	6830      	ldr	r0, [r6, #0]
 8002432:	6871      	ldr	r1, [r6, #4]
 8002434:	68b2      	ldr	r2, [r6, #8]
 8002436:	68f3      	ldr	r3, [r6, #12]
 8002438:	4c12      	ldr	r4, [pc, #72]	@ (8002484 <BPKA_StartDhKey+0x68>)
 800243a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800243c:	6930      	ldr	r0, [r6, #16]
 800243e:	6971      	ldr	r1, [r6, #20]
 8002440:	69b2      	ldr	r2, [r6, #24]
 8002442:	69f3      	ldr	r3, [r6, #28]
  memcpy( BPKA_buffer + 8, remote_public_key, 64 );
 8002444:	f105 0640 	add.w	r6, r5, #64	@ 0x40
  memcpy( BPKA_buffer, local_private_key, 32 );
 8002448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  memcpy( BPKA_buffer + 8, remote_public_key, 64 );
 800244a:	4625      	mov	r5, r4
 800244c:	f8dc 0000 	ldr.w	r0, [ip]
 8002450:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002454:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002458:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800245c:	f10c 0c10 	add.w	ip, ip, #16
 8002460:	45b4      	cmp	ip, r6
 8002462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002464:	f104 0410 	add.w	r4, r4, #16
 8002468:	d1ef      	bne.n	800244a <BPKA_StartDhKey+0x2e>
  BPKA_state = BPKA_RANGE_X_CHECK;
 800246a:	2002      	movs	r0, #2
  BPKA_error = 1;
 800246c:	2201      	movs	r2, #1
  BPKA_state = BPKA_RANGE_X_CHECK;
 800246e:	4906      	ldr	r1, [pc, #24]	@ (8002488 <BPKA_StartDhKey+0x6c>)
  BPKA_error = 1;
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <BPKA_StartDhKey+0x70>)
  BPKA_state = BPKA_RANGE_X_CHECK;
 8002472:	7008      	strb	r0, [r1, #0]
  BPKA_error = 1;
 8002474:	701a      	strb	r2, [r3, #0]
  BPKACB_Process( );
 8002476:	f7fe f991 	bl	800079c <BPKACB_Process>
  return BPKA_OK;
 800247a:	2000      	movs	r0, #0
}
 800247c:	bd70      	pop	{r4, r5, r6, pc}
    return BPKA_BUSY;
 800247e:	f06f 0001 	mvn.w	r0, #1
}
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	2000570c 	.word	0x2000570c
 8002488:	2000576d 	.word	0x2000576d
 800248c:	2000576c 	.word	0x2000576c

08002490 <BPKA_BG_Process>:

  return BPKA_OK;
}

void BPKA_BG_Process( void )
{
 8002490:	b510      	push	{r4, lr}
  if ( BPKA_state == BPKA_IDLE )
 8002492:	4c25      	ldr	r4, [pc, #148]	@ (8002528 <BPKA_BG_Process+0x98>)
 8002494:	7823      	ldrb	r3, [r4, #0]
 8002496:	b903      	cbnz	r3, 800249a <BPKA_BG_Process+0xa>
  if( BPKA_Process( ) != 0)
  {
    BPKACB_Process( );
  }
}
 8002498:	bd10      	pop	{r4, pc}
  if ( ! HW_PKA_EndOfOperation( ) )
 800249a:	f000 fc27 	bl	8002cec <HW_PKA_EndOfOperation>
 800249e:	b1e8      	cbz	r0, 80024dc <BPKA_BG_Process+0x4c>
  switch ( BPKA_state )
 80024a0:	7823      	ldrb	r3, [r4, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d809      	bhi.n	80024bc <BPKA_BG_Process+0x2c>
 80024a8:	e8df f003 	tbb	[pc, r3]
 80024ac:	23310f03 	.word	0x23310f03
 80024b0:	1b          	.byte	0x1b
 80024b1:	00          	.byte	0x00
    HW_PKA_P256_ReadEccScalarMul( BPKA_buffer, BPKA_buffer + 8 );
 80024b2:	491e      	ldr	r1, [pc, #120]	@ (800252c <BPKA_BG_Process+0x9c>)
 80024b4:	f1a1 0020 	sub.w	r0, r1, #32
 80024b8:	f000 ffac 	bl	8003414 <HW_PKA_P256_ReadEccScalarMul>
  BPKACB_Complete( );
 80024bc:	f7ff ff46 	bl	800234c <BPKACB_Complete>
  HW_PKA_Disable( );
 80024c0:	f000 fc5e 	bl	8002d80 <HW_PKA_Disable>
  BPKA_state = BPKA_IDLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	7023      	strb	r3, [r4, #0]
}
 80024c8:	bd10      	pop	{r4, pc}
    if ( ! HW_PKA_P256_IsRangeCheckOk( ) )
 80024ca:	f000 ff01 	bl	80032d0 <HW_PKA_P256_IsRangeCheckOk>
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d0f4      	beq.n	80024bc <BPKA_BG_Process+0x2c>
    HW_PKA_P256_StartRangeCheck( BPKA_buffer + 16 );
 80024d2:	4817      	ldr	r0, [pc, #92]	@ (8002530 <BPKA_BG_Process+0xa0>)
 80024d4:	f000 fee2 	bl	800329c <HW_PKA_P256_StartRangeCheck>
    BPKA_state = BPKA_RANGE_Y_CHECK;
 80024d8:	2303      	movs	r3, #3
 80024da:	7023      	strb	r3, [r4, #0]
    BPKACB_Process( );
 80024dc:	f7fe f95e 	bl	800079c <BPKACB_Process>
}
 80024e0:	bd10      	pop	{r4, pc}
    HW_PKA_P256_ReadEccScalarMul( BPKA_buffer, NULL );
 80024e2:	2100      	movs	r1, #0
 80024e4:	4813      	ldr	r0, [pc, #76]	@ (8002534 <BPKA_BG_Process+0xa4>)
 80024e6:	f000 ff95 	bl	8003414 <HW_PKA_P256_ReadEccScalarMul>
    BPKA_error = 0;
 80024ea:	2200      	movs	r2, #0
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <BPKA_BG_Process+0xa8>)
 80024ee:	701a      	strb	r2, [r3, #0]
    break;
 80024f0:	e7e4      	b.n	80024bc <BPKA_BG_Process+0x2c>
    if ( ! HW_PKA_P256_IsPointCheckOk( ) )
 80024f2:	f000 ff31 	bl	8003358 <HW_PKA_P256_IsPointCheckOk>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d0e0      	beq.n	80024bc <BPKA_BG_Process+0x2c>
    HW_PKA_P256_StartEccScalarMul( BPKA_buffer,
 80024fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <BPKA_BG_Process+0xa0>)
 80024fc:	f1a2 0120 	sub.w	r1, r2, #32
 8002500:	f1a2 0040 	sub.w	r0, r2, #64	@ 0x40
 8002504:	f000 ff34 	bl	8003370 <HW_PKA_P256_StartEccScalarMul>
    BPKA_state = BPKA_DH_KEY_GEN;
 8002508:	2305      	movs	r3, #5
 800250a:	7023      	strb	r3, [r4, #0]
    return BPKA_BUSY;
 800250c:	e7e6      	b.n	80024dc <BPKA_BG_Process+0x4c>
    if ( ! HW_PKA_P256_IsRangeCheckOk( ) )
 800250e:	f000 fedf 	bl	80032d0 <HW_PKA_P256_IsRangeCheckOk>
 8002512:	2800      	cmp	r0, #0
 8002514:	d0d2      	beq.n	80024bc <BPKA_BG_Process+0x2c>
    HW_PKA_P256_StartPointCheck( BPKA_buffer + 8,
 8002516:	4906      	ldr	r1, [pc, #24]	@ (8002530 <BPKA_BG_Process+0xa0>)
 8002518:	f1a1 0020 	sub.w	r0, r1, #32
 800251c:	f000 fee4 	bl	80032e8 <HW_PKA_P256_StartPointCheck>
    BPKA_state = BPKA_POINT_CHECK;
 8002520:	2304      	movs	r3, #4
 8002522:	7023      	strb	r3, [r4, #0]
    return BPKA_BUSY;
 8002524:	e7da      	b.n	80024dc <BPKA_BG_Process+0x4c>
 8002526:	bf00      	nop
 8002528:	2000576d 	.word	0x2000576d
 800252c:	2000572c 	.word	0x2000572c
 8002530:	2000574c 	.word	0x2000574c
 8002534:	2000570c 	.word	0x2000570c
 8002538:	2000576c 	.word	0x2000576c

0800253c <HostStack_Process>:
  * @brief  BLE Host stack processing request.
  * @param  None
  * @retval None
  */
void HostStack_Process(void)
{
 800253c:	b508      	push	{r3, lr}
void BleStackCB_Process(void)
{
  /* USER CODE BEGIN BleStackCB_Process 0 */

  /* USER CODE END BleStackCB_Process 0 */
  if (missed_hci_event_flag)
 800253e:	4b0a      	ldr	r3, [pc, #40]	@ (8002568 <HostStack_Process+0x2c>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	b92a      	cbnz	r2, 8002550 <HostStack_Process+0x14>
}
 8002544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    missed_hci_event_flag = 0;
    HCI_HARDWARE_ERROR_EVENT(0x03);
  }
  /* BLE Host stack processing through background task */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 8002548:	2100      	movs	r1, #0
 800254a:	2010      	movs	r0, #16
 800254c:	f009 be1a 	b.w	800c184 <UTIL_SEQ_SetTask>
    missed_hci_event_flag = 0;
 8002550:	2200      	movs	r2, #0
    HCI_HARDWARE_ERROR_EVENT(0x03);
 8002552:	2003      	movs	r0, #3
    missed_hci_event_flag = 0;
 8002554:	701a      	strb	r2, [r3, #0]
    HCI_HARDWARE_ERROR_EVENT(0x03);
 8002556:	f020 faa2 	bl	8022a9e <HCI_HARDWARE_ERROR_EVENT>
}
 800255a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 800255e:	2100      	movs	r1, #0
 8002560:	2010      	movs	r0, #16
 8002562:	f009 be0f 	b.w	800c184 <UTIL_SEQ_SetTask>
 8002566:	bf00      	nop
 8002568:	20005b49 	.word	0x20005b49

0800256c <BleStackCB_Process>:
{
 800256c:	b508      	push	{r3, lr}
  if (missed_hci_event_flag)
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <BleStackCB_Process+0x2c>)
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	b92a      	cbnz	r2, 8002580 <BleStackCB_Process+0x14>

  /* USER CODE BEGIN BleStackCB_Process 1 */

  /* USER CODE END BleStackCB_Process 1 */
}
 8002574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 8002578:	2100      	movs	r1, #0
 800257a:	2010      	movs	r0, #16
 800257c:	f009 be02 	b.w	800c184 <UTIL_SEQ_SetTask>
    missed_hci_event_flag = 0;
 8002580:	2200      	movs	r2, #0
    HCI_HARDWARE_ERROR_EVENT(0x03);
 8002582:	2003      	movs	r0, #3
    missed_hci_event_flag = 0;
 8002584:	701a      	strb	r2, [r3, #0]
    HCI_HARDWARE_ERROR_EVENT(0x03);
 8002586:	f020 fa8a 	bl	8022a9e <HCI_HARDWARE_ERROR_EVENT>
}
 800258a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_HOST, CFG_SEQ_PRIO_0);
 800258e:	2100      	movs	r1, #0
 8002590:	2010      	movs	r0, #16
 8002592:	f009 bdf7 	b.w	800c184 <UTIL_SEQ_SetTask>
 8002596:	bf00      	nop
 8002598:	20005b49 	.word	0x20005b49

0800259c <LINKLAYER_PLAT_ClockInit>:
  return (uint32_t)(READ_BIT(RCC->BDCR1, RCC_BDCR1_RADIOSTSEL));
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <LINKLAYER_PLAT_ClockInit+0x24>)
  * @brief  Configure the necessary clock sources for the radio.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_ClockInit()
{
 800259e:	b082      	sub	sp, #8
 80025a0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
    /* If there is no clock source defined, should be selected before */
    assert_param(0);
  }

  /* Enable AHB5ENR peripheral clock (bus CLK) */
  __HAL_RCC_RADIO_CLK_ENABLE();
 80025a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9b01      	ldr	r3, [sp, #4]
}
 80025bc:	b002      	add	sp, #8
 80025be:	4770      	bx	lr
 80025c0:	46020c00 	.word	0x46020c00

080025c4 <LINKLAYER_PLAT_DelayUs>:
  * @param  delay: delay in us
  * @retval None
  */
void LINKLAYER_PLAT_DelayUs(uint32_t delay)
{
__IO register uint32_t Delay = delay * (SystemCoreClock / 1000000U);
 80025c4:	4b08      	ldr	r3, [pc, #32]	@ (80025e8 <LINKLAYER_PLAT_DelayUs+0x24>)
 80025c6:	4a09      	ldr	r2, [pc, #36]	@ (80025ec <LINKLAYER_PLAT_DelayUs+0x28>)
 80025c8:	681b      	ldr	r3, [r3, #0]
{
 80025ca:	b082      	sub	sp, #8
__IO register uint32_t Delay = delay * (SystemCoreClock / 1000000U);
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	fb00 f303 	mul.w	r3, r0, r3
 80025d6:	9301      	str	r3, [sp, #4]
	do
	{
		__NOP();
 80025d8:	bf00      	nop
	}
	while (Delay --);
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	1e5a      	subs	r2, r3, #1
 80025de:	9201      	str	r2, [sp, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f9      	bne.n	80025d8 <LINKLAYER_PLAT_DelayUs+0x14>
}
 80025e4:	b002      	add	sp, #8
 80025e6:	4770      	bx	lr
 80025e8:	200001a8 	.word	0x200001a8
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <LINKLAYER_PLAT_Assert>:
  * @retval None
  */
void LINKLAYER_PLAT_Assert(uint8_t condition)
{
  assert_param(condition);
}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop

080025f4 <LINKLAYER_PLAT_AclkCtrl>:
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_AclkCtrl(uint8_t enable)
{
  if(enable){
 80025f4:	b138      	cbz	r0, 8002606 <LINKLAYER_PLAT_AclkCtrl+0x12>
{
 80025f6:	b508      	push	{r3, lr}
    /* Enable RADIO baseband clock (active CLK) */
    HAL_RCCEx_EnableRadioBBClock();
 80025f8:	f007 fd48 	bl	800a08c <HAL_RCCEx_EnableRadioBBClock>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80025fc:	4a03      	ldr	r2, [pc, #12]	@ (800260c <LINKLAYER_PLAT_AclkCtrl+0x18>)
 80025fe:	6813      	ldr	r3, [r2, #0]
 8002600:	039b      	lsls	r3, r3, #14
 8002602:	d5fc      	bpl.n	80025fe <LINKLAYER_PLAT_AclkCtrl+0xa>
  else
  {
    /* Disable RADIO baseband clock (active CLK) */
    HAL_RCCEx_DisableRadioBBClock();
  }
}
 8002604:	bd08      	pop	{r3, pc}
    HAL_RCCEx_DisableRadioBBClock();
 8002606:	f007 bd4b 	b.w	800a0a0 <HAL_RCCEx_DisableRadioBBClock>
 800260a:	bf00      	nop
 800260c:	46020c00 	.word	0x46020c00

08002610 <LINKLAYER_PLAT_GetRNG>:
  * @param  ptr_rnd: pointer to the variable that hosts the number.
  * @param  len: number of byte of anthropy to get.
  * @retval None
  */
void LINKLAYER_PLAT_GetRNG(uint8_t *ptr_rnd, uint32_t len)
{
 8002610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nb_remaining_rng = len;
  uint32_t generated_rng;

  /* Get the requested RNGs (4 bytes by 4bytes) */
  while(nb_remaining_rng >= 4)
 8002614:	2903      	cmp	r1, #3
{
 8002616:	460f      	mov	r7, r1
 8002618:	4680      	mov	r8, r0
 800261a:	b082      	sub	sp, #8
  while(nb_remaining_rng >= 4)
 800261c:	d925      	bls.n	800266a <LINKLAYER_PLAT_GetRNG+0x5a>
 800261e:	4604      	mov	r4, r0
  {
    generated_rng = 0;
 8002620:	2600      	movs	r6, #0
 8002622:	1f0d      	subs	r5, r1, #4
 8002624:	f025 0503 	bic.w	r5, r5, #3
 8002628:	1d03      	adds	r3, r0, #4
 800262a:	441d      	add	r5, r3
    HW_RNG_Get(1, &generated_rng);
 800262c:	2001      	movs	r0, #1
 800262e:	a901      	add	r1, sp, #4
    generated_rng = 0;
 8002630:	9601      	str	r6, [sp, #4]
    HW_RNG_Get(1, &generated_rng);
 8002632:	f000 fd2d 	bl	8003090 <HW_RNG_Get>
    memcpy((ptr_rnd+(len-nb_remaining_rng)), &generated_rng, 4);
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	f844 3b04 	str.w	r3, [r4], #4
  while(nb_remaining_rng >= 4)
 800263c:	42ac      	cmp	r4, r5
 800263e:	d1f5      	bne.n	800262c <LINKLAYER_PLAT_GetRNG+0x1c>
    nb_remaining_rng -=4;
 8002640:	f007 0403 	and.w	r4, r7, #3
  }

  /* Get the remaining number of RNGs */
  if(nb_remaining_rng>0){
 8002644:	b914      	cbnz	r4, 800264c <LINKLAYER_PLAT_GetRNG+0x3c>
    generated_rng = 0;
    HW_RNG_Get(1, &generated_rng);
    memcpy((ptr_rnd+(len-nb_remaining_rng)), &generated_rng, nb_remaining_rng);
  }
}
 8002646:	b002      	add	sp, #8
 8002648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    generated_rng = 0;
 800264c:	2300      	movs	r3, #0
    HW_RNG_Get(1, &generated_rng);
 800264e:	a901      	add	r1, sp, #4
 8002650:	2001      	movs	r0, #1
    generated_rng = 0;
 8002652:	9301      	str	r3, [sp, #4]
    HW_RNG_Get(1, &generated_rng);
 8002654:	f000 fd1c 	bl	8003090 <HW_RNG_Get>
    memcpy((ptr_rnd+(len-nb_remaining_rng)), &generated_rng, nb_remaining_rng);
 8002658:	1b38      	subs	r0, r7, r4
 800265a:	4622      	mov	r2, r4
 800265c:	a901      	add	r1, sp, #4
 800265e:	4440      	add	r0, r8
 8002660:	f029 f981 	bl	802b966 <memcpy>
}
 8002664:	b002      	add	sp, #8
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t nb_remaining_rng = len;
 800266a:	460c      	mov	r4, r1
 800266c:	e7ea      	b.n	8002644 <LINKLAYER_PLAT_GetRNG+0x34>
 800266e:	bf00      	nop

08002670 <LINKLAYER_PLAT_SetupRadioIT>:
  * @retval None
  */
void LINKLAYER_PLAT_SetupRadioIT(void (*intr_cb)())
{
  radio_callback = intr_cb;
  HAL_NVIC_SetPriority((IRQn_Type) RADIO_INTR_NUM, RADIO_INTR_PRIO_HIGH, 0);
 8002670:	2200      	movs	r2, #0
{
 8002672:	b510      	push	{r4, lr}
 8002674:	4604      	mov	r4, r0
  radio_callback = intr_cb;
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <LINKLAYER_PLAT_SetupRadioIT+0x1c>)
  HAL_NVIC_SetPriority((IRQn_Type) RADIO_INTR_NUM, RADIO_INTR_PRIO_HIGH, 0);
 8002678:	2042      	movs	r0, #66	@ 0x42
 800267a:	4611      	mov	r1, r2
  radio_callback = intr_cb;
 800267c:	601c      	str	r4, [r3, #0]
  HAL_NVIC_SetPriority((IRQn_Type) RADIO_INTR_NUM, RADIO_INTR_PRIO_HIGH, 0);
 800267e:	f005 fde1 	bl	8008244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_INTR_NUM);
}
 8002682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_INTR_NUM);
 8002686:	2042      	movs	r0, #66	@ 0x42
 8002688:	f005 be18 	b.w	80082bc <HAL_NVIC_EnableIRQ>
 800268c:	2000578c 	.word	0x2000578c

08002690 <LINKLAYER_PLAT_SetupSwLowIT>:
  * @brief  Initialize Link Layer SW low priority interrupt.
  * @param  intr_cb: function pointer to assign for the SW low priority ISR routine.
  * @retval None
  */
void LINKLAYER_PLAT_SetupSwLowIT(void (*intr_cb)())
{
 8002690:	b510      	push	{r4, lr}
 8002692:	4604      	mov	r4, r0
  low_isr_callback = intr_cb;
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <LINKLAYER_PLAT_SetupSwLowIT+0x1c>)

  HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, RADIO_SW_LOW_INTR_PRIO, 0);
 8002696:	203d      	movs	r0, #61	@ 0x3d
 8002698:	2200      	movs	r2, #0
 800269a:	210f      	movs	r1, #15
  low_isr_callback = intr_cb;
 800269c:	601c      	str	r4, [r3, #0]
  HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, RADIO_SW_LOW_INTR_PRIO, 0);
 800269e:	f005 fdd1 	bl	8008244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
}
 80026a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
 80026a6:	203d      	movs	r0, #61	@ 0x3d
 80026a8:	f005 be08 	b.w	80082bc <HAL_NVIC_EnableIRQ>
 80026ac:	20005788 	.word	0x20005788

080026b0 <LINKLAYER_PLAT_TriggerSwLowIT>:
  * @brief  Trigger the link layer SW low interrupt.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_TriggerSwLowIT(uint8_t priority)
{
 80026b0:	b508      	push	{r3, lr}
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <LINKLAYER_PLAT_TriggerSwLowIT+0x3c>)
 80026b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80026b8:	f3c3 7240 	ubfx	r2, r3, #29, #1

  /* Check if a SW low interrupt as already been raised.
   * Nested call far radio low isr are not supported
   **/

  if(NVIC_GetActive(RADIO_SW_LOW_INTR_NUM) == 0)
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	d40b      	bmi.n	80026d8 <LINKLAYER_PLAT_TriggerSwLowIT+0x28>
  {
    /* No nested SW low ISR, default behavior */

    if(priority == 0)
 80026c0:	2800      	cmp	r0, #0
    {
      low_isr_priority = RADIO_SW_LOW_INTR_PRIO;
    }

    HAL_NVIC_SetPriority((IRQn_Type) RADIO_SW_LOW_INTR_NUM, low_isr_priority, 0);
 80026c2:	bf0c      	ite	eq
 80026c4:	210f      	moveq	r1, #15
 80026c6:	2105      	movne	r1, #5
 80026c8:	203d      	movs	r0, #61	@ 0x3d
 80026ca:	f005 fdbb 	bl	8008244 <HAL_NVIC_SetPriority>
      radio_sw_low_isr_is_running_high_prio = 1;
    }
  }

  HAL_NVIC_SetPendingIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
}
 80026ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPendingIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
 80026d2:	203d      	movs	r0, #61	@ 0x3d
 80026d4:	f005 be22 	b.w	800831c <HAL_NVIC_SetPendingIRQ>
    if(priority != 0)
 80026d8:	2800      	cmp	r0, #0
 80026da:	d0f8      	beq.n	80026ce <LINKLAYER_PLAT_TriggerSwLowIT+0x1e>
      radio_sw_low_isr_is_running_high_prio = 1;
 80026dc:	2201      	movs	r2, #1
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <LINKLAYER_PLAT_TriggerSwLowIT+0x40>)
  HAL_NVIC_SetPendingIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
 80026e0:	203d      	movs	r0, #61	@ 0x3d
      radio_sw_low_isr_is_running_high_prio = 1;
 80026e2:	701a      	strb	r2, [r3, #0]
}
 80026e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPendingIRQ((IRQn_Type) RADIO_SW_LOW_INTR_NUM);
 80026e8:	f005 be18 	b.w	800831c <HAL_NVIC_SetPendingIRQ>
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	2000576e 	.word	0x2000576e

080026f4 <LINKLAYER_PLAT_EnableIRQ>:
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_EnableIRQ(void)
{
  irq_counter = max(0,irq_counter-1);
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <LINKLAYER_PLAT_EnableIRQ+0x20>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	2a00      	cmp	r2, #0
 80026fa:	bfd2      	itee	le
 80026fc:	2200      	movle	r2, #0
 80026fe:	681a      	ldrgt	r2, [r3, #0]
 8002700:	f102 32ff 	addgt.w	r2, r2, #4294967295
 8002704:	601a      	str	r2, [r3, #0]

  if(irq_counter == 0)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b91b      	cbnz	r3, 8002712 <LINKLAYER_PLAT_EnableIRQ+0x1e>
  {
    /* When irq_counter reaches 0, restore primask bit */
    __set_PRIMASK(primask_bit);
 800270a:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <LINKLAYER_PLAT_EnableIRQ+0x24>)
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f383 8810 	msr	PRIMASK, r3
  }
}
 8002712:	4770      	bx	lr
 8002714:	20005774 	.word	0x20005774
 8002718:	20005784 	.word	0x20005784

0800271c <LINKLAYER_PLAT_DisableIRQ>:
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_DisableIRQ(void)
{
  if(irq_counter == 0)
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <LINKLAYER_PLAT_DisableIRQ+0x18>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	b91a      	cbnz	r2, 800272a <LINKLAYER_PLAT_DisableIRQ+0xe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002722:	f3ef 8110 	mrs	r1, PRIMASK
  {
    /* Save primask bit at first interrupt disablement */
    primask_bit= __get_PRIMASK();
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <LINKLAYER_PLAT_DisableIRQ+0x1c>)
 8002728:	6011      	str	r1, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800272a:	b672      	cpsid	i
  }
  __disable_irq();
  irq_counter ++;
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	3201      	adds	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	4770      	bx	lr
 8002734:	20005774 	.word	0x20005774
 8002738:	20005784 	.word	0x20005784

0800273c <LINKLAYER_PLAT_EnableSpecificIRQ>:
  *              lower priority that link layer SW low interrupt.
  * @retval None
  */
void LINKLAYER_PLAT_EnableSpecificIRQ(uint8_t isr_type)
{
  if( (isr_type & LL_HIGH_ISR_ONLY) != 0 )
 800273c:	07c1      	lsls	r1, r0, #31
{
 800273e:	b510      	push	{r4, lr}
 8002740:	4604      	mov	r4, r0
  if( (isr_type & LL_HIGH_ISR_ONLY) != 0 )
 8002742:	d505      	bpl.n	8002750 <LINKLAYER_PLAT_EnableSpecificIRQ+0x14>
  {
    prio_high_isr_counter--;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <LINKLAYER_PLAT_EnableSpecificIRQ+0x50>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	3a01      	subs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
    if(prio_high_isr_counter == 0)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b1c3      	cbz	r3, 8002782 <LINKLAYER_PLAT_EnableSpecificIRQ+0x46>

      /* USER CODE END LINKLAYER_PLAT_EnableSpecificIRQ_1*/
    }
  }

  if( (isr_type & LL_LOW_ISR_ONLY) != 0 )
 8002750:	07a2      	lsls	r2, r4, #30
 8002752:	d505      	bpl.n	8002760 <LINKLAYER_PLAT_EnableSpecificIRQ+0x24>
  {
    prio_low_isr_counter--;
 8002754:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <LINKLAYER_PLAT_EnableSpecificIRQ+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	3a01      	subs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]
    if(prio_low_isr_counter == 0)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	b163      	cbz	r3, 800277a <LINKLAYER_PLAT_EnableSpecificIRQ+0x3e>
      HAL_NVIC_EnableIRQ(RADIO_SW_LOW_INTR_NUM);
    }

  }

  if( (isr_type & SYS_LOW_ISR) != 0 )
 8002760:	0763      	lsls	r3, r4, #29
 8002762:	d509      	bpl.n	8002778 <LINKLAYER_PLAT_EnableSpecificIRQ+0x3c>
  {
    prio_sys_isr_counter--;
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <LINKLAYER_PLAT_EnableSpecificIRQ+0x58>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	3a01      	subs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    if(prio_sys_isr_counter == 0)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b91b      	cbnz	r3, 8002778 <LINKLAYER_PLAT_EnableSpecificIRQ+0x3c>
    {
      /* Restore basepri value */
      __set_BASEPRI(local_basepri_value);
 8002770:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <LINKLAYER_PLAT_EnableSpecificIRQ+0x5c>)
 8002772:	681b      	ldr	r3, [r3, #0]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002774:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002778:	bd10      	pop	{r4, pc}
      HAL_NVIC_EnableIRQ(RADIO_SW_LOW_INTR_NUM);
 800277a:	203d      	movs	r0, #61	@ 0x3d
 800277c:	f005 fd9e 	bl	80082bc <HAL_NVIC_EnableIRQ>
 8002780:	e7ee      	b.n	8002760 <LINKLAYER_PLAT_EnableSpecificIRQ+0x24>
      HAL_NVIC_EnableIRQ(RADIO_INTR_NUM);
 8002782:	2042      	movs	r0, #66	@ 0x42
 8002784:	f005 fd9a 	bl	80082bc <HAL_NVIC_EnableIRQ>
 8002788:	e7e2      	b.n	8002750 <LINKLAYER_PLAT_EnableSpecificIRQ+0x14>
 800278a:	bf00      	nop
 800278c:	20005780 	.word	0x20005780
 8002790:	2000577c 	.word	0x2000577c
 8002794:	20005778 	.word	0x20005778
 8002798:	20005770 	.word	0x20005770

0800279c <LINKLAYER_PLAT_DisableSpecificIRQ>:
  *              lower priority that link layer SW low interrupt.
  * @retval None
  */
void LINKLAYER_PLAT_DisableSpecificIRQ(uint8_t isr_type)
{
  if( (isr_type & LL_HIGH_ISR_ONLY) != 0 )
 800279c:	07c1      	lsls	r1, r0, #31
{
 800279e:	b510      	push	{r4, lr}
 80027a0:	4604      	mov	r4, r0
  if( (isr_type & LL_HIGH_ISR_ONLY) != 0 )
 80027a2:	d506      	bpl.n	80027b2 <LINKLAYER_PLAT_DisableSpecificIRQ+0x16>
  {
    prio_high_isr_counter++;
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <LINKLAYER_PLAT_DisableSpecificIRQ+0x5c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	3201      	adds	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    if(prio_high_isr_counter == 1)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d01a      	beq.n	80027e8 <LINKLAYER_PLAT_DisableSpecificIRQ+0x4c>
      /* When specific counter for link layer high ISR value is 1, interrupt is disabled */
      HAL_NVIC_DisableIRQ(RADIO_INTR_NUM);
    }
  }

  if( (isr_type & LL_LOW_ISR_ONLY) != 0 )
 80027b2:	07a2      	lsls	r2, r4, #30
 80027b4:	d506      	bpl.n	80027c4 <LINKLAYER_PLAT_DisableSpecificIRQ+0x28>
  {
    prio_low_isr_counter++;
 80027b6:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <LINKLAYER_PLAT_DisableSpecificIRQ+0x60>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	3201      	adds	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    if(prio_low_isr_counter == 1)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d015      	beq.n	80027f0 <LINKLAYER_PLAT_DisableSpecificIRQ+0x54>
      /* When specific counter for link layer SW low ISR value is 1, interrupt is disabled */
      HAL_NVIC_DisableIRQ(RADIO_SW_LOW_INTR_NUM);
    }
  }

  if( (isr_type & SYS_LOW_ISR) != 0 )
 80027c4:	0763      	lsls	r3, r4, #29
 80027c6:	d506      	bpl.n	80027d6 <LINKLAYER_PLAT_DisableSpecificIRQ+0x3a>
  {
    prio_sys_isr_counter++;
 80027c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <LINKLAYER_PLAT_DisableSpecificIRQ+0x64>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	3201      	adds	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
    if(prio_sys_isr_counter == 1)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d000      	beq.n	80027d8 <LINKLAYER_PLAT_DisableSpecificIRQ+0x3c>

      /* Mask all other interrupts with lower priority that link layer SW low ISR */
      __set_BASEPRI_MAX(RADIO_INTR_PRIO_LOW<<4);
    }
  }
}
 80027d6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027d8:	f3ef 8111 	mrs	r1, BASEPRI
      local_basepri_value = __get_BASEPRI();
 80027dc:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <LINKLAYER_PLAT_DisableSpecificIRQ+0x68>)
           or the new value increases the BASEPRI priority level.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
{
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 80027de:	2350      	movs	r3, #80	@ 0x50
 80027e0:	6011      	str	r1, [r2, #0]
 80027e2:	f383 8812 	msr	BASEPRI_MAX, r3
}
 80027e6:	bd10      	pop	{r4, pc}
      HAL_NVIC_DisableIRQ(RADIO_INTR_NUM);
 80027e8:	2042      	movs	r0, #66	@ 0x42
 80027ea:	f005 fd75 	bl	80082d8 <HAL_NVIC_DisableIRQ>
 80027ee:	e7e0      	b.n	80027b2 <LINKLAYER_PLAT_DisableSpecificIRQ+0x16>
      HAL_NVIC_DisableIRQ(RADIO_SW_LOW_INTR_NUM);
 80027f0:	203d      	movs	r0, #61	@ 0x3d
 80027f2:	f005 fd71 	bl	80082d8 <HAL_NVIC_DisableIRQ>
 80027f6:	e7e5      	b.n	80027c4 <LINKLAYER_PLAT_DisableSpecificIRQ+0x28>
 80027f8:	20005780 	.word	0x20005780
 80027fc:	2000577c 	.word	0x2000577c
 8002800:	20005778 	.word	0x20005778
 8002804:	20005770 	.word	0x20005770

08002808 <LINKLAYER_PLAT_EnableRadioIT>:
{
  /* USER CODE BEGIN LINKLAYER_PLAT_EnableRadioIT_1*/

  /* USER CODE END LINKLAYER_PLAT_EnableRadioIT_1*/

  HAL_NVIC_EnableIRQ((IRQn_Type) RADIO_INTR_NUM);
 8002808:	2042      	movs	r0, #66	@ 0x42
 800280a:	f005 bd57 	b.w	80082bc <HAL_NVIC_EnableIRQ>
 800280e:	bf00      	nop

08002810 <LINKLAYER_PLAT_DisableRadioIT>:
{
  /* USER CODE BEGIN LINKLAYER_PLAT_DisableRadioIT_1*/

  /* USER CODE END LINKLAYER_PLAT_DisableRadioIT_1*/

  HAL_NVIC_DisableIRQ((IRQn_Type) RADIO_INTR_NUM);
 8002810:	2042      	movs	r0, #66	@ 0x42
 8002812:	f005 bd61 	b.w	80082d8 <HAL_NVIC_DisableIRQ>
 8002816:	bf00      	nop

08002818 <LINKLAYER_PLAT_StartRadioEvt>:
void LINKLAYER_PLAT_StartRadioEvt(void)
{
  __HAL_RCC_RADIO_CLK_SLEEP_ENABLE();
  NVIC_SetPriority(RADIO_INTR_NUM, RADIO_INTR_PRIO_HIGH);
#if (CFG_SCM_SUPPORTED == 1)
  scm_notifyradiostate(SCM_RADIO_ACTIVE);
 8002818:	2001      	movs	r0, #1
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	f04f 0c00 	mov.w	ip, #0
  __HAL_RCC_RADIO_CLK_SLEEP_ENABLE();
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <LINKLAYER_PLAT_StartRadioEvt+0x1c>)
 8002820:	4905      	ldr	r1, [pc, #20]	@ (8002838 <LINKLAYER_PLAT_StartRadioEvt+0x20>)
 8002822:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8002826:	4303      	orrs	r3, r0
 8002828:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800282c:	f881 c342 	strb.w	ip, [r1, #834]	@ 0x342
  scm_notifyradiostate(SCM_RADIO_ACTIVE);
 8002830:	f004 bd9c 	b.w	800736c <scm_notifyradiostate>
 8002834:	46020c00 	.word	0x46020c00
 8002838:	e000e100 	.word	0xe000e100

0800283c <LINKLAYER_PLAT_StopRadioEvt>:
 800283c:	f04f 0c50 	mov.w	ip, #80	@ 0x50
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_StopRadioEvt(void)
{
  __HAL_RCC_RADIO_CLK_SLEEP_DISABLE();
 8002840:	4a06      	ldr	r2, [pc, #24]	@ (800285c <LINKLAYER_PLAT_StopRadioEvt+0x20>)
 8002842:	4907      	ldr	r1, [pc, #28]	@ (8002860 <LINKLAYER_PLAT_StopRadioEvt+0x24>)
 8002844:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
  NVIC_SetPriority(RADIO_INTR_NUM, RADIO_INTR_PRIO_LOW);
#if (CFG_SCM_SUPPORTED == 1)
  scm_notifyradiostate(SCM_RADIO_NOT_ACTIVE);
 8002848:	2000      	movs	r0, #0
  __HAL_RCC_RADIO_CLK_SLEEP_DISABLE();
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002852:	f881 c342 	strb.w	ip, [r1, #834]	@ 0x342
  scm_notifyradiostate(SCM_RADIO_NOT_ACTIVE);
 8002856:	f004 bd89 	b.w	800736c <scm_notifyradiostate>
 800285a:	bf00      	nop
 800285c:	46020c00 	.word	0x46020c00
 8002860:	e000e100 	.word	0xe000e100

08002864 <LINKLAYER_PLAT_RCOStartClbr>:
#if (CFG_LPM_STDBY_SUPPORTED == 1)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_LL_HW_RCO_CLBR, UTIL_LPM_DISABLE);
#endif /* (CFG_LPM_STDBY_SUPPORTED == 1) */
  UTIL_LPM_SetStopMode(1U << CFG_LPM_LL_HW_RCO_CLBR, UTIL_LPM_DISABLE);
#endif /* (CFG_LPM_LEVEL != 0) */
  scm_setsystemclock(SCM_USER_LL_HW_RCO_CLBR, HSE_32MHZ);
 8002864:	2102      	movs	r1, #2
{
 8002866:	b508      	push	{r3, lr}
  scm_setsystemclock(SCM_USER_LL_HW_RCO_CLBR, HSE_32MHZ);
 8002868:	4608      	mov	r0, r1
 800286a:	f004 fa49 	bl	8006d00 <scm_setsystemclock>
  * @rmtoll VOSR          VOSRDY          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return ((READ_BIT(PWR->VOSR, PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL);
 800286e:	4a02      	ldr	r2, [pc, #8]	@ (8002878 <LINKLAYER_PLAT_RCOStartClbr+0x14>)
 8002870:	68d3      	ldr	r3, [r2, #12]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	d5fc      	bpl.n	8002870 <LINKLAYER_PLAT_RCOStartClbr+0xc>
  while (LL_PWR_IsActiveFlag_VOS() == 0);
#endif /* CFG_SCM_SUPPORTED */
}
 8002876:	bd08      	pop	{r3, pc}
 8002878:	46020800 	.word	0x46020800

0800287c <LINKLAYER_PLAT_RCOStopClbr>:
#if (CFG_LPM_STDBY_SUPPORTED == 1)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_LL_HW_RCO_CLBR, UTIL_LPM_ENABLE);
#endif /* (CFG_LPM_STDBY_SUPPORTED == 1) */
  UTIL_LPM_SetStopMode(1U << CFG_LPM_LL_HW_RCO_CLBR, UTIL_LPM_ENABLE);
#endif /* (CFG_LPM_LEVEL != 0) */
  scm_setsystemclock(SCM_USER_LL_HW_RCO_CLBR, HSE_16MHZ);
 800287c:	2101      	movs	r1, #1
 800287e:	2002      	movs	r0, #2
{
 8002880:	b508      	push	{r3, lr}
  scm_setsystemclock(SCM_USER_LL_HW_RCO_CLBR, HSE_16MHZ);
 8002882:	f004 fa3d 	bl	8006d00 <scm_setsystemclock>
 8002886:	4a02      	ldr	r2, [pc, #8]	@ (8002890 <LINKLAYER_PLAT_RCOStopClbr+0x14>)
 8002888:	68d3      	ldr	r3, [r2, #12]
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	d5fc      	bpl.n	8002888 <LINKLAYER_PLAT_RCOStopClbr+0xc>
  while (LL_PWR_IsActiveFlag_VOS() == 0);
#endif /* CFG_SCM_SUPPORTED */
}
 800288e:	bd08      	pop	{r3, pc}
 8002890:	46020800 	.word	0x46020800

08002894 <LINKLAYER_PLAT_RequestTemperature>:
  * @retval None
  */
void LINKLAYER_PLAT_RequestTemperature(void)
{
#if (USE_TEMPERATURE_BASED_RADIO_CALIBRATION == 1)
  ll_sys_bg_temperature_measurement();
 8002894:	f000 b848 	b.w	8002928 <ll_sys_bg_temperature_measurement>

08002898 <LINKLAYER_PLAT_EnableOSContextSwitch>:
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_EnableOSContextSwitch(void)
{
}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <LINKLAYER_PLAT_DisableOSContextSwitch>:
/**
  * @brief  Disable RTOS context switch.
  * @param  None
  * @retval None
  */
void LINKLAYER_PLAT_DisableOSContextSwitch(void)
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

080028a0 <LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT>:
void LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT(Evnt_timing_t * p_evnt_timing)
{
  /* USER CODE BEGIN LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT_0 */

  /* USER CODE END LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT_0 */
}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <ll_sys_bg_process_init>:
  * @retval None
  */
void ll_sys_bg_process_init(void)
{
  /* Register Link Layer task */
  UTIL_SEQ_RegTask(1U << CFG_TASK_LINK_LAYER, UTIL_SEQ_RFU, ll_sys_bg_process);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2002      	movs	r0, #2
 80028a8:	4a01      	ldr	r2, [pc, #4]	@ (80028b0 <ll_sys_bg_process_init+0xc>)
 80028aa:	f009 bc53 	b.w	800c154 <UTIL_SEQ_RegTask>
 80028ae:	bf00      	nop
 80028b0:	0800bddd 	.word	0x0800bddd

080028b4 <ll_sys_schedule_bg_process>:
  * @param  None
  * @retval None
  */
void ll_sys_schedule_bg_process(void)
{
  UTIL_SEQ_SetTask(1U << CFG_TASK_LINK_LAYER, TASK_PRIO_LINK_LAYER);
 80028b4:	2100      	movs	r1, #0
 80028b6:	2002      	movs	r0, #2
 80028b8:	f009 bc64 	b.w	800c184 <UTIL_SEQ_SetTask>

080028bc <ll_sys_schedule_bg_process_isr>:
/**
  * @brief  Link Layer background process next iteration scheduling from ISR
  * @param  None
  * @retval None
  */
void ll_sys_schedule_bg_process_isr(void)
 80028bc:	2100      	movs	r1, #0
 80028be:	2002      	movs	r0, #2
 80028c0:	f009 bc60 	b.w	800c184 <UTIL_SEQ_SetTask>

080028c4 <ll_sys_config_params>:
{
  /* Configure link layer behavior for low ISR use and next event scheduling method:
   * - SW low ISR is used.
   * - Next event is scheduled from ISR.
   */
  ll_intf_cmn_config_ll_ctx_params(USE_RADIO_LOW_ISR, NEXT_EVENT_SCHEDULING_FROM_ISR);
 80028c4:	2101      	movs	r1, #1
{
 80028c6:	b500      	push	{lr}
  ll_intf_cmn_config_ll_ctx_params(USE_RADIO_LOW_ISR, NEXT_EVENT_SCHEDULING_FROM_ISR);
 80028c8:	4608      	mov	r0, r1
{
 80028ca:	b083      	sub	sp, #12
  ll_intf_cmn_config_ll_ctx_params(USE_RADIO_LOW_ISR, NEXT_EVENT_SCHEDULING_FROM_ISR);
 80028cc:	f01e fa08 	bl	8020ce0 <ll_intf_cmn_config_ll_ctx_params>
}
#endif /* CFG_RADIO_LSE_SLEEP_TIMER_CUSTOM_SCA_RANGE */

void ll_sys_sleep_clock_source_selection(void)
{
  uint16_t freq_value = 0;
 80028d0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->BDCR1, RCC_BDCR1_RADIOSTSEL));
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <ll_sys_config_params+0x5c>)
 80028d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d8:	f8ad 0006 	strh.w	r0, [sp, #6]
 80028dc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  uint32_t linklayer_slp_clk_src = LL_RCC_RADIOSLEEPSOURCE_NONE;

  linklayer_slp_clk_src = LL_RCC_RADIO_GetSleepTimerClockSource();
  switch(linklayer_slp_clk_src)
 80028e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028e4:	d019      	beq.n	800291a <ll_sys_config_params+0x56>
 80028e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028ea:	d005      	beq.n	80028f8 <ll_sys_config_params+0x34>
 80028ec:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	0058      	lsls	r0, r3, #1
    case LL_RCC_RADIOSLEEPSOURCE_NONE:
      /* No Link Layer sleep clock source selected */
      assert_param(0);
      break;
  }
  ll_intf_cmn_le_select_slp_clk_src((uint8_t)linklayer_slp_clk_src, &freq_value);
 80028f8:	f10d 0106 	add.w	r1, sp, #6
 80028fc:	f01e f9f2 	bl	8020ce4 <ll_intf_cmn_le_select_slp_clk_src>
  UTIL_SEQ_RegTask(1U << CFG_TASK_TEMP_MEAS, UTIL_SEQ_RFU, TEMPMEAS_RequestTemperatureMeasurement);
 8002900:	2008      	movs	r0, #8
 8002902:	2100      	movs	r1, #0
 8002904:	4a07      	ldr	r2, [pc, #28]	@ (8002924 <ll_sys_config_params+0x60>)
 8002906:	f009 fc25 	bl	800c154 <UTIL_SEQ_RegTask>
  ll_intf_cmn_set_temperature_sensor_state();
 800290a:	f01e f9ef 	bl	8020cec <ll_intf_cmn_set_temperature_sensor_state>
  ll_intf_cmn_select_tx_power_table(CFG_RF_TX_POWER_TABLE_ID);
 800290e:	2000      	movs	r0, #0
}
 8002910:	b003      	add	sp, #12
 8002912:	f85d eb04 	ldr.w	lr, [sp], #4
  ll_intf_cmn_select_tx_power_table(CFG_RF_TX_POWER_TABLE_ID);
 8002916:	f01e b9e7 	b.w	8020ce8 <ll_intf_cmn_select_tx_power_table>
  switch(linklayer_slp_clk_src)
 800291a:	2001      	movs	r0, #1
 800291c:	e7ec      	b.n	80028f8 <ll_sys_config_params+0x34>
 800291e:	bf00      	nop
 8002920:	46020c00 	.word	0x46020c00
 8002924:	0800744d 	.word	0x0800744d

08002928 <ll_sys_bg_temperature_measurement>:
{
 8002928:	b510      	push	{r4, lr}
  if(initial_temperature_acquisition == 0)
 800292a:	4c07      	ldr	r4, [pc, #28]	@ (8002948 <ll_sys_bg_temperature_measurement+0x20>)
 800292c:	7823      	ldrb	r3, [r4, #0]
 800292e:	b923      	cbnz	r3, 800293a <ll_sys_bg_temperature_measurement+0x12>
    TEMPMEAS_RequestTemperatureMeasurement();
 8002930:	f004 fd8c 	bl	800744c <TEMPMEAS_RequestTemperatureMeasurement>
    initial_temperature_acquisition = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	7023      	strb	r3, [r4, #0]
}
 8002938:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask(1U << CFG_TASK_TEMP_MEAS, CFG_SEQ_PRIO_0);
 800293a:	2100      	movs	r1, #0
}
 800293c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UTIL_SEQ_SetTask(1U << CFG_TASK_TEMP_MEAS, CFG_SEQ_PRIO_0);
 8002940:	2008      	movs	r0, #8
 8002942:	f009 bc1f 	b.w	800c184 <UTIL_SEQ_SetTask>
 8002946:	bf00      	nop
 8002948:	20005790 	.word	0x20005790

0800294c <ll_sys_reset>:
  uint16_t freq_value = 0;
 800294c:	2000      	movs	r0, #0
}

void ll_sys_reset(void)
{
 800294e:	b500      	push	{lr}
 8002950:	4b18      	ldr	r3, [pc, #96]	@ (80029b4 <ll_sys_reset+0x68>)
 8002952:	b083      	sub	sp, #12
 8002954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
  uint16_t freq_value = 0;
 8002958:	f8ad 0006 	strh.w	r0, [sp, #6]
 800295c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  switch(linklayer_slp_clk_src)
 8002960:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002964:	d023      	beq.n	80029ae <ll_sys_reset+0x62>
 8002966:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800296a:	d005      	beq.n	8002978 <ll_sys_reset+0x2c>
 800296c:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	0058      	lsls	r0, r3, #1
  ll_intf_cmn_le_select_slp_clk_src((uint8_t)linklayer_slp_clk_src, &freq_value);
 8002978:	f10d 0106 	add.w	r1, sp, #6
 800297c:	f01e f9b2 	bl	8020ce4 <ll_intf_cmn_le_select_slp_clk_src>
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002980:	4a0d      	ldr	r2, [pc, #52]	@ (80029b8 <ll_sys_reset+0x6c>)
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <ll_sys_reset+0x68>)
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800298a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
  if(linklayer_slp_clk_src == LL_RCC_RADIOSLEEPSOURCE_LSE)
 800298e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002992:	d002      	beq.n	800299a <ll_sys_reset+0x4e>
  if(bsca != STM32WBA5x_DEFAULT_SCA_RANGE)
  {
    ll_intf_le_set_sleep_clock_accuracy(bsca);
  }
#endif /* CFG_RADIO_LSE_SLEEP_TIMER_CUSTOM_SCA_RANGE */
}
 8002994:	b003      	add	sp, #12
 8002996:	f85d fb04 	ldr.w	pc, [sp], #4
 800299a:	0c12      	lsrs	r2, r2, #16
    else if(RevID == REV_ID_B)
 800299c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80029a0:	d1f8      	bne.n	8002994 <ll_sys_reset+0x48>
    ll_intf_le_set_sleep_clock_accuracy(bsca);
 80029a2:	2004      	movs	r0, #4
}
 80029a4:	b003      	add	sp, #12
 80029a6:	f85d eb04 	ldr.w	lr, [sp], #4
    ll_intf_le_set_sleep_clock_accuracy(bsca);
 80029aa:	f00d bf2e 	b.w	801080a <ll_intf_le_set_sleep_clock_accuracy>
  switch(linklayer_slp_clk_src)
 80029ae:	2001      	movs	r0, #1
 80029b0:	e7e2      	b.n	8002978 <ll_sys_reset+0x2c>
 80029b2:	bf00      	nop
 80029b4:	46020c00 	.word	0x46020c00
 80029b8:	e0044000 	.word	0xe0044000

080029bc <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC4_IRQHandler>
	...

080029c0 <APP_DEBUG_SIGNAL_SET>:
void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop

080029c4 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop

080029c8 <RT_DEBUG_GPIO_Init>:
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
      HAL_PWREx_EnableStandbyIORetention(pwr_gpio_port, general_debug_table[cpt].GPIO_pin);
    }
  }
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop

080029cc <Log_Module_PrintWithArg>:

/**
 *
 */
void Log_Module_PrintWithArg( Log_Verbose_Level_t eVerboseLevel, Log_Region_t eRegion, const char * pText, va_list args )
{
 80029cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Log_Module_PrintWithArg_1 */

  /* USER CODE END Log_Module_PrintWithArg_1 */

  /* Check verbose level */
  if ( eVerboseLevel > eLogCurrentVerboseLevel )
 80029ce:	4c0e      	ldr	r4, [pc, #56]	@ (8002a08 <Log_Module_PrintWithArg+0x3c>)
{
 80029d0:	b0c2      	sub	sp, #264	@ 0x108
  if ( eVerboseLevel > eLogCurrentVerboseLevel )
 80029d2:	6824      	ldr	r4, [r4, #0]
 80029d4:	4284      	cmp	r4, r0
 80029d6:	d309      	bcc.n	80029ec <Log_Module_PrintWithArg+0x20>
/**
 *
 */
static uint32_t Get_Region_Mask(Log_Region_t region)
{
  if (region == LOG_REGION_ALL_REGIONS)
 80029d8:	1c48      	adds	r0, r1, #1
 80029da:	d003      	beq.n	80029e4 <Log_Module_PrintWithArg+0x18>
    return ((uint32_t)LOG_MODULE_ALL_REGION_MASK);
  }
  else
  {
    /* Return the bit matching the region */
    return ((uint32_t)(1U << ((uint32_t)region - 1U)));
 80029dc:	2001      	movs	r0, #1
 80029de:	3901      	subs	r1, #1
 80029e0:	fa00 f101 	lsl.w	r1, r0, r1
  if ( ( Get_Region_Mask( eRegion ) & lLogCurrentRegionMask ) == 0u )
 80029e4:	4809      	ldr	r0, [pc, #36]	@ (8002a0c <Log_Module_PrintWithArg+0x40>)
 80029e6:	6800      	ldr	r0, [r0, #0]
 80029e8:	4201      	tst	r1, r0
 80029ea:	d101      	bne.n	80029f0 <Log_Module_PrintWithArg+0x24>
}
 80029ec:	b042      	add	sp, #264	@ 0x108
 80029ee:	bd10      	pop	{r4, pc}
  iTempSize = (uint16_t)vsnprintf( &szFullText[iBuffSize], ( UTIL_ADV_TRACE_TMP_BUF_SIZE - iBuffSize ), pText, args );
 80029f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029f4:	a801      	add	r0, sp, #4
 80029f6:	f028 ff47 	bl	802b888 <vsniprintf>
 80029fa:	4601      	mov	r1, r0
  UTIL_ADV_TRACE_Send( (const uint8_t *)szFullText, iBuffSize );
 80029fc:	a801      	add	r0, sp, #4
 80029fe:	b289      	uxth	r1, r1
 8002a00:	f009 faee 	bl	800bfe0 <UTIL_ADV_TRACE_Send>
}
 8002a04:	b042      	add	sp, #264	@ 0x108
 8002a06:	bd10      	pop	{r4, pc}
 8002a08:	200057b8 	.word	0x200057b8
 8002a0c:	200057bc 	.word	0x200057bc

08002a10 <Log_Module_Print>:
{
 8002a10:	b40c      	push	{r2, r3}
 8002a12:	b500      	push	{lr}
 8002a14:	b083      	sub	sp, #12
 8002a16:	ab04      	add	r3, sp, #16
 8002a18:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start( variadic_args, pText );
 8002a1c:	9301      	str	r3, [sp, #4]
  Log_Module_PrintWithArg( eVerboseLevel, eRegion, pText, variadic_args );
 8002a1e:	f7ff ffd5 	bl	80029cc <Log_Module_PrintWithArg>
}
 8002a22:	b003      	add	sp, #12
 8002a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a28:	b002      	add	sp, #8
 8002a2a:	4770      	bx	lr

08002a2c <Log_Module_Init>:
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	ab02      	add	r3, sp, #8
 8002a32:	e903 0003 	stmdb	r3, {r0, r1}
  UTIL_ADV_TRACE_Init();
 8002a36:	f009 fa57 	bl	800bee8 <UTIL_ADV_TRACE_Init>
  eLogCurrentVerboseLevel = new_verbose_level;
 8002a3a:	e9dd 4300 	ldrd	r4, r3, [sp]
  memcpy( &eLogCurrentColorList, &LOG_COLOR_DEFAULT_CONFIGURATION, sizeof(LOG_COLOR_DEFAULT_CONFIGURATION) );
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <Log_Module_Init+0x3c>)
  eLogCurrentVerboseLevel = new_verbose_level;
 8002a40:	480a      	ldr	r0, [pc, #40]	@ (8002a6c <Log_Module_Init+0x40>)
  memcpy( &eLogCurrentColorList, &LOG_COLOR_DEFAULT_CONFIGURATION, sizeof(LOG_COLOR_DEFAULT_CONFIGURATION) );
 8002a42:	490b      	ldr	r1, [pc, #44]	@ (8002a70 <Log_Module_Init+0x44>)
  eLogCurrentVerboseLevel = new_verbose_level;
 8002a44:	6004      	str	r4, [r0, #0]
  memcpy( &eLogCurrentColorList, &LOG_COLOR_DEFAULT_CONFIGURATION, sizeof(LOG_COLOR_DEFAULT_CONFIGURATION) );
 8002a46:	c903      	ldmia	r1, {r0, r1}
 8002a48:	e882 0003 	stmia.w	r2, {r0, r1}
  if (region == LOG_REGION_ALL_REGIONS)
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	d003      	beq.n	8002a58 <Log_Module_Init+0x2c>
    return ((uint32_t)(1U << ((uint32_t)region - 1U)));
 8002a50:	2201      	movs	r2, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
  pLogTimeStampFunc = NULL;
 8002a58:	2100      	movs	r1, #0
  lLogCurrentRegionMask = Get_Region_Mask(new_region);
 8002a5a:	4806      	ldr	r0, [pc, #24]	@ (8002a74 <Log_Module_Init+0x48>)
  pLogTimeStampFunc = NULL;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	@ (8002a78 <Log_Module_Init+0x4c>)
  lLogCurrentRegionMask = Get_Region_Mask(new_region);
 8002a5e:	6003      	str	r3, [r0, #0]
  pLogTimeStampFunc = NULL;
 8002a60:	6011      	str	r1, [r2, #0]
}
 8002a62:	b002      	add	sp, #8
 8002a64:	bd10      	pop	{r4, pc}
 8002a66:	bf00      	nop
 8002a68:	20005798 	.word	0x20005798
 8002a6c:	200057b8 	.word	0x200057b8
 8002a70:	0802d68c 	.word	0x0802d68c
 8002a74:	200057bc 	.word	0x200057bc
 8002a78:	20005794 	.word	0x20005794

08002a7c <HW_AES_Enable>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == Periphs) ? 1UL : 0UL);
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <HW_AES_Enable+0x3c>)
 8002a7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a82:	03d2      	lsls	r2, r2, #15
 8002a84:	d416      	bmi.n	8002ab4 <HW_AES_Enable+0x38>

  if ( HW_AES_CLOCK_IS_ENABLE() )
  {
    return FALSE;
  }
  av->run = TRUE;
 8002a86:	2001      	movs	r0, #1
 8002a88:	4a0c      	ldr	r2, [pc, #48]	@ (8002abc <HW_AES_Enable+0x40>)
{
 8002a8a:	b082      	sub	sp, #8
  av->run = TRUE;
 8002a8c:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a8e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002a92:	b672      	cpsid	i
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002a98:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002aaa:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aac:	f381 8810 	msr	PRIMASK, r1
  HW_AES_CLOCK_ENABLE( );

  UTILS_EXIT_CRITICAL_SECTION( );

  return TRUE;
}
 8002ab0:	b002      	add	sp, #8
 8002ab2:	4770      	bx	lr
    return FALSE;
 8002ab4:	2000      	movs	r0, #0
}
 8002ab6:	4770      	bx	lr
 8002ab8:	46020c00 	.word	0x46020c00
 8002abc:	200057c0 	.word	0x200057c0

08002ac0 <HW_AES_SetKey>:

/*****************************************************************************/

void HW_AES_SetKey( uint32_t mode,
                    const uint8_t* key )
{
 8002ac0:	b530      	push	{r4, r5, lr}
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	b085      	sub	sp, #20
  uint32_t tmp[4];

  /* Retrieve all bytes of key */
  memcpy( tmp, key, 16 );
 8002ac6:	46ec      	mov	ip, sp
{
 8002ac8:	4686      	mov	lr, r0
     - Data type:      32-bit
     - Operating mode: encryption
     - Chaining mode:  ECB
     - Key size:       128-bit
  */
  HW_AESX->CR = 0;
 8002aca:	2500      	movs	r5, #0
  memcpy( tmp, key, 16 );
 8002acc:	6808      	ldr	r0, [r1, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	6849      	ldr	r1, [r1, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
  HW_AESX->CR = 0;
 8002ad4:	4c20      	ldr	r4, [pc, #128]	@ (8002b58 <HW_AES_SetKey+0x98>)
  memcpy( tmp, key, 16 );
 8002ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

  /* Copy key bytes to the AES registers */

  if ( mode & HW_AES_REV )
 8002ada:	f01e 0f02 	tst.w	lr, #2
  HW_AESX->CR = 0;
 8002ade:	6025      	str	r5, [r4, #0]
  {
    HW_AESX->KEYR0 = tmp[0];
 8002ae0:	9b00      	ldr	r3, [sp, #0]
  if ( mode & HW_AES_REV )
 8002ae2:	d02d      	beq.n	8002b40 <HW_AES_SetKey+0x80>
    HW_AESX->KEYR0 = tmp[0];
 8002ae4:	6123      	str	r3, [r4, #16]
    HW_AESX->KEYR1 = tmp[1];
 8002ae6:	9b01      	ldr	r3, [sp, #4]
 8002ae8:	6163      	str	r3, [r4, #20]
    HW_AESX->KEYR2 = tmp[2];
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	61a3      	str	r3, [r4, #24]
    HW_AESX->KEYR3 = tmp[3];
 8002aee:	9b03      	ldr	r3, [sp, #12]
 8002af0:	61e3      	str	r3, [r4, #28]
    HW_AESX->KEYR2 = __REV( tmp[1] );
    HW_AESX->KEYR1 = __REV( tmp[2] );
    HW_AESX->KEYR0 = __REV( tmp[3] );
  }

  if ( !(mode & HW_AES_ENC) )
 8002af2:	f01e 0f01 	tst.w	lr, #1
 8002af6:	d111      	bne.n	8002b1c <HW_AES_SetKey+0x5c>
  {
    /* Set key preparation mode */
    HW_AESX->CR = AES_CR_MODE_0;
 8002af8:	2308      	movs	r3, #8
 8002afa:	4a17      	ldr	r2, [pc, #92]	@ (8002b58 <HW_AES_SetKey+0x98>)
 8002afc:	6013      	str	r3, [r2, #0]

    /* Enable AES processing */
    HW_AESX->CR |= AES_CR_EN;
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6013      	str	r3, [r2, #0]

    /* Wait for CCF flag to be raised */
    while ( ! (HW_AESX->SR & AES_SR_CCF) );
 8002b06:	6853      	ldr	r3, [r2, #4]
 8002b08:	07d9      	lsls	r1, r3, #31
 8002b0a:	d5fc      	bpl.n	8002b06 <HW_AES_SetKey+0x46>

    /* Clear CCF Flag */
    HW_AESX->ICR |= AES_ICR_CCF;

    /* Set decryption mode */
    HW_AESX->CR = AES_CR_MODE_1;
 8002b0c:	2110      	movs	r1, #16
    HW_AESX->ICR |= AES_ICR_CCF;
 8002b0e:	f8d2 3308 	ldr.w	r3, [r2, #776]	@ 0x308
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
    HW_AESX->CR = AES_CR_MODE_1;
 8002b1a:	6011      	str	r1, [r2, #0]
  }

  /* Enable byte swapping if needed */
  if ( mode & HW_AES_SWAP )
 8002b1c:	f01e 0f04 	tst.w	lr, #4
 8002b20:	d004      	beq.n	8002b2c <HW_AES_SetKey+0x6c>
    HW_AESX->CR |= AES_CR_DATATYPE_1;
 8002b22:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <HW_AES_SetKey+0x98>)
 8002b24:	6813      	ldr	r3, [r2, #0]
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Wait until KEYVALID is set */
  while ( !(HW_AESX->SR & AES_SR_KEYVALID) );
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HW_AES_SetKey+0x98>)
 8002b2e:	6853      	ldr	r3, [r2, #4]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	d5fc      	bpl.n	8002b2e <HW_AES_SetKey+0x6e>

  /* Enable AES processing */
  HW_AESX->CR |= AES_CR_EN;
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	b005      	add	sp, #20
 8002b3e:	bd30      	pop	{r4, r5, pc}
  return __builtin_bswap32(value);
 8002b40:	ba1b      	rev	r3, r3
    HW_AESX->KEYR3 = __REV( tmp[0] );
 8002b42:	61e3      	str	r3, [r4, #28]
 8002b44:	9b01      	ldr	r3, [sp, #4]
 8002b46:	ba1b      	rev	r3, r3
    HW_AESX->KEYR2 = __REV( tmp[1] );
 8002b48:	61a3      	str	r3, [r4, #24]
 8002b4a:	9b02      	ldr	r3, [sp, #8]
 8002b4c:	ba1b      	rev	r3, r3
    HW_AESX->KEYR1 = __REV( tmp[2] );
 8002b4e:	6163      	str	r3, [r4, #20]
 8002b50:	9b03      	ldr	r3, [sp, #12]
 8002b52:	ba1b      	rev	r3, r3
    HW_AESX->KEYR0 = __REV( tmp[3] );
 8002b54:	6123      	str	r3, [r4, #16]
 8002b56:	e7cc      	b.n	8002af2 <HW_AES_SetKey+0x32>
 8002b58:	420c0000 	.word	0x420c0000

08002b5c <HW_AES_Crypt>:

void HW_AES_Crypt( const uint32_t* input,
                   uint32_t* output )
{
  /* Write the input block into the input FIFO */
  HW_AESX->DINR = input[0];
 8002b5c:	6802      	ldr	r2, [r0, #0]
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <HW_AES_Crypt+0x38>)
 8002b60:	609a      	str	r2, [r3, #8]
  HW_AESX->DINR = input[1];
 8002b62:	6842      	ldr	r2, [r0, #4]
 8002b64:	609a      	str	r2, [r3, #8]
  HW_AESX->DINR = input[2];
 8002b66:	6882      	ldr	r2, [r0, #8]
 8002b68:	609a      	str	r2, [r3, #8]
  HW_AESX->DINR = input[3];
 8002b6a:	68c2      	ldr	r2, [r0, #12]
 8002b6c:	609a      	str	r2, [r3, #8]

  /* Wait for CCF flag to be raised */
  while ( !(HW_AESX->SR & AES_SR_CCF) );
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	07d2      	lsls	r2, r2, #31
 8002b72:	d5fc      	bpl.n	8002b6e <HW_AES_Crypt+0x12>

  /* Read the output block from the output FIFO */
  output[0] = HW_AESX->DOUTR;
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	600a      	str	r2, [r1, #0]
  output[1] = HW_AESX->DOUTR;
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	604a      	str	r2, [r1, #4]
  output[2] = HW_AESX->DOUTR;
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	608a      	str	r2, [r1, #8]
  output[3] = HW_AESX->DOUTR;
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	60ca      	str	r2, [r1, #12]

  /* Clear CCF Flag */
  HW_AESX->ICR |= AES_ICR_CCF;
 8002b84:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	420c0000 	.word	0x420c0000

08002b98 <HW_AES_Disable>:

void HW_AES_Disable( void )
{
  HW_AES_VAR_T* av = &HW_AES_var;

  if ( av->run )
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HW_AES_Disable+0x28>)
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	b17a      	cbz	r2, 8002bbe <HW_AES_Disable+0x26>
  {
    /* Disable AES processing */
    HW_AESX->CR = 0;
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4a08      	ldr	r2, [pc, #32]	@ (8002bc4 <HW_AES_Disable+0x2c>)
 8002ba2:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ba4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002baa:	4807      	ldr	r0, [pc, #28]	@ (8002bc8 <HW_AES_Disable+0x30>)
 8002bac:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8002bb0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002bb4:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb8:	f38c 8810 	msr	PRIMASK, ip
    /* Disable AES clock */
    HW_AES_CLOCK_DISABLE( );

    UTILS_EXIT_CRITICAL_SECTION( );

    av->run = FALSE;
 8002bbc:	7019      	strb	r1, [r3, #0]
  }
}
 8002bbe:	4770      	bx	lr
 8002bc0:	200057c0 	.word	0x200057c0
 8002bc4:	420c0000 	.word	0x420c0000
 8002bc8:	46020c00 	.word	0x46020c00

08002bcc <HW_PKA_Enable>:
{
  HW_PKA_VAR_T* pv = &HW_PKA_var;

  /* Test if the driver is not already in use */

  if ( pv->run )
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HW_PKA_Enable+0x64>)
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	b10a      	cbz	r2, 8002bd6 <HW_PKA_Enable+0xa>
  {
    return FALSE;
 8002bd2:	2000      	movs	r0, #0
  /* Disable the RNG clock as it is no more needed ???
   */
  HW_RNG_DisableClock( 2 );

  return TRUE;
}
 8002bd4:	4770      	bx	lr
  pv->run = TRUE;
 8002bd6:	2201      	movs	r2, #1
{
 8002bd8:	b500      	push	{lr}
  HW_RNG_EnableClock( 2 );
 8002bda:	2002      	movs	r0, #2
{
 8002bdc:	b083      	sub	sp, #12
  pv->run = TRUE;
 8002bde:	701a      	strb	r2, [r3, #0]
  HW_RNG_EnableClock( 2 );
 8002be0:	f000 f93a 	bl	8002e58 <HW_RNG_EnableClock>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002be4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002be8:	b672      	cpsid	i
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <HW_PKA_Enable+0x68>)
 8002bec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bf0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c00:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002c02:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c04:	f381 8810 	msr	PRIMASK, r1
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_Enable(PKA_TypeDef *PKAx)
{
  SET_BIT(PKAx->CR, PKA_CR_EN);
 8002c08:	4a0b      	ldr	r2, [pc, #44]	@ (8002c38 <HW_PKA_Enable+0x6c>)
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6013      	str	r3, [r2, #0]
  while ( !(PKA->SR & PKA_SR_INITOK) );
 8002c12:	6853      	ldr	r3, [r2, #4]
 8002c14:	07db      	lsls	r3, r3, #31
 8002c16:	d5fc      	bpl.n	8002c12 <HW_PKA_Enable+0x46>
  SET_BIT(PKA->CLRFR, (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC |
 8002c18:	6893      	ldr	r3, [r2, #8]
  HW_RNG_DisableClock( 2 );
 8002c1a:	2002      	movs	r0, #2
  SET_BIT(PKA->CLRFR, (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC |
 8002c1c:	f443 1368 	orr.w	r3, r3, #3801088	@ 0x3a0000
 8002c20:	6093      	str	r3, [r2, #8]
  HW_RNG_DisableClock( 2 );
 8002c22:	f000 f93d 	bl	8002ea0 <HW_RNG_DisableClock>
  return TRUE;
 8002c26:	2001      	movs	r0, #1
}
 8002c28:	b003      	add	sp, #12
 8002c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c2e:	bf00      	nop
 8002c30:	200057c4 	.word	0x200057c4
 8002c34:	46020c00 	.word	0x46020c00
 8002c38:	420c2000 	.word	0x420c2000

08002c3c <HW_PKA_WriteSingleInput>:

void HW_PKA_WriteSingleInput( uint32_t index, uint32_t word )
{
  /* Write the single word into PKA RAM */

  PKA->RAM[index] = word;
 8002c3c:	4b02      	ldr	r3, [pc, #8]	@ (8002c48 <HW_PKA_WriteSingleInput+0xc>)
 8002c3e:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8002c42:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8002c46:	4770      	bx	lr
 8002c48:	420c2000 	.word	0x420c2000

08002c4c <HW_PKA_WriteOperand>:

/*****************************************************************************/

void HW_PKA_WriteOperand( uint32_t index, int size, const uint32_t* in )
{
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HW_PKA_WriteOperand+0x78>)
{
 8002c4e:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Write the input data into PKA RAM */

  for ( ; size > 0; size-- )
 8002c50:	f1b1 0e00 	subs.w	lr, r1, #0
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
 8002c54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  for ( ; size > 0; size-- )
 8002c58:	dd14      	ble.n	8002c84 <HW_PKA_WriteOperand+0x38>
 8002c5a:	f10e 33ff 	add.w	r3, lr, #4294967295
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	f102 0304 	add.w	r3, r2, #4
 8002c64:	d901      	bls.n	8002c6a <HW_PKA_WriteOperand+0x1e>
 8002c66:	4298      	cmp	r0, r3
 8002c68:	d10f      	bne.n	8002c8a <HW_PKA_WriteOperand+0x3e>
 8002c6a:	4672      	mov	r2, lr
 8002c6c:	f1a0 0c04 	sub.w	ip, r0, #4
  {
    *pka_ram++ = *in++;
 8002c70:	f853 1c04 	ldr.w	r1, [r3, #-4]
  for ( ; size > 0; size-- )
 8002c74:	3a01      	subs	r2, #1
 8002c76:	f103 0304 	add.w	r3, r3, #4
    *pka_ram++ = *in++;
 8002c7a:	f84c 1f04 	str.w	r1, [ip, #4]!
  for ( ; size > 0; size-- )
 8002c7e:	d1f7      	bne.n	8002c70 <HW_PKA_WriteOperand+0x24>
    *pka_ram++ = *in++;
 8002c80:	eb00 008e 	add.w	r0, r0, lr, lsl #2
  }

  /* Write extra zeros into PKA RAM */

  *pka_ram = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	6003      	str	r3, [r0, #0]
}
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for ( ; size > 0; size-- )
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	f04f 0c00 	mov.w	ip, #0
 8002c90:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8002c94:	1a81      	subs	r1, r0, r2
    *pka_ram++ = *in++;
 8002c96:	685d      	ldr	r5, [r3, #4]
 8002c98:	681f      	ldr	r7, [r3, #0]
 8002c9a:	f10c 0c01 	add.w	ip, ip, #1
 8002c9e:	18cc      	adds	r4, r1, r3
 8002ca0:	4566      	cmp	r6, ip
 8002ca2:	50cf      	str	r7, [r1, r3]
 8002ca4:	6065      	str	r5, [r4, #4]
  for ( ; size > 0; size-- )
 8002ca6:	f103 0308 	add.w	r3, r3, #8
 8002caa:	d1f4      	bne.n	8002c96 <HW_PKA_WriteOperand+0x4a>
 8002cac:	f01e 0f01 	tst.w	lr, #1
 8002cb0:	f02e 0301 	bic.w	r3, lr, #1
 8002cb4:	d0e4      	beq.n	8002c80 <HW_PKA_WriteOperand+0x34>
    *pka_ram++ = *in++;
 8002cb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8002cbe:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8002cc2:	e7df      	b.n	8002c84 <HW_PKA_WriteOperand+0x38>
 8002cc4:	420c2400 	.word	0x420c2400

08002cc8 <HW_PKA_Start>:
  MODIFY_REG(PKAx->CR, (PKA_CR_MODE), (Mode << PKA_CR_MODE_Pos));
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <HW_PKA_Start+0x20>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8002cd0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002cd4:	601a      	str	r2, [r3, #0]
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_ClearFlag_PROCEND(PKA_TypeDef *PKAx)
{
  SET_BIT(PKAx->CLRFR, PKA_CLRFR_PROCENDFC);
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002cdc:	609a      	str	r2, [r3, #8]
  SET_BIT(PKAx->CR, PKA_CR_START);
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	f042 0202 	orr.w	r2, r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
  LL_PKA_Config( PKA, mode );

  /* Start the PKA processing */
  LL_PKA_ClearFlag_PROCEND( PKA );
  LL_PKA_Start( PKA );
}
 8002ce6:	4770      	bx	lr
 8002ce8:	420c2000 	.word	0x420c2000

08002cec <HW_PKA_EndOfOperation>:
  return ((READ_BIT(PKAx->SR, PKA_SR_PROCENDF) == (PKA_SR_PROCENDF)) ? 1UL : 0UL);
 8002cec:	4b02      	ldr	r3, [pc, #8]	@ (8002cf8 <HW_PKA_EndOfOperation+0xc>)
 8002cee:	6858      	ldr	r0, [r3, #4]

int HW_PKA_EndOfOperation( void )
{
  /* Return 0 if the processing is still active */
  return LL_PKA_IsActiveFlag_PROCEND( PKA );
}
 8002cf0:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	420c2000 	.word	0x420c2000

08002cfc <HW_PKA_ReadSingleOutput>:

uint32_t HW_PKA_ReadSingleOutput( uint32_t index )
{
  /* Read a single word from PKA RAM */

  return PKA->RAM[index];
 8002cfc:	4b02      	ldr	r3, [pc, #8]	@ (8002d08 <HW_PKA_ReadSingleOutput+0xc>)
 8002cfe:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8002d02:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8002d06:	4770      	bx	lr
 8002d08:	420c2000 	.word	0x420c2000

08002d0c <HW_PKA_ReadResult>:

/*****************************************************************************/

void HW_PKA_ReadResult( uint32_t index, int size, uint32_t* out )
{
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HW_PKA_ReadResult+0x6c>)

  /* Read from PKA RAM */

  for ( ; size > 0; size-- )
 8002d0e:	2900      	cmp	r1, #0
{
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t* pka_ram = (uint32_t*)&PKA->RAM[index];
 8002d12:	ea4f 0580 	mov.w	r5, r0, lsl #2
 8002d16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  for ( ; size > 0; size-- )
 8002d1a:	dd0f      	ble.n	8002d3c <HW_PKA_ReadResult+0x30>
 8002d1c:	1e4b      	subs	r3, r1, #1
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d903      	bls.n	8002d2a <HW_PKA_ReadResult+0x1e>
 8002d22:	4c16      	ldr	r4, [pc, #88]	@ (8002d7c <HW_PKA_ReadResult+0x70>)
 8002d24:	442c      	add	r4, r5
 8002d26:	42a2      	cmp	r2, r4
 8002d28:	d109      	bne.n	8002d3e <HW_PKA_ReadResult+0x32>
 8002d2a:	3a04      	subs	r2, #4
 8002d2c:	e000      	b.n	8002d30 <HW_PKA_ReadResult+0x24>
 8002d2e:	3b01      	subs	r3, #1
  {
    *out++ = *pka_ram++;
 8002d30:	f850 1b04 	ldr.w	r1, [r0], #4
 8002d34:	f842 1f04 	str.w	r1, [r2, #4]!
  for ( ; size > 0; size-- )
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f8      	bne.n	8002d2e <HW_PKA_ReadResult+0x22>
  }
}
 8002d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for ( ; size > 0; size-- )
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f04f 0c00 	mov.w	ip, #0
 8002d44:	084e      	lsrs	r6, r1, #1
 8002d46:	eba2 0e00 	sub.w	lr, r2, r0
    *out++ = *pka_ram++;
 8002d4a:	685d      	ldr	r5, [r3, #4]
 8002d4c:	681f      	ldr	r7, [r3, #0]
 8002d4e:	f10c 0c01 	add.w	ip, ip, #1
 8002d52:	eb0e 0403 	add.w	r4, lr, r3
 8002d56:	4566      	cmp	r6, ip
 8002d58:	f84e 7003 	str.w	r7, [lr, r3]
 8002d5c:	6065      	str	r5, [r4, #4]
  for ( ; size > 0; size-- )
 8002d5e:	f103 0308 	add.w	r3, r3, #8
 8002d62:	d1f2      	bne.n	8002d4a <HW_PKA_ReadResult+0x3e>
 8002d64:	f021 0301 	bic.w	r3, r1, #1
 8002d68:	07c9      	lsls	r1, r1, #31
 8002d6a:	d5e7      	bpl.n	8002d3c <HW_PKA_ReadResult+0x30>
    *out++ = *pka_ram++;
 8002d6c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8002d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	420c2400 	.word	0x420c2400
 8002d7c:	420c2404 	.word	0x420c2404

08002d80 <HW_PKA_Disable>:

void HW_PKA_Disable( void )
{
  HW_PKA_VAR_T* pv = &HW_PKA_var;

  if ( pv->run )
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HW_PKA_Disable+0x30>)
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	b192      	cbz	r2, 8002dac <HW_PKA_Disable+0x2c>
  CLEAR_BIT(PKAx->CR, PKA_CR_EN);
 8002d86:	490b      	ldr	r1, [pc, #44]	@ (8002db4 <HW_PKA_Disable+0x34>)
 8002d88:	680a      	ldr	r2, [r1, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d90:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002d94:	b672      	cpsid	i
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002d96:	4908      	ldr	r1, [pc, #32]	@ (8002db8 <HW_PKA_Disable+0x38>)
 8002d98:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8002d9c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002da0:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da4:	f380 8810 	msr	PRIMASK, r0
    /* Disable the PKA clock */
    LL_AHB2_GRP1_DisableClock( LL_AHB2_GRP1_PERIPH_PKA );

    UTILS_EXIT_CRITICAL_SECTION( );

    pv->run = FALSE;
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
  }
}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	200057c4 	.word	0x200057c4
 8002db4:	420c2000 	.word	0x420c2000
 8002db8:	46020c00 	.word	0x46020c00

08002dbc <RNG_KERNEL_CLK_ON>:
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002dbc:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <RNG_KERNEL_CLK_ON+0x14>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dc4:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	0552      	lsls	r2, r2, #21
 8002dca:	d5f8      	bpl.n	8002dbe <RNG_KERNEL_CLK_ON+0x2>
  LL_RCC_HSI_Enable();
  while(LL_RCC_HSI_IsReady() == 0)
  {
    LL_RCC_HSI_Enable();
  }
}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	46020c00 	.word	0x46020c00

08002dd4 <RNG_KERNEL_CLK_OFF>:

__weak void RNG_KERNEL_CLK_OFF(void)
{

}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <HW_RNG_Disable>:
static void HW_RNG_WaitingClockSynchronization( void );

/*****************************************************************************/

void HW_RNG_Disable( void )
{
 8002dd8:	b500      	push	{lr}
  SYSTEM_DEBUG_SIGNAL_SET(RNG_DISABLE);
 8002dda:	2004      	movs	r0, #4
{
 8002ddc:	b083      	sub	sp, #12
  SYSTEM_DEBUG_SIGNAL_SET(RNG_DISABLE);
 8002dde:	f003 faab 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Disable(RNG_TypeDef *RNGx)
{
  CLEAR_BIT(RNGx->CR, RNG_CR_RNGEN);
 8002de2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e4c <HW_RNG_Disable+0x74>)
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002df0:	b672      	cpsid	i
  HW_RNG_VAR_T* pv = &HW_RNG_var;

  {
    UTILS_ENTER_CRITICAL_SECTION( );

    pv->clock_en &= ~user_mask;
 8002df2:	4a17      	ldr	r2, [pc, #92]	@ (8002e50 <HW_RNG_Disable+0x78>)
 8002df4:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e00:	f381 8810 	msr	PRIMASK, r1
  }

  /* It does not matter much if the temporisation is executed even though
   * in the meantime pv->clock_en has been updated and is not more equal to 0
   */
  if ( pv->clock_en == 0 )
 8002e04:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8002e08:	b94b      	cbnz	r3, 8002e1e <HW_RNG_Disable+0x46>
 */
static void HW_RNG_WaitingClockSynchronization( void )
{
  volatile unsigned int cpt;

  for(cpt = 178 ; cpt!=0 ; --cpt);
 8002e0a:	23b2      	movs	r3, #178	@ 0xb2
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	9b01      	ldr	r3, [sp, #4]
 8002e10:	b12b      	cbz	r3, 8002e1e <HW_RNG_Disable+0x46>
 8002e12:	9b01      	ldr	r3, [sp, #4]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	9b01      	ldr	r3, [sp, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f9      	bne.n	8002e12 <HW_RNG_Disable+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002e22:	b672      	cpsid	i
    if ( pv->clock_en == 0 )
 8002e24:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 8002e28:	b932      	cbnz	r2, 8002e38 <HW_RNG_Disable+0x60>
 8002e2a:	490a      	ldr	r1, [pc, #40]	@ (8002e54 <HW_RNG_Disable+0x7c>)
 8002e2c:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8002e30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e34:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e38:	f383 8810 	msr	PRIMASK, r3
  RNG_KERNEL_CLK_OFF();
 8002e3c:	f7ff ffca 	bl	8002dd4 <RNG_KERNEL_CLK_OFF>
  SYSTEM_DEBUG_SIGNAL_RESET(RNG_DISABLE);
 8002e40:	2004      	movs	r0, #4
}
 8002e42:	b003      	add	sp, #12
 8002e44:	f85d eb04 	ldr.w	lr, [sp], #4
  SYSTEM_DEBUG_SIGNAL_RESET(RNG_DISABLE);
 8002e48:	f003 ba78 	b.w	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
 8002e4c:	420c0800 	.word	0x420c0800
 8002e50:	200057c8 	.word	0x200057c8
 8002e54:	46020c00 	.word	0x46020c00

08002e58 <HW_RNG_EnableClock>:
{
 8002e58:	b530      	push	{r4, r5, lr}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	4604      	mov	r4, r0
  RNG_KERNEL_CLK_ON();
 8002e5e:	f7ff ffad 	bl	8002dbc <RNG_KERNEL_CLK_ON>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e62:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002e66:	b672      	cpsid	i
  if ( pv->clock_en == 0 )
 8002e68:	4a0b      	ldr	r2, [pc, #44]	@ (8002e98 <HW_RNG_EnableClock+0x40>)
 8002e6a:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8002e6e:	b963      	cbnz	r3, 8002e8a <HW_RNG_EnableClock+0x32>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e70:	480a      	ldr	r0, [pc, #40]	@ (8002e9c <HW_RNG_EnableClock+0x44>)
 8002e72:	f8d0 508c 	ldr.w	r5, [r0, #140]	@ 0x8c
 8002e76:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 8002e7a:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e7e:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8002e82:	f400 2080 	and.w	r0, r0, #262144	@ 0x40000
 8002e86:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8002e88:	9801      	ldr	r0, [sp, #4]
  pv->clock_en |= user_mask;
 8002e8a:	4323      	orrs	r3, r4
 8002e8c:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	f381 8810 	msr	PRIMASK, r1
}
 8002e94:	b003      	add	sp, #12
 8002e96:	bd30      	pop	{r4, r5, pc}
 8002e98:	200057c8 	.word	0x200057c8
 8002e9c:	46020c00 	.word	0x46020c00

08002ea0 <HW_RNG_DisableClock>:
{
 8002ea0:	b500      	push	{lr}
 8002ea2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ea4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
    pv->clock_en &= ~user_mask;
 8002eaa:	4a15      	ldr	r2, [pc, #84]	@ (8002f00 <HW_RNG_DisableClock+0x60>)
 8002eac:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8002eb0:	ea23 0000 	bic.w	r0, r3, r0
 8002eb4:	f882 0082 	strb.w	r0, [r2, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	f381 8810 	msr	PRIMASK, r1
  if ( pv->clock_en == 0 )
 8002ebc:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8002ec0:	b94b      	cbnz	r3, 8002ed6 <HW_RNG_DisableClock+0x36>
  for(cpt = 178 ; cpt!=0 ; --cpt);
 8002ec2:	23b2      	movs	r3, #178	@ 0xb2
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	b12b      	cbz	r3, 8002ed6 <HW_RNG_DisableClock+0x36>
 8002eca:	9b01      	ldr	r3, [sp, #4]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f9      	bne.n	8002eca <HW_RNG_DisableClock+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ed6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002eda:	b672      	cpsid	i
    if ( pv->clock_en == 0 )
 8002edc:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 8002ee0:	b932      	cbnz	r2, 8002ef0 <HW_RNG_DisableClock+0x50>
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <HW_RNG_DisableClock+0x64>)
 8002ee4:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8002ee8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002eec:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef0:	f383 8810 	msr	PRIMASK, r3
  RNG_KERNEL_CLK_OFF();
 8002ef4:	f7ff ff6e 	bl	8002dd4 <RNG_KERNEL_CLK_OFF>
}
 8002ef8:	b003      	add	sp, #12
 8002efa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002efe:	bf00      	nop
 8002f00:	200057c8 	.word	0x200057c8
 8002f04:	46020c00 	.word	0x46020c00

08002f08 <HW_RNG_Start>:
void HW_RNG_Start( void )
{
  HW_RNG_VAR_T* pv = &HW_RNG_var;

  /* Reset global variables */
  pv->size = 0;
 8002f08:	2300      	movs	r3, #0
{
 8002f0a:	b570      	push	{r4, r5, r6, lr}
  pv->size = 0;
 8002f0c:	4d5d      	ldr	r5, [pc, #372]	@ (8003084 <HW_RNG_Start+0x17c>)
    SYSTEM_DEBUG_SIGNAL_SET(RNG_ENABLE);
 8002f0e:	2003      	movs	r0, #3
{
 8002f10:	b082      	sub	sp, #8
  pv->size = 0;
 8002f12:	f8a5 3080 	strh.w	r3, [r5, #128]	@ 0x80
  pv->run = FALSE;
  pv->error = HW_OK;
 8002f16:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
  pv->clock_en = 0;
 8002f1a:	f885 3082 	strb.w	r3, [r5, #130]	@ 0x82
    SYSTEM_DEBUG_SIGNAL_SET(RNG_ENABLE);
 8002f1e:	f003 fa0b 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  RNG_KERNEL_CLK_ON();
 8002f22:	f7ff ff4b 	bl	8002dbc <RNG_KERNEL_CLK_ON>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2a:	b672      	cpsid	i
  if ( pv->clock_en == 0 )
 8002f2c:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 8002f30:	b963      	cbnz	r3, 8002f4c <HW_RNG_Start+0x44>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f32:	4a55      	ldr	r2, [pc, #340]	@ (8003088 <HW_RNG_Start+0x180>)
 8002f34:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002f38:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8002f3c:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f40:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8002f44:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8002f48:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8002f4a:	9a00      	ldr	r2, [sp, #0]
  pv->clock_en |= user_mask;
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f885 3082 	strb.w	r3, [r5, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f54:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8002f58:	4c4c      	ldr	r4, [pc, #304]	@ (800308c <HW_RNG_Start+0x184>)
    SYSTEM_DEBUG_SIGNAL_RESET(RNG_ENABLE);
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	f043 0304 	orr.w	r3, r3, #4
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	f003 f9ea 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
    pv->run = TRUE;
 8002f68:	2201      	movs	r2, #1

  /* Fill the random numbers pool by calling the "run" function */
  do
  {
    pv->error = HW_RNG_Run( pv );
 8002f6a:	2300      	movs	r3, #0
    pv->run = TRUE;
 8002f6c:	f885 2081 	strb.w	r2, [r5, #129]	@ 0x81
    pv->error = HW_RNG_Run( pv );
 8002f70:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_CECS(const RNG_TypeDef *RNGx)
{
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	079b      	lsls	r3, r3, #30
 8002f78:	d508      	bpl.n	8002f8c <HW_RNG_Start+0x84>
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_ClearFlag_CEIS(RNG_TypeDef *RNGx)
{
  WRITE_REG(RNGx->SR, ~RNG_SR_CEIS);
 8002f7a:	f06f 0220 	mvn.w	r2, #32
 8002f7e:	f240 1301 	movw	r3, #257	@ 0x101
 8002f82:	6062      	str	r2, [r4, #4]
 8002f84:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
  }
  while ( pv->run && !pv->error );
}
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	0658      	lsls	r0, r3, #25
 8002f90:	d429      	bmi.n	8002fe6 <HW_RNG_Start+0xde>
  else if ( pv->size < CFG_HW_RNG_POOL_SIZE )
 8002f92:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8002f96:	2b1f      	cmp	r3, #31
 8002f98:	d83a      	bhi.n	8003010 <HW_RNG_Start+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f9a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9e:	b672      	cpsid	i
    SYSTEM_DEBUG_SIGNAL_SET(RNG_GEN_RAND_NUM);
 8002fa0:	2005      	movs	r0, #5
 8002fa2:	f003 f9c9 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 8002fa6:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8002faa:	2b1f      	cmp	r3, #31
 8002fac:	d80e      	bhi.n	8002fcc <HW_RNG_Start+0xc4>
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8002fae:	4a37      	ldr	r2, [pc, #220]	@ (800308c <HW_RNG_Start+0x184>)
 8002fb0:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 8002fb4:	6851      	ldr	r1, [r2, #4]
      pv->size++;
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	07c9      	lsls	r1, r1, #31
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	d506      	bpl.n	8002fcc <HW_RNG_Start+0xc4>
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(const RNG_TypeDef *RNGx)
{
  return (uint32_t)(READ_REG(RNGx->DR));
 8002fbe:	6891      	ldr	r1, [r2, #8]
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 8002fc0:	2b20      	cmp	r3, #32
      pv->pool[pv->size] = LL_RNG_ReadRandData32( RNG );
 8002fc2:	f840 1b04 	str.w	r1, [r0], #4
      pv->size++;
 8002fc6:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 8002fca:	d1f3      	bne.n	8002fb4 <HW_RNG_Start+0xac>
    SYSTEM_DEBUG_SIGNAL_RESET(RNG_GEN_RAND_NUM);
 8002fcc:	2005      	movs	r0, #5
 8002fce:	f003 f9b5 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd2:	f386 8810 	msr	PRIMASK, r6
    pv->error = HW_RNG_Run( pv );
 8002fd6:	2200      	movs	r2, #0
  while ( pv->run && !pv->error );
 8002fd8:	f895 3081 	ldrb.w	r3, [r5, #129]	@ 0x81
    pv->error = HW_RNG_Run( pv );
 8002fdc:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
  while ( pv->run && !pv->error );
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1c7      	bne.n	8002f74 <HW_RNG_Start+0x6c>
 8002fe4:	e7d0      	b.n	8002f88 <HW_RNG_Start+0x80>
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 8002fe6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
    pv->error = HW_RNG_Run( pv );
 8002fea:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002fee:	6062      	str	r2, [r4, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 8002ff0:	68a2      	ldr	r2, [r4, #8]
 8002ff2:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
 8002ff6:	68a3      	ldr	r3, [r4, #8]
 8002ff8:	68a3      	ldr	r3, [r4, #8]
 8002ffa:	68a3      	ldr	r3, [r4, #8]
 8002ffc:	68a3      	ldr	r3, [r4, #8]
 8002ffe:	68a3      	ldr	r3, [r4, #8]
 8003000:	68a3      	ldr	r3, [r4, #8]
 8003002:	68a3      	ldr	r3, [r4, #8]
 8003004:	68a3      	ldr	r3, [r4, #8]
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	68a3      	ldr	r3, [r4, #8]
 800300a:	68a3      	ldr	r3, [r4, #8]
}
 800300c:	b002      	add	sp, #8
 800300e:	bd70      	pop	{r4, r5, r6, pc}
  SYSTEM_DEBUG_SIGNAL_SET(RNG_DISABLE);
 8003010:	2004      	movs	r0, #4
 8003012:	f003 f991 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  CLEAR_BIT(RNGx->CR, RNG_CR_RNGEN);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800301e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003022:	b672      	cpsid	i
    pv->clock_en &= ~user_mask;
 8003024:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	f885 3082 	strb.w	r3, [r5, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	f382 8810 	msr	PRIMASK, r2
  if ( pv->clock_en == 0 )
 8003034:	f895 3082 	ldrb.w	r3, [r5, #130]	@ 0x82
 8003038:	b94b      	cbnz	r3, 800304e <HW_RNG_Start+0x146>
  for(cpt = 178 ; cpt!=0 ; --cpt);
 800303a:	23b2      	movs	r3, #178	@ 0xb2
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	9b01      	ldr	r3, [sp, #4]
 8003040:	b12b      	cbz	r3, 800304e <HW_RNG_Start+0x146>
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	3b01      	subs	r3, #1
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	9b01      	ldr	r3, [sp, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f9      	bne.n	8003042 <HW_RNG_Start+0x13a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003052:	b672      	cpsid	i
    if ( pv->clock_en == 0 )
 8003054:	f895 2082 	ldrb.w	r2, [r5, #130]	@ 0x82
 8003058:	b932      	cbnz	r2, 8003068 <HW_RNG_Start+0x160>
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800305a:	490b      	ldr	r1, [pc, #44]	@ (8003088 <HW_RNG_Start+0x180>)
 800305c:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8003060:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003064:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003068:	f383 8810 	msr	PRIMASK, r3
  RNG_KERNEL_CLK_OFF();
 800306c:	f7ff feb2 	bl	8002dd4 <RNG_KERNEL_CLK_OFF>
  SYSTEM_DEBUG_SIGNAL_RESET(RNG_DISABLE);
 8003070:	2004      	movs	r0, #4
 8003072:	f003 f963 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
    pv->run = FALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	f885 3081 	strb.w	r3, [r5, #129]	@ 0x81
    pv->error = HW_RNG_Run( pv );
 800307c:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
  while ( pv->run && !pv->error );
 8003080:	e782      	b.n	8002f88 <HW_RNG_Start+0x80>
 8003082:	bf00      	nop
 8003084:	200057c8 	.word	0x200057c8
 8003088:	46020c00 	.word	0x46020c00
 800308c:	420c0800 	.word	0x420c0800

08003090 <HW_RNG_Get>:
void HW_RNG_Get( uint8_t n, uint32_t* val )
{
  HW_RNG_VAR_T* pv = &HW_RNG_var;
  uint32_t pool_value;

  while ( n-- )
 8003090:	b380      	cbz	r0, 80030f4 <HW_RNG_Get+0x64>
{
 8003092:	b530      	push	{r4, r5, lr}
  {
    UTILS_ENTER_CRITICAL_SECTION( );

    if ( pv->size == 0 )
    {
      pv->error = HW_RNG_UFLOW_ERROR;
 8003094:	f240 1503 	movw	r5, #259	@ 0x103
 8003098:	1e43      	subs	r3, r0, #1
 800309a:	4817      	ldr	r0, [pc, #92]	@ (80030f8 <HW_RNG_Get+0x68>)
 800309c:	b2db      	uxtb	r3, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800309e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80030a2:	b672      	cpsid	i
    if ( pv->size == 0 )
 80030a4:	f890 4080 	ldrb.w	r4, [r0, #128]	@ 0x80
      pool_value = ~pv->pool[n & (CFG_HW_RNG_POOL_SIZE - 1)];
 80030a8:	f003 0e1f 	and.w	lr, r3, #31
    }
    else
    {
      pool_value = pv->pool[--pv->size];
 80030ac:	1e62      	subs	r2, r4, #1
 80030ae:	b2d2      	uxtb	r2, r2
    if ( pv->size == 0 )
 80030b0:	b984      	cbnz	r4, 80030d4 <HW_RNG_Get+0x44>
      pool_value = ~pv->pool[n & (CFG_HW_RNG_POOL_SIZE - 1)];
 80030b2:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
      pv->error = HW_RNG_UFLOW_ERROR;
 80030b6:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
      pool_value = ~pv->pool[n & (CFG_HW_RNG_POOL_SIZE - 1)];
 80030ba:	43d2      	mvns	r2, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	f38c 8810 	msr	PRIMASK, ip
  while ( n-- )
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2bff      	cmp	r3, #255	@ 0xff
    }

    UTILS_EXIT_CRITICAL_SECTION( );

    *val++ = pool_value;
 80030c6:	f841 2b04 	str.w	r2, [r1], #4
  while ( n-- )
 80030ca:	d1e8      	bne.n	800309e <HW_RNG_Get+0xe>
  }

  /* Call the process callback function to fill the pool offline */
  HWCB_RNG_Process( );
}
 80030cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HWCB_RNG_Process( );
 80030d0:	f7fd bb68 	b.w	80007a4 <HWCB_RNG_Process>
      pool_value = pv->pool[--pv->size];
 80030d4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80030d8:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
 80030dc:	f38c 8810 	msr	PRIMASK, ip
  while ( n-- )
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2bff      	cmp	r3, #255	@ 0xff
    *val++ = pool_value;
 80030e6:	f841 4b04 	str.w	r4, [r1], #4
  while ( n-- )
 80030ea:	d1d8      	bne.n	800309e <HW_RNG_Get+0xe>
}
 80030ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HWCB_RNG_Process( );
 80030f0:	f7fd bb58 	b.w	80007a4 <HWCB_RNG_Process>
 80030f4:	f7fd bb56 	b.w	80007a4 <HWCB_RNG_Process>
 80030f8:	200057c8 	.word	0x200057c8

080030fc <HW_RNG_Process>:

/*****************************************************************************/

int HW_RNG_Process( void )
{
 80030fc:	b570      	push	{r4, r5, r6, lr}
  HW_RNG_VAR_T* pv = &HW_RNG_var;
  int status = HW_OK;

  /* Check if the process is not done or if the pool is not full */
  if ( pv->run || (pv->size < CFG_HW_RNG_POOL_SIZE) )
 80030fe:	4c64      	ldr	r4, [pc, #400]	@ (8003290 <HW_RNG_Process+0x194>)
{
 8003100:	b082      	sub	sp, #8
  if ( pv->run || (pv->size < CFG_HW_RNG_POOL_SIZE) )
 8003102:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8003106:	b91b      	cbnz	r3, 8003110 <HW_RNG_Process+0x14>
 8003108:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 800310c:	2b1f      	cmp	r3, #31
 800310e:	d83d      	bhi.n	800318c <HW_RNG_Process+0x90>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003110:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003114:	b672      	cpsid	i
  {
    UTILS_ENTER_CRITICAL_SECTION( );

    /* Check if an error occurred during a previous call to HW_RNG API */
    status = pv->error;
    pv->error = HW_OK;
 8003116:	2200      	movs	r2, #0
    status = pv->error;
 8003118:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
    pv->error = HW_OK;
 800311c:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	f383 8810 	msr	PRIMASK, r3

    UTILS_EXIT_CRITICAL_SECTION( );

    if ( status == HW_OK )
 8003124:	2d00      	cmp	r5, #0
 8003126:	d13a      	bne.n	800319e <HW_RNG_Process+0xa2>
  if ( !pv->run )
 8003128:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800312c:	2b00      	cmp	r3, #0
 800312e:	d03b      	beq.n	80031a8 <HW_RNG_Process+0xac>
  return ((READ_BIT(RNGx->SR, RNG_SR_CECS) == (RNG_SR_CECS)) ? 1UL : 0UL);
 8003130:	4e58      	ldr	r6, [pc, #352]	@ (8003294 <HW_RNG_Process+0x198>)
 8003132:	6873      	ldr	r3, [r6, #4]
 8003134:	079d      	lsls	r5, r3, #30
 8003136:	d42d      	bmi.n	8003194 <HW_RNG_Process+0x98>
  return ((READ_BIT(RNGx->SR, RNG_SR_SEIS) == (RNG_SR_SEIS)) ? 1UL : 0UL);
 8003138:	6873      	ldr	r3, [r6, #4]
 800313a:	0658      	lsls	r0, r3, #25
 800313c:	d45f      	bmi.n	80031fe <HW_RNG_Process+0x102>
  else if ( pv->size < CFG_HW_RNG_POOL_SIZE )
 800313e:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8003142:	2b1f      	cmp	r3, #31
 8003144:	d86d      	bhi.n	8003222 <HW_RNG_Process+0x126>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003146:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800314a:	b672      	cpsid	i
    SYSTEM_DEBUG_SIGNAL_SET(RNG_GEN_RAND_NUM);
 800314c:	2005      	movs	r0, #5
 800314e:	f003 f8f3 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 8003152:	f894 2080 	ldrb.w	r2, [r4, #128]	@ 0x80
 8003156:	2a1f      	cmp	r2, #31
 8003158:	d80f      	bhi.n	800317a <HW_RNG_Process+0x7e>
 800315a:	1c53      	adds	r3, r2, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  return ((READ_BIT(RNGx->SR, RNG_SR_DRDY) == (RNG_SR_DRDY)) ? 1UL : 0UL);
 8003162:	6871      	ldr	r1, [r6, #4]
 8003164:	1c58      	adds	r0, r3, #1
 8003166:	07c9      	lsls	r1, r1, #31
 8003168:	d507      	bpl.n	800317a <HW_RNG_Process+0x7e>
  return (uint32_t)(READ_REG(RNGx->DR));
 800316a:	68b1      	ldr	r1, [r6, #8]
      pv->pool[pv->size] = LL_RNG_ReadRandData32( RNG );
 800316c:	f842 1b04 	str.w	r1, [r2], #4
      pv->size++;
 8003170:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    while ( (pv->size < CFG_HW_RNG_POOL_SIZE) &&
 8003174:	b2c3      	uxtb	r3, r0
 8003176:	2b21      	cmp	r3, #33	@ 0x21
 8003178:	d1f3      	bne.n	8003162 <HW_RNG_Process+0x66>
    SYSTEM_DEBUG_SIGNAL_RESET(RNG_GEN_RAND_NUM);
 800317a:	2005      	movs	r0, #5
 800317c:	f003 f8de 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	f385 8810 	msr	PRIMASK, r5
    {
      /* Call the "run" function that generates random data */
      status = HW_RNG_Run( pv );

      /* If the process is not done, return "busy" status */
      if ( (status == HW_OK) && pv->run )
 8003184:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8003188:	2b00      	cmp	r3, #0
 800318a:	d136      	bne.n	80031fa <HW_RNG_Process+0xfe>
      status = HW_RNG_Run( pv );
 800318c:	2500      	movs	r5, #0
    HWCB_RNG_Process( );
  }

  /* Return status */
  return status;
}
 800318e:	4628      	mov	r0, r5
 8003190:	b002      	add	sp, #8
 8003192:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(RNGx->SR, ~RNG_SR_CEIS);
 8003194:	f06f 0320 	mvn.w	r3, #32
    error = HW_RNG_CLOCK_ERROR;
 8003198:	f240 1501 	movw	r5, #257	@ 0x101
 800319c:	6073      	str	r3, [r6, #4]
    HWCB_RNG_Process( );
 800319e:	f7fd fb01 	bl	80007a4 <HWCB_RNG_Process>
}
 80031a2:	4628      	mov	r0, r5
 80031a4:	b002      	add	sp, #8
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
    SYSTEM_DEBUG_SIGNAL_SET(RNG_ENABLE);
 80031a8:	2003      	movs	r0, #3
 80031aa:	f003 f8c5 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  RNG_KERNEL_CLK_ON();
 80031ae:	f7ff fe05 	bl	8002dbc <RNG_KERNEL_CLK_ON>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031b2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80031b6:	b672      	cpsid	i
  if ( pv->clock_en == 0 )
 80031b8:	f894 3082 	ldrb.w	r3, [r4, #130]	@ 0x82
 80031bc:	b963      	cbnz	r3, 80031d8 <HW_RNG_Process+0xdc>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80031be:	4936      	ldr	r1, [pc, #216]	@ (8003298 <HW_RNG_Process+0x19c>)
 80031c0:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 80031c4:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80031c8:	f8c1 008c 	str.w	r0, [r1, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80031cc:	f8d1 108c 	ldr.w	r1, [r1, #140]	@ 0x8c
 80031d0:	f401 2180 	and.w	r1, r1, #262144	@ 0x40000
 80031d4:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
 80031d6:	9900      	ldr	r1, [sp, #0]
  pv->clock_en |= user_mask;
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	f884 3082 	strb.w	r3, [r4, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e0:	f382 8810 	msr	PRIMASK, r2
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80031e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <HW_RNG_Process+0x198>)
    SYSTEM_DEBUG_SIGNAL_RESET(RNG_ENABLE);
 80031e6:	2003      	movs	r0, #3
 80031e8:	6813      	ldr	r3, [r2, #0]
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	f003 f8a4 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
    pv->run = TRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
        status = HW_BUSY;
 80031fa:	2501      	movs	r5, #1
 80031fc:	e7cf      	b.n	800319e <HW_RNG_Process+0xa2>
  WRITE_REG(RNGx->SR, ~RNG_SR_SEIS);
 80031fe:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8003202:	6073      	str	r3, [r6, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 8003204:	68b3      	ldr	r3, [r6, #8]
 8003206:	f44f 7581 	mov.w	r5, #258	@ 0x102
 800320a:	68b3      	ldr	r3, [r6, #8]
 800320c:	68b3      	ldr	r3, [r6, #8]
 800320e:	68b3      	ldr	r3, [r6, #8]
 8003210:	68b3      	ldr	r3, [r6, #8]
 8003212:	68b3      	ldr	r3, [r6, #8]
 8003214:	68b3      	ldr	r3, [r6, #8]
 8003216:	68b3      	ldr	r3, [r6, #8]
 8003218:	68b3      	ldr	r3, [r6, #8]
 800321a:	68b3      	ldr	r3, [r6, #8]
 800321c:	68b3      	ldr	r3, [r6, #8]
 800321e:	68b3      	ldr	r3, [r6, #8]
    for ( i = 12; i > 0; i-- )
 8003220:	e7bd      	b.n	800319e <HW_RNG_Process+0xa2>
  SYSTEM_DEBUG_SIGNAL_SET(RNG_DISABLE);
 8003222:	2004      	movs	r0, #4
 8003224:	f003 f888 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  CLEAR_BIT(RNGx->CR, RNG_CR_RNGEN);
 8003228:	6833      	ldr	r3, [r6, #0]
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	6033      	str	r3, [r6, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003230:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003234:	b672      	cpsid	i
    pv->clock_en &= ~user_mask;
 8003236:	f894 3082 	ldrb.w	r3, [r4, #130]	@ 0x82
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	f884 3082 	strb.w	r3, [r4, #130]	@ 0x82
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	f382 8810 	msr	PRIMASK, r2
  if ( pv->clock_en == 0 )
 8003246:	f894 3082 	ldrb.w	r3, [r4, #130]	@ 0x82
 800324a:	b94b      	cbnz	r3, 8003260 <HW_RNG_Process+0x164>
  for(cpt = 178 ; cpt!=0 ; --cpt);
 800324c:	23b2      	movs	r3, #178	@ 0xb2
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	9b01      	ldr	r3, [sp, #4]
 8003252:	b12b      	cbz	r3, 8003260 <HW_RNG_Process+0x164>
 8003254:	9b01      	ldr	r3, [sp, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	9b01      	ldr	r3, [sp, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f9      	bne.n	8003254 <HW_RNG_Process+0x158>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003260:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003264:	b672      	cpsid	i
    if ( pv->clock_en == 0 )
 8003266:	f894 2082 	ldrb.w	r2, [r4, #130]	@ 0x82
 800326a:	b932      	cbnz	r2, 800327a <HW_RNG_Process+0x17e>
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800326c:	490a      	ldr	r1, [pc, #40]	@ (8003298 <HW_RNG_Process+0x19c>)
 800326e:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
 8003272:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003276:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	f383 8810 	msr	PRIMASK, r3
  RNG_KERNEL_CLK_OFF();
 800327e:	f7ff fda9 	bl	8002dd4 <RNG_KERNEL_CLK_OFF>
  SYSTEM_DEBUG_SIGNAL_RESET(RNG_DISABLE);
 8003282:	2004      	movs	r0, #4
 8003284:	f003 f85a 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
    pv->run = FALSE;
 8003288:	2300      	movs	r3, #0
 800328a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
      if ( (status == HW_OK) && pv->run )
 800328e:	e77d      	b.n	800318c <HW_RNG_Process+0x90>
 8003290:	200057c8 	.word	0x200057c8
 8003294:	420c0800 	.word	0x420c0800
 8003298:	46020c00 	.word	0x46020c00

0800329c <HW_PKA_P256_StartRangeCheck>:
};

/*****************************************************************************/

void HW_PKA_P256_StartRangeCheck( const uint32_t* coord )
{
 800329c:	b510      	push	{r4, lr}
 800329e:	4604      	mov	r4, r0
  /* Set the muber of bits of P */
  HW_PKA_WriteSingleInput( PKA_COMPARISON_IN_OP_NB_BITS, 256 );
 80032a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032a4:	2002      	movs	r0, #2
 80032a6:	f7ff fcc9 	bl	8002c3c <HW_PKA_WriteSingleInput>

  /* Set the coordinate */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP1, 8, coord );
 80032aa:	4622      	mov	r2, r4
 80032ac:	2108      	movs	r1, #8
 80032ae:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 80032b2:	f7ff fccb 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_COMPARISON_IN_OP2, 8, HW_PKA_P256_gfp );
 80032b6:	f240 201a 	movw	r0, #538	@ 0x21a
 80032ba:	2108      	movs	r1, #8
 80032bc:	4a03      	ldr	r2, [pc, #12]	@ (80032cc <HW_PKA_P256_StartRangeCheck+0x30>)
 80032be:	f7ff fcc5 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Start PKA hardware */
  HW_PKA_Start( LL_PKA_MODE_COMPARISON );
}
 80032c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HW_PKA_Start( LL_PKA_MODE_COMPARISON );
 80032c6:	200c      	movs	r0, #12
 80032c8:	f7ff bcfe 	b.w	8002cc8 <HW_PKA_Start>
 80032cc:	0802d76c 	.word	0x0802d76c

080032d0 <HW_PKA_P256_IsRangeCheckOk>:

/*****************************************************************************/

uint32_t HW_PKA_P256_IsRangeCheckOk( void )
{
 80032d0:	b508      	push	{r3, lr}
  return (HW_PKA_ReadSingleOutput( PKA_COMPARISON_OUT_RESULT ) == 0x916AUL);
 80032d2:	f240 209e 	movw	r0, #670	@ 0x29e
 80032d6:	f7ff fd11 	bl	8002cfc <HW_PKA_ReadSingleOutput>
 80032da:	f249 136a 	movw	r3, #37226	@ 0x916a
}
 80032de:	1ac0      	subs	r0, r0, r3
 80032e0:	fab0 f080 	clz	r0, r0
 80032e4:	0940      	lsrs	r0, r0, #5
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <HW_PKA_P256_StartPointCheck>:

/*****************************************************************************/

void HW_PKA_P256_StartPointCheck( const uint32_t* x,
                                  const uint32_t* y )
{
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4605      	mov	r5, r0
 80032ec:	460c      	mov	r4, r1
  /* Set the muber of bits of p */
  HW_PKA_WriteSingleInput( PKA_POINT_CHECK_IN_MOD_NB_BITS, 256 );
 80032ee:	2002      	movs	r0, #2
 80032f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032f4:	f7ff fca2 	bl	8002c3c <HW_PKA_WriteSingleInput>

  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_POINT_CHECK_IN_A_COEFF_SIGN, 1 );
 80032f8:	2101      	movs	r1, #1
 80032fa:	2004      	movs	r0, #4
 80032fc:	f7ff fc9e 	bl	8002c3c <HW_PKA_WriteSingleInput>

  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_A_COEFF, 8, HW_PKA_P256_a );
 8003300:	2108      	movs	r1, #8
 8003302:	2006      	movs	r0, #6
 8003304:	4a10      	ldr	r2, [pc, #64]	@ (8003348 <HW_PKA_P256_StartPointCheck+0x60>)
 8003306:	f7ff fca1 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the coefficient b */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_B_COEFF, 8, HW_PKA_P256_b );
 800330a:	2108      	movs	r1, #8
 800330c:	2048      	movs	r0, #72	@ 0x48
 800330e:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <HW_PKA_P256_StartPointCheck+0x64>)
 8003310:	f7ff fc9c 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MOD_GF, 8, HW_PKA_P256_gfp );
 8003314:	2108      	movs	r1, #8
 8003316:	201c      	movs	r0, #28
 8003318:	4a0d      	ldr	r2, [pc, #52]	@ (8003350 <HW_PKA_P256_StartPointCheck+0x68>)
 800331a:	f7ff fc97 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the point coordinate x */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_X, 8, x );
 800331e:	462a      	mov	r2, r5
 8003320:	2108      	movs	r1, #8
 8003322:	205e      	movs	r0, #94	@ 0x5e
 8003324:	f7ff fc92 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the point coordinate y */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_INITIAL_POINT_Y, 8, y );
 8003328:	4622      	mov	r2, r4
 800332a:	2108      	movs	r1, #8
 800332c:	2074      	movs	r0, #116	@ 0x74
 800332e:	f7ff fc8d 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the Montgomery parameter */
  HW_PKA_WriteOperand( PKA_POINT_CHECK_IN_MONTGOMERY_PARAM,
 8003332:	2032      	movs	r0, #50	@ 0x32
 8003334:	2108      	movs	r1, #8
 8003336:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <HW_PKA_P256_StartPointCheck+0x6c>)
 8003338:	f7ff fc88 	bl	8002c4c <HW_PKA_WriteOperand>
                       8, HW_PKA_P256_r2 );

  /* Start PKA hardware */
  HW_PKA_Start( LL_PKA_MODE_POINT_CHECK );
}
 800333c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HW_PKA_Start( LL_PKA_MODE_POINT_CHECK );
 8003340:	2028      	movs	r0, #40	@ 0x28
 8003342:	f7ff bcc1 	b.w	8002cc8 <HW_PKA_Start>
 8003346:	bf00      	nop
 8003348:	0802d6ec 	.word	0x0802d6ec
 800334c:	0802d6cc 	.word	0x0802d6cc
 8003350:	0802d76c 	.word	0x0802d76c
 8003354:	0802d74c 	.word	0x0802d74c

08003358 <HW_PKA_P256_IsPointCheckOk>:

/*****************************************************************************/

uint32_t HW_PKA_P256_IsPointCheckOk( void )
{
 8003358:	b508      	push	{r3, lr}
  return (HW_PKA_ReadSingleOutput( PKA_POINT_CHECK_OUT_ERROR ) == 0xD60DUL);
 800335a:	20a0      	movs	r0, #160	@ 0xa0
 800335c:	f7ff fcce 	bl	8002cfc <HW_PKA_ReadSingleOutput>
 8003360:	f24d 630d 	movw	r3, #54797	@ 0xd60d
}
 8003364:	1ac0      	subs	r0, r0, r3
 8003366:	fab0 f080 	clz	r0, r0
 800336a:	0940      	lsrs	r0, r0, #5
 800336c:	bd08      	pop	{r3, pc}
 800336e:	bf00      	nop

08003370 <HW_PKA_P256_StartEccScalarMul>:
/*****************************************************************************/

void HW_PKA_P256_StartEccScalarMul( const uint32_t* k,
                                    const uint32_t* p_x,
                                    const uint32_t* p_y )
{
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	4606      	mov	r6, r0
 8003374:	460d      	mov	r5, r1
 8003376:	4614      	mov	r4, r2
  /* Set the scalar multiplier k length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS, 256 );
 8003378:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800337c:	2000      	movs	r0, #0
 800337e:	f7ff fc5d 	bl	8002c3c <HW_PKA_WriteSingleInput>

  /* Set the modulus length */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS, 256 );
 8003382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003386:	2002      	movs	r0, #2
 8003388:	f7ff fc58 	bl	8002c3c <HW_PKA_WriteSingleInput>

  /* Set the coefficient a sign */
  HW_PKA_WriteSingleInput( PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN, 1 );
 800338c:	2101      	movs	r1, #1
 800338e:	2004      	movs	r0, #4
 8003390:	f7ff fc54 	bl	8002c3c <HW_PKA_WriteSingleInput>

  /* Set the coefficient |a| */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_A_COEFF, 8, HW_PKA_P256_a );
 8003394:	2108      	movs	r1, #8
 8003396:	2006      	movs	r0, #6
 8003398:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <HW_PKA_P256_StartEccScalarMul+0x8c>)
 800339a:	f7ff fc57 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the coefficient b */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_B_COEFF, 8, HW_PKA_P256_b );
 800339e:	2108      	movs	r1, #8
 80033a0:	2048      	movs	r0, #72	@ 0x48
 80033a2:	4a17      	ldr	r2, [pc, #92]	@ (8003400 <HW_PKA_P256_StartEccScalarMul+0x90>)
 80033a4:	f7ff fc52 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the modulus value p */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_MOD_GF, 8, HW_PKA_P256_gfp );
 80033a8:	2108      	movs	r1, #8
 80033aa:	f240 3022 	movw	r0, #802	@ 0x322
 80033ae:	4a15      	ldr	r2, [pc, #84]	@ (8003404 <HW_PKA_P256_StartEccScalarMul+0x94>)
 80033b0:	f7ff fc4c 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the scalar multiplier k */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_K, 8, k );
 80033b4:	4632      	mov	r2, r6
 80033b6:	2108      	movs	r1, #8
 80033b8:	f44f 706a 	mov.w	r0, #936	@ 0x3a8
 80033bc:	f7ff fc46 	bl	8002c4c <HW_PKA_WriteOperand>

  /* Set the point P coordinate x */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_X,
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <HW_PKA_P256_StartEccScalarMul+0x98>)
 80033c2:	2108      	movs	r1, #8
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	bf14      	ite	ne
 80033c8:	462a      	movne	r2, r5
 80033ca:	461a      	moveq	r2, r3
 80033cc:	205e      	movs	r0, #94	@ 0x5e
 80033ce:	f7ff fc3d 	bl	8002c4c <HW_PKA_WriteOperand>
                       8, p_x ? p_x : HW_PKA_P256_p_x );

  /* Set the point P coordinate y */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_Y,
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <HW_PKA_P256_StartEccScalarMul+0x9c>)
 80033d4:	2108      	movs	r1, #8
 80033d6:	2c00      	cmp	r4, #0
 80033d8:	bf14      	ite	ne
 80033da:	4622      	movne	r2, r4
 80033dc:	461a      	moveq	r2, r3
 80033de:	201c      	movs	r0, #28
 80033e0:	f7ff fc34 	bl	8002c4c <HW_PKA_WriteOperand>
                       8, p_y ? p_y : HW_PKA_P256_p_y );

  /* Set the prime order n */
  HW_PKA_WriteOperand( PKA_ECC_SCALAR_MUL_IN_N_PRIME_ORDER,
 80033e4:	f240 20e2 	movw	r0, #738	@ 0x2e2
 80033e8:	2108      	movs	r1, #8
 80033ea:	4a09      	ldr	r2, [pc, #36]	@ (8003410 <HW_PKA_P256_StartEccScalarMul+0xa0>)
 80033ec:	f7ff fc2e 	bl	8002c4c <HW_PKA_WriteOperand>
                       8, HW_PKA_P256_n );

  /* Start PKA hardware */
  HW_PKA_Start( LL_PKA_MODE_ECC_MUL );
}
 80033f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HW_PKA_Start( LL_PKA_MODE_ECC_MUL );
 80033f4:	2020      	movs	r0, #32
 80033f6:	f7ff bc67 	b.w	8002cc8 <HW_PKA_Start>
 80033fa:	bf00      	nop
 80033fc:	0802d6ec 	.word	0x0802d6ec
 8003400:	0802d6cc 	.word	0x0802d6cc
 8003404:	0802d76c 	.word	0x0802d76c
 8003408:	0802d72c 	.word	0x0802d72c
 800340c:	0802d70c 	.word	0x0802d70c
 8003410:	0802d6ac 	.word	0x0802d6ac

08003414 <HW_PKA_P256_ReadEccScalarMul>:

/*****************************************************************************/

void HW_PKA_P256_ReadEccScalarMul( uint32_t* p_x,
                                   uint32_t* p_y )
{
 8003414:	b510      	push	{r4, lr}
 8003416:	460c      	mov	r4, r1
  /* Read the output point X */
  if ( p_x )
 8003418:	b120      	cbz	r0, 8003424 <HW_PKA_P256_ReadEccScalarMul+0x10>
 800341a:	4602      	mov	r2, r0
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_X, 8, p_x );
 800341c:	2108      	movs	r1, #8
 800341e:	205e      	movs	r0, #94	@ 0x5e
 8003420:	f7ff fc74 	bl	8002d0c <HW_PKA_ReadResult>
  }

  /* Read the output point Y as the second half of the result */
  if ( p_y )
 8003424:	b134      	cbz	r4, 8003434 <HW_PKA_P256_ReadEccScalarMul+0x20>
  {
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, p_y );
 8003426:	4622      	mov	r2, r4
  }
}
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HW_PKA_ReadResult( PKA_ECC_SCALAR_MUL_OUT_RESULT_Y, 8, p_y );
 800342c:	2108      	movs	r1, #8
 800342e:	2074      	movs	r0, #116	@ 0x74
 8003430:	f7ff bc6c 	b.w	8002d0c <HW_PKA_ReadResult>
}
 8003434:	bd10      	pop	{r4, pc}
 8003436:	bf00      	nop

08003438 <is_boot_from_standby>:
#if (CFG_DEBUGGER_LEVEL <= 1)
  LL_DBGMCU_DisableDBGStopMode();
  LL_DBGMCU_DisableDBGStandbyMode();
#endif /* CFG_DEBUGGER_LEVEL */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	4b14      	ldr	r3, [pc, #80]	@ (800348c <is_boot_from_standby+0x54>)
  SET_BIT(PWR->CR1, PWR_CR1_ULPMEN);
 800343a:	4a15      	ldr	r2, [pc, #84]	@ (8003490 <is_boot_from_standby+0x58>)
 800343c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
{
 8003440:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	f041 0104 	orr.w	r1, r1, #4
 8003446:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
 800344a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94

  LL_PWR_EnableUltraLowPowerMode();
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800344e:	4811      	ldr	r0, [pc, #68]	@ (8003494 <is_boot_from_standby+0x5c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	f001 0104 	and.w	r1, r1, #4
 8003454:	9101      	str	r1, [sp, #4]
 8003456:	9901      	ldr	r1, [sp, #4]
 8003458:	6811      	ldr	r1, [r2, #0]
 800345a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800345e:	6011      	str	r1, [r2, #0]
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8003460:	6801      	ldr	r1, [r0, #0]
 8003462:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8003466:	6001      	str	r1, [r0, #0]
  * @rmtoll SR            SBF             LL_PWR_IsActiveFlag_SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_SB(void)
{
  return ((READ_BIT(PWR->SR, PWR_SR_SBF) == (PWR_SR_SBF)) ? 1UL : 0UL);
 8003468:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 800346a:	f010 0004 	ands.w	r0, r0, #4
 800346e:	d004      	beq.n	800347a <is_boot_from_standby+0x42>

  /* Ensure this is a return from Standby, and not a reset */
  if( (LL_PWR_IsActiveFlag_SB() == 1UL ) &&
      (READ_REG(RCC->CSR) == 0U)
 8003470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if( (LL_PWR_IsActiveFlag_SB() == 1UL ) &&
 8003474:	b92b      	cbnz	r3, 8003482 <is_boot_from_standby+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003476:	b672      	cpsid	i
    )
  {
    /* When exit from standby, disable IRQ so that restore and PWR_ExitOffMode are in critical section */
    __disable_irq( );

    boot_after_standby = 1;
 8003478:	2001      	movs	r0, #1
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <is_boot_from_standby+0x60>)
 800347c:	6018      	str	r0, [r3, #0]
  {
    boot_after_standby = 0;
  }

  return boot_after_standby;
}
 800347e:	b002      	add	sp, #8
 8003480:	4770      	bx	lr
 8003482:	2000      	movs	r0, #0
    boot_after_standby = 1;
 8003484:	4b04      	ldr	r3, [pc, #16]	@ (8003498 <is_boot_from_standby+0x60>)
 8003486:	6018      	str	r0, [r3, #0]
}
 8003488:	b002      	add	sp, #8
 800348a:	4770      	bx	lr
 800348c:	46020c00 	.word	0x46020c00
 8003490:	46020800 	.word	0x46020800
 8003494:	40022000 	.word	0x40022000
 8003498:	20005850 	.word	0x20005850

0800349c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(const RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800349c:	4a02      	ldr	r2, [pc, #8]	@ (80034a8 <TIMER_IF_SetTimerContext+0xc>)
}

uint32_t TIMER_IF_SetTimerContext(void)
{
  /* Store time context */
  RtcTimerContext = GetTimerTicks();
 800349e:	4b03      	ldr	r3, [pc, #12]	@ (80034ac <TIMER_IF_SetTimerContext+0x10>)
 80034a0:	6890      	ldr	r0, [r2, #8]
{
  /* USER CODE BEGIN GetTimerTicks_1 */

  /* USER CODE END GetTimerTicks_1 */

  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80034a2:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80034a4:	6018      	str	r0, [r3, #0]
}
 80034a6:	4770      	bx	lr
 80034a8:	46007800 	.word	0x46007800
 80034ac:	20005858 	.word	0x20005858

080034b0 <TIMER_IF_GetTimerContext>:
  return RtcTimerContext;
 80034b0:	4b01      	ldr	r3, [pc, #4]	@ (80034b8 <TIMER_IF_GetTimerContext+0x8>)
}
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20005858 	.word	0x20005858

080034bc <TIMER_IF_GetTimerElapsedTime>:
 80034bc:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <TIMER_IF_GetTimerElapsedTime+0x10>)
  return ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80034be:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <TIMER_IF_GetTimerElapsedTime+0x14>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	6810      	ldr	r0, [r2, #0]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80034c4:	43db      	mvns	r3, r3
}
 80034c6:	1a18      	subs	r0, r3, r0
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	46007800 	.word	0x46007800
 80034d0:	20005858 	.word	0x20005858

080034d4 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <TIMER_IF_GetTimerValue+0x10>)
 80034d6:	7818      	ldrb	r0, [r3, #0]
 80034d8:	b110      	cbz	r0, 80034e0 <TIMER_IF_GetTimerValue+0xc>
 80034da:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <TIMER_IF_GetTimerValue+0x14>)
 80034dc:	6898      	ldr	r0, [r3, #8]
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80034de:	43c0      	mvns	r0, r0
}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	2000585c 	.word	0x2000585c
 80034e8:	46007800 	.word	0x46007800

080034ec <TIMER_IF_GetMinimumTimeout>:
}
 80034ec:	2003      	movs	r0, #3
 80034ee:	4770      	bx	lr

080034f0 <TIMER_IF_Convert_ms2Tick>:
{
 80034f0:	4601      	mov	r1, r0
 80034f2:	b508      	push	{r3, lr}
  return ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80034f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034f8:	2300      	movs	r3, #0
 80034fa:	0280      	lsls	r0, r0, #10
 80034fc:	0d89      	lsrs	r1, r1, #22
 80034fe:	f7fc fe9d 	bl	800023c <__aeabi_uldivmod>
}
 8003502:	bd08      	pop	{r3, pc}

08003504 <TIMER_IF_Convert_Tick2ms>:
  return ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8003504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003508:	fba0 0303 	umull	r0, r3, r0, r3
 800350c:	0a80      	lsrs	r0, r0, #10
}
 800350e:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8003512:	4770      	bx	lr

08003514 <TIMER_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003514:	2201      	movs	r2, #1
{
 8003516:	b508      	push	{r3, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003518:	4b04      	ldr	r3, [pc, #16]	@ (800352c <TIMER_IF_StopTimer+0x18>)
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800351a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800351e:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003520:	4803      	ldr	r0, [pc, #12]	@ (8003530 <TIMER_IF_StopTimer+0x1c>)
 8003522:	f006 ff1b 	bl	800a35c <HAL_RTC_DeactivateAlarm>
}
 8003526:	2000      	movs	r0, #0
 8003528:	bd08      	pop	{r3, pc}
 800352a:	bf00      	nop
 800352c:	46007800 	.word	0x46007800
 8003530:	20001790 	.word	0x20001790

08003534 <TIMER_IF_StartTimer>:
{
 8003534:	b530      	push	{r4, r5, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003536:	2501      	movs	r5, #1
{
 8003538:	b08d      	sub	sp, #52	@ 0x34
  RTC_AlarmTypeDef sAlarm = {0};
 800353a:	2230      	movs	r2, #48	@ 0x30
{
 800353c:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800353e:	2100      	movs	r1, #0
 8003540:	4668      	mov	r0, sp
 8003542:	f028 f9d9 	bl	802b8f8 <memset>
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003546:	4b11      	ldr	r3, [pc, #68]	@ (800358c <TIMER_IF_StartTimer+0x58>)
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003548:	f44f 7180 	mov.w	r1, #256	@ 0x100
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800354c:	65dd      	str	r5, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800354e:	4810      	ldr	r0, [pc, #64]	@ (8003590 <TIMER_IF_StartTimer+0x5c>)
 8003550:	f006 ff04 	bl	800a35c <HAL_RTC_DeactivateAlarm>
  sAlarm.BinaryAutoClr        = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8003554:	2300      	movs	r3, #0
  timeout += RtcTimerContext;
 8003556:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <TIMER_IF_StartTimer+0x60>)
  sAlarm.BinaryAutoClr        = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8003558:	9307      	str	r3, [sp, #28]
  timeout += RtcTimerContext;
 800355a:	6810      	ldr	r0, [r2, #0]
  sAlarm.AlarmMask            = RTC_ALARMMASK_NONE;
 800355c:	9305      	str	r3, [sp, #20]
  timeout += RtcTimerContext;
 800355e:	4404      	add	r4, r0
  sAlarm.AlarmMask            = RTC_ALARMMASK_NONE;
 8003560:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8003564:	43e4      	mvns	r4, r4
  sAlarm.Alarm                = RTC_ALARM_A;
 8003566:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sAlarm.AlarmMask            = RTC_ALARMMASK_NONE;
 800356a:	9006      	str	r0, [sp, #24]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800356c:	462a      	mov	r2, r5
 800356e:	4669      	mov	r1, sp
 8003570:	4807      	ldr	r0, [pc, #28]	@ (8003590 <TIMER_IF_StartTimer+0x5c>)
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8003572:	9401      	str	r4, [sp, #4]
  sAlarm.Alarm                = RTC_ALARM_A;
 8003574:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003576:	f006 fe0b 	bl	800a190 <HAL_RTC_SetAlarm_IT>
 800357a:	b910      	cbnz	r0, 8003582 <TIMER_IF_StartTimer+0x4e>
}
 800357c:	2000      	movs	r0, #0
 800357e:	b00d      	add	sp, #52	@ 0x34
 8003580:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003582:	f7fd facb 	bl	8000b1c <Error_Handler>
}
 8003586:	2000      	movs	r0, #0
 8003588:	b00d      	add	sp, #52	@ 0x34
 800358a:	bd30      	pop	{r4, r5, pc}
 800358c:	46007800 	.word	0x46007800
 8003590:	20001790 	.word	0x20001790
 8003594:	20005858 	.word	0x20005858

08003598 <TIMER_IF_Init>:
{
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (RTC_Initialized == false)
 800359a:	4c11      	ldr	r4, [pc, #68]	@ (80035e0 <TIMER_IF_Init+0x48>)
 800359c:	7825      	ldrb	r5, [r4, #0]
 800359e:	b10d      	cbz	r5, 80035a4 <TIMER_IF_Init+0xc>
}
 80035a0:	2000      	movs	r0, #0
 80035a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80035a4:	2601      	movs	r6, #1
 80035a6:	4f0f      	ldr	r7, [pc, #60]	@ (80035e4 <TIMER_IF_Init+0x4c>)
    MX_RTC_Init();
 80035a8:	f7fd f9e2 	bl	8000970 <MX_RTC_Init>
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80035ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80035b0:	65fe      	str	r6, [r7, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80035b2:	480d      	ldr	r0, [pc, #52]	@ (80035e8 <TIMER_IF_Init+0x50>)
 80035b4:	f006 fed2 	bl	800a35c <HAL_RTC_DeactivateAlarm>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80035b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035bc:	480a      	ldr	r0, [pc, #40]	@ (80035e8 <TIMER_IF_Init+0x50>)
 80035be:	f006 fecd 	bl	800a35c <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80035c2:	4809      	ldr	r0, [pc, #36]	@ (80035e8 <TIMER_IF_Init+0x50>)
 80035c4:	f006 ffda 	bl	800a57c <HAL_RTCEx_EnableBypassShadow>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80035c8:	462a      	mov	r2, r5
 80035ca:	2102      	movs	r1, #2
 80035cc:	4806      	ldr	r0, [pc, #24]	@ (80035e8 <TIMER_IF_Init+0x50>)
 80035ce:	f007 f80b 	bl	800a5e8 <HAL_RTCEx_BKUPWrite>
 80035d2:	68bb      	ldr	r3, [r7, #8]
  RtcTimerContext = GetTimerTicks();
 80035d4:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <TIMER_IF_Init+0x54>)
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80035d6:	43db      	mvns	r3, r3
}
 80035d8:	2000      	movs	r0, #0
    RTC_Initialized = true;
 80035da:	7026      	strb	r6, [r4, #0]
  RtcTimerContext = GetTimerTicks();
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	2000585c 	.word	0x2000585c
 80035e4:	46007800 	.word	0x46007800
 80035e8:	20001790 	.word	0x20001790
 80035ec:	20005858 	.word	0x20005858

080035f0 <HAL_RTC_AlarmAEventCallback>:
  UTIL_TIMER_IRQ_Handler();
 80035f0:	f008 bfcc 	b.w	800c58c <UTIL_TIMER_IRQ_Handler>

080035f4 <UsartIf_TxCpltCallback>:
  /* USER CODE BEGIN UsartIf_TxCpltCallback 1 */

  /* USER CODE END UsartIf_TxCpltCallback 1 */

  /* ADV Trace callback */
  TxCpltCallback(NULL);
 80035f4:	4b01      	ldr	r3, [pc, #4]	@ (80035fc <UsartIf_TxCpltCallback+0x8>)
 80035f6:	2000      	movs	r0, #0
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4718      	bx	r3
 80035fc:	20005864 	.word	0x20005864

08003600 <UART_Init>:
{
 8003600:	b510      	push	{r4, lr}
 8003602:	4604      	mov	r4, r0
  MX_USART1_UART_Init();
 8003604:	f7fd fa04 	bl	8000a10 <MX_USART1_UART_Init>
  TxCpltCallback = cb;
 8003608:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <UART_Init+0x18>)
  huart1.TxCpltCallback = UsartIf_TxCpltCallback;
 800360a:	4a04      	ldr	r2, [pc, #16]	@ (800361c <UART_Init+0x1c>)
 800360c:	4904      	ldr	r1, [pc, #16]	@ (8003620 <UART_Init+0x20>)
}
 800360e:	2000      	movs	r0, #0
  huart1.TxCpltCallback = UsartIf_TxCpltCallback;
 8003610:	f8c2 1098 	str.w	r1, [r2, #152]	@ 0x98
  TxCpltCallback = cb;
 8003614:	601c      	str	r4, [r3, #0]
}
 8003616:	bd10      	pop	{r4, pc}
 8003618:	20005864 	.word	0x20005864
 800361c:	200016c8 	.word	0x200016c8
 8003620:	080035f5 	.word	0x080035f5

08003624 <UART_DeInit>:
{
 8003624:	b538      	push	{r3, r4, r5, lr}
  __HAL_RCC_USART1_CLK_DISABLE();
 8003626:	4c44      	ldr	r4, [pc, #272]	@ (8003738 <UART_DeInit+0x114>)
  use_dma_tx = get_IRQn_Type_from_DMA_HandleTypeDef(huart1.hdmatx);
 8003628:	4d44      	ldr	r5, [pc, #272]	@ (800373c <UART_DeInit+0x118>)
  __HAL_RCC_USART1_CLK_DISABLE();
 800362a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  HAL_NVIC_DisableIRQ(USART1_IRQn);
 800362e:	202e      	movs	r0, #46	@ 0x2e
  __HAL_RCC_USART1_CLK_DISABLE();
 8003630:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003634:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
  HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003638:	f004 fe4e 	bl	80082d8 <HAL_NVIC_DisableIRQ>
  * TAKE CARE : in case of an invalid parameter or e.g. an usart/lpuart not initialized, this will lead to hard fault.
  *             it is up to the user to ensure the serial link is in a valid state.
  */
static IRQn_Type get_IRQn_Type_from_DMA_HandleTypeDef(DMA_HandleTypeDef * dma_handler)
{
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 800363c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
  __HAL_RCC_GPDMA1_CLK_DISABLE();
 800363e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	493e      	ldr	r1, [pc, #248]	@ (8003740 <UART_DeInit+0x11c>)
  __HAL_RCC_GPDMA1_CLK_DISABLE();
 8003646:	f022 0201 	bic.w	r2, r2, #1
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 800364a:	428b      	cmp	r3, r1
  __HAL_RCC_GPDMA1_CLK_DISABLE();
 800364c:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 8003650:	d060      	beq.n	8003714 <UART_DeInit+0xf0>
  if (dma_handler->Instance == GPDMA1_Channel1) { return GPDMA1_Channel1_IRQn; }
 8003652:	4a3c      	ldr	r2, [pc, #240]	@ (8003744 <UART_DeInit+0x120>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d05f      	beq.n	8003718 <UART_DeInit+0xf4>
  if (dma_handler->Instance == GPDMA1_Channel2) { return GPDMA1_Channel2_IRQn; }
 8003658:	3280      	adds	r2, #128	@ 0x80
 800365a:	4293      	cmp	r3, r2
 800365c:	d05e      	beq.n	800371c <UART_DeInit+0xf8>
  if (dma_handler->Instance == GPDMA1_Channel3) { return GPDMA1_Channel3_IRQn; }
 800365e:	3280      	adds	r2, #128	@ 0x80
 8003660:	4293      	cmp	r3, r2
 8003662:	d053      	beq.n	800370c <UART_DeInit+0xe8>
  if (dma_handler->Instance == GPDMA1_Channel4) { return GPDMA1_Channel4_IRQn; }
 8003664:	3280      	adds	r2, #128	@ 0x80
 8003666:	4293      	cmp	r3, r2
 8003668:	d05a      	beq.n	8003720 <UART_DeInit+0xfc>
  if (dma_handler->Instance == GPDMA1_Channel5) { return GPDMA1_Channel5_IRQn; }
 800366a:	3280      	adds	r2, #128	@ 0x80
 800366c:	4293      	cmp	r3, r2
 800366e:	d059      	beq.n	8003724 <UART_DeInit+0x100>
  if (dma_handler->Instance == GPDMA1_Channel6) { return GPDMA1_Channel6_IRQn; }
 8003670:	3280      	adds	r2, #128	@ 0x80
 8003672:	4293      	cmp	r3, r2
 8003674:	d058      	beq.n	8003728 <UART_DeInit+0x104>
  if (dma_handler->Instance == GPDMA1_Channel7) { return GPDMA1_Channel7_IRQn; }
 8003676:	3280      	adds	r2, #128	@ 0x80
 8003678:	4293      	cmp	r3, r2
 800367a:	d057      	beq.n	800372c <UART_DeInit+0x108>
  result = HAL_UART_DeInit(&huart1);
 800367c:	482f      	ldr	r0, [pc, #188]	@ (800373c <UART_DeInit+0x118>)
 800367e:	f007 fbd5 	bl	800ae2c <HAL_UART_DeInit>
  if (result != HAL_OK)
 8003682:	2800      	cmp	r0, #0
 8003684:	d154      	bne.n	8003730 <UART_DeInit+0x10c>
  use_dma = get_IRQn_Type_from_DMA_HandleTypeDef(huart1.hdmatx);
 8003686:	6fe8      	ldr	r0, [r5, #124]	@ 0x7c
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 8003688:	4a2d      	ldr	r2, [pc, #180]	@ (8003740 <UART_DeInit+0x11c>)
 800368a:	6803      	ldr	r3, [r0, #0]
 800368c:	4293      	cmp	r3, r2
 800368e:	d038      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel1) { return GPDMA1_Channel1_IRQn; }
 8003690:	3280      	adds	r2, #128	@ 0x80
 8003692:	4293      	cmp	r3, r2
 8003694:	d035      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel2) { return GPDMA1_Channel2_IRQn; }
 8003696:	3280      	adds	r2, #128	@ 0x80
 8003698:	4293      	cmp	r3, r2
 800369a:	d032      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel3) { return GPDMA1_Channel3_IRQn; }
 800369c:	3280      	adds	r2, #128	@ 0x80
 800369e:	4293      	cmp	r3, r2
 80036a0:	d02f      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel4) { return GPDMA1_Channel4_IRQn; }
 80036a2:	3280      	adds	r2, #128	@ 0x80
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d02c      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel5) { return GPDMA1_Channel5_IRQn; }
 80036a8:	3280      	adds	r2, #128	@ 0x80
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d029      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel6) { return GPDMA1_Channel6_IRQn; }
 80036ae:	3280      	adds	r2, #128	@ 0x80
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d026      	beq.n	8003702 <UART_DeInit+0xde>
  if (dma_handler->Instance == GPDMA1_Channel7) { return GPDMA1_Channel7_IRQn; }
 80036b4:	3280      	adds	r2, #128	@ 0x80
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d023      	beq.n	8003702 <UART_DeInit+0xde>
  use_dma = get_IRQn_Type_from_DMA_HandleTypeDef(huart1.hdmarx);
 80036ba:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 80036be:	4a20      	ldr	r2, [pc, #128]	@ (8003740 <UART_DeInit+0x11c>)
 80036c0:	6803      	ldr	r3, [r0, #0]
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d016      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel1) { return GPDMA1_Channel1_IRQn; }
 80036c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <UART_DeInit+0x120>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel2) { return GPDMA1_Channel2_IRQn; }
 80036cc:	3280      	adds	r2, #128	@ 0x80
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d010      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel3) { return GPDMA1_Channel3_IRQn; }
 80036d2:	3280      	adds	r2, #128	@ 0x80
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel4) { return GPDMA1_Channel4_IRQn; }
 80036d8:	3280      	adds	r2, #128	@ 0x80
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00a      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel5) { return GPDMA1_Channel5_IRQn; }
 80036de:	3280      	adds	r2, #128	@ 0x80
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d007      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel6) { return GPDMA1_Channel6_IRQn; }
 80036e4:	3280      	adds	r2, #128	@ 0x80
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <UART_DeInit+0xd0>
  if (dma_handler->Instance == GPDMA1_Channel7) { return GPDMA1_Channel7_IRQn; }
 80036ea:	3280      	adds	r2, #128	@ 0x80
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d001      	beq.n	80036f4 <UART_DeInit+0xd0>
  return UTIL_ADV_TRACE_OK;
 80036f0:	2000      	movs	r0, #0
}
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
    result = HAL_DMA_DeInit(huart1.hdmarx);
 80036f4:	f005 f84a 	bl	800878c <HAL_DMA_DeInit>
    if (result != HAL_OK)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d0f9      	beq.n	80036f0 <UART_DeInit+0xcc>
    return UTIL_ADV_TRACE_UNKNOWN_ERROR;
 80036fc:	f06f 0003 	mvn.w	r0, #3
}
 8003700:	bd38      	pop	{r3, r4, r5, pc}
    result = HAL_DMA_DeInit(huart1.hdmatx);
 8003702:	f005 f843 	bl	800878c <HAL_DMA_DeInit>
    if (result != HAL_OK)
 8003706:	2800      	cmp	r0, #0
 8003708:	d0d7      	beq.n	80036ba <UART_DeInit+0x96>
 800370a:	e7f7      	b.n	80036fc <UART_DeInit+0xd8>
  if (dma_handler->Instance == GPDMA1_Channel3) { return GPDMA1_Channel3_IRQn; }
 800370c:	2020      	movs	r0, #32
    HAL_NVIC_DisableIRQ(use_dma_tx);
 800370e:	f004 fde3 	bl	80082d8 <HAL_NVIC_DisableIRQ>
 8003712:	e7b3      	b.n	800367c <UART_DeInit+0x58>
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 8003714:	201d      	movs	r0, #29
 8003716:	e7fa      	b.n	800370e <UART_DeInit+0xea>
  if (dma_handler->Instance == GPDMA1_Channel1) { return GPDMA1_Channel1_IRQn; }
 8003718:	201e      	movs	r0, #30
 800371a:	e7f8      	b.n	800370e <UART_DeInit+0xea>
  if (dma_handler->Instance == GPDMA1_Channel2) { return GPDMA1_Channel2_IRQn; }
 800371c:	201f      	movs	r0, #31
 800371e:	e7f6      	b.n	800370e <UART_DeInit+0xea>
  if (dma_handler->Instance == GPDMA1_Channel4) { return GPDMA1_Channel4_IRQn; }
 8003720:	2021      	movs	r0, #33	@ 0x21
 8003722:	e7f4      	b.n	800370e <UART_DeInit+0xea>
  if (dma_handler->Instance == GPDMA1_Channel5) { return GPDMA1_Channel5_IRQn; }
 8003724:	2022      	movs	r0, #34	@ 0x22
 8003726:	e7f2      	b.n	800370e <UART_DeInit+0xea>
  if (dma_handler->Instance == GPDMA1_Channel6) { return GPDMA1_Channel6_IRQn; }
 8003728:	2023      	movs	r0, #35	@ 0x23
 800372a:	e7f0      	b.n	800370e <UART_DeInit+0xea>
  if (dma_handler->Instance == GPDMA1_Channel7) { return GPDMA1_Channel7_IRQn; }
 800372c:	2024      	movs	r0, #36	@ 0x24
 800372e:	e7ee      	b.n	800370e <UART_DeInit+0xea>
    huart1.TxCpltCallback = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
    return UTIL_ADV_TRACE_UNKNOWN_ERROR;
 8003736:	e7e1      	b.n	80036fc <UART_DeInit+0xd8>
 8003738:	46020c00 	.word	0x46020c00
 800373c:	200016c8 	.word	0x200016c8
 8003740:	40020050 	.word	0x40020050
 8003744:	400200d0 	.word	0x400200d0

08003748 <UART_StartRx>:
{
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4604      	mov	r4, r0
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800374c:	4d06      	ldr	r5, [pc, #24]	@ (8003768 <UART_StartRx+0x20>)
 800374e:	2201      	movs	r2, #1
 8003750:	4628      	mov	r0, r5
 8003752:	4906      	ldr	r1, [pc, #24]	@ (800376c <UART_StartRx+0x24>)
 8003754:	f007 fbea 	bl	800af2c <HAL_UART_Receive_IT>
  huart1.RxCpltCallback = &UsartIf_RxCpltCallback;
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <UART_StartRx+0x28>)
 800375a:	f8c5 30a0 	str.w	r3, [r5, #160]	@ 0xa0
  if (cb != NULL)
 800375e:	b10c      	cbz	r4, 8003764 <UART_StartRx+0x1c>
    RxCpltCallback = cb;
 8003760:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <UART_StartRx+0x2c>)
 8003762:	601c      	str	r4, [r3, #0]
}
 8003764:	2000      	movs	r0, #0
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	200016c8 	.word	0x200016c8
 800376c:	20005868 	.word	0x20005868
 8003770:	08003779 	.word	0x08003779
 8003774:	20005860 	.word	0x20005860

08003778 <UsartIf_RxCpltCallback>:
{
 8003778:	b510      	push	{r4, lr}
  RxCpltCallback(&charRx, 1, 0);
 800377a:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <UsartIf_RxCpltCallback+0x20>)
 800377c:	4c07      	ldr	r4, [pc, #28]	@ (800379c <UsartIf_RxCpltCallback+0x24>)
 800377e:	2200      	movs	r2, #0
 8003780:	4620      	mov	r0, r4
 8003782:	2101      	movs	r1, #1
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4798      	blx	r3
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003788:	4621      	mov	r1, r4
}
 800378a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800378e:	2201      	movs	r2, #1
 8003790:	4803      	ldr	r0, [pc, #12]	@ (80037a0 <UsartIf_RxCpltCallback+0x28>)
 8003792:	f007 bbcb 	b.w	800af2c <HAL_UART_Receive_IT>
 8003796:	bf00      	nop
 8003798:	20005860 	.word	0x20005860
 800379c:	20005868 	.word	0x20005868
 80037a0:	200016c8 	.word	0x200016c8

080037a4 <UART_TransmitDMA>:
{
 80037a4:	b538      	push	{r3, r4, r5, lr}
  use_dma_tx = get_IRQn_Type_from_DMA_HandleTypeDef(huart1.hdmatx);
 80037a6:	4c1b      	ldr	r4, [pc, #108]	@ (8003814 <UART_TransmitDMA+0x70>)
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 80037a8:	4d1b      	ldr	r5, [pc, #108]	@ (8003818 <UART_TransmitDMA+0x74>)
 80037aa:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
{
 80037ac:	460a      	mov	r2, r1
  if (dma_handler->Instance == GPDMA1_Channel0) { return GPDMA1_Channel0_IRQn; }
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	d019      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel1) { return GPDMA1_Channel1_IRQn; }
 80037b4:	4919      	ldr	r1, [pc, #100]	@ (800381c <UART_TransmitDMA+0x78>)
 80037b6:	428b      	cmp	r3, r1
 80037b8:	d016      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel2) { return GPDMA1_Channel2_IRQn; }
 80037ba:	3180      	adds	r1, #128	@ 0x80
 80037bc:	428b      	cmp	r3, r1
 80037be:	d013      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel3) { return GPDMA1_Channel3_IRQn; }
 80037c0:	3180      	adds	r1, #128	@ 0x80
 80037c2:	428b      	cmp	r3, r1
 80037c4:	d010      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel4) { return GPDMA1_Channel4_IRQn; }
 80037c6:	3180      	adds	r1, #128	@ 0x80
 80037c8:	428b      	cmp	r3, r1
 80037ca:	d00d      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel5) { return GPDMA1_Channel5_IRQn; }
 80037cc:	3180      	adds	r1, #128	@ 0x80
 80037ce:	428b      	cmp	r3, r1
 80037d0:	d00a      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel6) { return GPDMA1_Channel6_IRQn; }
 80037d2:	3180      	adds	r1, #128	@ 0x80
 80037d4:	428b      	cmp	r3, r1
 80037d6:	d007      	beq.n	80037e8 <UART_TransmitDMA+0x44>
  if (dma_handler->Instance == GPDMA1_Channel7) { return GPDMA1_Channel7_IRQn; }
 80037d8:	3180      	adds	r1, #128	@ 0x80
 80037da:	428b      	cmp	r3, r1
 80037dc:	d004      	beq.n	80037e8 <UART_TransmitDMA+0x44>
    result = HAL_UART_Transmit_IT(&huart1, pdata, size);
 80037de:	4601      	mov	r1, r0
 80037e0:	4620      	mov	r0, r4
 80037e2:	f007 fb4d 	bl	800ae80 <HAL_UART_Transmit_IT>
 80037e6:	e003      	b.n	80037f0 <UART_TransmitDMA+0x4c>
    result = HAL_UART_Transmit_DMA(&huart1, pdata, size);
 80037e8:	4601      	mov	r1, r0
 80037ea:	480a      	ldr	r0, [pc, #40]	@ (8003814 <UART_TransmitDMA+0x70>)
 80037ec:	f007 fc58 	bl	800b0a0 <HAL_UART_Transmit_DMA>
  if(receive_after_transmit)
 80037f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <UART_TransmitDMA+0x7c>)
  UTIL_ADV_TRACE_Status_t status = UTIL_ADV_TRACE_OK;
 80037f2:	2800      	cmp	r0, #0
  if(receive_after_transmit)
 80037f4:	781b      	ldrb	r3, [r3, #0]
  UTIL_ADV_TRACE_Status_t status = UTIL_ADV_TRACE_OK;
 80037f6:	bf14      	ite	ne
 80037f8:	f06f 0401 	mvnne.w	r4, #1
 80037fc:	2400      	moveq	r4, #0
  if(receive_after_transmit)
 80037fe:	b90b      	cbnz	r3, 8003804 <UART_TransmitDMA+0x60>
}
 8003800:	4620      	mov	r0, r4
 8003802:	bd38      	pop	{r3, r4, r5, pc}
    HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003804:	2201      	movs	r2, #1
 8003806:	4907      	ldr	r1, [pc, #28]	@ (8003824 <UART_TransmitDMA+0x80>)
 8003808:	4802      	ldr	r0, [pc, #8]	@ (8003814 <UART_TransmitDMA+0x70>)
 800380a:	f007 fb8f 	bl	800af2c <HAL_UART_Receive_IT>
}
 800380e:	4620      	mov	r0, r4
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	bf00      	nop
 8003814:	200016c8 	.word	0x200016c8
 8003818:	40020050 	.word	0x40020050
 800381c:	400200d0 	.word	0x400200d0
 8003820:	20005869 	.word	0x20005869
 8003824:	20005868 	.word	0x20005868

08003828 <FD_SetStatus>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003828:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800382c:	b672      	cpsid	i
  */
void FD_SetStatus(FD_Flash_ctrl_bm_t Flags_bm, FD_FLASH_Status_t Status)
{
  UTILS_ENTER_CRITICAL_SECTION();

  switch (Status)
 800382e:	b149      	cbz	r1, 8003844 <FD_SetStatus+0x1c>
 8003830:	2901      	cmp	r1, #1
 8003832:	d104      	bne.n	800383e <FD_SetStatus+0x16>
  {
    case LL_FLASH_DISABLE:
    {
      FD_Flash_Control_status |= (1u << Flags_bm);
 8003834:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <FD_SetStatus+0x38>)
 8003836:	4081      	lsls	r1, r0
 8003838:	6810      	ldr	r0, [r2, #0]
 800383a:	4301      	orrs	r1, r0
 800383c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	f383 8810 	msr	PRIMASK, r3
 8003842:	4770      	bx	lr
      break;
    }
    case LL_FLASH_ENABLE:
    {
      FD_Flash_Control_status &= ~(1u << Flags_bm);
 8003844:	2101      	movs	r1, #1
{
 8003846:	b410      	push	{r4}
      FD_Flash_Control_status &= ~(1u << Flags_bm);
 8003848:	4c05      	ldr	r4, [pc, #20]	@ (8003860 <FD_SetStatus+0x38>)
 800384a:	4081      	lsls	r1, r0
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	ea22 0201 	bic.w	r2, r2, r1
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }

  UTILS_EXIT_CRITICAL_SECTION();
}
 8003858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	2000586c 	.word	0x2000586c

08003864 <FD_WriteData>:
  * @param  Dest: Address where to write in Flash (128-bit aligned)
  * @param  Payload: Address of data to be written in Flash (32-bit aligned)
  * @retval FD_FlashOp_Status_t: Success or failure of Flash write operation
  */
FD_FlashOp_Status_t FD_WriteData(uint32_t Dest, uint32_t Payload)
{
 8003864:	b510      	push	{r4, lr}
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;

  /* Check if RFTS OR Application allow flash access */
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 8003866:	4c0a      	ldr	r4, [pc, #40]	@ (8003890 <FD_WriteData+0x2c>)
{
 8003868:	460a      	mov	r2, r1
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	079b      	lsls	r3, r3, #30
 800386e:	d502      	bpl.n	8003876 <FD_WriteData+0x12>
      (FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS_BYPASS)))
 8003870:	6823      	ldr	r3, [r4, #0]
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 8003872:	0759      	lsls	r1, r3, #29
 8003874:	d40a      	bmi.n	800388c <FD_WriteData+0x28>
  { /* Access not allowed */
    return status;
  }

  /* Wait for system to allow flash access */
  while (FD_Flash_Control_status & (1u << FD_FLASHACCESS_SYSTEM));
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d4fc      	bmi.n	8003876 <FD_WriteData+0x12>

  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, Dest, Payload) == HAL_OK)
 800387c:	4601      	mov	r1, r0
 800387e:	2001      	movs	r0, #1
 8003880:	f005 f9ee 	bl	8008c60 <HAL_FLASH_Program>
 8003884:	3800      	subs	r0, #0
 8003886:	bf18      	it	ne
 8003888:	2001      	movne	r0, #1
  {
    status = FD_FLASHOP_SUCCESS;
  }
  return status;
}
 800388a:	bd10      	pop	{r4, pc}
    return status;
 800388c:	2001      	movs	r0, #1
}
 800388e:	bd10      	pop	{r4, pc}
 8003890:	2000586c 	.word	0x2000586c

08003894 <FD_EraseSectors>:
  FD_FlashOp_Status_t status = FD_FLASHOP_FAILURE;
  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

#ifndef FLASH_DBANK_SUPPORT
  if (FLASH_PAGE_NB < Sect)
 8003894:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8003898:	4a1a      	ldr	r2, [pc, #104]	@ (8003904 <FD_EraseSectors+0x70>)
 800389a:	f8b2 10a0 	ldrh.w	r1, [r2, #160]	@ 0xa0
 800389e:	f101 3cff 	add.w	ip, r1, #4294967295
 80038a2:	fa1f fc8c 	uxth.w	ip, ip
 80038a6:	459c      	cmp	ip, r3
 80038a8:	bf8c      	ite	hi
 80038aa:	2380      	movhi	r3, #128	@ 0x80
 80038ac:	08cb      	lsrls	r3, r1, #3
 80038ae:	4283      	cmp	r3, r0
 80038b0:	d325      	bcc.n	80038fe <FD_EraseSectors+0x6a>
  {
    return status;
  }

  /* Check if LL allows flash access */
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 80038b2:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <FD_EraseSectors+0x74>)
 80038b4:	6813      	ldr	r3, [r2, #0]
 80038b6:	079b      	lsls	r3, r3, #30
 80038b8:	d41e      	bmi.n	80038f8 <FD_EraseSectors+0x64>
{
 80038ba:	b500      	push	{lr}
 80038bc:	b085      	sub	sp, #20
  { /* Access not allowed */
    return status;
  }

  /* Wait for system to allow flash access */
  while (FD_Flash_Control_status & (1u << FD_FLASHACCESS_SYSTEM));
 80038be:	6813      	ldr	r3, [r2, #0]
 80038c0:	07db      	lsls	r3, r3, #31
 80038c2:	d4fc      	bmi.n	80038be <FD_EraseSectors+0x2a>

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
  p_erase_init.Page = (Sect & (FLASH_PAGE_NB - 1u));
 80038c4:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80038c8:	2202      	movs	r2, #2
  p_erase_init.Page = (Sect & (FLASH_PAGE_NB - 1u));
 80038ca:	459c      	cmp	ip, r3
 80038cc:	bf88      	it	hi
 80038ce:	237f      	movhi	r3, #127	@ 0x7f
  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80038d0:	9201      	str	r2, [sp, #4]
  p_erase_init.NbPages = 1;
 80038d2:	f04f 0201 	mov.w	r2, #1
  p_erase_init.Page = (Sect & (FLASH_PAGE_NB - 1u));
 80038d6:	bf9c      	itt	ls
 80038d8:	08cb      	lsrls	r3, r1, #3
 80038da:	f103 33ff 	addls.w	r3, r3, #4294967295
 80038de:	4003      	ands	r3, r0
  {
    p_erase_init.Banks = FLASH_BANK_1;
  }
#endif

  if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) == HAL_OK)
 80038e0:	4669      	mov	r1, sp
 80038e2:	a801      	add	r0, sp, #4
  p_erase_init.NbPages = 1;
 80038e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
  if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) == HAL_OK)
 80038e8:	f005 faea 	bl	8008ec0 <HAL_FLASHEx_Erase>
 80038ec:	3800      	subs	r0, #0
 80038ee:	bf18      	it	ne
 80038f0:	2001      	movne	r0, #1
  {
    status = FD_FLASHOP_SUCCESS;
  }

  return status;
}
 80038f2:	b005      	add	sp, #20
 80038f4:	f85d fb04 	ldr.w	pc, [sp], #4
      (FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS_BYPASS)))
 80038f8:	6813      	ldr	r3, [r2, #0]
  if ((FD_Flash_Control_status & (1u << FD_FLASHACCESS_RFTS)) &&
 80038fa:	075b      	lsls	r3, r3, #29
 80038fc:	d5dd      	bpl.n	80038ba <FD_EraseSectors+0x26>
    return status;
 80038fe:	2001      	movs	r0, #1
}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	0bf90700 	.word	0x0bf90700
 8003908:	2000586c 	.word	0x2000586c

0800390c <FM_WindowAllowed_Callback>:
  * @param  None
  * @retval None
  */
static void FM_WindowAllowed_Callback(void)
{
  fm_window_granted = true;
 800390c:	2101      	movs	r1, #1
{
 800390e:	b508      	push	{r3, lr}
  fm_window_granted = true;
 8003910:	4b04      	ldr	r3, [pc, #16]	@ (8003924 <FM_WindowAllowed_Callback+0x18>)

  LOG_INFO_SYSTEM("\r\nFM_WindowAllowed_Callback");
 8003912:	2000      	movs	r0, #0
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <FM_WindowAllowed_Callback+0x1c>)
  fm_window_granted = true;
 8003916:	7019      	strb	r1, [r3, #0]
  LOG_INFO_SYSTEM("\r\nFM_WindowAllowed_Callback");
 8003918:	f7ff f87a 	bl	8002a10 <Log_Module_Print>

  /* Flash operation to be executed in background */
  FM_ProcessRequest();
}
 800391c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  FM_ProcessRequest();
 8003920:	f7fc bf56 	b.w	80007d0 <FM_ProcessRequest>
 8003924:	200058a0 	.word	0x200058a0
 8003928:	0802d7c8 	.word	0x0802d7c8

0800392c <FM_CheckFlashManagerState>:
{
 800392c:	b570      	push	{r4, r5, r6, lr}
 800392e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003930:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003934:	b672      	cpsid	i
  if (fm_cb_pending_list_init == false)
 8003936:	4d1a      	ldr	r5, [pc, #104]	@ (80039a0 <FM_CheckFlashManagerState+0x74>)
 8003938:	782b      	ldrb	r3, [r5, #0]
 800393a:	b35b      	cbz	r3, 8003994 <FM_CheckFlashManagerState+0x68>
  if (busy_flash_sem == false)
 800393c:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <FM_CheckFlashManagerState+0x78>)
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	b912      	cbnz	r2, 8003948 <FM_CheckFlashManagerState+0x1c>
    if (flash_manager_busy == false)
 8003942:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <FM_CheckFlashManagerState+0x7c>)
 8003944:	7811      	ldrb	r1, [r2, #0]
 8003946:	b151      	cbz	r1, 800395e <FM_CheckFlashManagerState+0x32>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	f386 8810 	msr	PRIMASK, r6
    if ((CallbackNode != NULL) && (CallbackNode->Callback != NULL))
 800394c:	b12c      	cbz	r4, 800395a <FM_CheckFlashManagerState+0x2e>
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	b11b      	cbz	r3, 800395a <FM_CheckFlashManagerState+0x2e>
      LST_insert_tail(&fm_cb_pending_list, &(CallbackNode->NodeList));
 8003952:	4621      	mov	r1, r4
 8003954:	4815      	ldr	r0, [pc, #84]	@ (80039ac <FM_CheckFlashManagerState+0x80>)
 8003956:	f003 fd35 	bl	80073c4 <LST_insert_tail>
    status = FM_BUSY;
 800395a:	2001      	movs	r0, #1
}
 800395c:	bd70      	pop	{r4, r5, r6, pc}
      busy_flash_sem = true; /* Get semaphore on flash */
 800395e:	2101      	movs	r1, #1
 8003960:	7019      	strb	r1, [r3, #0]
      flash_manager_busy = true; /* Set Flash Manager busy */
 8003962:	7011      	strb	r1, [r2, #0]
 8003964:	f386 8810 	msr	PRIMASK, r6
    if ((CallbackNode != NULL) && (CallbackNode->Callback != NULL))
 8003968:	b15c      	cbz	r4, 8003982 <FM_CheckFlashManagerState+0x56>
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	b14b      	cbz	r3, 8003982 <FM_CheckFlashManagerState+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800396e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003972:	b672      	cpsid	i
      fm_running_cb = CallbackNode->Callback;
 8003974:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <FM_CheckFlashManagerState+0x84>)
 8003976:	68a1      	ldr	r1, [r4, #8]
 8003978:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	f383 8810 	msr	PRIMASK, r3
    status = FM_BUSY;
 800397e:	2000      	movs	r0, #0
}
 8003980:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003982:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003986:	b672      	cpsid	i
      fm_running_cb = NULL;
 8003988:	2100      	movs	r1, #0
 800398a:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <FM_CheckFlashManagerState+0x84>)
 800398c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	f383 8810 	msr	PRIMASK, r3
}
 8003992:	e7f4      	b.n	800397e <FM_CheckFlashManagerState+0x52>
    LST_init_head(&fm_cb_pending_list);
 8003994:	4805      	ldr	r0, [pc, #20]	@ (80039ac <FM_CheckFlashManagerState+0x80>)
 8003996:	f003 fcf9 	bl	800738c <LST_init_head>
    fm_cb_pending_list_init = true;
 800399a:	2301      	movs	r3, #1
 800399c:	702b      	strb	r3, [r5, #0]
 800399e:	e7cd      	b.n	800393c <FM_CheckFlashManagerState+0x10>
 80039a0:	20005894 	.word	0x20005894
 80039a4:	200058a2 	.word	0x200058a2
 80039a8:	200058a1 	.word	0x200058a1
 80039ac:	20005898 	.word	0x20005898
 80039b0:	20005890 	.word	0x20005890

080039b4 <FM_Write>:
  if (((uint32_t)Dest < FLASH_BASE) || ((uint32_t)Dest > (FLASH_BASE + FLASH_SIZE))
 80039b4:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
{
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)Dest < FLASH_BASE) || ((uint32_t)Dest > (FLASH_BASE + FLASH_SIZE))
 80039ba:	d330      	bcc.n	8003a1e <FM_Write+0x6a>
 80039bc:	4606      	mov	r6, r0
 80039be:	f64f 70fd 	movw	r0, #65533	@ 0xfffd
 80039c2:	4615      	mov	r5, r2
 80039c4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <FM_Write+0x8c>)
 80039c6:	460c      	mov	r4, r1
 80039c8:	f8b2 10a0 	ldrh.w	r1, [r2, #160]	@ 0xa0
 80039cc:	1e4a      	subs	r2, r1, #1
 80039ce:	b292      	uxth	r2, r2
 80039d0:	4282      	cmp	r2, r0
 80039d2:	bf8e      	itee	hi
 80039d4:	f04f 6101 	movhi.w	r1, #135266304	@ 0x8100000
 80039d8:	0289      	lslls	r1, r1, #10
 80039da:	f101 6100 	addls.w	r1, r1, #134217728	@ 0x8000000
 80039de:	428c      	cmp	r4, r1
 80039e0:	d81d      	bhi.n	8003a1e <FM_Write+0x6a>
                                    || (((uint32_t)Dest + Size) > (FLASH_BASE + FLASH_SIZE)))
 80039e2:	1962      	adds	r2, r4, r5
 80039e4:	428a      	cmp	r2, r1
 80039e6:	d81a      	bhi.n	8003a1e <FM_Write+0x6a>
  if (((uint32_t) Src & ALIGNMENT_32) || ((uint32_t) Dest & ALIGNMENT_128))
 80039e8:	f006 0203 	and.w	r2, r6, #3
 80039ec:	f004 010f 	and.w	r1, r4, #15
 80039f0:	430a      	orrs	r2, r1
 80039f2:	d10c      	bne.n	8003a0e <FM_Write+0x5a>
  status = FM_CheckFlashManagerState(CallbackNode);
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff99 	bl	800392c <FM_CheckFlashManagerState>
  if (status == FM_OK)
 80039fa:	4607      	mov	r7, r0
 80039fc:	b1a8      	cbz	r0, 8003a2a <FM_Write+0x76>
  LOG_INFO_SYSTEM("\r\nFM_Write - Returned value : %d", status);
 80039fe:	463b      	mov	r3, r7
 8003a00:	2101      	movs	r1, #1
 8003a02:	2000      	movs	r0, #0
 8003a04:	4a0f      	ldr	r2, [pc, #60]	@ (8003a44 <FM_Write+0x90>)
 8003a06:	f7ff f803 	bl	8002a10 <Log_Module_Print>
}
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LOG_ERROR_SYSTEM("\r\nFM_Write - Source or destination address not properly aligned");
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <FM_Write+0x94>)
 8003a12:	4608      	mov	r0, r1
 8003a14:	f7fe fffc 	bl	8002a10 <Log_Module_Print>
    return FM_ERROR;
 8003a18:	2702      	movs	r7, #2
}
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LOG_ERROR_SYSTEM("\r\nFM_Write - Destination address not part of the flash");
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <FM_Write+0x98>)
 8003a22:	4608      	mov	r0, r1
 8003a24:	f7fe fff4 	bl	8002a10 <Log_Module_Print>
    return FM_ERROR;
 8003a28:	e7f6      	b.n	8003a18 <FM_Write+0x64>
    fm_flashop_parameters.writeSrc = Src;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <FM_Write+0x9c>)
    fm_flashop = FM_WRITE_OP;
 8003a2c:	4a09      	ldr	r2, [pc, #36]	@ (8003a54 <FM_Write+0xa0>)
    fm_flashop_parameters.writeSrc = Src;
 8003a2e:	601e      	str	r6, [r3, #0]
    fm_flashop_parameters.writeSize = Size;
 8003a30:	e9c3 4501 	strd	r4, r5, [r3, #4]
    FM_CurrentBackGroundState = FM_BKGND_NOWINDOW_FLASHOP;
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <FM_Write+0xa4>)
    fm_flashop = FM_WRITE_OP;
 8003a36:	7010      	strb	r0, [r2, #0]
    FM_CurrentBackGroundState = FM_BKGND_NOWINDOW_FLASHOP;
 8003a38:	7018      	strb	r0, [r3, #0]
    FM_ProcessRequest();
 8003a3a:	f7fc fec9 	bl	80007d0 <FM_ProcessRequest>
 8003a3e:	e7de      	b.n	80039fe <FM_Write+0x4a>
 8003a40:	0bf90700 	.word	0x0bf90700
 8003a44:	0802d85c 	.word	0x0802d85c
 8003a48:	0802d81c 	.word	0x0802d81c
 8003a4c:	0802d7e4 	.word	0x0802d7e4
 8003a50:	20005878 	.word	0x20005878
 8003a54:	2000588c 	.word	0x2000588c
 8003a58:	20005874 	.word	0x20005874

08003a5c <FM_Erase>:
  if ((FirstSect > FLASH_PAGE_NBR) || ((FirstSect + NbrSect) > FLASH_PAGE_NBR))
 8003a5c:	f64f 7cfd 	movw	ip, #65533	@ 0xfffd
 8003a60:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <FM_Erase+0x68>)
{
 8003a62:	b570      	push	{r4, r5, r6, lr}
  if ((FirstSect > FLASH_PAGE_NBR) || ((FirstSect + NbrSect) > FLASH_PAGE_NBR))
 8003a64:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
{
 8003a68:	4604      	mov	r4, r0
  if ((FirstSect > FLASH_PAGE_NBR) || ((FirstSect + NbrSect) > FLASH_PAGE_NBR))
 8003a6a:	1e5e      	subs	r6, r3, #1
 8003a6c:	b2b6      	uxth	r6, r6
 8003a6e:	4566      	cmp	r6, ip
 8003a70:	bf8c      	ite	hi
 8003a72:	2380      	movhi	r3, #128	@ 0x80
 8003a74:	08db      	lsrls	r3, r3, #3
 8003a76:	42a3      	cmp	r3, r4
{
 8003a78:	460d      	mov	r5, r1
 8003a7a:	4610      	mov	r0, r2
  if ((FirstSect > FLASH_PAGE_NBR) || ((FirstSect + NbrSect) > FLASH_PAGE_NBR))
 8003a7c:	d30f      	bcc.n	8003a9e <FM_Erase+0x42>
 8003a7e:	1862      	adds	r2, r4, r1
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d80c      	bhi.n	8003a9e <FM_Erase+0x42>
  if (NbrSect == 0)
 8003a84:	b159      	cbz	r1, 8003a9e <FM_Erase+0x42>
  status = FM_CheckFlashManagerState(CallbackNode);
 8003a86:	f7ff ff51 	bl	800392c <FM_CheckFlashManagerState>
  if (status == FM_OK)
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	b178      	cbz	r0, 8003aae <FM_Erase+0x52>
  LOG_INFO_SYSTEM("\r\nFM_Erase - Returned value : %d", status);
 8003a8e:	4633      	mov	r3, r6
 8003a90:	2101      	movs	r1, #1
 8003a92:	2000      	movs	r0, #0
 8003a94:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac8 <FM_Erase+0x6c>)
 8003a96:	f7fe ffbb 	bl	8002a10 <Log_Module_Print>
}
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	bd70      	pop	{r4, r5, r6, pc}
    LOG_ERROR_SYSTEM("\r\nFM_Erase - Inconsistent request");
 8003a9e:	2101      	movs	r1, #1
    return FM_ERROR;
 8003aa0:	2602      	movs	r6, #2
    LOG_ERROR_SYSTEM("\r\nFM_Erase - Inconsistent request");
 8003aa2:	4608      	mov	r0, r1
 8003aa4:	4a09      	ldr	r2, [pc, #36]	@ (8003acc <FM_Erase+0x70>)
 8003aa6:	f7fe ffb3 	bl	8002a10 <Log_Module_Print>
}
 8003aaa:	4630      	mov	r0, r6
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
    fm_flashop = FM_ERASE_OP;
 8003aae:	2101      	movs	r1, #1
    fm_flashop_parameters.eraseFirstSect = FirstSect;
 8003ab0:	4b07      	ldr	r3, [pc, #28]	@ (8003ad0 <FM_Erase+0x74>)
    fm_flashop = FM_ERASE_OP;
 8003ab2:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <FM_Erase+0x78>)
    fm_flashop_parameters.eraseFirstSect = FirstSect;
 8003ab4:	60dc      	str	r4, [r3, #12]
    fm_flashop_parameters.eraseNbrSect = NbrSect;
 8003ab6:	611d      	str	r5, [r3, #16]
    FM_CurrentBackGroundState = FM_BKGND_NOWINDOW_FLASHOP;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <FM_Erase+0x7c>)
    fm_flashop = FM_ERASE_OP;
 8003aba:	7011      	strb	r1, [r2, #0]
    FM_CurrentBackGroundState = FM_BKGND_NOWINDOW_FLASHOP;
 8003abc:	7018      	strb	r0, [r3, #0]
    FM_ProcessRequest();
 8003abe:	f7fc fe87 	bl	80007d0 <FM_ProcessRequest>
 8003ac2:	e7e4      	b.n	8003a8e <FM_Erase+0x32>
 8003ac4:	0bf90700 	.word	0x0bf90700
 8003ac8:	0802d8a4 	.word	0x0802d8a4
 8003acc:	0802d880 	.word	0x0802d880
 8003ad0:	20005878 	.word	0x20005878
 8003ad4:	2000588c 	.word	0x2000588c
 8003ad8:	20005874 	.word	0x20005874

08003adc <FM_BackgroundProcess>:
{
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  FM_CallbackNode_t *pCbNode = NULL;
 8003ade:	2400      	movs	r4, #0
  switch (FM_CurrentBackGroundState)
 8003ae0:	4e74      	ldr	r6, [pc, #464]	@ (8003cb4 <FM_BackgroundProcess+0x1d8>)
{
 8003ae2:	b083      	sub	sp, #12
  switch (FM_CurrentBackGroundState)
 8003ae4:	7835      	ldrb	r5, [r6, #0]
  FM_CallbackNode_t *pCbNode = NULL;
 8003ae6:	9401      	str	r4, [sp, #4]
  switch (FM_CurrentBackGroundState)
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	d04b      	beq.n	8003b84 <FM_BackgroundProcess+0xa8>
 8003aec:	2d01      	cmp	r5, #1
 8003aee:	d13d      	bne.n	8003b6c <FM_BackgroundProcess+0x90>
      if (fm_window_granted == false)
 8003af0:	4e71      	ldr	r6, [pc, #452]	@ (8003cb8 <FM_BackgroundProcess+0x1dc>)
      LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP");
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	4a71      	ldr	r2, [pc, #452]	@ (8003cbc <FM_BackgroundProcess+0x1e0>)
 8003af8:	f7fe ff8a 	bl	8002a10 <Log_Module_Print>
      if (fm_window_granted == false)
 8003afc:	7830      	ldrb	r0, [r6, #0]
 8003afe:	2800      	cmp	r0, #0
 8003b00:	f000 80a1 	beq.w	8003c46 <FM_BackgroundProcess+0x16a>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - Time window granted");
 8003b04:	4620      	mov	r0, r4
 8003b06:	4629      	mov	r1, r5
 8003b08:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc0 <FM_BackgroundProcess+0x1e4>)
 8003b0a:	f7fe ff81 	bl	8002a10 <Log_Module_Print>
        if (fm_flashop == FM_WRITE_OP)
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc4 <FM_BackgroundProcess+0x1e8>)
 8003b10:	7818      	ldrb	r0, [r3, #0]
 8003b12:	2800      	cmp	r0, #0
 8003b14:	f040 80a1 	bne.w	8003c5a <FM_BackgroundProcess+0x17e>
          while((fm_flashop_parameters.writeSize > 0) &&
 8003b18:	4c6b      	ldr	r4, [pc, #428]	@ (8003cc8 <FM_BackgroundProcess+0x1ec>)
          LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - Write operation");
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ccc <FM_BackgroundProcess+0x1f0>)
 8003b1e:	f7fe ff77 	bl	8002a10 <Log_Module_Print>
          HAL_FLASH_Unlock();
 8003b22:	f005 f97b 	bl	8008e1c <HAL_FLASH_Unlock>
          while((fm_flashop_parameters.writeSize > 0) &&
 8003b26:	68a3      	ldr	r3, [r4, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f340 80ab 	ble.w	8003c84 <FM_BackgroundProcess+0x1a8>
                              (uint32_t) fm_flashop_parameters.writeSrc) == FD_FLASHOP_SUCCESS))
 8003b2e:	e9d4 1000 	ldrd	r1, r0, [r4]
 8003b32:	e00b      	b.n	8003b4c <FM_BackgroundProcess+0x70>
              fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 8003b34:	68a3      	ldr	r3, [r4, #8]
              fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 8003b36:	e9d4 1000 	ldrd	r1, r0, [r4]
              fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 8003b3a:	3b04      	subs	r3, #4
              fm_flashop_parameters.writeDest += FLASH_WRITE_BLOCK_SIZE;
 8003b3c:	3010      	adds	r0, #16
              fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 8003b3e:	3110      	adds	r1, #16
          while((fm_flashop_parameters.writeSize > 0) &&
 8003b40:	2b00      	cmp	r3, #0
              fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 8003b42:	e9c4 1000 	strd	r1, r0, [r4]
              fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 8003b46:	60a3      	str	r3, [r4, #8]
          while((fm_flashop_parameters.writeSize > 0) &&
 8003b48:	f340 809c 	ble.w	8003c84 <FM_BackgroundProcess+0x1a8>
                (FD_WriteData((uint32_t) fm_flashop_parameters.writeDest,
 8003b4c:	f7ff fe8a 	bl	8003864 <FD_WriteData>
          while((fm_flashop_parameters.writeSize > 0) &&
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d0ef      	beq.n	8003b34 <FM_BackgroundProcess+0x58>
          if (fm_flashop_parameters.writeSize <= 0)
 8003b54:	68a3      	ldr	r3, [r4, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f340 8094 	ble.w	8003c84 <FM_BackgroundProcess+0x1a8>
      HAL_FLASH_Lock();
 8003b5c:	f005 f972 	bl	8008e44 <HAL_FLASH_Lock>
        RFTS_RelWindow();
 8003b60:	f000 f944 	bl	8003dec <RFTS_RelWindow>
        fm_window_granted = false;
 8003b64:	2300      	movs	r3, #0
 8003b66:	4f5a      	ldr	r7, [pc, #360]	@ (8003cd0 <FM_BackgroundProcess+0x1f4>)
 8003b68:	7033      	strb	r3, [r6, #0]
  if (flashop_complete == true)
 8003b6a:	e000      	b.n	8003b6e <FM_BackgroundProcess+0x92>
 8003b6c:	4f58      	ldr	r7, [pc, #352]	@ (8003cd0 <FM_BackgroundProcess+0x1f4>)
    LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Flash operation not complete yet, request a new time window");
 8003b6e:	2101      	movs	r1, #1
 8003b70:	2000      	movs	r0, #0
 8003b72:	4a58      	ldr	r2, [pc, #352]	@ (8003cd4 <FM_BackgroundProcess+0x1f8>)
 8003b74:	f7fe ff4c 	bl	8002a10 <Log_Module_Print>
    RFTS_ReqWindow(duration, &FM_WindowAllowed_Callback);
 8003b78:	4957      	ldr	r1, [pc, #348]	@ (8003cd8 <FM_BackgroundProcess+0x1fc>)
 8003b7a:	6838      	ldr	r0, [r7, #0]
 8003b7c:	f000 f8e2 	bl	8003d44 <RFTS_ReqWindow>
}
 8003b80:	b003      	add	sp, #12
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP");
 8003b84:	2101      	movs	r1, #1
 8003b86:	4628      	mov	r0, r5
 8003b88:	4a54      	ldr	r2, [pc, #336]	@ (8003cdc <FM_BackgroundProcess+0x200>)
 8003b8a:	f7fe ff41 	bl	8002a10 <Log_Module_Print>
      if (fm_flashop == FM_WRITE_OP)
 8003b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc4 <FM_BackgroundProcess+0x1e8>)
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP - Write operation");
 8003b90:	2101      	movs	r1, #1
      if (fm_flashop == FM_WRITE_OP)
 8003b92:	7818      	ldrb	r0, [r3, #0]
 8003b94:	b9d0      	cbnz	r0, 8003bcc <FM_BackgroundProcess+0xf0>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP - Write operation");
 8003b96:	4a52      	ldr	r2, [pc, #328]	@ (8003ce0 <FM_BackgroundProcess+0x204>)
 8003b98:	f7fe ff3a 	bl	8002a10 <Log_Module_Print>
        FM_CurrentBackGroundState = FM_BKGND_WINDOWED_FLASHOP;
 8003b9c:	2301      	movs	r3, #1
        duration = TIME_WINDOW_WRITE_REQUEST;
 8003b9e:	f240 424c 	movw	r2, #1100	@ 0x44c
 8003ba2:	4f4b      	ldr	r7, [pc, #300]	@ (8003cd0 <FM_BackgroundProcess+0x1f4>)
        while((fm_flashop_parameters.writeSize > 0) &&
 8003ba4:	4c48      	ldr	r4, [pc, #288]	@ (8003cc8 <FM_BackgroundProcess+0x1ec>)
        FM_CurrentBackGroundState = FM_BKGND_WINDOWED_FLASHOP;
 8003ba6:	7033      	strb	r3, [r6, #0]
        duration = TIME_WINDOW_WRITE_REQUEST;
 8003ba8:	603a      	str	r2, [r7, #0]
        HAL_FLASH_Unlock();
 8003baa:	f005 f937 	bl	8008e1c <HAL_FLASH_Unlock>
        while((fm_flashop_parameters.writeSize > 0) &&
 8003bae:	68a3      	ldr	r3, [r4, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dd05      	ble.n	8003bc0 <FM_BackgroundProcess+0xe4>
          fdReturnValue = FD_WriteData((uint32_t) fm_flashop_parameters.writeDest,
 8003bb4:	e9d4 1000 	ldrd	r1, r0, [r4]
 8003bb8:	f7ff fe54 	bl	8003864 <FD_WriteData>
          if (fdReturnValue == FD_FLASHOP_SUCCESS)
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d06f      	beq.n	8003ca0 <FM_BackgroundProcess+0x1c4>
        HAL_FLASH_Lock();
 8003bc0:	f005 f940 	bl	8008e44 <HAL_FLASH_Lock>
        if (fm_flashop_parameters.writeSize <= 0)
 8003bc4:	68a3      	ldr	r3, [r4, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	dcd1      	bgt.n	8003b6e <FM_BackgroundProcess+0x92>
 8003bca:	e018      	b.n	8003bfe <FM_BackgroundProcess+0x122>
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_NOWINDOW_FLASHOP - Erase operation");
 8003bcc:	4628      	mov	r0, r5
 8003bce:	4a45      	ldr	r2, [pc, #276]	@ (8003ce4 <FM_BackgroundProcess+0x208>)
 8003bd0:	f7fe ff1e 	bl	8002a10 <Log_Module_Print>
        FM_CurrentBackGroundState = FM_BKGND_WINDOWED_FLASHOP;
 8003bd4:	2301      	movs	r3, #1
        duration = TIME_WINDOW_ERASE_REQUEST;
 8003bd6:	f241 0204 	movw	r2, #4100	@ 0x1004
 8003bda:	4f3d      	ldr	r7, [pc, #244]	@ (8003cd0 <FM_BackgroundProcess+0x1f4>)
        while((fm_flashop_parameters.eraseNbrSect > 0) &&
 8003bdc:	4c3a      	ldr	r4, [pc, #232]	@ (8003cc8 <FM_BackgroundProcess+0x1ec>)
        FM_CurrentBackGroundState = FM_BKGND_WINDOWED_FLASHOP;
 8003bde:	7033      	strb	r3, [r6, #0]
        duration = TIME_WINDOW_ERASE_REQUEST;
 8003be0:	603a      	str	r2, [r7, #0]
        HAL_FLASH_Unlock();
 8003be2:	f005 f91b 	bl	8008e1c <HAL_FLASH_Unlock>
        while((fm_flashop_parameters.eraseNbrSect > 0) &&
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	b123      	cbz	r3, 8003bf4 <FM_BackgroundProcess+0x118>
          fdReturnValue = FD_EraseSectors(fm_flashop_parameters.eraseFirstSect);
 8003bea:	68e0      	ldr	r0, [r4, #12]
 8003bec:	f7ff fe52 	bl	8003894 <FD_EraseSectors>
          if (fdReturnValue == FD_FLASHOP_SUCCESS)
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d04e      	beq.n	8003c92 <FM_BackgroundProcess+0x1b6>
        HAL_FLASH_Lock();
 8003bf4:	f005 f926 	bl	8008e44 <HAL_FLASH_Lock>
        if (fm_flashop_parameters.eraseNbrSect == 0)
 8003bf8:	6923      	ldr	r3, [r4, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1b7      	bne.n	8003b6e <FM_BackgroundProcess+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bfe:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003c02:	b672      	cpsid	i
    busy_flash_sem = false;
 8003c04:	2000      	movs	r0, #0
 8003c06:	4d38      	ldr	r5, [pc, #224]	@ (8003ce8 <FM_BackgroundProcess+0x20c>)
    flash_manager_busy = false;
 8003c08:	4e38      	ldr	r6, [pc, #224]	@ (8003cec <FM_BackgroundProcess+0x210>)
    busy_flash_sem = false;
 8003c0a:	7028      	strb	r0, [r5, #0]
    flash_manager_busy = false;
 8003c0c:	7030      	strb	r0, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	f383 8810 	msr	PRIMASK, r3
    if (fm_running_cb != NULL)
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <FM_BackgroundProcess+0x214>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <FM_BackgroundProcess+0x13e>
      fm_running_cb(FM_OPERATION_COMPLETE);
 8003c18:	4798      	blx	r3
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
 8003c1a:	4c36      	ldr	r4, [pc, #216]	@ (8003cf4 <FM_BackgroundProcess+0x218>)
 8003c1c:	e00d      	b.n	8003c3a <FM_BackgroundProcess+0x15e>
 8003c1e:	782b      	ldrb	r3, [r5, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ad      	bne.n	8003b80 <FM_BackgroundProcess+0xa4>
          (busy_flash_sem == false) && (flash_manager_busy == false))
 8003c24:	7833      	ldrb	r3, [r6, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1aa      	bne.n	8003b80 <FM_BackgroundProcess+0xa4>
      LST_remove_head (&fm_cb_pending_list, (tListNode**)&pCbNode);
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	a901      	add	r1, sp, #4
 8003c2e:	f003 fbe1 	bl	80073f4 <LST_remove_head>
      pCbNode->Callback(FM_OPERATION_AVAILABLE);
 8003c32:	9b01      	ldr	r3, [sp, #4]
 8003c34:	2001      	movs	r0, #1
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4798      	blx	r3
    while((LST_is_empty (&fm_cb_pending_list) == false) &&
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f003 fbaa 	bl	8007394 <LST_is_empty>
          (busy_flash_sem == false) && (flash_manager_busy == false))
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d0ec      	beq.n	8003c1e <FM_BackgroundProcess+0x142>
 8003c44:	e79c      	b.n	8003b80 <FM_BackgroundProcess+0xa4>
        RFTS_ReqWindow(duration, &FM_WindowAllowed_Callback);
 8003c46:	4f22      	ldr	r7, [pc, #136]	@ (8003cd0 <FM_BackgroundProcess+0x1f4>)
        LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - No time window granted yet, request one");
 8003c48:	4629      	mov	r1, r5
 8003c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <FM_BackgroundProcess+0x21c>)
 8003c4c:	f7fe fee0 	bl	8002a10 <Log_Module_Print>
        RFTS_ReqWindow(duration, &FM_WindowAllowed_Callback);
 8003c50:	4921      	ldr	r1, [pc, #132]	@ (8003cd8 <FM_BackgroundProcess+0x1fc>)
 8003c52:	6838      	ldr	r0, [r7, #0]
 8003c54:	f000 f876 	bl	8003d44 <RFTS_ReqWindow>
  if (flashop_complete == true)
 8003c58:	e789      	b.n	8003b6e <FM_BackgroundProcess+0x92>
      if (FD_EraseSectors(fm_flashop_parameters.eraseFirstSect) == FD_FLASHOP_SUCCESS)
 8003c5a:	4f1b      	ldr	r7, [pc, #108]	@ (8003cc8 <FM_BackgroundProcess+0x1ec>)
      LOG_INFO_SYSTEM("\r\nFM_BackgroundProcess - Case FM_BKGND_WINDOWED_FLASHOP - Erase operation");
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <FM_BackgroundProcess+0x220>)
 8003c60:	4620      	mov	r0, r4
 8003c62:	f7fe fed5 	bl	8002a10 <Log_Module_Print>
      HAL_FLASH_Unlock();
 8003c66:	f005 f8d9 	bl	8008e1c <HAL_FLASH_Unlock>
      if (FD_EraseSectors(fm_flashop_parameters.eraseFirstSect) == FD_FLASHOP_SUCCESS)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fe12 	bl	8003894 <FD_EraseSectors>
        fm_flashop_parameters.eraseNbrSect--;
 8003c70:	693b      	ldr	r3, [r7, #16]
      if (FD_EraseSectors(fm_flashop_parameters.eraseFirstSect) == FD_FLASHOP_SUCCESS)
 8003c72:	b920      	cbnz	r0, 8003c7e <FM_BackgroundProcess+0x1a2>
        fm_flashop_parameters.eraseFirstSect++;
 8003c74:	68fa      	ldr	r2, [r7, #12]
        fm_flashop_parameters.eraseNbrSect--;
 8003c76:	3b01      	subs	r3, #1
        fm_flashop_parameters.eraseFirstSect++;
 8003c78:	3201      	adds	r2, #1
 8003c7a:	e9c7 2303 	strd	r2, r3, [r7, #12]
      if (fm_flashop_parameters.eraseNbrSect == 0)
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f47f af6c 	bne.w	8003b5c <FM_BackgroundProcess+0x80>
      HAL_FLASH_Lock();
 8003c84:	f005 f8de 	bl	8008e44 <HAL_FLASH_Lock>
        RFTS_RelWindow();
 8003c88:	f000 f8b0 	bl	8003dec <RFTS_RelWindow>
        fm_window_granted = false;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	7033      	strb	r3, [r6, #0]
  if (flashop_complete == true)
 8003c90:	e7b5      	b.n	8003bfe <FM_BackgroundProcess+0x122>
            fm_flashop_parameters.eraseFirstSect++;
 8003c92:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
            fm_flashop_parameters.eraseNbrSect--;
 8003c96:	3b01      	subs	r3, #1
            fm_flashop_parameters.eraseFirstSect++;
 8003c98:	3201      	adds	r2, #1
 8003c9a:	e9c4 2303 	strd	r2, r3, [r4, #12]
 8003c9e:	e7a3      	b.n	8003be8 <FM_BackgroundProcess+0x10c>
            fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 8003ca0:	68a3      	ldr	r3, [r4, #8]
            fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 8003ca2:	e9d4 2100 	ldrd	r2, r1, [r4]
            fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 8003ca6:	3b04      	subs	r3, #4
            fm_flashop_parameters.writeDest += FLASH_WRITE_BLOCK_SIZE;
 8003ca8:	3110      	adds	r1, #16
            fm_flashop_parameters.writeSrc += FLASH_WRITE_BLOCK_SIZE;
 8003caa:	3210      	adds	r2, #16
 8003cac:	e9c4 2100 	strd	r2, r1, [r4]
            fm_flashop_parameters.writeSize -= FLASH_WRITE_BLOCK_SIZE;
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	e77d      	b.n	8003bb0 <FM_BackgroundProcess+0xd4>
 8003cb4:	20005874 	.word	0x20005874
 8003cb8:	200058a0 	.word	0x200058a0
 8003cbc:	0802d998 	.word	0x0802d998
 8003cc0:	0802da34 	.word	0x0802da34
 8003cc4:	2000588c 	.word	0x2000588c
 8003cc8:	20005878 	.word	0x20005878
 8003ccc:	0802da84 	.word	0x0802da84
 8003cd0:	20005870 	.word	0x20005870
 8003cd4:	0802db1c 	.word	0x0802db1c
 8003cd8:	0800390d 	.word	0x0800390d
 8003cdc:	0802d8c8 	.word	0x0802d8c8
 8003ce0:	0802d900 	.word	0x0802d900
 8003ce4:	0802d94c 	.word	0x0802d94c
 8003ce8:	200058a2 	.word	0x200058a2
 8003cec:	200058a1 	.word	0x200058a1
 8003cf0:	20005890 	.word	0x20005890
 8003cf4:	20005898 	.word	0x20005898
 8003cf8:	0802d9d0 	.word	0x0802d9d0
 8003cfc:	0802dad0 	.word	0x0802dad0

08003d00 <RFTS_Timeout_Callback>:
  * @retval None
  */
static void RFTS_Timeout_Callback(void* Argument)
{
  /* Forbid flash operation */
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8003d00:	2101      	movs	r1, #1
{
 8003d02:	b508      	push	{r3, lr}
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8003d04:	4608      	mov	r0, r1
 8003d06:	f7ff fd8f 	bl	8003828 <FD_SetStatus>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d0a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0e:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();
  rfts_window_req_pending = false;
 8003d10:	2100      	movs	r1, #0
 8003d12:	4a02      	ldr	r2, [pc, #8]	@ (8003d1c <RFTS_Timeout_Callback+0x1c>)
 8003d14:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	f383 8810 	msr	PRIMASK, r3
  UTILS_EXIT_CRITICAL_SECTION();
}
 8003d1a:	bd08      	pop	{r3, pc}
 8003d1c:	200058c0 	.word	0x200058c0

08003d20 <event_started_callback>:

static uint32_t event_started_callback(ext_evnt_hndl_t evnt_hndl, uint32_t slot_durn, void* priv_data_ptr)
{
 8003d20:	b508      	push	{r3, lr}
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_ENABLE);
 8003d22:	2100      	movs	r1, #0
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7ff fd7f 	bl	8003828 <FD_SetStatus>
  UTIL_TIMER_Start(&rfts_timer);
 8003d2a:	4804      	ldr	r0, [pc, #16]	@ (8003d3c <event_started_callback+0x1c>)
 8003d2c:	f008 fba6 	bl	800c47c <UTIL_TIMER_Start>
  req_callback();
 8003d30:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <event_started_callback+0x20>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4798      	blx	r3
  RFTS_WindowAllowed_Callback();
  return 0;
}
 8003d36:	2000      	movs	r0, #0
 8003d38:	bd08      	pop	{r3, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200058a8 	.word	0x200058a8
 8003d40:	200058c4 	.word	0x200058c4

08003d44 <RFTS_ReqWindow>:
  if (Callback == NULL)
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d039      	beq.n	8003dbc <RFTS_ReqWindow+0x78>
{
 8003d48:	b530      	push	{r4, r5, lr}
 8003d4a:	b091      	sub	sp, #68	@ 0x44
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d4c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003d50:	b672      	cpsid	i
  if (rfts_window_req_pending == true)
 8003d52:	4d1f      	ldr	r5, [pc, #124]	@ (8003dd0 <RFTS_ReqWindow+0x8c>)
 8003d54:	782c      	ldrb	r4, [r5, #0]
 8003d56:	b124      	cbz	r4, 8003d62 <RFTS_ReqWindow+0x1e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	f383 8810 	msr	PRIMASK, r3
    return RFTS_WINDOW_REQ_FAILED;
 8003d5c:	2001      	movs	r0, #1
}
 8003d5e:	b011      	add	sp, #68	@ 0x44
 8003d60:	bd30      	pop	{r4, r5, pc}
    rfts_window_req_pending = true;
 8003d62:	2201      	movs	r2, #1
 8003d64:	702a      	strb	r2, [r5, #0]
 8003d66:	f383 8810 	msr	PRIMASK, r3
  req_callback = Callback;
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <RFTS_ReqWindow+0x90>)
  extrnl_evnt_config.deadline = 0;
 8003d6c:	2200      	movs	r2, #0
  UTIL_TIMER_Create(&rfts_timer,
 8003d6e:	9400      	str	r4, [sp, #0]
  req_callback = Callback;
 8003d70:	6019      	str	r1, [r3, #0]
  extrnl_evnt_config.deadline = 0;
 8003d72:	2300      	movs	r3, #0
  extrnl_evnt_config.priority = PRIORITY_DEFAULT;
 8003d74:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
  extrnl_evnt_config.deadline = 0;
 8003d78:	e9cd 2302 	strd	r2, r3, [sp, #8]
  extrnl_evnt_config.strt_min = 0;
 8003d7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  extrnl_evnt_config.strt_max = 0;
 8003d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
  UTIL_TIMER_Create(&rfts_timer,
 8003d84:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <RFTS_ReqWindow+0x94>)
  extrnl_evnt_config.durn_max = 0;
 8003d86:	e9cd 0408 	strd	r0, r4, [sp, #32]
  UTIL_TIMER_Create(&rfts_timer,
 8003d8a:	fba3 3000 	umull	r3, r0, r3, r0
  extrnl_evnt_config.evnt_strtd_cbk = &event_started_callback;
 8003d8e:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <RFTS_ReqWindow+0x98>)
  UTIL_TIMER_Create(&rfts_timer,
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <RFTS_ReqWindow+0x9c>)
  extrnl_evnt_config.priority = PRIORITY_DEFAULT;
 8003d92:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
  extrnl_evnt_config.evnt_strtd_cbk = &event_started_callback;
 8003d96:	920d      	str	r2, [sp, #52]	@ 0x34
  UTIL_TIMER_Create(&rfts_timer,
 8003d98:	0981      	lsrs	r1, r0, #6
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4811      	ldr	r0, [pc, #68]	@ (8003de4 <RFTS_ReqWindow+0xa0>)
  extrnl_evnt_config.evnt_abortd_cbk = NULL;
 8003d9e:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  extrnl_evnt_config.prdc_intrvl = 0;
 8003da2:	940a      	str	r4, [sp, #40]	@ 0x28
  extrnl_evnt_config.ptr_priv = NULL;
 8003da4:	940c      	str	r4, [sp, #48]	@ 0x30
  UTIL_TIMER_Create(&rfts_timer,
 8003da6:	f008 fb4d 	bl	800c444 <UTIL_TIMER_Create>
  ext_event_handler = evnt_schdlr_rgstr_gnrc_evnt(&extrnl_evnt_config);
 8003daa:	a802      	add	r0, sp, #8
 8003dac:	f00a fd1b 	bl	800e7e6 <evnt_schdlr_rgstr_gnrc_evnt>
 8003db0:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <RFTS_ReqWindow+0xa4>)
 8003db2:	6018      	str	r0, [r3, #0]
  if (ext_event_handler == NULL)
 8003db4:	b120      	cbz	r0, 8003dc0 <RFTS_ReqWindow+0x7c>
  return RFTS_CMD_OK;
 8003db6:	4620      	mov	r0, r4
}
 8003db8:	b011      	add	sp, #68	@ 0x44
 8003dba:	bd30      	pop	{r4, r5, pc}
    return RFTS_WINDOW_REQ_FAILED;
 8003dbc:	2001      	movs	r0, #1
}
 8003dbe:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003dc0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc4:	b672      	cpsid	i
    rfts_window_req_pending = false;
 8003dc6:	7028      	strb	r0, [r5, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	f383 8810 	msr	PRIMASK, r3
    return RFTS_WINDOW_REQ_FAILED;
 8003dcc:	e7c6      	b.n	8003d5c <RFTS_ReqWindow+0x18>
 8003dce:	bf00      	nop
 8003dd0:	200058c0 	.word	0x200058c0
 8003dd4:	200058c4 	.word	0x200058c4
 8003dd8:	10624dd3 	.word	0x10624dd3
 8003ddc:	08003d21 	.word	0x08003d21
 8003de0:	08003d01 	.word	0x08003d01
 8003de4:	200058a8 	.word	0x200058a8
 8003de8:	200058a4 	.word	0x200058a4

08003dec <RFTS_RelWindow>:
{
 8003dec:	b510      	push	{r4, lr}
  UTIL_TIMER_Stop(&rfts_timer);
 8003dee:	480c      	ldr	r0, [pc, #48]	@ (8003e20 <RFTS_RelWindow+0x34>)
 8003df0:	f008 fb56 	bl	800c4a0 <UTIL_TIMER_Stop>
  if (evnt_schdlr_gnrc_evnt_cmplt(ext_event_handler) == 0)
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <RFTS_RelWindow+0x38>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	f00a fd59 	bl	800e8ae <evnt_schdlr_gnrc_evnt_cmplt>
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8003dfc:	2101      	movs	r1, #1
  if (evnt_schdlr_gnrc_evnt_cmplt(ext_event_handler) == 0)
 8003dfe:	4604      	mov	r4, r0
  FD_SetStatus(FD_FLASHACCESS_RFTS, LL_FLASH_DISABLE);
 8003e00:	4608      	mov	r0, r1
 8003e02:	f7ff fd11 	bl	8003828 <FD_SetStatus>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e06:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003e0a:	b672      	cpsid	i
  rfts_window_req_pending = false;
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4a06      	ldr	r2, [pc, #24]	@ (8003e28 <RFTS_RelWindow+0x3c>)
 8003e10:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	f383 8810 	msr	PRIMASK, r3
  if (evnt_schdlr_gnrc_evnt_cmplt(ext_event_handler) == 0)
 8003e16:	1a60      	subs	r0, r4, r1
 8003e18:	bf18      	it	ne
 8003e1a:	2001      	movne	r0, #1
}
 8003e1c:	0040      	lsls	r0, r0, #1
 8003e1e:	bd10      	pop	{r4, pc}
 8003e20:	200058a8 	.word	0x200058a8
 8003e24:	200058a4 	.word	0x200058a4
 8003e28:	200058c0 	.word	0x200058c0

08003e2c <SNVMA_FlashManagerCallback>:
  return error;
}

/* Callback Definition ------------------------------------------------------*/
void SNVMA_FlashManagerCallback(FM_FlashOp_Status_t Status)
{
 8003e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static uint8_t buffCnt = 0x00;

  static SNVMA_BankElt_t * tmpBank = NULL;

  /* Check Flash operation state */
  switch (SNVMA_FlashInfo.FlashOpState)
 8003e30:	4d8e      	ldr	r5, [pc, #568]	@ (800406c <SNVMA_FlashManagerCallback+0x240>)
{
 8003e32:	4606      	mov	r6, r0
  switch (SNVMA_FlashInfo.FlashOpState)
 8003e34:	78af      	ldrb	r7, [r5, #2]
{
 8003e36:	b087      	sub	sp, #28
  switch (SNVMA_FlashInfo.FlashOpState)
 8003e38:	2f03      	cmp	r7, #3
 8003e3a:	d852      	bhi.n	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
 8003e3c:	e8df f017 	tbh	[pc, r7, lsl #1]
 8003e40:	018d01e3 	.word	0x018d01e3
 8003e44:	005400b2 	.word	0x005400b2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e48:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003e4c:	b672      	cpsid	i

  /* Enter critical section */
  UTILS_ENTER_CRITICAL_SECTION();

  /* Check if there is an old bank to pursue counter value */
  if (SNVMA_NvmConfiguration[NvmId].p_BankForRestore != NULL)
 8003e4e:	eb04 030a 	add.w	r3, r4, sl
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	b123      	cbz	r3, 8003e60 <SNVMA_FlashManagerCallback+0x34>
  {
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
                                      (SNVMA_NvmConfiguration[NvmId].p_BankForRestore->p_StartAddr))->Counter) + 1;
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	3301      	adds	r3, #1
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
 8003e5c:	f889 3001 	strb.w	r3, [r9, #1]
  /* Update CRC value */
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);

  /* Update buffers info */
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 8003e60:	44a2      	add	sl, r4
 8003e62:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8003e66:	ea4f 0888 	mov.w	r8, r8, lsl #2
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 8003e6a:	f8a9 3005 	strh.w	r3, [r9, #5]
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 8003e6e:	f8da 302c 	ldr.w	r3, [sl, #44]	@ 0x2c
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8003e72:	fa5f f888 	uxtb.w	r8, r8
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 8003e76:	f8a9 3008 	strh.w	r3, [r9, #8]
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 8003e7a:	f8da 3034 	ldr.w	r3, [sl, #52]	@ 0x34
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8003e7e:	f889 8004 	strb.w	r8, [r9, #4]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 8003e82:	f8a9 300b 	strh.w	r3, [r9, #11]
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
  SNVMA_WriteBankHeader.SizeId4 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x03].Size;
 8003e86:	f8da 303c 	ldr.w	r3, [sl, #60]	@ 0x3c
 8003e8a:	f8a9 300e 	strh.w	r3, [r9, #14]
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);
 8003e8e:	9b05      	ldr	r3, [sp, #20]
 8003e90:	f8a9 3002 	strh.w	r3, [r9, #2]
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
 8003e94:	f108 0301 	add.w	r3, r8, #1
 8003e98:	f889 3007 	strb.w	r3, [r9, #7]
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 8003e9c:	f108 0302 	add.w	r3, r8, #2
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 8003ea0:	f108 0803 	add.w	r8, r8, #3
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 8003ea4:	f889 300a 	strb.w	r3, [r9, #10]
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 8003ea8:	f889 800d 	strb.w	r8, [r9, #13]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	f382 8810 	msr	PRIMASK, r2

  /* Leave critical section */
  UTILS_EXIT_CRITICAL_SECTION ();

  /* Write the header */
  error = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 8003eb0:	f8da 1008 	ldr.w	r1, [sl, #8]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004070 <SNVMA_FlashManagerCallback+0x244>)
 8003eb8:	6809      	ldr	r1, [r1, #0]
 8003eba:	486e      	ldr	r0, [pc, #440]	@ (8004074 <SNVMA_FlashManagerCallback+0x248>)
 8003ebc:	f7ff fd7a 	bl	80039b4 <FM_Write>
        if (flashFunRet == FM_ERROR)
 8003ec0:	2802      	cmp	r0, #2
 8003ec2:	f000 86dc 	beq.w	8004c7e <SNVMA_FlashManagerCallback+0xe52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ec6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003eca:	b672      	cpsid	i
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp |=
 8003ecc:	782a      	ldrb	r2, [r5, #0]
 8003ece:	eb04 1282 	add.w	r2, r4, r2, lsl #6
 8003ed2:	7893      	ldrb	r3, [r2, #2]
 8003ed4:	ea43 1303 	orr.w	r3, r3, r3, lsl #4
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp &= 0xF0;
 8003ed8:	f023 030f 	bic.w	r3, r3, #15
 8003edc:	7093      	strb	r3, [r2, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	f381 8810 	msr	PRIMASK, r1
}
 8003ee2:	b007      	add	sp, #28
 8003ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_RETRY_WRITE");
 8003ee8:	2101      	movs	r1, #1
 8003eea:	2000      	movs	r0, #0
 8003eec:	4a62      	ldr	r2, [pc, #392]	@ (8004078 <SNVMA_FlashManagerCallback+0x24c>)
 8003eee:	f7fe fd8f 	bl	8002a10 <Log_Module_Print>
      if (Status == FM_OPERATION_COMPLETE)
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	f040 827f 	bne.w	80043f6 <SNVMA_FlashManagerCallback+0x5ca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ef8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003efc:	b672      	cpsid	i
          if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 8003efe:	4c5f      	ldr	r4, [pc, #380]	@ (800407c <SNVMA_FlashManagerCallback+0x250>)
 8003f00:	782b      	ldrb	r3, [r5, #0]
        SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 8003f02:	70ae      	strb	r6, [r5, #2]
          if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 8003f04:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 8003f08:	789b      	ldrb	r3, [r3, #2]
 8003f0a:	07d9      	lsls	r1, r3, #31
 8003f0c:	f100 86fb 	bmi.w	8004d06 <SNVMA_FlashManagerCallback+0xeda>
 8003f10:	0798      	lsls	r0, r3, #30
 8003f12:	f100 86f7 	bmi.w	8004d04 <SNVMA_FlashManagerCallback+0xed8>
 8003f16:	0759      	lsls	r1, r3, #29
 8003f18:	f101 8069 	bmi.w	8004fee <SNVMA_FlashManagerCallback+0x11c2>
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	f101 806a 	bmi.w	8004ff6 <SNVMA_FlashManagerCallback+0x11ca>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	f382 8810 	msr	PRIMASK, r2
  uint32_t crcValue = 0x00;
 8003f26:	2700      	movs	r7, #0
        flashFunRet = StartFlashWrite (SNVMA_FlashInfo.NvmId);
 8003f28:	f895 8000 	ldrb.w	r8, [r5]
  memset ((void *)&SNVMA_WriteBankHeader,
 8003f2c:	f8df 9144 	ldr.w	r9, [pc, #324]	@ 8004074 <SNVMA_FlashManagerCallback+0x248>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f30:	eb04 1388 	add.w	r3, r4, r8, lsl #6
 8003f34:	6a19      	ldr	r1, [r3, #32]
  memset ((void *)&SNVMA_WriteBankHeader,
 8003f36:	e9c9 7700 	strd	r7, r7, [r9]
 8003f3a:	e9c9 7702 	strd	r7, r7, [r9, #8]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f3e:	ea4f 1a88 	mov.w	sl, r8, lsl #6
  uint32_t crcValue = 0x00;
 8003f42:	9705      	str	r7, [sp, #20]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f44:	2900      	cmp	r1, #0
 8003f46:	f000 8695 	beq.w	8004c74 <SNVMA_FlashManagerCallback+0xe48>
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8003f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f4c:	484c      	ldr	r0, [pc, #304]	@ (8004080 <SNVMA_FlashManagerCallback+0x254>)
 8003f4e:	ab05      	add	r3, sp, #20
 8003f50:	f002 fd58 	bl	8006a04 <CRCCTRL_Calculate>
        if (CRCCTRL_OK == eReturn)
 8003f54:	b1f8      	cbz	r0, 8003f96 <SNVMA_FlashManagerCallback+0x16a>
        else if (CRCCTRL_BUSY == eReturn)
 8003f56:	2802      	cmp	r0, #2
 8003f58:	d021      	beq.n	8003f9e <SNVMA_FlashManagerCallback+0x172>
          Error_Handler();
 8003f5a:	f7fc fddf 	bl	8000b1c <Error_Handler>
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 8003f5e:	ea4f 06c8 	mov.w	r6, r8, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f62:	443e      	add	r6, r7
 8003f64:	3604      	adds	r6, #4
 8003f66:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8003f6a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f6e:	b191      	cbz	r1, 8003f96 <SNVMA_FlashManagerCallback+0x16a>
      if (crcValue == 0x00)
 8003f70:	9805      	ldr	r0, [sp, #20]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8003f72:	6852      	ldr	r2, [r2, #4]
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8003f74:	ab05      	add	r3, sp, #20
      if (crcValue == 0x00)
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d0e8      	beq.n	8003f4c <SNVMA_FlashManagerCallback+0x120>
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8003f7a:	4841      	ldr	r0, [pc, #260]	@ (8004080 <SNVMA_FlashManagerCallback+0x254>)
 8003f7c:	f002 fdb8 	bl	8006af0 <CRCCTRL_Accumulate>
        if (CRCCTRL_OK == eReturn)
 8003f80:	b148      	cbz	r0, 8003f96 <SNVMA_FlashManagerCallback+0x16a>
        else if (CRCCTRL_BUSY == eReturn)
 8003f82:	2802      	cmp	r0, #2
 8003f84:	d0ef      	beq.n	8003f66 <SNVMA_FlashManagerCallback+0x13a>
          Error_Handler();
 8003f86:	f7fc fdc9 	bl	8000b1c <Error_Handler>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f8a:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8003f8e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8003f92:	2900      	cmp	r1, #0
 8003f94:	d1ec      	bne.n	8003f70 <SNVMA_FlashManagerCallback+0x144>
      cnt++;
 8003f96:	3701      	adds	r7, #1
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 8003f98:	2f04      	cmp	r7, #4
 8003f9a:	f43f af55 	beq.w	8003e48 <SNVMA_FlashManagerCallback+0x1c>
 8003f9e:	ea4f 06c8 	mov.w	r6, r8, lsl #3
 8003fa2:	e7de      	b.n	8003f62 <SNVMA_FlashManagerCallback+0x136>
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_ERASE_BANK");
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	4a36      	ldr	r2, [pc, #216]	@ (8004084 <SNVMA_FlashManagerCallback+0x258>)
 8003faa:	f7fe fd31 	bl	8002a10 <Log_Module_Print>
      if (Status == FM_OPERATION_COMPLETE)
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	f040 81d0 	bne.w	8004354 <SNVMA_FlashManagerCallback+0x528>
        InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_COMPLETE);
 8003fb4:	782b      	ldrb	r3, [r5, #0]
{
  uint8_t pendingShift = 0x00;
  uint8_t tmpMask = 0x00;

  for (pendingShift = 0x00;
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8003fb6:	4c31      	ldr	r4, [pc, #196]	@ (800407c <SNVMA_FlashManagerCallback+0x250>)
 8003fb8:	019a      	lsls	r2, r3, #6
 8003fba:	9202      	str	r2, [sp, #8]
 8003fbc:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 8003fc0:	7891      	ldrb	r1, [r2, #2]
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	f000 84c0 	beq.w	8004948 <SNVMA_FlashManagerCallback+0xb1c>
 8003fc8:	46b0      	mov	r8, r6
        (pendingShift < SNVMA_MAX_NUMBER_BUFFER));
       pendingShift++)
  {
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8003fca:	f04f 0a01 	mov.w	sl, #1
 8003fce:	eb04 1983 	add.w	r9, r4, r3, lsl #6
 8003fd2:	f109 0910 	add.w	r9, r9, #16
 8003fd6:	9303      	str	r3, [sp, #12]
 8003fd8:	9601      	str	r6, [sp, #4]
 8003fda:	f108 0304 	add.w	r3, r8, #4
 8003fde:	fa0a f303 	lsl.w	r3, sl, r3

    /* Is there an active write request ? */
    if (tmpMask != 0x00)
 8003fe2:	420b      	tst	r3, r1
    {
      /* Has a new request come ? */
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8003fe4:	fa21 f008 	lsr.w	r0, r1, r8
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8003fe8:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 8003fec:	d021      	beq.n	8004032 <SNVMA_FlashManagerCallback+0x206>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8003fee:	f010 0601 	ands.w	r6, r0, #1
 8003ff2:	d11e      	bne.n	8004032 <SNVMA_FlashManagerCallback+0x206>
      {
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8003ff4:	f8d9 3000 	ldr.w	r3, [r9]
 8003ff8:	b173      	cbz	r3, 8004018 <SNVMA_FlashManagerCallback+0x1ec>
        {
          /* Invoke callback */
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4798      	blx	r3

          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8003ffe:	2101      	movs	r1, #1
 8004000:	4630      	mov	r0, r6
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	4a20      	ldr	r2, [pc, #128]	@ (8004088 <SNVMA_FlashManagerCallback+0x25c>)
 8004006:	f7fe fd03 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800400e:	b672      	cpsid	i

          /* Enter critical section */
          UTILS_ENTER_CRITICAL_SECTION();

          /* Clear callback list */
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004010:	f8c9 6000 	str.w	r6, [r9]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004018:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800401c:	b672      	cpsid	i

        /* Enter critical section */
        UTILS_ENTER_CRITICAL_SECTION();

        /* Remove this pending buffer from the active list */
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 800401e:	9b02      	ldr	r3, [sp, #8]
 8004020:	18e3      	adds	r3, r4, r3
 8004022:	789a      	ldrb	r2, [r3, #2]
 8004024:	ea22 020b 	bic.w	r2, r2, fp
 8004028:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 800402e:	7899      	ldrb	r1, [r3, #2]
 8004030:	b131      	cbz	r1, 8004040 <SNVMA_FlashManagerCallback+0x214>
 8004032:	f108 0801 	add.w	r8, r8, #1
 8004036:	f1b8 0f04 	cmp.w	r8, #4
 800403a:	f109 0904 	add.w	r9, r9, #4
 800403e:	d1cc      	bne.n	8003fda <SNVMA_FlashManagerCallback+0x1ae>
        if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp == 0x00)
 8004040:	782b      	ldrb	r3, [r5, #0]
 8004042:	9e01      	ldr	r6, [sp, #4]
 8004044:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 847c 	beq.w	8004948 <SNVMA_FlashManagerCallback+0xb1c>
 8004050:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 800408c <SNVMA_FlashManagerCallback+0x260>
        if (SNVMA_IdBitmask != 0x00000000)
 8004054:	f8d8 0000 	ldr.w	r0, [r8]
 8004058:	2800      	cmp	r0, #0
 800405a:	f000 846c 	beq.w	8004936 <SNVMA_FlashManagerCallback+0xb0a>
            if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 800405e:	07c3      	lsls	r3, r0, #31
 8004060:	f100 8484 	bmi.w	800496c <SNVMA_FlashManagerCallback+0xb40>
 8004064:	2301      	movs	r3, #1
 8004066:	469c      	mov	ip, r3
 8004068:	e013      	b.n	8004092 <SNVMA_FlashManagerCallback+0x266>
 800406a:	bf00      	nop
 800406c:	200058f8 	.word	0x200058f8
 8004070:	200058fc 	.word	0x200058fc
 8004074:	20005910 	.word	0x20005910
 8004078:	0802de6c 	.word	0x0802de6c
 800407c:	200000c0 	.word	0x200000c0
 8004080:	20000098 	.word	0x20000098
 8004084:	0802ddb8 	.word	0x0802ddb8
 8004088:	0802dbc0 	.word	0x0802dbc0
 800408c:	20005920 	.word	0x20005920
 8004090:	460b      	mov	r3, r1
                cnt < SNVMA_MAX_NUMBER_NVM;
 8004092:	2b20      	cmp	r3, #32
 8004094:	d01d      	beq.n	80040d2 <SNVMA_FlashManagerCallback+0x2a6>
            if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 8004096:	fa0c f203 	lsl.w	r2, ip, r3
 800409a:	4202      	tst	r2, r0
 800409c:	f103 0101 	add.w	r1, r3, #1
 80040a0:	d0f6      	beq.n	8004090 <SNVMA_FlashManagerCallback+0x264>
 80040a2:	b2da      	uxtb	r2, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040a4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80040a8:	b672      	cpsid	i
              SNVMA_FlashInfo.NvmId = cnt;
 80040aa:	702a      	strb	r2, [r5, #0]
              SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 80040ac:	2200      	movs	r2, #0
                if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 80040ae:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 80040b2:	789b      	ldrb	r3, [r3, #2]
              SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 80040b4:	70aa      	strb	r2, [r5, #2]
                if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 80040b6:	07d8      	lsls	r0, r3, #31
 80040b8:	f100 87a2 	bmi.w	8005000 <SNVMA_FlashManagerCallback+0x11d4>
 80040bc:	079a      	lsls	r2, r3, #30
 80040be:	f100 879e 	bmi.w	8004ffe <SNVMA_FlashManagerCallback+0x11d2>
 80040c2:	075e      	lsls	r6, r3, #29
 80040c4:	f100 87a6 	bmi.w	8005014 <SNVMA_FlashManagerCallback+0x11e8>
 80040c8:	0718      	lsls	r0, r3, #28
 80040ca:	f100 87a7 	bmi.w	800501c <SNVMA_FlashManagerCallback+0x11f0>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	f381 8810 	msr	PRIMASK, r1
  uint32_t crcValue = 0x00;
 80040d2:	2700      	movs	r7, #0
          LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_ERASE_BANK - Start the pending write operation");
 80040d4:	2101      	movs	r1, #1
 80040d6:	2000      	movs	r0, #0
 80040d8:	4a93      	ldr	r2, [pc, #588]	@ (8004328 <SNVMA_FlashManagerCallback+0x4fc>)
 80040da:	f7fe fc99 	bl	8002a10 <Log_Module_Print>
          flashFunRet = StartFlashWrite (SNVMA_FlashInfo.NvmId);
 80040de:	f895 a000 	ldrb.w	sl, [r5]
  memset ((void *)&SNVMA_WriteBankHeader,
 80040e2:	f8df 9258 	ldr.w	r9, [pc, #600]	@ 800433c <SNVMA_FlashManagerCallback+0x510>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 80040e6:	eb04 138a 	add.w	r3, r4, sl, lsl #6
 80040ea:	6a19      	ldr	r1, [r3, #32]
  memset ((void *)&SNVMA_WriteBankHeader,
 80040ec:	e9c9 7700 	strd	r7, r7, [r9]
 80040f0:	e9c9 7702 	strd	r7, r7, [r9, #8]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 80040f4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
  uint32_t crcValue = 0x00;
 80040f8:	9705      	str	r7, [sp, #20]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 80040fa:	2900      	cmp	r1, #0
 80040fc:	f000 8618 	beq.w	8004d30 <SNVMA_FlashManagerCallback+0xf04>
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004102:	488a      	ldr	r0, [pc, #552]	@ (800432c <SNVMA_FlashManagerCallback+0x500>)
 8004104:	ab05      	add	r3, sp, #20
 8004106:	f002 fc7d 	bl	8006a04 <CRCCTRL_Calculate>
        if (CRCCTRL_OK == eReturn)
 800410a:	b1f8      	cbz	r0, 800414c <SNVMA_FlashManagerCallback+0x320>
        else if (CRCCTRL_BUSY == eReturn)
 800410c:	2802      	cmp	r0, #2
 800410e:	d021      	beq.n	8004154 <SNVMA_FlashManagerCallback+0x328>
          Error_Handler();
 8004110:	f7fc fd04 	bl	8000b1c <Error_Handler>
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 8004114:	ea4f 06ca 	mov.w	r6, sl, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004118:	443e      	add	r6, r7
 800411a:	3604      	adds	r6, #4
 800411c:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004120:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004124:	b191      	cbz	r1, 800414c <SNVMA_FlashManagerCallback+0x320>
      if (crcValue == 0x00)
 8004126:	9805      	ldr	r0, [sp, #20]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004128:	6852      	ldr	r2, [r2, #4]
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800412a:	ab05      	add	r3, sp, #20
      if (crcValue == 0x00)
 800412c:	2800      	cmp	r0, #0
 800412e:	d0e8      	beq.n	8004102 <SNVMA_FlashManagerCallback+0x2d6>
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8004130:	487e      	ldr	r0, [pc, #504]	@ (800432c <SNVMA_FlashManagerCallback+0x500>)
 8004132:	f002 fcdd 	bl	8006af0 <CRCCTRL_Accumulate>
        if (CRCCTRL_OK == eReturn)
 8004136:	b148      	cbz	r0, 800414c <SNVMA_FlashManagerCallback+0x320>
        else if (CRCCTRL_BUSY == eReturn)
 8004138:	2802      	cmp	r0, #2
 800413a:	d0ef      	beq.n	800411c <SNVMA_FlashManagerCallback+0x2f0>
          Error_Handler();
 800413c:	f7fc fcee 	bl	8000b1c <Error_Handler>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004140:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004144:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004148:	2900      	cmp	r1, #0
 800414a:	d1ec      	bne.n	8004126 <SNVMA_FlashManagerCallback+0x2fa>
      cnt++;
 800414c:	3701      	adds	r7, #1
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 800414e:	2f04      	cmp	r7, #4
 8004150:	f000 8410 	beq.w	8004974 <SNVMA_FlashManagerCallback+0xb48>
 8004154:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8004158:	e7de      	b.n	8004118 <SNVMA_FlashManagerCallback+0x2ec>
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_BUFFER_WRITE");
 800415a:	2101      	movs	r1, #1
 800415c:	2000      	movs	r0, #0
 800415e:	4a74      	ldr	r2, [pc, #464]	@ (8004330 <SNVMA_FlashManagerCallback+0x504>)
 8004160:	f7fe fc56 	bl	8002a10 <Log_Module_Print>
      if (Status == FM_OPERATION_COMPLETE)
 8004164:	2e00      	cmp	r6, #0
 8004166:	f040 819d 	bne.w	80044a4 <SNVMA_FlashManagerCallback+0x678>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800416a:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800416e:	b672      	cpsid	i
 8004170:	786b      	ldrb	r3, [r5, #1]
 8004172:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8004340 <SNVMA_FlashManagerCallback+0x514>
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 8004176:	2b02      	cmp	r3, #2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004178:	7828      	ldrb	r0, [r5, #0]
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 800417a:	f89c 1000 	ldrb.w	r1, [ip]
 800417e:	f240 8255 	bls.w	800462c <SNVMA_FlashManagerCallback+0x800>
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004182:	4c6c      	ldr	r4, [pc, #432]	@ (8004334 <SNVMA_FlashManagerCallback+0x508>)
          buffCnt++;
 8004184:	1c4a      	adds	r2, r1, #1
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004186:	eb04 1380 	add.w	r3, r4, r0, lsl #6
 800418a:	6a1b      	ldr	r3, [r3, #32]
          buffCnt++;
 800418c:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 869a 	bne.w	8004ec8 <SNVMA_FlashManagerCallback+0x109c>
 8004194:	2a03      	cmp	r2, #3
            SNVMA_FlashInfo.BufferId = 0x00;
 8004196:	4633      	mov	r3, r6
 8004198:	bf98      	it	ls
 800419a:	ea4f 0ec0 	movls.w	lr, r0, lsl #3
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800419e:	f200 8283 	bhi.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
            SNVMA_FlashInfo.BufferId++;
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2db      	uxtb	r3, r3
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80041a6:	eb0e 0203 	add.w	r2, lr, r3
 80041aa:	3204      	adds	r2, #4
 80041ac:	f854 9032 	ldr.w	r9, [r4, r2, lsl #3]
          buffCnt++;
 80041b0:	1c8a      	adds	r2, r1, #2
 80041b2:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80041b4:	f1b9 0f00 	cmp.w	r9, #0
 80041b8:	f040 8276 	bne.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
 80041bc:	2a03      	cmp	r2, #3
 80041be:	f200 8273 	bhi.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	f040 8251 	bne.w	800466a <SNVMA_FlashManagerCallback+0x83e>
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80041c8:	eb04 1080 	add.w	r0, r4, r0, lsl #6
 80041cc:	6a03      	ldr	r3, [r0, #32]
          buffCnt++;
 80041ce:	1cca      	adds	r2, r1, #3
 80041d0:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 8717 	bne.w	8005006 <SNVMA_FlashManagerCallback+0x11da>
 80041d8:	2a04      	cmp	r2, #4
 80041da:	f000 8265 	beq.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
            SNVMA_FlashInfo.BufferId++;
 80041de:	3301      	adds	r3, #1
 80041e0:	b2db      	uxtb	r3, r3
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80041e2:	449e      	add	lr, r3
 80041e4:	f10e 0e04 	add.w	lr, lr, #4
 80041e8:	f854 003e 	ldr.w	r0, [r4, lr, lsl #3]
          buffCnt++;
 80041ec:	1d0a      	adds	r2, r1, #4
 80041ee:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80041f0:	2800      	cmp	r0, #0
 80041f2:	f040 8259 	bne.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
 80041f6:	2a03      	cmp	r2, #3
 80041f8:	f200 8256 	bhi.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	f040 824f 	bne.w	80046a0 <SNVMA_FlashManagerCallback+0x874>
            SNVMA_FlashInfo.BufferId = 0x00;
 8004202:	4603      	mov	r3, r0
 8004204:	e24e      	b.n	80046a4 <SNVMA_FlashManagerCallback+0x878>
      LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_HEADER_WRITE");
 8004206:	2101      	movs	r1, #1
 8004208:	2000      	movs	r0, #0
 800420a:	4a4b      	ldr	r2, [pc, #300]	@ (8004338 <SNVMA_FlashManagerCallback+0x50c>)
 800420c:	f7fe fc00 	bl	8002a10 <Log_Module_Print>
      if (Status == FM_OPERATION_COMPLETE)
 8004210:	2e00      	cmp	r6, #0
 8004212:	f040 81a5 	bne.w	8004560 <SNVMA_FlashManagerCallback+0x734>
                           (uint32_t *)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr,
 8004216:	4c47      	ldr	r4, [pc, #284]	@ (8004334 <SNVMA_FlashManagerCallback+0x508>)
 8004218:	782b      	ldrb	r3, [r5, #0]
    if (p_Source[cnt] != p_Destination[cnt])
 800421a:	4a48      	ldr	r2, [pc, #288]	@ (800433c <SNVMA_FlashManagerCallback+0x510>)
                           (uint32_t *)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr,
 800421c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
        if (IsSameContent ((uint32_t *)&SNVMA_WriteBankHeader,
 8004220:	689b      	ldr	r3, [r3, #8]
       (cnt < Size) && (error == TRUE);
 8004222:	6811      	ldr	r1, [r2, #0]
        if (IsSameContent ((uint32_t *)&SNVMA_WriteBankHeader,
 8004224:	681b      	ldr	r3, [r3, #0]
       (cnt < Size) && (error == TRUE);
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4288      	cmp	r0, r1
 800422a:	f040 829f 	bne.w	800476c <SNVMA_FlashManagerCallback+0x940>
 800422e:	6858      	ldr	r0, [r3, #4]
 8004230:	6851      	ldr	r1, [r2, #4]
 8004232:	4288      	cmp	r0, r1
 8004234:	f040 829a 	bne.w	800476c <SNVMA_FlashManagerCallback+0x940>
 8004238:	6898      	ldr	r0, [r3, #8]
 800423a:	6891      	ldr	r1, [r2, #8]
 800423c:	4288      	cmp	r0, r1
 800423e:	f040 8295 	bne.w	800476c <SNVMA_FlashManagerCallback+0x940>
        if (IsSameContent ((uint32_t *)&SNVMA_WriteBankHeader,
 8004242:	68d2      	ldr	r2, [r2, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	429a      	cmp	r2, r3
 8004248:	f040 8290 	bne.w	800476c <SNVMA_FlashManagerCallback+0x940>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800424c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004250:	b672      	cpsid	i
          SNVMA_FlashInfo.FlashOpState = SNVMA_BUFFER_WRITE;
 8004252:	2701      	movs	r7, #1
          buffCnt = 0x00;
 8004254:	4a3a      	ldr	r2, [pc, #232]	@ (8004340 <SNVMA_FlashManagerCallback+0x514>)
          SNVMA_FlashInfo.FlashOpState = SNVMA_BUFFER_WRITE;
 8004256:	70af      	strb	r7, [r5, #2]
          buffCnt = 0x00;
 8004258:	7016      	strb	r6, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425a:	f383 8810 	msr	PRIMASK, r3
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 800425e:	782b      	ldrb	r3, [r5, #0]
 8004260:	7869      	ldrb	r1, [r5, #1]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[SNVMA_FlashInfo.BufferId],
 8004262:	eb04 1283 	add.w	r2, r4, r3, lsl #6
          flashFunRet = FM_Write (
 8004266:	6892      	ldr	r2, [r2, #8]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 8004268:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800426c:	3304      	adds	r3, #4
          flashFunRet = FM_Write (
 800426e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004272:	6851      	ldr	r1, [r2, #4]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 8004274:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
          flashFunRet = FM_Write (
 8004278:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 800427c:	6852      	ldr	r2, [r2, #4]
 800427e:	4b31      	ldr	r3, [pc, #196]	@ (8004344 <SNVMA_FlashManagerCallback+0x518>)
 8004280:	f7ff fb98 	bl	80039b4 <FM_Write>
          if (flashFunRet == FM_ERROR)
 8004284:	2802      	cmp	r0, #2
 8004286:	f47f ae2c 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 800428a:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 800428c:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 8004290:	7891      	ldrb	r1, [r2, #2]
 8004292:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8004296:	b3a1      	cbz	r1, 8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004298:	eb04 1983 	add.w	r9, r4, r3, lsl #6
 800429c:	f109 0910 	add.w	r9, r9, #16
 80042a0:	9301      	str	r3, [sp, #4]
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80042a2:	1d33      	adds	r3, r6, #4
 80042a4:	fa07 f303 	lsl.w	r3, r7, r3
    if (tmpMask != 0x00)
 80042a8:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80042aa:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 80042ae:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 80042b2:	d021      	beq.n	80042f8 <SNVMA_FlashManagerCallback+0x4cc>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80042b4:	f01a 0a01 	ands.w	sl, sl, #1
 80042b8:	d11e      	bne.n	80042f8 <SNVMA_FlashManagerCallback+0x4cc>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 80042ba:	f8d9 3000 	ldr.w	r3, [r9]
 80042be:	b173      	cbz	r3, 80042de <SNVMA_FlashManagerCallback+0x4b2>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 80042c0:	2001      	movs	r0, #1
 80042c2:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 80042c4:	2101      	movs	r1, #1
 80042c6:	4650      	mov	r0, sl
 80042c8:	9b01      	ldr	r3, [sp, #4]
 80042ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004348 <SNVMA_FlashManagerCallback+0x51c>)
 80042cc:	f7fe fba0 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80042d4:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 80042d6:	f8c9 a000 	str.w	sl, [r9]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80042e2:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80042e4:	eb04 0308 	add.w	r3, r4, r8
 80042e8:	789a      	ldrb	r2, [r3, #2]
 80042ea:	ea22 020b 	bic.w	r2, r2, fp
 80042ee:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f0:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80042f4:	7899      	ldrb	r1, [r3, #2]
 80042f6:	b121      	cbz	r1, 8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80042f8:	3601      	adds	r6, #1
 80042fa:	2e04      	cmp	r6, #4
 80042fc:	f109 0904 	add.w	r9, r9, #4
 8004300:	d1cf      	bne.n	80042a2 <SNVMA_FlashManagerCallback+0x476>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004302:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004306:	b672      	cpsid	i
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004308:	2201      	movs	r2, #1
          SNVMA_CommandPending = FALSE;
 800430a:	2600      	movs	r6, #0
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800430c:	490f      	ldr	r1, [pc, #60]	@ (800434c <SNVMA_FlashManagerCallback+0x520>)
 800430e:	782c      	ldrb	r4, [r5, #0]
 8004310:	680b      	ldr	r3, [r1, #0]
          SNVMA_CommandPending = FALSE;
 8004312:	4d0f      	ldr	r5, [pc, #60]	@ (8004350 <SNVMA_FlashManagerCallback+0x524>)
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004314:	40a2      	lsls	r2, r4
 8004316:	ea23 0302 	bic.w	r3, r3, r2
          SNVMA_CommandPending = FALSE;
 800431a:	702e      	strb	r6, [r5, #0]
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800431c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	f380 8810 	msr	PRIMASK, r0
}
 8004322:	b007      	add	sp, #28
 8004324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004328:	0802de00 	.word	0x0802de00
 800432c:	20000098 	.word	0x20000098
 8004330:	0802dc54 	.word	0x0802dc54
 8004334:	200000c0 	.word	0x200000c0
 8004338:	0802db74 	.word	0x0802db74
 800433c:	20005910 	.word	0x20005910
 8004340:	200058cc 	.word	0x200058cc
 8004344:	200058fc 	.word	0x200058fc
 8004348:	0802dbc0 	.word	0x0802dbc0
 800434c:	20005920 	.word	0x20005920
 8004350:	20005924 	.word	0x20005924
        flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
 8004354:	4aad      	ldr	r2, [pc, #692]	@ (800460c <SNVMA_FlashManagerCallback+0x7e0>)
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 8004356:	782b      	ldrb	r3, [r5, #0]
        flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
 8004358:	6812      	ldr	r2, [r2, #0]
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800435a:	4cad      	ldr	r4, [pc, #692]	@ (8004610 <SNVMA_FlashManagerCallback+0x7e4>)
        flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
 800435c:	6810      	ldr	r0, [r2, #0]
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800435e:	eb04 1383 	add.w	r3, r4, r3, lsl #6
        flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_PAGE_SIZE) / FLASH_PAGE_SIZE),
 8004362:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
 8004366:	7859      	ldrb	r1, [r3, #1]
 8004368:	4aaa      	ldr	r2, [pc, #680]	@ (8004614 <SNVMA_FlashManagerCallback+0x7e8>)
 800436a:	0b40      	lsrs	r0, r0, #13
 800436c:	f7ff fb76 	bl	8003a5c <FM_Erase>
        if (flashFunRet == FM_ERROR)
 8004370:	2802      	cmp	r0, #2
 8004372:	f47f adb6 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004376:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004378:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 800437c:	7891      	ldrb	r1, [r2, #2]
 800437e:	ea4f 1983 	mov.w	r9, r3, lsl #6
 8004382:	2900      	cmp	r1, #0
 8004384:	d0bd      	beq.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004386:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004388:	f04f 0801 	mov.w	r8, #1
 800438c:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 8004390:	3710      	adds	r7, #16
 8004392:	9301      	str	r3, [sp, #4]
 8004394:	1d33      	adds	r3, r6, #4
 8004396:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 800439a:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 800439c:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 80043a0:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 80043a4:	d021      	beq.n	80043ea <SNVMA_FlashManagerCallback+0x5be>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80043a6:	f01a 0a01 	ands.w	sl, sl, #1
 80043aa:	d11e      	bne.n	80043ea <SNVMA_FlashManagerCallback+0x5be>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b173      	cbz	r3, 80043ce <SNVMA_FlashManagerCallback+0x5a2>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 80043b0:	2001      	movs	r0, #1
 80043b2:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 80043b4:	2101      	movs	r1, #1
 80043b6:	4650      	mov	r0, sl
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	4a97      	ldr	r2, [pc, #604]	@ (8004618 <SNVMA_FlashManagerCallback+0x7ec>)
 80043bc:	f7fe fb28 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80043c4:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 80043c6:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ca:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80043d2:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80043d4:	eb04 0309 	add.w	r3, r4, r9
 80043d8:	789a      	ldrb	r2, [r3, #2]
 80043da:	ea22 020b 	bic.w	r2, r2, fp
 80043de:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80043e4:	7899      	ldrb	r1, [r3, #2]
 80043e6:	2900      	cmp	r1, #0
 80043e8:	d08b      	beq.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80043ea:	3601      	adds	r6, #1
 80043ec:	2e04      	cmp	r6, #4
 80043ee:	f107 0704 	add.w	r7, r7, #4
 80043f2:	d1cf      	bne.n	8004394 <SNVMA_FlashManagerCallback+0x568>
 80043f4:	e785      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
        LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_RETRY_WRITE - Retry erase operation");
 80043f6:	2101      	movs	r1, #1
 80043f8:	2000      	movs	r0, #0
 80043fa:	4a88      	ldr	r2, [pc, #544]	@ (800461c <SNVMA_FlashManagerCallback+0x7f0>)
 80043fc:	f7fe fb08 	bl	8002a10 <Log_Module_Print>
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 8004400:	4c83      	ldr	r4, [pc, #524]	@ (8004610 <SNVMA_FlashManagerCallback+0x7e4>)
        flashFunRet = FM_Erase ((((uint32_t)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 8004402:	782b      	ldrb	r3, [r5, #0]
 8004404:	4a83      	ldr	r2, [pc, #524]	@ (8004614 <SNVMA_FlashManagerCallback+0x7e8>)
                                            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 8004406:	eb04 1383 	add.w	r3, r4, r3, lsl #6
        flashFunRet = FM_Erase ((((uint32_t)SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 800440a:	6898      	ldr	r0, [r3, #8]
 800440c:	7859      	ldrb	r1, [r3, #1]
 800440e:	6800      	ldr	r0, [r0, #0]
 8004410:	f5a0 5000 	sub.w	r0, r0, #8192	@ 0x2000
 8004414:	0b40      	lsrs	r0, r0, #13
 8004416:	f7ff fb21 	bl	8003a5c <FM_Erase>
        if (flashFunRet == FM_ERROR)
 800441a:	2802      	cmp	r0, #2
 800441c:	f47f ad61 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004420:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004422:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 8004426:	7891      	ldrb	r1, [r2, #2]
 8004428:	ea4f 1983 	mov.w	r9, r3, lsl #6
 800442c:	2900      	cmp	r1, #0
 800442e:	f43f af68 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004432:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004434:	f04f 0801 	mov.w	r8, #1
 8004438:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 800443c:	3710      	adds	r7, #16
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	1d33      	adds	r3, r6, #4
 8004442:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 8004446:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004448:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 800444c:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 8004450:	d022      	beq.n	8004498 <SNVMA_FlashManagerCallback+0x66c>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004452:	f01a 0a01 	ands.w	sl, sl, #1
 8004456:	d11f      	bne.n	8004498 <SNVMA_FlashManagerCallback+0x66c>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	b173      	cbz	r3, 800447a <SNVMA_FlashManagerCallback+0x64e>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 800445c:	2001      	movs	r0, #1
 800445e:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004460:	2101      	movs	r1, #1
 8004462:	4650      	mov	r0, sl
 8004464:	9b01      	ldr	r3, [sp, #4]
 8004466:	4a6c      	ldr	r2, [pc, #432]	@ (8004618 <SNVMA_FlashManagerCallback+0x7ec>)
 8004468:	f7fe fad2 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800446c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004470:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004472:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004476:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800447a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800447e:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004480:	eb04 0309 	add.w	r3, r4, r9
 8004484:	789a      	ldrb	r2, [r3, #2]
 8004486:	ea22 020b 	bic.w	r2, r2, fp
 800448a:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004490:	7899      	ldrb	r1, [r3, #2]
 8004492:	2900      	cmp	r1, #0
 8004494:	f43f af35 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004498:	3601      	adds	r6, #1
 800449a:	2e04      	cmp	r6, #4
 800449c:	f107 0704 	add.w	r7, r7, #4
 80044a0:	d1ce      	bne.n	8004440 <SNVMA_FlashManagerCallback+0x614>
 80044a2:	e72e      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
        LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_BUFFER_WRITE - Retry write operation");
 80044a4:	2101      	movs	r1, #1
 80044a6:	2000      	movs	r0, #0
 80044a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004620 <SNVMA_FlashManagerCallback+0x7f4>)
 80044aa:	f7fe fab1 	bl	8002a10 <Log_Module_Print>
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80044ae:	4c58      	ldr	r4, [pc, #352]	@ (8004610 <SNVMA_FlashManagerCallback+0x7e4>)
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 80044b0:	7869      	ldrb	r1, [r5, #1]
 80044b2:	782b      	ldrb	r3, [r5, #0]
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80044b4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[SNVMA_FlashInfo.BufferId],
 80044b8:	eb04 1383 	add.w	r3, r4, r3, lsl #6
        flashFunRet = FM_Write (
 80044bc:	689a      	ldr	r2, [r3, #8]
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80044be:	3004      	adds	r0, #4
        flashFunRet = FM_Write (
 80044c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80044c4:	6851      	ldr	r1, [r2, #4]
          SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80044c6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
        flashFunRet = FM_Write (
 80044ca:	4b52      	ldr	r3, [pc, #328]	@ (8004614 <SNVMA_FlashManagerCallback+0x7e8>)
 80044cc:	6852      	ldr	r2, [r2, #4]
 80044ce:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 80044d2:	f7ff fa6f 	bl	80039b4 <FM_Write>
        if (flashFunRet == FM_ERROR)
 80044d6:	2802      	cmp	r0, #2
 80044d8:	f47f ad03 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 80044dc:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80044de:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 80044e2:	7891      	ldrb	r1, [r2, #2]
 80044e4:	ea4f 1983 	mov.w	r9, r3, lsl #6
 80044e8:	2900      	cmp	r1, #0
 80044ea:	f43f af0a 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80044ee:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80044f0:	f04f 0801 	mov.w	r8, #1
 80044f4:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 80044f8:	3710      	adds	r7, #16
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	1d33      	adds	r3, r6, #4
 80044fe:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 8004502:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004504:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004508:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 800450c:	d022      	beq.n	8004554 <SNVMA_FlashManagerCallback+0x728>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 800450e:	f01a 0a01 	ands.w	sl, sl, #1
 8004512:	d11f      	bne.n	8004554 <SNVMA_FlashManagerCallback+0x728>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b173      	cbz	r3, 8004536 <SNVMA_FlashManagerCallback+0x70a>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004518:	2001      	movs	r0, #1
 800451a:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 800451c:	2101      	movs	r1, #1
 800451e:	4650      	mov	r0, sl
 8004520:	9b01      	ldr	r3, [sp, #4]
 8004522:	4a3d      	ldr	r2, [pc, #244]	@ (8004618 <SNVMA_FlashManagerCallback+0x7ec>)
 8004524:	f7fe fa74 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004528:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800452c:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 800452e:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004536:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800453a:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 800453c:	eb04 0309 	add.w	r3, r4, r9
 8004540:	789a      	ldrb	r2, [r3, #2]
 8004542:	ea22 020b 	bic.w	r2, r2, fp
 8004546:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004548:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 800454c:	7899      	ldrb	r1, [r3, #2]
 800454e:	2900      	cmp	r1, #0
 8004550:	f43f aed7 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004554:	3601      	adds	r6, #1
 8004556:	2e04      	cmp	r6, #4
 8004558:	f107 0704 	add.w	r7, r7, #4
 800455c:	d1ce      	bne.n	80044fc <SNVMA_FlashManagerCallback+0x6d0>
 800455e:	e6d0      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
        LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_RETRY_WRITE - Retry write operation");
 8004560:	2101      	movs	r1, #1
 8004562:	2000      	movs	r0, #0
 8004564:	4a2f      	ldr	r2, [pc, #188]	@ (8004624 <SNVMA_FlashManagerCallback+0x7f8>)
 8004566:	f7fe fa53 	bl	8002a10 <Log_Module_Print>
                                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr,
 800456a:	4c29      	ldr	r4, [pc, #164]	@ (8004610 <SNVMA_FlashManagerCallback+0x7e4>)
 800456c:	782b      	ldrb	r3, [r5, #0]
        flashFunRet = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 800456e:	2204      	movs	r2, #4
                                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr,
 8004570:	eb04 1383 	add.w	r3, r4, r3, lsl #6
        flashFunRet = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 8004574:	6899      	ldr	r1, [r3, #8]
 8004576:	482c      	ldr	r0, [pc, #176]	@ (8004628 <SNVMA_FlashManagerCallback+0x7fc>)
 8004578:	4b26      	ldr	r3, [pc, #152]	@ (8004614 <SNVMA_FlashManagerCallback+0x7e8>)
 800457a:	6809      	ldr	r1, [r1, #0]
 800457c:	f7ff fa1a 	bl	80039b4 <FM_Write>
        if (flashFunRet == FM_ERROR)
 8004580:	2802      	cmp	r0, #2
 8004582:	f47f acae 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004586:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004588:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 800458c:	7891      	ldrb	r1, [r2, #2]
 800458e:	ea4f 1983 	mov.w	r9, r3, lsl #6
 8004592:	2900      	cmp	r1, #0
 8004594:	f43f aeb5 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004598:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 800459a:	f04f 0801 	mov.w	r8, #1
 800459e:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 80045a2:	3710      	adds	r7, #16
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	1d33      	adds	r3, r6, #4
 80045a8:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 80045ac:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80045ae:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 80045b2:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 80045b6:	d022      	beq.n	80045fe <SNVMA_FlashManagerCallback+0x7d2>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80045b8:	f01a 0a01 	ands.w	sl, sl, #1
 80045bc:	d11f      	bne.n	80045fe <SNVMA_FlashManagerCallback+0x7d2>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b173      	cbz	r3, 80045e0 <SNVMA_FlashManagerCallback+0x7b4>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 80045c2:	2001      	movs	r0, #1
 80045c4:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 80045c6:	2101      	movs	r1, #1
 80045c8:	4650      	mov	r0, sl
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	4a12      	ldr	r2, [pc, #72]	@ (8004618 <SNVMA_FlashManagerCallback+0x7ec>)
 80045ce:	f7fe fa1f 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045d2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80045d6:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 80045d8:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80045e4:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80045e6:	eb04 0309 	add.w	r3, r4, r9
 80045ea:	789a      	ldrb	r2, [r3, #2]
 80045ec:	ea22 020b 	bic.w	r2, r2, fp
 80045f0:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045f2:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80045f6:	7899      	ldrb	r1, [r3, #2]
 80045f8:	2900      	cmp	r1, #0
 80045fa:	f43f ae82 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80045fe:	3601      	adds	r6, #1
 8004600:	2e04      	cmp	r6, #4
 8004602:	f107 0704 	add.w	r7, r7, #4
 8004606:	d1ce      	bne.n	80045a6 <SNVMA_FlashManagerCallback+0x77a>
 8004608:	e67b      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 800460a:	bf00      	nop
 800460c:	200058c8 	.word	0x200058c8
 8004610:	200000c0 	.word	0x200000c0
 8004614:	200058fc 	.word	0x200058fc
 8004618:	0802dbc0 	.word	0x0802dbc0
 800461c:	0802deb8 	.word	0x0802deb8
 8004620:	0802dd54 	.word	0x0802dd54
 8004624:	0802dbf0 	.word	0x0802dbf0
 8004628:	20005910 	.word	0x20005910
            SNVMA_FlashInfo.BufferId++;
 800462c:	3301      	adds	r3, #1
 800462e:	b2db      	uxtb	r3, r3
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004630:	4c7a      	ldr	r4, [pc, #488]	@ (800481c <SNVMA_FlashManagerCallback+0x9f0>)
 8004632:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 8004636:	3204      	adds	r2, #4
 8004638:	f854 9032 	ldr.w	r9, [r4, r2, lsl #3]
          buffCnt++;
 800463c:	1c4a      	adds	r2, r1, #1
 800463e:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004640:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8004644:	f1b9 0f00 	cmp.w	r9, #0
 8004648:	d12e      	bne.n	80046a8 <SNVMA_FlashManagerCallback+0x87c>
 800464a:	2a03      	cmp	r2, #3
 800464c:	d82c      	bhi.n	80046a8 <SNVMA_FlashManagerCallback+0x87c>
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 800464e:	2b03      	cmp	r3, #3
 8004650:	f47f ada7 	bne.w	80041a2 <SNVMA_FlashManagerCallback+0x376>
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004654:	eb04 1380 	add.w	r3, r4, r0, lsl #6
 8004658:	6a1b      	ldr	r3, [r3, #32]
          buffCnt++;
 800465a:	1c8a      	adds	r2, r1, #2
 800465c:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 8432 	bne.w	8004ec8 <SNVMA_FlashManagerCallback+0x109c>
 8004664:	2a04      	cmp	r2, #4
            SNVMA_FlashInfo.BufferId = 0x00;
 8004666:	4633      	mov	r3, r6
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004668:	d01e      	beq.n	80046a8 <SNVMA_FlashManagerCallback+0x87c>
            SNVMA_FlashInfo.BufferId++;
 800466a:	3301      	adds	r3, #1
 800466c:	b2db      	uxtb	r3, r3
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800466e:	eb0e 0203 	add.w	r2, lr, r3
 8004672:	3204      	adds	r2, #4
 8004674:	f854 9032 	ldr.w	r9, [r4, r2, lsl #3]
          buffCnt++;
 8004678:	1cca      	adds	r2, r1, #3
 800467a:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800467c:	f1b9 0f00 	cmp.w	r9, #0
 8004680:	d112      	bne.n	80046a8 <SNVMA_FlashManagerCallback+0x87c>
 8004682:	2a03      	cmp	r2, #3
 8004684:	d810      	bhi.n	80046a8 <SNVMA_FlashManagerCallback+0x87c>
          if (SNVMA_FlashInfo.BufferId < (SNVMA_MAX_NUMBER_BUFFER - 1))
 8004686:	2b03      	cmp	r3, #3
 8004688:	f47f ada9 	bne.w	80041de <SNVMA_FlashManagerCallback+0x3b2>
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 800468c:	eb04 1080 	add.w	r0, r4, r0, lsl #6
 8004690:	6a03      	ldr	r3, [r0, #32]
          buffCnt++;
 8004692:	1d0a      	adds	r2, r1, #4
 8004694:	b2d2      	uxtb	r2, r2
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 8004696:	2b00      	cmp	r3, #0
 8004698:	f040 84b5 	bne.w	8005006 <SNVMA_FlashManagerCallback+0x11da>
 800469c:	2a04      	cmp	r2, #4
 800469e:	d003      	beq.n	80046a8 <SNVMA_FlashManagerCallback+0x87c>
            SNVMA_FlashInfo.BufferId++;
 80046a0:	3301      	adds	r3, #1
 80046a2:	b2db      	uxtb	r3, r3
          buffCnt++;
 80046a4:	3105      	adds	r1, #5
 80046a6:	b2ca      	uxtb	r2, r1
        } while ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr == NULL) &&
 80046a8:	706b      	strb	r3, [r5, #1]
 80046aa:	f88c 2000 	strb.w	r2, [ip]
 80046ae:	f388 8810 	msr	PRIMASK, r8
        if (buffCnt < SNVMA_MAX_NUMBER_BUFFER)
 80046b2:	f89c 3000 	ldrb.w	r3, [ip]
 80046b6:	2b03      	cmp	r3, #3
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 80046b8:	782b      	ldrb	r3, [r5, #0]
        if (buffCnt < SNVMA_MAX_NUMBER_BUFFER)
 80046ba:	f200 80b5 	bhi.w	8004828 <SNVMA_FlashManagerCallback+0x9fc>
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].p_Addr,
 80046be:	7869      	ldrb	r1, [r5, #1]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80046c0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[SNVMA_FlashInfo.BufferId],
 80046c4:	eb04 1383 	add.w	r3, r4, r3, lsl #6
          flashFunRet = FM_Write (
 80046c8:	689a      	ldr	r2, [r3, #8]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80046ca:	3004      	adds	r0, #4
          flashFunRet = FM_Write (
 80046cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80046d0:	6851      	ldr	r1, [r2, #4]
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].a_Buffers[SNVMA_FlashInfo.BufferId].Size,
 80046d2:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
          flashFunRet = FM_Write (
 80046d6:	4b52      	ldr	r3, [pc, #328]	@ (8004820 <SNVMA_FlashManagerCallback+0x9f4>)
 80046d8:	6852      	ldr	r2, [r2, #4]
 80046da:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
 80046de:	f7ff f969 	bl	80039b4 <FM_Write>
          if (flashFunRet == FM_ERROR)
 80046e2:	2802      	cmp	r0, #2
 80046e4:	f47f abfd 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 80046e8:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80046ea:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 80046ee:	7891      	ldrb	r1, [r2, #2]
 80046f0:	ea4f 1983 	mov.w	r9, r3, lsl #6
 80046f4:	2900      	cmp	r1, #0
 80046f6:	f43f ae04 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80046fa:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80046fc:	f04f 0801 	mov.w	r8, #1
 8004700:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 8004704:	3710      	adds	r7, #16
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	1d33      	adds	r3, r6, #4
 800470a:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 800470e:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004710:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004714:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 8004718:	d022      	beq.n	8004760 <SNVMA_FlashManagerCallback+0x934>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 800471a:	f01a 0a01 	ands.w	sl, sl, #1
 800471e:	d11f      	bne.n	8004760 <SNVMA_FlashManagerCallback+0x934>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b173      	cbz	r3, 8004742 <SNVMA_FlashManagerCallback+0x916>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004724:	2001      	movs	r0, #1
 8004726:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004728:	2101      	movs	r1, #1
 800472a:	4650      	mov	r0, sl
 800472c:	9b01      	ldr	r3, [sp, #4]
 800472e:	4a3d      	ldr	r2, [pc, #244]	@ (8004824 <SNVMA_FlashManagerCallback+0x9f8>)
 8004730:	f7fe f96e 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004734:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004738:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 800473a:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004742:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004746:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004748:	eb04 0309 	add.w	r3, r4, r9
 800474c:	789a      	ldrb	r2, [r3, #2]
 800474e:	ea22 020b 	bic.w	r2, r2, fp
 8004752:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004758:	7899      	ldrb	r1, [r3, #2]
 800475a:	2900      	cmp	r1, #0
 800475c:	f43f add1 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004760:	3601      	adds	r6, #1
 8004762:	2e04      	cmp	r6, #4
 8004764:	f107 0704 	add.w	r7, r7, #4
 8004768:	d1ce      	bne.n	8004708 <SNVMA_FlashManagerCallback+0x8dc>
 800476a:	e5ca      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800476c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004770:	b672      	cpsid	i
          SNVMA_FlashInfo.FlashOpState = SNVMA_RETRY_WRITE;
 8004772:	2203      	movs	r2, #3
 8004774:	70aa      	strb	r2, [r5, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004776:	f383 8810 	msr	PRIMASK, r3
                                    SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].
 800477a:	782b      	ldrb	r3, [r5, #0]
          flashFunRet = FM_Erase ((((uint32_t)
 800477c:	4a28      	ldr	r2, [pc, #160]	@ (8004820 <SNVMA_FlashManagerCallback+0x9f4>)
                                    SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 800477e:	eb04 1383 	add.w	r3, r4, r3, lsl #6
                                      p_BankForWrite->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 8004782:	6898      	ldr	r0, [r3, #8]
          flashFunRet = FM_Erase ((((uint32_t)
 8004784:	7859      	ldrb	r1, [r3, #1]
                                      p_BankForWrite->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 8004786:	6800      	ldr	r0, [r0, #0]
 8004788:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
          flashFunRet = FM_Erase ((((uint32_t)
 800478c:	0b40      	lsrs	r0, r0, #13
 800478e:	f7ff f965 	bl	8003a5c <FM_Erase>
          if (flashFunRet == FM_ERROR)
 8004792:	2802      	cmp	r0, #2
 8004794:	f47f aba5 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004798:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 800479a:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 800479e:	7891      	ldrb	r1, [r2, #2]
 80047a0:	ea4f 1983 	mov.w	r9, r3, lsl #6
 80047a4:	2900      	cmp	r1, #0
 80047a6:	f43f adac 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80047aa:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80047ac:	f04f 0801 	mov.w	r8, #1
 80047b0:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 80047b4:	3710      	adds	r7, #16
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	1d33      	adds	r3, r6, #4
 80047ba:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 80047be:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80047c0:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 80047c4:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 80047c8:	d022      	beq.n	8004810 <SNVMA_FlashManagerCallback+0x9e4>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80047ca:	f01a 0a01 	ands.w	sl, sl, #1
 80047ce:	d11f      	bne.n	8004810 <SNVMA_FlashManagerCallback+0x9e4>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b173      	cbz	r3, 80047f2 <SNVMA_FlashManagerCallback+0x9c6>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 80047d4:	2001      	movs	r0, #1
 80047d6:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 80047d8:	2101      	movs	r1, #1
 80047da:	4650      	mov	r0, sl
 80047dc:	9b01      	ldr	r3, [sp, #4]
 80047de:	4a11      	ldr	r2, [pc, #68]	@ (8004824 <SNVMA_FlashManagerCallback+0x9f8>)
 80047e0:	f7fe f916 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047e4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80047e8:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 80047ea:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ee:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80047f6:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80047f8:	eb04 0309 	add.w	r3, r4, r9
 80047fc:	789a      	ldrb	r2, [r3, #2]
 80047fe:	ea22 020b 	bic.w	r2, r2, fp
 8004802:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004808:	7899      	ldrb	r1, [r3, #2]
 800480a:	2900      	cmp	r1, #0
 800480c:	f43f ad79 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004810:	3601      	adds	r6, #1
 8004812:	2e04      	cmp	r6, #4
 8004814:	f107 0704 	add.w	r7, r7, #4
 8004818:	d1ce      	bne.n	80047b8 <SNVMA_FlashManagerCallback+0x98c>
 800481a:	e572      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 800481c:	200000c0 	.word	0x200000c0
 8004820:	200058fc 	.word	0x200058fc
 8004824:	0802dbc0 	.word	0x0802dbc0
  uint32_t crcComputedValue = 0x00;
 8004828:	2000      	movs	r0, #0
          if (IsCrcOk (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr) == FALSE)
 800482a:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 800482e:	689b      	ldr	r3, [r3, #8]
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 8004830:	2101      	movs	r1, #1
          if (IsCrcOk (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr) == FALSE)
 8004832:	f8d3 9000 	ldr.w	r9, [r3]
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 8004836:	4a97      	ldr	r2, [pc, #604]	@ (8004a94 <SNVMA_FlashManagerCallback+0xc68>)
  uint32_t * payloadAddr = (uint32_t *)((uint32_t)(p_BankStartAddress) + sizeof (SNVMA_BankHeader_t));
 8004838:	f109 0a10 	add.w	sl, r9, #16
  uint32_t crcComputedValue = 0x00;
 800483c:	9005      	str	r0, [sp, #20]
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 800483e:	f7fe f8e7 	bl	8002a10 <Log_Module_Print>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1)
 8004842:	f8b9 2005 	ldrh.w	r2, [r9, #5]
 8004846:	2a00      	cmp	r2, #0
 8004848:	f040 8206 	bne.w	8004c58 <SNVMA_FlashManagerCallback+0xe2c>
 800484c:	4690      	mov	r8, r2
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2)
 800484e:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8004852:	2a00      	cmp	r2, #0
 8004854:	f040 81f0 	bne.w	8004c38 <SNVMA_FlashManagerCallback+0xe0c>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3)
 8004858:	f8b9 200b 	ldrh.w	r2, [r9, #11]
 800485c:	2a00      	cmp	r2, #0
 800485e:	f040 81db 	bne.w	8004c18 <SNVMA_FlashManagerCallback+0xdec>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4)
 8004862:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8004866:	2a00      	cmp	r2, #0
 8004868:	f040 81c7 	bne.w	8004bfa <SNVMA_FlashManagerCallback+0xdce>
  if (crcComputedValue == ((SNVMA_BankHeader_t *)p_BankStartAddress)->Crc)
 800486c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8004870:	9a05      	ldr	r2, [sp, #20]
 8004872:	4293      	cmp	r3, r2
 8004874:	f000 811c 	beq.w	8004ab0 <SNVMA_FlashManagerCallback+0xc84>
  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 8004878:	4613      	mov	r3, r2
 800487a:	2101      	movs	r1, #1
 800487c:	2000      	movs	r0, #0
 800487e:	4a86      	ldr	r2, [pc, #536]	@ (8004a98 <SNVMA_FlashManagerCallback+0xc6c>)
 8004880:	f7fe f8c6 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004888:	b672      	cpsid	i
            SNVMA_FlashInfo.FlashOpState = SNVMA_RETRY_WRITE;
 800488a:	2203      	movs	r2, #3
 800488c:	70aa      	strb	r2, [r5, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	f383 8810 	msr	PRIMASK, r3
                                      SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 8004892:	782b      	ldrb	r3, [r5, #0]
            flashFunRet = FM_Erase ((((uint32_t)
 8004894:	4a81      	ldr	r2, [pc, #516]	@ (8004a9c <SNVMA_FlashManagerCallback+0xc70>)
                                      SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 8004896:	eb04 1383 	add.w	r3, r4, r3, lsl #6
                                      SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 800489a:	6898      	ldr	r0, [r3, #8]
            flashFunRet = FM_Erase ((((uint32_t)
 800489c:	7859      	ldrb	r1, [r3, #1]
                                      SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->p_StartAddr -
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
            flashFunRet = FM_Erase ((((uint32_t)
 80048a4:	0b40      	lsrs	r0, r0, #13
 80048a6:	f7ff f8d9 	bl	8003a5c <FM_Erase>
            if (flashFunRet == FM_ERROR)
 80048aa:	2802      	cmp	r0, #2
 80048ac:	f47f ab19 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
              InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 80048b0:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80048b2:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 80048b6:	7891      	ldrb	r1, [r2, #2]
 80048b8:	ea4f 1983 	mov.w	r9, r3, lsl #6
 80048bc:	2900      	cmp	r1, #0
 80048be:	f43f ad20 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 80048c2:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 80048c4:	f04f 0801 	mov.w	r8, #1
 80048c8:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 80048cc:	3710      	adds	r7, #16
 80048ce:	1d32      	adds	r2, r6, #4
 80048d0:	fa08 f202 	lsl.w	r2, r8, r2
    if (tmpMask != 0x00)
 80048d4:	420a      	tst	r2, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80048d6:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 80048da:	fa5f fb82 	uxtb.w	fp, r2
    if (tmpMask != 0x00)
 80048de:	d024      	beq.n	800492a <SNVMA_FlashManagerCallback+0xafe>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 80048e0:	f01a 0a01 	ands.w	sl, sl, #1
 80048e4:	d121      	bne.n	800492a <SNVMA_FlashManagerCallback+0xafe>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	b182      	cbz	r2, 800490c <SNVMA_FlashManagerCallback+0xae0>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 80048ea:	2001      	movs	r0, #1
 80048ec:	9301      	str	r3, [sp, #4]
 80048ee:	4790      	blx	r2
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 80048f0:	2101      	movs	r1, #1
 80048f2:	4650      	mov	r0, sl
 80048f4:	9b01      	ldr	r3, [sp, #4]
 80048f6:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa0 <SNVMA_FlashManagerCallback+0xc74>)
 80048f8:	f7fe f88a 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048fc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004900:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004902:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	f382 8810 	msr	PRIMASK, r2
 800490a:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800490c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004910:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004912:	eb04 0209 	add.w	r2, r4, r9
 8004916:	7891      	ldrb	r1, [r2, #2]
 8004918:	ea21 010b 	bic.w	r1, r1, fp
 800491c:	7091      	strb	r1, [r2, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	f380 8810 	msr	PRIMASK, r0
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004922:	7891      	ldrb	r1, [r2, #2]
 8004924:	2900      	cmp	r1, #0
 8004926:	f43f acec 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 800492a:	3601      	adds	r6, #1
 800492c:	2e04      	cmp	r6, #4
 800492e:	f107 0704 	add.w	r7, r7, #4
 8004932:	d1cc      	bne.n	80048ce <SNVMA_FlashManagerCallback+0xaa2>
 8004934:	e4e5      	b.n	8004302 <SNVMA_FlashManagerCallback+0x4d6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004936:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800493a:	b672      	cpsid	i
          SNVMA_CommandPending = FALSE;
 800493c:	4a59      	ldr	r2, [pc, #356]	@ (8004aa4 <SNVMA_FlashManagerCallback+0xc78>)
 800493e:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	f7ff bacd 	b.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004948:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800494c:	b672      	cpsid	i
          SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 800494e:	2201      	movs	r2, #1
 8004950:	f8df 8158 	ldr.w	r8, [pc, #344]	@ 8004aac <SNVMA_FlashManagerCallback+0xc80>
 8004954:	782b      	ldrb	r3, [r5, #0]
 8004956:	409a      	lsls	r2, r3
 8004958:	f8d8 3000 	ldr.w	r3, [r8]
 800495c:	ea23 0302 	bic.w	r3, r3, r2
 8004960:	f8c8 3000 	str.w	r3, [r8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004964:	f381 8810 	msr	PRIMASK, r1
}
 8004968:	f7ff bb74 	b.w	8004054 <SNVMA_FlashManagerCallback+0x228>
          for (uint8_t cnt = 0x00;
 800496c:	2200      	movs	r2, #0
            if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 800496e:	4613      	mov	r3, r2
 8004970:	f7ff bb98 	b.w	80040a4 <SNVMA_FlashManagerCallback+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004974:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004978:	b672      	cpsid	i
  if (SNVMA_NvmConfiguration[NvmId].p_BankForRestore != NULL)
 800497a:	eb04 030b 	add.w	r3, r4, fp
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	b123      	cbz	r3, 800498c <SNVMA_FlashManagerCallback+0xb60>
                                      (SNVMA_NvmConfiguration[NvmId].p_BankForRestore->p_StartAddr))->Counter) + 1;
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	3301      	adds	r3, #1
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
 8004988:	f889 3001 	strb.w	r3, [r9, #1]
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 800498c:	44a3      	add	fp, r4
 800498e:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8004992:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 8004996:	f8a9 3005 	strh.w	r3, [r9, #5]
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 800499a:	f8db 302c 	ldr.w	r3, [fp, #44]	@ 0x2c
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 800499e:	fa5f fa8a 	uxtb.w	sl, sl
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 80049a2:	f8a9 3008 	strh.w	r3, [r9, #8]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 80049a6:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 80049aa:	f889 a004 	strb.w	sl, [r9, #4]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 80049ae:	f8a9 300b 	strh.w	r3, [r9, #11]
  SNVMA_WriteBankHeader.SizeId4 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x03].Size;
 80049b2:	f8db 303c 	ldr.w	r3, [fp, #60]	@ 0x3c
 80049b6:	f8a9 300e 	strh.w	r3, [r9, #14]
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);
 80049ba:	9b05      	ldr	r3, [sp, #20]
 80049bc:	f8a9 3002 	strh.w	r3, [r9, #2]
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
 80049c0:	f10a 0301 	add.w	r3, sl, #1
 80049c4:	f889 3007 	strb.w	r3, [r9, #7]
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 80049c8:	f10a 0302 	add.w	r3, sl, #2
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 80049cc:	f10a 0a03 	add.w	sl, sl, #3
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 80049d0:	f889 300a 	strb.w	r3, [r9, #10]
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 80049d4:	f889 a00d 	strb.w	sl, [r9, #13]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d8:	f382 8810 	msr	PRIMASK, r2
  error = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 80049dc:	f8db 2008 	ldr.w	r2, [fp, #8]
 80049e0:	4b2e      	ldr	r3, [pc, #184]	@ (8004a9c <SNVMA_FlashManagerCallback+0xc70>)
 80049e2:	6811      	ldr	r1, [r2, #0]
 80049e4:	4830      	ldr	r0, [pc, #192]	@ (8004aa8 <SNVMA_FlashManagerCallback+0xc7c>)
 80049e6:	2204      	movs	r2, #4
 80049e8:	f7fe ffe4 	bl	80039b4 <FM_Write>
          if (flashFunRet == FM_ERROR)
 80049ec:	2802      	cmp	r0, #2
 80049ee:	f47f aa6a 	bne.w	8003ec6 <SNVMA_FlashManagerCallback+0x9a>
            InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 80049f2:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 80049f4:	019a      	lsls	r2, r3, #6
 80049f6:	9201      	str	r2, [sp, #4]
 80049f8:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 80049fc:	7891      	ldrb	r1, [r2, #2]
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d035      	beq.n	8004a6e <SNVMA_FlashManagerCallback+0xc42>
 8004a02:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004a04:	f04f 0a01 	mov.w	sl, #1
 8004a08:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	9302      	str	r3, [sp, #8]
 8004a10:	1d33      	adds	r3, r6, #4
 8004a12:	fa0a f303 	lsl.w	r3, sl, r3
    if (tmpMask != 0x00)
 8004a16:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004a18:	fa21 f906 	lsr.w	r9, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004a1c:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 8004a20:	d020      	beq.n	8004a64 <SNVMA_FlashManagerCallback+0xc38>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004a22:	f019 0901 	ands.w	r9, r9, #1
 8004a26:	d11d      	bne.n	8004a64 <SNVMA_FlashManagerCallback+0xc38>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	b173      	cbz	r3, 8004a4a <SNVMA_FlashManagerCallback+0xc1e>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004a30:	2101      	movs	r1, #1
 8004a32:	4648      	mov	r0, r9
 8004a34:	9b02      	ldr	r3, [sp, #8]
 8004a36:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa0 <SNVMA_FlashManagerCallback+0xc74>)
 8004a38:	f7fd ffea 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a3c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004a40:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004a42:	f8c7 9000 	str.w	r9, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a46:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a4a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004a4e:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004a50:	9b01      	ldr	r3, [sp, #4]
 8004a52:	18e3      	adds	r3, r4, r3
 8004a54:	789a      	ldrb	r2, [r3, #2]
 8004a56:	ea22 020b 	bic.w	r2, r2, fp
 8004a5a:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5c:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004a60:	7899      	ldrb	r1, [r3, #2]
 8004a62:	b121      	cbz	r1, 8004a6e <SNVMA_FlashManagerCallback+0xc42>
 8004a64:	3601      	adds	r6, #1
 8004a66:	2e04      	cmp	r6, #4
 8004a68:	f107 0704 	add.w	r7, r7, #4
 8004a6c:	d1d0      	bne.n	8004a10 <SNVMA_FlashManagerCallback+0xbe4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004a72:	b672      	cpsid	i
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004a74:	2201      	movs	r2, #1
            SNVMA_CommandPending = FALSE;
 8004a76:	2600      	movs	r6, #0
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004a78:	7828      	ldrb	r0, [r5, #0]
 8004a7a:	f8d8 3000 	ldr.w	r3, [r8]
            SNVMA_CommandPending = FALSE;
 8004a7e:	4c09      	ldr	r4, [pc, #36]	@ (8004aa4 <SNVMA_FlashManagerCallback+0xc78>)
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004a80:	4082      	lsls	r2, r0
 8004a82:	ea23 0302 	bic.w	r3, r3, r2
            SNVMA_CommandPending = FALSE;
 8004a86:	7026      	strb	r6, [r4, #0]
            SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004a88:	f8c8 3000 	str.w	r3, [r8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8c:	f381 8810 	msr	PRIMASK, r1
}
 8004a90:	f7ff ba27 	b.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
 8004a94:	0802dca0 	.word	0x0802dca0
 8004a98:	0802dcbc 	.word	0x0802dcbc
 8004a9c:	200058fc 	.word	0x200058fc
 8004aa0:	0802dbc0 	.word	0x0802dbc0
 8004aa4:	20005924 	.word	0x20005924
 8004aa8:	20005910 	.word	0x20005910
 8004aac:	20005920 	.word	0x20005920
  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8004d3c <SNVMA_FlashManagerCallback+0xf10>)
 8004ab6:	f7fd ffab 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004aba:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004abe:	b672      	cpsid	i
                  p_BankList[(SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankNumber - 1)])
 8004ac0:	2314      	movs	r3, #20
            tmpBank = SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore;
 8004ac2:	7828      	ldrb	r0, [r5, #0]
 8004ac4:	f8df 9284 	ldr.w	r9, [pc, #644]	@ 8004d4c <SNVMA_FlashManagerCallback+0xf20>
 8004ac8:	eb04 1880 	add.w	r8, r4, r0, lsl #6
 8004acc:	0180      	lsls	r0, r0, #6
                &SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].
 8004ace:	f8d8 2004 	ldr.w	r2, [r8, #4]
                  p_BankList[(SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankNumber - 1)])
 8004ad2:	f814 e000 	ldrb.w	lr, [r4, r0]
 8004ad6:	fb03 2e0e 	mla	lr, r3, lr, r2
            tmpBank = SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore;
 8004ada:	f8d8 300c 	ldr.w	r3, [r8, #12]
                &SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].
 8004ade:	f1ae 0e14 	sub.w	lr, lr, #20
            tmpBank = SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore;
 8004ae2:	f8c9 3000 	str.w	r3, [r9]
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite;
 8004ae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
            if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite ==
 8004aea:	4573      	cmp	r3, lr
            SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore =
 8004aec:	f8c8 300c 	str.w	r3, [r8, #12]
            if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite ==
 8004af0:	d001      	beq.n	8004af6 <SNVMA_FlashManagerCallback+0xcca>
              SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite++;
 8004af2:	f103 0214 	add.w	r2, r3, #20
 8004af6:	4420      	add	r0, r4
 8004af8:	6082      	str	r2, [r0, #8]
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] != NULL)
 8004afa:	6858      	ldr	r0, [r3, #4]
 8004afc:	b128      	cbz	r0, 8004b0a <SNVMA_FlashManagerCallback+0xcde>
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	eba0 0e01 	sub.w	lr, r0, r1
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 8004b04:	6810      	ldr	r0, [r2, #0]
 8004b06:	4470      	add	r0, lr
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 8004b08:	6050      	str	r0, [r2, #4]
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] != NULL)
 8004b0a:	6898      	ldr	r0, [r3, #8]
 8004b0c:	b128      	cbz	r0, 8004b1a <SNVMA_FlashManagerCallback+0xcee>
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
 8004b0e:	6819      	ldr	r1, [r3, #0]
 8004b10:	eba0 0e01 	sub.w	lr, r0, r1
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 8004b14:	6810      	ldr	r0, [r2, #0]
 8004b16:	4470      	add	r0, lr
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 8004b18:	6090      	str	r0, [r2, #8]
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] != NULL)
 8004b1a:	68d8      	ldr	r0, [r3, #12]
 8004b1c:	b128      	cbz	r0, 8004b2a <SNVMA_FlashManagerCallback+0xcfe>
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	eba0 0e01 	sub.w	lr, r0, r1
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 8004b24:	6810      	ldr	r0, [r2, #0]
 8004b26:	4470      	add	r0, lr
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 8004b28:	60d0      	str	r0, [r2, #12]
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] != NULL)
 8004b2a:	6918      	ldr	r0, [r3, #16]
 8004b2c:	b120      	cbz	r0, 8004b38 <SNVMA_FlashManagerCallback+0xd0c>
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->ap_BufferAddr[cnt] -
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	1ac0      	subs	r0, r0, r3
                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForRestore->p_StartAddr +
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	4403      	add	r3, r0
                SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 8004b36:	6113      	str	r3, [r2, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	f38c 8810 	msr	PRIMASK, ip
            if (tmpBank != NULL)
 8004b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	f000 8105 	beq.w	8004d50 <SNVMA_FlashManagerCallback+0xf24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b46:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004b4a:	b672      	cpsid	i
              SNVMA_FlashInfo.FlashOpState = SNVMA_ERASE_BANK;
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	70aa      	strb	r2, [r5, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	f383 8810 	msr	PRIMASK, r3
              flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 8004b54:	f8d9 2000 	ldr.w	r2, [r9]
                                                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 8004b58:	782b      	ldrb	r3, [r5, #0]
              flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 8004b5a:	6810      	ldr	r0, [r2, #0]
                                                  SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].BankSize,
 8004b5c:	eb04 1383 	add.w	r3, r4, r3, lsl #6
              flashFunRet = FM_Erase ((((uint32_t)tmpBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 8004b60:	f100 4078 	add.w	r0, r0, #4160749568	@ 0xf8000000
 8004b64:	4a76      	ldr	r2, [pc, #472]	@ (8004d40 <SNVMA_FlashManagerCallback+0xf14>)
 8004b66:	7859      	ldrb	r1, [r3, #1]
 8004b68:	0b40      	lsrs	r0, r0, #13
 8004b6a:	f7fe ff77 	bl	8003a5c <FM_Erase>
              if (flashFunRet == FM_ERROR)
 8004b6e:	2802      	cmp	r0, #2
 8004b70:	f47f a9b7 	bne.w	8003ee2 <SNVMA_FlashManagerCallback+0xb6>
                InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004b74:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004b76:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 8004b7a:	7891      	ldrb	r1, [r2, #2]
 8004b7c:	ea4f 1983 	mov.w	r9, r3, lsl #6
 8004b80:	2900      	cmp	r1, #0
 8004b82:	f43f abbe 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004b86:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004b88:	f04f 0801 	mov.w	r8, #1
 8004b8c:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 8004b90:	3710      	adds	r7, #16
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	1d32      	adds	r2, r6, #4
 8004b96:	fa08 f202 	lsl.w	r2, r8, r2
    if (tmpMask != 0x00)
 8004b9a:	420a      	tst	r2, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004b9c:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004ba0:	fa5f fb82 	uxtb.w	fp, r2
    if (tmpMask != 0x00)
 8004ba4:	d022      	beq.n	8004bec <SNVMA_FlashManagerCallback+0xdc0>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004ba6:	f01a 0a01 	ands.w	sl, sl, #1
 8004baa:	d11f      	bne.n	8004bec <SNVMA_FlashManagerCallback+0xdc0>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b172      	cbz	r2, 8004bce <SNVMA_FlashManagerCallback+0xda2>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	4790      	blx	r2
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4650      	mov	r0, sl
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	4a62      	ldr	r2, [pc, #392]	@ (8004d44 <SNVMA_FlashManagerCallback+0xf18>)
 8004bbc:	f7fd ff28 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bc0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc4:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004bc6:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bca:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004bce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd2:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004bd4:	eb04 0209 	add.w	r2, r4, r9
 8004bd8:	7891      	ldrb	r1, [r2, #2]
 8004bda:	ea21 010b 	bic.w	r1, r1, fp
 8004bde:	7091      	strb	r1, [r2, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be0:	f380 8810 	msr	PRIMASK, r0
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004be4:	7891      	ldrb	r1, [r2, #2]
 8004be6:	2900      	cmp	r1, #0
 8004be8:	f43f ab8b 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004bec:	3601      	adds	r6, #1
 8004bee:	2e04      	cmp	r6, #4
 8004bf0:	f107 0704 	add.w	r7, r7, #4
 8004bf4:	d1ce      	bne.n	8004b94 <SNVMA_FlashManagerCallback+0xd68>
 8004bf6:	f7ff bb84 	b.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8004bfa:	4853      	ldr	r0, [pc, #332]	@ (8004d48 <SNVMA_FlashManagerCallback+0xf1c>)
 8004bfc:	ab05      	add	r3, sp, #20
 8004bfe:	eb0a 0108 	add.w	r1, sl, r8
 8004c02:	f001 ff75 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f43f ae30 	beq.w	800486c <SNVMA_FlashManagerCallback+0xa40>
          else if (CRCCTRL_BUSY == eReturn)
 8004c0c:	2802      	cmp	r0, #2
 8004c0e:	f43f ae28 	beq.w	8004862 <SNVMA_FlashManagerCallback+0xa36>
            Error_Handler();
 8004c12:	f7fb ff83 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8004c16:	e624      	b.n	8004862 <SNVMA_FlashManagerCallback+0xa36>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8004c18:	484b      	ldr	r0, [pc, #300]	@ (8004d48 <SNVMA_FlashManagerCallback+0xf1c>)
 8004c1a:	ab05      	add	r3, sp, #20
 8004c1c:	eb0a 0108 	add.w	r1, sl, r8
 8004c20:	f001 ff66 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d177      	bne.n	8004d18 <SNVMA_FlashManagerCallback+0xeec>
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 * sizeof (uint32_t));
 8004c28:	f8b9 300b 	ldrh.w	r3, [r9, #11]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	330f      	adds	r3, #15
 8004c30:	f023 030f 	bic.w	r3, r3, #15
 8004c34:	4498      	add	r8, r3
    switch (cnt)
 8004c36:	e614      	b.n	8004862 <SNVMA_FlashManagerCallback+0xa36>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8004c38:	4843      	ldr	r0, [pc, #268]	@ (8004d48 <SNVMA_FlashManagerCallback+0xf1c>)
 8004c3a:	ab05      	add	r3, sp, #20
 8004c3c:	eb0a 0108 	add.w	r1, sl, r8
 8004c40:	f001 ff56 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d161      	bne.n	8004d0c <SNVMA_FlashManagerCallback+0xee0>
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 * sizeof (uint32_t));
 8004c48:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	330f      	adds	r3, #15
 8004c50:	f023 030f 	bic.w	r3, r3, #15
 8004c54:	4498      	add	r8, r3
    switch (cnt)
 8004c56:	e5ff      	b.n	8004858 <SNVMA_FlashManagerCallback+0xa2c>
          eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004c58:	4651      	mov	r1, sl
 8004c5a:	483b      	ldr	r0, [pc, #236]	@ (8004d48 <SNVMA_FlashManagerCallback+0xf1c>)
 8004c5c:	ab05      	add	r3, sp, #20
 8004c5e:	f001 fed1 	bl	8006a04 <CRCCTRL_Calculate>
          if (CRCCTRL_OK == eReturn)
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d15e      	bne.n	8004d24 <SNVMA_FlashManagerCallback+0xef8>
            offSet = SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 * sizeof (uint32_t));
 8004c66:	f8b9 2005 	ldrh.w	r2, [r9, #5]
 8004c6a:	0092      	lsls	r2, r2, #2
 8004c6c:	320f      	adds	r2, #15
 8004c6e:	f022 080f 	bic.w	r8, r2, #15
    switch (cnt)
 8004c72:	e5ec      	b.n	800484e <SNVMA_FlashManagerCallback+0xa22>
      cnt++;
 8004c74:	2701      	movs	r7, #1
 8004c76:	ea4f 06c8 	mov.w	r6, r8, lsl #3
 8004c7a:	f7ff b972 	b.w	8003f62 <SNVMA_FlashManagerCallback+0x136>
          InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004c7e:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004c80:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 8004c84:	7891      	ldrb	r1, [r2, #2]
 8004c86:	ea4f 1983 	mov.w	r9, r3, lsl #6
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	f43f ab39 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004c90:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004c92:	f04f 0801 	mov.w	r8, #1
 8004c96:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	1d33      	adds	r3, r6, #4
 8004ca0:	fa08 f303 	lsl.w	r3, r8, r3
    if (tmpMask != 0x00)
 8004ca4:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004ca6:	fa21 fa06 	lsr.w	sl, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004caa:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 8004cae:	d022      	beq.n	8004cf6 <SNVMA_FlashManagerCallback+0xeca>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004cb0:	f01a 0a01 	ands.w	sl, sl, #1
 8004cb4:	d11f      	bne.n	8004cf6 <SNVMA_FlashManagerCallback+0xeca>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	b173      	cbz	r3, 8004cd8 <SNVMA_FlashManagerCallback+0xeac>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004cba:	2001      	movs	r0, #1
 8004cbc:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d44 <SNVMA_FlashManagerCallback+0xf18>)
 8004cc6:	f7fd fea3 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cca:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004cce:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004cd0:	f8c7 a000 	str.w	sl, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cd8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004cdc:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004cde:	eb04 0309 	add.w	r3, r4, r9
 8004ce2:	789a      	ldrb	r2, [r3, #2]
 8004ce4:	ea22 020b 	bic.w	r2, r2, fp
 8004ce8:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cea:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004cee:	7899      	ldrb	r1, [r3, #2]
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	f43f ab06 	beq.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	2e04      	cmp	r6, #4
 8004cfa:	f107 0704 	add.w	r7, r7, #4
 8004cfe:	d1ce      	bne.n	8004c9e <SNVMA_FlashManagerCallback+0xe72>
 8004d00:	f7ff baff 	b.w	8004302 <SNVMA_FlashManagerCallback+0x4d6>
              idx++)
 8004d04:	2601      	movs	r6, #1
            SNVMA_FlashInfo.BufferId = idx;
 8004d06:	706e      	strb	r6, [r5, #1]
            break;
 8004d08:	f7ff b90b 	b.w	8003f22 <SNVMA_FlashManagerCallback+0xf6>
          else if (CRCCTRL_BUSY == eReturn)
 8004d0c:	2802      	cmp	r0, #2
 8004d0e:	f43f ad9e 	beq.w	800484e <SNVMA_FlashManagerCallback+0xa22>
            Error_Handler();
 8004d12:	f7fb ff03 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8004d16:	e59a      	b.n	800484e <SNVMA_FlashManagerCallback+0xa22>
          else if (CRCCTRL_BUSY == eReturn)
 8004d18:	2802      	cmp	r0, #2
 8004d1a:	f43f ad9d 	beq.w	8004858 <SNVMA_FlashManagerCallback+0xa2c>
            Error_Handler();
 8004d1e:	f7fb fefd 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8004d22:	e599      	b.n	8004858 <SNVMA_FlashManagerCallback+0xa2c>
          else if (CRCCTRL_BUSY == eReturn)
 8004d24:	2802      	cmp	r0, #2
 8004d26:	f43f ad8c 	beq.w	8004842 <SNVMA_FlashManagerCallback+0xa16>
            Error_Handler();
 8004d2a:	f7fb fef7 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8004d2e:	e588      	b.n	8004842 <SNVMA_FlashManagerCallback+0xa16>
      cnt++;
 8004d30:	2701      	movs	r7, #1
 8004d32:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8004d36:	f7ff b9ef 	b.w	8004118 <SNVMA_FlashManagerCallback+0x2ec>
 8004d3a:	bf00      	nop
 8004d3c:	0802dcbc 	.word	0x0802dcbc
 8004d40:	200058fc 	.word	0x200058fc
 8004d44:	0802dbc0 	.word	0x0802dbc0
 8004d48:	20000098 	.word	0x20000098
 8004d4c:	200058c8 	.word	0x200058c8
              InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_COMPLETE);
 8004d50:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004d52:	eb04 1183 	add.w	r1, r4, r3, lsl #6
 8004d56:	7889      	ldrb	r1, [r1, #2]
 8004d58:	0198      	lsls	r0, r3, #6
 8004d5a:	9001      	str	r0, [sp, #4]
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	f000 80b6 	beq.w	8004ece <SNVMA_FlashManagerCallback+0x10a2>
 8004d62:	4690      	mov	r8, r2
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004d64:	f04f 0a01 	mov.w	sl, #1
 8004d68:	eb04 1983 	add.w	r9, r4, r3, lsl #6
 8004d6c:	f109 0910 	add.w	r9, r9, #16
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	f108 0304 	add.w	r3, r8, #4
 8004d76:	fa0a f303 	lsl.w	r3, sl, r3
    if (tmpMask != 0x00)
 8004d7a:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004d7c:	fa21 f008 	lsr.w	r0, r1, r8
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004d80:	fa5f fb83 	uxtb.w	fp, r3
    if (tmpMask != 0x00)
 8004d84:	d022      	beq.n	8004dcc <SNVMA_FlashManagerCallback+0xfa0>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004d86:	f010 0001 	ands.w	r0, r0, #1
 8004d8a:	d11f      	bne.n	8004dcc <SNVMA_FlashManagerCallback+0xfa0>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004d8c:	f8d9 3000 	ldr.w	r3, [r9]
 8004d90:	b17b      	cbz	r3, 8004db2 <SNVMA_FlashManagerCallback+0xf86>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004d92:	9003      	str	r0, [sp, #12]
 8004d94:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004d96:	2101      	movs	r1, #1
 8004d98:	9b02      	ldr	r3, [sp, #8]
 8004d9a:	9803      	ldr	r0, [sp, #12]
 8004d9c:	4aa7      	ldr	r2, [pc, #668]	@ (800503c <SNVMA_FlashManagerCallback+0x1210>)
 8004d9e:	f7fd fe37 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004da6:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004da8:	9803      	ldr	r0, [sp, #12]
 8004daa:	f8c9 0000 	str.w	r0, [r9]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dae:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004db2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004db6:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	789a      	ldrb	r2, [r3, #2]
 8004dbe:	ea22 020b 	bic.w	r2, r2, fp
 8004dc2:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004dc8:	7899      	ldrb	r1, [r3, #2]
 8004dca:	b131      	cbz	r1, 8004dda <SNVMA_FlashManagerCallback+0xfae>
 8004dcc:	f108 0801 	add.w	r8, r8, #1
 8004dd0:	f1b8 0f04 	cmp.w	r8, #4
 8004dd4:	f109 0904 	add.w	r9, r9, #4
 8004dd8:	d1cb      	bne.n	8004d72 <SNVMA_FlashManagerCallback+0xf46>
              if (SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp == 0x00)
 8004dda:	782b      	ldrb	r3, [r5, #0]
 8004ddc:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 8004de0:	789b      	ldrb	r3, [r3, #2]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d073      	beq.n	8004ece <SNVMA_FlashManagerCallback+0x10a2>
 8004de6:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 8005050 <SNVMA_FlashManagerCallback+0x1224>
              if (SNVMA_IdBitmask != 0x00000000)
 8004dea:	f8d8 0000 	ldr.w	r0, [r8]
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f43f ada1 	beq.w	8004936 <SNVMA_FlashManagerCallback+0xb0a>
                  if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 8004df4:	07c1      	lsls	r1, r0, #31
 8004df6:	f100 8118 	bmi.w	800502a <SNVMA_FlashManagerCallback+0x11fe>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	469c      	mov	ip, r3
 8004dfe:	e000      	b.n	8004e02 <SNVMA_FlashManagerCallback+0xfd6>
 8004e00:	460b      	mov	r3, r1
                     cnt < SNVMA_MAX_NUMBER_NVM;
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d01d      	beq.n	8004e42 <SNVMA_FlashManagerCallback+0x1016>
                  if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 8004e06:	fa0c f203 	lsl.w	r2, ip, r3
 8004e0a:	4202      	tst	r2, r0
 8004e0c:	f103 0101 	add.w	r1, r3, #1
 8004e10:	d0f6      	beq.n	8004e00 <SNVMA_FlashManagerCallback+0xfd4>
 8004e12:	b2da      	uxtb	r2, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e14:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004e18:	b672      	cpsid	i
                    SNVMA_FlashInfo.NvmId = cnt;
 8004e1a:	702a      	strb	r2, [r5, #0]
                    SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 8004e1c:	2200      	movs	r2, #0
                      if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 8004e1e:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 8004e22:	789b      	ldrb	r3, [r3, #2]
                    SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 8004e24:	70aa      	strb	r2, [r5, #2]
                      if ((SNVMA_NvmConfiguration[SNVMA_FlashInfo.NvmId].PendingBufferWriteOp & (1u << idx)) != 0x00)
 8004e26:	07da      	lsls	r2, r3, #31
 8004e28:	f100 80fd 	bmi.w	8005026 <SNVMA_FlashManagerCallback+0x11fa>
 8004e2c:	079e      	lsls	r6, r3, #30
 8004e2e:	f100 80f9 	bmi.w	8005024 <SNVMA_FlashManagerCallback+0x11f8>
 8004e32:	0758      	lsls	r0, r3, #29
 8004e34:	f100 80ff 	bmi.w	8005036 <SNVMA_FlashManagerCallback+0x120a>
 8004e38:	071a      	lsls	r2, r3, #28
 8004e3a:	f100 80f9 	bmi.w	8005030 <SNVMA_FlashManagerCallback+0x1204>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3e:	f381 8810 	msr	PRIMASK, r1
  uint32_t crcValue = 0x00;
 8004e42:	2700      	movs	r7, #0
                LOG_INFO_SYSTEM("\r\nSNVMA_FlashManagerCallback - Flash operation state : SNVMA_BUFFER_WRITE - Start the pending write operation");
 8004e44:	2101      	movs	r1, #1
 8004e46:	2000      	movs	r0, #0
 8004e48:	4a7d      	ldr	r2, [pc, #500]	@ (8005040 <SNVMA_FlashManagerCallback+0x1214>)
 8004e4a:	f7fd fde1 	bl	8002a10 <Log_Module_Print>
                flashFunRet = StartFlashWrite (SNVMA_FlashInfo.NvmId);
 8004e4e:	f895 a000 	ldrb.w	sl, [r5]
  memset ((void *)&SNVMA_WriteBankHeader,
 8004e52:	f8df 91f8 	ldr.w	r9, [pc, #504]	@ 800504c <SNVMA_FlashManagerCallback+0x1220>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004e56:	eb04 138a 	add.w	r3, r4, sl, lsl #6
 8004e5a:	6a19      	ldr	r1, [r3, #32]
  memset ((void *)&SNVMA_WriteBankHeader,
 8004e5c:	e9c9 7700 	strd	r7, r7, [r9]
 8004e60:	e9c9 7702 	strd	r7, r7, [r9, #8]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004e64:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
  uint32_t crcValue = 0x00;
 8004e68:	9705      	str	r7, [sp, #20]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004e6a:	2900      	cmp	r1, #0
 8004e6c:	f000 80ce 	beq.w	800500c <SNVMA_FlashManagerCallback+0x11e0>
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e72:	4874      	ldr	r0, [pc, #464]	@ (8005044 <SNVMA_FlashManagerCallback+0x1218>)
 8004e74:	ab05      	add	r3, sp, #20
 8004e76:	f001 fdc5 	bl	8006a04 <CRCCTRL_Calculate>
        if (CRCCTRL_OK == eReturn)
 8004e7a:	b1f8      	cbz	r0, 8004ebc <SNVMA_FlashManagerCallback+0x1090>
        else if (CRCCTRL_BUSY == eReturn)
 8004e7c:	2802      	cmp	r0, #2
 8004e7e:	d020      	beq.n	8004ec2 <SNVMA_FlashManagerCallback+0x1096>
          Error_Handler();
 8004e80:	f7fb fe4c 	bl	8000b1c <Error_Handler>
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 8004e84:	ea4f 06ca 	mov.w	r6, sl, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004e88:	443e      	add	r6, r7
 8004e8a:	3604      	adds	r6, #4
 8004e8c:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004e90:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004e94:	b191      	cbz	r1, 8004ebc <SNVMA_FlashManagerCallback+0x1090>
      if (crcValue == 0x00)
 8004e96:	9805      	ldr	r0, [sp, #20]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004e98:	6852      	ldr	r2, [r2, #4]
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8004e9a:	ab05      	add	r3, sp, #20
      if (crcValue == 0x00)
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d0e8      	beq.n	8004e72 <SNVMA_FlashManagerCallback+0x1046>
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8004ea0:	4868      	ldr	r0, [pc, #416]	@ (8005044 <SNVMA_FlashManagerCallback+0x1218>)
 8004ea2:	f001 fe25 	bl	8006af0 <CRCCTRL_Accumulate>
        if (CRCCTRL_OK == eReturn)
 8004ea6:	b148      	cbz	r0, 8004ebc <SNVMA_FlashManagerCallback+0x1090>
        else if (CRCCTRL_BUSY == eReturn)
 8004ea8:	2802      	cmp	r0, #2
 8004eaa:	d0ef      	beq.n	8004e8c <SNVMA_FlashManagerCallback+0x1060>
          Error_Handler();
 8004eac:	f7fb fe36 	bl	8000b1c <Error_Handler>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004eb0:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8004eb4:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d1ec      	bne.n	8004e96 <SNVMA_FlashManagerCallback+0x106a>
      cnt++;
 8004ebc:	3701      	adds	r7, #1
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 8004ebe:	2f04      	cmp	r7, #4
 8004ec0:	d016      	beq.n	8004ef0 <SNVMA_FlashManagerCallback+0x10c4>
 8004ec2:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8004ec6:	e7df      	b.n	8004e88 <SNVMA_FlashManagerCallback+0x105c>
            SNVMA_FlashInfo.BufferId = 0x00;
 8004ec8:	4633      	mov	r3, r6
 8004eca:	f7ff bbed 	b.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ece:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004ed2:	b672      	cpsid	i
                SNVMA_IdBitmask &= ~(1u << SNVMA_FlashInfo.NvmId);
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 8005050 <SNVMA_FlashManagerCallback+0x1224>
 8004eda:	782b      	ldrb	r3, [r5, #0]
 8004edc:	409a      	lsls	r2, r3
 8004ede:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee2:	ea23 0302 	bic.w	r3, r3, r2
 8004ee6:	f8c8 3000 	str.w	r3, [r8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	f381 8810 	msr	PRIMASK, r1
}
 8004eee:	e77c      	b.n	8004dea <SNVMA_FlashManagerCallback+0xfbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ef0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004ef4:	b672      	cpsid	i
  if (SNVMA_NvmConfiguration[NvmId].p_BankForRestore != NULL)
 8004ef6:	eb04 030b 	add.w	r3, r4, fp
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	b123      	cbz	r3, 8004f08 <SNVMA_FlashManagerCallback+0x10dc>
                                      (SNVMA_NvmConfiguration[NvmId].p_BankForRestore->p_StartAddr))->Counter) + 1;
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	3301      	adds	r3, #1
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
 8004f04:	f889 3001 	strb.w	r3, [r9, #1]
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 8004f08:	44a3      	add	fp, r4
 8004f0a:	f8db 1024 	ldr.w	r1, [fp, #36]	@ 0x24
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8004f0e:	ea4f 038a 	mov.w	r3, sl, lsl #2
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 8004f12:	f8a9 1005 	strh.w	r1, [r9, #5]
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 8004f16:	f8db 102c 	ldr.w	r1, [fp, #44]	@ 0x2c
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8004f1a:	b2db      	uxtb	r3, r3
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 8004f1c:	f8a9 1008 	strh.w	r1, [r9, #8]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 8004f20:	f8db 1034 	ldr.w	r1, [fp, #52]	@ 0x34
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8004f24:	f889 3004 	strb.w	r3, [r9, #4]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 8004f28:	f8a9 100b 	strh.w	r1, [r9, #11]
  SNVMA_WriteBankHeader.SizeId4 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x03].Size;
 8004f2c:	f8db 103c 	ldr.w	r1, [fp, #60]	@ 0x3c
 8004f30:	f8a9 100e 	strh.w	r1, [r9, #14]
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);
 8004f34:	9905      	ldr	r1, [sp, #20]
 8004f36:	f8a9 1002 	strh.w	r1, [r9, #2]
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	f889 1007 	strb.w	r1, [r9, #7]
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 8004f40:	1c99      	adds	r1, r3, #2
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 8004f42:	3303      	adds	r3, #3
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 8004f44:	f889 100a 	strb.w	r1, [r9, #10]
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 8004f48:	f889 300d 	strb.w	r3, [r9, #13]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4c:	f382 8810 	msr	PRIMASK, r2
  error = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 8004f50:	f8db 2008 	ldr.w	r2, [fp, #8]
 8004f54:	4b3c      	ldr	r3, [pc, #240]	@ (8005048 <SNVMA_FlashManagerCallback+0x121c>)
 8004f56:	6811      	ldr	r1, [r2, #0]
 8004f58:	483c      	ldr	r0, [pc, #240]	@ (800504c <SNVMA_FlashManagerCallback+0x1220>)
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	f7fe fd2a 	bl	80039b4 <FM_Write>
                if (flashFunRet == FM_ERROR)
 8004f60:	2802      	cmp	r0, #2
 8004f62:	f47e afb0 	bne.w	8003ec6 <SNVMA_FlashManagerCallback+0x9a>
                  InvokeBufferCallback (SNVMA_FlashInfo.NvmId, SNVMA_OPERATION_FAILED);
 8004f66:	782b      	ldrb	r3, [r5, #0]
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004f68:	019a      	lsls	r2, r3, #6
 8004f6a:	9202      	str	r2, [sp, #8]
 8004f6c:	eb04 1283 	add.w	r2, r4, r3, lsl #6
 8004f70:	7891      	ldrb	r1, [r2, #2]
 8004f72:	2900      	cmp	r1, #0
 8004f74:	f43f ad7b 	beq.w	8004a6e <SNVMA_FlashManagerCallback+0xc42>
 8004f78:	2600      	movs	r6, #0
              (1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004f7a:	f04f 0a01 	mov.w	sl, #1
 8004f7e:	469b      	mov	fp, r3
 8004f80:	eb04 1783 	add.w	r7, r4, r3, lsl #6
 8004f84:	3710      	adds	r7, #16
 8004f86:	f8cd 8004 	str.w	r8, [sp, #4]
 8004f8a:	1d33      	adds	r3, r6, #4
 8004f8c:	fa0a f303 	lsl.w	r3, sl, r3
    if (tmpMask != 0x00)
 8004f90:	420b      	tst	r3, r1
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004f92:	fa21 f206 	lsr.w	r2, r1, r6
    tmpMask = SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &
 8004f96:	fa5f f983 	uxtb.w	r9, r3
    if (tmpMask != 0x00)
 8004f9a:	d020      	beq.n	8004fde <SNVMA_FlashManagerCallback+0x11b2>
      if ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp & (1u << pendingShift)) == 0x00)
 8004f9c:	f012 0801 	ands.w	r8, r2, #1
 8004fa0:	d11d      	bne.n	8004fde <SNVMA_FlashManagerCallback+0x11b2>
        if (SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] != NULL)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b173      	cbz	r3, 8004fc4 <SNVMA_FlashManagerCallback+0x1198>
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] (CallbackStatus);
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	4798      	blx	r3
          LOG_INFO_SYSTEM("\r\nSNVMA - InvokeBufferCallback for NVM ID : %d\n", NvmId);
 8004faa:	465b      	mov	r3, fp
 8004fac:	2101      	movs	r1, #1
 8004fae:	4640      	mov	r0, r8
 8004fb0:	4a22      	ldr	r2, [pc, #136]	@ (800503c <SNVMA_FlashManagerCallback+0x1210>)
 8004fb2:	f7fd fd2d 	bl	8002a10 <Log_Module_Print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004fba:	b672      	cpsid	i
          SNVMA_NvmConfiguration[NvmId].a_Callback[pendingShift] = NULL;
 8004fbc:	f8c7 8000 	str.w	r8, [r7]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc0:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fc4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004fc8:	b672      	cpsid	i
        SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp &= ~(1u << (pendingShift + SNVMA_MAX_NUMBER_BUFFER));
 8004fca:	9b02      	ldr	r3, [sp, #8]
 8004fcc:	18e3      	adds	r3, r4, r3
 8004fce:	789a      	ldrb	r2, [r3, #2]
 8004fd0:	ea22 0209 	bic.w	r2, r2, r9
 8004fd4:	709a      	strb	r2, [r3, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	f381 8810 	msr	PRIMASK, r1
       ((SNVMA_NvmConfiguration[NvmId].PendingBufferWriteOp != 0x00) &&
 8004fda:	7899      	ldrb	r1, [r3, #2]
 8004fdc:	b121      	cbz	r1, 8004fe8 <SNVMA_FlashManagerCallback+0x11bc>
 8004fde:	3601      	adds	r6, #1
 8004fe0:	2e04      	cmp	r6, #4
 8004fe2:	f107 0704 	add.w	r7, r7, #4
 8004fe6:	d1d0      	bne.n	8004f8a <SNVMA_FlashManagerCallback+0x115e>
 8004fe8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004fec:	e53f      	b.n	8004a6e <SNVMA_FlashManagerCallback+0xc42>
              idx++)
 8004fee:	2602      	movs	r6, #2
            SNVMA_FlashInfo.BufferId = idx;
 8004ff0:	706e      	strb	r6, [r5, #1]
            break;
 8004ff2:	f7fe bf96 	b.w	8003f22 <SNVMA_FlashManagerCallback+0xf6>
              idx++)
 8004ff6:	463e      	mov	r6, r7
            SNVMA_FlashInfo.BufferId = idx;
 8004ff8:	706e      	strb	r6, [r5, #1]
            break;
 8004ffa:	f7fe bf92 	b.w	8003f22 <SNVMA_FlashManagerCallback+0xf6>
                   idx++)
 8004ffe:	2601      	movs	r6, #1
                  SNVMA_FlashInfo.BufferId = idx;
 8005000:	706e      	strb	r6, [r5, #1]
                  break;
 8005002:	f7ff b864 	b.w	80040ce <SNVMA_FlashManagerCallback+0x2a2>
            SNVMA_FlashInfo.BufferId = 0x00;
 8005006:	464b      	mov	r3, r9
 8005008:	f7ff bb4e 	b.w	80046a8 <SNVMA_FlashManagerCallback+0x87c>
      cnt++;
 800500c:	2701      	movs	r7, #1
 800500e:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 8005012:	e739      	b.n	8004e88 <SNVMA_FlashManagerCallback+0x105c>
                   idx++)
 8005014:	463e      	mov	r6, r7
                  SNVMA_FlashInfo.BufferId = idx;
 8005016:	706e      	strb	r6, [r5, #1]
                  break;
 8005018:	f7ff b859 	b.w	80040ce <SNVMA_FlashManagerCallback+0x2a2>
                   idx++)
 800501c:	2603      	movs	r6, #3
                  SNVMA_FlashInfo.BufferId = idx;
 800501e:	706e      	strb	r6, [r5, #1]
                  break;
 8005020:	f7ff b855 	b.w	80040ce <SNVMA_FlashManagerCallback+0x2a2>
                        idx++)
 8005024:	463e      	mov	r6, r7
                        SNVMA_FlashInfo.BufferId = idx;
 8005026:	706e      	strb	r6, [r5, #1]
                        break;
 8005028:	e709      	b.n	8004e3e <SNVMA_FlashManagerCallback+0x1012>
                for (uint8_t cnt = 0x00;
 800502a:	2200      	movs	r2, #0
                  if ((SNVMA_IdBitmask & (1u << cnt)) != 0x00)
 800502c:	4613      	mov	r3, r2
 800502e:	e6f1      	b.n	8004e14 <SNVMA_FlashManagerCallback+0xfe8>
                        idx++)
 8005030:	2603      	movs	r6, #3
                        SNVMA_FlashInfo.BufferId = idx;
 8005032:	706e      	strb	r6, [r5, #1]
                        break;
 8005034:	e703      	b.n	8004e3e <SNVMA_FlashManagerCallback+0x1012>
                        idx++)
 8005036:	2602      	movs	r6, #2
                        SNVMA_FlashInfo.BufferId = idx;
 8005038:	706e      	strb	r6, [r5, #1]
                        break;
 800503a:	e700      	b.n	8004e3e <SNVMA_FlashManagerCallback+0x1012>
 800503c:	0802dbc0 	.word	0x0802dbc0
 8005040:	0802dce4 	.word	0x0802dce4
 8005044:	20000098 	.word	0x20000098
 8005048:	200058fc 	.word	0x200058fc
 800504c:	20005910 	.word	0x20005910
 8005050:	20005920 	.word	0x20005920

08005054 <SNVMA_Init>:
{
 8005054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (SNVMA_ModuleInit == TRUE)
 8005058:	4ea4      	ldr	r6, [pc, #656]	@ (80052ec <SNVMA_Init+0x298>)
{
 800505a:	b087      	sub	sp, #28
  if (SNVMA_ModuleInit == TRUE)
 800505c:	7832      	ldrb	r2, [r6, #0]
 800505e:	2a01      	cmp	r2, #1
 8005060:	d02c      	beq.n	80050bc <SNVMA_Init+0x68>
  else if (p_NvmStartAddress == NULL)
 8005062:	4682      	mov	sl, r0
 8005064:	b370      	cbz	r0, 80050c4 <SNVMA_Init+0x70>
  else if (((uint32_t)p_NvmStartAddress & SNVMA_MASK_ALIGNMENT_128) != 0x00000000)
 8005066:	f010 0f0f 	tst.w	r0, #15
 800506a:	d115      	bne.n	8005098 <SNVMA_Init+0x44>
  else if ((SNVMA_NUMBER_OF_SECTOR_NEEDED > FLASH_PAGE_NB) ||
 800506c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005070:	4a9f      	ldr	r2, [pc, #636]	@ (80052f0 <SNVMA_Init+0x29c>)
 8005072:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 8005076:	428a      	cmp	r2, r1
 8005078:	d012      	beq.n	80050a0 <SNVMA_Init+0x4c>
 800507a:	b18a      	cbz	r2, 80050a0 <SNVMA_Init+0x4c>
 800507c:	0292      	lsls	r2, r2, #10
 800507e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8005082:	d305      	bcc.n	8005090 <SNVMA_Init+0x3c>
           ((uint32_t)p_NvmStartAddress + (SNVMA_NUMBER_OF_SECTOR_NEEDED * FLASH_PAGE_SIZE) >
 8005084:	f500 4180 	add.w	r1, r0, #16384	@ 0x4000
            (FLASH_BASE_NS + FLASH_SIZE)))
 8005088:	f102 6200 	add.w	r2, r2, #134217728	@ 0x8000000
  else if ((SNVMA_NUMBER_OF_SECTOR_NEEDED > FLASH_PAGE_NB) ||
 800508c:	4291      	cmp	r1, r2
 800508e:	d90d      	bls.n	80050ac <SNVMA_Init+0x58>
    error = SNVMA_ERROR_NVM_OVERLAP_FLASH;
 8005090:	2008      	movs	r0, #8
}
 8005092:	b007      	add	sp, #28
 8005094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error = SNVMA_ERROR_NVM_NOT_ALIGNED;
 8005098:	2007      	movs	r0, #7
}
 800509a:	b007      	add	sp, #28
 800509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (FLASH_BASE_NS + FLASH_SIZE)))
 80050a0:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
           ((uint32_t)p_NvmStartAddress + (SNVMA_NUMBER_OF_SECTOR_NEEDED * FLASH_PAGE_SIZE) >
 80050a4:	f50a 4180 	add.w	r1, sl, #16384	@ 0x4000
  else if ((SNVMA_NUMBER_OF_SECTOR_NEEDED > FLASH_PAGE_NB) ||
 80050a8:	4291      	cmp	r1, r2
 80050aa:	d8f1      	bhi.n	8005090 <SNVMA_Init+0x3c>
    crcCtrlStatus = CRCCTRL_RegisterHandle(&SNVMA_Handle);
 80050ac:	4891      	ldr	r0, [pc, #580]	@ (80052f4 <SNVMA_Init+0x2a0>)
 80050ae:	f001 fc87 	bl	80069c0 <CRCCTRL_RegisterHandle>
    if ((CRCCTRL_OK != crcCtrlStatus) &&
 80050b2:	b158      	cbz	r0, 80050cc <SNVMA_Init+0x78>
 80050b4:	2803      	cmp	r0, #3
 80050b6:	d009      	beq.n	80050cc <SNVMA_Init+0x78>
      error = SNVMA_ERROR_CRC_INIT;
 80050b8:	200c      	movs	r0, #12
  return error;
 80050ba:	e7ee      	b.n	800509a <SNVMA_Init+0x46>
    error = SNVMA_ERROR_ALREADY_INIT;
 80050bc:	2003      	movs	r0, #3
}
 80050be:	b007      	add	sp, #28
 80050c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error = SNVMA_ERROR_NVM_NULL;
 80050c4:	2006      	movs	r0, #6
}
 80050c6:	b007      	add	sp, #28
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050cc:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80050d0:	b672      	cpsid	i
      SNVMA_FlashCallback.Callback = SNVMA_FlashManagerCallback;
 80050d2:	4a89      	ldr	r2, [pc, #548]	@ (80052f8 <SNVMA_Init+0x2a4>)
 80050d4:	4989      	ldr	r1, [pc, #548]	@ (80052fc <SNVMA_Init+0x2a8>)
        bankNbr += SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 80050d6:	4c8a      	ldr	r4, [pc, #552]	@ (8005300 <SNVMA_Init+0x2ac>)
      SNVMA_FlashCallback.Callback = SNVMA_FlashManagerCallback;
 80050d8:	6091      	str	r1, [r2, #8]
      memset ((void *)SNVMA_BankConfiguration,
 80050da:	488a      	ldr	r0, [pc, #552]	@ (8005304 <SNVMA_Init+0x2b0>)
 80050dc:	2228      	movs	r2, #40	@ 0x28
 80050de:	2100      	movs	r1, #0
 80050e0:	f026 fc0a 	bl	802b8f8 <memset>
        bankNbr += SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 80050e4:	7821      	ldrb	r1, [r4, #0]
        bankPrint += (SNVMA_NvmConfiguration[nvmIdx].BankSize * SNVMA_NvmConfiguration[nvmIdx].BankNumber);
 80050e6:	7862      	ldrb	r2, [r4, #1]
        if ((SNVMA_NvmConfiguration[nvmIdx].BankNumber < SNVMA_MIN_NUMBER_BANK) ||
 80050e8:	2902      	cmp	r1, #2
        bankPrint += (SNVMA_NvmConfiguration[nvmIdx].BankSize * SNVMA_NvmConfiguration[nvmIdx].BankNumber);
 80050ea:	fb12 f001 	smulbb	r0, r2, r1
        if ((SNVMA_NvmConfiguration[nvmIdx].BankNumber < SNVMA_MIN_NUMBER_BANK) ||
 80050ee:	d108      	bne.n	8005102 <SNVMA_Init+0xae>
        else if ((SNVMA_NvmConfiguration[nvmIdx].BankSize == 0x00) ||
 80050f0:	b10a      	cbz	r2, 80050f6 <SNVMA_Init+0xa2>
 80050f2:	2802      	cmp	r0, #2
 80050f4:	dd07      	ble.n	8005106 <SNVMA_Init+0xb2>
          error = SNVMA_ERROR_BANK_SIZE;
 80050f6:	200e      	movs	r0, #14
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	f389 8810 	msr	PRIMASK, r9
}
 80050fc:	b007      	add	sp, #28
 80050fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          error = SNVMA_ERROR_BANK_NUMBER;
 8005102:	200d      	movs	r0, #13
 8005104:	e7f8      	b.n	80050f8 <SNVMA_Init+0xa4>
          SNVMA_NvmConfiguration[nvmIdx].p_BankList = &SNVMA_BankConfiguration[bankConfIdx];
 8005106:	f04f 0b00 	mov.w	fp, #0
  uint32_t addressOffset = 0x00;
 800510a:	46d8      	mov	r8, fp
          SNVMA_NvmConfiguration[nvmIdx].p_BankList = &SNVMA_BankConfiguration[bankConfIdx];
 800510c:	4b7d      	ldr	r3, [pc, #500]	@ (8005304 <SNVMA_Init+0x2b0>)
  uint32_t addressOffset = 0x00;
 800510e:	f8cd 900c 	str.w	r9, [sp, #12]
          SNVMA_NvmConfiguration[nvmIdx].p_BankList = &SNVMA_BankConfiguration[bankConfIdx];
 8005112:	6063      	str	r3, [r4, #4]
      nvmOffset = (uint32_t)p_NvmStartAddress - FLASH_BASE_NS;
 8005114:	f10a 4378 	add.w	r3, sl, #4160749568	@ 0xf8000000
 8005118:	9301      	str	r3, [sp, #4]
            SNVMA_BankConfiguration[bankConfIdx].p_StartAddr = (uint32_t *)((uint32_t)p_NvmStartAddress + addressOffset);
 800511a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800511e:	4979      	ldr	r1, [pc, #484]	@ (8005304 <SNVMA_Init+0x2b0>)
 8005120:	fa1f f98b 	uxth.w	r9, fp
 8005124:	eb0a 0508 	add.w	r5, sl, r8
 8005128:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 800512c:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 8005130:	f83a 3008 	ldrh.w	r3, [sl, r8]
            SNVMA_BankConfiguration[bankConfIdx].p_StartAddr = (uint32_t *)((uint32_t)p_NvmStartAddress + addressOffset);
 8005134:	ea4f 0789 	mov.w	r7, r9, lsl #2
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 8005138:	4283      	cmp	r3, r0
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 == SNVMA_ERASED_CONTENT) &&
 800513a:	f8b5 100b 	ldrh.w	r1, [r5, #11]
            SNVMA_BankConfiguration[bankConfIdx].p_StartAddr = (uint32_t *)((uint32_t)p_NvmStartAddress + addressOffset);
 800513e:	9702      	str	r7, [sp, #8]
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 8005140:	d03c      	beq.n	80051bc <SNVMA_Init+0x168>
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 8005142:	f8b5 3005 	ldrh.w	r3, [r5, #5]
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 +
 8005146:	8928      	ldrh	r0, [r5, #8]
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 8005148:	4403      	add	r3, r0
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 +
 800514a:	440b      	add	r3, r1
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4) >
 800514c:	89e9      	ldrh	r1, [r5, #14]
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 +
 800514e:	440b      	add	r3, r1
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 8005150:	ebb3 2fc2 	cmp.w	r3, r2, lsl #11
 8005154:	d802      	bhi.n	800515c <SNVMA_Init+0x108>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 != (NvmId * SNVMA_MAX_NUMBER_BUFFER))
 8005156:	7928      	ldrb	r0, [r5, #4]
 8005158:	2800      	cmp	r0, #0
 800515a:	d049      	beq.n	80051f0 <SNVMA_Init+0x19c>
              while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 800515c:	9b01      	ldr	r3, [sp, #4]
 800515e:	eb03 0508 	add.w	r5, r3, r8
 8005162:	0b6d      	lsrs	r5, r5, #13
 8005164:	3d01      	subs	r5, #1
      funcError = FD_EraseSectors ((SectorId + sectorIdx));
 8005166:	18a8      	adds	r0, r5, r2
 8005168:	b32a      	cbz	r2, 80051b6 <SNVMA_Init+0x162>
 800516a:	f7fe fb93 	bl	8003894 <FD_EraseSectors>
      if (FD_FLASHOP_SUCCESS == funcError)
 800516e:	bb18      	cbnz	r0, 80051b8 <SNVMA_Init+0x164>
              LOG_ERROR_SYSTEM("\r\nSNVMA_Init - Corrupted banks erases [IsHeaderOk]");
 8005170:	2101      	movs	r1, #1
 8005172:	4a65      	ldr	r2, [pc, #404]	@ (8005308 <SNVMA_Init+0x2b4>)
 8005174:	4608      	mov	r0, r1
 8005176:	f7fd fc4b 	bl	8002a10 <Log_Module_Print>
            if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 800517a:	68e2      	ldr	r2, [r4, #12]
              SNVMA_NvmConfiguration[nvmIdx].p_BankForWrite = &SNVMA_NvmConfiguration[nvmIdx].p_BankList[0];
 800517c:	6861      	ldr	r1, [r4, #4]
                    &SNVMA_NvmConfiguration[nvmIdx].p_BankList[SNVMA_NvmConfiguration[nvmIdx].BankNumber - 1])
 800517e:	7820      	ldrb	r0, [r4, #0]
            if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 8005180:	b14a      	cbz	r2, 8005196 <SNVMA_Init+0x142>
                    &SNVMA_NvmConfiguration[nvmIdx].p_BankList[SNVMA_NvmConfiguration[nvmIdx].BankNumber - 1])
 8005182:	2314      	movs	r3, #20
 8005184:	6861      	ldr	r1, [r4, #4]
 8005186:	7820      	ldrb	r0, [r4, #0]
 8005188:	fb03 1300 	mla	r3, r3, r0, r1
 800518c:	3b14      	subs	r3, #20
            else if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore ==
 800518e:	429a      	cmp	r2, r3
              SNVMA_NvmConfiguration[nvmIdx].p_BankForWrite = SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore + 1;
 8005190:	bf18      	it	ne
 8005192:	f102 0114 	addne.w	r1, r2, #20
              bankIdx < SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 8005196:	f10b 0b01 	add.w	fp, fp, #1
            addressOffset = addressOffset + ((SNVMA_NvmConfiguration[nvmIdx].BankSize * FLASH_PAGE_SIZE));
 800519a:	7862      	ldrb	r2, [r4, #1]
              bankIdx < SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 800519c:	fa5f f38b 	uxtb.w	r3, fp
 80051a0:	4298      	cmp	r0, r3
              SNVMA_NvmConfiguration[nvmIdx].p_BankForWrite = &SNVMA_NvmConfiguration[nvmIdx].p_BankList[0];
 80051a2:	60a1      	str	r1, [r4, #8]
            addressOffset = addressOffset + ((SNVMA_NvmConfiguration[nvmIdx].BankSize * FLASH_PAGE_SIZE));
 80051a4:	eb08 3842 	add.w	r8, r8, r2, lsl #13
              bankIdx < SNVMA_NvmConfiguration[nvmIdx].BankNumber;
 80051a8:	d8b7      	bhi.n	800511a <SNVMA_Init+0xc6>
        SNVMA_ModuleInit = TRUE;
 80051aa:	2301      	movs	r3, #1
        error = SNVMA_ERROR_OK;
 80051ac:	2000      	movs	r0, #0
        SNVMA_ModuleInit = TRUE;
 80051ae:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80051b2:	7033      	strb	r3, [r6, #0]
        error = SNVMA_ERROR_OK;
 80051b4:	e7a0      	b.n	80050f8 <SNVMA_Init+0xa4>
  if (0u != SectorNumber)
 80051b6:	e7fe      	b.n	80051b6 <SNVMA_Init+0x162>
                                  SNVMA_NvmConfiguration[nvmIdx].BankSize) == FALSE);
 80051b8:	7862      	ldrb	r2, [r4, #1]
 80051ba:	e7d4      	b.n	8005166 <SNVMA_Init+0x112>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->Counter == (uint8_t)SNVMA_ERASED_CONTENT) &&
 80051bc:	8868      	ldrh	r0, [r5, #2]
 80051be:	4298      	cmp	r0, r3
 80051c0:	d1bf      	bne.n	8005142 <SNVMA_Init+0xee>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 80051c2:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80051c6:	686f      	ldr	r7, [r5, #4]
 80051c8:	401f      	ands	r7, r3
 80051ca:	429f      	cmp	r7, r3
 80051cc:	d1b9      	bne.n	8005142 <SNVMA_Init+0xee>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 == SNVMA_ERASED_CONTENT) &&
 80051ce:	79eb      	ldrb	r3, [r5, #7]
 80051d0:	2bff      	cmp	r3, #255	@ 0xff
 80051d2:	d1b6      	bne.n	8005142 <SNVMA_Init+0xee>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 == SNVMA_ERASED_CONTENT) &&
 80051d4:	68ab      	ldr	r3, [r5, #8]
 80051d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80051da:	42bb      	cmp	r3, r7
 80051dc:	d1b1      	bne.n	8005142 <SNVMA_Init+0xee>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 80051de:	4281      	cmp	r1, r0
 80051e0:	d1af      	bne.n	8005142 <SNVMA_Init+0xee>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 80051e2:	68eb      	ldr	r3, [r5, #12]
 80051e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051e8:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 80051ec:	d1a9      	bne.n	8005142 <SNVMA_Init+0xee>
 80051ee:	e7b5      	b.n	800515c <SNVMA_Init+0x108>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId2 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1))
 80051f0:	79e9      	ldrb	r1, [r5, #7]
 80051f2:	2901      	cmp	r1, #1
 80051f4:	d1b2      	bne.n	800515c <SNVMA_Init+0x108>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2))
 80051f6:	7aab      	ldrb	r3, [r5, #10]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d1af      	bne.n	800515c <SNVMA_Init+0x108>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3))
 80051fc:	7b6b      	ldrb	r3, [r5, #13]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d1ac      	bne.n	800515c <SNVMA_Init+0x108>
  uint32_t * payloadAddr = (uint32_t *)((uint32_t)(p_BankStartAddress) + sizeof (SNVMA_BankHeader_t));
 8005202:	f105 0310 	add.w	r3, r5, #16
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 8005206:	4a41      	ldr	r2, [pc, #260]	@ (800530c <SNVMA_Init+0x2b8>)
  uint32_t crcComputedValue = 0x00;
 8005208:	9005      	str	r0, [sp, #20]
  uint32_t * payloadAddr = (uint32_t *)((uint32_t)(p_BankStartAddress) + sizeof (SNVMA_BankHeader_t));
 800520a:	9300      	str	r3, [sp, #0]
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 800520c:	f7fd fc00 	bl	8002a10 <Log_Module_Print>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1)
 8005210:	f8b5 2005 	ldrh.w	r2, [r5, #5]
 8005214:	2a00      	cmp	r2, #0
 8005216:	d14e      	bne.n	80052b6 <SNVMA_Init+0x262>
 8005218:	4617      	mov	r7, r2
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2)
 800521a:	892a      	ldrh	r2, [r5, #8]
 800521c:	2a00      	cmp	r2, #0
 800521e:	f040 808a 	bne.w	8005336 <SNVMA_Init+0x2e2>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3)
 8005222:	f8b5 200b 	ldrh.w	r2, [r5, #11]
 8005226:	2a00      	cmp	r2, #0
 8005228:	d176      	bne.n	8005318 <SNVMA_Init+0x2c4>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4)
 800522a:	89ea      	ldrh	r2, [r5, #14]
 800522c:	2a00      	cmp	r2, #0
 800522e:	d150      	bne.n	80052d2 <SNVMA_Init+0x27e>
  if (crcComputedValue == ((SNVMA_BankHeader_t *)p_BankStartAddress)->Crc)
 8005230:	886b      	ldrh	r3, [r5, #2]
 8005232:	9a05      	ldr	r2, [sp, #20]
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <SNVMA_Init+0x216>
  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 8005238:	4613      	mov	r3, r2
 800523a:	2101      	movs	r1, #1
 800523c:	2000      	movs	r0, #0
 800523e:	4a34      	ldr	r2, [pc, #208]	@ (8005310 <SNVMA_Init+0x2bc>)
 8005240:	f7fd fbe6 	bl	8002a10 <Log_Module_Print>
              while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	eb03 0508 	add.w	r5, r3, r8
 800524a:	0b6d      	lsrs	r5, r5, #13
 800524c:	7863      	ldrb	r3, [r4, #1]
    sectorIdx = (SectorNumber - 1u);
 800524e:	1e58      	subs	r0, r3, #1
      funcError = FD_EraseSectors ((SectorId + sectorIdx));
 8005250:	4428      	add	r0, r5
 8005252:	b14b      	cbz	r3, 8005268 <SNVMA_Init+0x214>
 8005254:	f7fe fb1e 	bl	8003894 <FD_EraseSectors>
      if (FD_FLASHOP_SUCCESS == funcError)
 8005258:	2800      	cmp	r0, #0
 800525a:	d1f7      	bne.n	800524c <SNVMA_Init+0x1f8>
              LOG_ERROR_SYSTEM("\r\nSNVMA_Init - Corrupted banks erases [IsCrcOk]");
 800525c:	2101      	movs	r1, #1
 800525e:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <SNVMA_Init+0x2c0>)
 8005260:	4608      	mov	r0, r1
 8005262:	f7fd fbd5 	bl	8002a10 <Log_Module_Print>
 8005266:	e788      	b.n	800517a <SNVMA_Init+0x126>
  if (0u != SectorNumber)
 8005268:	e7fe      	b.n	8005268 <SNVMA_Init+0x214>
  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 800526a:	4a29      	ldr	r2, [pc, #164]	@ (8005310 <SNVMA_Init+0x2bc>)
 800526c:	2101      	movs	r1, #1
 800526e:	2000      	movs	r0, #0
 8005270:	f7fd fbce 	bl	8002a10 <Log_Module_Print>
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = &SNVMA_BankConfiguration[bankConfIdx];
 8005274:	9b02      	ldr	r3, [sp, #8]
 8005276:	4a23      	ldr	r2, [pc, #140]	@ (8005304 <SNVMA_Init+0x2b0>)
              if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 8005278:	68e5      	ldr	r5, [r4, #12]
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = &SNVMA_BankConfiguration[bankConfIdx];
 800527a:	444b      	add	r3, r9
 800527c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
              if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 8005280:	2d00      	cmp	r5, #0
 8005282:	f000 808d 	beq.w	80053a0 <SNVMA_Init+0x34c>
      p_SecondBankHeader->Counter)
 8005286:	491f      	ldr	r1, [pc, #124]	@ (8005304 <SNVMA_Init+0x2b0>)
 8005288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800528c:	7859      	ldrb	r1, [r3, #1]
  SNVMA_BankHeader_t * p_FirstBankHeader = (SNVMA_BankHeader_t *)p_FirstBank->p_StartAddr;
 800528e:	682b      	ldr	r3, [r5, #0]
  if (p_FirstBankHeader->Counter <
 8005290:	7858      	ldrb	r0, [r3, #1]
 8005292:	4288      	cmp	r0, r1
 8005294:	d36f      	bcc.n	8005376 <SNVMA_Init+0x322>
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = GetNewestBank (p_currentRestoreBank,
 8005296:	60e5      	str	r5, [r4, #12]
                  while (EraseSector (((nvmOffset + addressOffset) / FLASH_PAGE_SIZE),
 8005298:	9b01      	ldr	r3, [sp, #4]
 800529a:	eb03 0508 	add.w	r5, r3, r8
 800529e:	0b6d      	lsrs	r5, r5, #13
 80052a0:	7863      	ldrb	r3, [r4, #1]
    sectorIdx = (SectorNumber - 1u);
 80052a2:	1e58      	subs	r0, r3, #1
      funcError = FD_EraseSectors ((SectorId + sectorIdx));
 80052a4:	4428      	add	r0, r5
 80052a6:	b903      	cbnz	r3, 80052aa <SNVMA_Init+0x256>
  if (0u != SectorNumber)
 80052a8:	e7fe      	b.n	80052a8 <SNVMA_Init+0x254>
      funcError = FD_EraseSectors ((SectorId + sectorIdx));
 80052aa:	f7fe faf3 	bl	8003894 <FD_EraseSectors>
      if (FD_FLASHOP_SUCCESS == funcError)
 80052ae:	2800      	cmp	r0, #0
 80052b0:	f43f af63 	beq.w	800517a <SNVMA_Init+0x126>
 80052b4:	e7f4      	b.n	80052a0 <SNVMA_Init+0x24c>
          eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 80052b6:	9900      	ldr	r1, [sp, #0]
 80052b8:	480e      	ldr	r0, [pc, #56]	@ (80052f4 <SNVMA_Init+0x2a0>)
 80052ba:	ab05      	add	r3, sp, #20
 80052bc:	f001 fba2 	bl	8006a04 <CRCCTRL_Calculate>
          if (CRCCTRL_OK == eReturn)
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d146      	bne.n	8005352 <SNVMA_Init+0x2fe>
            offSet = SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 * sizeof (uint32_t));
 80052c4:	f8b5 7005 	ldrh.w	r7, [r5, #5]
 80052c8:	00bf      	lsls	r7, r7, #2
 80052ca:	370f      	adds	r7, #15
 80052cc:	f027 070f 	bic.w	r7, r7, #15
    switch (cnt)
 80052d0:	e7a3      	b.n	800521a <SNVMA_Init+0x1c6>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 80052d2:	9900      	ldr	r1, [sp, #0]
 80052d4:	4807      	ldr	r0, [pc, #28]	@ (80052f4 <SNVMA_Init+0x2a0>)
 80052d6:	ab05      	add	r3, sp, #20
 80052d8:	1879      	adds	r1, r7, r1
 80052da:	f001 fc09 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 80052de:	2800      	cmp	r0, #0
 80052e0:	d0a6      	beq.n	8005230 <SNVMA_Init+0x1dc>
          else if (CRCCTRL_BUSY == eReturn)
 80052e2:	2802      	cmp	r0, #2
 80052e4:	d0a1      	beq.n	800522a <SNVMA_Init+0x1d6>
            Error_Handler();
 80052e6:	f7fb fc19 	bl	8000b1c <Error_Handler>
    switch (cnt)
 80052ea:	e79e      	b.n	800522a <SNVMA_Init+0x1d6>
 80052ec:	20005925 	.word	0x20005925
 80052f0:	0bf90700 	.word	0x0bf90700
 80052f4:	20000098 	.word	0x20000098
 80052f8:	200058fc 	.word	0x200058fc
 80052fc:	08003e2d 	.word	0x08003e2d
 8005300:	200000c0 	.word	0x200000c0
 8005304:	200058d0 	.word	0x200058d0
 8005308:	0802df1c 	.word	0x0802df1c
 800530c:	0802dca0 	.word	0x0802dca0
 8005310:	0802dcbc 	.word	0x0802dcbc
 8005314:	0802df50 	.word	0x0802df50
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8005318:	9900      	ldr	r1, [sp, #0]
 800531a:	4822      	ldr	r0, [pc, #136]	@ (80053a4 <SNVMA_Init+0x350>)
 800531c:	ab05      	add	r3, sp, #20
 800531e:	1879      	adds	r1, r7, r1
 8005320:	f001 fbe6 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8005324:	b9d8      	cbnz	r0, 800535e <SNVMA_Init+0x30a>
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 * sizeof (uint32_t));
 8005326:	f8b5 300b 	ldrh.w	r3, [r5, #11]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	330f      	adds	r3, #15
 800532e:	f023 030f 	bic.w	r3, r3, #15
 8005332:	441f      	add	r7, r3
    switch (cnt)
 8005334:	e779      	b.n	800522a <SNVMA_Init+0x1d6>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8005336:	9900      	ldr	r1, [sp, #0]
 8005338:	481a      	ldr	r0, [pc, #104]	@ (80053a4 <SNVMA_Init+0x350>)
 800533a:	ab05      	add	r3, sp, #20
 800533c:	1879      	adds	r1, r7, r1
 800533e:	f001 fbd7 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8005342:	b990      	cbnz	r0, 800536a <SNVMA_Init+0x316>
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 * sizeof (uint32_t));
 8005344:	892b      	ldrh	r3, [r5, #8]
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	330f      	adds	r3, #15
 800534a:	f023 030f 	bic.w	r3, r3, #15
 800534e:	441f      	add	r7, r3
    switch (cnt)
 8005350:	e767      	b.n	8005222 <SNVMA_Init+0x1ce>
          else if (CRCCTRL_BUSY == eReturn)
 8005352:	2802      	cmp	r0, #2
 8005354:	f43f af5c 	beq.w	8005210 <SNVMA_Init+0x1bc>
            Error_Handler();
 8005358:	f7fb fbe0 	bl	8000b1c <Error_Handler>
    switch (cnt)
 800535c:	e758      	b.n	8005210 <SNVMA_Init+0x1bc>
          else if (CRCCTRL_BUSY == eReturn)
 800535e:	2802      	cmp	r0, #2
 8005360:	f43f af5f 	beq.w	8005222 <SNVMA_Init+0x1ce>
            Error_Handler();
 8005364:	f7fb fbda 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8005368:	e75b      	b.n	8005222 <SNVMA_Init+0x1ce>
          else if (CRCCTRL_BUSY == eReturn)
 800536a:	2802      	cmp	r0, #2
 800536c:	f43f af55 	beq.w	800521a <SNVMA_Init+0x1c6>
            Error_Handler();
 8005370:	f7fb fbd4 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8005374:	e751      	b.n	800521a <SNVMA_Init+0x1c6>
    if ((p_SecondBankHeader->Counter -
 8005376:	1a09      	subs	r1, r1, r0
 8005378:	29ff      	cmp	r1, #255	@ 0xff
 800537a:	d08c      	beq.n	8005296 <SNVMA_Init+0x242>
                if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == p_currentRestoreBank)
 800537c:	4295      	cmp	r5, r2
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = GetNewestBank (p_currentRestoreBank,
 800537e:	60e2      	str	r2, [r4, #12]
                if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == p_currentRestoreBank)
 8005380:	d08a      	beq.n	8005298 <SNVMA_Init+0x244>
                  while (EraseSector ((((uint32_t)p_currentRestoreBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 8005382:	7862      	ldrb	r2, [r4, #1]
 8005384:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
    sectorIdx = (SectorNumber - 1u);
 8005388:	1e50      	subs	r0, r2, #1
                  while (EraseSector ((((uint32_t)p_currentRestoreBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800538a:	0b5b      	lsrs	r3, r3, #13
      funcError = FD_EraseSectors ((SectorId + sectorIdx));
 800538c:	4418      	add	r0, r3
 800538e:	b132      	cbz	r2, 800539e <SNVMA_Init+0x34a>
 8005390:	f7fe fa80 	bl	8003894 <FD_EraseSectors>
      if (FD_FLASHOP_SUCCESS == funcError)
 8005394:	2800      	cmp	r0, #0
 8005396:	f43f aef0 	beq.w	800517a <SNVMA_Init+0x126>
                  while (EraseSector ((((uint32_t)p_currentRestoreBank->p_StartAddr - FLASH_BASE_NS) / FLASH_PAGE_SIZE),
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	e7f1      	b.n	8005382 <SNVMA_Init+0x32e>
  if (0u != SectorNumber)
 800539e:	e7fe      	b.n	800539e <SNVMA_Init+0x34a>
                SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore = &SNVMA_BankConfiguration[bankConfIdx];
 80053a0:	60e2      	str	r2, [r4, #12]
            if (SNVMA_NvmConfiguration[nvmIdx].p_BankForRestore == NULL)
 80053a2:	e6ee      	b.n	8005182 <SNVMA_Init+0x12e>
 80053a4:	20000098 	.word	0x20000098

080053a8 <SNVMA_Register>:
{
 80053a8:	b570      	push	{r4, r5, r6, lr}
  if (SNVMA_ModuleInit == FALSE)
 80053aa:	4b4d      	ldr	r3, [pc, #308]	@ (80054e0 <SNVMA_Register+0x138>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b1bb      	cbz	r3, 80053e0 <SNVMA_Register+0x38>
  else if (SNVMA_CommandPending == TRUE)
 80053b0:	4b4c      	ldr	r3, [pc, #304]	@ (80054e4 <SNVMA_Register+0x13c>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f000 808c 	beq.w	80054d2 <SNVMA_Register+0x12a>
  else if (BufferId >= SNVMA_BufferId_Max)
 80053ba:	b9d0      	cbnz	r0, 80053f2 <SNVMA_Register+0x4a>
  else if (p_BufferAddress == NULL)
 80053bc:	2900      	cmp	r1, #0
 80053be:	f000 808b 	beq.w	80054d8 <SNVMA_Register+0x130>
  else if (((uint32_t)p_BufferAddress & SNVMA_MASK_ALIGNMENT_32) != 0x00000000u)
 80053c2:	078b      	lsls	r3, r1, #30
 80053c4:	d118      	bne.n	80053f8 <SNVMA_Register+0x50>
  else if (BufferSize == 0x00)
 80053c6:	b362      	cbz	r2, 8005422 <SNVMA_Register+0x7a>
  else if ((SNVMA_NvmConfiguration[nvmId].a_Buffers[0].p_Addr != NULL) &&
 80053c8:	4847      	ldr	r0, [pc, #284]	@ (80054e8 <SNVMA_Register+0x140>)
 80053ca:	6a03      	ldr	r3, [r0, #32]
 80053cc:	b363      	cbz	r3, 8005428 <SNVMA_Register+0x80>
 80053ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80053d0:	b1ab      	cbz	r3, 80053fe <SNVMA_Register+0x56>
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[1].p_Addr != NULL) &&
 80053d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80053d4:	b19b      	cbz	r3, 80053fe <SNVMA_Register+0x56>
           (SNVMA_NvmConfiguration[nvmId].a_Buffers[2].p_Addr != NULL) &&
 80053d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80053d8:	b18b      	cbz	r3, 80053fe <SNVMA_Register+0x56>
 80053da:	2309      	movs	r3, #9
    error = SNVMA_ERROR_NVM_BUFFER_FULL;
 80053dc:	461c      	mov	r4, r3
 80053de:	e001      	b.n	80053e4 <SNVMA_Register+0x3c>
 80053e0:	2302      	movs	r3, #2
    error = SNVMA_ERROR_NOT_INIT;
 80053e2:	461c      	mov	r4, r3
  LOG_ERROR_SYSTEM("\r\nSNVMA_Register returned %d", (uint8_t)error);
 80053e4:	2101      	movs	r1, #1
 80053e6:	4a41      	ldr	r2, [pc, #260]	@ (80054ec <SNVMA_Register+0x144>)
 80053e8:	4608      	mov	r0, r1
 80053ea:	f7fd fb11 	bl	8002a10 <Log_Module_Print>
}
 80053ee:	4620      	mov	r0, r4
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
 80053f2:	230f      	movs	r3, #15
    error = SNVMA_ERROR_BUFFERID_NOT_KNOWN;
 80053f4:	461c      	mov	r4, r3
 80053f6:	e7f5      	b.n	80053e4 <SNVMA_Register+0x3c>
 80053f8:	2312      	movs	r3, #18
    error = SNVMA_ERROR_BUFFER_NOT_ALIGNED;
 80053fa:	461c      	mov	r4, r3
 80053fc:	e7f2      	b.n	80053e4 <SNVMA_Register+0x3c>
  uint32_t neededSpace = SNVMA_ALIGN_128 ((BufferSize * sizeof (uint32_t)));
 80053fe:	0093      	lsls	r3, r2, #2
 8005400:	330f      	adds	r3, #15
 8005402:	f023 0c0f 	bic.w	ip, r3, #15
        neededSpace = neededSpace + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 8005406:	6a43      	ldr	r3, [r0, #36]	@ 0x24
        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 8005408:	7844      	ldrb	r4, [r0, #1]
        neededSpace = neededSpace + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	330f      	adds	r3, #15
 800540e:	f023 030f 	bic.w	r3, r3, #15
 8005412:	4463      	add	r3, ip
        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 8005414:	f103 0510 	add.w	r5, r3, #16
 8005418:	ebb5 3f44 	cmp.w	r5, r4, lsl #13
 800541c:	ea4f 3e44 	mov.w	lr, r4, lsl #13
 8005420:	d90b      	bls.n	800543a <SNVMA_Register+0x92>
 8005422:	2313      	movs	r3, #19
    error = SNVMA_ERROR_BUFFER_SIZE;
 8005424:	461c      	mov	r4, r3
 8005426:	e7dd      	b.n	80053e4 <SNVMA_Register+0x3c>
  uint32_t neededSpace = SNVMA_ALIGN_128 ((BufferSize * sizeof (uint32_t)));
 8005428:	0093      	lsls	r3, r2, #2
 800542a:	330f      	adds	r3, #15
 800542c:	f023 030f 	bic.w	r3, r3, #15
 8005430:	469c      	mov	ip, r3
        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 8005432:	f890 e001 	ldrb.w	lr, [r0, #1]
 8005436:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
      if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 800543a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800543c:	b14c      	cbz	r4, 8005452 <SNVMA_Register+0xaa>
        neededSpace = neededSpace + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 800543e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005440:	00a4      	lsls	r4, r4, #2
 8005442:	340f      	adds	r4, #15
 8005444:	f024 040f 	bic.w	r4, r4, #15
 8005448:	4423      	add	r3, r4
        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 800544a:	f103 0410 	add.w	r4, r3, #16
 800544e:	45a6      	cmp	lr, r4
 8005450:	d3e7      	bcc.n	8005422 <SNVMA_Register+0x7a>
      if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 8005452:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005454:	b14c      	cbz	r4, 800546a <SNVMA_Register+0xc2>
        neededSpace = neededSpace + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 8005456:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005458:	00a4      	lsls	r4, r4, #2
 800545a:	340f      	adds	r4, #15
 800545c:	f024 040f 	bic.w	r4, r4, #15
 8005460:	4423      	add	r3, r4
        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 8005462:	f103 0410 	add.w	r4, r3, #16
 8005466:	45a6      	cmp	lr, r4
 8005468:	d3db      	bcc.n	8005422 <SNVMA_Register+0x7a>
      if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 800546a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800546c:	b144      	cbz	r4, 8005480 <SNVMA_Register+0xd8>
        neededSpace = neededSpace + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 800546e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005470:	00a4      	lsls	r4, r4, #2
 8005472:	340f      	adds	r4, #15
 8005474:	f024 040f 	bic.w	r4, r4, #15
        if (((neededSpace + offSet)) > (SNVMA_NvmConfiguration[nvmId].BankSize * FLASH_PAGE_SIZE))
 8005478:	3410      	adds	r4, #16
 800547a:	4423      	add	r3, r4
 800547c:	4573      	cmp	r3, lr
 800547e:	d8d0      	bhi.n	8005422 <SNVMA_Register+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005480:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005484:	b672      	cpsid	i
      SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr = (uint32_t *)p_BufferAddress;
 8005486:	6201      	str	r1, [r0, #32]
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 8005488:	6881      	ldr	r1, [r0, #8]
      SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size = BufferSize;
 800548a:	6242      	str	r2, [r0, #36]	@ 0x24
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 800548c:	680d      	ldr	r5, [r1, #0]
        if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 800548e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 8005490:	f105 0610 	add.w	r6, r5, #16
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 8005494:	f10c 0310 	add.w	r3, ip, #16
          SNVMA_NvmConfiguration[nvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 8005498:	604e      	str	r6, [r1, #4]
        if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 800549a:	b13a      	cbz	r2, 80054ac <SNVMA_Register+0x104>
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 800549c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 800549e:	195e      	adds	r6, r3, r5
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 80054a0:	0092      	lsls	r2, r2, #2
 80054a2:	320f      	adds	r2, #15
 80054a4:	f022 020f 	bic.w	r2, r2, #15
          SNVMA_NvmConfiguration[nvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 80054a8:	608e      	str	r6, [r1, #8]
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 80054aa:	4413      	add	r3, r2
        if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 80054ac:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80054ae:	b13a      	cbz	r2, 80054c0 <SNVMA_Register+0x118>
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 80054b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 80054b2:	18ee      	adds	r6, r5, r3
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 80054b4:	0092      	lsls	r2, r2, #2
 80054b6:	320f      	adds	r2, #15
 80054b8:	f022 020f 	bic.w	r2, r2, #15
          SNVMA_NvmConfiguration[nvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 80054bc:	60ce      	str	r6, [r1, #12]
          offSet = offSet + SNVMA_ALIGN_128 ((SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].Size *
 80054be:	4413      	add	r3, r2
        if (SNVMA_NvmConfiguration[nvmId].a_Buffers[cnt].p_Addr != NULL)
 80054c0:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80054c2:	b10a      	cbz	r2, 80054c8 <SNVMA_Register+0x120>
            (uint32_t *)(((uint32_t)SNVMA_NvmConfiguration[nvmId].p_BankForWrite->p_StartAddr) + offSet);
 80054c4:	441d      	add	r5, r3
          SNVMA_NvmConfiguration[nvmId].p_BankForWrite->ap_BufferAddr[cnt] =
 80054c6:	610d      	str	r5, [r1, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	f384 8810 	msr	PRIMASK, r4
      error = SNVMA_ERROR_OK;
 80054cc:	2400      	movs	r4, #0
 80054ce:	4623      	mov	r3, r4
 80054d0:	e788      	b.n	80053e4 <SNVMA_Register+0x3c>
 80054d2:	2304      	movs	r3, #4
    error = SNVMA_ERROR_CMD_PENDING;
 80054d4:	461c      	mov	r4, r3
 80054d6:	e785      	b.n	80053e4 <SNVMA_Register+0x3c>
 80054d8:	2311      	movs	r3, #17
    error = SNVMA_ERROR_BUFFER_NULL;
 80054da:	461c      	mov	r4, r3
 80054dc:	e782      	b.n	80053e4 <SNVMA_Register+0x3c>
 80054de:	bf00      	nop
 80054e0:	20005925 	.word	0x20005925
 80054e4:	20005924 	.word	0x20005924
 80054e8:	200000c0 	.word	0x200000c0
 80054ec:	0802df80 	.word	0x0802df80

080054f0 <SNVMA_Restore>:
{
 80054f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SNVMA_ModuleInit == FALSE)
 80054f4:	4b9d      	ldr	r3, [pc, #628]	@ (800576c <SNVMA_Restore+0x27c>)
{
 80054f6:	b082      	sub	sp, #8
  if (SNVMA_ModuleInit == FALSE)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d034      	beq.n	8005568 <SNVMA_Restore+0x78>
  else if (SNVMA_CommandPending == TRUE)
 80054fe:	4e9c      	ldr	r6, [pc, #624]	@ (8005770 <SNVMA_Restore+0x280>)
 8005500:	7833      	ldrb	r3, [r6, #0]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d05d      	beq.n	80055c2 <SNVMA_Restore+0xd2>
  else if (BufferId >= SNVMA_BufferId_Max)
 8005506:	2800      	cmp	r0, #0
 8005508:	d139      	bne.n	800557e <SNVMA_Restore+0x8e>
  else if (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr == NULL)
 800550a:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 8005784 <SNVMA_Restore+0x294>
 800550e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d058      	beq.n	80055c8 <SNVMA_Restore+0xd8>
  else if (SNVMA_NvmConfiguration[nvmId].p_BankForRestore == NULL)
 8005516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d057      	beq.n	80055ce <SNVMA_Restore+0xde>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800551e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005522:	b672      	cpsid	i
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 8005524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
    SNVMA_CommandPending = TRUE;
 8005528:	2101      	movs	r1, #1
    if (IsHeaderOk (SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr,
 800552a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    SNVMA_CommandPending = TRUE;
 800552e:	7031      	strb	r1, [r6, #0]
    if (IsHeaderOk (SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr,
 8005530:	681c      	ldr	r4, [r3, #0]
  if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->Empty == (uint8_t)SNVMA_ERASED_CONTENT) &&
 8005532:	8823      	ldrh	r3, [r4, #0]
 8005534:	4293      	cmp	r3, r2
 8005536:	d025      	beq.n	8005584 <SNVMA_Restore+0x94>
 8005538:	f8b4 100b 	ldrh.w	r1, [r4, #11]
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 +
 800553c:	8922      	ldrh	r2, [r4, #8]
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 800553e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
 8005542:	4413      	add	r3, r2
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4) >
 8005544:	89e2      	ldrh	r2, [r4, #14]
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 +
 8005546:	440b      	add	r3, r1
            ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 +
 8005548:	4413      	add	r3, r2
           ((SNVMA_NvmConfiguration[NvmId].BankSize * FLASH_PAGE_SIZE) / sizeof (uint32_t)))
 800554a:	f898 2001 	ldrb.w	r2, [r8, #1]
  else if ((((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 +
 800554e:	ebb3 2fc2 	cmp.w	r3, r2, lsl #11
 8005552:	d802      	bhi.n	800555a <SNVMA_Restore+0x6a>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 != (NvmId * SNVMA_MAX_NUMBER_BUFFER))
 8005554:	7925      	ldrb	r5, [r4, #4]
 8005556:	2d00      	cmp	r5, #0
 8005558:	d03c      	beq.n	80055d4 <SNVMA_Restore+0xe4>
        paddingOffset = sizeof (SNVMA_BankHeader_t);
 800555a:	230b      	movs	r3, #11
      error = SNVMA_ERROR_NVM_BANK_CORRUPTED;
 800555c:	461d      	mov	r5, r3
    SNVMA_CommandPending = FALSE;
 800555e:	2200      	movs	r2, #0
 8005560:	7032      	strb	r2, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	f387 8810 	msr	PRIMASK, r7
}
 8005566:	e001      	b.n	800556c <SNVMA_Restore+0x7c>
 8005568:	2302      	movs	r3, #2
    error = SNVMA_ERROR_NOT_INIT;
 800556a:	461d      	mov	r5, r3
  LOG_ERROR_SYSTEM("\r\nSNVMA_Restore returned %d", (uint8_t)error);
 800556c:	2101      	movs	r1, #1
 800556e:	4a81      	ldr	r2, [pc, #516]	@ (8005774 <SNVMA_Restore+0x284>)
 8005570:	4608      	mov	r0, r1
 8005572:	f7fd fa4d 	bl	8002a10 <Log_Module_Print>
}
 8005576:	4628      	mov	r0, r5
 8005578:	b002      	add	sp, #8
 800557a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557e:	230f      	movs	r3, #15
    error = SNVMA_ERROR_BUFFERID_NOT_KNOWN;
 8005580:	461d      	mov	r5, r3
 8005582:	e7f3      	b.n	800556c <SNVMA_Restore+0x7c>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->Counter == (uint8_t)SNVMA_ERASED_CONTENT) &&
 8005584:	8862      	ldrh	r2, [r4, #2]
 8005586:	429a      	cmp	r2, r3
 8005588:	d1d6      	bne.n	8005538 <SNVMA_Restore+0x48>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId1 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 800558a:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005594:	4293      	cmp	r3, r2
 8005596:	d1cf      	bne.n	8005538 <SNVMA_Restore+0x48>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 == SNVMA_ERASED_CONTENT) &&
 8005598:	79e2      	ldrb	r2, [r4, #7]
 800559a:	2aff      	cmp	r2, #255	@ 0xff
 800559c:	d1cc      	bne.n	8005538 <SNVMA_Restore+0x48>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 == SNVMA_ERASED_CONTENT) &&
 800559e:	68a2      	ldr	r2, [r4, #8]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 == SNVMA_ERASED_CONTENT) &&
 80055a0:	f8b4 100b 	ldrh.w	r1, [r4, #11]
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 == SNVMA_ERASED_CONTENT) &&
 80055a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1c7      	bne.n	800553c <SNVMA_Restore+0x4c>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 80055ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d1c3      	bne.n	800553c <SNVMA_Restore+0x4c>
      (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 == (uint8_t)SNVMA_ERASED_CONTENT) &&
 80055b4:	68e3      	ldr	r3, [r4, #12]
 80055b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055ba:	f513 7f80 	cmn.w	r3, #256	@ 0x100
 80055be:	d1bd      	bne.n	800553c <SNVMA_Restore+0x4c>
 80055c0:	e7cb      	b.n	800555a <SNVMA_Restore+0x6a>
 80055c2:	2304      	movs	r3, #4
    error = SNVMA_ERROR_CMD_PENDING;
 80055c4:	461d      	mov	r5, r3
 80055c6:	e7d1      	b.n	800556c <SNVMA_Restore+0x7c>
 80055c8:	2310      	movs	r3, #16
    error = SNVMA_ERROR_BUFFERID_NOT_REGISTERED;
 80055ca:	461d      	mov	r5, r3
 80055cc:	e7ce      	b.n	800556c <SNVMA_Restore+0x7c>
 80055ce:	230a      	movs	r3, #10
    error = SNVMA_ERROR_NVM_BANK_EMPTY;
 80055d0:	461d      	mov	r5, r3
 80055d2:	e7cb      	b.n	800556c <SNVMA_Restore+0x7c>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId2 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1))
 80055d4:	79e1      	ldrb	r1, [r4, #7]
 80055d6:	2901      	cmp	r1, #1
 80055d8:	d1bf      	bne.n	800555a <SNVMA_Restore+0x6a>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId3 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2))
 80055da:	7aa3      	ldrb	r3, [r4, #10]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d1bc      	bne.n	800555a <SNVMA_Restore+0x6a>
  else if (((SNVMA_BankHeader_t *)p_BankStartAddress)->BufferId4 != ((NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3))
 80055e0:	7b63      	ldrb	r3, [r4, #13]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d1b9      	bne.n	800555a <SNVMA_Restore+0x6a>
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 80055e6:	4628      	mov	r0, r5
 80055e8:	4a63      	ldr	r2, [pc, #396]	@ (8005778 <SNVMA_Restore+0x288>)
  uint32_t crcComputedValue = 0x00;
 80055ea:	9501      	str	r5, [sp, #4]
  uint32_t * payloadAddr = (uint32_t *)((uint32_t)(p_BankStartAddress) + sizeof (SNVMA_BankHeader_t));
 80055ec:	f104 0a10 	add.w	sl, r4, #16
  LOG_INFO_SYSTEM("\r\nStart of CRC computation");
 80055f0:	f7fd fa0e 	bl	8002a10 <Log_Module_Print>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1)
 80055f4:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 80055f8:	b992      	cbnz	r2, 8005620 <SNVMA_Restore+0x130>
 80055fa:	4691      	mov	r9, r2
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2)
 80055fc:	8922      	ldrh	r2, [r4, #8]
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d139      	bne.n	8005676 <SNVMA_Restore+0x186>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3)
 8005602:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 8005606:	bb32      	cbnz	r2, 8005656 <SNVMA_Restore+0x166>
        if (0x00 != ((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId4)
 8005608:	89e2      	ldrh	r2, [r4, #14]
 800560a:	b9ba      	cbnz	r2, 800563c <SNVMA_Restore+0x14c>
  if (crcComputedValue == ((SNVMA_BankHeader_t *)p_BankStartAddress)->Crc)
 800560c:	8862      	ldrh	r2, [r4, #2]
 800560e:	9b01      	ldr	r3, [sp, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d03e      	beq.n	8005692 <SNVMA_Restore+0x1a2>
  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 8005614:	2101      	movs	r1, #1
 8005616:	2000      	movs	r0, #0
 8005618:	4a58      	ldr	r2, [pc, #352]	@ (800577c <SNVMA_Restore+0x28c>)
 800561a:	f7fd f9f9 	bl	8002a10 <Log_Module_Print>
  return error;
 800561e:	e79c      	b.n	800555a <SNVMA_Restore+0x6a>
          eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8005620:	4651      	mov	r1, sl
 8005622:	4857      	ldr	r0, [pc, #348]	@ (8005780 <SNVMA_Restore+0x290>)
 8005624:	ab01      	add	r3, sp, #4
 8005626:	f001 f9ed 	bl	8006a04 <CRCCTRL_Calculate>
          if (CRCCTRL_OK == eReturn)
 800562a:	2800      	cmp	r0, #0
 800562c:	d15b      	bne.n	80056e6 <SNVMA_Restore+0x1f6>
            offSet = SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId1 * sizeof (uint32_t));
 800562e:	f8b4 2005 	ldrh.w	r2, [r4, #5]
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	320f      	adds	r2, #15
 8005636:	f022 090f 	bic.w	r9, r2, #15
    switch (cnt)
 800563a:	e7df      	b.n	80055fc <SNVMA_Restore+0x10c>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800563c:	4850      	ldr	r0, [pc, #320]	@ (8005780 <SNVMA_Restore+0x290>)
 800563e:	ab01      	add	r3, sp, #4
 8005640:	eb0a 0109 	add.w	r1, sl, r9
 8005644:	f001 fa54 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8005648:	2800      	cmp	r0, #0
 800564a:	d0df      	beq.n	800560c <SNVMA_Restore+0x11c>
          else if (CRCCTRL_BUSY == eReturn)
 800564c:	2802      	cmp	r0, #2
 800564e:	d0db      	beq.n	8005608 <SNVMA_Restore+0x118>
            Error_Handler();
 8005650:	f7fb fa64 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8005654:	e7d8      	b.n	8005608 <SNVMA_Restore+0x118>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8005656:	484a      	ldr	r0, [pc, #296]	@ (8005780 <SNVMA_Restore+0x290>)
 8005658:	ab01      	add	r3, sp, #4
 800565a:	eb0a 0109 	add.w	r1, sl, r9
 800565e:	f001 fa47 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8005662:	2800      	cmp	r0, #0
 8005664:	d149      	bne.n	80056fa <SNVMA_Restore+0x20a>
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId3 * sizeof (uint32_t));
 8005666:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	330f      	adds	r3, #15
 800566e:	f023 030f 	bic.w	r3, r3, #15
 8005672:	4499      	add	r9, r3
    switch (cnt)
 8005674:	e7c8      	b.n	8005608 <SNVMA_Restore+0x118>
          eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8005676:	4842      	ldr	r0, [pc, #264]	@ (8005780 <SNVMA_Restore+0x290>)
 8005678:	ab01      	add	r3, sp, #4
 800567a:	eb0a 0109 	add.w	r1, sl, r9
 800567e:	f001 fa37 	bl	8006af0 <CRCCTRL_Accumulate>
          if (CRCCTRL_OK == eReturn)
 8005682:	bba8      	cbnz	r0, 80056f0 <SNVMA_Restore+0x200>
            offSet += SNVMA_ALIGN_128(((SNVMA_BankHeader_t *)p_BankStartAddress)->SizeId2 * sizeof (uint32_t));
 8005684:	8923      	ldrh	r3, [r4, #8]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	330f      	adds	r3, #15
 800568a:	f023 030f 	bic.w	r3, r3, #15
 800568e:	4499      	add	r9, r3
    switch (cnt)
 8005690:	e7b7      	b.n	8005602 <SNVMA_Restore+0x112>
  LOG_INFO_SYSTEM("\r\nEnd of CRC computation, value : %d", crcComputedValue);
 8005692:	4613      	mov	r3, r2
 8005694:	2101      	movs	r1, #1
 8005696:	4a39      	ldr	r2, [pc, #228]	@ (800577c <SNVMA_Restore+0x28c>)
 8005698:	2000      	movs	r0, #0
 800569a:	f7fd f9b9 	bl	8002a10 <Log_Module_Print>
      p_bankHeader = (SNVMA_BankHeader_t *)SNVMA_NvmConfiguration[nvmId].p_BankForRestore->p_StartAddr;
 800569e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
      if ((BufferId == p_bankHeader->BufferId1) &&
 80056a4:	791a      	ldrb	r2, [r3, #4]
 80056a6:	b92a      	cbnz	r2, 80056b4 <SNVMA_Restore+0x1c4>
          (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId1))
 80056a8:	f8b3 2005 	ldrh.w	r2, [r3, #5]
      if ((BufferId == p_bankHeader->BufferId1) &&
 80056ac:	f8d8 1024 	ldr.w	r1, [r8, #36]	@ 0x24
 80056b0:	4291      	cmp	r1, r2
 80056b2:	d027      	beq.n	8005704 <SNVMA_Restore+0x214>
      else if ((BufferId == p_bankHeader->BufferId2) &&
 80056b4:	79da      	ldrb	r2, [r3, #7]
 80056b6:	b922      	cbnz	r2, 80056c2 <SNVMA_Restore+0x1d2>
               (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId2))
 80056b8:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80056bc:	8919      	ldrh	r1, [r3, #8]
      else if ((BufferId == p_bankHeader->BufferId2) &&
 80056be:	428a      	cmp	r2, r1
 80056c0:	d029      	beq.n	8005716 <SNVMA_Restore+0x226>
      else if ((BufferId == p_bankHeader->BufferId3) &&
 80056c2:	7a9a      	ldrb	r2, [r3, #10]
 80056c4:	b92a      	cbnz	r2, 80056d2 <SNVMA_Restore+0x1e2>
               (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId3))
 80056c6:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80056ca:	f8b3 100b 	ldrh.w	r1, [r3, #11]
      else if ((BufferId == p_bankHeader->BufferId3) &&
 80056ce:	428a      	cmp	r2, r1
 80056d0:	d029      	beq.n	8005726 <SNVMA_Restore+0x236>
      else if ((BufferId == p_bankHeader->BufferId4) &&
 80056d2:	7b5a      	ldrb	r2, [r3, #13]
 80056d4:	b922      	cbnz	r2, 80056e0 <SNVMA_Restore+0x1f0>
               (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].Size == p_bankHeader->SizeId4))
 80056d6:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80056da:	89d9      	ldrh	r1, [r3, #14]
      else if ((BufferId == p_bankHeader->BufferId4) &&
 80056dc:	428a      	cmp	r2, r1
 80056de:	d030      	beq.n	8005742 <SNVMA_Restore+0x252>
 80056e0:	2514      	movs	r5, #20
        error = SNVMA_ERROR_BUFFER_CONFIG_MISSMATCH;
 80056e2:	462b      	mov	r3, r5
 80056e4:	e73b      	b.n	800555e <SNVMA_Restore+0x6e>
          else if (CRCCTRL_BUSY == eReturn)
 80056e6:	2802      	cmp	r0, #2
 80056e8:	d084      	beq.n	80055f4 <SNVMA_Restore+0x104>
            Error_Handler();
 80056ea:	f7fb fa17 	bl	8000b1c <Error_Handler>
    switch (cnt)
 80056ee:	e781      	b.n	80055f4 <SNVMA_Restore+0x104>
          else if (CRCCTRL_BUSY == eReturn)
 80056f0:	2802      	cmp	r0, #2
 80056f2:	d083      	beq.n	80055fc <SNVMA_Restore+0x10c>
            Error_Handler();
 80056f4:	f7fb fa12 	bl	8000b1c <Error_Handler>
    switch (cnt)
 80056f8:	e780      	b.n	80055fc <SNVMA_Restore+0x10c>
          else if (CRCCTRL_BUSY == eReturn)
 80056fa:	2802      	cmp	r0, #2
 80056fc:	d081      	beq.n	8005602 <SNVMA_Restore+0x112>
            Error_Handler();
 80056fe:	f7fb fa0d 	bl	8000b1c <Error_Handler>
    switch (cnt)
 8005702:	e77e      	b.n	8005602 <SNVMA_Restore+0x112>
        paddingOffset = sizeof (SNVMA_BankHeader_t);
 8005704:	2110      	movs	r1, #16
        memcpy ((void *)SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr,
 8005706:	4419      	add	r1, r3
 8005708:	f8d8 0020 	ldr.w	r0, [r8, #32]
 800570c:	0092      	lsls	r2, r2, #2
 800570e:	f026 f92a 	bl	802b966 <memcpy>
 8005712:	2300      	movs	r3, #0
 8005714:	e723      	b.n	800555e <SNVMA_Restore+0x6e>
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t)));
 8005716:	f8b3 1005 	ldrh.w	r1, [r3, #5]
 800571a:	0089      	lsls	r1, r1, #2
 800571c:	310f      	adds	r1, #15
 800571e:	f021 010f 	bic.w	r1, r1, #15
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 8005722:	3110      	adds	r1, #16
      if (error == SNVMA_ERROR_NOK)
 8005724:	e7ef      	b.n	8005706 <SNVMA_Restore+0x216>
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 8005726:	f8b3 1005 	ldrh.w	r1, [r3, #5]
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t)));
 800572a:	8918      	ldrh	r0, [r3, #8]
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800572c:	0089      	lsls	r1, r1, #2
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t)));
 800572e:	0080      	lsls	r0, r0, #2
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 8005730:	310f      	adds	r1, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t)));
 8005732:	300f      	adds	r0, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 8005734:	f021 010f 	bic.w	r1, r1, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t)));
 8005738:	f020 000f 	bic.w	r0, r0, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800573c:	4401      	add	r1, r0
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 800573e:	3110      	adds	r1, #16
      if (error == SNVMA_ERROR_NOK)
 8005740:	e7e1      	b.n	8005706 <SNVMA_Restore+0x216>
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 8005742:	f8b3 1005 	ldrh.w	r1, [r3, #5]
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t))) +
 8005746:	8918      	ldrh	r0, [r3, #8]
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 8005748:	0089      	lsls	r1, r1, #2
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t))) +
 800574a:	0080      	lsls	r0, r0, #2
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 800574c:	310f      	adds	r1, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId2 * sizeof (uint32_t))) +
 800574e:	300f      	adds	r0, #15
 8005750:	f020 000f 	bic.w	r0, r0, #15
                        SNVMA_ALIGN_128((p_bankHeader->SizeId1 * sizeof (uint32_t))) +
 8005754:	f021 010f 	bic.w	r1, r1, #15
 8005758:	4401      	add	r1, r0
                        SNVMA_ALIGN_128((p_bankHeader->SizeId3 * sizeof (uint32_t)));
 800575a:	f8b3 000b 	ldrh.w	r0, [r3, #11]
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 800575e:	3110      	adds	r1, #16
                        SNVMA_ALIGN_128((p_bankHeader->SizeId3 * sizeof (uint32_t)));
 8005760:	0080      	lsls	r0, r0, #2
 8005762:	300f      	adds	r0, #15
 8005764:	f020 000f 	bic.w	r0, r0, #15
        paddingOffset = sizeof (SNVMA_BankHeader_t) +
 8005768:	4401      	add	r1, r0
      if (error == SNVMA_ERROR_NOK)
 800576a:	e7cc      	b.n	8005706 <SNVMA_Restore+0x216>
 800576c:	20005925 	.word	0x20005925
 8005770:	20005924 	.word	0x20005924
 8005774:	0802dfa0 	.word	0x0802dfa0
 8005778:	0802dca0 	.word	0x0802dca0
 800577c:	0802dcbc 	.word	0x0802dcbc
 8005780:	20000098 	.word	0x20000098
 8005784:	200000c0 	.word	0x200000c0

08005788 <SNVMA_Write>:
  if (SNVMA_ModuleInit == FALSE)
 8005788:	4b63      	ldr	r3, [pc, #396]	@ (8005918 <SNVMA_Write+0x190>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	b36b      	cbz	r3, 80057ea <SNVMA_Write+0x62>
{
 800578e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005792:	4606      	mov	r6, r0
 8005794:	b083      	sub	sp, #12
  else if (BufferId >= SNVMA_BufferId_Max)
 8005796:	bb20      	cbnz	r0, 80057e2 <SNVMA_Write+0x5a>
  else if (SNVMA_NvmConfiguration[nvmId].a_Buffers[idxBuf].p_Addr == NULL)
 8005798:	4c60      	ldr	r4, [pc, #384]	@ (800591c <SNVMA_Write+0x194>)
 800579a:	6a23      	ldr	r3, [r4, #32]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d060      	beq.n	8005862 <SNVMA_Write+0xda>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057a0:	460d      	mov	r5, r1
 80057a2:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80057a6:	b672      	cpsid	i
    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Impacted NVM : %d", SNVMA_IdBitmask);
 80057a8:	2101      	movs	r1, #1
    SNVMA_IdBitmask |= (1u << nvmId);
 80057aa:	4f5d      	ldr	r7, [pc, #372]	@ (8005920 <SNVMA_Write+0x198>)
    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Impacted NVM : %d", SNVMA_IdBitmask);
 80057ac:	4a5d      	ldr	r2, [pc, #372]	@ (8005924 <SNVMA_Write+0x19c>)
    SNVMA_IdBitmask |= (1u << nvmId);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	430b      	orrs	r3, r1
 80057b2:	603b      	str	r3, [r7, #0]
    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Impacted NVM : %d", SNVMA_IdBitmask);
 80057b4:	f7fd f92c 	bl	8002a10 <Log_Module_Print>
    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Pending buffer : %d", (uint8_t)(1u << idxBuf));
 80057b8:	2301      	movs	r3, #1
    SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp |= (1u << idxBuf);
 80057ba:	78a2      	ldrb	r2, [r4, #2]
    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Pending buffer : %d", (uint8_t)(1u << idxBuf));
 80057bc:	4630      	mov	r0, r6
    SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp |= (1u << idxBuf);
 80057be:	431a      	orrs	r2, r3
 80057c0:	70a2      	strb	r2, [r4, #2]
    LOG_INFO_SYSTEM("\r\nSNVMA_Write - Pending buffer : %d", (uint8_t)(1u << idxBuf));
 80057c2:	4619      	mov	r1, r3
 80057c4:	4a58      	ldr	r2, [pc, #352]	@ (8005928 <SNVMA_Write+0x1a0>)
 80057c6:	f7fd f923 	bl	8002a10 <Log_Module_Print>
    SNVMA_NvmConfiguration[nvmId].a_Callback[idxBuf] = Callback;
 80057ca:	6125      	str	r5, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	f388 8810 	msr	PRIMASK, r8
    if (SNVMA_CommandPending == FALSE)
 80057d0:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 8005940 <SNVMA_Write+0x1b8>
 80057d4:	f899 5000 	ldrb.w	r5, [r9]
 80057d8:	b14d      	cbz	r5, 80057ee <SNVMA_Write+0x66>
        error = SNVMA_ERROR_OK;
 80057da:	2000      	movs	r0, #0
}
 80057dc:	b003      	add	sp, #12
 80057de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = SNVMA_ERROR_BUFFERID_NOT_KNOWN;
 80057e2:	200f      	movs	r0, #15
}
 80057e4:	b003      	add	sp, #12
 80057e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = SNVMA_ERROR_NOT_INIT;
 80057ea:	2002      	movs	r0, #2
}
 80057ec:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057ee:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80057f2:	b672      	cpsid	i
      SNVMA_CommandPending = TRUE;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f889 3000 	strb.w	r3, [r9]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fa:	f382 8810 	msr	PRIMASK, r2
  memset ((void *)&SNVMA_WriteBankHeader,
 80057fe:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8005930 <SNVMA_Write+0x1a8>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8005802:	6a21      	ldr	r1, [r4, #32]
  memset ((void *)&SNVMA_WriteBankHeader,
 8005804:	e9c8 5500 	strd	r5, r5, [r8]
 8005808:	e9c8 5502 	strd	r5, r5, [r8, #8]
  uint32_t crcValue = 0x00;
 800580c:	9501      	str	r5, [sp, #4]
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 800580e:	2900      	cmp	r1, #0
 8005810:	d07f      	beq.n	8005912 <SNVMA_Write+0x18a>
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8005812:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005814:	4845      	ldr	r0, [pc, #276]	@ (800592c <SNVMA_Write+0x1a4>)
 8005816:	ab01      	add	r3, sp, #4
 8005818:	f001 f8f4 	bl	8006a04 <CRCCTRL_Calculate>
        if (CRCCTRL_OK == eReturn)
 800581c:	b1e0      	cbz	r0, 8005858 <SNVMA_Write+0xd0>
        else if (CRCCTRL_BUSY == eReturn)
 800581e:	2802      	cmp	r0, #2
 8005820:	d01d      	beq.n	800585e <SNVMA_Write+0xd6>
          Error_Handler();
 8005822:	f7fb f97b 	bl	8000b1c <Error_Handler>
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 8005826:	1d2e      	adds	r6, r5, #4
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8005828:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 800582c:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8005830:	b191      	cbz	r1, 8005858 <SNVMA_Write+0xd0>
      if (crcValue == 0x00)
 8005832:	9801      	ldr	r0, [sp, #4]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8005834:	6852      	ldr	r2, [r2, #4]
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 8005836:	ab01      	add	r3, sp, #4
      if (crcValue == 0x00)
 8005838:	2800      	cmp	r0, #0
 800583a:	d0eb      	beq.n	8005814 <SNVMA_Write+0x8c>
        eReturn = CRCCTRL_Accumulate (&SNVMA_Handle,
 800583c:	483b      	ldr	r0, [pc, #236]	@ (800592c <SNVMA_Write+0x1a4>)
 800583e:	f001 f957 	bl	8006af0 <CRCCTRL_Accumulate>
        if (CRCCTRL_OK == eReturn)
 8005842:	b148      	cbz	r0, 8005858 <SNVMA_Write+0xd0>
        else if (CRCCTRL_BUSY == eReturn)
 8005844:	2802      	cmp	r0, #2
 8005846:	d0ef      	beq.n	8005828 <SNVMA_Write+0xa0>
          Error_Handler();
 8005848:	f7fb f968 	bl	8000b1c <Error_Handler>
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 800584c:	f854 1036 	ldr.w	r1, [r4, r6, lsl #3]
        eReturn = CRCCTRL_Calculate (&SNVMA_Handle,
 8005850:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    if (SNVMA_NvmConfiguration[NvmId].a_Buffers[cnt].p_Addr != NULL)
 8005854:	2900      	cmp	r1, #0
 8005856:	d1ec      	bne.n	8005832 <SNVMA_Write+0xaa>
      cnt++;
 8005858:	3501      	adds	r5, #1
  while (cnt < SNVMA_MAX_NUMBER_BUFFER)
 800585a:	2d04      	cmp	r5, #4
 800585c:	d005      	beq.n	800586a <SNVMA_Write+0xe2>
 800585e:	1d2e      	adds	r6, r5, #4
 8005860:	e7e2      	b.n	8005828 <SNVMA_Write+0xa0>
    error = SNVMA_ERROR_BUFFERID_NOT_REGISTERED;
 8005862:	2010      	movs	r0, #16
}
 8005864:	b003      	add	sp, #12
 8005866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800586a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800586e:	b672      	cpsid	i
  if (SNVMA_NvmConfiguration[NvmId].p_BankForRestore != NULL)
 8005870:	68e3      	ldr	r3, [r4, #12]
 8005872:	b123      	cbz	r3, 800587e <SNVMA_Write+0xf6>
                                      (SNVMA_NvmConfiguration[NvmId].p_BankForRestore->p_StartAddr))->Counter) + 1;
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	785b      	ldrb	r3, [r3, #1]
 8005878:	3301      	adds	r3, #1
    SNVMA_WriteBankHeader.Counter = (((SNVMA_BankHeader_t *)
 800587a:	f888 3001 	strb.w	r3, [r8, #1]
  SNVMA_WriteBankHeader.BufferId3 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 2u;
 800587e:	2302      	movs	r3, #2
 8005880:	f888 300a 	strb.w	r3, [r8, #10]
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 8005884:	2303      	movs	r3, #3
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8005886:	2500      	movs	r5, #0
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
 8005888:	2601      	movs	r6, #1
  SNVMA_WriteBankHeader.BufferId4 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 3u;
 800588a:	f888 300d 	strb.w	r3, [r8, #13]
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);
 800588e:	9b01      	ldr	r3, [sp, #4]
  SNVMA_WriteBankHeader.BufferId1 = (NvmId * SNVMA_MAX_NUMBER_BUFFER);
 8005890:	f888 5004 	strb.w	r5, [r8, #4]
  SNVMA_WriteBankHeader.Crc = (uint16_t)(crcValue & 0x0000FFFF);
 8005894:	f8a8 3002 	strh.w	r3, [r8, #2]
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 8005898:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  SNVMA_WriteBankHeader.BufferId2 = (NvmId * SNVMA_MAX_NUMBER_BUFFER) + 1u;
 800589a:	f888 6007 	strb.w	r6, [r8, #7]
  SNVMA_WriteBankHeader.SizeId1 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x00].Size;
 800589e:	f8a8 3005 	strh.w	r3, [r8, #5]
  SNVMA_WriteBankHeader.SizeId2 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x01].Size;
 80058a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80058a4:	f8a8 3008 	strh.w	r3, [r8, #8]
  SNVMA_WriteBankHeader.SizeId3 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x02].Size;
 80058a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058aa:	f8a8 300b 	strh.w	r3, [r8, #11]
  SNVMA_WriteBankHeader.SizeId4 = SNVMA_NvmConfiguration[NvmId].a_Buffers[0x03].Size;
 80058ae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80058b0:	f8a8 300e 	strh.w	r3, [r8, #14]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b4:	f382 8810 	msr	PRIMASK, r2
  error = FM_Write ((uint32_t *)&SNVMA_WriteBankHeader,
 80058b8:	68a3      	ldr	r3, [r4, #8]
 80058ba:	2204      	movs	r2, #4
 80058bc:	6819      	ldr	r1, [r3, #0]
 80058be:	481c      	ldr	r0, [pc, #112]	@ (8005930 <SNVMA_Write+0x1a8>)
 80058c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005934 <SNVMA_Write+0x1ac>)
 80058c2:	f7fe f877 	bl	80039b4 <FM_Write>
      if (StartFlashWrite (nvmId) == FM_ERROR)
 80058c6:	2802      	cmp	r0, #2
 80058c8:	d011      	beq.n	80058ee <SNVMA_Write+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058ca:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80058ce:	b672      	cpsid	i
        SNVMA_FlashInfo.NvmId = nvmId;
 80058d0:	4b19      	ldr	r3, [pc, #100]	@ (8005938 <SNVMA_Write+0x1b0>)
 80058d2:	801d      	strh	r5, [r3, #0]
        SNVMA_FlashInfo.FlashOpState = SNVMA_HEADER_WRITE;
 80058d4:	709d      	strb	r5, [r3, #2]
          (SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp << SNVMA_MAX_NUMBER_BUFFER) & 0xF0u;
 80058d6:	78a3      	ldrb	r3, [r4, #2]
 80058d8:	011b      	lsls	r3, r3, #4
        SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp =
 80058da:	70a3      	strb	r3, [r4, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058dc:	f382 8810 	msr	PRIMASK, r2
        LOG_INFO_SYSTEM("\r\nSNVMA_Write - Flash operation started (Header write request) : %d", (uint8_t)SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp);
 80058e0:	4a16      	ldr	r2, [pc, #88]	@ (800593c <SNVMA_Write+0x1b4>)
 80058e2:	4631      	mov	r1, r6
 80058e4:	4628      	mov	r0, r5
 80058e6:	78a3      	ldrb	r3, [r4, #2]
 80058e8:	f7fd f892 	bl	8002a10 <Log_Module_Print>
        error = SNVMA_ERROR_OK;
 80058ec:	e775      	b.n	80057da <SNVMA_Write+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058ee:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80058f2:	b672      	cpsid	i
        SNVMA_IdBitmask &= ~(1u << nvmId);
 80058f4:	683b      	ldr	r3, [r7, #0]
          SNVMA_NvmConfiguration[nvmId].a_Callback[cnt] = NULL;
 80058f6:	e9c4 5504 	strd	r5, r5, [r4, #16]
        SNVMA_IdBitmask &= ~(1u << nvmId);
 80058fa:	f023 0301 	bic.w	r3, r3, #1
          SNVMA_NvmConfiguration[nvmId].a_Callback[cnt] = NULL;
 80058fe:	e9c4 5506 	strd	r5, r5, [r4, #24]
        SNVMA_CommandPending = FALSE;
 8005902:	f889 5000 	strb.w	r5, [r9]
        SNVMA_NvmConfiguration[nvmId].PendingBufferWriteOp = 0u;
 8005906:	70a5      	strb	r5, [r4, #2]
        SNVMA_IdBitmask &= ~(1u << nvmId);
 8005908:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800590a:	f382 8810 	msr	PRIMASK, r2
        error = SNVMA_ERROR_FLASH_ERROR;
 800590e:	2015      	movs	r0, #21
 8005910:	e768      	b.n	80057e4 <SNVMA_Write+0x5c>
      cnt++;
 8005912:	461d      	mov	r5, r3
 8005914:	2605      	movs	r6, #5
 8005916:	e787      	b.n	8005828 <SNVMA_Write+0xa0>
 8005918:	20005925 	.word	0x20005925
 800591c:	200000c0 	.word	0x200000c0
 8005920:	20005920 	.word	0x20005920
 8005924:	0802dfbc 	.word	0x0802dfbc
 8005928:	0802dfe0 	.word	0x0802dfe0
 800592c:	20000098 	.word	0x20000098
 8005930:	20005910 	.word	0x20005910
 8005934:	200058fc 	.word	0x200058fc
 8005938:	200058f8 	.word	0x200058f8
 800593c:	0802e004 	.word	0x0802e004
 8005940:	20005924 	.word	0x20005924
 8005944:	00000000 	.word	0x00000000

08005948 <AMM_Init>:
static inline AMM_VirtualMemoryCallbackFunction_t * popActive (void);

/* Functions Definition ------------------------------------------------------*/

AMM_Function_Error_t AMM_Init (const AMM_InitParameters_t * const p_InitParams)
{
 8005948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AMM_Function_Error_t error = AMM_ERROR_NOK;

  uint32_t neededPoolSize = 0x00;

  /* Check if not already initialized */
  if (AmmInitialized == INITIALIZED)
 800594c:	4d58      	ldr	r5, [pc, #352]	@ (8005ab0 <AMM_Init+0x168>)
 800594e:	782b      	ldrb	r3, [r5, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	f000 8097 	beq.w	8005a84 <AMM_Init+0x13c>
  {
    error = AMM_ERROR_ALREADY_INIT;
  }
  /* Check parameter null pointer */
  else if (p_InitParams == NULL)
 8005956:	4604      	mov	r4, r0
 8005958:	2800      	cmp	r0, #0
 800595a:	f000 8099 	beq.w	8005a90 <AMM_Init+0x148>
  {
    error = AMM_ERROR_BAD_POINTER;
  }
  /* Check Pool address null pointer */
  else if (p_InitParams->p_PoolAddr == NULL)
 800595e:	6803      	ldr	r3, [r0, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 808c 	beq.w	8005a7e <AMM_Init+0x136>
  {
    error = AMM_ERROR_BAD_POOL_CONFIG;
  }
  /* Check if Pool address is 32bits aligned */
  else if ((MASK_ALIGNED_32BITS & (uint32_t)p_InitParams->p_PoolAddr) != 0)
 8005966:	f013 0303 	ands.w	r3, r3, #3
 800596a:	f040 8088 	bne.w	8005a7e <AMM_Init+0x136>
  {
    error = AMM_ERROR_BAD_POOL_CONFIG;
  }
  /* Check Pool size shall be non zero */
  else if (p_InitParams->PoolSize == 0)
 800596e:	6846      	ldr	r6, [r0, #4]
 8005970:	2e00      	cmp	r6, #0
 8005972:	f000 8084 	beq.w	8005a7e <AMM_Init+0x136>
  {
    error = AMM_ERROR_BAD_POOL_CONFIG;
  }
  /* Check that Virtual memories can not be declared without a proper configuration list */
  else if ((p_InitParams->VirtualMemoryNumber != 0x00) &&
 8005976:	6887      	ldr	r7, [r0, #8]
 8005978:	b1b7      	cbz	r7, 80059a8 <AMM_Init+0x60>
           (p_InitParams->p_VirtualMemoryConfigList == NULL))
 800597a:	68c0      	ldr	r0, [r0, #12]
  else if ((p_InitParams->VirtualMemoryNumber != 0x00) &&
 800597c:	2800      	cmp	r0, #0
 800597e:	f000 8084 	beq.w	8005a8a <AMM_Init+0x142>
  {
      error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
  }
  else
  {
    neededPoolSize = p_InitParams->VirtualMemoryNumber * AMM_VIRTUAL_INFO_ELEMENT_SIZE;
 8005982:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    for (uint32_t memIdx = 0x00;
         (memIdx < p_InitParams->VirtualMemoryNumber) && (error == AMM_ERROR_NOK);
         memIdx++)
    {
      /* Add the amount of needed space for this virtual memory */
      neededPoolSize = neededPoolSize + p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
 8005986:	f100 0c04 	add.w	ip, r0, #4

      /* Check the virtual memory ID. Shall not be zero */
      if (p_InitParams->p_VirtualMemoryConfigList[memIdx].Id == 0)
 800598a:	f810 2033 	ldrb.w	r2, [r0, r3, lsl #3]
 800598e:	2a00      	cmp	r2, #0
 8005990:	d07b      	beq.n	8005a8a <AMM_Init+0x142>
      neededPoolSize = neededPoolSize + p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
 8005992:	f85c 2033 	ldr.w	r2, [ip, r3, lsl #3]
 8005996:	4411      	add	r1, r2
      {
        error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
      }
      /* Check if size is not zero */
      else if (p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize == 0)
 8005998:	2a00      	cmp	r2, #0
 800599a:	d076      	beq.n	8005a8a <AMM_Init+0x142>
      {
        error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
      }
      /* Check if amount of needed memory has overlapped current pool size */
      else if (p_InitParams->PoolSize < neededPoolSize)
 800599c:	428e      	cmp	r6, r1
         memIdx++)
 800599e:	f103 0301 	add.w	r3, r3, #1
      else if (p_InitParams->PoolSize < neededPoolSize)
 80059a2:	d372      	bcc.n	8005a8a <AMM_Init+0x142>
         (memIdx < p_InitParams->VirtualMemoryNumber) && (error == AMM_ERROR_NOK);
 80059a4:	429f      	cmp	r7, r3
 80059a6:	d1f0      	bne.n	800598a <AMM_Init+0x42>

    /* Check if parameters are still ok */
    if (error == AMM_ERROR_NOK)
    {
      /* Init all private variables: Pool relative */
      p_AmmPoolAddress = NULL;
 80059a8:	2300      	movs	r3, #0
      /* Init all private variables: Virtual Memory relative */
      AmmVirtualMemoryNumber = 0x00;
      p_AmmVirtualMemoryList = NULL;

      /* Init all private variables: BMM relative */
      AmmBmmFunctionsHandler.Init = NULL;
 80059aa:	ed9f 7b3f 	vldr	d7, [pc, #252]	@ 8005aa8 <AMM_Init+0x160>
 80059ae:	4f41      	ldr	r7, [pc, #260]	@ (8005ab4 <AMM_Init+0x16c>)
      p_AmmPoolAddress = NULL;
 80059b0:	4a41      	ldr	r2, [pc, #260]	@ (8005ab8 <AMM_Init+0x170>)
      AmmBmmFunctionsHandler.Allocate = NULL;
      AmmBmmFunctionsHandler.Free = NULL;

      /* Init all private variables: Callbacks relative */
      AmmPendingCallback.next = NULL;
 80059b2:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8005ac4 <AMM_Init+0x17c>
      AmmPendingCallback.prev = NULL;
      AmmActiveCallback.next = NULL;
 80059b6:	4941      	ldr	r1, [pc, #260]	@ (8005abc <AMM_Init+0x174>)
      AmmPoolSize = 0x00;
 80059b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005ac8 <AMM_Init+0x180>
      AmmOccupiedSharedPoolSize = 0x00;
 80059bc:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 8005acc <AMM_Init+0x184>
      AmmRequiredVirtualMemorySize = 0x00;
 80059c0:	4e3f      	ldr	r6, [pc, #252]	@ (8005ac0 <AMM_Init+0x178>)
      AmmVirtualMemoryNumber = 0x00;
 80059c2:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8005ad0 <AMM_Init+0x188>
      p_AmmVirtualMemoryList = NULL;
 80059c6:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8005ad4 <AMM_Init+0x18c>
      AmmActiveCallback.prev = NULL;

      /* First get the Basic Memory Manager functions back */
      AMM_RegisterBasicMemoryManager (&AmmBmmFunctionsHandler);
 80059ca:	4638      	mov	r0, r7
      p_AmmPoolAddress = NULL;
 80059cc:	6013      	str	r3, [r2, #0]
      AmmPoolSize = 0x00;
 80059ce:	f8cb 3000 	str.w	r3, [fp]
      AmmOccupiedSharedPoolSize = 0x00;
 80059d2:	f8c9 3000 	str.w	r3, [r9]
      AmmRequiredVirtualMemorySize = 0x00;
 80059d6:	6033      	str	r3, [r6, #0]
      AmmVirtualMemoryNumber = 0x00;
 80059d8:	f8ca 3000 	str.w	r3, [sl]
      p_AmmVirtualMemoryList = NULL;
 80059dc:	f8c8 3000 	str.w	r3, [r8]
      AmmBmmFunctionsHandler.Free = NULL;
 80059e0:	60bb      	str	r3, [r7, #8]
      AmmPendingCallback.next = NULL;
 80059e2:	ed8c 7b00 	vstr	d7, [ip]
      AmmActiveCallback.next = NULL;
 80059e6:	ed81 7b00 	vstr	d7, [r1]
      AmmBmmFunctionsHandler.Init = NULL;
 80059ea:	ed87 7b00 	vstr	d7, [r7]
      AMM_RegisterBasicMemoryManager (&AmmBmmFunctionsHandler);
 80059ee:	f7fa fedd 	bl	80007ac <AMM_RegisterBasicMemoryManager>

      if ((AmmBmmFunctionsHandler.Init == NULL)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d04d      	beq.n	8005a94 <AMM_Init+0x14c>
       || (AmmBmmFunctionsHandler.Allocate == NULL)
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	2900      	cmp	r1, #0
 80059fc:	d04a      	beq.n	8005a94 <AMM_Init+0x14c>
       || (AmmBmmFunctionsHandler.Free == NULL))
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	2900      	cmp	r1, #0
 8005a02:	d047      	beq.n	8005a94 <AMM_Init+0x14c>
        error = AMM_ERROR_BAD_BMM_REGISTRATION;
      }
      else
      {
        /* Store the pool info */
        p_AmmPoolAddress = p_InitParams->p_PoolAddr;
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab8 <AMM_Init+0x170>)
        AmmPoolSize = p_InitParams->PoolSize;
 8005a08:	6861      	ldr	r1, [r4, #4]
        p_AmmPoolAddress = p_InitParams->p_PoolAddr;
 8005a0a:	6010      	str	r0, [r2, #0]
        AmmPoolSize = p_InitParams->PoolSize;
 8005a0c:	f8cb 1000 	str.w	r1, [fp]

        /* First init the Basic Memory Manager */
        AmmBmmFunctionsHandler.Init (p_AmmPoolAddress,
 8005a10:	4798      	blx	r3
                                     AmmPoolSize);

        /* Allocate memory for the virtual memories info */
        p_AmmVirtualMemoryList = (VirtualMemoryInfo_t *)
                                  (AmmBmmFunctionsHandler. Allocate (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 8005a12:	68a0      	ldr	r0, [r4, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005a1a:	4798      	blx	r3
        p_AmmVirtualMemoryList = (VirtualMemoryInfo_t *)
 8005a1c:	f8c8 0000 	str.w	r0, [r8]
                                                                    * p_InitParams->VirtualMemoryNumber));

        /* Check if allocation is OK*/
        if ((p_AmmVirtualMemoryList == NULL) && (p_InitParams->VirtualMemoryNumber > 0))
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d039      	beq.n	8005a98 <AMM_Init+0x150>
        {
          /* Init Critical section */
          UTIL_SEQ_INIT_CRITICAL_SECTION ();

          /* Init both pending and active list */
          LST_init_head (&AmmPendingCallback);
 8005a24:	4827      	ldr	r0, [pc, #156]	@ (8005ac4 <AMM_Init+0x17c>)
 8005a26:	f001 fcb1 	bl	800738c <LST_init_head>
          LST_init_head (&AmmActiveCallback);
 8005a2a:	4824      	ldr	r0, [pc, #144]	@ (8005abc <AMM_Init+0x174>)
 8005a2c:	f001 fcae 	bl	800738c <LST_init_head>

          /* Keep going on init, fulfill the virtual memories info */
          AmmVirtualMemoryNumber = p_InitParams->VirtualMemoryNumber;
 8005a30:	68a7      	ldr	r7, [r4, #8]

          /* Actualize actual shared pool occupied size */
          AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 8005a32:	f8d9 2000 	ldr.w	r2, [r9]
                                                                   * AmmVirtualMemoryNumber);
 8005a36:	eb07 0347 	add.w	r3, r7, r7, lsl #1
          AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 8005a3a:	4413      	add	r3, r2
          AmmVirtualMemoryNumber = p_InitParams->VirtualMemoryNumber;
 8005a3c:	f8ca 7000 	str.w	r7, [sl]
          AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + (AMM_VIRTUAL_INFO_ELEMENT_SIZE
 8005a40:	f8c9 3000 	str.w	r3, [r9]

          for (uint32_t memIdx = 0x00;
               memIdx < AmmVirtualMemoryNumber;
 8005a44:	b1bf      	cbz	r7, 8005a76 <AMM_Init+0x12e>
               memIdx++)
          {
            p_AmmVirtualMemoryList[memIdx].Id = p_InitParams->p_VirtualMemoryConfigList[memIdx].Id;
            p_AmmVirtualMemoryList[memIdx].RequiredSize = p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = 0x00;
 8005a46:	2100      	movs	r1, #0
 8005a48:	68e2      	ldr	r2, [r4, #12]
 8005a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a4e:	6834      	ldr	r4, [r6, #0]
 8005a50:	eb02 07c7 	add.w	r7, r2, r7, lsl #3
            p_AmmVirtualMemoryList[memIdx].Id = p_InitParams->p_VirtualMemoryConfigList[memIdx].Id;
 8005a54:	7810      	ldrb	r0, [r2, #0]
               memIdx < AmmVirtualMemoryNumber;
 8005a56:	3208      	adds	r2, #8
            p_AmmVirtualMemoryList[memIdx].Id = p_InitParams->p_VirtualMemoryConfigList[memIdx].Id;
 8005a58:	7018      	strb	r0, [r3, #0]
            p_AmmVirtualMemoryList[memIdx].RequiredSize = p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
 8005a5a:	f852 0c04 	ldr.w	r0, [r2, #-4]
               memIdx < AmmVirtualMemoryNumber;
 8005a5e:	42ba      	cmp	r2, r7
            p_AmmVirtualMemoryList[memIdx].RequiredSize = p_InitParams->p_VirtualMemoryConfigList[memIdx].BufferSize;
 8005a60:	f8c3 0001 	str.w	r0, [r3, #1]
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = 0x00;
 8005a64:	7159      	strb	r1, [r3, #5]
 8005a66:	7199      	strb	r1, [r3, #6]
 8005a68:	71d9      	strb	r1, [r3, #7]
 8005a6a:	7219      	strb	r1, [r3, #8]

            AmmRequiredVirtualMemorySize = AmmRequiredVirtualMemorySize + p_AmmVirtualMemoryList[memIdx].RequiredSize;
 8005a6c:	4404      	add	r4, r0
               memIdx < AmmVirtualMemoryNumber;
 8005a6e:	f103 030c 	add.w	r3, r3, #12
 8005a72:	d1ef      	bne.n	8005a54 <AMM_Init+0x10c>
 8005a74:	6034      	str	r4, [r6, #0]
          }

          /* Set init flag */
          AmmInitialized = INITIALIZED;
 8005a76:	2301      	movs	r3, #1

          /* All info are stored and AMM is initialized */
          error = AMM_ERROR_OK;
 8005a78:	2000      	movs	r0, #0
          AmmInitialized = INITIALIZED;
 8005a7a:	702b      	strb	r3, [r5, #0]
          error = AMM_ERROR_OK;
 8005a7c:	e000      	b.n	8005a80 <AMM_Init+0x138>
    error = AMM_ERROR_BAD_POOL_CONFIG;
 8005a7e:	2003      	movs	r0, #3
      }
    }
  }

  return error;
}
 8005a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error = AMM_ERROR_ALREADY_INIT;
 8005a84:	200c      	movs	r0, #12
}
 8005a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      error = AMM_ERROR_BAD_VIRTUAL_CONFIG;
 8005a8a:	2004      	movs	r0, #4
}
 8005a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error = AMM_ERROR_BAD_POINTER;
 8005a90:	2002      	movs	r0, #2
 8005a92:	e7f5      	b.n	8005a80 <AMM_Init+0x138>
        error = AMM_ERROR_BAD_BMM_REGISTRATION;
 8005a94:	2005      	movs	r0, #5
 8005a96:	e7f3      	b.n	8005a80 <AMM_Init+0x138>
        if ((p_AmmVirtualMemoryList == NULL) && (p_InitParams->VirtualMemoryNumber > 0))
 8005a98:	68a3      	ldr	r3, [r4, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0c2      	beq.n	8005a24 <AMM_Init+0xdc>
          error = AMM_ERROR_BAD_BMM_ALLOCATION;
 8005a9e:	2006      	movs	r0, #6
 8005aa0:	e7ee      	b.n	8005a80 <AMM_Init+0x138>
 8005aa2:	bf00      	nop
 8005aa4:	f3af 8000 	nop.w
	...
 8005ab0:	2000595c 	.word	0x2000595c
 8005ab4:	20005938 	.word	0x20005938
 8005ab8:	20005958 	.word	0x20005958
 8005abc:	20005928 	.word	0x20005928
 8005ac0:	2000594c 	.word	0x2000594c
 8005ac4:	20005930 	.word	0x20005930
 8005ac8:	20005954 	.word	0x20005954
 8005acc:	20005950 	.word	0x20005950
 8005ad0:	20005948 	.word	0x20005948
 8005ad4:	20005944 	.word	0x20005944

08005ad8 <AMM_Alloc>:

AMM_Function_Error_t AMM_Alloc (const uint8_t VirtualMemoryId,
                                const uint32_t BufferSize,
                                uint32_t ** pp_AllocBuffer,
                                AMM_VirtualMemoryCallbackFunction_t * const p_CallBackFunction)
{
 8005ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t selfAvailable = 0x00;

  uint32_t * p_TmpAllocAddr = NULL;

  if (AmmInitialized == NOT_INITIALIZED)
 8005adc:	4c57      	ldr	r4, [pc, #348]	@ (8005c3c <AMM_Alloc+0x164>)
{
 8005ade:	b083      	sub	sp, #12
  if (AmmInitialized == NOT_INITIALIZED)
 8005ae0:	7826      	ldrb	r6, [r4, #0]
 8005ae2:	b376      	cbz	r6, 8005b42 <AMM_Alloc+0x6a>
  {
    error = AMM_ERROR_NOT_INIT;
  }
  /* Check if buffer size is not zero */
  else if (BufferSize == 0)
 8005ae4:	460d      	mov	r5, r1
 8005ae6:	b341      	cbz	r1, 8005b3a <AMM_Alloc+0x62>
  {
    error = AMM_ERROR_BAD_ALLOCATION_SIZE;
  }
  /* Check if no virtual ID requested */
  else if (VirtualMemoryId == AMM_NO_VIRTUAL_ID)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4692      	mov	sl, r2
 8005aec:	4699      	mov	r9, r3
 8005aee:	bb60      	cbnz	r0, 8005b4a <AMM_Alloc+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005af0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005af4:	b672      	cpsid	i
  {
    /* Enter critical section */
    UTIL_SEQ_ENTER_CRITICAL_SECTION ();

    /* Check for enough space in the shared pool */
    if (BufferSize < (AmmPoolSize - AmmOccupiedSharedPoolSize - AmmRequiredVirtualMemorySize))
 8005af6:	4b52      	ldr	r3, [pc, #328]	@ (8005c40 <AMM_Alloc+0x168>)
 8005af8:	4f52      	ldr	r7, [pc, #328]	@ (8005c44 <AMM_Alloc+0x16c>)
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	4b52      	ldr	r3, [pc, #328]	@ (8005c48 <AMM_Alloc+0x170>)
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	440a      	add	r2, r1
 8005b04:	1a9b      	subs	r3, r3, r2
 8005b06:	42ab      	cmp	r3, r5
 8005b08:	d939      	bls.n	8005b7e <AMM_Alloc+0xa6>
    {
      /* Try Allocation. Do not forget the header */
      p_TmpAllocAddr = AmmBmmFunctionsHandler.Allocate (BufferSize + VIRTUAL_MEMORY_HEADER_SIZE);
 8005b0a:	4b50      	ldr	r3, [pc, #320]	@ (8005c4c <AMM_Alloc+0x174>)
 8005b0c:	1c68      	adds	r0, r5, #1
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4798      	blx	r3

      /* Check if allocation is OK */
      if (p_TmpAllocAddr != NULL)
 8005b12:	4603      	mov	r3, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f000 8088 	beq.w	8005c2a <AMM_Alloc+0x152>
        *pp_AllocBuffer = (uint32_t *)(p_TmpAllocAddr + VIRTUAL_MEMORY_HEADER_SIZE);

        /* Actualize the current memory occupation of the shared space */
        AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + BufferSize + VIRTUAL_MEMORY_HEADER_SIZE;

        error = AMM_ERROR_OK;
 8005b1a:	4620      	mov	r0, r4
        AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + BufferSize + VIRTUAL_MEMORY_HEADER_SIZE;
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	3201      	adds	r2, #1
 8005b20:	442a      	add	r2, r5
                                        & VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_MASK);
 8005b22:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
        *p_TmpAllocAddr = (uint32_t)(((uint32_t)VirtualMemoryId << VIRTUAL_MEMORY_HEADER_ID_POS)
 8005b26:	f843 5b04 	str.w	r5, [r3], #4
        AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize + BufferSize + VIRTUAL_MEMORY_HEADER_SIZE;
 8005b2a:	603a      	str	r2, [r7, #0]
        *pp_AllocBuffer = (uint32_t *)(p_TmpAllocAddr + VIRTUAL_MEMORY_HEADER_SIZE);
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b30:	f386 8810 	msr	PRIMASK, r6
    /* Exit critical section */
    UTIL_SEQ_EXIT_CRITICAL_SECTION ();
  }

  return error;
}
 8005b34:	b003      	add	sp, #12
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error = AMM_ERROR_BAD_ALLOCATION_SIZE;
 8005b3a:	200a      	movs	r0, #10
}
 8005b3c:	b003      	add	sp, #12
 8005b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    error = AMM_ERROR_NOT_INIT;
 8005b42:	200d      	movs	r0, #13
}
 8005b44:	b003      	add	sp, #12
 8005b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b50:	b672      	cpsid	i
         (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
 8005b52:	4b3f      	ldr	r3, [pc, #252]	@ (8005c50 <AMM_Alloc+0x178>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	b15a      	cbz	r2, 8005b70 <AMM_Alloc+0x98>
      if (VirtualMemoryId == p_AmmVirtualMemoryList[memIdx].Id)
 8005b58:	2600      	movs	r6, #0
    for (uint32_t memIdx = 0x00;
 8005b5a:	4630      	mov	r0, r6
      if (VirtualMemoryId == p_AmmVirtualMemoryList[memIdx].Id)
 8005b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c54 <AMM_Alloc+0x17c>)
 8005b5e:	681f      	ldr	r7, [r3, #0]
 8005b60:	5dbb      	ldrb	r3, [r7, r6]
         memIdx++)
 8005b62:	3001      	adds	r0, #1
      if (VirtualMemoryId == p_AmmVirtualMemoryList[memIdx].Id)
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	d013      	beq.n	8005b90 <AMM_Alloc+0xb8>
         (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
 8005b68:	4290      	cmp	r0, r2
 8005b6a:	f106 060c 	add.w	r6, r6, #12
 8005b6e:	d1f7      	bne.n	8005b60 <AMM_Alloc+0x88>
    error = AMM_ERROR_UNKNOWN_ID;
 8005b70:	2009      	movs	r0, #9
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	f383 8810 	msr	PRIMASK, r3
}
 8005b78:	b003      	add	sp, #12
 8005b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/* Private Functions Definition ------------------------------------------------------*/

void pushPending (AMM_VirtualMemoryCallbackFunction_t * const p_CallbackElt)
{
  if (p_CallbackElt != NULL)
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	d003      	beq.n	8005b8c <AMM_Alloc+0xb4>
  {
    /* Add the new callback */
    LST_insert_tail (&AmmPendingCallback, (tListNode *)p_CallbackElt);
 8005b84:	4649      	mov	r1, r9
 8005b86:	4834      	ldr	r0, [pc, #208]	@ (8005c58 <AMM_Alloc+0x180>)
 8005b88:	f001 fc1c 	bl	80073c4 <LST_insert_tail>
      error = AMM_ERROR_BAD_ALLOCATION_SIZE;
 8005b8c:	200a      	movs	r0, #10
 8005b8e:	e7cf      	b.n	8005b30 <AMM_Alloc+0x58>
      if (VirtualMemoryId == p_AmmVirtualMemoryList[memIdx].Id)
 8005b90:	4437      	add	r7, r6
        if (p_AmmVirtualMemoryList[memIdx].OccupiedSize < p_AmmVirtualMemoryList[memIdx].RequiredSize)
 8005b92:	f8d7 3005 	ldr.w	r3, [r7, #5]
 8005b96:	f8d7 7001 	ldr.w	r7, [r7, #1]
        if (BufferSize < (AmmPoolSize - AmmOccupiedSharedPoolSize - AmmRequiredVirtualMemorySize + selfAvailable))
 8005b9a:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8005c44 <AMM_Alloc+0x16c>
        if (p_AmmVirtualMemoryList[memIdx].OccupiedSize < p_AmmVirtualMemoryList[memIdx].RequiredSize)
 8005b9e:	42bb      	cmp	r3, r7
          selfAvailable = p_AmmVirtualMemoryList[memIdx].RequiredSize
 8005ba0:	bf2c      	ite	cs
 8005ba2:	2700      	movcs	r7, #0
 8005ba4:	1aff      	subcc	r7, r7, r3
        if (BufferSize < (AmmPoolSize - AmmOccupiedSharedPoolSize - AmmRequiredVirtualMemorySize + selfAvailable))
 8005ba6:	4b26      	ldr	r3, [pc, #152]	@ (8005c40 <AMM_Alloc+0x168>)
 8005ba8:	f8d8 1000 	ldr.w	r1, [r8]
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	4b26      	ldr	r3, [pc, #152]	@ (8005c48 <AMM_Alloc+0x170>)
 8005bb0:	4401      	add	r1, r0
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	1a5b      	subs	r3, r3, r1
 8005bb6:	443b      	add	r3, r7
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	d924      	bls.n	8005c06 <AMM_Alloc+0x12e>
          p_TmpAllocAddr = AmmBmmFunctionsHandler.Allocate ((BufferSize + VIRTUAL_MEMORY_HEADER_SIZE));
 8005bbc:	4b23      	ldr	r3, [pc, #140]	@ (8005c4c <AMM_Alloc+0x174>)
 8005bbe:	f105 0b01 	add.w	fp, r5, #1
 8005bc2:	4658      	mov	r0, fp
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	4788      	blx	r1
          if (p_TmpAllocAddr != NULL)
 8005bc8:	b330      	cbz	r0, 8005c18 <AMM_Alloc+0x140>
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005bca:	4b22      	ldr	r3, [pc, #136]	@ (8005c54 <AMM_Alloc+0x17c>)
 8005bcc:	6819      	ldr	r1, [r3, #0]
 8005bce:	4431      	add	r1, r6
                                        & VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_MASK);
 8005bd0:	f025 467f 	bic.w	r6, r5, #4278190080	@ 0xff000000
                                      | ((BufferSize << VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS)
 8005bd4:	ea46 6404 	orr.w	r4, r6, r4, lsl #24
            *p_TmpAllocAddr = (uint32_t)(((uint32_t)VirtualMemoryId << VIRTUAL_MEMORY_HEADER_ID_POS)
 8005bd8:	f840 4b04 	str.w	r4, [r0], #4
            *pp_AllocBuffer = (uint32_t *)(p_TmpAllocAddr + VIRTUAL_MEMORY_HEADER_SIZE);
 8005bdc:	f8ca 0000 	str.w	r0, [sl]
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005be0:	f8d1 0005 	ldr.w	r0, [r1, #5]
                                                          + VIRTUAL_MEMORY_HEADER_SIZE;
 8005be4:	eb00 030b 	add.w	r3, r0, fp
            p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005be8:	f8c1 3005 	str.w	r3, [r1, #5]
            if (p_AmmVirtualMemoryList[memIdx].RequiredSize < p_AmmVirtualMemoryList[memIdx].OccupiedSize)
 8005bec:	f8d1 1001 	ldr.w	r1, [r1, #1]
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	d906      	bls.n	8005c02 <AMM_Alloc+0x12a>
                                          + VIRTUAL_MEMORY_HEADER_SIZE;
 8005bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	442b      	add	r3, r5
 8005bfc:	1bdb      	subs	r3, r3, r7
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize
 8005bfe:	f8c8 3000 	str.w	r3, [r8]
            error = AMM_ERROR_OK;
 8005c02:	2000      	movs	r0, #0
 8005c04:	e7b5      	b.n	8005b72 <AMM_Alloc+0x9a>
  if (p_CallbackElt != NULL)
 8005c06:	f1b9 0f00 	cmp.w	r9, #0
 8005c0a:	d003      	beq.n	8005c14 <AMM_Alloc+0x13c>
    LST_insert_tail (&AmmPendingCallback, (tListNode *)p_CallbackElt);
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	4812      	ldr	r0, [pc, #72]	@ (8005c58 <AMM_Alloc+0x180>)
 8005c10:	f001 fbd8 	bl	80073c4 <LST_insert_tail>
          error = AMM_ERROR_BAD_ALLOCATION_SIZE;
 8005c14:	200a      	movs	r0, #10
 8005c16:	e7ac      	b.n	8005b72 <AMM_Alloc+0x9a>
  if (p_CallbackElt != NULL)
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	d003      	beq.n	8005c26 <AMM_Alloc+0x14e>
    LST_insert_tail (&AmmPendingCallback, (tListNode *)p_CallbackElt);
 8005c1e:	4649      	mov	r1, r9
 8005c20:	480d      	ldr	r0, [pc, #52]	@ (8005c58 <AMM_Alloc+0x180>)
 8005c22:	f001 fbcf 	bl	80073c4 <LST_insert_tail>
            error = AMM_ERROR_ALLOCATION_FAILED;
 8005c26:	200b      	movs	r0, #11
 8005c28:	e7a3      	b.n	8005b72 <AMM_Alloc+0x9a>
  if (p_CallbackElt != NULL)
 8005c2a:	f1b9 0f00 	cmp.w	r9, #0
 8005c2e:	d003      	beq.n	8005c38 <AMM_Alloc+0x160>
    LST_insert_tail (&AmmPendingCallback, (tListNode *)p_CallbackElt);
 8005c30:	4649      	mov	r1, r9
 8005c32:	4809      	ldr	r0, [pc, #36]	@ (8005c58 <AMM_Alloc+0x180>)
 8005c34:	f001 fbc6 	bl	80073c4 <LST_insert_tail>
        error = AMM_ERROR_ALLOCATION_FAILED;
 8005c38:	200b      	movs	r0, #11
 8005c3a:	e779      	b.n	8005b30 <AMM_Alloc+0x58>
 8005c3c:	2000595c 	.word	0x2000595c
 8005c40:	2000594c 	.word	0x2000594c
 8005c44:	20005950 	.word	0x20005950
 8005c48:	20005954 	.word	0x20005954
 8005c4c:	20005938 	.word	0x20005938
 8005c50:	20005948 	.word	0x20005948
 8005c54:	20005944 	.word	0x20005944
 8005c58:	20005930 	.word	0x20005930

08005c5c <AMM_Free>:
{
 8005c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (AmmInitialized == NOT_INITIALIZED)
 8005c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d48 <AMM_Free+0xec>)
{
 8005c60:	b083      	sub	sp, #12
  if (AmmInitialized == NOT_INITIALIZED)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b363      	cbz	r3, 8005cc0 <AMM_Free+0x64>
  else if (p_BufferAddr == NULL)
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d061      	beq.n	8005d2e <AMM_Free+0xd2>
  else if ((MASK_ALIGNED_32BITS & (uint32_t)p_BufferAddr) != 0)
 8005c6a:	f010 0403 	ands.w	r4, r0, #3
 8005c6e:	d12b      	bne.n	8005cc8 <AMM_Free+0x6c>
  else if ((p_BufferAddr > (p_AmmPoolAddress + AmmPoolSize))
 8005c70:	4a36      	ldr	r2, [pc, #216]	@ (8005d4c <AMM_Free+0xf0>)
 8005c72:	4b37      	ldr	r3, [pc, #220]	@ (8005d50 <AMM_Free+0xf4>)
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	d827      	bhi.n	8005cd0 <AMM_Free+0x74>
           || (p_BufferAddr < p_AmmPoolAddress))
 8005c80:	4282      	cmp	r2, r0
 8005c82:	d825      	bhi.n	8005cd0 <AMM_Free+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c84:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c88:	b672      	cpsid	i
    AmmBmmFunctionsHandler.Free(p_TmpAllocAddr);
 8005c8a:	4b32      	ldr	r3, [pc, #200]	@ (8005d54 <AMM_Free+0xf8>)
    virtualId = (*p_TmpAllocAddr & VIRTUAL_MEMORY_HEADER_ID_MASK) >> VIRTUAL_MEMORY_HEADER_ID_POS;
 8005c8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
    AmmBmmFunctionsHandler.Free(p_TmpAllocAddr);
 8005c90:	689b      	ldr	r3, [r3, #8]
    virtualId = (*p_TmpAllocAddr & VIRTUAL_MEMORY_HEADER_ID_MASK) >> VIRTUAL_MEMORY_HEADER_ID_POS;
 8005c92:	0e2f      	lsrs	r7, r5, #24
    allocatedSize = (*p_TmpAllocAddr & VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_MASK) >> VIRTUAL_MEMORY_HEADER_BUFFER_SIZE_POS;
 8005c94:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
    allocatedSize = allocatedSize + VIRTUAL_MEMORY_HEADER_SIZE;
 8005c98:	3501      	adds	r5, #1
    AmmBmmFunctionsHandler.Free(p_TmpAllocAddr);
 8005c9a:	4798      	blx	r3
    if (virtualId == AMM_NO_VIRTUAL_ID)
 8005c9c:	2f00      	cmp	r7, #0
 8005c9e:	d04a      	beq.n	8005d36 <AMM_Free+0xda>
           (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
 8005ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8005d58 <AMM_Free+0xfc>)
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	b150      	cbz	r0, 8005cbc <AMM_Free+0x60>
        if (virtualId == p_AmmVirtualMemoryList[memIdx].Id)
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d5c <AMM_Free+0x100>)
    virtualId = (*p_TmpAllocAddr & VIRTUAL_MEMORY_HEADER_ID_MASK) >> VIRTUAL_MEMORY_HEADER_ID_POS;
 8005ca8:	b2f9      	uxtb	r1, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
        if (virtualId == p_AmmVirtualMemoryList[memIdx].Id)
 8005cac:	781a      	ldrb	r2, [r3, #0]
           memIdx++)
 8005cae:	3401      	adds	r4, #1
        if (virtualId == p_AmmVirtualMemoryList[memIdx].Id)
 8005cb0:	428a      	cmp	r2, r1
 8005cb2:	d011      	beq.n	8005cd8 <AMM_Free+0x7c>
           (memIdx < AmmVirtualMemoryNumber) && (error == AMM_ERROR_UNKNOWN_ID);
 8005cb4:	4284      	cmp	r4, r0
 8005cb6:	f103 030c 	add.w	r3, r3, #12
 8005cba:	d1f7      	bne.n	8005cac <AMM_Free+0x50>
      error = AMM_ERROR_UNKNOWN_ID;
 8005cbc:	2509      	movs	r5, #9
 8005cbe:	e01d      	b.n	8005cfc <AMM_Free+0xa0>
    error = AMM_ERROR_NOT_INIT;
 8005cc0:	250d      	movs	r5, #13
}
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	b003      	add	sp, #12
 8005cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    error = AMM_ERROR_NOT_ALIGNED;
 8005cc8:	2507      	movs	r5, #7
}
 8005cca:	4628      	mov	r0, r5
 8005ccc:	b003      	add	sp, #12
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    error = AMM_ERROR_OUT_OF_RANGE;
 8005cd0:	2508      	movs	r5, #8
}
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	b003      	add	sp, #12
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          occupiedOverRequired = (p_AmmVirtualMemoryList[memIdx].OccupiedSize - p_AmmVirtualMemoryList[memIdx].RequiredSize);
 8005cd8:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8005cdc:	f8d3 1001 	ldr.w	r1, [r3, #1]
 8005ce0:	1a50      	subs	r0, r2, r1
          if (occupiedOverRequired > 0x00)
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	dd06      	ble.n	8005cf4 <AMM_Free+0x98>
                                          - (p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005ce6:	4c1e      	ldr	r4, [pc, #120]	@ (8005d60 <AMM_Free+0x104>)
            if (allocatedSize > occupiedOverRequired)
 8005ce8:	42a8      	cmp	r0, r5
                                          - (p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005cea:	6827      	ldr	r7, [r4, #0]
            if (allocatedSize > occupiedOverRequired)
 8005cec:	d228      	bcs.n	8005d40 <AMM_Free+0xe4>
                                          - (p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005cee:	4439      	add	r1, r7
 8005cf0:	1a89      	subs	r1, r1, r2
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize
 8005cf2:	6021      	str	r1, [r4, #0]
                                                        - allocatedSize;
 8005cf4:	1b52      	subs	r2, r2, r5
          p_AmmVirtualMemoryList[memIdx].OccupiedSize = p_AmmVirtualMemoryList[memIdx].OccupiedSize
 8005cf6:	f8c3 2005 	str.w	r2, [r3, #5]
          error = AMM_ERROR_OK;
 8005cfa:	2500      	movs	r5, #0
  }
}

void passPendingToActive (void)
{
  AMM_VirtualMemoryCallbackFunction_t * p_TmpElt = NULL;
 8005cfc:	2300      	movs	r3, #0

  while (LST_is_empty (&AmmPendingCallback) == FALSE)
 8005cfe:	4c19      	ldr	r4, [pc, #100]	@ (8005d64 <AMM_Free+0x108>)
  {
    /* Remove the head element */
    LST_remove_head (&AmmPendingCallback, (tListNode**)&p_TmpElt);
    /* Add at the bottom */
    LST_insert_tail (&AmmActiveCallback, (tListNode *)p_TmpElt);
 8005d00:	4f19      	ldr	r7, [pc, #100]	@ (8005d68 <AMM_Free+0x10c>)
  AMM_VirtualMemoryCallbackFunction_t * p_TmpElt = NULL;
 8005d02:	9301      	str	r3, [sp, #4]
  while (LST_is_empty (&AmmPendingCallback) == FALSE)
 8005d04:	e007      	b.n	8005d16 <AMM_Free+0xba>
    LST_remove_head (&AmmPendingCallback, (tListNode**)&p_TmpElt);
 8005d06:	4620      	mov	r0, r4
 8005d08:	a901      	add	r1, sp, #4
 8005d0a:	f001 fb73 	bl	80073f4 <LST_remove_head>
    LST_insert_tail (&AmmActiveCallback, (tListNode *)p_TmpElt);
 8005d0e:	4638      	mov	r0, r7
 8005d10:	9901      	ldr	r1, [sp, #4]
 8005d12:	f001 fb57 	bl	80073c4 <LST_insert_tail>
  while (LST_is_empty (&AmmPendingCallback) == FALSE)
 8005d16:	4620      	mov	r0, r4
 8005d18:	f001 fb3c 	bl	8007394 <LST_is_empty>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d0f2      	beq.n	8005d06 <AMM_Free+0xaa>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	f386 8810 	msr	PRIMASK, r6
    AMM_ProcessRequest();
 8005d24:	f7fa fd50 	bl	80007c8 <AMM_ProcessRequest>
}
 8005d28:	4628      	mov	r0, r5
 8005d2a:	b003      	add	sp, #12
 8005d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    error = AMM_ERROR_BAD_POINTER;
 8005d2e:	2502      	movs	r5, #2
}
 8005d30:	4628      	mov	r0, r5
 8005d32:	b003      	add	sp, #12
 8005d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize - allocatedSize;
 8005d36:	4a0a      	ldr	r2, [pc, #40]	@ (8005d60 <AMM_Free+0x104>)
 8005d38:	6813      	ldr	r3, [r2, #0]
 8005d3a:	1b5b      	subs	r3, r3, r5
 8005d3c:	6013      	str	r3, [r2, #0]
      error = AMM_ERROR_OK;
 8005d3e:	e7dc      	b.n	8005cfa <AMM_Free+0x9e>
              AmmOccupiedSharedPoolSize = AmmOccupiedSharedPoolSize - allocatedSize;
 8005d40:	1b7f      	subs	r7, r7, r5
 8005d42:	6027      	str	r7, [r4, #0]
 8005d44:	e7d6      	b.n	8005cf4 <AMM_Free+0x98>
 8005d46:	bf00      	nop
 8005d48:	2000595c 	.word	0x2000595c
 8005d4c:	20005958 	.word	0x20005958
 8005d50:	20005954 	.word	0x20005954
 8005d54:	20005938 	.word	0x20005938
 8005d58:	20005948 	.word	0x20005948
 8005d5c:	20005944 	.word	0x20005944
 8005d60:	20005950 	.word	0x20005950
 8005d64:	20005930 	.word	0x20005930
 8005d68:	20005928 	.word	0x20005928

08005d6c <AMM_BackgroundProcess>:
{
 8005d6c:	b530      	push	{r4, r5, lr}
  }
}

AMM_VirtualMemoryCallbackFunction_t * popActive (void)
{
  AMM_VirtualMemoryCallbackFunction_t * p_error = NULL;
 8005d6e:	2500      	movs	r5, #0

  if (LST_is_empty (&AmmActiveCallback) == FALSE)
 8005d70:	4c0c      	ldr	r4, [pc, #48]	@ (8005da4 <AMM_BackgroundProcess+0x38>)
{
 8005d72:	b083      	sub	sp, #12
  if (LST_is_empty (&AmmActiveCallback) == FALSE)
 8005d74:	4620      	mov	r0, r4
  AMM_VirtualMemoryCallbackFunction_t * p_error = NULL;
 8005d76:	9501      	str	r5, [sp, #4]
  if (LST_is_empty (&AmmActiveCallback) == FALSE)
 8005d78:	f001 fb0c 	bl	8007394 <LST_is_empty>
 8005d7c:	b148      	cbz	r0, 8005d92 <AMM_BackgroundProcess+0x26>
  {
    /* Remove last element */
    LST_remove_head (&AmmActiveCallback, (tListNode**)&p_error);
  }

  return p_error;
 8005d7e:	9b01      	ldr	r3, [sp, #4]
    if (p_tmpCallback != NULL)
 8005d80:	b173      	cbz	r3, 8005da0 <AMM_BackgroundProcess+0x34>
      p_tmpCallback->Callback();
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4798      	blx	r3
  if (LST_is_empty (&AmmActiveCallback) == FALSE)
 8005d86:	4620      	mov	r0, r4
  AMM_VirtualMemoryCallbackFunction_t * p_error = NULL;
 8005d88:	9501      	str	r5, [sp, #4]
  if (LST_is_empty (&AmmActiveCallback) == FALSE)
 8005d8a:	f001 fb03 	bl	8007394 <LST_is_empty>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d1f5      	bne.n	8005d7e <AMM_BackgroundProcess+0x12>
    LST_remove_head (&AmmActiveCallback, (tListNode**)&p_error);
 8005d92:	4620      	mov	r0, r4
 8005d94:	a901      	add	r1, sp, #4
 8005d96:	f001 fb2d 	bl	80073f4 <LST_remove_head>
  return p_error;
 8005d9a:	9b01      	ldr	r3, [sp, #4]
    if (p_tmpCallback != NULL)
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <AMM_BackgroundProcess+0x16>
}
 8005da0:	b003      	add	sp, #12
 8005da2:	bd30      	pop	{r4, r5, pc}
 8005da4:	20005928 	.word	0x20005928

08005da8 <UTIL_MM_GetBuffer>:

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005da8:	4b3a      	ldr	r3, [pc, #232]	@ (8005e94 <UTIL_MM_GetBuffer+0xec>)
{
 8005daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dae:	681d      	ldr	r5, [r3, #0]
 8005db0:	4205      	tst	r5, r0
 8005db2:	d13a      	bne.n	8005e2a <UTIL_MM_GetBuffer+0x82>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d039      	beq.n	8005e2c <UTIL_MM_GetBuffer+0x84>
            {
                xWantedSize += xHeapStructSize;
 8005db8:	f100 0408 	add.w	r4, r0, #8

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dbc:	0743      	lsls	r3, r0, #29
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dbe:	bf1c      	itt	ne
 8005dc0:	f024 0407 	bicne.w	r4, r4, #7
 8005dc4:	3408      	addne	r4, #8
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dc6:	b384      	cbz	r4, 8005e2a <UTIL_MM_GetBuffer+0x82>
 8005dc8:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8005ea8 <UTIL_MM_GetBuffer+0x100>
 8005dcc:	f8de 6000 	ldr.w	r6, [lr]
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d32a      	bcc.n	8005e2a <UTIL_MM_GetBuffer+0x82>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
 8005dd4:	4b30      	ldr	r3, [pc, #192]	@ (8005e98 <UTIL_MM_GetBuffer+0xf0>)
                pxPreviousBlock = &xStart;
 8005dd6:	469c      	mov	ip, r3
                pxBlock = xStart.pxNextFreeBlock;
 8005dd8:	681b      	ldr	r3, [r3, #0]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dda:	e003      	b.n	8005de4 <UTIL_MM_GetBuffer+0x3c>
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	b122      	cbz	r2, 8005dea <UTIL_MM_GetBuffer+0x42>
 8005de0:	469c      	mov	ip, r3
 8005de2:	4613      	mov	r3, r2
 8005de4:	6859      	ldr	r1, [r3, #4]
 8005de6:	42a1      	cmp	r1, r4
 8005de8:	d3f8      	bcc.n	8005ddc <UTIL_MM_GetBuffer+0x34>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8005dea:	4a2c      	ldr	r2, [pc, #176]	@ (8005e9c <UTIL_MM_GetBuffer+0xf4>)
 8005dec:	f8d2 8000 	ldr.w	r8, [r2]
 8005df0:	4598      	cmp	r8, r3
 8005df2:	d01a      	beq.n	8005e2a <UTIL_MM_GetBuffer+0x82>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005df4:	4618      	mov	r0, r3
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df6:	1b0a      	subs	r2, r1, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df8:	f850 7b08 	ldr.w	r7, [r0], #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dfc:	2a10      	cmp	r2, #16
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dfe:	f8cc 7000 	str.w	r7, [ip]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e02:	d815      	bhi.n	8005e30 <UTIL_MM_GetBuffer+0x88>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e04:	4a26      	ldr	r2, [pc, #152]	@ (8005ea0 <UTIL_MM_GetBuffer+0xf8>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e06:	1a76      	subs	r6, r6, r1
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e08:	6814      	ldr	r4, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e0a:	430d      	orrs	r5, r1
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e0c:	42a6      	cmp	r6, r4
                    pxBlock->pxNextFreeBlock = NULL;
 8005e0e:	f04f 0400 	mov.w	r4, #0
                    xNumberOfSuccessfulAllocations++;
 8005e12:	4924      	ldr	r1, [pc, #144]	@ (8005ea4 <UTIL_MM_GetBuffer+0xfc>)
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e14:	bf38      	it	cc
 8005e16:	6016      	strcc	r6, [r2, #0]
                    xNumberOfSuccessfulAllocations++;
 8005e18:	680a      	ldr	r2, [r1, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e1a:	f8ce 6000 	str.w	r6, [lr]
                    xNumberOfSuccessfulAllocations++;
 8005e1e:	3201      	adds	r2, #1
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e20:	605d      	str	r5, [r3, #4]
                    xNumberOfSuccessfulAllocations++;
 8005e22:	600a      	str	r2, [r1, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8005e24:	601c      	str	r4, [r3, #0]
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
 8005e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    void * pvReturn = NULL;
 8005e2a:	2000      	movs	r0, #0
}
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e30:	191f      	adds	r7, r3, r4
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e32:	607a      	str	r2, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e34:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <UTIL_MM_GetBuffer+0xf0>)
                        pxBlock->xBlockSize = xWantedSize;
 8005e36:	605c      	str	r4, [r3, #4]
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e38:	4694      	mov	ip, r2
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	4297      	cmp	r7, r2
 8005e3e:	d8fb      	bhi.n	8005e38 <UTIL_MM_GetBuffer+0x90>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e40:	f8dc 1004 	ldr.w	r1, [ip, #4]
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e44:	f8d7 9004 	ldr.w	r9, [r7, #4]
    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e48:	eb0c 0a01 	add.w	sl, ip, r1
 8005e4c:	4557      	cmp	r7, sl
 8005e4e:	d00a      	beq.n	8005e66 <UTIL_MM_GetBuffer+0xbe>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e50:	eb07 0109 	add.w	r1, r7, r9
 8005e54:	428a      	cmp	r2, r1
 8005e56:	d010      	beq.n	8005e7a <UTIL_MM_GetBuffer+0xd2>
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e58:	4621      	mov	r1, r4
 8005e5a:	603a      	str	r2, [r7, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005e5c:	45bc      	cmp	ip, r7
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e5e:	bf18      	it	ne
 8005e60:	f8cc 7000 	strne.w	r7, [ip]
 8005e64:	e7ce      	b.n	8005e04 <UTIL_MM_GetBuffer+0x5c>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e66:	4489      	add	r9, r1
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e68:	eb0c 0109 	add.w	r1, ip, r9
 8005e6c:	428a      	cmp	r2, r1
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e6e:	f8cc 9004 	str.w	r9, [ip, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e72:	d001      	beq.n	8005e78 <UTIL_MM_GetBuffer+0xd0>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	e7c5      	b.n	8005e04 <UTIL_MM_GetBuffer+0x5c>
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e78:	4667      	mov	r7, ip
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e7a:	4590      	cmp	r8, r2
 8005e7c:	d006      	beq.n	8005e8c <UTIL_MM_GetBuffer+0xe4>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e7e:	6851      	ldr	r1, [r2, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e80:	6812      	ldr	r2, [r2, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e82:	4449      	add	r1, r9
 8005e84:	6079      	str	r1, [r7, #4]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e86:	6859      	ldr	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e88:	603a      	str	r2, [r7, #0]
 8005e8a:	e7e7      	b.n	8005e5c <UTIL_MM_GetBuffer+0xb4>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e8c:	6859      	ldr	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e8e:	f8c7 8000 	str.w	r8, [r7]
 8005e92:	e7e3      	b.n	8005e5c <UTIL_MM_GetBuffer+0xb4>
 8005e94:	20005960 	.word	0x20005960
 8005e98:	20005978 	.word	0x20005978
 8005e9c:	20005974 	.word	0x20005974
 8005ea0:	2000596c 	.word	0x2000596c
 8005ea4:	20005968 	.word	0x20005968
 8005ea8:	20005970 	.word	0x20005970

08005eac <UTIL_MM_ReleaseBuffer>:
    if( pv != NULL )
 8005eac:	b140      	cbz	r0, 8005ec0 <UTIL_MM_ReleaseBuffer+0x14>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eae:	4a20      	ldr	r2, [pc, #128]	@ (8005f30 <UTIL_MM_ReleaseBuffer+0x84>)
 8005eb0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	4213      	tst	r3, r2
 8005eb8:	d002      	beq.n	8005ec0 <UTIL_MM_ReleaseBuffer+0x14>
            if( pxLink->pxNextFreeBlock == NULL )
 8005eba:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005ebe:	b101      	cbz	r1, 8005ec2 <UTIL_MM_ReleaseBuffer+0x16>
 8005ec0:	4770      	bx	lr
{
 8005ec2:	b430      	push	{r4, r5}
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ec4:	4d1b      	ldr	r5, [pc, #108]	@ (8005f34 <UTIL_MM_ReleaseBuffer+0x88>)
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec6:	ea23 0202 	bic.w	r2, r3, r2
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005eca:	6829      	ldr	r1, [r5, #0]
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8005f38 <UTIL_MM_ReleaseBuffer+0x8c>)
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ece:	188c      	adds	r4, r1, r2
 8005ed0:	602c      	str	r4, [r5, #0]
        puc -= xHeapStructSize;
 8005ed2:	f1a0 0108 	sub.w	r1, r0, #8
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ed6:	f840 2c04 	str.w	r2, [r0, #-4]
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005eda:	469c      	mov	ip, r3
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4299      	cmp	r1, r3
 8005ee0:	d8fb      	bhi.n	8005eda <UTIL_MM_ReleaseBuffer+0x2e>
    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ee2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005ee6:	eb0c 0504 	add.w	r5, ip, r4
 8005eea:	42a9      	cmp	r1, r5
 8005eec:	d00e      	beq.n	8005f0c <UTIL_MM_ReleaseBuffer+0x60>
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eee:	188c      	adds	r4, r1, r2
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d013      	beq.n	8005f1c <UTIL_MM_ReleaseBuffer+0x70>
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ef4:	f840 3c08 	str.w	r3, [r0, #-8]
    if( pxIterator != pxBlockToInsert )
 8005ef8:	458c      	cmp	ip, r1
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005efa:	bf18      	it	ne
 8005efc:	f8cc 1000 	strne.w	r1, [ip]
                    xNumberOfSuccessfulFrees++;
 8005f00:	4a0e      	ldr	r2, [pc, #56]	@ (8005f3c <UTIL_MM_ReleaseBuffer+0x90>)
}
 8005f02:	bc30      	pop	{r4, r5}
                    xNumberOfSuccessfulFrees++;
 8005f04:	6813      	ldr	r3, [r2, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	6013      	str	r3, [r2, #0]
}
 8005f0a:	4770      	bx	lr
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f0c:	4422      	add	r2, r4
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f0e:	eb0c 0102 	add.w	r1, ip, r2
 8005f12:	428b      	cmp	r3, r1
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f14:	f8cc 2004 	str.w	r2, [ip, #4]
    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f18:	d1f2      	bne.n	8005f00 <UTIL_MM_ReleaseBuffer+0x54>
 8005f1a:	4661      	mov	r1, ip
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f1c:	4808      	ldr	r0, [pc, #32]	@ (8005f40 <UTIL_MM_ReleaseBuffer+0x94>)
 8005f1e:	6800      	ldr	r0, [r0, #0]
 8005f20:	4283      	cmp	r3, r0
 8005f22:	d003      	beq.n	8005f2c <UTIL_MM_ReleaseBuffer+0x80>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f24:	e9d3 0400 	ldrd	r0, r4, [r3]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f28:	4422      	add	r2, r4
 8005f2a:	604a      	str	r2, [r1, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f2c:	6008      	str	r0, [r1, #0]
 8005f2e:	e7e3      	b.n	8005ef8 <UTIL_MM_ReleaseBuffer+0x4c>
 8005f30:	20005960 	.word	0x20005960
 8005f34:	20005970 	.word	0x20005970
 8005f38:	20005978 	.word	0x20005978
 8005f3c:	20005964 	.word	0x20005964
 8005f40:	20005974 	.word	0x20005974

08005f44 <UTIL_MM_Init>:
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f44:	0743      	lsls	r3, r0, #29
    xStart.xBlockSize = ( size_t ) 0;
 8005f46:	f04f 0300 	mov.w	r3, #0
{
 8005f4a:	b4f0      	push	{r4, r5, r6, r7}
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f4c:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8005f50:	4401      	add	r1, r0
    pxEnd = ( void * ) uxAddress;
 8005f52:	4c0d      	ldr	r4, [pc, #52]	@ (8005f88 <UTIL_MM_Init+0x44>)
    uxAddress -= xHeapStructSize;
 8005f54:	f1a1 0108 	sub.w	r1, r1, #8
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f58:	bf18      	it	ne
 8005f5a:	3007      	addne	r0, #7
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f5c:	f021 0107 	bic.w	r1, r1, #7
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f60:	4a0a      	ldr	r2, [pc, #40]	@ (8005f8c <UTIL_MM_Init+0x48>)
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f62:	bf18      	it	ne
 8005f64:	f020 0007 	bicne.w	r0, r0, #7
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f68:	4d09      	ldr	r5, [pc, #36]	@ (8005f90 <UTIL_MM_Init+0x4c>)
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f6a:	4e0a      	ldr	r6, [pc, #40]	@ (8005f94 <UTIL_MM_Init+0x50>)
    pxEnd = ( void * ) uxAddress;
 8005f6c:	6021      	str	r1, [r4, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f6e:	4c0a      	ldr	r4, [pc, #40]	@ (8005f98 <UTIL_MM_Init+0x54>)
    xStart.xBlockSize = ( size_t ) 0;
 8005f70:	6053      	str	r3, [r2, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f72:	6010      	str	r0, [r2, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8005f74:	e9c1 3300 	strd	r3, r3, [r1]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f78:	1a0b      	subs	r3, r1, r0
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f7a:	6037      	str	r7, [r6, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f7c:	602b      	str	r3, [r5, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f7e:	6023      	str	r3, [r4, #0]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f80:	e9c0 1300 	strd	r1, r3, [r0]
}
 8005f84:	bcf0      	pop	{r4, r5, r6, r7}
 8005f86:	4770      	bx	lr
 8005f88:	20005974 	.word	0x20005974
 8005f8c:	20005978 	.word	0x20005978
 8005f90:	2000596c 	.word	0x2000596c
 8005f94:	20005960 	.word	0x20005960
 8005f98:	20005970 	.word	0x20005970

08005f9c <NVM_Init>:
               uint16_t size,
               uint16_t max_size )
#else
void NVM_Init( uint32_t* buffer )
#endif
{
 8005f9c:	b4f0      	push	{r4, r5, r6, r7}
  /* Save buffer info */
  NVM_buffer = (uint32_t*)buffer;
#if CFG_NVM_ALIGN != 0
  NVM_size = size;
  NVM_max_size = 2*max_size;
  NVM_buffer[2*size] = 0;
 8005f9e:	2600      	movs	r6, #0
  NVM_max_size = 2*max_size;
 8005fa0:	4f07      	ldr	r7, [pc, #28]	@ (8005fc0 <NVM_Init+0x24>)
 8005fa2:	0052      	lsls	r2, r2, #1
  NVM_size = size;
 8005fa4:	4d07      	ldr	r5, [pc, #28]	@ (8005fc4 <NVM_Init+0x28>)
#else
  NVM_max_size = CFG_NVM_MAX_SIZE;
#endif

  /* Initialize warning trigger level */
  NVM_trig_level = NVM_max_size - 1;
 8005fa6:	4c08      	ldr	r4, [pc, #32]	@ (8005fc8 <NVM_Init+0x2c>)
  NVM_max_size = 2*max_size;
 8005fa8:	b292      	uxth	r2, r2
  NVM_buffer = (uint32_t*)buffer;
 8005faa:	4b08      	ldr	r3, [pc, #32]	@ (8005fcc <NVM_Init+0x30>)
  NVM_max_size = 2*max_size;
 8005fac:	803a      	strh	r2, [r7, #0]
  NVM_trig_level = NVM_max_size - 1;
 8005fae:	3a01      	subs	r2, #1
  NVM_buffer[2*size] = 0;
 8005fb0:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
  NVM_size = size;
 8005fb4:	8029      	strh	r1, [r5, #0]
  NVM_trig_level = NVM_max_size - 1;
 8005fb6:	6022      	str	r2, [r4, #0]
  NVM_buffer = (uint32_t*)buffer;
 8005fb8:	6018      	str	r0, [r3, #0]
}
 8005fba:	bcf0      	pop	{r4, r5, r6, r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20005980 	.word	0x20005980
 8005fc4:	20005982 	.word	0x20005982
 8005fc8:	20005984 	.word	0x20005984
 8005fcc:	2000598c 	.word	0x2000598c

08005fd0 <NVM_Get>:
int NVM_Get( uint8_t mode,
             uint8_t type,
             uint16_t offset,
             uint8_t* data,
             uint16_t size )
{
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t *ptr, next;
  int remain_size, copy_size;

  /* Point at buffer start */
  ptr = NVM_buffer;
 8005fd4:	4c33      	ldr	r4, [pc, #204]	@ (80060a4 <NVM_Get+0xd4>)
{
 8005fd6:	4690      	mov	r8, r2
  ptr = NVM_buffer;
 8005fd8:	6826      	ldr	r6, [r4, #0]
    NVM_offset = 0;
  }
  else
  {
    /* Check current offset */
    if  ( NVM_offset >= NVM_max_size - 1 )
 8005fda:	4c33      	ldr	r4, [pc, #204]	@ (80060a8 <NVM_Get+0xd8>)
{
 8005fdc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    if  ( NVM_offset >= NVM_max_size - 1 )
 8005fe0:	f8b4 a000 	ldrh.w	sl, [r4]
    NVM_offset = 0;
 8005fe4:	4f31      	ldr	r7, [pc, #196]	@ (80060ac <NVM_Get+0xdc>)
  if ( mode == NVM_FIRST )
 8005fe6:	b9e8      	cbnz	r0, 8006024 <NVM_Get+0x54>
    NVM_offset = 0;
 8005fe8:	6038      	str	r0, [r7, #0]
    ptr += NVM_offset;
  }

  if ( mode != NVM_CURRENT )
  {
    if ( mode == NVM_NEXT )
 8005fea:	683d      	ldr	r5, [r7, #0]
 8005fec:	e007      	b.n	8005ffe <NVM_Get+0x2e>
        return NVM_ERROR;
      }
    }

    /* Search the first next record with matching type */
    while ( !(NVM_BLANK(ptr) || (NVM_VALID(ptr) && (NVM_TYPE(ptr) == type))) )
 8005fee:	0e20      	lsrs	r0, r4, #24
 8005ff0:	d001      	beq.n	8005ff6 <NVM_Get+0x26>
 8005ff2:	458e      	cmp	lr, r1
 8005ff4:	d025      	beq.n	8006042 <NVM_Get+0x72>
      /* Point on the next record */
      next = NVM_OFFSET(NVM_SIZE(ptr));
      ptr += next;
      NVM_offset += next;

      if  ( NVM_offset >= NVM_max_size )
 8005ff6:	4555      	cmp	r5, sl
      NVM_offset += next;
 8005ff8:	603d      	str	r5, [r7, #0]
      ptr += next;
 8005ffa:	4466      	add	r6, ip
      if  ( NVM_offset >= NVM_max_size )
 8005ffc:	d249      	bcs.n	8006092 <NVM_Get+0xc2>
    while ( !(NVM_BLANK(ptr) || (NVM_VALID(ptr) && (NVM_TYPE(ptr) == type))) )
 8005ffe:	6834      	ldr	r4, [r6, #0]
      next = NVM_OFFSET(NVM_SIZE(ptr));
 8006000:	fa1f fc84 	uxth.w	ip, r4
 8006004:	f10c 0c0b 	add.w	ip, ip, #11
 8006008:	ea4f 0edc 	mov.w	lr, ip, lsr #3
      NVM_offset += next;
 800600c:	eb05 054e 	add.w	r5, r5, lr, lsl #1
      ptr += next;
 8006010:	f02c 0c07 	bic.w	ip, ip, #7
    while ( !(NVM_BLANK(ptr) || (NVM_VALID(ptr) && (NVM_TYPE(ptr) == type))) )
 8006014:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8006018:	0c22      	lsrs	r2, r4, #16
 800601a:	2c00      	cmp	r4, #0
 800601c:	d1e7      	bne.n	8005fee <NVM_Get+0x1e>
      return NVM_EOF;
 800601e:	f06f 0902 	mvn.w	r9, #2
 8006022:	e021      	b.n	8006068 <NVM_Get+0x98>
    if  ( NVM_offset >= NVM_max_size - 1 )
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	f10a 34ff 	add.w	r4, sl, #4294967295
 800602a:	4294      	cmp	r4, r2
 800602c:	d936      	bls.n	800609c <NVM_Get+0xcc>
    ptr += NVM_offset;
 800602e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
  if ( mode != NVM_CURRENT )
 8006032:	2802      	cmp	r0, #2
      next = NVM_OFFSET(NVM_SIZE(ptr));
 8006034:	6834      	ldr	r4, [r6, #0]
  if ( mode != NVM_CURRENT )
 8006036:	d11f      	bne.n	8006078 <NVM_Get+0xa8>
       return NVM_ERROR;
      }
    }
  }

  if ( NVM_BLANK(ptr) )
 8006038:	2c00      	cmp	r4, #0
 800603a:	d0f0      	beq.n	800601e <NVM_Get+0x4e>
  {
    /* Return if we have reached the end of data in the buffer */
    return NVM_EOF;
  }

  if ( !(NVM_VALID(ptr) && (NVM_TYPE(ptr) == type)) )
 800603c:	0e22      	lsrs	r2, r4, #24
 800603e:	d028      	beq.n	8006092 <NVM_Get+0xc2>
 8006040:	0c22      	lsrs	r2, r4, #16
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	428a      	cmp	r2, r1
 8006046:	d124      	bne.n	8006092 <NVM_Get+0xc2>
    /* Return if the record is not valid (memory corruption case) */
    return NVM_ERROR;
  }

  /* Compute the record remaining size (after the offset) */
  remain_size = (int)NVM_SIZE(ptr) - (int)offset;
 8006048:	b2a4      	uxth	r4, r4
 800604a:	eba4 0408 	sub.w	r4, r4, r8

  /* Compute the number of bytes to copy */
  copy_size = 0;

  if ( remain_size > 0 )
 800604e:	2c00      	cmp	r4, #0
 8006050:	dd0d      	ble.n	800606e <NVM_Get+0x9e>
  {
    copy_size = (int)size;

    if ( remain_size < copy_size )
 8006052:	45a1      	cmp	r9, r4
 8006054:	bfa8      	it	ge
 8006056:	46a1      	movge	r9, r4
    {
      copy_size = remain_size;
    }

    /* Retrieve the record data */
    if ( data )
 8006058:	b133      	cbz	r3, 8006068 <NVM_Get+0x98>
    {
      memcpy( data, ((uint8_t*)ptr) + 4 + offset, copy_size );
 800605a:	f108 0104 	add.w	r1, r8, #4
 800605e:	464a      	mov	r2, r9
 8006060:	4618      	mov	r0, r3
 8006062:	4431      	add	r1, r6
 8006064:	f025 fc7f 	bl	802b966 <memcpy>
    }
  }

  /* Return the number of bytes copied */
  return copy_size;
}
 8006068:	4648      	mov	r0, r9
 800606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  copy_size = 0;
 800606e:	f04f 0900 	mov.w	r9, #0
}
 8006072:	4648      	mov	r0, r9
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( mode == NVM_NEXT )
 8006078:	2801      	cmp	r0, #1
 800607a:	d1b6      	bne.n	8005fea <NVM_Get+0x1a>
      next = NVM_OFFSET(NVM_SIZE(ptr));
 800607c:	b2a4      	uxth	r4, r4
 800607e:	340b      	adds	r4, #11
 8006080:	08e0      	lsrs	r0, r4, #3
      NVM_offset += next;
 8006082:	eb02 0240 	add.w	r2, r2, r0, lsl #1
      ptr += next;
 8006086:	f024 0407 	bic.w	r4, r4, #7
      if  ( NVM_offset >= NVM_max_size )
 800608a:	4552      	cmp	r2, sl
      ptr += next;
 800608c:	4426      	add	r6, r4
      NVM_offset += next;
 800608e:	603a      	str	r2, [r7, #0]
      if  ( NVM_offset >= NVM_max_size )
 8006090:	d3ab      	bcc.n	8005fea <NVM_Get+0x1a>
        return NVM_ERROR;
 8006092:	f06f 0904 	mvn.w	r9, #4
}
 8006096:	4648      	mov	r0, r9
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      NVM_offset = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	603b      	str	r3, [r7, #0]
      return NVM_EOF;
 80060a0:	e7bd      	b.n	800601e <NVM_Get+0x4e>
 80060a2:	bf00      	nop
 80060a4:	2000598c 	.word	0x2000598c
 80060a8:	20005980 	.word	0x20005980
 80060ac:	20005988 	.word	0x20005988

080060b0 <NVM_Compare>:
{
  uint32_t *ptr;
  int remain_size;

  /* Point on the current record */
  ptr = NVM_buffer + NVM_offset;
 80060b0:	4b11      	ldr	r3, [pc, #68]	@ (80060f8 <NVM_Compare+0x48>)
{
 80060b2:	b570      	push	{r4, r5, r6, lr}
  ptr = NVM_buffer + NVM_offset;
 80060b4:	681d      	ldr	r5, [r3, #0]

  /* Check current position in the database */
  if  ( (NVM_offset >= NVM_max_size - 1) || NVM_BLANK(ptr) )
 80060b6:	4b11      	ldr	r3, [pc, #68]	@ (80060fc <NVM_Compare+0x4c>)
  ptr = NVM_buffer + NVM_offset;
 80060b8:	4c11      	ldr	r4, [pc, #68]	@ (8006100 <NVM_Compare+0x50>)
  if  ( (NVM_offset >= NVM_max_size - 1) || NVM_BLANK(ptr) )
 80060ba:	881b      	ldrh	r3, [r3, #0]
  ptr = NVM_buffer + NVM_offset;
 80060bc:	6826      	ldr	r6, [r4, #0]
  if  ( (NVM_offset >= NVM_max_size - 1) || NVM_BLANK(ptr) )
 80060be:	3b01      	subs	r3, #1
 80060c0:	429d      	cmp	r5, r3
{
 80060c2:	4684      	mov	ip, r0
 80060c4:	4608      	mov	r0, r1
  ptr = NVM_buffer + NVM_offset;
 80060c6:	eb06 0185 	add.w	r1, r6, r5, lsl #2
  if  ( (NVM_offset >= NVM_max_size - 1) || NVM_BLANK(ptr) )
 80060ca:	d212      	bcs.n	80060f2 <NVM_Compare+0x42>
 80060cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d0:	b17b      	cbz	r3, 80060f2 <NVM_Compare+0x42>
    /* Return if we have reached the end of data in the buffer */
    return NVM_EOF;
  }

  /* Compute the record remaining size (after the offset) */
  remain_size = NVM_SIZE(ptr) - (int)offset;
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	eba3 030c 	sub.w	r3, r3, ip

  if ( (size > remain_size) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	4614      	mov	r4, r2
 80060dc:	dc07      	bgt.n	80060ee <NVM_Compare+0x3e>
       (memcmp( data, ((uint8_t*)ptr) + 4 + offset, size ) != 0) )
 80060de:	f10c 0c04 	add.w	ip, ip, #4
 80060e2:	4461      	add	r1, ip
 80060e4:	f025 fbde 	bl	802b8a4 <memcmp>
  {
    return (int)size;
  }

  return NVM_OK;
 80060e8:	2800      	cmp	r0, #0
 80060ea:	bf08      	it	eq
 80060ec:	2400      	moveq	r4, #0
}
 80060ee:	4620      	mov	r0, r4
 80060f0:	bd70      	pop	{r4, r5, r6, pc}
    return NVM_EOF;
 80060f2:	f06f 0402 	mvn.w	r4, #2
 80060f6:	e7fa      	b.n	80060ee <NVM_Compare+0x3e>
 80060f8:	20005988 	.word	0x20005988
 80060fc:	20005980 	.word	0x20005980
 8006100:	2000598c 	.word	0x2000598c

08006104 <NVM_Add>:
{
 8006104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006108:	b087      	sub	sp, #28
 800610a:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
  if ( data && size )
 800610e:	2900      	cmp	r1, #0
 8006110:	d07e      	beq.n	8006210 <NVM_Add+0x10c>
 8006112:	4692      	mov	sl, r2
 8006114:	2a00      	cmp	r2, #0
 8006116:	d07b      	beq.n	8006210 <NVM_Add+0x10c>
 8006118:	468b      	mov	fp, r1
    total_size = size + extra_size;
 800611a:	eb02 0e07 	add.w	lr, r2, r7
    offset = 1 + NVM_OFFSET(total_size);
 800611e:	f10e 020b 	add.w	r2, lr, #11
 8006122:	08d2      	lsrs	r2, r2, #3
 8006124:	0052      	lsls	r2, r2, #1
 8006126:	9205      	str	r2, [sp, #20]
 8006128:	3201      	adds	r2, #1
 800612a:	e9cd 2e01 	strd	r2, lr, [sp, #4]
 800612e:	e9cd 0303 	strd	r0, r3, [sp, #12]
 8006132:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8006280 <NVM_Add+0x17c>
 8006136:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 8006284 <NVM_Add+0x180>
      ptr = NVM_buffer;
 800613a:	f8d8 5000 	ldr.w	r5, [r8]
      left = NVM_max_size;
 800613e:	f8b9 c000 	ldrh.w	ip, [r9]
      while ( !NVM_BLANK(ptr) )
 8006142:	6829      	ldr	r1, [r5, #0]
 8006144:	b1e1      	cbz	r1, 8006180 <NVM_Add+0x7c>
      left = NVM_max_size;
 8006146:	4660      	mov	r0, ip
      ptr = NVM_buffer;
 8006148:	462c      	mov	r4, r5
      while ( !NVM_BLANK(ptr) )
 800614a:	460a      	mov	r2, r1
      removed = 0;
 800614c:	2600      	movs	r6, #0
 800614e:	e007      	b.n	8006160 <NVM_Add+0x5c>
        if ( !NVM_VALID(ptr) )
 8006150:	0e12      	lsrs	r2, r2, #24
      while ( !NVM_BLANK(ptr) )
 8006152:	6822      	ldr	r2, [r4, #0]
          removed += next;
 8006154:	bf08      	it	eq
 8006156:	4476      	addeq	r6, lr
        left -= next;
 8006158:	eba0 000e 	sub.w	r0, r0, lr
      while ( !NVM_BLANK(ptr) )
 800615c:	2a00      	cmp	r2, #0
 800615e:	d05b      	beq.n	8006218 <NVM_Add+0x114>
        next = NVM_OFFSET(NVM_SIZE(ptr));
 8006160:	b293      	uxth	r3, r2
 8006162:	330b      	adds	r3, #11
        ptr += next;
 8006164:	f023 0e07 	bic.w	lr, r3, #7
        next = NVM_OFFSET(NVM_SIZE(ptr));
 8006168:	08db      	lsrs	r3, r3, #3
        if  ( next >= left )
 800616a:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
        ptr += next;
 800616e:	4474      	add	r4, lr
        next = NVM_OFFSET(NVM_SIZE(ptr));
 8006170:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        if  ( next >= left )
 8006174:	d8ec      	bhi.n	8006150 <NVM_Add+0x4c>
          return NVM_ERROR;
 8006176:	f06f 0004 	mvn.w	r0, #4
}
 800617a:	b007      	add	sp, #28
 800617c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( offset <= left )
 8006180:	9a01      	ldr	r2, [sp, #4]
 8006182:	9b04      	ldr	r3, [sp, #16]
 8006184:	4562      	cmp	r2, ip
 8006186:	e9dd e002 	ldrd	lr, r0, [sp, #8]
 800618a:	d86c      	bhi.n	8006266 <NVM_Add+0x162>
      removed = 0;
 800618c:	460e      	mov	r6, r1
      ptr = NVM_buffer;
 800618e:	462c      	mov	r4, r5
    *ptr = 0x01000000UL | (((uint32_t)type) << 16) | total_size;
 8006190:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
 8006194:	4620      	mov	r0, r4
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	f04e 7380 	orr.w	r3, lr, #16777216	@ 0x1000000
 800619c:	f840 3b04 	str.w	r3, [r0], #4
    memcpy( ptr + 1, data, size );
 80061a0:	4659      	mov	r1, fp
 80061a2:	4652      	mov	r2, sl
    *ptr = 0x01000000UL | (((uint32_t)type) << 16) | total_size;
 80061a4:	9301      	str	r3, [sp, #4]
    memcpy( ptr + 1, data, size );
 80061a6:	f025 fbde 	bl	802b966 <memcpy>
    if ( extra_data )
 80061aa:	9b02      	ldr	r3, [sp, #8]
 80061ac:	b143      	cbz	r3, 80061c0 <NVM_Add+0xbc>
      memcpy( ((uint8_t*)(ptr + 1)) + size, extra_data, extra_size );
 80061ae:	f10a 0004 	add.w	r0, sl, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	463a      	mov	r2, r7
 80061b6:	4420      	add	r0, r4
 80061b8:	f025 fbd5 	bl	802b966 <memcpy>
    ptr += NVM_OFFSET(NVM_SIZE(ptr));
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	9301      	str	r3, [sp, #4]
    *ptr = 0;
 80061c0:	2300      	movs	r3, #0
    ptr += NVM_OFFSET(NVM_SIZE(ptr));
 80061c2:	f8bd 7004 	ldrh.w	r7, [sp, #4]
    NVMCB_Store( start_ptr, NVM_size );
 80061c6:	4620      	mov	r0, r4
    ptr += NVM_OFFSET(NVM_SIZE(ptr));
 80061c8:	370b      	adds	r7, #11
 80061ca:	f027 0707 	bic.w	r7, r7, #7
    *ptr = 0;
 80061ce:	51e3      	str	r3, [r4, r7]
    ptr += NVM_OFFSET(NVM_SIZE(ptr));
 80061d0:	4427      	add	r7, r4
    NVM_size = (ptr - NVM_buffer) / 2;
 80061d2:	1b7d      	subs	r5, r7, r5
 80061d4:	0fe9      	lsrs	r1, r5, #31
 80061d6:	4b28      	ldr	r3, [pc, #160]	@ (8006278 <NVM_Add+0x174>)
 80061d8:	eb01 01a5 	add.w	r1, r1, r5, asr #2
 80061dc:	1049      	asrs	r1, r1, #1
 80061de:	8019      	strh	r1, [r3, #0]
    NVMCB_Store( start_ptr, NVM_size );
 80061e0:	b289      	uxth	r1, r1
 80061e2:	f7fb fd4d 	bl	8001c80 <NVMCB_Store>
    NVM_trig_level = MIN(NVM_trig_level, NVM_max_size + 1 - offset);
 80061e6:	9a05      	ldr	r2, [sp, #20]
 80061e8:	f8b9 3000 	ldrh.w	r3, [r9]
    if ( (ptr + 1 - NVM_buffer - removed) > NVM_trig_level )
 80061ec:	f8d8 0000 	ldr.w	r0, [r8]
    NVM_trig_level = MIN(NVM_trig_level, NVM_max_size + 1 - offset);
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	4922      	ldr	r1, [pc, #136]	@ (800627c <NVM_Add+0x178>)
    if ( (ptr + 1 - NVM_buffer - removed) > NVM_trig_level )
 80061f4:	1d3a      	adds	r2, r7, #4
 80061f6:	1a12      	subs	r2, r2, r0
 80061f8:	ebc6 06a2 	rsb	r6, r6, r2, asr #2
    NVM_trig_level = MIN(NVM_trig_level, NVM_max_size + 1 - offset);
 80061fc:	680a      	ldr	r2, [r1, #0]
 80061fe:	4293      	cmp	r3, r2
 8006200:	bf28      	it	cs
 8006202:	4613      	movcs	r3, r2
    if ( (ptr + 1 - NVM_buffer - removed) > NVM_trig_level )
 8006204:	42b3      	cmp	r3, r6
      return NVM_WARN;
 8006206:	bf38      	it	cc
 8006208:	f06f 0003 	mvncc.w	r0, #3
    NVM_trig_level = MIN(NVM_trig_level, NVM_max_size + 1 - offset);
 800620c:	600b      	str	r3, [r1, #0]
    if ( (ptr + 1 - NVM_buffer - removed) > NVM_trig_level )
 800620e:	d300      	bcc.n	8006212 <NVM_Add+0x10e>
  return NVM_OK;
 8006210:	2000      	movs	r0, #0
}
 8006212:	b007      	add	sp, #28
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( offset <= left )
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	4283      	cmp	r3, r0
 800621c:	d928      	bls.n	8006270 <NVM_Add+0x16c>
      if ( removed == 0 )
 800621e:	b92e      	cbnz	r6, 800622c <NVM_Add+0x128>
 8006220:	e021      	b.n	8006266 <NVM_Add+0x162>
        ptr += next;
 8006222:	4415      	add	r5, r2
      while ( (!NVM_BLANK(ptr)) && NVM_VALID(ptr) )
 8006224:	6829      	ldr	r1, [r5, #0]
        left -= next;
 8006226:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
      while ( (!NVM_BLANK(ptr)) && NVM_VALID(ptr) )
 800622a:	b1e1      	cbz	r1, 8006266 <NVM_Add+0x162>
        next = NVM_OFFSET(NVM_SIZE(ptr));
 800622c:	b28b      	uxth	r3, r1
 800622e:	330b      	adds	r3, #11
      while ( (!NVM_BLANK(ptr)) && NVM_VALID(ptr) )
 8006230:	0e08      	lsrs	r0, r1, #24
        ptr += next;
 8006232:	f023 0207 	bic.w	r2, r3, #7
        next = NVM_OFFSET(NVM_SIZE(ptr));
 8006236:	ea4f 03d3 	mov.w	r3, r3, lsr #3
      while ( (!NVM_BLANK(ptr)) && NVM_VALID(ptr) )
 800623a:	d1f2      	bne.n	8006222 <NVM_Add+0x11e>
      next = NVM_OFFSET(NVM_SIZE(ptr));
 800623c:	461c      	mov	r4, r3
 800623e:	b289      	uxth	r1, r1
 8006240:	310b      	adds	r1, #11
      memmove( ptr, ptr + next, 4*(left - next) );
 8006242:	ebac 0243 	sub.w	r2, ip, r3, lsl #1
 8006246:	f021 0107 	bic.w	r1, r1, #7
 800624a:	4429      	add	r1, r5
 800624c:	4628      	mov	r0, r5
 800624e:	0092      	lsls	r2, r2, #2
 8006250:	f025 fb38 	bl	802b8c4 <memmove>
      NVM_size -= next/2;
 8006254:	4b08      	ldr	r3, [pc, #32]	@ (8006278 <NVM_Add+0x174>)
      NVMCB_Store( ptr, NVM_size );
 8006256:	4628      	mov	r0, r5
      NVM_size -= next/2;
 8006258:	8819      	ldrh	r1, [r3, #0]
 800625a:	1b09      	subs	r1, r1, r4
 800625c:	b289      	uxth	r1, r1
 800625e:	8019      	strh	r1, [r3, #0]
      NVMCB_Store( ptr, NVM_size );
 8006260:	f7fb fd0e 	bl	8001c80 <NVMCB_Store>
      ptr = NVM_buffer;
 8006264:	e769      	b.n	800613a <NVM_Add+0x36>
        return NVM_FULL;
 8006266:	f04f 30ff 	mov.w	r0, #4294967295
}
 800626a:	b007      	add	sp, #28
 800626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	e9dd e002 	ldrd	lr, r0, [sp, #8]
 8006276:	e78b      	b.n	8006190 <NVM_Add+0x8c>
 8006278:	20005982 	.word	0x20005982
 800627c:	20005984 	.word	0x20005984
 8006280:	2000598c 	.word	0x2000598c
 8006284:	20005980 	.word	0x20005980

08006288 <NVM_Discard>:

/*****************************************************************************/

void NVM_Discard( uint8_t mode )
{
 8006288:	4603      	mov	r3, r0
  uint32_t *ptr, *ptr_next, next, size;

  ptr = NVM_buffer;
 800628a:	4a27      	ldr	r2, [pc, #156]	@ (8006328 <NVM_Discard+0xa0>)

  if ( mode == NVM_CURRENT )
 800628c:	2b02      	cmp	r3, #2
{
 800628e:	b510      	push	{r4, lr}
  ptr = NVM_buffer;
 8006290:	6810      	ldr	r0, [r2, #0]
  if ( mode == NVM_CURRENT )
 8006292:	d00c      	beq.n	80062ae <NVM_Discard+0x26>
        /* Invalidate the current record */
        *ptr = size;
      }
    }
  }
  else if ( mode == NVM_ALL )
 8006294:	2b03      	cmp	r3, #3
 8006296:	d004      	beq.n	80062a2 <NVM_Discard+0x1a>
    NVM_size = 0;
#endif
  }

#if CFG_NVM_ALIGN != 0
  NVMCB_Store( ptr, NVM_size );
 8006298:	4b24      	ldr	r3, [pc, #144]	@ (800632c <NVM_Discard+0xa4>)
 800629a:	8819      	ldrh	r1, [r3, #0]
 800629c:	f7fb fcf0 	bl	8001c80 <NVMCB_Store>
#else
  NVMCB_Store( ptr, 1 );
#endif
}
 80062a0:	bd10      	pop	{r4, pc}
    *ptr = 0;
 80062a2:	2300      	movs	r3, #0
    NVM_size = 0;
 80062a4:	4a21      	ldr	r2, [pc, #132]	@ (800632c <NVM_Discard+0xa4>)
 80062a6:	4619      	mov	r1, r3
    *ptr = 0;
 80062a8:	6003      	str	r3, [r0, #0]
    NVM_size = 0;
 80062aa:	8013      	strh	r3, [r2, #0]
 80062ac:	e7f6      	b.n	800629c <NVM_Discard+0x14>
    if  ( NVM_offset >= NVM_max_size - 1 )
 80062ae:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <NVM_Discard+0xa8>)
 80062b0:	4a20      	ldr	r2, [pc, #128]	@ (8006334 <NVM_Discard+0xac>)
 80062b2:	8819      	ldrh	r1, [r3, #0]
 80062b4:	6813      	ldr	r3, [r2, #0]
 80062b6:	f101 3cff 	add.w	ip, r1, #4294967295
 80062ba:	459c      	cmp	ip, r3
 80062bc:	d927      	bls.n	800630e <NVM_Discard+0x86>
    ptr += NVM_offset;
 80062be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    if ( !NVM_BLANK(ptr) )
 80062c2:	6802      	ldr	r2, [r0, #0]
    ptr += NVM_offset;
 80062c4:	009c      	lsls	r4, r3, #2
    if ( !NVM_BLANK(ptr) )
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d0e6      	beq.n	8006298 <NVM_Discard+0x10>
      next = NVM_OFFSET(NVM_SIZE(ptr));
 80062ca:	b292      	uxth	r2, r2
 80062cc:	f102 0e0b 	add.w	lr, r2, #11
 80062d0:	ea4f 0cde 	mov.w	ip, lr, lsr #3
      if  ( (NVM_offset + next) >= NVM_max_size )
 80062d4:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 80062d8:	428b      	cmp	r3, r1
      next = NVM_OFFSET(NVM_SIZE(ptr));
 80062da:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
      if  ( (NVM_offset + next) >= NVM_max_size )
 80062de:	d2df      	bcs.n	80062a0 <NVM_Discard+0x18>
      ptr_next = ptr + next;
 80062e0:	f02e 0e07 	bic.w	lr, lr, #7
      if ( NVM_BLANK(ptr_next) )
 80062e4:	f850 300e 	ldr.w	r3, [r0, lr]
 80062e8:	b1a3      	cbz	r3, 8006314 <NVM_Discard+0x8c>
        if ( !NVM_VALID(ptr_next) )
 80062ea:	0e19      	lsrs	r1, r3, #24
 80062ec:	d10b      	bne.n	8006306 <NVM_Discard+0x7e>
          next += NVM_OFFSET(NVM_SIZE(ptr_next));
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	330b      	adds	r3, #11
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
          if ( next <= 0x4000UL )
 80062f8:	f5bc 4f80 	cmp.w	ip, #16384	@ 0x4000
            size = (next - 1) * 4;
 80062fc:	bf9c      	itt	ls
 80062fe:	f10c 3cff 	addls.w	ip, ip, #4294967295
 8006302:	ea4f 028c 	movls.w	r2, ip, lsl #2
  NVMCB_Store( ptr, NVM_size );
 8006306:	4b09      	ldr	r3, [pc, #36]	@ (800632c <NVM_Discard+0xa4>)
        *ptr = size;
 8006308:	6002      	str	r2, [r0, #0]
  NVMCB_Store( ptr, NVM_size );
 800630a:	8819      	ldrh	r1, [r3, #0]
 800630c:	e7c6      	b.n	800629c <NVM_Discard+0x14>
      NVM_offset = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	6013      	str	r3, [r2, #0]
}
 8006312:	bd10      	pop	{r4, pc}
        NVM_size = (ptr - NVM_buffer) / 2;
 8006314:	0fe1      	lsrs	r1, r4, #31
 8006316:	4a05      	ldr	r2, [pc, #20]	@ (800632c <NVM_Discard+0xa4>)
 8006318:	eb01 01a4 	add.w	r1, r1, r4, asr #2
 800631c:	1049      	asrs	r1, r1, #1
 800631e:	8011      	strh	r1, [r2, #0]
        *ptr = 0;
 8006320:	6003      	str	r3, [r0, #0]
  NVMCB_Store( ptr, NVM_size );
 8006322:	b289      	uxth	r1, r1
 8006324:	e7ba      	b.n	800629c <NVM_Discard+0x14>
 8006326:	bf00      	nop
 8006328:	2000598c 	.word	0x2000598c
 800632c:	20005982 	.word	0x20005982
 8006330:	20005980 	.word	0x20005980
 8006334:	20005988 	.word	0x20005988

08006338 <SYSTEM_DEBUG_SIGNAL_SET>:
void SYSTEM_DEBUG_SIGNAL_SET(system_debug_signal_t signal)
{
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, system_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop

0800633c <SYSTEM_DEBUG_SIGNAL_RESET>:

void SYSTEM_DEBUG_SIGNAL_RESET(system_debug_signal_t signal)
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <LINKLAYER_DEBUG_SIGNAL_SET>:
/***************************/
/** Link Layer debug APIs **/
/***************************/

/* Link Layer debug API definition */
void LINKLAYER_DEBUG_SIGNAL_SET(linklayer_debug_signal_t signal)
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop

08006344 <LINKLAYER_DEBUG_SIGNAL_RESET>:
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, linklayer_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}

void LINKLAYER_DEBUG_SIGNAL_RESET(linklayer_debug_signal_t signal)
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop

08006348 <LINKLAYER_DEBUG_SIGNAL_TOGGLE>:
#if(CFG_RT_DEBUG_GPIO_MODULE == 1)
   GENERIC_DEBUG_GPIO_RESET(signal, linklayer_debug_table);
#endif /* CFG_RT_DEBUG_GPIO_MODULE */
}

void LINKLAYER_DEBUG_SIGNAL_TOGGLE(linklayer_debug_signal_t signal)
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop

0800634c <UART_Rx_Callback>:

/* USER CODE END FD */

/* Private functions definition ----------------------------------------------*/
static void UART_Rx_Callback(uint8_t *PData, uint16_t Size, uint8_t Error)
{
 800634c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN UART_Rx_Callback_0 */

  /* USER CODE END UART_Rx_Callback_0 */

  /* Filling buffer and wait for '\r' charactere to execute actions */
  if (indexRxBuffer < RX_BUFF_SIZE)
 800634e:	4c1c      	ldr	r4, [pc, #112]	@ (80063c0 <UART_Rx_Callback+0x74>)
 8006350:	8823      	ldrh	r3, [r4, #0]
 8006352:	2bff      	cmp	r3, #255	@ 0xff
 8006354:	d81e      	bhi.n	8006394 <UART_Rx_Callback+0x48>
  {
    if (*PData == '\r')
 8006356:	7802      	ldrb	r2, [r0, #0]
 8006358:	2a0d      	cmp	r2, #13
 800635a:	d006      	beq.n	800636a <UART_Rx_Callback+0x1e>
      indexRxBuffer = 0;
      memset( &RxBuffer[0], 0, RX_BUFF_SIZE );
    }
    else
    {
      if ( ( *PData == '\n' ) && ( indexRxBuffer == 0 ) )
 800635c:	2a0a      	cmp	r2, #10
 800635e:	d022      	beq.n	80063a6 <UART_Rx_Callback+0x5a>
      {
        /* discard this first charactere if it's a delimiter  */
      }
      else
      {
        RxBuffer[indexRxBuffer++] = *PData;
 8006360:	4918      	ldr	r1, [pc, #96]	@ (80063c4 <UART_Rx_Callback+0x78>)
 8006362:	1c58      	adds	r0, r3, #1
 8006364:	54ca      	strb	r2, [r1, r3]
 8006366:	8020      	strh	r0, [r4, #0]
  return;

  /* USER CODE BEGIN UART_Rx_Callback_1 */

  /* USER CODE END UART_Rx_Callback_1 */
}
 8006368:	bd38      	pop	{r3, r4, r5, pc}

  /* USER CODE BEGIN Uart_Cmd_Execute */
  Button_TypeDef      eButton;

  /* Parse received frame */
  if ( strcmp((char const*)RxBuffer, "SW1") == 0 )
 800636a:	4b16      	ldr	r3, [pc, #88]	@ (80063c4 <UART_Rx_Callback+0x78>)
 800636c:	4916      	ldr	r1, [pc, #88]	@ (80063c8 <UART_Rx_Callback+0x7c>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	428a      	cmp	r2, r1
 8006372:	d021      	beq.n	80063b8 <UART_Rx_Callback+0x6c>
  {
    eButton = B1;
  }
  else if ( strcmp( (char const*)RxBuffer, "SW2" ) == 0 )
 8006374:	4915      	ldr	r1, [pc, #84]	@ (80063cc <UART_Rx_Callback+0x80>)
 8006376:	428a      	cmp	r2, r1
 8006378:	d020      	beq.n	80063bc <UART_Rx_Callback+0x70>
  {
    eButton = B2;
  }
  else if ( strcmp( (char const*)RxBuffer, "SW3" ) == 0 )
 800637a:	4915      	ldr	r1, [pc, #84]	@ (80063d0 <UART_Rx_Callback+0x84>)
 800637c:	428a      	cmp	r2, r1
 800637e:	d115      	bne.n	80063ac <UART_Rx_Callback+0x60>
  {
    eButton = B3;
 8006380:	2502      	movs	r5, #2
    LOG_INFO_APP( "NOT RECOGNIZED COMMAND : %s\n", RxBuffer );
    return;
  }

  /* Launch SW Command */
  LOG_INFO_APP( "%s pressed by Command.\n", RxBuffer );
 8006382:	2000      	movs	r0, #0
 8006384:	2102      	movs	r1, #2
 8006386:	4b0f      	ldr	r3, [pc, #60]	@ (80063c4 <UART_Rx_Callback+0x78>)
 8006388:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <UART_Rx_Callback+0x88>)
 800638a:	f7fc fb41 	bl	8002a10 <Log_Module_Print>
  BSP_PB_Callback( eButton );
 800638e:	4628      	mov	r0, r5
 8006390:	f7fa fa26 	bl	80007e0 <BSP_PB_Callback>
      indexRxBuffer = 0;
 8006394:	2100      	movs	r1, #0
      memset( &RxBuffer[0], 0, RX_BUFF_SIZE );
 8006396:	f44f 7280 	mov.w	r2, #256	@ 0x100
      indexRxBuffer = 0;
 800639a:	8021      	strh	r1, [r4, #0]
      memset( &RxBuffer[0], 0, RX_BUFF_SIZE );
 800639c:	4809      	ldr	r0, [pc, #36]	@ (80063c4 <UART_Rx_Callback+0x78>)
}
 800639e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      memset( &RxBuffer[0], 0, RX_BUFF_SIZE );
 80063a2:	f025 baa9 	b.w	802b8f8 <memset>
      if ( ( *PData == '\n' ) && ( indexRxBuffer == 0 ) )
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1da      	bne.n	8006360 <UART_Rx_Callback+0x14>
}
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
    LOG_INFO_APP( "NOT RECOGNIZED COMMAND : %s\n", RxBuffer );
 80063ac:	2102      	movs	r1, #2
 80063ae:	2000      	movs	r0, #0
 80063b0:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <UART_Rx_Callback+0x8c>)
 80063b2:	f7fc fb2d 	bl	8002a10 <Log_Module_Print>
    return;
 80063b6:	e7ed      	b.n	8006394 <UART_Rx_Callback+0x48>
    eButton = B1;
 80063b8:	2500      	movs	r5, #0
 80063ba:	e7e2      	b.n	8006382 <UART_Rx_Callback+0x36>
    eButton = B2;
 80063bc:	2501      	movs	r5, #1
 80063be:	e7e0      	b.n	8006382 <UART_Rx_Callback+0x36>
 80063c0:	20005990 	.word	0x20005990
 80063c4:	20005994 	.word	0x20005994
 80063c8:	00315753 	.word	0x00315753
 80063cc:	00325753 	.word	0x00325753
 80063d0:	00335753 	.word	0x00335753
 80063d4:	0802e074 	.word	0x0802e074
 80063d8:	0802e054 	.word	0x0802e054

080063dc <Serial_CMD_Interpreter_Init>:
  UTIL_ADV_TRACE_StartRxProcess(UART_Rx_Callback);
 80063dc:	4801      	ldr	r0, [pc, #4]	@ (80063e4 <Serial_CMD_Interpreter_Init+0x8>)
 80063de:	f005 bd9d 	b.w	800bf1c <UTIL_ADV_TRACE_StartRxProcess>
 80063e2:	bf00      	nop
 80063e4:	0800634d 	.word	0x0800634d

080063e8 <ADCCTRL_RequestIpState>:
  return error;
}

__WEAK ADCCTRL_Cmd_Status_t ADCCTRL_RequestIpState (const ADCCTRL_Handle_t * const p_Handle,
                                                    const ADCCTRL_Ip_State_t State)
{
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80063ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80063f0:	b672      	cpsid	i
  ADCCTRL_Cmd_Status_t error = ADCCTRL_UNKNOWN;

  UTILS_ENTER_CRITICAL_SECTION();

  if (ADC_OFF == State)
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d140      	bne.n	8006478 <ADCCTRL_RequestIpState+0x90>
  {
    ClientList &= (~(1U << p_Handle->Uid));
 80063f6:	2201      	movs	r2, #1
 80063f8:	4e51      	ldr	r6, [pc, #324]	@ (8006540 <ADCCTRL_RequestIpState+0x158>)
 80063fa:	6800      	ldr	r0, [r0, #0]
 80063fc:	6833      	ldr	r3, [r6, #0]
 80063fe:	4082      	lsls	r2, r0
 8006400:	ea23 0302 	bic.w	r3, r3, r2

    error = ADCCTRL_OK;
 8006404:	460d      	mov	r5, r1
    ClientList &= (~(1U << p_Handle->Uid));
 8006406:	6033      	str	r3, [r6, #0]
  else
  {
    error = ADCCTRL_ERROR_STATE;
  }

  if (0x00u == ClientList)
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13e      	bne.n	800648a <ADCCTRL_RequestIpState+0xa2>
  SYSTEM_DEBUG_SIGNAL_RESET(ADC_ACTIVATION);
}

void AdcDeactivate (void)
{
  SYSTEM_DEBUG_SIGNAL_SET(ADC_DEACTIVATION);
 800640c:	2001      	movs	r0, #1
 800640e:	f7ff ff93 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006412:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006416:	b672      	cpsid	i
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006418:	4a4a      	ldr	r2, [pc, #296]	@ (8006544 <ADCCTRL_RequestIpState+0x15c>)
 800641a:	6893      	ldr	r3, [r2, #8]
 800641c:	07de      	lsls	r6, r3, #31
 800641e:	d521      	bpl.n	8006464 <ADCCTRL_RequestIpState+0x7c>
  MODIFY_REG(ADCx->CR,
 8006420:	6893      	ldr	r3, [r2, #8]
 8006422:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006426:	f023 0317 	bic.w	r3, r3, #23
 800642a:	f043 0302 	orr.w	r3, r3, #2
 800642e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 8006430:	2301      	movs	r3, #1
 8006432:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006434:	6893      	ldr	r3, [r2, #8]
 8006436:	07d8      	lsls	r0, r3, #31
 8006438:	d4fc      	bmi.n	8006434 <ADCCTRL_RequestIpState+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
 800643a:	4a42      	ldr	r2, [pc, #264]	@ (8006544 <ADCCTRL_RequestIpState+0x15c>)
 800643c:	6893      	ldr	r3, [r2, #8]
 800643e:	06db      	lsls	r3, r3, #27
 8006440:	d4fc      	bmi.n	800643c <ADCCTRL_RequestIpState+0x54>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8006442:	6893      	ldr	r3, [r2, #8]
 8006444:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006448:	f023 0317 	bic.w	r3, r3, #23
 800644c:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800644e:	4a3d      	ldr	r2, [pc, #244]	@ (8006544 <ADCCTRL_RequestIpState+0x15c>)
 8006450:	6893      	ldr	r3, [r2, #8]
 8006452:	00de      	lsls	r6, r3, #3
 8006454:	d4fc      	bmi.n	8006450 <ADCCTRL_RequestIpState+0x68>
  *         @arg @ref LL_AHB4_GRP1_PERIPH_ADC4
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB4ENR, Periphs);
 8006456:	4a3c      	ldr	r2, [pc, #240]	@ (8006548 <ADCCTRL_RequestIpState+0x160>)
 8006458:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800645c:	f023 0320 	bic.w	r3, r3, #32
 8006460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006464:	f381 8810 	msr	PRIMASK, r1
    ADCCTRL_DISABLE_CLOCK ();
  }

  UTILS_EXIT_CRITICAL_SECTION();

  SYSTEM_DEBUG_SIGNAL_RESET(ADC_DEACTIVATION);
 8006468:	2001      	movs	r0, #1
 800646a:	f7ff ff67 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
 800646e:	f384 8810 	msr	PRIMASK, r4
}
 8006472:	4628      	mov	r0, r5
 8006474:	b002      	add	sp, #8
 8006476:	bd70      	pop	{r4, r5, r6, pc}
    ClientList &= (~(1U << p_Handle->Uid));
 8006478:	4a31      	ldr	r2, [pc, #196]	@ (8006540 <ADCCTRL_RequestIpState+0x158>)
  else if (ADC_ON == State)
 800647a:	2901      	cmp	r1, #1
    ClientList &= (~(1U << p_Handle->Uid));
 800647c:	6813      	ldr	r3, [r2, #0]
  else if (ADC_ON == State)
 800647e:	d159      	bne.n	8006534 <ADCCTRL_RequestIpState+0x14c>
    error = ADCCTRL_OK;
 8006480:	2500      	movs	r5, #0
    ClientList |= (1U << p_Handle->Uid);
 8006482:	6800      	ldr	r0, [r0, #0]
 8006484:	4081      	lsls	r1, r0
 8006486:	4319      	orrs	r1, r3
 8006488:	6011      	str	r1, [r2, #0]
  __IO uint32_t backup_setting_adc_dma_transfer = 0U;
 800648a:	2000      	movs	r0, #0
 800648c:	9000      	str	r0, [sp, #0]
  SYSTEM_DEBUG_SIGNAL_SET(ADC_ACTIVATION);
 800648e:	f7ff ff53 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006492:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006496:	b672      	cpsid	i
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006498:	4b2a      	ldr	r3, [pc, #168]	@ (8006544 <ADCCTRL_RequestIpState+0x15c>)
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	07d0      	lsls	r0, r2, #31
 800649e:	d43f      	bmi.n	8006520 <ADCCTRL_RequestIpState+0x138>
  SET_BIT(RCC->AHB4ENR, Periphs);
 80064a0:	4a29      	ldr	r2, [pc, #164]	@ (8006548 <ADCCTRL_RequestIpState+0x160>)
 80064a2:	f8d2 0094 	ldr.w	r0, [r2, #148]	@ 0x94
 80064a6:	f040 0020 	orr.w	r0, r0, #32
 80064aa:	f8c2 0094 	str.w	r0, [r2, #148]	@ 0x94
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80064ae:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 80064b2:	f002 0220 	and.w	r2, r2, #32
 80064b6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80064b8:	9a01      	ldr	r2, [sp, #4]
  MODIFY_REG(ADCx->CR,
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 80064c0:	f022 0217 	bic.w	r2, r2, #23
 80064c4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80064c8:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	00d2      	lsls	r2, r2, #3
 80064ce:	d5fc      	bpl.n	80064ca <ADCCTRL_RequestIpState+0xe2>
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	f002 0203 	and.w	r2, r2, #3
    backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADCCTRL_HWADDR);
 80064d6:	9200      	str	r2, [sp, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	f022 0203 	bic.w	r2, r2, #3
 80064de:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CR,
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80064e6:	f022 0217 	bic.w	r2, r2, #23
 80064ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80064ee:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80064f0:	4a14      	ldr	r2, [pc, #80]	@ (8006544 <ADCCTRL_RequestIpState+0x15c>)
 80064f2:	6893      	ldr	r3, [r2, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dbfc      	blt.n	80064f2 <ADCCTRL_RequestIpState+0x10a>
    LL_ADC_REG_SetDMATransfer(ADCCTRL_HWADDR, backup_setting_adc_dma_transfer);
 80064f8:	9800      	ldr	r0, [sp, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 80064fa:	68d3      	ldr	r3, [r2, #12]
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	4303      	orrs	r3, r0
 8006502:	60d3      	str	r3, [r2, #12]
    __asm("mov r0, r0");
 8006504:	4600      	mov	r0, r0
    __asm("mov r0, r0");
 8006506:	4600      	mov	r0, r0
  MODIFY_REG(ADCx->CR,
 8006508:	6893      	ldr	r3, [r2, #8]
 800650a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800650e:	f023 0317 	bic.w	r3, r3, #23
 8006512:	f043 0301 	orr.w	r3, r3, #1
 8006516:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006518:	4a0a      	ldr	r2, [pc, #40]	@ (8006544 <ADCCTRL_RequestIpState+0x15c>)
 800651a:	6813      	ldr	r3, [r2, #0]
 800651c:	07db      	lsls	r3, r3, #31
 800651e:	d5fc      	bpl.n	800651a <ADCCTRL_RequestIpState+0x132>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006520:	f381 8810 	msr	PRIMASK, r1
  SYSTEM_DEBUG_SIGNAL_RESET(ADC_ACTIVATION);
 8006524:	2000      	movs	r0, #0
 8006526:	f7ff ff09 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
 800652a:	f384 8810 	msr	PRIMASK, r4
}
 800652e:	4628      	mov	r0, r5
 8006530:	b002      	add	sp, #8
 8006532:	bd70      	pop	{r4, r5, r6, pc}
    error = ADCCTRL_ERROR_STATE;
 8006534:	2508      	movs	r5, #8
  if (0x00u == ClientList)
 8006536:	2b00      	cmp	r3, #0
 8006538:	f43f af68 	beq.w	800640c <ADCCTRL_RequestIpState+0x24>
 800653c:	e7a5      	b.n	800648a <ADCCTRL_RequestIpState+0xa2>
 800653e:	bf00      	nop
 8006540:	20005a9c 	.word	0x20005a9c
 8006544:	46021000 	.word	0x46021000
 8006548:	46020c00 	.word	0x46020c00

0800654c <ADCCTRL_MutexTake>:

/* Weak function Definition --------------------------------------------------*/
__WEAK ADCCTRL_Cmd_Status_t ADCCTRL_MutexTake (void)
{
  return ADCCTRL_OK;
}
 800654c:	2000      	movs	r0, #0
 800654e:	4770      	bx	lr

08006550 <ADCCTRL_MutexRelease>:

__WEAK ADCCTRL_Cmd_Status_t ADCCTRL_MutexRelease (void)
 8006550:	2000      	movs	r0, #0
 8006552:	4770      	bx	lr

08006554 <ADCCTRL_Init>:
{
 8006554:	b538      	push	{r3, r4, r5, lr}
  error = ADCCTRL_MutexTake ();
 8006556:	f7ff fff9 	bl	800654c <ADCCTRL_MutexTake>
  if (ADCCTRL_OK == error)
 800655a:	4604      	mov	r4, r0
 800655c:	b108      	cbz	r0, 8006562 <ADCCTRL_Init+0xe>
}
 800655e:	4620      	mov	r0, r4
 8006560:	bd38      	pop	{r3, r4, r5, pc}
    ADCHandle.State = HAL_ADC_STATE_RESET;
 8006562:	4b1e      	ldr	r3, [pc, #120]	@ (80065dc <ADCCTRL_Init+0x88>)
    CurrentConfig = ADCCTRL_NO_CONFIG;
 8006564:	491e      	ldr	r1, [pc, #120]	@ (80065e0 <ADCCTRL_Init+0x8c>)
    ClientList = 0x00u;
 8006566:	4a1f      	ldr	r2, [pc, #124]	@ (80065e4 <ADCCTRL_Init+0x90>)
    ADCHandle.Instance = ADCCTRL_HWADDR;
 8006568:	4d1f      	ldr	r5, [pc, #124]	@ (80065e8 <ADCCTRL_Init+0x94>)
    CurrentConfig = ADCCTRL_NO_CONFIG;
 800656a:	6008      	str	r0, [r1, #0]
    ADCHandle.State = HAL_ADC_STATE_RESET;
 800656c:	6618      	str	r0, [r3, #96]	@ 0x60
  SYSTEM_DEBUG_SIGNAL_SET(ADC_DEACTIVATION);
 800656e:	2001      	movs	r0, #1
    ADCHandle.Instance = ADCCTRL_HWADDR;
 8006570:	601d      	str	r5, [r3, #0]
    ClientList = 0x00u;
 8006572:	6014      	str	r4, [r2, #0]
  SYSTEM_DEBUG_SIGNAL_SET(ADC_DEACTIVATION);
 8006574:	f7ff fee0 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006578:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800657c:	b672      	cpsid	i
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800657e:	68ab      	ldr	r3, [r5, #8]
 8006580:	07da      	lsls	r2, r3, #31
 8006582:	d521      	bpl.n	80065c8 <ADCCTRL_Init+0x74>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 8006584:	2201      	movs	r2, #1
  MODIFY_REG(ADCx->CR,
 8006586:	68ab      	ldr	r3, [r5, #8]
 8006588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800658c:	f023 0317 	bic.w	r3, r3, #23
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	60ab      	str	r3, [r5, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
 8006596:	602a      	str	r2, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006598:	68ab      	ldr	r3, [r5, #8]
 800659a:	07db      	lsls	r3, r3, #31
 800659c:	d4fc      	bmi.n	8006598 <ADCCTRL_Init+0x44>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
 800659e:	4a12      	ldr	r2, [pc, #72]	@ (80065e8 <ADCCTRL_Init+0x94>)
 80065a0:	6893      	ldr	r3, [r2, #8]
 80065a2:	06d9      	lsls	r1, r3, #27
 80065a4:	d4fc      	bmi.n	80065a0 <ADCCTRL_Init+0x4c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80065a6:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065a8:	490f      	ldr	r1, [pc, #60]	@ (80065e8 <ADCCTRL_Init+0x94>)
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80065aa:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80065ae:	f023 0317 	bic.w	r3, r3, #23
 80065b2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065b4:	688b      	ldr	r3, [r1, #8]
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	d4fc      	bmi.n	80065b4 <ADCCTRL_Init+0x60>
  CLEAR_BIT(RCC->AHB4ENR, Periphs);
 80065ba:	4a0c      	ldr	r2, [pc, #48]	@ (80065ec <ADCCTRL_Init+0x98>)
 80065bc:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80065c0:	f023 0320 	bic.w	r3, r3, #32
 80065c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c8:	f380 8810 	msr	PRIMASK, r0
  SYSTEM_DEBUG_SIGNAL_RESET(ADC_DEACTIVATION);
 80065cc:	2001      	movs	r0, #1
 80065ce:	f7ff feb5 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
    ADCCTRL_MutexRelease ();
 80065d2:	f7ff ffbd 	bl	8006550 <ADCCTRL_MutexRelease>
}
 80065d6:	4620      	mov	r0, r4
 80065d8:	bd38      	pop	{r3, r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	20000100 	.word	0x20000100
 80065e0:	20005a98 	.word	0x20005a98
 80065e4:	20005a9c 	.word	0x20005a9c
 80065e8:	46021000 	.word	0x46021000
 80065ec:	46020c00 	.word	0x46020c00

080065f0 <ADCCTRL_RegisterHandle>:
{
 80065f0:	b538      	push	{r3, r4, r5, lr}
  if (NULL == p_Handle)
 80065f2:	b1b8      	cbz	r0, 8006624 <ADCCTRL_RegisterHandle+0x34>
  else if (ADCCTRL_HANDLE_REG == p_Handle->State)
 80065f4:	7903      	ldrb	r3, [r0, #4]
 80065f6:	4604      	mov	r4, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d005      	beq.n	8006608 <ADCCTRL_RegisterHandle+0x18>
    error = ADCCTRL_MutexTake ();
 80065fc:	f7ff ffa6 	bl	800654c <ADCCTRL_MutexTake>
    if (ADCCTRL_OK == error)
 8006600:	4605      	mov	r5, r0
 8006602:	b120      	cbz	r0, 800660e <ADCCTRL_RegisterHandle+0x1e>
}
 8006604:	4628      	mov	r0, r5
 8006606:	bd38      	pop	{r3, r4, r5, pc}
    error = ADCCTRL_HANDLE_ALREADY_REGISTERED;
 8006608:	2503      	movs	r5, #3
}
 800660a:	4628      	mov	r0, r5
 800660c:	bd38      	pop	{r3, r4, r5, pc}
      p_Handle->State = ADCCTRL_HANDLE_REG;
 800660e:	2101      	movs	r1, #1
      MaxRegisteredId = MaxRegisteredId + 1u;
 8006610:	4a06      	ldr	r2, [pc, #24]	@ (800662c <ADCCTRL_RegisterHandle+0x3c>)
      p_Handle->State = ADCCTRL_HANDLE_REG;
 8006612:	7121      	strb	r1, [r4, #4]
      MaxRegisteredId = MaxRegisteredId + 1u;
 8006614:	6813      	ldr	r3, [r2, #0]
 8006616:	440b      	add	r3, r1
      p_Handle->Uid = MaxRegisteredId;
 8006618:	6023      	str	r3, [r4, #0]
      MaxRegisteredId = MaxRegisteredId + 1u;
 800661a:	6013      	str	r3, [r2, #0]
      ADCCTRL_MutexRelease ();
 800661c:	f7ff ff98 	bl	8006550 <ADCCTRL_MutexRelease>
}
 8006620:	4628      	mov	r0, r5
 8006622:	bd38      	pop	{r3, r4, r5, pc}
    error = ADCCTRL_ERROR_NULL_POINTER;
 8006624:	2506      	movs	r5, #6
}
 8006626:	4628      	mov	r0, r5
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	bf00      	nop
 800662c:	20005a94 	.word	0x20005a94

08006630 <ADCCTRL_RequestTemperature>:
{
 8006630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t uhADCxConvertedData = 0x00;
 8006634:	2300      	movs	r3, #0
{
 8006636:	4604      	mov	r4, r0
 8006638:	b082      	sub	sp, #8
  SYSTEM_DEBUG_SIGNAL_SET(ADC_TEMPERATURE_ACQUISITION);
 800663a:	2002      	movs	r0, #2
{
 800663c:	460e      	mov	r6, r1
  __IO uint16_t uhADCxConvertedData = 0x00;
 800663e:	f8ad 3004 	strh.w	r3, [sp, #4]
  SYSTEM_DEBUG_SIGNAL_SET(ADC_TEMPERATURE_ACQUISITION);
 8006642:	f7ff fe79 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  if ((NULL == p_Handle) || (NULL == p_ReadValue))
 8006646:	2c00      	cmp	r4, #0
 8006648:	d078      	beq.n	800673c <ADCCTRL_RequestTemperature+0x10c>
 800664a:	2e00      	cmp	r6, #0
 800664c:	d076      	beq.n	800673c <ADCCTRL_RequestTemperature+0x10c>
  else if (ADCCTRL_HANDLE_NOT_REG == p_Handle->State)
 800664e:	7923      	ldrb	r3, [r4, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d069      	beq.n	8006728 <ADCCTRL_RequestTemperature+0xf8>
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 8006654:	4a7d      	ldr	r2, [pc, #500]	@ (800684c <ADCCTRL_RequestTemperature+0x21c>)
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	4293      	cmp	r3, r2
 800665c:	d869      	bhi.n	8006732 <ADCCTRL_RequestTemperature+0x102>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d067      	beq.n	8006732 <ADCCTRL_RequestTemperature+0x102>
  else if (0x00u == (ClientList & (1U << p_Handle->Uid)))
 8006662:	2201      	movs	r2, #1
 8006664:	497a      	ldr	r1, [pc, #488]	@ (8006850 <ADCCTRL_RequestTemperature+0x220>)
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	6809      	ldr	r1, [r1, #0]
 800666c:	420b      	tst	r3, r1
 800666e:	d06a      	beq.n	8006746 <ADCCTRL_RequestTemperature+0x116>
    error = ADCCTRL_MutexTake ();
 8006670:	f7ff ff6c 	bl	800654c <ADCCTRL_MutexTake>
    if (ADCCTRL_OK == error)
 8006674:	4605      	mov	r5, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	d157      	bne.n	800672a <ADCCTRL_RequestTemperature+0xfa>
      if (CurrentConfig != p_Handle->Uid)
 800667a:	f8df 81f0 	ldr.w	r8, [pc, #496]	@ 800686c <ADCCTRL_RequestTemperature+0x23c>
 800667e:	6822      	ldr	r2, [r4, #0]
 8006680:	f8d8 3000 	ldr.w	r3, [r8]
 8006684:	429a      	cmp	r2, r3
 8006686:	d028      	beq.n	80066da <ADCCTRL_RequestTemperature+0xaa>
  if (HAL_ADC_STATE_RESET != ADCHandle.State)
 8006688:	4872      	ldr	r0, [pc, #456]	@ (8006854 <ADCCTRL_RequestTemperature+0x224>)
 800668a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800668c:	b123      	cbz	r3, 8006698 <ADCCTRL_RequestTemperature+0x68>
    error = HAL_ADC_DeInit(&ADCHandle);
 800668e:	f001 fd6d 	bl	800816c <HAL_ADC_DeInit>
  if (HAL_OK == error)
 8006692:	2800      	cmp	r0, #0
 8006694:	f040 80af 	bne.w	80067f6 <ADCCTRL_RequestTemperature+0x1c6>
    memcpy ((void *)&ADCHandle.Init,
 8006698:	2254      	movs	r2, #84	@ 0x54
 800669a:	f104 0108 	add.w	r1, r4, #8
 800669e:	486e      	ldr	r0, [pc, #440]	@ (8006858 <ADCCTRL_RequestTemperature+0x228>)
 80066a0:	f025 f961 	bl	802b966 <memcpy>
    error = HAL_ADC_Init(&ADCHandle);
 80066a4:	486b      	ldr	r0, [pc, #428]	@ (8006854 <ADCCTRL_RequestTemperature+0x224>)
 80066a6:	f001 fb1f 	bl	8007ce8 <HAL_ADC_Init>
    if (HAL_OK == error)
 80066aa:	4607      	mov	r7, r0
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f040 809d 	bne.w	80067ec <ADCCTRL_RequestTemperature+0x1bc>
      error = HAL_ADC_ConfigChannel(&ADCHandle,
 80066b2:	4868      	ldr	r0, [pc, #416]	@ (8006854 <ADCCTRL_RequestTemperature+0x224>)
 80066b4:	f104 015c 	add.w	r1, r4, #92	@ 0x5c
 80066b8:	f001 fc22 	bl	8007f00 <HAL_ADC_ConfigChannel>
      if (HAL_OK == error)
 80066bc:	2800      	cmp	r0, #0
 80066be:	f040 80c2 	bne.w	8006846 <ADCCTRL_RequestTemperature+0x216>
        CurrentConfig = p_Handle->Uid;
 80066c2:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80066c4:	4a65      	ldr	r2, [pc, #404]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 80066c6:	f8c8 3000 	str.w	r3, [r8]
 80066ca:	6893      	ldr	r3, [r2, #8]
 80066cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066d0:	f023 0317 	bic.w	r3, r3, #23
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	6093      	str	r3, [r2, #8]
  __IO uint16_t uhADCxConvertedData = 0x00;
 80066da:	2200      	movs	r2, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066dc:	4b5f      	ldr	r3, [pc, #380]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 80066de:	f8ad 2006 	strh.w	r2, [sp, #6]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	07d0      	lsls	r0, r2, #31
 80066e6:	d57e      	bpl.n	80067e6 <ADCCTRL_RequestTemperature+0x1b6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	0791      	lsls	r1, r2, #30
 80066ec:	d47b      	bmi.n	80067e6 <ADCCTRL_RequestTemperature+0x1b6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	0752      	lsls	r2, r2, #29
 80066f2:	d478      	bmi.n	80067e6 <ADCCTRL_RequestTemperature+0x1b6>
  MODIFY_REG(ADCx->CR,
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066fa:	f022 0217 	bic.w	r2, r2, #23
 80066fe:	f042 0204 	orr.w	r2, r2, #4
 8006702:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8006704:	4a55      	ldr	r2, [pc, #340]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	075b      	lsls	r3, r3, #29
 800670a:	d5fc      	bpl.n	8006706 <ADCCTRL_RequestTemperature+0xd6>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800670c:	2304      	movs	r3, #4
 800670e:	6013      	str	r3, [r2, #0]
  switch (p_Handle->InitConf.Resolution)
 8006710:	68e3      	ldr	r3, [r4, #12]
 8006712:	2b0c      	cmp	r3, #12
 8006714:	d822      	bhi.n	800675c <ADCCTRL_RequestTemperature+0x12c>
 8006716:	e8df f003 	tbb	[pc, r3]
 800671a:	215b      	.short	0x215b
 800671c:	21502121 	.word	0x21502121
 8006720:	21182121 	.word	0x21182121
 8006724:	2121      	.short	0x2121
 8006726:	46          	.byte	0x46
 8006727:	00          	.byte	0x00
    error = ADCCTRL_HANDLE_NOT_REGISTERED;
 8006728:	2504      	movs	r5, #4
}
 800672a:	4628      	mov	r0, r5
 800672c:	b002      	add	sp, #8
 800672e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error = ADCCTRL_HANDLE_NOT_VALID;
 8006732:	2505      	movs	r5, #5
}
 8006734:	4628      	mov	r0, r5
 8006736:	b002      	add	sp, #8
 8006738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error = ADCCTRL_ERROR_NULL_POINTER;
 800673c:	2506      	movs	r5, #6
}
 800673e:	4628      	mov	r0, r5
 8006740:	b002      	add	sp, #8
 8006742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error = ADCCTRL_ERROR_STATE;
 8006746:	2508      	movs	r5, #8
 8006748:	e7ef      	b.n	800672a <ADCCTRL_RequestTemperature+0xfa>
      uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE_8B;
 800674a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x000000FFUL);
 800674e:	4a43      	ldr	r2, [pc, #268]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 8006750:	f8ad 1006 	strh.w	r1, [sp, #6]
 8006754:	6c12      	ldr	r2, [r2, #64]	@ 0x40
      uhADCxConvertedData = LL_ADC_REG_ReadConversionData8(ADCCTRL_HWADDR);
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	f8ad 2006 	strh.w	r2, [sp, #6]
  return uhADCxConvertedData;
 800675c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if(*TEMPSENSOR_CAL1_ADDR == *TEMPSENSOR_CAL2_ADDR)
 8006760:	483f      	ldr	r0, [pc, #252]	@ (8006860 <ADCCTRL_RequestTemperature+0x230>)
  return uhADCxConvertedData;
 8006762:	b292      	uxth	r2, r2
        uhADCxConvertedData = AdcReadRaw (p_Handle);
 8006764:	f8ad 2004 	strh.w	r2, [sp, #4]
        if(*TEMPSENSOR_CAL1_ADDR == *TEMPSENSOR_CAL2_ADDR)
 8006768:	f8b0 2042 	ldrh.w	r2, [r0, #66]	@ 0x42
          *p_ReadValue = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS (TEMPSENSOR_TYP_AVGSLOPE,
 800676c:	0859      	lsrs	r1, r3, #1
        if(*TEMPSENSOR_CAL1_ADDR == *TEMPSENSOR_CAL2_ADDR)
 800676e:	8a03      	ldrh	r3, [r0, #16]
 8006770:	4293      	cmp	r3, r2
 8006772:	d04b      	beq.n	800680c <ADCCTRL_RequestTemperature+0x1dc>
          *p_ReadValue = __LL_ADC_CALC_TEMPERATURE (VDDA_APPLI,
 8006774:	f640 47e4 	movw	r7, #3300	@ 0xce4
 8006778:	2464      	movs	r4, #100	@ 0x64
 800677a:	1ad0      	subs	r0, r2, r3
 800677c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006780:	b292      	uxth	r2, r2
 8006782:	408a      	lsls	r2, r1
 8006784:	fb07 f202 	mul.w	r2, r7, r2
 8006788:	4936      	ldr	r1, [pc, #216]	@ (8006864 <ADCCTRL_RequestTemperature+0x234>)
 800678a:	fba1 1202 	umull	r1, r2, r1, r2
 800678e:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
 8006792:	fb04 f303 	mul.w	r3, r4, r3
 8006796:	fb93 f3f0 	sdiv	r3, r3, r0
 800679a:	331e      	adds	r3, #30
 800679c:	b29b      	uxth	r3, r3
          *p_ReadValue = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS (TEMPSENSOR_TYP_AVGSLOPE,
 800679e:	8033      	strh	r3, [r6, #0]
      ADCCTRL_MutexRelease ();
 80067a0:	f7ff fed6 	bl	8006550 <ADCCTRL_MutexRelease>
 80067a4:	e7c1      	b.n	800672a <ADCCTRL_RequestTemperature+0xfa>
      uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE_6B;
 80067a6:	2140      	movs	r1, #64	@ 0x40
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x0000003FUL);
 80067a8:	4a2c      	ldr	r2, [pc, #176]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 80067aa:	f8ad 1006 	strh.w	r1, [sp, #6]
 80067ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
      uhADCxConvertedData = LL_ADC_REG_ReadConversionData6(ADCCTRL_HWADDR);
 80067b0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80067b4:	f8ad 2006 	strh.w	r2, [sp, #6]
      break;
 80067b8:	e7d0      	b.n	800675c <ADCCTRL_RequestTemperature+0x12c>
      uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE_10B;
 80067ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x000003FFUL);
 80067be:	4a27      	ldr	r2, [pc, #156]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 80067c0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80067c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80067c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
      uhADCxConvertedData = LL_ADC_REG_ReadConversionData10(ADCCTRL_HWADDR);
 80067ca:	f8ad 2006 	strh.w	r2, [sp, #6]
      break;
 80067ce:	e7c5      	b.n	800675c <ADCCTRL_RequestTemperature+0x12c>
      uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE_12B;
 80067d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 80067d4:	4a21      	ldr	r2, [pc, #132]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
 80067d6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80067da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80067dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
      uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADCCTRL_HWADDR);
 80067e0:	f8ad 2006 	strh.w	r2, [sp, #6]
      break;
 80067e4:	e7ba      	b.n	800675c <ADCCTRL_RequestTemperature+0x12c>
    Error_Handler();
 80067e6:	f7fa f999 	bl	8000b1c <Error_Handler>
 80067ea:	e78b      	b.n	8006704 <ADCCTRL_RequestTemperature+0xd4>
      memset ((void *)(&ADCHandle.Init),
 80067ec:	2254      	movs	r2, #84	@ 0x54
 80067ee:	2100      	movs	r1, #0
        memset ((void *)(&ADCHandle.Init),
 80067f0:	4819      	ldr	r0, [pc, #100]	@ (8006858 <ADCCTRL_RequestTemperature+0x228>)
 80067f2:	f025 f881 	bl	802b8f8 <memset>
  MODIFY_REG(ADCx->CR,
 80067f6:	4a19      	ldr	r2, [pc, #100]	@ (800685c <ADCCTRL_RequestTemperature+0x22c>)
        error = ADCCTRL_ERROR_CONFIG;
 80067f8:	2507      	movs	r5, #7
 80067fa:	6893      	ldr	r3, [r2, #8]
 80067fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006800:	f023 0317 	bic.w	r3, r3, #23
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6093      	str	r3, [r2, #8]
      if (eReturn == HAL_OK)
 800680a:	e7c9      	b.n	80067a0 <ADCCTRL_RequestTemperature+0x170>
          *p_ReadValue = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS (TEMPSENSOR_TYP_AVGSLOPE,
 800680c:	f640 40e4 	movw	r0, #3300	@ 0xce4
 8006810:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8006814:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006818:	40ca      	lsrs	r2, r1
 800681a:	b29b      	uxth	r3, r3
 800681c:	fb00 f303 	mul.w	r3, r0, r3
 8006820:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006824:	fbb3 f3f2 	udiv	r3, r3, r2
 8006828:	fb01 f303 	mul.w	r3, r1, r3
 800682c:	4a0e      	ldr	r2, [pc, #56]	@ (8006868 <ADCCTRL_RequestTemperature+0x238>)
 800682e:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8006832:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8006836:	fb82 1203 	smull	r1, r2, r2, r3
 800683a:	17db      	asrs	r3, r3, #31
 800683c:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8006840:	331e      	adds	r3, #30
 8006842:	b29b      	uxth	r3, r3
 8006844:	e7ab      	b.n	800679e <ADCCTRL_RequestTemperature+0x16e>
        memset ((void *)(&ADCHandle.Init),
 8006846:	2254      	movs	r2, #84	@ 0x54
 8006848:	4639      	mov	r1, r7
 800684a:	e7d1      	b.n	80067f0 <ADCCTRL_RequestTemperature+0x1c0>
 800684c:	20005a94 	.word	0x20005a94
 8006850:	20005a9c 	.word	0x20005a9c
 8006854:	20000100 	.word	0x20000100
 8006858:	20000104 	.word	0x20000104
 800685c:	46021000 	.word	0x46021000
 8006860:	0bf90700 	.word	0x0bf90700
 8006864:	057619f1 	.word	0x057619f1
 8006868:	68db8bad 	.word	0x68db8bad
 800686c:	20005a98 	.word	0x20005a98

08006870 <BLE_TIMER_Background>:
    (void)AMM_Free((uint32_t *)timer);
  }
}

static void BLE_TIMER_Background(void)
{
 8006870:	b510      	push	{r4, lr}
  BLEPLATCB_TimerExpiry( (uint16_t)BLE_TIMER_timer->id);
 8006872:	4c07      	ldr	r4, [pc, #28]	@ (8006890 <BLE_TIMER_Background+0x20>)
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	8918      	ldrh	r0, [r3, #8]
 8006878:	f01c ff2a 	bl	80236d0 <BLEPLATCB_TimerExpiry>
  HostStack_Process( );
 800687c:	f7fb fe5e 	bl	800253c <HostStack_Process>

  /* Delete the BLE_TIMER_timer from the list */
  LST_remove_node((tListNode *)BLE_TIMER_timer);
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	f000 fdab 	bl	80073dc <LST_remove_node>

  (void)AMM_Free((uint32_t *)BLE_TIMER_timer);
 8006886:	6820      	ldr	r0, [r4, #0]
}
 8006888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)AMM_Free((uint32_t *)BLE_TIMER_timer);
 800688c:	f7ff b9e6 	b.w	8005c5c <AMM_Free>
 8006890:	20005aa0 	.word	0x20005aa0

08006894 <BLE_TIMER_Callback>:

static void BLE_TIMER_Callback(void* arg)
{
 8006894:	4602      	mov	r2, r0
  BLE_TIMER_timer = (BLE_TIMER_t*)arg;
 8006896:	4b03      	ldr	r3, [pc, #12]	@ (80068a4 <BLE_TIMER_Callback+0x10>)

  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_TIMER_BCKGND, CFG_SEQ_PRIO_0);
 8006898:	2100      	movs	r1, #0
 800689a:	f44f 7080 	mov.w	r0, #256	@ 0x100
  BLE_TIMER_timer = (BLE_TIMER_t*)arg;
 800689e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_TIMER_BCKGND, CFG_SEQ_PRIO_0);
 80068a0:	f005 bc70 	b.w	800c184 <UTIL_SEQ_SetTask>
 80068a4:	20005aa0 	.word	0x20005aa0

080068a8 <BLE_TIMER_Init>:
{
 80068a8:	b508      	push	{r3, lr}
  LST_init_head(&BLE_TIMER_List);
 80068aa:	4806      	ldr	r0, [pc, #24]	@ (80068c4 <BLE_TIMER_Init+0x1c>)
 80068ac:	f000 fd6e 	bl	800738c <LST_init_head>
  UTIL_TIMER_Init();
 80068b0:	f005 fdbe 	bl	800c430 <UTIL_TIMER_Init>
}
 80068b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_TIMER_BCKGND, UTIL_SEQ_RFU, BLE_TIMER_Background);
 80068b8:	2100      	movs	r1, #0
 80068ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80068be:	4a02      	ldr	r2, [pc, #8]	@ (80068c8 <BLE_TIMER_Init+0x20>)
 80068c0:	f005 bc48 	b.w	800c154 <UTIL_SEQ_RegTask>
 80068c4:	20005aa4 	.word	0x20005aa4
 80068c8:	08006871 	.word	0x08006871

080068cc <BLE_TIMER_Start>:
{
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

static BLE_TIMER_t* BLE_TIMER_GetFromList(tListNode * listHead, uint16_t id)
{
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 80068d0:	4e25      	ldr	r6, [pc, #148]	@ (8006968 <BLE_TIMER_Start+0x9c>)
{
 80068d2:	b084      	sub	sp, #16
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 80068d4:	6834      	ldr	r4, [r6, #0]
{
 80068d6:	4605      	mov	r5, r0
  while((tListNode *)currentNode != listHead)
 80068d8:	42b4      	cmp	r4, r6
{
 80068da:	4688      	mov	r8, r1
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 80068dc:	9403      	str	r4, [sp, #12]
 80068de:	af03      	add	r7, sp, #12
  while((tListNode *)currentNode != listHead)
 80068e0:	d107      	bne.n	80068f2 <BLE_TIMER_Start+0x26>
 80068e2:	e013      	b.n	800690c <BLE_TIMER_Start+0x40>
  {
    if(currentNode->id == id)
    {
      return currentNode;
    }
    LST_get_next_node((tListNode *)currentNode, (tListNode **)&currentNode);
 80068e4:	4620      	mov	r0, r4
 80068e6:	4639      	mov	r1, r7
 80068e8:	f000 fd98 	bl	800741c <LST_get_next_node>
  while((tListNode *)currentNode != listHead)
 80068ec:	9c03      	ldr	r4, [sp, #12]
 80068ee:	42b4      	cmp	r4, r6
 80068f0:	d00c      	beq.n	800690c <BLE_TIMER_Start+0x40>
    if(currentNode->id == id)
 80068f2:	8923      	ldrh	r3, [r4, #8]
 80068f4:	42ab      	cmp	r3, r5
 80068f6:	d1f5      	bne.n	80068e4 <BLE_TIMER_Start+0x18>
    UTIL_TIMER_Stop(&timer->timerObject);
 80068f8:	f104 000c 	add.w	r0, r4, #12
 80068fc:	f005 fdd0 	bl	800c4a0 <UTIL_TIMER_Stop>
    LST_remove_node((tListNode *)timer);
 8006900:	4620      	mov	r0, r4
 8006902:	f000 fd6b 	bl	80073dc <LST_remove_node>
    (void)AMM_Free((uint32_t *)timer);
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff f9a8 	bl	8005c5c <AMM_Free>
  BLE_TIMER_t *timer = NULL;
 800690c:	2300      	movs	r3, #0
  if(AMM_ERROR_OK != AMM_Alloc (CFG_AMM_VIRTUAL_STACK_BLE,
 800690e:	463a      	mov	r2, r7
 8006910:	2109      	movs	r1, #9
 8006912:	2001      	movs	r0, #1
  BLE_TIMER_t *timer = NULL;
 8006914:	9303      	str	r3, [sp, #12]
  if(AMM_ERROR_OK != AMM_Alloc (CFG_AMM_VIRTUAL_STACK_BLE,
 8006916:	f7ff f8df 	bl	8005ad8 <AMM_Alloc>
 800691a:	4604      	mov	r4, r0
 800691c:	b9a8      	cbnz	r0, 800694a <BLE_TIMER_Start+0x7e>
  timer->id = id;
 800691e:	9903      	ldr	r1, [sp, #12]
  LST_insert_tail(&BLE_TIMER_List, (tListNode *)timer);
 8006920:	4811      	ldr	r0, [pc, #68]	@ (8006968 <BLE_TIMER_Start+0x9c>)
  timer->id = id;
 8006922:	810d      	strh	r5, [r1, #8]
  LST_insert_tail(&BLE_TIMER_List, (tListNode *)timer);
 8006924:	f000 fd4e 	bl	80073c4 <LST_insert_tail>
  if(UTIL_TIMER_Create(&timer->timerObject, timeout, UTIL_TIMER_ONESHOT, &BLE_TIMER_Callback, timer) != UTIL_TIMER_OK)
 8006928:	9803      	ldr	r0, [sp, #12]
 800692a:	4622      	mov	r2, r4
 800692c:	9000      	str	r0, [sp, #0]
 800692e:	4641      	mov	r1, r8
 8006930:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <BLE_TIMER_Start+0xa0>)
 8006932:	300c      	adds	r0, #12
 8006934:	f005 fd86 	bl	800c444 <UTIL_TIMER_Create>
 8006938:	b958      	cbnz	r0, 8006952 <BLE_TIMER_Start+0x86>
  if(UTIL_TIMER_Start(&timer->timerObject) != UTIL_TIMER_OK)
 800693a:	9803      	ldr	r0, [sp, #12]
 800693c:	300c      	adds	r0, #12
 800693e:	f005 fd9d 	bl	800c47c <UTIL_TIMER_Start>
 8006942:	b930      	cbnz	r0, 8006952 <BLE_TIMER_Start+0x86>
}
 8006944:	b004      	add	sp, #16
 8006946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_INSUFFICIENT_RESOURCES;
 800694a:	2064      	movs	r0, #100	@ 0x64
}
 800694c:	b004      	add	sp, #16
 800694e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LST_remove_node ((tListNode *)timer);
 8006952:	9803      	ldr	r0, [sp, #12]
 8006954:	f000 fd42 	bl	80073dc <LST_remove_node>
    (void)AMM_Free((uint32_t *)timer);
 8006958:	9803      	ldr	r0, [sp, #12]
 800695a:	f7ff f97f 	bl	8005c5c <AMM_Free>
    return BLE_STATUS_FAILED;
 800695e:	2091      	movs	r0, #145	@ 0x91
}
 8006960:	b004      	add	sp, #16
 8006962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006966:	bf00      	nop
 8006968:	20005aa4 	.word	0x20005aa4
 800696c:	08006895 	.word	0x08006895

08006970 <BLE_TIMER_Stop>:
void BLE_TIMER_Stop(uint16_t id){
 8006970:	b570      	push	{r4, r5, r6, lr}
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 8006972:	4e10      	ldr	r6, [pc, #64]	@ (80069b4 <BLE_TIMER_Stop+0x44>)
void BLE_TIMER_Stop(uint16_t id){
 8006974:	b082      	sub	sp, #8
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 8006976:	6834      	ldr	r4, [r6, #0]
  while((tListNode *)currentNode != listHead)
 8006978:	42b4      	cmp	r4, r6
  BLE_TIMER_t* currentNode = (BLE_TIMER_t*)listHead->next;
 800697a:	9401      	str	r4, [sp, #4]
  while((tListNode *)currentNode != listHead)
 800697c:	d018      	beq.n	80069b0 <BLE_TIMER_Stop+0x40>
 800697e:	4605      	mov	r5, r0
 8006980:	e006      	b.n	8006990 <BLE_TIMER_Stop+0x20>
    LST_get_next_node((tListNode *)currentNode, (tListNode **)&currentNode);
 8006982:	4620      	mov	r0, r4
 8006984:	a901      	add	r1, sp, #4
 8006986:	f000 fd49 	bl	800741c <LST_get_next_node>
  while((tListNode *)currentNode != listHead)
 800698a:	9c01      	ldr	r4, [sp, #4]
 800698c:	42b4      	cmp	r4, r6
 800698e:	d00f      	beq.n	80069b0 <BLE_TIMER_Stop+0x40>
    if(currentNode->id == id)
 8006990:	8923      	ldrh	r3, [r4, #8]
 8006992:	42ab      	cmp	r3, r5
 8006994:	d1f5      	bne.n	8006982 <BLE_TIMER_Stop+0x12>
    UTIL_TIMER_Stop(&timer->timerObject);
 8006996:	f104 000c 	add.w	r0, r4, #12
 800699a:	f005 fd81 	bl	800c4a0 <UTIL_TIMER_Stop>
    LST_remove_node((tListNode *)timer);
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fd1c 	bl	80073dc <LST_remove_node>
    (void)AMM_Free((uint32_t *)timer);
 80069a4:	4620      	mov	r0, r4
}
 80069a6:	b002      	add	sp, #8
 80069a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)AMM_Free((uint32_t *)timer);
 80069ac:	f7ff b956 	b.w	8005c5c <AMM_Free>
}
 80069b0:	b002      	add	sp, #8
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	20005aa4 	.word	0x20005aa4

080069b8 <CRCCTRL_MutexTake>:

/* Weak function Definition --------------------------------------------------*/
__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_MutexTake (void)
{
  return CRCCTRL_OK;
}
 80069b8:	2000      	movs	r0, #0
 80069ba:	4770      	bx	lr

080069bc <CRCCTRL_MutexRelease>:

__WEAK CRCCTRL_Cmd_Status_t CRCCTRL_MutexRelease (void)
 80069bc:	2000      	movs	r0, #0
 80069be:	4770      	bx	lr

080069c0 <CRCCTRL_RegisterHandle>:
{
 80069c0:	b538      	push	{r3, r4, r5, lr}
  if (NULL == p_Handle)
 80069c2:	b1c8      	cbz	r0, 80069f8 <CRCCTRL_RegisterHandle+0x38>
  else if (HANDLE_REG == p_Handle->State)
 80069c4:	7a03      	ldrb	r3, [r0, #8]
 80069c6:	4604      	mov	r4, r0
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d005      	beq.n	80069d8 <CRCCTRL_RegisterHandle+0x18>
    error = CRCCTRL_MutexTake ();
 80069cc:	f7ff fff4 	bl	80069b8 <CRCCTRL_MutexTake>
    if (CRCCTRL_OK == error)
 80069d0:	4605      	mov	r5, r0
 80069d2:	b120      	cbz	r0, 80069de <CRCCTRL_RegisterHandle+0x1e>
}
 80069d4:	4628      	mov	r0, r5
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
    error = CRCCTRL_HANDLE_ALREADY_REGISTERED;
 80069d8:	2503      	movs	r5, #3
}
 80069da:	4628      	mov	r0, r5
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
      p_Handle->State = HANDLE_REG;
 80069de:	2101      	movs	r1, #1
      MaxRegisteredId = MaxRegisteredId + 1u;
 80069e0:	4a07      	ldr	r2, [pc, #28]	@ (8006a00 <CRCCTRL_RegisterHandle+0x40>)
      p_Handle->PreviousComputedValue = p_Handle->Configuration.InitValue;
 80069e2:	69a0      	ldr	r0, [r4, #24]
      MaxRegisteredId = MaxRegisteredId + 1u;
 80069e4:	6813      	ldr	r3, [r2, #0]
      p_Handle->PreviousComputedValue = p_Handle->Configuration.InitValue;
 80069e6:	6060      	str	r0, [r4, #4]
      MaxRegisteredId = MaxRegisteredId + 1u;
 80069e8:	440b      	add	r3, r1
      p_Handle->Uid = MaxRegisteredId;
 80069ea:	6023      	str	r3, [r4, #0]
      p_Handle->State = HANDLE_REG;
 80069ec:	7221      	strb	r1, [r4, #8]
      MaxRegisteredId = MaxRegisteredId + 1u;
 80069ee:	6013      	str	r3, [r2, #0]
      CRCCTRL_MutexRelease ();
 80069f0:	f7ff ffe4 	bl	80069bc <CRCCTRL_MutexRelease>
}
 80069f4:	4628      	mov	r0, r5
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
    error = CRCCTRL_ERROR_NULL_POINTER;
 80069f8:	2506      	movs	r5, #6
}
 80069fa:	4628      	mov	r0, r5
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	20005aac 	.word	0x20005aac

08006a04 <CRCCTRL_Calculate>:
{
 8006a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a08:	b083      	sub	sp, #12
  if ((NULL == p_Handle) || (NULL == a_Payload) || (NULL == p_ConmputedValue))
 8006a0a:	b190      	cbz	r0, 8006a32 <CRCCTRL_Calculate+0x2e>
 8006a0c:	9101      	str	r1, [sp, #4]
 8006a0e:	b181      	cbz	r1, 8006a32 <CRCCTRL_Calculate+0x2e>
 8006a10:	461e      	mov	r6, r3
 8006a12:	b173      	cbz	r3, 8006a32 <CRCCTRL_Calculate+0x2e>
  else if (HANDLE_NOT_REG == p_Handle->State)
 8006a14:	7a03      	ldrb	r3, [r0, #8]
 8006a16:	4604      	mov	r4, r0
 8006a18:	b183      	cbz	r3, 8006a3c <CRCCTRL_Calculate+0x38>
 8006a1a:	4617      	mov	r7, r2
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 8006a1c:	4a30      	ldr	r2, [pc, #192]	@ (8006ae0 <CRCCTRL_Calculate+0xdc>)
 8006a1e:	6803      	ldr	r3, [r0, #0]
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d800      	bhi.n	8006a28 <CRCCTRL_Calculate+0x24>
 8006a26:	b973      	cbnz	r3, 8006a46 <CRCCTRL_Calculate+0x42>
    error = CRCCTRL_HANDLE_NOT_VALID;
 8006a28:	2505      	movs	r5, #5
}
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	b003      	add	sp, #12
 8006a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = CRCCTRL_ERROR_NULL_POINTER;
 8006a32:	2506      	movs	r5, #6
}
 8006a34:	4628      	mov	r0, r5
 8006a36:	b003      	add	sp, #12
 8006a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = CRCCTRL_HANDLE_NOT_REGISTERED;
 8006a3c:	2504      	movs	r5, #4
}
 8006a3e:	4628      	mov	r0, r5
 8006a40:	b003      	add	sp, #12
 8006a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = CRCCTRL_MutexTake ();
 8006a46:	f7ff ffb7 	bl	80069b8 <CRCCTRL_MutexTake>
    if (CRCCTRL_OK == error)
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1ec      	bne.n	8006a2a <CRCCTRL_Calculate+0x26>
      if (CurrentConfig != p_Handle->Uid)
 8006a50:	f8df 9098 	ldr.w	r9, [pc, #152]	@ 8006aec <CRCCTRL_Calculate+0xe8>
 8006a54:	6822      	ldr	r2, [r4, #0]
 8006a56:	f8d9 3000 	ldr.w	r3, [r9]
 8006a5a:	9901      	ldr	r1, [sp, #4]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d02c      	beq.n	8006aba <CRCCTRL_Calculate+0xb6>
  if (HAL_CRC_STATE_RESET != CRCHandle.State)
 8006a60:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8006ae4 <CRCCTRL_Calculate+0xe0>
 8006a64:	f898 301d 	ldrb.w	r3, [r8, #29]
 8006a68:	b14b      	cbz	r3, 8006a7e <CRCCTRL_Calculate+0x7a>
    error = HAL_CRC_DeInit(&CRCHandle);
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	9101      	str	r1, [sp, #4]
 8006a6e:	f001 fd19 	bl	80084a4 <HAL_CRC_DeInit>
  if (HAL_OK == error)
 8006a72:	9901      	ldr	r1, [sp, #4]
 8006a74:	b118      	cbz	r0, 8006a7e <CRCCTRL_Calculate+0x7a>
        error = CRCCTRL_ERROR_CONFIG;
 8006a76:	2507      	movs	r5, #7
      CRCCTRL_MutexRelease ();
 8006a78:	f7ff ffa0 	bl	80069bc <CRCCTRL_MutexRelease>
 8006a7c:	e7d5      	b.n	8006a2a <CRCCTRL_Calculate+0x26>
    CRCHandle.Init.DefaultPolynomialUse = p_Handle->Configuration.DefaultPolynomialUse;
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
    error = HAL_CRC_Init(&CRCHandle);
 8006a80:	4818      	ldr	r0, [pc, #96]	@ (8006ae4 <CRCCTRL_Calculate+0xe0>)
    CRCHandle.Init.DefaultPolynomialUse = p_Handle->Configuration.DefaultPolynomialUse;
 8006a82:	f8a8 3004 	strh.w	r3, [r8, #4]
    CRCHandle.Init.GeneratingPolynomial = p_Handle->Configuration.GeneratingPolynomial;
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	9101      	str	r1, [sp, #4]
 8006a8a:	f8c8 3008 	str.w	r3, [r8, #8]
 8006a8e:	6963      	ldr	r3, [r4, #20]
 8006a90:	f8c8 300c 	str.w	r3, [r8, #12]
 8006a94:	69a3      	ldr	r3, [r4, #24]
 8006a96:	f8c8 3010 	str.w	r3, [r8, #16]
 8006a9a:	69e3      	ldr	r3, [r4, #28]
 8006a9c:	f8c8 3014 	str.w	r3, [r8, #20]
 8006aa0:	6a23      	ldr	r3, [r4, #32]
 8006aa2:	f8c8 3018 	str.w	r3, [r8, #24]
    CRCHandle.InputDataFormat = p_Handle->Configuration.InputDataFormat;
 8006aa6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006aa8:	f8c8 3020 	str.w	r3, [r8, #32]
    error = HAL_CRC_Init(&CRCHandle);
 8006aac:	f001 fcbc 	bl	8008428 <HAL_CRC_Init>
    if (HAL_OK == error)
 8006ab0:	9901      	ldr	r1, [sp, #4]
 8006ab2:	b948      	cbnz	r0, 8006ac8 <CRCCTRL_Calculate+0xc4>
      CurrentConfig = p_Handle->Uid;
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f8c9 3000 	str.w	r3, [r9]
        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle, a_Payload, PayloadSize);
 8006aba:	463a      	mov	r2, r7
 8006abc:	4809      	ldr	r0, [pc, #36]	@ (8006ae4 <CRCCTRL_Calculate+0xe0>)
 8006abe:	f001 fd49 	bl	8008554 <HAL_CRC_Calculate>
 8006ac2:	6030      	str	r0, [r6, #0]
        p_Handle->PreviousComputedValue = *p_ConmputedValue;
 8006ac4:	6060      	str	r0, [r4, #4]
 8006ac6:	e7d7      	b.n	8006a78 <CRCCTRL_Calculate+0x74>
      memset ((void *)(&CRCHandle.Init),
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4a07      	ldr	r2, [pc, #28]	@ (8006ae8 <CRCCTRL_Calculate+0xe4>)
 8006acc:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ad0:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8006ad4:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8006ad8:	6153      	str	r3, [r2, #20]
      CRCHandle.InputDataFormat = 0x00u;
 8006ada:	f8c8 3020 	str.w	r3, [r8, #32]
      if (eReturn == HAL_OK)
 8006ade:	e7ca      	b.n	8006a76 <CRCCTRL_Calculate+0x72>
 8006ae0:	20005aac 	.word	0x20005aac
 8006ae4:	2000016c 	.word	0x2000016c
 8006ae8:	20000170 	.word	0x20000170
 8006aec:	20005ab0 	.word	0x20005ab0

08006af0 <CRCCTRL_Accumulate>:
{
 8006af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006af4:	b083      	sub	sp, #12
  if ((NULL == p_Handle) || (NULL == a_Payload) || (NULL == p_ConmputedValue))
 8006af6:	b190      	cbz	r0, 8006b1e <CRCCTRL_Accumulate+0x2e>
 8006af8:	9101      	str	r1, [sp, #4]
 8006afa:	b181      	cbz	r1, 8006b1e <CRCCTRL_Accumulate+0x2e>
 8006afc:	461e      	mov	r6, r3
 8006afe:	b173      	cbz	r3, 8006b1e <CRCCTRL_Accumulate+0x2e>
  else if (HANDLE_NOT_REG == p_Handle->State)
 8006b00:	7a03      	ldrb	r3, [r0, #8]
 8006b02:	4604      	mov	r4, r0
 8006b04:	b183      	cbz	r3, 8006b28 <CRCCTRL_Accumulate+0x38>
 8006b06:	4617      	mov	r7, r2
  else if ((MaxRegisteredId < p_Handle->Uid) ||
 8006b08:	4a35      	ldr	r2, [pc, #212]	@ (8006be0 <CRCCTRL_Accumulate+0xf0>)
 8006b0a:	6803      	ldr	r3, [r0, #0]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d800      	bhi.n	8006b14 <CRCCTRL_Accumulate+0x24>
 8006b12:	b973      	cbnz	r3, 8006b32 <CRCCTRL_Accumulate+0x42>
    error = CRCCTRL_HANDLE_NOT_VALID;
 8006b14:	2505      	movs	r5, #5
}
 8006b16:	4628      	mov	r0, r5
 8006b18:	b003      	add	sp, #12
 8006b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = CRCCTRL_ERROR_NULL_POINTER;
 8006b1e:	2506      	movs	r5, #6
}
 8006b20:	4628      	mov	r0, r5
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = CRCCTRL_HANDLE_NOT_REGISTERED;
 8006b28:	2504      	movs	r5, #4
}
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	b003      	add	sp, #12
 8006b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    error = CRCCTRL_MutexTake ();
 8006b32:	f7ff ff41 	bl	80069b8 <CRCCTRL_MutexTake>
    if (CRCCTRL_OK == error)
 8006b36:	4605      	mov	r5, r0
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1ec      	bne.n	8006b16 <CRCCTRL_Accumulate+0x26>
      if (CurrentConfig == p_Handle->Uid)
 8006b3c:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8006bec <CRCCTRL_Accumulate+0xfc>
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	f8d9 3000 	ldr.w	r3, [r9]
 8006b46:	9901      	ldr	r1, [sp, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d00e      	beq.n	8006b6a <CRCCTRL_Accumulate+0x7a>
  if (HAL_CRC_STATE_RESET != CRCHandle.State)
 8006b4c:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8006be4 <CRCCTRL_Accumulate+0xf4>
 8006b50:	f898 301d 	ldrb.w	r3, [r8, #29]
 8006b54:	b183      	cbz	r3, 8006b78 <CRCCTRL_Accumulate+0x88>
    error = HAL_CRC_DeInit(&CRCHandle);
 8006b56:	4640      	mov	r0, r8
 8006b58:	9101      	str	r1, [sp, #4]
 8006b5a:	f001 fca3 	bl	80084a4 <HAL_CRC_DeInit>
  if (HAL_OK == error)
 8006b5e:	9901      	ldr	r1, [sp, #4]
 8006b60:	b150      	cbz	r0, 8006b78 <CRCCTRL_Accumulate+0x88>
        error = CRCCTRL_ERROR_CONFIG;
 8006b62:	2507      	movs	r5, #7
      CRCCTRL_MutexRelease ();
 8006b64:	f7ff ff2a 	bl	80069bc <CRCCTRL_MutexRelease>
 8006b68:	e7d5      	b.n	8006b16 <CRCCTRL_Accumulate+0x26>
        *p_ConmputedValue = HAL_CRC_Accumulate (&CRCHandle,
 8006b6a:	463a      	mov	r2, r7
 8006b6c:	481d      	ldr	r0, [pc, #116]	@ (8006be4 <CRCCTRL_Accumulate+0xf4>)
 8006b6e:	f001 fcb3 	bl	80084d8 <HAL_CRC_Accumulate>
        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle,
 8006b72:	6030      	str	r0, [r6, #0]
        p_Handle->PreviousComputedValue = *p_ConmputedValue;
 8006b74:	6060      	str	r0, [r4, #4]
 8006b76:	e7f5      	b.n	8006b64 <CRCCTRL_Accumulate+0x74>
    CRCHandle.Init.DefaultPolynomialUse = p_Handle->Configuration.DefaultPolynomialUse;
 8006b78:	89a3      	ldrh	r3, [r4, #12]
    error = HAL_CRC_Init(&CRCHandle);
 8006b7a:	481a      	ldr	r0, [pc, #104]	@ (8006be4 <CRCCTRL_Accumulate+0xf4>)
    CRCHandle.Init.DefaultPolynomialUse = p_Handle->Configuration.DefaultPolynomialUse;
 8006b7c:	f8a8 3004 	strh.w	r3, [r8, #4]
    CRCHandle.Init.GeneratingPolynomial = p_Handle->Configuration.GeneratingPolynomial;
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	9101      	str	r1, [sp, #4]
 8006b84:	f8c8 3008 	str.w	r3, [r8, #8]
 8006b88:	6963      	ldr	r3, [r4, #20]
 8006b8a:	f8c8 300c 	str.w	r3, [r8, #12]
 8006b8e:	69a3      	ldr	r3, [r4, #24]
 8006b90:	f8c8 3010 	str.w	r3, [r8, #16]
 8006b94:	69e3      	ldr	r3, [r4, #28]
 8006b96:	f8c8 3014 	str.w	r3, [r8, #20]
 8006b9a:	6a23      	ldr	r3, [r4, #32]
 8006b9c:	f8c8 3018 	str.w	r3, [r8, #24]
    CRCHandle.InputDataFormat = p_Handle->Configuration.InputDataFormat;
 8006ba0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ba2:	f8c8 3020 	str.w	r3, [r8, #32]
    error = HAL_CRC_Init(&CRCHandle);
 8006ba6:	f001 fc3f 	bl	8008428 <HAL_CRC_Init>
    if (HAL_OK == error)
 8006baa:	9901      	ldr	r1, [sp, #4]
 8006bac:	b958      	cbnz	r0, 8006bc6 <CRCCTRL_Accumulate+0xd6>
        CRCHandle.Instance->INIT = p_Handle->PreviousComputedValue;
 8006bae:	f8d8 0000 	ldr.w	r0, [r8]
        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle,
 8006bb2:	463a      	mov	r2, r7
      CurrentConfig = p_Handle->Uid;
 8006bb4:	e9d4 3700 	ldrd	r3, r7, [r4]
        CRCHandle.Instance->INIT = p_Handle->PreviousComputedValue;
 8006bb8:	6107      	str	r7, [r0, #16]
        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle,
 8006bba:	480a      	ldr	r0, [pc, #40]	@ (8006be4 <CRCCTRL_Accumulate+0xf4>)
      CurrentConfig = p_Handle->Uid;
 8006bbc:	f8c9 3000 	str.w	r3, [r9]
        *p_ConmputedValue = HAL_CRC_Calculate (&CRCHandle,
 8006bc0:	f001 fcc8 	bl	8008554 <HAL_CRC_Calculate>
        p_Handle->PreviousComputedValue = *p_ConmputedValue;
 8006bc4:	e7d5      	b.n	8006b72 <CRCCTRL_Accumulate+0x82>
      memset ((void *)(&CRCHandle.Init),
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4a07      	ldr	r2, [pc, #28]	@ (8006be8 <CRCCTRL_Accumulate+0xf8>)
 8006bca:	f8c8 3004 	str.w	r3, [r8, #4]
 8006bce:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8006bd2:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8006bd6:	6153      	str	r3, [r2, #20]
      CRCHandle.InputDataFormat = 0x00u;
 8006bd8:	f8c8 3020 	str.w	r3, [r8, #32]
  return error;
 8006bdc:	e7c1      	b.n	8006b62 <CRCCTRL_Accumulate+0x72>
 8006bde:	bf00      	nop
 8006be0:	20005aac 	.word	0x20005aac
 8006be4:	2000016c 	.word	0x2000016c
 8006be8:	20000170 	.word	0x20000170
 8006bec:	20005ab0 	.word	0x20005ab0

08006bf0 <OTP_Read>:
/* Exported variables --------------------------------------------------------*/
/* Exported functions --------------------------------------------------------*/

HAL_StatusTypeDef OTP_Read(uint8_t index, OTP_Data_s** otp_ptr)
{
  *otp_ptr = (OTP_Data_s*) (FLASH_OTP_BASE + FLASH_OTP_SIZE - 16);
 8006bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8006c28 <OTP_Read+0x38>)

  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 8006bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8006c2c <OTP_Read+0x3c>)
  *otp_ptr = (OTP_Data_s*) (FLASH_OTP_BASE + FLASH_OTP_SIZE - 16);
 8006bf4:	600b      	str	r3, [r1, #0]
  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 8006bf6:	f892 20ff 	ldrb.w	r2, [r2, #255]	@ 0xff
 8006bfa:	4282      	cmp	r2, r0
 8006bfc:	d012      	beq.n	8006c24 <OTP_Read+0x34>
{
 8006bfe:	b410      	push	{r4}
  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 8006c00:	4c0b      	ldr	r4, [pc, #44]	@ (8006c30 <OTP_Read+0x40>)
  {
    (*otp_ptr) -= 1;
 8006c02:	461a      	mov	r2, r3
 8006c04:	3b10      	subs	r3, #16
 8006c06:	600b      	str	r3, [r1, #0]
  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 8006c08:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8006c0c:	4282      	cmp	r2, r0
 8006c0e:	d005      	beq.n	8006c1c <OTP_Read+0x2c>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d1f6      	bne.n	8006c02 <OTP_Read+0x12>
 8006c14:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8006c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c1a:	4770      	bx	lr
  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 8006c1c:	2000      	movs	r0, #0
}
 8006c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c22:	4770      	bx	lr
  while ( (*otp_ptr)->index != index && (*otp_ptr) != (OTP_Data_s*) FLASH_OTP_BASE)
 8006c24:	2000      	movs	r0, #0
}
 8006c26:	4770      	bx	lr
 8006c28:	0bf901f0 	.word	0x0bf901f0
 8006c2c:	0bf90100 	.word	0x0bf90100
 8006c30:	0bf90000 	.word	0x0bf90000

08006c34 <SCM_HSI_CLK_ON>:
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006c34:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <SCM_HSI_CLK_ON+0x14>)
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3c:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	055b      	lsls	r3, r3, #21
 8006c42:	d5fc      	bpl.n	8006c3e <SCM_HSI_CLK_ON+0xa>

__weak void SCM_HSI_CLK_ON(void)
{
  LL_RCC_HSI_Enable();
  while(LL_RCC_HSI_IsReady() == 0);
}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	46020c00 	.word	0x46020c00

08006c4c <SCM_HSI_CLK_OFF>:

__weak void SCM_HSI_CLK_OFF(void)
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop

08006c50 <SwitchHse16toHse32>:
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8006c50:	4a24      	ldr	r2, [pc, #144]	@ (8006ce4 <SwitchHse16toHse32+0x94>)
  /* Disable HSI */
  SCM_HSI_CLK_OFF();
}

OPTIMIZED static void SwitchHse16toHse32(void)
{
 8006c52:	b510      	push	{r4, lr}
 8006c54:	68d3      	ldr	r3, [r2, #12]
 8006c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c5a:	60d3      	str	r3, [r2, #12]
  return ((READ_BIT(PWR->VOSR, PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL);
 8006c5c:	68d3      	ldr	r3, [r2, #12]
 8006c5e:	0419      	lsls	r1, r3, #16
 8006c60:	d5fc      	bpl.n	8006c5c <SwitchHse16toHse32+0xc>
  SCM_HSI_CLK_ON();
 8006c62:	f7ff ffe7 	bl	8006c34 <SCM_HSI_CLK_ON>
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006c66:	4920      	ldr	r1, [pc, #128]	@ (8006ce8 <SwitchHse16toHse32+0x98>)
 8006c68:	69cb      	ldr	r3, [r1, #28]
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	61cb      	str	r3, [r1, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006c70:	69cb      	ldr	r3, [r1, #28]
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8006c72:	f013 0f0c 	tst.w	r3, #12
 8006c76:	d1fb      	bne.n	8006c70 <SwitchHse16toHse32+0x20>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006c78:	680b      	ldr	r3, [r1, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8006c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce8 <SwitchHse16toHse32+0x98>)
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c80:	600b      	str	r3, [r1, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	039b      	lsls	r3, r3, #14
 8006c86:	d5fc      	bpl.n	8006c82 <SwitchHse16toHse32+0x32>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 8006c88:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006c8a:	4917      	ldr	r1, [pc, #92]	@ (8006ce8 <SwitchHse16toHse32+0x98>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 8006c8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c90:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006c92:	69d3      	ldr	r3, [r2, #28]
 8006c94:	f023 0303 	bic.w	r3, r3, #3
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006c9e:	69cb      	ldr	r3, [r1, #28]
 8006ca0:	f003 030c 	and.w	r3, r3, #12
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d1fa      	bne.n	8006c9e <SwitchHse16toHse32+0x4e>
  SCM_HSI_CLK_OFF();
 8006ca8:	f7ff ffd0 	bl	8006c4c <SCM_HSI_CLK_OFF>
    scm_system_clock_config.sram_ws_cfg = RAMCFG_WAITSTATE_1;

    break;

  case HSE32:
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8006cac:	4b0f      	ldr	r3, [pc, #60]	@ (8006cec <SwitchHse16toHse32+0x9c>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	f022 020f 	bic.w	r2, r2, #15
 8006cb4:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 8006cb6:	681c      	ldr	r4, [r3, #0]
 8006cb8:	f014 040f 	ands.w	r4, r4, #15
 8006cbc:	d1fb      	bne.n	8006cb6 <SwitchHse16toHse32+0x66>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	480b      	ldr	r0, [pc, #44]	@ (8006cf0 <SwitchHse16toHse32+0xa0>)
 8006cc2:	f002 fb6d 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	480a      	ldr	r0, [pc, #40]	@ (8006cf4 <SwitchHse16toHse32+0xa4>)
 8006cca:	f002 fb69 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
  MODIFY_REG(RCC->CFGR4, RCC_CFGR4_HDIV5, Divider);
 8006cce:	4a06      	ldr	r2, [pc, #24]	@ (8006ce8 <SwitchHse16toHse32+0x98>)

    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 8006cd0:	4909      	ldr	r1, [pc, #36]	@ (8006cf8 <SwitchHse16toHse32+0xa8>)
 8006cd2:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8006cd6:	604c      	str	r4, [r1, #4]
 8006cd8:	f023 0310 	bic.w	r3, r3, #16
 8006cdc:	608c      	str	r4, [r1, #8]
 8006cde:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	46020800 	.word	0x46020800
 8006ce8:	46020c00 	.word	0x46020c00
 8006cec:	40022000 	.word	0x40022000
 8006cf0:	2000019c 	.word	0x2000019c
 8006cf4:	20000190 	.word	0x20000190
 8006cf8:	20005ac0 	.word	0x20005ac0

08006cfc <scm_pllready>:
}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop

08006d00 <scm_setsystemclock>:
{
 8006d00:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d02:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 8006d06:	2310      	movs	r3, #16
 8006d08:	f383 8812 	msr	BASEPRI_MAX, r3
  scm_system_clock_requests[user_id] = sysclockconfig;
 8006d0c:	4a99      	ldr	r2, [pc, #612]	@ (8006f74 <scm_setsystemclock+0x274>)
  if(scm_system_clock_config.targeted_clock_freq != max_freq_requested)
 8006d0e:	4d9a      	ldr	r5, [pc, #616]	@ (8006f78 <scm_setsystemclock+0x278>)
  scm_system_clock_requests[user_id] = sysclockconfig;
 8006d10:	5411      	strb	r1, [r2, r0]
    if(scm_system_clock_requests[idx] > max)
 8006d12:	7813      	ldrb	r3, [r2, #0]
 8006d14:	7850      	ldrb	r0, [r2, #1]
 8006d16:	7891      	ldrb	r1, [r2, #2]
 8006d18:	4283      	cmp	r3, r0
 8006d1a:	bf38      	it	cc
 8006d1c:	4603      	movcc	r3, r0
 8006d1e:	428b      	cmp	r3, r1
 8006d20:	bf38      	it	cc
 8006d22:	460b      	movcc	r3, r1
  if(scm_system_clock_config.targeted_clock_freq != max_freq_requested)
 8006d24:	782a      	ldrb	r2, [r5, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d072      	beq.n	8006e10 <scm_setsystemclock+0x110>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006d2a:	4c94      	ldr	r4, [pc, #592]	@ (8006f7c <scm_setsystemclock+0x27c>)
    scm_system_clock_config.targeted_clock_freq = max_freq_requested;
 8006d2c:	702b      	strb	r3, [r5, #0]
 8006d2e:	69e2      	ldr	r2, [r4, #28]
    if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8006d30:	f012 0f0c 	tst.w	r2, #12
 8006d34:	d15c      	bne.n	8006df0 <scm_setsystemclock+0xf0>
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8006d36:	4a92      	ldr	r2, [pc, #584]	@ (8006f80 <scm_setsystemclock+0x280>)
      if(scm_system_clock_config.targeted_clock_freq == HSE_16MHZ)
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	68d3      	ldr	r3, [r2, #12]
 8006d3c:	f000 80eb 	beq.w	8006f16 <scm_setsystemclock+0x216>
 8006d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d44:	60d3      	str	r3, [r2, #12]
        if(RadioState != SCM_RADIO_NOT_ACTIVE)
 8006d46:	4b8f      	ldr	r3, [pc, #572]	@ (8006f84 <scm_setsystemclock+0x284>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d04d      	beq.n	8006dea <scm_setsystemclock+0xea>
            __HAL_RCC_DISABLE_IT(RCC_IT_HSERDY);
 8006d4e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006d50:	f023 0310 	bic.w	r3, r3, #16
 8006d54:	6523      	str	r3, [r4, #80]	@ 0x50
  return ((READ_BIT(PWR->VOSR, PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL);
 8006d56:	68d3      	ldr	r3, [r2, #12]
 8006d58:	041c      	lsls	r4, r3, #16
 8006d5a:	d5fc      	bpl.n	8006d56 <scm_setsystemclock+0x56>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8006d5c:	4a87      	ldr	r2, [pc, #540]	@ (8006f7c <scm_setsystemclock+0x27c>)
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	0398      	lsls	r0, r3, #14
 8006d62:	d5fc      	bpl.n	8006d5e <scm_setsystemclock+0x5e>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 8006d64:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006d66:	4985      	ldr	r1, [pc, #532]	@ (8006f7c <scm_setsystemclock+0x27c>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 8006d68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d6c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006d6e:	69d3      	ldr	r3, [r2, #28]
 8006d70:	f023 0303 	bic.w	r3, r3, #3
 8006d74:	f043 0302 	orr.w	r3, r3, #2
 8006d78:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006d7a:	69cb      	ldr	r3, [r1, #28]
 8006d7c:	f003 030c 	and.w	r3, r3, #12
            while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d1fa      	bne.n	8006d7a <scm_setsystemclock+0x7a>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8006d84:	4b80      	ldr	r3, [pc, #512]	@ (8006f88 <scm_setsystemclock+0x288>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	f022 020f 	bic.w	r2, r2, #15
 8006d8c:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 8006d8e:	681c      	ldr	r4, [r3, #0]
 8006d90:	f014 040f 	ands.w	r4, r4, #15
 8006d94:	d1fb      	bne.n	8006d8e <scm_setsystemclock+0x8e>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 8006d96:	4621      	mov	r1, r4
 8006d98:	487c      	ldr	r0, [pc, #496]	@ (8006f8c <scm_setsystemclock+0x28c>)
 8006d9a:	f002 fb01 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 8006d9e:	4621      	mov	r1, r4
 8006da0:	487b      	ldr	r0, [pc, #492]	@ (8006f90 <scm_setsystemclock+0x290>)
 8006da2:	f002 fafd 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
  MODIFY_REG(RCC->CFGR4, RCC_CFGR4_HDIV5, Divider);
 8006da6:	4b75      	ldr	r3, [pc, #468]	@ (8006f7c <scm_setsystemclock+0x27c>)
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 8006da8:	606c      	str	r4, [r5, #4]
 8006daa:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006dae:	60ac      	str	r4, [r5, #8]
 8006db0:	f022 0210 	bic.w	r2, r2, #16
 8006db4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dbe:	601a      	str	r2, [r3, #0]
            if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 8006dc0:	782a      	ldrb	r2, [r5, #0]
 8006dc2:	2a03      	cmp	r2, #3
 8006dc4:	d10f      	bne.n	8006de6 <scm_setsystemclock+0xe6>
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1REN);
 8006dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dc8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 8006dce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dd0:	f042 0203 	orr.w	r2, r2, #3
 8006dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_PLL1_ENABLE();
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006ddc:	601a      	str	r2, [r3, #0]
  __HAL_RCC_ENABLE_IT(RCC_IT_PLL1RDY);
 8006dde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006de4:	651a      	str	r2, [r3, #80]	@ 0x50
            SystemCoreClockUpdate();
 8006de6:	f000 fe8b 	bl	8007b00 <SystemCoreClockUpdate>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006dea:	f386 8811 	msr	BASEPRI, r6
}
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
  SYSTEM_DEBUG_SIGNAL_SET(SCM_SYSTEM_CLOCK_CONFIG);
 8006df0:	200d      	movs	r0, #13
 8006df2:	f7ff faa1 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  switch (scm_system_clock_config.targeted_clock_freq)
 8006df6:	782b      	ldrb	r3, [r5, #0]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d07b      	beq.n	8006ef4 <scm_setsystemclock+0x1f4>
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d060      	beq.n	8006ec2 <scm_setsystemclock+0x1c2>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00a      	beq.n	8006e1a <scm_setsystemclock+0x11a>
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SYSTEM_CLOCK_CONFIG);
 8006e04:	200d      	movs	r0, #13
 8006e06:	f7ff fa99 	bl	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
 8006e0a:	f386 8811 	msr	BASEPRI, r6
}
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
  else if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 8006e10:	2a03      	cmp	r2, #3
 8006e12:	d1ea      	bne.n	8006dea <scm_setsystemclock+0xea>
    scm_pllready();
 8006e14:	f7ff ff72 	bl	8006cfc <scm_pllready>
 8006e18:	e7e7      	b.n	8006dea <scm_setsystemclock+0xea>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006e1a:	69e3      	ldr	r3, [r4, #28]
 8006e1c:	f003 030c 	and.w	r3, r3, #12
      if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1R)
 8006e20:	2b0c      	cmp	r3, #12
 8006e22:	f000 8083 	beq.w	8006f2c <scm_setsystemclock+0x22c>
  MODIFY_REG(RCC->CFGR4, RCC_CFGR4_HDIV5, Divider);
 8006e26:	4955      	ldr	r1, [pc, #340]	@ (8006f7c <scm_setsystemclock+0x27c>)
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8006e28:	4b57      	ldr	r3, [pc, #348]	@ (8006f88 <scm_setsystemclock+0x288>)
 8006e2a:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8006e2e:	f042 0210 	orr.w	r2, r2, #16
 8006e32:	f8c1 2200 	str.w	r2, [r1, #512]	@ 0x200
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	f022 020f 	bic.w	r2, r2, #15
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_1);
 8006e42:	681c      	ldr	r4, [r3, #0]
 8006e44:	f004 040f 	and.w	r4, r4, #15
 8006e48:	2c01      	cmp	r4, #1
 8006e4a:	d1fa      	bne.n	8006e42 <scm_setsystemclock+0x142>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_1);
 8006e4c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8006e50:	484e      	ldr	r0, [pc, #312]	@ (8006f8c <scm_setsystemclock+0x28c>)
 8006e52:	f002 faa5 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_1);
 8006e56:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8006e5a:	484d      	ldr	r0, [pc, #308]	@ (8006f90 <scm_setsystemclock+0x290>)
 8006e5c:	f002 faa0 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_1;
 8006e60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e64:	e9c5 4301 	strd	r4, r3, [r5, #4]
  SCM_HSI_CLK_ON();
 8006e68:	f7ff fee4 	bl	8006c34 <SCM_HSI_CLK_ON>
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006e6c:	4943      	ldr	r1, [pc, #268]	@ (8006f7c <scm_setsystemclock+0x27c>)
 8006e6e:	69cb      	ldr	r3, [r1, #28]
 8006e70:	f023 0303 	bic.w	r3, r3, #3
 8006e74:	61cb      	str	r3, [r1, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006e76:	69cb      	ldr	r3, [r1, #28]
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8006e78:	f013 0f0c 	tst.w	r3, #12
 8006e7c:	d1fb      	bne.n	8006e76 <scm_setsystemclock+0x176>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006e7e:	680b      	ldr	r3, [r1, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8006e80:	4a3e      	ldr	r2, [pc, #248]	@ (8006f7c <scm_setsystemclock+0x27c>)
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e86:	600b      	str	r3, [r1, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8006e88:	6813      	ldr	r3, [r2, #0]
 8006e8a:	0399      	lsls	r1, r3, #14
 8006e8c:	d5fc      	bpl.n	8006e88 <scm_setsystemclock+0x188>
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8006e8e:	6813      	ldr	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006e90:	493a      	ldr	r1, [pc, #232]	@ (8006f7c <scm_setsystemclock+0x27c>)
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8006e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e96:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006e98:	69d3      	ldr	r3, [r2, #28]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	f043 0302 	orr.w	r3, r3, #2
 8006ea2:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006ea4:	69cb      	ldr	r3, [r1, #28]
 8006ea6:	f003 030c 	and.w	r3, r3, #12
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d1fa      	bne.n	8006ea4 <scm_setsystemclock+0x1a4>
  SCM_HSI_CLK_OFF();
 8006eae:	f7ff fecd 	bl	8006c4c <SCM_HSI_CLK_OFF>
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8006eb2:	4a33      	ldr	r2, [pc, #204]	@ (8006f80 <scm_setsystemclock+0x280>)
 8006eb4:	68d3      	ldr	r3, [r2, #12]
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eba:	60d3      	str	r3, [r2, #12]
      SystemCoreClockUpdate();
 8006ebc:	f000 fe20 	bl	8007b00 <SystemCoreClockUpdate>
      break;
 8006ec0:	e7a0      	b.n	8006e04 <scm_setsystemclock+0x104>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == RCC_CR_HSEPRE) ? 1UL : 0UL);
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	02db      	lsls	r3, r3, #11
 8006ec6:	d503      	bpl.n	8006ed0 <scm_setsystemclock+0x1d0>
        SwitchHse16toHse32();
 8006ec8:	f7ff fec2 	bl	8006c50 <SwitchHse16toHse32>
        SystemCoreClockUpdate();
 8006ecc:	f000 fe18 	bl	8007b00 <SystemCoreClockUpdate>
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1REN);
 8006ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8006f7c <scm_setsystemclock+0x27c>)
 8006ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ed4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 8006eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006edc:	f042 0203 	orr.w	r2, r2, #3
 8006ee0:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_PLL1_ENABLE();
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006ee8:	601a      	str	r2, [r3, #0]
  __HAL_RCC_ENABLE_IT(RCC_IT_PLL1RDY);
 8006eea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ef0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006ef2:	e787      	b.n	8006e04 <scm_setsystemclock+0x104>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == RCC_CR_HSEPRE) ? 1UL : 0UL);
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	02da      	lsls	r2, r3, #11
 8006ef8:	d413      	bmi.n	8006f22 <scm_setsystemclock+0x222>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006efa:	69e3      	ldr	r3, [r4, #28]
 8006efc:	f003 030c 	and.w	r3, r3, #12
      else if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_PLL1R)
 8006f00:	2b0c      	cmp	r3, #12
 8006f02:	d047      	beq.n	8006f94 <scm_setsystemclock+0x294>
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f0a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_DISABLE_IT(RCC_IT_PLL1RDY);
 8006f0c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f12:	6523      	str	r3, [r4, #80]	@ 0x50
 8006f14:	e776      	b.n	8006e04 <scm_setsystemclock+0x104>
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1a:	60d3      	str	r3, [r2, #12]
 8006f1c:	f386 8811 	msr	BASEPRI, r6
}
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
        SwitchHse16toHse32();
 8006f22:	f7ff fe95 	bl	8006c50 <SwitchHse16toHse32>
        SystemCoreClockUpdate();
 8006f26:	f000 fdeb 	bl	8007b00 <SystemCoreClockUpdate>
 8006f2a:	e76b      	b.n	8006e04 <scm_setsystemclock+0x104>
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006f2c:	69e3      	ldr	r3, [r4, #28]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	f043 0302 	orr.w	r3, r3, #2
 8006f36:	61e3      	str	r3, [r4, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006f38:	69e3      	ldr	r3, [r4, #28]
 8006f3a:	f003 030c 	and.w	r3, r3, #12
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d1fa      	bne.n	8006f38 <scm_setsystemclock+0x238>
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8006f42:	6822      	ldr	r2, [r4, #0]
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8006f44:	4b10      	ldr	r3, [pc, #64]	@ (8006f88 <scm_setsystemclock+0x288>)
 8006f46:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	f022 020f 	bic.w	r2, r2, #15
 8006f52:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 8006f54:	681c      	ldr	r4, [r3, #0]
 8006f56:	f014 040f 	ands.w	r4, r4, #15
 8006f5a:	d1fb      	bne.n	8006f54 <scm_setsystemclock+0x254>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	480b      	ldr	r0, [pc, #44]	@ (8006f8c <scm_setsystemclock+0x28c>)
 8006f60:	f002 fa1e 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 8006f64:	4621      	mov	r1, r4
 8006f66:	480a      	ldr	r0, [pc, #40]	@ (8006f90 <scm_setsystemclock+0x290>)
 8006f68:	f002 fa1a 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 8006f6c:	e9c5 4401 	strd	r4, r4, [r5, #4]
    break;

  default:
    break;
  }
}
 8006f70:	e759      	b.n	8006e26 <scm_setsystemclock+0x126>
 8006f72:	bf00      	nop
 8006f74:	20005ab8 	.word	0x20005ab8
 8006f78:	20005ac0 	.word	0x20005ac0
 8006f7c:	46020c00 	.word	0x46020c00
 8006f80:	46020800 	.word	0x46020800
 8006f84:	20005ab4 	.word	0x20005ab4
 8006f88:	40022000 	.word	0x40022000
 8006f8c:	2000019c 	.word	0x2000019c
 8006f90:	20000190 	.word	0x20000190
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8006f94:	69e3      	ldr	r3, [r4, #28]
 8006f96:	f023 0303 	bic.w	r3, r3, #3
 8006f9a:	f043 0302 	orr.w	r3, r3, #2
 8006f9e:	61e3      	str	r3, [r4, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006fa0:	69e3      	ldr	r3, [r4, #28]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d1fa      	bne.n	8006fa0 <scm_setsystemclock+0x2a0>
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8006faa:	6823      	ldr	r3, [r4, #0]
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8006fac:	4a0c      	ldr	r2, [pc, #48]	@ (8006fe0 <scm_setsystemclock+0x2e0>)
 8006fae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	6813      	ldr	r3, [r2, #0]
 8006fb6:	f023 030f 	bic.w	r3, r3, #15
 8006fba:	6013      	str	r3, [r2, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 8006fbc:	6814      	ldr	r4, [r2, #0]
 8006fbe:	f014 040f 	ands.w	r4, r4, #15
 8006fc2:	d1fb      	bne.n	8006fbc <scm_setsystemclock+0x2bc>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 8006fc4:	4621      	mov	r1, r4
 8006fc6:	4807      	ldr	r0, [pc, #28]	@ (8006fe4 <scm_setsystemclock+0x2e4>)
 8006fc8:	f002 f9ea 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4806      	ldr	r0, [pc, #24]	@ (8006fe8 <scm_setsystemclock+0x2e8>)
 8006fd0:	f002 f9e6 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 8006fd4:	e9c5 4401 	strd	r4, r4, [r5, #4]
        SystemCoreClockUpdate();
 8006fd8:	f000 fd92 	bl	8007b00 <SystemCoreClockUpdate>
 8006fdc:	e712      	b.n	8006e04 <scm_setsystemclock+0x104>
 8006fde:	bf00      	nop
 8006fe0:	40022000 	.word	0x40022000
 8006fe4:	2000019c 	.word	0x2000019c
 8006fe8:	20000190 	.word	0x20000190

08006fec <scm_hserdy_isr>:
  *         Switch system clock on HSE.
  * @param  None
  * @retval None
  */
OPTIMIZED void scm_hserdy_isr(void)
{
 8006fec:	b538      	push	{r3, r4, r5, lr}
  SYSTEM_DEBUG_SIGNAL_SET(SCM_HSERDY_ISR);
 8006fee:	200e      	movs	r0, #14
 8006ff0:	f7ff f9a2 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8006ff4:	4b33      	ldr	r3, [pc, #204]	@ (80070c4 <scm_hserdy_isr+0xd8>)
 8006ff6:	69db      	ldr	r3, [r3, #28]

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8006ff8:	f013 0f0c 	tst.w	r3, #12
 8006ffc:	d14e      	bne.n	800709c <scm_hserdy_isr+0xb0>
  return ((READ_BIT(PWR->VOSR, PWR_VOSR_VOSRDY) == (PWR_VOSR_VOSRDY)) ? 1UL : 0UL);
 8006ffe:	4a32      	ldr	r2, [pc, #200]	@ (80070c8 <scm_hserdy_isr+0xdc>)
 8007000:	68d3      	ldr	r3, [r2, #12]
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	d5fc      	bpl.n	8007000 <scm_hserdy_isr+0x14>
  {
    /* Wait until VOS has changed */
    while (LL_PWR_IsActiveFlag_VOS() == 0);

    if(scm_system_clock_config.targeted_clock_freq == HSE_16MHZ)
 8007006:	4d31      	ldr	r5, [pc, #196]	@ (80070cc <scm_hserdy_isr+0xe0>)
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8007008:	4a2e      	ldr	r2, [pc, #184]	@ (80070c4 <scm_hserdy_isr+0xd8>)
 800700a:	782b      	ldrb	r3, [r5, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	6813      	ldr	r3, [r2, #0]
 8007010:	d049      	beq.n	80070a6 <scm_hserdy_isr+0xba>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEPRE);
 8007012:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007016:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8007018:	69d3      	ldr	r3, [r2, #28]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	f043 0302 	orr.w	r3, r3, #2
 8007022:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8007024:	69d3      	ldr	r3, [r2, #28]
 8007026:	f003 030c 	and.w	r3, r3, #12

      LL_RCC_HSE_DisablePrescaler();

      /* Switch to HSE */
      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
      while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800702a:	2b08      	cmp	r3, #8
 800702c:	d1fa      	bne.n	8007024 <scm_hserdy_isr+0x38>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800702e:	4b28      	ldr	r3, [pc, #160]	@ (80070d0 <scm_hserdy_isr+0xe4>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	f022 020f 	bic.w	r2, r2, #15
 8007036:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 8007038:	681c      	ldr	r4, [r3, #0]
 800703a:	f014 040f 	ands.w	r4, r4, #15
 800703e:	d1fb      	bne.n	8007038 <scm_hserdy_isr+0x4c>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 8007040:	4621      	mov	r1, r4
 8007042:	4824      	ldr	r0, [pc, #144]	@ (80070d4 <scm_hserdy_isr+0xe8>)
 8007044:	f002 f9ac 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 8007048:	4621      	mov	r1, r4
 800704a:	4823      	ldr	r0, [pc, #140]	@ (80070d8 <scm_hserdy_isr+0xec>)
 800704c:	f002 f9a8 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>

      scm_setwaitstates(HSE32); /* There is no limitation when in Range1 */

      if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 8007050:	782b      	ldrb	r3, [r5, #0]
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 8007052:	e9c5 4401 	strd	r4, r4, [r5, #4]
      if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 8007056:	2b03      	cmp	r3, #3
 8007058:	d110      	bne.n	800707c <scm_hserdy_isr+0x90>
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1REN);
 800705a:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <scm_hserdy_isr+0xd8>)
 800705c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800705e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007062:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 8007064:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007066:	f042 0203 	orr.w	r2, r2, #3
 800706a:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_PLL1_ENABLE();
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007072:	601a      	str	r2, [r3, #0]
  __HAL_RCC_ENABLE_IT(RCC_IT_PLL1RDY);
 8007074:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800707a:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CFGR4, RCC_CFGR4_HDIV5, Divider);
 800707c:	4a11      	ldr	r2, [pc, #68]	@ (80070c4 <scm_hserdy_isr+0xd8>)
 800707e:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
      /* Set HDIV 5 */
      LL_RCC_SetAHB5Divider(LL_RCC_AHB5_DIVIDER_1); /* divided by 1 */
    }

    /* As system switched to HSE, disable HSI */
    SCM_HSI_CLK_OFF();
 800708a:	f7ff fddf 	bl	8006c4c <SCM_HSI_CLK_OFF>

    /* Disable HSERDY interrupt */
    __HAL_RCC_DISABLE_IT(RCC_IT_HSERDY);
 800708e:	4a0d      	ldr	r2, [pc, #52]	@ (80070c4 <scm_hserdy_isr+0xd8>)
 8007090:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007092:	f023 0310 	bic.w	r3, r3, #16
 8007096:	6513      	str	r3, [r2, #80]	@ 0x50

    /* Ensure time base clock coherency */
    SystemCoreClockUpdate();
 8007098:	f000 fd32 	bl	8007b00 <SystemCoreClockUpdate>
  }

  SYSTEM_DEBUG_SIGNAL_RESET(SCM_HSERDY_ISR);
}
 800709c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_HSERDY_ISR);
 80070a0:	200e      	movs	r0, #14
 80070a2:	f7ff b94b 	b.w	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 80070a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070aa:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 80070ac:	69d3      	ldr	r3, [r2, #28]
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	f043 0302 	orr.w	r3, r3, #2
 80070b6:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 80070b8:	69d3      	ldr	r3, [r2, #28]
 80070ba:	f003 030c 	and.w	r3, r3, #12
      while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 80070be:	2b08      	cmp	r3, #8
 80070c0:	d1fa      	bne.n	80070b8 <scm_hserdy_isr+0xcc>
 80070c2:	e7e2      	b.n	800708a <scm_hserdy_isr+0x9e>
 80070c4:	46020c00 	.word	0x46020c00
 80070c8:	46020800 	.word	0x46020800
 80070cc:	20005ac0 	.word	0x20005ac0
 80070d0:	40022000 	.word	0x40022000
 80070d4:	2000019c 	.word	0x2000019c
 80070d8:	20000190 	.word	0x20000190

080070dc <scm_setup>:
  SYSTEM_DEBUG_SIGNAL_SET(SCM_SETUP);
 80070dc:	200c      	movs	r0, #12
{
 80070de:	b510      	push	{r4, lr}
  SYSTEM_DEBUG_SIGNAL_SET(SCM_SETUP);
 80070e0:	f7ff f92a 	bl	8006338 <SYSTEM_DEBUG_SIGNAL_SET>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80070e4:	4a3f      	ldr	r2, [pc, #252]	@ (80071e4 <scm_setup+0x108>)
 80070e6:	6813      	ldr	r3, [r2, #0]
 80070e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ec:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80070ee:	6813      	ldr	r3, [r2, #0]
 80070f0:	0399      	lsls	r1, r3, #14
 80070f2:	d503      	bpl.n	80070fc <scm_setup+0x20>
  if ((LL_RCC_HSE_IsReady() != 0) && (RadioState == SCM_RADIO_ACTIVE))
 80070f4:	4b3c      	ldr	r3, [pc, #240]	@ (80071e8 <scm_setup+0x10c>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d035      	beq.n	8007168 <scm_setup+0x8c>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80070fc:	4b3b      	ldr	r3, [pc, #236]	@ (80071ec <scm_setup+0x110>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	f022 020f 	bic.w	r2, r2, #15
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_1);
 800710a:	681c      	ldr	r4, [r3, #0]
 800710c:	f004 040f 	and.w	r4, r4, #15
 8007110:	2c01      	cmp	r4, #1
 8007112:	d1fa      	bne.n	800710a <scm_setup+0x2e>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_1);
 8007114:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8007118:	4835      	ldr	r0, [pc, #212]	@ (80071f0 <scm_setup+0x114>)
 800711a:	f002 f941 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_1);
 800711e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8007122:	4834      	ldr	r0, [pc, #208]	@ (80071f4 <scm_setup+0x118>)
 8007124:	f002 f93c 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_1;
 8007128:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800712c:	4b32      	ldr	r3, [pc, #200]	@ (80071f8 <scm_setup+0x11c>)
    if(scm_system_clock_config.targeted_clock_freq != HSE_16MHZ)
 800712e:	781a      	ldrb	r2, [r3, #0]
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_1;
 8007130:	e9c3 4101 	strd	r4, r1, [r3, #4]
    if(scm_system_clock_config.targeted_clock_freq != HSE_16MHZ)
 8007134:	2a01      	cmp	r2, #1
 8007136:	d003      	beq.n	8007140 <scm_setup+0x64>
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 8007138:	4a30      	ldr	r2, [pc, #192]	@ (80071fc <scm_setup+0x120>)
 800713a:	68d3      	ldr	r3, [r2, #12]
 800713c:	430b      	orrs	r3, r1
 800713e:	60d3      	str	r3, [r2, #12]
 8007140:	4b28      	ldr	r3, [pc, #160]	@ (80071e4 <scm_setup+0x108>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	0392      	lsls	r2, r2, #14
 8007146:	d408      	bmi.n	800715a <scm_setup+0x7e>
}
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_RCC_ENABLE_IT(RCC_IT_HSERDY);
 800714c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SETUP);
 800714e:	200c      	movs	r0, #12
      __HAL_RCC_ENABLE_IT(RCC_IT_HSERDY);
 8007150:	f042 0210 	orr.w	r2, r2, #16
 8007154:	651a      	str	r2, [r3, #80]	@ 0x50
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SETUP);
 8007156:	f7ff b8f1 	b.w	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
      scm_hserdy_isr();
 800715a:	f7ff ff47 	bl	8006fec <scm_hserdy_isr>
}
 800715e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SETUP);
 8007162:	200c      	movs	r0, #12
 8007164:	f7ff b8ea 	b.w	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 8007168:	69d3      	ldr	r3, [r2, #28]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	f043 0302 	orr.w	r3, r3, #2
 8007172:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8007174:	69d3      	ldr	r3, [r2, #28]
 8007176:	f003 030c 	and.w	r3, r3, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 800717a:	2b08      	cmp	r3, #8
 800717c:	d1fa      	bne.n	8007174 <scm_setup+0x98>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800717e:	4b1b      	ldr	r3, [pc, #108]	@ (80071ec <scm_setup+0x110>)
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	f022 020f 	bic.w	r2, r2, #15
 8007186:	601a      	str	r2, [r3, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_0);
 8007188:	681c      	ldr	r4, [r3, #0]
 800718a:	f014 040f 	ands.w	r4, r4, #15
 800718e:	d1fb      	bne.n	8007188 <scm_setup+0xac>
    HAL_RAMCFG_ConfigWaitState(&sram1_ns, RAMCFG_WAITSTATE_0);
 8007190:	4621      	mov	r1, r4
 8007192:	4817      	ldr	r0, [pc, #92]	@ (80071f0 <scm_setup+0x114>)
 8007194:	f002 f904 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
    HAL_RAMCFG_ConfigWaitState(&sram2_ns, RAMCFG_WAITSTATE_0);
 8007198:	4621      	mov	r1, r4
 800719a:	4816      	ldr	r0, [pc, #88]	@ (80071f4 <scm_setup+0x118>)
 800719c:	f002 f900 	bl	80093a0 <HAL_RAMCFG_ConfigWaitState>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80071a0:	4b10      	ldr	r3, [pc, #64]	@ (80071e4 <scm_setup+0x108>)
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 80071a2:	4a15      	ldr	r2, [pc, #84]	@ (80071f8 <scm_setup+0x11c>)
 80071a4:	6819      	ldr	r1, [r3, #0]
 80071a6:	6054      	str	r4, [r2, #4]
 80071a8:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80071ac:	6019      	str	r1, [r3, #0]
    if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 80071ae:	7811      	ldrb	r1, [r2, #0]
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_0;
 80071b0:	6094      	str	r4, [r2, #8]
    if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 80071b2:	2903      	cmp	r1, #3
 80071b4:	d10f      	bne.n	80071d6 <scm_setup+0xfa>
  SET_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1REN);
 80071b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071b8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80071bc:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC, PLL1Source);
 80071be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071c0:	f042 0203 	orr.w	r2, r2, #3
 80071c4:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_PLL1_ENABLE();
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80071cc:	601a      	str	r2, [r3, #0]
  __HAL_RCC_ENABLE_IT(RCC_IT_PLL1RDY);
 80071ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071d4:	651a      	str	r2, [r3, #80]	@ 0x50
    SystemCoreClockUpdate();
 80071d6:	f000 fc93 	bl	8007b00 <SystemCoreClockUpdate>
}
 80071da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SYSTEM_DEBUG_SIGNAL_RESET(SCM_SETUP);
 80071de:	200c      	movs	r0, #12
 80071e0:	f7ff b8ac 	b.w	800633c <SYSTEM_DEBUG_SIGNAL_RESET>
 80071e4:	46020c00 	.word	0x46020c00
 80071e8:	20005ab4 	.word	0x20005ab4
 80071ec:	40022000 	.word	0x40022000
 80071f0:	2000019c 	.word	0x2000019c
 80071f4:	20000190 	.word	0x20000190
 80071f8:	20005ac0 	.word	0x20005ac0
 80071fc:	46020800 	.word	0x46020800

08007200 <scm_init>:
{
 8007200:	b530      	push	{r4, r5, lr}
  memset(&(scm_system_clock_config.pll), 0, sizeof(scm_pll_config_t));
 8007202:	4d3b      	ldr	r5, [pc, #236]	@ (80072f0 <scm_init+0xf0>)
{
 8007204:	b083      	sub	sp, #12
  memset(&(scm_system_clock_config.pll), 0, sizeof(scm_pll_config_t));
 8007206:	2220      	movs	r2, #32
 8007208:	2100      	movs	r1, #0
 800720a:	4628      	mov	r0, r5
 800720c:	f024 fb74 	bl	802b8f8 <memset>
  scm_system_clock_config.flash_ws_cfg = __HAL_FLASH_GET_LATENCY();
 8007210:	4b38      	ldr	r3, [pc, #224]	@ (80072f4 <scm_init+0xf4>)
 8007212:	f1a5 040c 	sub.w	r4, r5, #12
 8007216:	681b      	ldr	r3, [r3, #0]
  scm_system_clock_config.sram_ws_cfg = HAL_RAMCFG_GetWaitState(&sram1_ns);
 8007218:	4837      	ldr	r0, [pc, #220]	@ (80072f8 <scm_init+0xf8>)
  scm_system_clock_config.flash_ws_cfg = __HAL_FLASH_GET_LATENCY();
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	6063      	str	r3, [r4, #4]
  scm_system_clock_config.sram_ws_cfg = HAL_RAMCFG_GetWaitState(&sram1_ns);
 8007220:	f002 f8d4 	bl	80093cc <HAL_RAMCFG_GetWaitState>
  RadioState = SCM_RADIO_NOT_ACTIVE;
 8007224:	2100      	movs	r1, #0
 8007226:	4a35      	ldr	r2, [pc, #212]	@ (80072fc <scm_init+0xfc>)
  __HAL_RCC_RAMCFG_CLK_ENABLE();
 8007228:	4b35      	ldr	r3, [pc, #212]	@ (8007300 <scm_init+0x100>)
  scm_system_clock_config.sram_ws_cfg = HAL_RAMCFG_GetWaitState(&sram1_ns);
 800722a:	60a0      	str	r0, [r4, #8]
  RadioState = SCM_RADIO_NOT_ACTIVE;
 800722c:	7011      	strb	r1, [r2, #0]
  __HAL_RCC_RAMCFG_CLK_ENABLE();
 800722e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007232:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800723a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800723e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8007242:	9201      	str	r2, [sp, #4]
 8007244:	9a01      	ldr	r2, [sp, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	f002 020c 	and.w	r2, r2, #12
  switch(LL_RCC_GetSysClkSource())
 800724c:	2a08      	cmp	r2, #8
 800724e:	d004      	beq.n	800725a <scm_init+0x5a>
 8007250:	2a0c      	cmp	r2, #12
 8007252:	d021      	beq.n	8007298 <scm_init+0x98>
 8007254:	b152      	cbz	r2, 800726c <scm_init+0x6c>
}
 8007256:	b003      	add	sp, #12
 8007258:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == RCC_CR_HSEPRE) ? 1UL : 0UL);
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	02db      	lsls	r3, r3, #11
        scm_system_clock_config.targeted_clock_freq = HSE_16MHZ;
 800725e:	bf4c      	ite	mi
 8007260:	2301      	movmi	r3, #1
        scm_system_clock_config.targeted_clock_freq = HSE_32MHZ;
 8007262:	2302      	movpl	r3, #2
 8007264:	f805 3c0c 	strb.w	r3, [r5, #-12]
}
 8007268:	b003      	add	sp, #12
 800726a:	bd30      	pop	{r4, r5, pc}
      scm_system_clock_config.targeted_clock_freq = HSE_16MHZ;
 800726c:	2201      	movs	r2, #1
 800726e:	f805 2c0c 	strb.w	r2, [r5, #-12]
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007278:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR4, RCC_CFGR4_HDIV5, Divider);
 800727a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800727e:	f042 0210 	orr.w	r2, r2, #16
 8007282:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      scm_setup();
 8007286:	f7ff ff29 	bl	80070dc <scm_setup>
 800728a:	4a1e      	ldr	r2, [pc, #120]	@ (8007304 <scm_init+0x104>)
 800728c:	68d3      	ldr	r3, [r2, #12]
 800728e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007292:	60d3      	str	r3, [r2, #12]
}
 8007294:	b003      	add	sp, #12
 8007296:	bd30      	pop	{r4, r5, pc}
        scm_system_clock_config.targeted_clock_freq = SYS_PLL;
 8007298:	2203      	movs	r2, #3
 800729a:	f805 2c0c 	strb.w	r2, [r5, #-12]
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos) + 1UL);
 800729e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 80072a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos) + 1UL);
 80072a2:	f3c1 2102 	ubfx	r1, r1, #8, #3
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 80072a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos) + 1UL);
 80072aa:	3101      	adds	r1, #1
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 80072ac:	3201      	adds	r2, #1
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 80072ae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
        scm_system_clock_config.pll.PLLN = LL_RCC_PLL1_GetN();
 80072b0:	e9c4 1204 	strd	r1, r2, [r4, #16]
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q) >>  RCC_PLL1DIVR_PLL1Q_Pos) + 1UL);
 80072b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 80072b6:	f3c0 2046 	ubfx	r0, r0, #9, #7
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q) >>  RCC_PLL1DIVR_PLL1Q_Pos) + 1UL);
 80072ba:	f3c1 4106 	ubfx	r1, r1, #16, #7
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1P) >>  RCC_PLL1DIVR_PLL1P_Pos) + 1UL);
 80072be:	3001      	adds	r0, #1
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1Q) >>  RCC_PLL1DIVR_PLL1Q_Pos) + 1UL);
 80072c0:	3101      	adds	r1, #1
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R) >>  RCC_PLL1DIVR_PLL1R_Pos) + 1UL);
 80072c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        scm_system_clock_config.pll.PLLQ = LL_RCC_PLL1_GetQ();
 80072c4:	e9c4 0106 	strd	r0, r1, [r4, #24]
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >>  RCC_PLL1FRACR_PLL1FRACN_Pos);
 80072c8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R) >>  RCC_PLL1DIVR_PLL1R_Pos) + 1UL);
 80072ca:	f3c2 6206 	ubfx	r2, r2, #24, #7
  return (uint32_t)(READ_BIT(RCC->CFGR4, RCC_CFGR4_HPRE5));
 80072ce:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >>  RCC_PLL1FRACR_PLL1FRACN_Pos);
 80072d2:	f3c1 03cc 	ubfx	r3, r1, #3, #13
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R) >>  RCC_PLL1DIVR_PLL1R_Pos) + 1UL);
 80072d6:	3201      	adds	r2, #1
        if(scm_system_clock_config.pll.PLLFractional == PLL_FRACTIONAL_MODE)
 80072d8:	2b02      	cmp	r3, #2
        scm_system_clock_config.pll.PLLFractional = LL_RCC_PLL1_GetFRACN();
 80072da:	e9c4 2308 	strd	r2, r3, [r4, #32]
          scm_system_clock_config.pll.pll_mode = PLL_INTEGER_MODE;
 80072de:	bf18      	it	ne
 80072e0:	2301      	movne	r3, #1
  return (uint32_t)(READ_BIT(RCC->CFGR4, RCC_CFGR4_HPRE5));
 80072e2:	f000 0007 	and.w	r0, r0, #7
        scm_system_clock_config.pll.AHB5_PLL1_CLKDivider = LL_RCC_GetAHB5Prescaler();
 80072e6:	62a0      	str	r0, [r4, #40]	@ 0x28
          scm_system_clock_config.pll.pll_mode = PLL_INTEGER_MODE;
 80072e8:	7363      	strb	r3, [r4, #13]
}
 80072ea:	b003      	add	sp, #12
 80072ec:	bd30      	pop	{r4, r5, pc}
 80072ee:	bf00      	nop
 80072f0:	20005acc 	.word	0x20005acc
 80072f4:	40022000 	.word	0x40022000
 80072f8:	2000019c 	.word	0x2000019c
 80072fc:	20005ab4 	.word	0x20005ab4
 8007300:	46020c00 	.word	0x46020c00
 8007304:	46020800 	.word	0x46020800

08007308 <scm_pllrdy_isr>:
  *         Switch system clock on PLL.
  * @param  None
  * @retval None
  */
OPTIMIZED void scm_pllrdy_isr(void)
{
 8007308:	b508      	push	{r3, lr}
  if(scm_system_clock_config.targeted_clock_freq == SYS_PLL)
 800730a:	4915      	ldr	r1, [pc, #84]	@ (8007360 <scm_pllrdy_isr+0x58>)
 800730c:	780b      	ldrb	r3, [r1, #0]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d009      	beq.n	8007326 <scm_pllrdy_isr+0x1e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8007312:	4b14      	ldr	r3, [pc, #80]	@ (8007364 <scm_pllrdy_isr+0x5c>)
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800731a:	601a      	str	r2, [r3, #0]
      */
    /* Disable PLL */
    LL_RCC_PLL1_Disable();

    /* Disable PLL1RDY interrupt */
    __HAL_RCC_DISABLE_IT(RCC_IT_PLL1RDY);
 800731c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007322:	651a      	str	r2, [r3, #80]	@ 0x50
  }
}
 8007324:	bd08      	pop	{r3, pc}
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_3);
 8007326:	4a10      	ldr	r2, [pc, #64]	@ (8007368 <scm_pllrdy_isr+0x60>)
 8007328:	6813      	ldr	r3, [r2, #0]
 800732a:	f023 030f 	bic.w	r3, r3, #15
 800732e:	f043 0303 	orr.w	r3, r3, #3
 8007332:	6013      	str	r3, [r2, #0]
    while(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_3);
 8007334:	6813      	ldr	r3, [r2, #0]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	2b03      	cmp	r3, #3
 800733c:	d1fa      	bne.n	8007334 <scm_pllrdy_isr+0x2c>
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, Source);
 800733e:	4a09      	ldr	r2, [pc, #36]	@ (8007364 <scm_pllrdy_isr+0x5c>)
    scm_system_clock_config.flash_ws_cfg = FLASH_LATENCY_3;
 8007340:	604b      	str	r3, [r1, #4]
 8007342:	69d3      	ldr	r3, [r2, #28]
 8007344:	f043 0303 	orr.w	r3, r3, #3
 8007348:	61d3      	str	r3, [r2, #28]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 800734a:	69d3      	ldr	r3, [r2, #28]
 800734c:	f003 030c 	and.w	r3, r3, #12
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1R);
 8007350:	2b0c      	cmp	r3, #12
 8007352:	d1fa      	bne.n	800734a <scm_pllrdy_isr+0x42>
    SystemCoreClockUpdate();
 8007354:	f000 fbd4 	bl	8007b00 <SystemCoreClockUpdate>
    scm_pllready();
 8007358:	f7ff fcd0 	bl	8006cfc <scm_pllready>
}
 800735c:	bd08      	pop	{r3, pc}
 800735e:	bf00      	nop
 8007360:	20005ac0 	.word	0x20005ac0
 8007364:	46020c00 	.word	0x46020c00
 8007368:	40022000 	.word	0x40022000

0800736c <scm_notifyradiostate>:
  *         @arg SCM_RADIO_NOT_ACTIVE
  * @retval None
  */
OPTIMIZED void scm_notifyradiostate(const scm_radio_state_t radio_state)
{
  if(radio_state != SCM_RADIO_NOT_ACTIVE)
 800736c:	b128      	cbz	r0, 800737a <scm_notifyradiostate+0xe>
  {
    RadioState = SCM_RADIO_ACTIVE; /* shall be set before calling scm_setsystemclock() */
 800736e:	2001      	movs	r0, #1
 8007370:	4b05      	ldr	r3, [pc, #20]	@ (8007388 <scm_notifyradiostate+0x1c>)
    scm_setsystemclock(SCM_USER_LL_FW, HSE_32MHZ); /* shall be set before calling scm_setsystemclock() */
 8007372:	2102      	movs	r1, #2
    RadioState = SCM_RADIO_ACTIVE; /* shall be set before calling scm_setsystemclock() */
 8007374:	7018      	strb	r0, [r3, #0]
    scm_setsystemclock(SCM_USER_LL_FW, HSE_32MHZ); /* shall be set before calling scm_setsystemclock() */
 8007376:	f7ff bcc3 	b.w	8006d00 <scm_setsystemclock>
  }
  else
  {
    RadioState = SCM_RADIO_NOT_ACTIVE;
    scm_setsystemclock(SCM_USER_LL_FW, HSE_16MHZ);
 800737a:	2101      	movs	r1, #1
    RadioState = SCM_RADIO_NOT_ACTIVE;
 800737c:	4b02      	ldr	r3, [pc, #8]	@ (8007388 <scm_notifyradiostate+0x1c>)
 800737e:	7018      	strb	r0, [r3, #0]
    scm_setsystemclock(SCM_USER_LL_FW, HSE_16MHZ);
 8007380:	4608      	mov	r0, r1
 8007382:	f7ff bcbd 	b.w	8006d00 <scm_setsystemclock>
 8007386:	bf00      	nop
 8007388:	20005ab4 	.word	0x20005ab4

0800738c <LST_init_head>:
/******************************************************************************
 * Function Definitions
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800738c:	6000      	str	r0, [r0, #0]
 800738e:	6040      	str	r0, [r0, #4]
  listHead->prev = listHead;
}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop

08007394 <LST_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007394:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007398:	b672      	cpsid	i
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800739a:	6802      	ldr	r2, [r0, #0]
 800739c:	1a80      	subs	r0, r0, r2
 800739e:	fab0 f080 	clz	r0, r0
 80073a2:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a4:	f383 8810 	msr	PRIMASK, r3
    return_value = FALSE;
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop

080073ac <LST_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073ac:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073b0:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80073b2:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 80073b4:	6048      	str	r0, [r1, #4]
  node->next = listHead->next;
 80073b6:	600a      	str	r2, [r1, #0]
  listHead->next = node;
 80073b8:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 80073ba:	680a      	ldr	r2, [r1, #0]
 80073bc:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073be:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073c2:	4770      	bx	lr

080073c4 <LST_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073c4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073c8:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80073ca:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 80073cc:	6842      	ldr	r2, [r0, #4]
 80073ce:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 80073d0:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 80073d2:	684a      	ldr	r2, [r1, #4]
 80073d4:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d6:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073da:	4770      	bx	lr

080073dc <LST_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073dc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073e0:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80073e2:	6801      	ldr	r1, [r0, #0]
 80073e4:	6843      	ldr	r3, [r0, #4]
 80073e6:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 80073e8:	6801      	ldr	r1, [r0, #0]
 80073ea:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ec:	f382 8810 	msr	PRIMASK, r2

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop

080073f4 <LST_remove_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073f4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80073f8:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80073fa:	6803      	ldr	r3, [r0, #0]
 80073fc:	600b      	str	r3, [r1, #0]
  LST_remove_node (listHead->next);
 80073fe:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007400:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007404:	b672      	cpsid	i
  (node->prev)->next = node->next;
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	6010      	str	r0, [r2, #0]
  (node->next)->prev = node->prev;
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	f381 8810 	msr	PRIMASK, r1
 8007414:	f38c 8810 	msr	PRIMASK, ip

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop

0800741c <LST_get_next_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800741c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007420:	b672      	cpsid	i
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = ref_node->next;
 8007422:	6802      	ldr	r2, [r0, #0]
 8007424:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007426:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800742a:	4770      	bx	lr

0800742c <TEMPMEAS_Init>:
extern void Error_Handler(void);

/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
TEMPMEAS_Cmd_Status_t TEMPMEAS_Init (void)
{
 800742c:	b508      	push	{r3, lr}
  TEMPMEAS_Cmd_Status_t error = TEMPMEAS_UNKNOWN;

  ADCCTRL_Cmd_Status_t eReturn = ADCCTRL_UNKNOWN;

  eReturn = ADCCTRL_RegisterHandle (&LLTempRequest_Handle);
 800742e:	4806      	ldr	r0, [pc, #24]	@ (8007448 <TEMPMEAS_Init+0x1c>)
 8007430:	f7ff f8de 	bl	80065f0 <ADCCTRL_RegisterHandle>

  if ((ADCCTRL_HANDLE_ALREADY_REGISTERED == eReturn) ||
 8007434:	2803      	cmp	r0, #3
 8007436:	d004      	beq.n	8007442 <TEMPMEAS_Init+0x16>
 8007438:	3800      	subs	r0, #0
 800743a:	bf18      	it	ne
 800743c:	2001      	movne	r0, #1
 800743e:	0040      	lsls	r0, r0, #1
  {
    error = TEMPMEAS_ADC_INIT;
  }

  return error;
}
 8007440:	bd08      	pop	{r3, pc}
    error = TEMPMEAS_OK;
 8007442:	2000      	movs	r0, #0
}
 8007444:	bd08      	pop	{r3, pc}
 8007446:	bf00      	nop
 8007448:	20000030 	.word	0x20000030

0800744c <TEMPMEAS_RequestTemperatureMeasurement>:

void TEMPMEAS_RequestTemperatureMeasurement (void)
{
 800744c:	b570      	push	{r4, r5, r6, lr}
  uint16_t temperature_value = 0;
 800744e:	2500      	movs	r5, #0
{
 8007450:	b082      	sub	sp, #8
  uint16_t temperature_value = 0;
 8007452:	f8ad 5006 	strh.w	r5, [sp, #6]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007456:	f3ef 8611 	mrs	r6, BASEPRI
  __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 800745a:	2310      	movs	r3, #16
 800745c:	f383 8812 	msr	BASEPRI_MAX, r3
   * Concerns link layer interrupts (high and SW low) or any other high priority user system interrupt
   */
  UTILS_ENTER_LIMITED_CRITICAL_SECTION(RCC_INTR_PRIO<<4);

  /* Request ADC IP activation */
  ADCCTRL_RequestIpState(&LLTempRequest_Handle, ADC_ON);
 8007460:	4c0a      	ldr	r4, [pc, #40]	@ (800748c <TEMPMEAS_RequestTemperatureMeasurement+0x40>)
 8007462:	2101      	movs	r1, #1
 8007464:	4620      	mov	r0, r4
 8007466:	f7fe ffbf 	bl	80063e8 <ADCCTRL_RequestIpState>

  /* Get temperature from ADC dedicated channel */
  ADCCTRL_RequestTemperature (&LLTempRequest_Handle,
 800746a:	f10d 0106 	add.w	r1, sp, #6
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff f8de 	bl	8006630 <ADCCTRL_RequestTemperature>
                              &temperature_value);

  /* Request ADC IP deactivation */
  ADCCTRL_RequestIpState(&LLTempRequest_Handle, ADC_OFF);
 8007474:	4629      	mov	r1, r5
 8007476:	4620      	mov	r0, r4
 8007478:	f7fe ffb6 	bl	80063e8 <ADCCTRL_RequestIpState>

  /* Give the temperature information to the link layer */
  ll_intf_cmn_set_temperature_value(temperature_value);
 800747c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007480:	f019 fc36 	bl	8020cf0 <ll_intf_cmn_set_temperature_value>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007484:	f386 8811 	msr	BASEPRI, r6

  /* Exit limited critical section */
  UTILS_EXIT_LIMITED_CRITICAL_SECTION();
}
 8007488:	b002      	add	sp, #8
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	20000030 	.word	0x20000030

08007490 <BAES_CmacSetKey>:
 * Initialization for AES-CMAC for Authentication TAG Generation.
 * Must be called each time a new CMAC has to be computed.
 */

void BAES_CmacSetKey( const uint8_t* key )
{
 8007490:	b510      	push	{r4, lr}
 8007492:	4604      	mov	r4, r0

  /* Initialize for ECB encoding */

#if CFG_BAES_SW == 0

  HW_AES_Enable( );
 8007494:	f7fb faf2 	bl	8002a7c <HW_AES_Enable>
  HW_AES_SetKey( HW_AES_ENC, key );
 8007498:	4621      	mov	r1, r4
 800749a:	2001      	movs	r0, #1
 800749c:	f7fb fb10 	bl	8002ac0 <HW_AES_SetKey>
  BAES_EncKeySchedule( av->exp_key );

#endif /* CFG_BAES_SW != 0 */

  /* set IV to zero */
  av->iv[0] = av->iv[1] = av->iv[2] = av->iv[3] = 0;
 80074a0:	2000      	movs	r0, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	4b02      	ldr	r3, [pc, #8]	@ (80074b0 <BAES_CmacSetKey+0x20>)
 80074a6:	e9c3 0100 	strd	r0, r1, [r3]
 80074aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	20005af0 	.word	0x20005af0

080074b4 <BAES_CmacCompute>:
 */

void BAES_CmacCompute( const uint8_t* input,
                       uint32_t size,
                       uint8_t* output )
{
 80074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BAES_CMAC_t *av = &BAES_CMAC_var;
  uint32_t i, last_size;
  uint32_t tmp[4], key[4];
  const uint8_t* ptr = input;

  if ( output )
 80074b8:	4691      	mov	r9, r2
{
 80074ba:	b089      	sub	sp, #36	@ 0x24
  if ( output )
 80074bc:	2a00      	cmp	r2, #0
 80074be:	f000 8145 	beq.w	800774c <BAES_CmacCompute+0x298>
  {
    /* In case of final append, compute size of last block */
    last_size = size % 16;
    if ( (size != 0) && (last_size == 0) )
 80074c2:	2900      	cmp	r1, #0
 80074c4:	f040 808c 	bne.w	80075e0 <BAES_CmacCompute+0x12c>
  }

  if ( output )
  {
    /* Load the input bytes left with 0 padding */
    tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 80074c8:	2200      	movs	r2, #0
 80074ca:	2300      	movs	r3, #0
    last_size = size % 16;
 80074cc:	468a      	mov	sl, r1
 80074ce:	466e      	mov	r6, sp
    tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 80074d0:	e9cd 2300 	strd	r2, r3, [sp]
 80074d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    for ( i = 0; i < last_size; i++ )
 80074d8:	4da0      	ldr	r5, [pc, #640]	@ (800775c <BAES_CmacCompute+0x2a8>)
    {
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
    }

    /* Compute K1 */
    key[0] = key[1] = key[2] = key[3] = 0;
 80074da:	2200      	movs	r2, #0
 80074dc:	2300      	movs	r3, #0
  HW_AES_Crypt( input, output );
 80074de:	a904      	add	r1, sp, #16
 80074e0:	4608      	mov	r0, r1
    key[0] = key[1] = key[2] = key[3] = 0;
 80074e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HW_AES_Crypt( input, output );
 80074ea:	f7fb fb37 	bl	8002b5c <HW_AES_Crypt>
  key[0] = (key[0] << 1) | (key[1] >> 31);
 80074ee:	e9dd 4204 	ldrd	r4, r2, [sp, #16]
  key[2] = (key[2] << 1) | (key[3] >> 31);
 80074f2:	e9dd 1006 	ldrd	r1, r0, [sp, #24]
  uint32_t carry = ((key[0] >> 31) & 1) * 0x87UL;
 80074f6:	0fe3      	lsrs	r3, r4, #31
 80074f8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80074fc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  key[3] = (key[3] << 1) ^ carry;
 8007500:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  key[2] = (key[2] << 1) | (key[3] >> 31);
 8007504:	0fc0      	lsrs	r0, r0, #31
 8007506:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
  key[1] = (key[1] << 1) | (key[2] >> 31);
 800750a:	0fc9      	lsrs	r1, r1, #31
 800750c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
  key[0] = (key[0] << 1) | (key[1] >> 31);
 8007510:	0fd2      	lsrs	r2, r2, #31
 8007512:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    BAES_CmacRawEncrypt( key, key );
    BAES_CmacKeyRoll( key );

    /* Add padding and compute K2 if the last block is not full */
    if ( last_size < 16 )
 8007516:	f1ba 0f10 	cmp.w	sl, #16
  key[1] = (key[1] << 1) | (key[2] >> 31);
 800751a:	e9cd 2104 	strd	r2, r1, [sp, #16]
  key[3] = (key[3] << 1) ^ carry;
 800751e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    if ( last_size < 16 )
 8007522:	d027      	beq.n	8007574 <BAES_CmacCompute+0xc0>
    {
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 8007524:	ea6f 070a 	mvn.w	r7, sl
 8007528:	f02a 0a03 	bic.w	sl, sl, #3
 800752c:	f10a 0420 	add.w	r4, sl, #32
 8007530:	eb0d 0a04 	add.w	sl, sp, r4
 8007534:	2480      	movs	r4, #128	@ 0x80
  uint32_t carry = ((key[0] >> 31) & 1) * 0x87UL;
 8007536:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
 800753a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800753e:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
  key[3] = (key[3] << 1) ^ carry;
 8007542:	ea8c 0c43 	eor.w	ip, ip, r3, lsl #1
  key[2] = (key[2] << 1) | (key[3] >> 31);
 8007546:	0fdb      	lsrs	r3, r3, #31
 8007548:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 800754c:	f007 0703 	and.w	r7, r7, #3
  key[2] = (key[2] << 1) | (key[3] >> 31);
 8007550:	9306      	str	r3, [sp, #24]
  key[1] = (key[1] << 1) | (key[2] >> 31);
 8007552:	0fc0      	lsrs	r0, r0, #31
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 8007554:	f85a 3c20 	ldr.w	r3, [sl, #-32]
 8007558:	00ff      	lsls	r7, r7, #3
  key[1] = (key[1] << 1) | (key[2] >> 31);
 800755a:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 800755e:	40bc      	lsls	r4, r7
  key[0] = (key[0] << 1) | (key[1] >> 31);
 8007560:	0fc9      	lsrs	r1, r1, #31
 8007562:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 8007566:	431c      	orrs	r4, r3
  key[3] = (key[3] << 1) ^ carry;
 8007568:	f8cd c01c 	str.w	ip, [sp, #28]
  key[1] = (key[1] << 1) | (key[2] >> 31);
 800756c:	9005      	str	r0, [sp, #20]
  key[0] = (key[0] << 1) | (key[1] >> 31);
 800756e:	9104      	str	r1, [sp, #16]
      BAES_OR_BYTE_BE( tmp, last_size, 0x80 );
 8007570:	f84a 4c20 	str.w	r4, [sl, #-32]
    }

    /* Xor data with previous tag and key */
    for ( i = 0; i < 4; i++ )
    {
      tmp[i] ^= av->iv[i] ^ key[i];
 8007574:	9b00      	ldr	r3, [sp, #0]
 8007576:	682a      	ldr	r2, [r5, #0]
 8007578:	68e8      	ldr	r0, [r5, #12]
 800757a:	4053      	eors	r3, r2
 800757c:	9a04      	ldr	r2, [sp, #16]
 800757e:	4053      	eors	r3, r2
 8007580:	9a02      	ldr	r2, [sp, #8]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 8007588:	405a      	eors	r2, r3
 800758a:	9b01      	ldr	r3, [sp, #4]
 800758c:	4059      	eors	r1, r3
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	4043      	eors	r3, r0
 8007592:	9805      	ldr	r0, [sp, #20]
 8007594:	4041      	eors	r1, r0
 8007596:	9101      	str	r1, [sp, #4]
 8007598:	9906      	ldr	r1, [sp, #24]
  HW_AES_Crypt( input, output );
 800759a:	4630      	mov	r0, r6
      tmp[i] ^= av->iv[i] ^ key[i];
 800759c:	404a      	eors	r2, r1
 800759e:	9202      	str	r2, [sp, #8]
 80075a0:	9a07      	ldr	r2, [sp, #28]
  HW_AES_Crypt( input, output );
 80075a2:	496e      	ldr	r1, [pc, #440]	@ (800775c <BAES_CmacCompute+0x2a8>)
      tmp[i] ^= av->iv[i] ^ key[i];
 80075a4:	4053      	eors	r3, r2
 80075a6:	9303      	str	r3, [sp, #12]
  HW_AES_Crypt( input, output );
 80075a8:	f7fb fad8 	bl	8002b5c <HW_AES_Crypt>
    /* Encrypt block */
    BAES_CmacRawEncrypt( tmp, av->iv );

#if CFG_BAES_SW == 0

    HW_AES_Disable( );
 80075ac:	f7fb faf4 	bl	8002b98 <HW_AES_Disable>
  return __builtin_bswap32(value);
 80075b0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80075b4:	e9d5 1000 	ldrd	r1, r0, [r5]
 80075b8:	ba12      	rev	r2, r2
 80075ba:	ba1b      	rev	r3, r3

#endif /* CFG_BAES_SW == 0 */

    /* Write the tag */
    BAES_COPY_REV( tmp, av->iv );
 80075bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075c0:	ba00      	rev	r0, r0
 80075c2:	ba09      	rev	r1, r1
 80075c4:	9001      	str	r0, [sp, #4]
 80075c6:	9100      	str	r1, [sp, #0]
    memcpy( output, tmp, 16 );
 80075c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80075ca:	f8c9 0000 	str.w	r0, [r9]
 80075ce:	f8c9 1004 	str.w	r1, [r9, #4]
 80075d2:	f8c9 2008 	str.w	r2, [r9, #8]
 80075d6:	f8c9 300c 	str.w	r3, [r9, #12]
  }
}
 80075da:	b009      	add	sp, #36	@ 0x24
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      last_size = 16;
 80075e0:	f011 0a0f 	ands.w	sl, r1, #15
 80075e4:	bf08      	it	eq
 80075e6:	f04f 0a10 	moveq.w	sl, #16
  while ( size )
 80075ea:	ebb1 010a 	subs.w	r1, r1, sl
 80075ee:	f000 80b1 	beq.w	8007754 <BAES_CmacCompute+0x2a0>
 80075f2:	4d5a      	ldr	r5, [pc, #360]	@ (800775c <BAES_CmacCompute+0x2a8>)
 80075f4:	1847      	adds	r7, r0, r1
      last_size = 16;
 80075f6:	4604      	mov	r4, r0
 80075f8:	466e      	mov	r6, sp
  HW_AES_Crypt( input, output );
 80075fa:	46a8      	mov	r8, r5
 80075fc:	46bb      	mov	fp, r7
    memcpy( tmp, ptr, 16 );
 80075fe:	46b4      	mov	ip, r6
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	6861      	ldr	r1, [r4, #4]
 8007604:	68a2      	ldr	r2, [r4, #8]
 8007606:	68e3      	ldr	r3, [r4, #12]
    BAES_REV_XOR( tmp, av->iv );
 8007608:	68af      	ldr	r7, [r5, #8]
    memcpy( tmp, ptr, 16 );
 800760a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    BAES_REV_XOR( tmp, av->iv );
 800760e:	6829      	ldr	r1, [r5, #0]
 8007610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007614:	ba12      	rev	r2, r2
 8007616:	404a      	eors	r2, r1
 8007618:	6869      	ldr	r1, [r5, #4]
 800761a:	ba1b      	rev	r3, r3
 800761c:	404b      	eors	r3, r1
 800761e:	e9cd 2300 	strd	r2, r3, [sp]
 8007622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007626:	ba12      	rev	r2, r2
 8007628:	407a      	eors	r2, r7
 800762a:	68ef      	ldr	r7, [r5, #12]
 800762c:	ba1b      	rev	r3, r3
 800762e:	407b      	eors	r3, r7
  HW_AES_Crypt( input, output );
 8007630:	4641      	mov	r1, r8
 8007632:	4630      	mov	r0, r6
    ptr += 16;
 8007634:	3410      	adds	r4, #16
    BAES_REV_XOR( tmp, av->iv );
 8007636:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HW_AES_Crypt( input, output );
 800763a:	f7fb fa8f 	bl	8002b5c <HW_AES_Crypt>
  while ( size )
 800763e:	455c      	cmp	r4, fp
 8007640:	d1dd      	bne.n	80075fe <BAES_CmacCompute+0x14a>
  if ( output )
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	d0c8      	beq.n	80075da <BAES_CmacCompute+0x126>
    tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 8007648:	2000      	movs	r0, #0
 800764a:	2100      	movs	r1, #0
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800764c:	7823      	ldrb	r3, [r4, #0]
    for ( i = 0; i < last_size; i++ )
 800764e:	f1ba 0f01 	cmp.w	sl, #1
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007652:	ea4f 6303 	mov.w	r3, r3, lsl #24
    tmp[0] = tmp[1] = tmp[2] = tmp[3] = 0;
 8007656:	e9cd 0100 	strd	r0, r1, [sp]
 800765a:	e9cd 0102 	strd	r0, r1, [sp, #8]
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800765e:	9300      	str	r3, [sp, #0]
    for ( i = 0; i < last_size; i++ )
 8007660:	f43f af3b 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007664:	7862      	ldrb	r2, [r4, #1]
    for ( i = 0; i < last_size; i++ )
 8007666:	f1ba 0f02 	cmp.w	sl, #2
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800766a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800766e:	9300      	str	r3, [sp, #0]
    for ( i = 0; i < last_size; i++ )
 8007670:	f43f af33 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007674:	78a2      	ldrb	r2, [r4, #2]
    for ( i = 0; i < last_size; i++ )
 8007676:	f1ba 0f03 	cmp.w	sl, #3
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800767a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800767e:	9300      	str	r3, [sp, #0]
    for ( i = 0; i < last_size; i++ )
 8007680:	f43f af2b 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007684:	78e2      	ldrb	r2, [r4, #3]
    for ( i = 0; i < last_size; i++ )
 8007686:	f1ba 0f04 	cmp.w	sl, #4
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800768a:	ea43 0302 	orr.w	r3, r3, r2
 800768e:	9300      	str	r3, [sp, #0]
    for ( i = 0; i < last_size; i++ )
 8007690:	f43f af23 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007694:	7923      	ldrb	r3, [r4, #4]
    for ( i = 0; i < last_size; i++ )
 8007696:	f1ba 0f05 	cmp.w	sl, #5
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800769a:	ea4f 6303 	mov.w	r3, r3, lsl #24
 800769e:	9301      	str	r3, [sp, #4]
    for ( i = 0; i < last_size; i++ )
 80076a0:	f43f af1b 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076a4:	7962      	ldrb	r2, [r4, #5]
    for ( i = 0; i < last_size; i++ )
 80076a6:	f1ba 0f06 	cmp.w	sl, #6
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ae:	9301      	str	r3, [sp, #4]
    for ( i = 0; i < last_size; i++ )
 80076b0:	f43f af13 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076b4:	79a2      	ldrb	r2, [r4, #6]
    for ( i = 0; i < last_size; i++ )
 80076b6:	f1ba 0f07 	cmp.w	sl, #7
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076be:	9301      	str	r3, [sp, #4]
    for ( i = 0; i < last_size; i++ )
 80076c0:	f43f af0b 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076c4:	79e2      	ldrb	r2, [r4, #7]
    for ( i = 0; i < last_size; i++ )
 80076c6:	f1ba 0f08 	cmp.w	sl, #8
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076ca:	ea43 0302 	orr.w	r3, r3, r2
 80076ce:	9301      	str	r3, [sp, #4]
    for ( i = 0; i < last_size; i++ )
 80076d0:	f43f af03 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076d4:	7a23      	ldrb	r3, [r4, #8]
    for ( i = 0; i < last_size; i++ )
 80076d6:	f1ba 0f09 	cmp.w	sl, #9
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076da:	ea4f 6303 	mov.w	r3, r3, lsl #24
 80076de:	9302      	str	r3, [sp, #8]
    for ( i = 0; i < last_size; i++ )
 80076e0:	f43f aefb 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076e4:	7a62      	ldrb	r2, [r4, #9]
    for ( i = 0; i < last_size; i++ )
 80076e6:	f1ba 0f0a 	cmp.w	sl, #10
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ee:	9302      	str	r3, [sp, #8]
    for ( i = 0; i < last_size; i++ )
 80076f0:	f43f aef3 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076f4:	7aa2      	ldrb	r2, [r4, #10]
    for ( i = 0; i < last_size; i++ )
 80076f6:	f1ba 0f0b 	cmp.w	sl, #11
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 80076fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80076fe:	9302      	str	r3, [sp, #8]
    for ( i = 0; i < last_size; i++ )
 8007700:	f43f aeeb 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007704:	7ae2      	ldrb	r2, [r4, #11]
    for ( i = 0; i < last_size; i++ )
 8007706:	f1ba 0f0c 	cmp.w	sl, #12
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800770a:	ea43 0302 	orr.w	r3, r3, r2
 800770e:	9302      	str	r3, [sp, #8]
    for ( i = 0; i < last_size; i++ )
 8007710:	f43f aee3 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007714:	7b23      	ldrb	r3, [r4, #12]
    for ( i = 0; i < last_size; i++ )
 8007716:	f1ba 0f0d 	cmp.w	sl, #13
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800771a:	ea4f 6303 	mov.w	r3, r3, lsl #24
 800771e:	9303      	str	r3, [sp, #12]
    for ( i = 0; i < last_size; i++ )
 8007720:	f43f aedb 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007724:	7b62      	ldrb	r2, [r4, #13]
    for ( i = 0; i < last_size; i++ )
 8007726:	f1ba 0f0e 	cmp.w	sl, #14
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800772a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772e:	9303      	str	r3, [sp, #12]
    for ( i = 0; i < last_size; i++ )
 8007730:	f43f aed3 	beq.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007734:	7ba2      	ldrb	r2, [r4, #14]
    for ( i = 0; i < last_size; i++ )
 8007736:	f1ba 0f10 	cmp.w	sl, #16
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 800773a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800773e:	9303      	str	r3, [sp, #12]
    for ( i = 0; i < last_size; i++ )
 8007740:	f47f aecb 	bne.w	80074da <BAES_CmacCompute+0x26>
      BAES_OR_BYTE_BE( tmp, i, ptr[i] );
 8007744:	7be2      	ldrb	r2, [r4, #15]
 8007746:	4313      	orrs	r3, r2
 8007748:	9303      	str	r3, [sp, #12]
    for ( i = 0; i < last_size; i++ )
 800774a:	e6c6      	b.n	80074da <BAES_CmacCompute+0x26>
  while ( size )
 800774c:	2900      	cmp	r1, #0
 800774e:	f47f af50 	bne.w	80075f2 <BAES_CmacCompute+0x13e>
 8007752:	e742      	b.n	80075da <BAES_CmacCompute+0x126>
 8007754:	4604      	mov	r4, r0
 8007756:	466e      	mov	r6, sp
 8007758:	4d00      	ldr	r5, [pc, #0]	@ (800775c <BAES_CmacCompute+0x2a8>)
 800775a:	e775      	b.n	8007648 <BAES_CmacCompute+0x194>
 800775c:	20005af0 	.word	0x20005af0

08007760 <BAES_Reset>:

void BAES_Reset( void )
{
#if CFG_BAES_SW == 0

  HW_AES_Disable( );
 8007760:	f7fb ba1a 	b.w	8002b98 <HW_AES_Disable>

08007764 <BAES_EcbCrypt>:

void BAES_EcbCrypt( const uint8_t* key,
                    const uint8_t* input,
                    uint8_t* output,
                    int enc )
{
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007766:	461f      	mov	r7, r3
 8007768:	4606      	mov	r6, r0
 800776a:	b085      	sub	sp, #20
 800776c:	4614      	mov	r4, r2
 800776e:	460d      	mov	r5, r1
  uint32_t tmp[4];

#if CFG_BAES_SW == 0

  HW_AES_Enable( );
 8007770:	f7fb f984 	bl	8002a7c <HW_AES_Enable>
  HW_AES_SetKey( (enc ? (HW_AES_ENC | HW_AES_REV) : (HW_AES_DEC | HW_AES_REV)),
 8007774:	2f00      	cmp	r7, #0
 8007776:	bf0c      	ite	eq
 8007778:	2002      	moveq	r0, #2
 800777a:	2003      	movne	r0, #3
 800777c:	4631      	mov	r1, r6
 800777e:	f7fb f99f 	bl	8002ac0 <HW_AES_SetKey>
    BAES_EncKeySchedule( exp_key );

#endif /* CFG_BAES_SW != 0 */

  /* Retrieve all bytes from input */
  memcpy( tmp, input, 16 );
 8007782:	46ec      	mov	ip, sp
 8007784:	6828      	ldr	r0, [r5, #0]
 8007786:	68aa      	ldr	r2, [r5, #8]
 8007788:	6869      	ldr	r1, [r5, #4]
 800778a:	68eb      	ldr	r3, [r5, #12]
 800778c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  BAES_SWAP( tmp );
 8007790:	4603      	mov	r3, r0
 8007792:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007796:	9a03      	ldr	r2, [sp, #12]

#if CFG_BAES_SW == 0

  HW_AES_Crypt( tmp, tmp );
 8007798:	4669      	mov	r1, sp
 800779a:	4668      	mov	r0, sp
  BAES_SWAP( tmp );
 800779c:	9200      	str	r2, [sp, #0]
 800779e:	9303      	str	r3, [sp, #12]
  HW_AES_Crypt( tmp, tmp );
 80077a0:	f7fb f9dc 	bl	8002b5c <HW_AES_Crypt>
  HW_AES_Disable( );
 80077a4:	f7fb f9f8 	bl	8002b98 <HW_AES_Disable>
    BAES_RawEncrypt( tmp, tmp, exp_key );

#endif /* CFG_BAES_SW != 0 */

  /* Write all bytes to output */
  BAES_SWAP( tmp );
 80077a8:	e9dd 2100 	ldrd	r2, r1, [sp]
  memcpy( output, tmp, 16 );
 80077ac:	46ec      	mov	ip, sp
  BAES_SWAP( tmp );
 80077ae:	9b02      	ldr	r3, [sp, #8]
 80077b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	9203      	str	r2, [sp, #12]
 80077b8:	9300      	str	r3, [sp, #0]
  memcpy( output, tmp, 16 );
 80077ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80077be:	6020      	str	r0, [r4, #0]
 80077c0:	6061      	str	r1, [r4, #4]
 80077c2:	60a2      	str	r2, [r4, #8]
 80077c4:	60e3      	str	r3, [r4, #12]
}
 80077c6:	b005      	add	sp, #20
 80077c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ca:	bf00      	nop

080077cc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80077cc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077ce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077d0:	3304      	adds	r3, #4

080077d2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077d2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077d4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80077d6:	d3f9      	bcc.n	80077cc <CopyDataInit>
  bx lr
 80077d8:	4770      	bx	lr

080077da <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80077da:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80077dc:	3004      	adds	r0, #4

080077de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80077de:	4288      	cmp	r0, r1
  bcc FillZerobss
 80077e0:	d3fb      	bcc.n	80077da <FillZerobss>
  bx lr
 80077e2:	4770      	bx	lr

080077e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .global Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80077e4:	4826      	ldr	r0, [pc, #152]	@ (8007880 <restore_loop_end+0x4>)
  mov   sp, r0          /* set stack pointer */
 80077e6:	4685      	mov	sp, r0
/* If we exit from standby mode, restore CPU context and jump to asleep point. */
   BL      is_boot_from_standby
 80077e8:	f7fb fe26 	bl	8003438 <is_boot_from_standby>
   CMP     R0, #1
 80077ec:	2801      	cmp	r0, #1
   BEQ     CPUcontextRestore
 80077ee:	d01f      	beq.n	8007830 <CPUcontextRestore>
/* buffer for local variables (up to 10)from is_boot_from_standby*/
   SUB     SP, SP, #0x28
 80077f0:	b08a      	sub	sp, #40	@ 0x28
/* end of specific code section for standby */
/* Call the clock system initialization function.*/
  bl  SystemInit
 80077f2:	f000 f97b 	bl	8007aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80077f6:	4823      	ldr	r0, [pc, #140]	@ (8007884 <restore_loop_end+0x8>)
 80077f8:	4923      	ldr	r1, [pc, #140]	@ (8007888 <restore_loop_end+0xc>)
 80077fa:	4a24      	ldr	r2, [pc, #144]	@ (800788c <restore_loop_end+0x10>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	f7ff ffe8 	bl	80077d2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007802:	4823      	ldr	r0, [pc, #140]	@ (8007890 <restore_loop_end+0x14>)
 8007804:	4923      	ldr	r1, [pc, #140]	@ (8007894 <restore_loop_end+0x18>)
 8007806:	2300      	movs	r3, #0
 8007808:	f7ff ffe9 	bl	80077de <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800780c:	f024 f882 	bl	802b914 <__libc_init_array>
/* Call the application s entry point.*/
  bl	main
 8007810:	f7f9 f95e 	bl	8000ad0 <main>

08007814 <LoopForever>:

LoopForever:
  b LoopForever
 8007814:	e7fe      	b.n	8007814 <LoopForever>

08007816 <CPUcontextSave>:

/* These 2 functions are designed to save and then restore CPU context. */
  .global CPUcontextSave
  .type CPUcontextSave, %function
CPUcontextSave:
        PUSH   { r4 - r7, lr }       /* store R4-R7 and LR (5 words) onto the stack */
 8007816:	b5f0      	push	{r4, r5, r6, r7, lr}
        MOV    R3, R8                /* mov thread {r8 - r12} to {r3 - r7} */
 8007818:	4643      	mov	r3, r8
        MOV    R4, R9
 800781a:	464c      	mov	r4, r9
        MOV    R5, R10
 800781c:	4655      	mov	r5, sl
        MOV    R6, R11
 800781e:	465e      	mov	r6, fp
        MOV    R7, R12
 8007820:	4667      	mov	r7, ip
        PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
 8007822:	b4f8      	push	{r3, r4, r5, r6, r7}
        LDR    R4, =backup_MSP         /* load address of backup_MSP into R4 */
 8007824:	4c1c      	ldr	r4, [pc, #112]	@ (8007898 <restore_loop_end+0x1c>)
        MOV    R3, SP                  /* load the stack pointer into R3 */
 8007826:	466b      	mov	r3, sp
        STR    R3, [R4]                /* store the MSP into backup_MSP */
 8007828:	6023      	str	r3, [r4, #0]
        DSB
 800782a:	f3bf 8f4f 	dsb	sy
        WFI                            /* all saved, trigger deep sleep */
 800782e:	bf30      	wfi

08007830 <CPUcontextRestore>:
CPUcontextRestore:
  /* Even if we fall through the WFI instruction, we will immediately
   * execute a context restore and end up where we left off with no
   * ill effects.  Normally at this point the core will either be
   * powered off or reset (depending on the deep sleep level). */
        LDR    R4, =backup_MSP       /* load address of backup_MSP into R4 */
 8007830:	4c19      	ldr	r4, [pc, #100]	@ (8007898 <restore_loop_end+0x1c>)
        LDR    R4, [R4]              /* load the SP from backup_MSP */
 8007832:	6824      	ldr	r4, [r4, #0]
        MOV    SP, R4                /* restore the SP from R4 */
 8007834:	46a5      	mov	sp, r4
        POP   {R3-R7}                /* load R8-R12 (5 words) from the stack */
 8007836:	bcf8      	pop	{r3, r4, r5, r6, r7}
        MOV    R8, R3                /* mov {r3 - r7} to {r8 - r12} */
 8007838:	4698      	mov	r8, r3
        MOV    R9, R4
 800783a:	46a1      	mov	r9, r4
        MOV    R10, R5
 800783c:	46aa      	mov	sl, r5
        MOV    R11, R6
 800783e:	46b3      	mov	fp, r6
        MOV    R12, R7
 8007840:	46bc      	mov	ip, r7
        POP   { R4 - R7, PC }        /*load R4-R7 and PC (5 words) from the stack */
 8007842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007844 <backup_system_register>:
/* R0 -> register_backup_table array current item address */
/* R1 -> loop counter (from register_backup_table_size to 0) */
/* R2 -> register_backup_table array current item value */

backup_loop_init:
        LDR    R0, =register_backup_table        /* R0 points to the first array item */
 8007844:	4815      	ldr	r0, [pc, #84]	@ (800789c <restore_loop_end+0x20>)
        LDR    R1, =register_backup_table_size
 8007846:	4916      	ldr	r1, [pc, #88]	@ (80078a0 <restore_loop_end+0x24>)
        LDR    R1, [R1]                          /* R1 contains the number of registers in the array */
 8007848:	6809      	ldr	r1, [r1, #0]

0800784a <backup_loop_iter>:

backup_loop_iter:
        /* Offset processing */
        LDR    R2, [R0], #4                      /* R2 contains the register_backup_table current item (register address) */
 800784a:	f850 2b04 	ldr.w	r2, [r0], #4
                                                 /* R0 points to the next register_backup_table item (uint32_t items -> 4 bytes added to previous address) */

        /* Register value backup */
        LDR    R2, [R2]                          /* R2 contains now the register value to backup */
 800784e:	6812      	ldr	r2, [r2, #0]
        PUSH   {R2}                              /* Push register value into the stack */
 8007850:	b404      	push	{r2}

        /* Loop iteration control */
        SUBS   R1, #1                            /* Decrement loop counter by 1 and update APSR (Application Processor Status Register) */
 8007852:	3901      	subs	r1, #1
        BNE    backup_loop_iter                  /* Loop continues until Z flag is set (still array item to handle) */
 8007854:	d1f9      	bne.n	800784a <backup_loop_iter>

08007856 <backup_loop_end>:

backup_loop_end:
        BX LR                                    /* Return to caller */
 8007856:	4770      	bx	lr

08007858 <restore_system_register>:
/* R0 -> register_backup_table array current item address */
/* R1 -> loop counter (from register_backup_table_size to 0) */
/* R2 -> register_backup_table array current item value */

restore_loop_init:
        LDR    R0, =register_backup_table         /* R0 points to the first array item */
 8007858:	4810      	ldr	r0, [pc, #64]	@ (800789c <restore_loop_end+0x20>)

        /* Reverse loop: counter initial value processing */
        LDR    R1, =register_backup_table_size
 800785a:	4911      	ldr	r1, [pc, #68]	@ (80078a0 <restore_loop_end+0x24>)
        LDR    R1, [R1]                          /* R1 contains the number of registers in the array */
 800785c:	6809      	ldr	r1, [r1, #0]
        SUB    R1, #1                            /* R1 now contains last array item index (register_backup_table_size - 1) */
 800785e:	f1a1 0101 	sub.w	r1, r1, #1

        /* Reverse loop: apply offset to current array index (point to last array element) */
        LSL    R1, #2              /* Left shift R1 by 2 */
 8007862:	ea4f 0181 	mov.w	r1, r1, lsl #2
        ADD    R0, R1              /* R0 now points to last array item (register_backup_table + (register_backup_table_size - 1) * 4) */
 8007866:	4408      	add	r0, r1

        LSR    R1, #2                            /* Reverse left shift operation on R1 */
 8007868:	ea4f 0191 	mov.w	r1, r1, lsr #2
        ADD    R1, #1                            /* Re-add 1 to R1 (array length) */
 800786c:	f101 0101 	add.w	r1, r1, #1

08007870 <restore_loop_iter>:

/* Reverse loop */
restore_loop_iter:
        /* Offset processing  */
        LDR    R2, [R0], #-4                     /* R2 contains the register_backup_table current item (register address) */
 8007870:	f850 2904 	ldr.w	r2, [r0], #-4
                                                 /* R0 now points to the previous register_backup_table item (uint32_t items -> 4 bytes subtracted to previous address) */

        /* Register value restoration */
        POP    {R3}                              /* Head of stack popped into R3. R3 contains register value to restore */
 8007874:	bc08      	pop	{r3}
        STR    R3, [R2]                          /* Write backuped value into the register */
 8007876:	6013      	str	r3, [r2, #0]

        /* Loop iteration control */
        SUBS   R1, #1                            /* Decrement loop counter by 1 and update APSR (Application Processor Status Register) */
 8007878:	3901      	subs	r1, #1
        BNE    restore_loop_iter                 /* Loop continues until Z flag is set (still array item to handle) */
 800787a:	d1f9      	bne.n	8007870 <restore_loop_iter>

0800787c <restore_loop_end>:

restore_loop_end:
        BX LR                                    /* Return to caller */
 800787c:	4770      	bx	lr
 800787e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8007880:	20020000 	.word	0x20020000
  INIT_DATA _sdata, _edata, _sidata
 8007884:	20000000 	.word	0x20000000
 8007888:	20000598 	.word	0x20000598
 800788c:	0802e88c 	.word	0x0802e88c
  INIT_BSS _sbss, _ebss
 8007890:	200005a0 	.word	0x200005a0
 8007894:	2000a284 	.word	0x2000a284
        LDR    R4, =backup_MSP         /* load address of backup_MSP into R4 */
 8007898:	20005854 	.word	0x20005854
        LDR    R0, =register_backup_table        /* R0 points to the first array item */
 800789c:	0802d698 	.word	0x0802d698
        LDR    R1, =register_backup_table_size
 80078a0:	0802d694 	.word	0x0802d694

080078a4 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80078a4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
  {
    LD1_GPIO_CLK_ENABLE();
 80078a6:	4a20      	ldr	r2, [pc, #128]	@ (8007928 <BSP_LED_Init+0x84>)
  if (Led == LD1)
 80078a8:	4603      	mov	r3, r0
    LD1_GPIO_CLK_ENABLE();
 80078aa:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
{
 80078ae:	b088      	sub	sp, #32
  if (Led == LD1)
 80078b0:	bb08      	cbnz	r0, 80078f6 <BSP_LED_Init+0x52>
    LD1_GPIO_CLK_ENABLE();
 80078b2:	f041 0102 	orr.w	r1, r1, #2
 80078b6:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80078ba:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80078be:	f002 0202 	and.w	r2, r2, #2
 80078c2:	9200      	str	r2, [sp, #0]
 80078c4:	9a00      	ldr	r2, [sp, #0]
    LD3_GPIO_CLK_ENABLE();
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80078c6:	2401      	movs	r4, #1
  GPIO_Init.Pull  = GPIO_PULLUP;
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 80078c8:	2202      	movs	r2, #2
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80078ca:	4818      	ldr	r0, [pc, #96]	@ (800792c <BSP_LED_Init+0x88>)
  GPIO_Init.Pin   = LED_PIN[Led];
 80078cc:	4918      	ldr	r1, [pc, #96]	@ (8007930 <BSP_LED_Init+0x8c>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80078ce:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  GPIO_Init.Pin   = LED_PIN[Led];
 80078d2:	f831 6013 	ldrh.w	r6, [r1, r3, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80078d6:	4628      	mov	r0, r5
 80078d8:	a903      	add	r1, sp, #12
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 80078da:	e9cd 4205 	strd	r4, r2, [sp, #20]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 80078de:	e9cd 6403 	strd	r6, r4, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 80078e2:	f001 fb59 	bl	8008f98 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80078e6:	4628      	mov	r0, r5
 80078e8:	4622      	mov	r2, r4
 80078ea:	4631      	mov	r1, r6
 80078ec:	f001 fc8a 	bl	8009204 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80078f0:	2000      	movs	r0, #0
 80078f2:	b008      	add	sp, #32
 80078f4:	bd70      	pop	{r4, r5, r6, pc}
  else if (Led == LD2)
 80078f6:	2801      	cmp	r0, #1
 80078f8:	d00a      	beq.n	8007910 <BSP_LED_Init+0x6c>
    LD3_GPIO_CLK_ENABLE();
 80078fa:	f041 0102 	orr.w	r1, r1, #2
 80078fe:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8007902:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8007906:	f002 0202 	and.w	r2, r2, #2
 800790a:	9202      	str	r2, [sp, #8]
 800790c:	9a02      	ldr	r2, [sp, #8]
 800790e:	e7da      	b.n	80078c6 <BSP_LED_Init+0x22>
    LD2_GPIO_CLK_ENABLE();
 8007910:	f041 0101 	orr.w	r1, r1, #1
 8007914:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8007918:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800791c:	f002 0201 	and.w	r2, r2, #1
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9a01      	ldr	r2, [sp, #4]
 8007924:	e7cf      	b.n	80078c6 <BSP_LED_Init+0x22>
 8007926:	bf00      	nop
 8007928:	46020c00 	.word	0x46020c00
 800792c:	0802e0a4 	.word	0x0802e0a4
 8007930:	0802e0b0 	.word	0x0802e0b0

08007934 <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8007934:	4603      	mov	r3, r0
 8007936:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8007938:	4905      	ldr	r1, [pc, #20]	@ (8007950 <BSP_LED_On+0x1c>)
 800793a:	4c06      	ldr	r4, [pc, #24]	@ (8007954 <BSP_LED_On+0x20>)
 800793c:	2200      	movs	r2, #0
 800793e:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007942:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8007946:	f001 fc5d 	bl	8009204 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800794a:	2000      	movs	r0, #0
 800794c:	bd10      	pop	{r4, pc}
 800794e:	bf00      	nop
 8007950:	0802e0b0 	.word	0x0802e0b0
 8007954:	0802e0a4 	.word	0x0802e0a4

08007958 <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8007958:	4603      	mov	r3, r0
 800795a:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800795c:	4905      	ldr	r1, [pc, #20]	@ (8007974 <BSP_LED_Off+0x1c>)
 800795e:	4c06      	ldr	r4, [pc, #24]	@ (8007978 <BSP_LED_Off+0x20>)
 8007960:	2201      	movs	r2, #1
 8007962:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007966:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 800796a:	f001 fc4b 	bl	8009204 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 800796e:	2000      	movs	r0, #0
 8007970:	bd10      	pop	{r4, pc}
 8007972:	bf00      	nop
 8007974:	0802e0b0 	.word	0x0802e0b0
 8007978:	0802e0a4 	.word	0x0802e0a4

0800797c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code.
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	4688      	mov	r8, r1
 8007982:	4604      	mov	r4, r0
  int32_t               status = BSP_ERROR_NONE;
  GPIO_InitTypeDef      GPIO_Init;
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 8007984:	4b3c      	ldr	r3, [pc, #240]	@ (8007a78 <BSP_PB_Init+0xfc>)
{
 8007986:	b092      	sub	sp, #72	@ 0x48
                                                       BSP_B2_IT_PRIORITY,
                                                       BSP_B3_IT_PRIORITY};
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 8007988:	f103 060c 	add.w	r6, r3, #12
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 800798c:	af03      	add	r7, sp, #12
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 800798e:	ad06      	add	r5, sp, #24
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_B1_IT_PRIORITY,
 8007990:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007994:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {B1_EXTI_LINE, B2_EXTI_LINE, B3_EXTI_LINE};
 8007998:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800799c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {B1_EXTI_Callback,
 80079a0:	f103 0e18 	add.w	lr, r3, #24
 80079a4:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80079a8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80079ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
                                                       B3_EXTI_Callback};

  /* Enable the BUTTON clock */
  if (Button == B1)
  {
    B1_GPIO_CLK_ENABLE();
 80079b0:	4a32      	ldr	r2, [pc, #200]	@ (8007a7c <BSP_PB_Init+0x100>)
{
 80079b2:	4643      	mov	r3, r8
    B1_GPIO_CLK_ENABLE();
 80079b4:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
  if (Button == B1)
 80079b8:	2c00      	cmp	r4, #0
 80079ba:	d142      	bne.n	8007a42 <BSP_PB_Init+0xc6>
    B1_GPIO_CLK_ENABLE();
 80079bc:	f041 0104 	orr.w	r1, r1, #4
 80079c0:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 80079c4:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 80079c8:	f002 0204 	and.w	r2, r2, #4
 80079cc:	9200      	str	r2, [sp, #0]
 80079ce:	9a00      	ldr	r2, [sp, #0]
  {
    B3_GPIO_CLK_ENABLE();
  }

  GPIO_Init.Pin   = BUTTON_PIN[Button];
  GPIO_Init.Pull  = GPIO_PULLUP;
 80079d0:	2001      	movs	r0, #1
 80079d2:	2102      	movs	r1, #2
  GPIO_Init.Pin   = BUTTON_PIN[Button];
 80079d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007a80 <BSP_PB_Init+0x104>)
  GPIO_Init.Pull  = GPIO_PULLUP;
 80079d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
  GPIO_Init.Pin   = BUTTON_PIN[Button];
 80079da:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 80079de:	920c      	str	r2, [sp, #48]	@ 0x30
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;

  if (ButtonMode == BUTTON_MODE_GPIO)
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d03d      	beq.n	8007a60 <BSP_PB_Init+0xe4>
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d142      	bne.n	8007a6e <BSP_PB_Init+0xf2>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 80079e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 80079ec:	4a25      	ldr	r2, [pc, #148]	@ (8007a84 <BSP_PB_Init+0x108>)
 80079ee:	a90c      	add	r1, sp, #48	@ 0x30
 80079f0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 80079f4:	4d24      	ldr	r5, [pc, #144]	@ (8007a88 <BSP_PB_Init+0x10c>)
 80079f6:	aa12      	add	r2, sp, #72	@ 0x48
 80079f8:	eb02 0684 	add.w	r6, r2, r4, lsl #2
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 80079fc:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 80079fe:	f001 facb 	bl	8008f98 <HAL_GPIO_Init>
    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8007a02:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007a06:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f856 1c30 	ldr.w	r1, [r6, #-48]
 8007a10:	f001 f8fc 	bl	8008c0c <HAL_EXTI_GetHandle>
 8007a14:	bb68      	cbnz	r0, 8007a72 <BSP_PB_Init+0xf6>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_FALLING_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8007a16:	f856 2c24 	ldr.w	r2, [r6, #-36]
 8007a1a:	2102      	movs	r1, #2
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f001 f8e5 	bl	8008bec <HAL_EXTI_RegisterCallback>
 8007a22:	4602      	mov	r2, r0
 8007a24:	bb28      	cbnz	r0, 8007a72 <BSP_PB_Init+0xf6>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8007a26:	4b19      	ldr	r3, [pc, #100]	@ (8007a8c <BSP_PB_Init+0x110>)
 8007a28:	f856 1c3c 	ldr.w	r1, [r6, #-60]
 8007a2c:	571c      	ldrsb	r4, [r3, r4]
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fc08 	bl	8008244 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 fc41 	bl	80082bc <HAL_NVIC_EnableIRQ>
  int32_t               status = BSP_ERROR_NONE;
 8007a3a:	2000      	movs	r0, #0
      status = BSP_ERROR_PERIPH_FAILURE;
    }
  }

  return status;
}
 8007a3c:	b012      	add	sp, #72	@ 0x48
 8007a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    B2_GPIO_CLK_ENABLE();
 8007a42:	f041 0102 	orr.w	r1, r1, #2
 8007a46:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8007a4a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
  else if (Button == B2)
 8007a4e:	2c01      	cmp	r4, #1
    B2_GPIO_CLK_ENABLE();
 8007a50:	f002 0202 	and.w	r2, r2, #2
 8007a54:	bf0b      	itete	eq
 8007a56:	9201      	streq	r2, [sp, #4]
    B3_GPIO_CLK_ENABLE();
 8007a58:	9202      	strne	r2, [sp, #8]
    B2_GPIO_CLK_ENABLE();
 8007a5a:	9a01      	ldreq	r2, [sp, #4]
    B3_GPIO_CLK_ENABLE();
 8007a5c:	9a02      	ldrne	r2, [sp, #8]
 8007a5e:	e7b7      	b.n	80079d0 <BSP_PB_Init+0x54>
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8007a60:	4a08      	ldr	r2, [pc, #32]	@ (8007a84 <BSP_PB_Init+0x108>)
 8007a62:	a90c      	add	r1, sp, #48	@ 0x30
 8007a64:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8007a68:	930d      	str	r3, [sp, #52]	@ 0x34
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8007a6a:	f001 fa95 	bl	8008f98 <HAL_GPIO_Init>
  int32_t               status = BSP_ERROR_NONE;
 8007a6e:	2000      	movs	r0, #0
  return status;
 8007a70:	e7e4      	b.n	8007a3c <BSP_PB_Init+0xc0>
        status = BSP_ERROR_PERIPH_FAILURE;
 8007a72:	f06f 0003 	mvn.w	r0, #3
 8007a76:	e7e1      	b.n	8007a3c <BSP_PB_Init+0xc0>
 8007a78:	0802c208 	.word	0x0802c208
 8007a7c:	46020c00 	.word	0x46020c00
 8007a80:	0802e09c 	.word	0x0802e09c
 8007a84:	0802e090 	.word	0x0802e090
 8007a88:	20005b00 	.word	0x20005b00
 8007a8c:	0802e08c 	.word	0x0802e08c

08007a90 <BSP_PB_GetState>:
  *     @arg B2
  *     @arg B3
  * @retval 0 means released, 1 means pressed.
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007a90:	b508      	push	{r3, lr}
  int32_t status;

  status = (HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET) ? 1 : 0;
 8007a92:	4a06      	ldr	r2, [pc, #24]	@ (8007aac <BSP_PB_GetState+0x1c>)
 8007a94:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <BSP_PB_GetState+0x20>)
 8007a96:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8007a9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007a9e:	f001 fbab 	bl	80091f8 <HAL_GPIO_ReadPin>

  return status;
}
 8007aa2:	fab0 f080 	clz	r0, r0
 8007aa6:	0940      	lsrs	r0, r0, #5
 8007aa8:	bd08      	pop	{r3, pc}
 8007aaa:	bf00      	nop
 8007aac:	0802e09c 	.word	0x0802e09c
 8007ab0:	0802e090 	.word	0x0802e090

08007ab4 <B3_EXTI_Callback>:
/**
  * @brief  B3 EXTI line detection callbacks.
  * @retval None.
  */
static void B3_EXTI_Callback(void)
{
 8007ab4:	b508      	push	{r3, lr}
  BSP_PB_Callback(B3);
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f7f8 fe92 	bl	80007e0 <BSP_PB_Callback>
}
 8007abc:	bd08      	pop	{r3, pc}
 8007abe:	bf00      	nop

08007ac0 <B2_EXTI_Callback>:
{
 8007ac0:	b508      	push	{r3, lr}
  BSP_PB_Callback(B2);
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	f7f8 fe8c 	bl	80007e0 <BSP_PB_Callback>
}
 8007ac8:	bd08      	pop	{r3, pc}
 8007aca:	bf00      	nop

08007acc <B1_EXTI_Callback>:
{
 8007acc:	b508      	push	{r3, lr}
  BSP_PB_Callback(B1);
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7f8 fe86 	bl	80007e0 <BSP_PB_Callback>
}
 8007ad4:	bd08      	pop	{r3, pc}
 8007ad6:	bf00      	nop

08007ad8 <BSP_PB_IRQHandler>:
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8007ad8:	4b03      	ldr	r3, [pc, #12]	@ (8007ae8 <BSP_PB_IRQHandler+0x10>)
 8007ada:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8007ade:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ae2:	f001 b89b 	b.w	8008c1c <HAL_EXTI_IRQHandler>
 8007ae6:	bf00      	nop
 8007ae8:	20005b00 	.word	0x20005b00

08007aec <SystemInit>:
  __IO uint32_t tmpreg;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007aec:	4a03      	ldr	r2, [pc, #12]	@ (8007afc <SystemInit+0x10>)
 8007aee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007af6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  CLEAR_BIT(ADC4->CR, ADC_CR_ADVREGEN);

  /* Disable ADC kernel clock */
  CLEAR_BIT(RCC->AHB4ENR, RCC_AHB4ENR_ADC4EN);
#endif
}
 8007afa:	4770      	bx	lr
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <SystemCoreClockUpdate>:
  uint32_t plln;
  float_t fracn;
  float_t pllvco;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8007b00:	4a31      	ldr	r2, [pc, #196]	@ (8007bc8 <SystemCoreClockUpdate+0xc8>)
 8007b02:	69d3      	ldr	r3, [r2, #28]
 8007b04:	f003 030c 	and.w	r3, r3, #12
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d046      	beq.n	8007b9a <SystemCoreClockUpdate+0x9a>
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	d139      	bne.n	8007b84 <SystemCoreClockUpdate+0x84>

    case (RCC_CFGR1_SWS_0 | RCC_CFGR1_SWS_1):  /* PLL1 used as system clock source */
      /* PLL_VCO = (PLLsource / PLLM) * PLLN * FractionnalPart
          SYSCLK = PLL_VCO / PLLR */
      /* Get PLL1 CFGR and DIVR register values */
      tmp1 = RCC->PLL1CFGR;
 8007b10:	6a90      	ldr	r0, [r2, #40]	@ 0x28
      tmp2 = RCC->PLL1DIVR;
 8007b12:	6b53      	ldr	r3, [r2, #52]	@ 0x34

      /* Retrieve PLL1 multiplication factor and divider */
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007b14:	f3c0 2c02 	ubfx	ip, r0, #8, #3
      plln = (tmp2 & RCC_PLL1DIVR_PLL1N) + 1U;
 8007b18:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	ee07 1a90 	vmov	s15, r1
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8007b22:	f3c3 6306 	ubfx	r3, r3, #24, #7

      /* Check if fractional part is enable */
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8007b26:	06c1      	lsls	r1, r0, #27
      pllm = ((tmp1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007b28:	f10c 0c01 	add.w	ip, ip, #1
      pllr = ((tmp2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8007b2c:	f103 0301 	add.w	r3, r3, #1
      if ((tmp1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 8007b30:	d439      	bmi.n	8007ba6 <SystemCoreClockUpdate+0xa6>
      {
        fracn = (float_t)0U;
      }

      /* determine PLL source */
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8007b32:	f000 0003 	and.w	r0, r0, #3
 8007b36:	2802      	cmp	r0, #2
 8007b38:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8007bcc <SystemCoreClockUpdate+0xcc>
      switch (pllsource)
 8007b3c:	d03e      	beq.n	8007bbc <SystemCoreClockUpdate+0xbc>
 8007b3e:	2803      	cmp	r0, #3
 8007b40:	d13f      	bne.n	8007bc2 <SystemCoreClockUpdate+0xc2>
          tmp1 = HSI_VALUE;
          break;

        /* HSE used as PLL1 clock source */
        case (RCC_PLL1CFGR_PLL1SRC_0 | RCC_PLL1CFGR_PLL1SRC_1):
          tmp1 = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8007b42:	4921      	ldr	r1, [pc, #132]	@ (8007bc8 <SystemCoreClockUpdate+0xc8>)
 8007b44:	4a22      	ldr	r2, [pc, #136]	@ (8007bd0 <SystemCoreClockUpdate+0xd0>)
 8007b46:	6809      	ldr	r1, [r1, #0]
 8007b48:	f3c1 5100 	ubfx	r1, r1, #20, #1
 8007b4c:	40ca      	lsrs	r2, r1
          tmp1 = 0U;
          break;
      }

      /* Compute VCO output frequency */
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8007b4e:	ee07 2a10 	vmov	s14, r2
 8007b52:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
 8007b56:	ee07 ca10 	vmov	s14, ip
 8007b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007b62:	ee77 7aa5 	vadd.f32	s15, s15, s11
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8007b66:	ee07 3a10 	vmov	s14, r3
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8007b6a:	ee85 6a26 	vdiv.f32	s12, s10, s13
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8007b6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8007b72:	ee66 6a27 	vmul.f32	s13, s12, s15
      SystemCoreClock = (uint32_t)((float_t)(pllvco / (float_t)pllr));
 8007b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b7e:	ee17 3a90 	vmov	r3, s15
      break;
 8007b82:	e000      	b.n	8007b86 <SystemCoreClockUpdate+0x86>
  switch (RCC->CFGR1 & RCC_CFGR1_SWS)
 8007b84:	4b13      	ldr	r3, [pc, #76]	@ (8007bd4 <SystemCoreClockUpdate+0xd4>)
      break;
  }

  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8007b86:	4a10      	ldr	r2, [pc, #64]	@ (8007bc8 <SystemCoreClockUpdate+0xc8>)
 8007b88:	4813      	ldr	r0, [pc, #76]	@ (8007bd8 <SystemCoreClockUpdate+0xd8>)
 8007b8a:	6a12      	ldr	r2, [r2, #32]

  /* HCLK clock frequency */
  SystemCoreClock >>= tmp1;
 8007b8c:	4913      	ldr	r1, [pc, #76]	@ (8007bdc <SystemCoreClockUpdate+0xdc>)
  tmp1 = AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE)];
 8007b8e:	f002 0207 	and.w	r2, r2, #7
 8007b92:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp1;
 8007b94:	40d3      	lsrs	r3, r2
 8007b96:	600b      	str	r3, [r1, #0]
}
 8007b98:	4770      	bx	lr
      SystemCoreClock = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <SystemCoreClockUpdate+0xd0>)
 8007b9e:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8007ba2:	40d3      	lsrs	r3, r2
      break;
 8007ba4:	e7ef      	b.n	8007b86 <SystemCoreClockUpdate+0x86>
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007ba6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
      pllsource = (tmp1 & RCC_PLL1CFGR_PLL1SRC);
 8007ba8:	f000 0003 	and.w	r0, r0, #3
        fracn = (float_t)((uint32_t)((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007bac:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllvco = ((float_t) tmp1 / (float_t)pllm) * (((float_t)plln + (float_t)(fracn / (float_t)0x2000U)));
 8007bb0:	ee05 2a90 	vmov	s11, r2
 8007bb4:	2802      	cmp	r0, #2
 8007bb6:	eefa 5ae9 	vcvt.f32.s32	s11, s11, #13
      switch (pllsource)
 8007bba:	d1c0      	bne.n	8007b3e <SystemCoreClockUpdate+0x3e>
 8007bbc:	ed9f 5a08 	vldr	s10, [pc, #32]	@ 8007be0 <SystemCoreClockUpdate+0xe0>
 8007bc0:	e7c9      	b.n	8007b56 <SystemCoreClockUpdate+0x56>
 8007bc2:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 8007bcc <SystemCoreClockUpdate+0xcc>
 8007bc6:	e7c6      	b.n	8007b56 <SystemCoreClockUpdate+0x56>
 8007bc8:	46020c00 	.word	0x46020c00
 8007bcc:	00000000 	.word	0x00000000
 8007bd0:	01e84800 	.word	0x01e84800
 8007bd4:	00f42400 	.word	0x00f42400
 8007bd8:	0802e0c0 	.word	0x0802e0c0
 8007bdc:	200001a8 	.word	0x200001a8
 8007be0:	4b742400 	.word	0x4b742400

08007be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007be4:	b538      	push	{r3, r4, r5, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8007be6:	4b25      	ldr	r3, [pc, #148]	@ (8007c7c <HAL_InitTick+0x98>)
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	b302      	cbz	r2, 8007c2e <HAL_InitTick+0x4a>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if(READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8007bec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bf0:	4605      	mov	r5, r0
 8007bf2:	6918      	ldr	r0, [r3, #16]
 8007bf4:	f010 0004 	ands.w	r0, r0, #4
 8007bf8:	d11b      	bne.n	8007c32 <HAL_InitTick+0x4e>
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
  }
  else
  {
    systicksel = __HAL_RCC_GET_SYSTICK_SOURCE();
 8007bfa:	4b21      	ldr	r3, [pc, #132]	@ (8007c80 <HAL_InitTick+0x9c>)
 8007bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c00:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
    switch (systicksel)
 8007c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c08:	d01c      	beq.n	8007c44 <HAL_InitTick+0x60>
 8007c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c0e:	d02b      	beq.n	8007c68 <HAL_InitTick+0x84>
 8007c10:	b30b      	cbz	r3, 8007c56 <HAL_InitTick+0x72>
        break;
    }
  }

  /* Configure the SysTick */
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8007c12:	f000 fb73 	bl	80082fc <HAL_SYSTICK_Config>
 8007c16:	4604      	mov	r4, r0
 8007c18:	b948      	cbnz	r0, 8007c2e <HAL_InitTick+0x4a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	f000 fb0f 	bl	8008244 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8007c26:	4b17      	ldr	r3, [pc, #92]	@ (8007c84 <HAL_InitTick+0xa0>)
 8007c28:	4620      	mov	r0, r4
 8007c2a:	601d      	str	r5, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007c2e:	2001      	movs	r0, #1
}
 8007c30:	bd38      	pop	{r3, r4, r5, pc}
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8007c32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007c36:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c3a:	4b13      	ldr	r3, [pc, #76]	@ (8007c88 <HAL_InitTick+0xa4>)
 8007c3c:	6818      	ldr	r0, [r3, #0]
 8007c3e:	fbb0 f0f2 	udiv	r0, r0, r2
 8007c42:	e7e6      	b.n	8007c12 <HAL_InitTick+0x2e>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8007c44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007c48:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8007c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c50:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007c54:	e7dd      	b.n	8007c12 <HAL_InitTick+0x2e>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8007c56:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8007c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c5e:	490a      	ldr	r1, [pc, #40]	@ (8007c88 <HAL_InitTick+0xa4>)
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007c66:	e7d4      	b.n	8007c12 <HAL_InitTick+0x2e>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8007c68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c70:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c74:	fbb3 f0f2 	udiv	r0, r3, r2
        break;
 8007c78:	e7cb      	b.n	8007c12 <HAL_InitTick+0x2e>
 8007c7a:	bf00      	nop
 8007c7c:	200001ac 	.word	0x200001ac
 8007c80:	46020c00 	.word	0x46020c00
 8007c84:	200001b0 	.word	0x200001b0
 8007c88:	200001a8 	.word	0x200001a8

08007c8c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc0 <HAL_Init+0x34>)
{
 8007c8e:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c90:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c92:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c98:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c9a:	f000 fac1 	bl	8008220 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 8007c9e:	f7ff ff2f 	bl	8007b00 <SystemCoreClockUpdate>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007ca2:	2004      	movs	r0, #4
 8007ca4:	f000 fb48 	bl	8008338 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ca8:	200e      	movs	r0, #14
 8007caa:	f7ff ff9b 	bl	8007be4 <HAL_InitTick>
 8007cae:	b110      	cbz	r0, 8007cb6 <HAL_Init+0x2a>
    return HAL_ERROR;
 8007cb0:	2401      	movs	r4, #1
}
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	4604      	mov	r4, r0
  HAL_MspInit();
 8007cb8:	f7f8 ff32 	bl	8000b20 <HAL_MspInit>
}
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	bd10      	pop	{r4, pc}
 8007cc0:	40022000 	.word	0x40022000

08007cc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007cc4:	4a03      	ldr	r2, [pc, #12]	@ (8007cd4 <HAL_IncTick+0x10>)
 8007cc6:	4b04      	ldr	r3, [pc, #16]	@ (8007cd8 <HAL_IncTick+0x14>)
 8007cc8:	6811      	ldr	r1, [r2, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	440b      	add	r3, r1
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	20005b24 	.word	0x20005b24
 8007cd8:	200001ac 	.word	0x200001ac

08007cdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007cdc:	4b01      	ldr	r3, [pc, #4]	@ (8007ce4 <HAL_GetTick+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20005b24 	.word	0x20005b24

08007ce8 <HAL_ADC_Init>:
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  uint32_t tickstart;

  /* Check ADC handle */
  if (hadc == NULL)
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	f000 80ff 	beq.w	8007eec <HAL_ADC_Init+0x204>
{
 8007cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007cf0:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	f000 80cc 	beq.w	8007e92 <HAL_ADC_Init+0x1aa>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007cfa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	00d1      	lsls	r1, r2, #3
 8007d00:	d426      	bmi.n	8007d50 <HAL_ADC_Init+0x68>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_LDORDY);
 8007d02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007d06:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8007d08:	689a      	ldr	r2, [r3, #8]
 8007d0a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8007d0e:	f022 0217 	bic.w	r2, r2, #23
 8007d12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007d16:	609a      	str	r2, [r3, #8]

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d18:	f7ff ffe0 	bl	8007cdc <HAL_GetTick>

    /* Delay for ADC stabilization time */
    while (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8007d1c:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8007d1e:	4605      	mov	r5, r0
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_LDORDY) == (LL_ADC_FLAG_LDORDY)) ? 1UL : 0UL);
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	04d2      	lsls	r2, r2, #19
 8007d24:	d414      	bmi.n	8007d50 <HAL_ADC_Init+0x68>
    {
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 8007d26:	f7ff ffd9 	bl	8007cdc <HAL_GetTick>
 8007d2a:	1b40      	subs	r0, r0, r5
 8007d2c:	2801      	cmp	r0, #1
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsActiveFlag_LDORDY(hadc->Instance) == 0UL)
 8007d2e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_LDO_RDY_TIMEOUT)
 8007d30:	d90b      	bls.n	8007d4a <HAL_ADC_Init+0x62>
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	04d7      	lsls	r7, r2, #19
 8007d36:	d408      	bmi.n	8007d4a <HAL_ADC_Init+0x62>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d38:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007d3a:	f043 0310 	orr.w	r3, r3, #16
 8007d3e:	6623      	str	r3, [r4, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d42:	f043 0301 	orr.w	r3, r3, #1
 8007d46:	6663      	str	r3, [r4, #100]	@ 0x64

          return HAL_ERROR;
 8007d48:	e015      	b.n	8007d76 <HAL_ADC_Init+0x8e>
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	04d6      	lsls	r6, r2, #19
 8007d4e:	d5ea      	bpl.n	8007d26 <HAL_ADC_Init+0x3e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	00d0      	lsls	r0, r2, #3
 8007d54:	d411      	bmi.n	8007d7a <HAL_ADC_Init+0x92>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    tmp_hal_status = HAL_ERROR;
 8007d56:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d58:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007d5a:	f042 0210 	orr.w	r2, r2, #16
 8007d5e:	6622      	str	r2, [r4, #96]	@ 0x60
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d60:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d62:	4302      	orrs	r2, r0
 8007d64:	6662      	str	r2, [r4, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	0751      	lsls	r1, r2, #29
 8007d6a:	d50a      	bpl.n	8007d82 <HAL_ADC_Init+0x9a>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d6c:	6e23      	ldr	r3, [r4, #96]	@ 0x60

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d6e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007d70:	f043 0310 	orr.w	r3, r3, #16
 8007d74:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_ERROR;
 8007d76:	2001      	movs	r0, #1

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 8007d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7a:	689a      	ldr	r2, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	0751      	lsls	r1, r2, #29
 8007d80:	d4f4      	bmi.n	8007d6c <HAL_ADC_Init+0x84>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d82:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8007d84:	f011 0110 	ands.w	r1, r1, #16
 8007d88:	d1f1      	bne.n	8007d6e <HAL_ADC_Init+0x86>
    ADC_STATE_CLR_SET(hadc->State,
 8007d8a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007d8c:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 8007d90:	f042 0202 	orr.w	r2, r2, #2
 8007d94:	6622      	str	r2, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d96:	689a      	ldr	r2, [r3, #8]
 8007d98:	07d2      	lsls	r2, r2, #31
 8007d9a:	d422      	bmi.n	8007de2 <HAL_ADC_Init+0xfa>
      MODIFY_REG(hadc->Instance->CFGR1,
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	68a1      	ldr	r1, [r4, #8]
 8007da0:	f022 020c 	bic.w	r2, r2, #12
 8007da4:	430a      	orrs	r2, r1
 8007da6:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8007da8:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
      tmp_cfgr2 |= (hadc->Init.TriggerFrequencyMode);
 8007dac:	6d61      	ldr	r1, [r4, #84]	@ 0x54
      if (hadc->Init.OversamplingMode == ENABLE)
 8007dae:	2a01      	cmp	r2, #1
 8007db0:	d107      	bne.n	8007dc2 <HAL_ADC_Init+0xda>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8007db2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007db4:	430a      	orrs	r2, r1
 8007db6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007db8:	430a      	orrs	r2, r1
 8007dba:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	f042 0101 	orr.w	r1, r2, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8007dc2:	691d      	ldr	r5, [r3, #16]
 8007dc4:	4a4a      	ldr	r2, [pc, #296]	@ (8007ef0 <HAL_ADC_Init+0x208>)
      MODIFY_REG(ADC4_COMMON->CCR,
 8007dc6:	4e4b      	ldr	r6, [pc, #300]	@ (8007ef4 <HAL_ADC_Init+0x20c>)
      MODIFY_REG(hadc->Instance->CFGR2,
 8007dc8:	402a      	ands	r2, r5
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	611a      	str	r2, [r3, #16]
      MODIFY_REG(ADC4_COMMON->CCR,
 8007dce:	f8d6 5308 	ldr.w	r5, [r6, #776]	@ 0x308
 8007dd2:	6862      	ldr	r2, [r4, #4]
 8007dd4:	f425 1570 	bic.w	r5, r5, #3932160	@ 0x3c0000
 8007dd8:	f402 1270 	and.w	r2, r2, #3932160	@ 0x3c0000
 8007ddc:	432a      	orrs	r2, r5
 8007dde:	f8c6 2308 	str.w	r2, [r6, #776]	@ 0x308
                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007de2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007de4:	f894 7020 	ldrb.w	r7, [r4, #32]
    tmp_cfgr1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007de8:	f894 c018 	ldrb.w	ip, [r4, #24]
                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007dec:	1e16      	subs	r6, r2, #0
 8007dee:	68e5      	ldr	r5, [r4, #12]
                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007df0:	ea4f 3247 	mov.w	r2, r7, lsl #13
    tmp_cfgr1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007df4:	ea42 328c 	orr.w	r2, r2, ip, lsl #14
                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007df8:	bf18      	it	ne
 8007dfa:	2601      	movne	r6, #1
 8007dfc:	432a      	orrs	r2, r5
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007dfe:	6925      	ldr	r5, [r4, #16]
                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007e00:	f894 e034 	ldrb.w	lr, [r4, #52]	@ 0x34
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	bfa8      	it	ge
 8007e08:	f44f 1c00 	movge.w	ip, #2097152	@ 0x200000
                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007e0c:	ea4f 3606 	mov.w	r6, r6, lsl #12
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007e10:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 8007e14:	ea42 0206 	orr.w	r2, r2, r6
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e18:	f894 6028 	ldrb.w	r6, [r4, #40]	@ 0x28
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007e1c:	bfb8      	it	lt
 8007e1e:	f025 4c00 	biclt.w	ip, r5, #2147483648	@ 0x80000000
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e22:	2e01      	cmp	r6, #1
                  ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007e24:	ea42 020c 	orr.w	r2, r2, ip
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e28:	d053      	beq.n	8007ed2 <HAL_ADC_Init+0x1ea>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e2c:	b126      	cbz	r6, 8007e38 <HAL_ADC_Init+0x150>
      tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007e2e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8007e30:	f406 76e0 	and.w	r6, r6, #448	@ 0x1c0
 8007e34:	433e      	orrs	r6, r7
 8007e36:	4332      	orrs	r2, r6
    MODIFY_REG(hadc->Instance->CFGR1,
 8007e38:	68df      	ldr	r7, [r3, #12]
 8007e3a:	4e2f      	ldr	r6, [pc, #188]	@ (8007ef8 <HAL_ADC_Init+0x210>)
 8007e3c:	403e      	ands	r6, r7
 8007e3e:	4316      	orrs	r6, r2
 8007e40:	60de      	str	r6, [r3, #12]
    MODIFY_REG(hadc->Instance->CFGR2,
 8007e42:	691f      	ldr	r7, [r3, #16]
 8007e44:	4e2a      	ldr	r6, [pc, #168]	@ (8007ef0 <HAL_ADC_Init+0x208>)
 8007e46:	403e      	ands	r6, r7
 8007e48:	430e      	orrs	r6, r1
 8007e4a:	611e      	str	r6, [r3, #16]
    MODIFY_REG(hadc->Instance->PWRR,
 8007e4c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
 8007e4e:	7e61      	ldrb	r1, [r4, #25]
 8007e50:	69e7      	ldr	r7, [r4, #28]
 8007e52:	f026 0603 	bic.w	r6, r6, #3
 8007e56:	4339      	orrs	r1, r7
 8007e58:	4331      	orrs	r1, r6
 8007e5a:	6459      	str	r1, [r3, #68]	@ 0x44
  MODIFY_REG(ADCx->SMPR,
 8007e5c:	6959      	ldr	r1, [r3, #20]
 8007e5e:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8007e60:	f021 0107 	bic.w	r1, r1, #7
 8007e64:	4331      	orrs	r1, r6
 8007e66:	6159      	str	r1, [r3, #20]
 8007e68:	6959      	ldr	r1, [r3, #20]
 8007e6a:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8007e6c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007e70:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
 8007e74:	6159      	str	r1, [r3, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007e76:	b995      	cbnz	r5, 8007e9e <HAL_ADC_Init+0x1b6>
      SET_BIT(hadc->Instance->CHSELR,
 8007e78:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007e7a:	f061 010f 	orn	r1, r1, #15
 8007e7e:	6299      	str	r1, [r3, #40]	@ 0x28
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8007e80:	68d9      	ldr	r1, [r3, #12]
 8007e82:	4b1e      	ldr	r3, [pc, #120]	@ (8007efc <HAL_ADC_Init+0x214>)
 8007e84:	400b      	ands	r3, r1
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01a      	beq.n	8007ec0 <HAL_ADC_Init+0x1d8>
      ADC_STATE_CLR_SET(hadc->State,
 8007e8a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007e8c:	f023 0312 	bic.w	r3, r3, #18
 8007e90:	e753      	b.n	8007d3a <HAL_ADC_Init+0x52>
    HAL_ADC_MspInit(hadc);
 8007e92:	f7f8 fe69 	bl	8000b68 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007e96:	6665      	str	r5, [r4, #100]	@ 0x64
    hadc->Lock = HAL_UNLOCKED;
 8007e98:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8007e9c:	e72d      	b.n	8007cfa <HAL_ADC_Init+0x12>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007e9e:	f5b5 1f00 	cmp.w	r5, #2097152	@ 0x200000
 8007ea2:	d1ed      	bne.n	8007e80 <HAL_ADC_Init+0x198>
      MODIFY_REG(hadc->Instance->CHSELR,
 8007ea4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8007ea6:	f06f 050f 	mvn.w	r5, #15
 8007eaa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007eac:	3901      	subs	r1, #1
 8007eae:	0089      	lsls	r1, r1, #2
 8007eb0:	f001 011c 	and.w	r1, r1, #28
 8007eb4:	fa05 f101 	lsl.w	r1, r5, r1
 8007eb8:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 8007eba:	4329      	orrs	r1, r5
 8007ebc:	6299      	str	r1, [r3, #40]	@ 0x28
 8007ebe:	e7df      	b.n	8007e80 <HAL_ADC_Init+0x198>
      ADC_CLEAR_ERRORCODE(hadc);
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6663      	str	r3, [r4, #100]	@ 0x64
      ADC_STATE_CLR_SET(hadc->State,
 8007ec4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8007ed2:	b917      	cbnz	r7, 8007eda <HAL_ADC_Init+0x1f2>
        tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8007ed4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007ed8:	e7a7      	b.n	8007e2a <HAL_ADC_Init+0x142>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007eda:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8007edc:	f046 0620 	orr.w	r6, r6, #32
 8007ee0:	6626      	str	r6, [r4, #96]	@ 0x60
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ee2:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8007ee4:	f046 0601 	orr.w	r6, r6, #1
 8007ee8:	6666      	str	r6, [r4, #100]	@ 0x64
 8007eea:	e79e      	b.n	8007e2a <HAL_ADC_Init+0x142>
    return HAL_ERROR;
 8007eec:	2001      	movs	r0, #1
}
 8007eee:	4770      	bx	lr
 8007ef0:	dffffc02 	.word	0xdffffc02
 8007ef4:	46021000 	.word	0x46021000
 8007ef8:	ffde820d 	.word	0xffde820d
 8007efc:	833ffff3 	.word	0x833ffff3

08007f00 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007f00:	2200      	movs	r2, #0
{
 8007f02:	4603      	mov	r3, r0
 8007f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8007f06:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
{
 8007f0a:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8007f0c:	2801      	cmp	r0, #1
  __IO uint32_t wait_loop_index = 0UL;
 8007f0e:	9201      	str	r2, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007f10:	691a      	ldr	r2, [r3, #16]
  __HAL_LOCK(hadc);
 8007f12:	d06c      	beq.n	8007fee <HAL_ADC_ConfigChannel+0xee>
 8007f14:	2001      	movs	r0, #1
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f16:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8007f18:	f883 005c 	strb.w	r0, [r3, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f1c:	68a5      	ldr	r5, [r4, #8]
 8007f1e:	076d      	lsls	r5, r5, #29
 8007f20:	d508      	bpl.n	8007f34 <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f22:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007f24:	f042 0220 	orr.w	r2, r2, #32
 8007f28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return tmp_hal_status;
}
 8007f30:	b003      	add	sp, #12
 8007f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8007f34:	684d      	ldr	r5, [r1, #4]
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007f36:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 8007f38:	2d02      	cmp	r5, #2
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007f3a:	f022 0210 	bic.w	r2, r2, #16
    if (pConfig->Rank != ADC_RANK_NONE)
 8007f3e:	d038      	beq.n	8007fb2 <HAL_ADC_ConfigChannel+0xb2>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007f40:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007f44:	f3c0 0611 	ubfx	r6, r0, #0, #18
 8007f48:	d02f      	beq.n	8007faa <HAL_ADC_ConfigChannel+0xaa>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007f4a:	220f      	movs	r2, #15
 8007f4c:	6e9f      	ldr	r7, [r3, #104]	@ 0x68
 8007f4e:	f005 0c1f 	and.w	ip, r5, #31
 8007f52:	fa02 f20c 	lsl.w	r2, r2, ip
 8007f56:	ea6f 0e02 	mvn.w	lr, r2
 8007f5a:	ea27 0702 	bic.w	r7, r7, r2
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d15f      	bne.n	8008022 <HAL_ADC_ConfigChannel+0x122>
 8007f62:	f3c0 6284 	ubfx	r2, r0, #26, #5
 8007f66:	fa02 f20c 	lsl.w	r2, r2, ip
 8007f6a:	433a      	orrs	r2, r7
 8007f6c:	669a      	str	r2, [r3, #104]	@ 0x68
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007f6e:	08ad      	lsrs	r5, r5, #2
 8007f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f72:	3501      	adds	r5, #1
 8007f74:	4295      	cmp	r5, r2
 8007f76:	d808      	bhi.n	8007f8a <HAL_ADC_ConfigChannel+0x8a>
  MODIFY_REG(ADCx->CHSELR,
 8007f78:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007f7a:	f3c0 6583 	ubfx	r5, r0, #26, #4
 8007f7e:	ea0e 0202 	and.w	r2, lr, r2
 8007f82:	fa05 f50c 	lsl.w	r5, r5, ip
 8007f86:	432a      	orrs	r2, r5
 8007f88:	62a2      	str	r2, [r4, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8007f8a:	688a      	ldr	r2, [r1, #8]
 8007f8c:	6961      	ldr	r1, [r4, #20]
 8007f8e:	ea02 2200 	and.w	r2, r2, r0, lsl #8
 8007f92:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007f96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007f9a:	ea21 2100 	bic.w	r1, r1, r0, lsl #8
 8007f9e:	430a      	orrs	r2, r1
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	6162      	str	r2, [r4, #20]
 8007fa4:	db26      	blt.n	8007ff4 <HAL_ADC_ConfigChannel+0xf4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e7bf      	b.n	8007f2a <HAL_ADC_ConfigChannel+0x2a>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007faa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007fac:	4332      	orrs	r2, r6
 8007fae:	62a2      	str	r2, [r4, #40]	@ 0x28
}
 8007fb0:	e7eb      	b.n	8007f8a <HAL_ADC_ConfigChannel+0x8a>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007fb2:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8007fb6:	d105      	bne.n	8007fc4 <HAL_ADC_ConfigChannel+0xc4>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007fb8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8007fba:	f3c0 0111 	ubfx	r1, r0, #0, #18
 8007fbe:	ea22 0201 	bic.w	r2, r2, r1
 8007fc2:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	daee      	bge.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007fc8:	4c2e      	ldr	r4, [pc, #184]	@ (8008084 <HAL_ADC_ConfigChannel+0x184>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8007fca:	492f      	ldr	r1, [pc, #188]	@ (8008088 <HAL_ADC_ConfigChannel+0x188>)
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	f8d1 2308 	ldr.w	r2, [r1, #776]	@ 0x308
 8007fd2:	d02b      	beq.n	800802c <HAL_ADC_ConfigChannel+0x12c>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007fd4:	4c2d      	ldr	r4, [pc, #180]	@ (800808c <HAL_ADC_ConfigChannel+0x18c>)
 8007fd6:	42a0      	cmp	r0, r4
 8007fd8:	d1e5      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8007fda:	f8d1 0308 	ldr.w	r0, [r1, #776]	@ 0x308
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007fde:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8007fe2:	f420 0040 	bic.w	r0, r0, #12582912	@ 0xc00000
 8007fe6:	4302      	orrs	r2, r0
 8007fe8:	f8c1 2308 	str.w	r2, [r1, #776]	@ 0x308
}
 8007fec:	e7db      	b.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
  __HAL_LOCK(hadc);
 8007fee:	2002      	movs	r0, #2
}
 8007ff0:	b003      	add	sp, #12
 8007ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8007ff4:	4924      	ldr	r1, [pc, #144]	@ (8008088 <HAL_ADC_ConfigChannel+0x188>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007ff6:	4c23      	ldr	r4, [pc, #140]	@ (8008084 <HAL_ADC_ConfigChannel+0x184>)
 8007ff8:	f8d1 2308 	ldr.w	r2, [r1, #776]	@ 0x308
 8007ffc:	42a0      	cmp	r0, r4
 8007ffe:	f402 0540 	and.w	r5, r2, #12582912	@ 0xc00000
 8008002:	d01d      	beq.n	8008040 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008004:	4c21      	ldr	r4, [pc, #132]	@ (800808c <HAL_ADC_ConfigChannel+0x18c>)
 8008006:	42a0      	cmp	r0, r4
 8008008:	d1cd      	bne.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
 800800a:	0252      	lsls	r2, r2, #9
 800800c:	d4cb      	bmi.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800800e:	f8d1 2308 	ldr.w	r2, [r1, #776]	@ 0x308
 8008012:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8008016:	432a      	orrs	r2, r5
 8008018:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800801c:	f8c1 2308 	str.w	r2, [r1, #776]	@ 0x308
}
 8008020:	e7c1      	b.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	fa90 f2a0 	rbit	r2, r0
  return __builtin_clz(value);
 8008026:	fab2 f282 	clz	r2, r2
 800802a:	e79c      	b.n	8007f66 <HAL_ADC_ConfigChannel+0x66>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800802c:	f8d1 0308 	ldr.w	r0, [r1, #776]	@ 0x308
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008030:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8008034:	f420 0040 	bic.w	r0, r0, #12582912	@ 0xc00000
 8008038:	4302      	orrs	r2, r0
 800803a:	f8c1 2308 	str.w	r2, [r1, #776]	@ 0x308
}
 800803e:	e7b2      	b.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8008040:	0210      	lsls	r0, r2, #8
 8008042:	d4b0      	bmi.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8008044:	f8d1 2308 	ldr.w	r2, [r1, #776]	@ 0x308
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008048:	4811      	ldr	r0, [pc, #68]	@ (8008090 <HAL_ADC_ConfigChannel+0x190>)
 800804a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800804e:	432a      	orrs	r2, r5
 8008050:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008054:	f8c1 2308 	str.w	r2, [r1, #776]	@ 0x308
 8008058:	6802      	ldr	r2, [r0, #0]
 800805a:	490e      	ldr	r1, [pc, #56]	@ (8008094 <HAL_ADC_ConfigChannel+0x194>)
 800805c:	0992      	lsrs	r2, r2, #6
 800805e:	fba1 1202 	umull	r1, r2, r1, r2
 8008062:	0992      	lsrs	r2, r2, #6
 8008064:	3201      	adds	r2, #1
 8008066:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800806a:	0092      	lsls	r2, r2, #2
 800806c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800806e:	9a01      	ldr	r2, [sp, #4]
 8008070:	2a00      	cmp	r2, #0
 8008072:	d098      	beq.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
            wait_loop_index--;
 8008074:	9a01      	ldr	r2, [sp, #4]
 8008076:	3a01      	subs	r2, #1
 8008078:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800807a:	9a01      	ldr	r2, [sp, #4]
 800807c:	2a00      	cmp	r2, #0
 800807e:	d1f9      	bne.n	8008074 <HAL_ADC_ConfigChannel+0x174>
 8008080:	e791      	b.n	8007fa6 <HAL_ADC_ConfigChannel+0xa6>
 8008082:	bf00      	nop
 8008084:	b4002000 	.word	0xb4002000
 8008088:	46021000 	.word	0x46021000
 800808c:	80000001 	.word	0x80000001
 8008090:	200001a8 	.word	0x200001a8
 8008094:	053e2d63 	.word	0x053e2d63

08008098 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8008098:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800809a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	0754      	lsls	r4, r2, #29
 80080a0:	d516      	bpl.n	80080d0 <ADC_ConversionStop+0x38>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	4604      	mov	r4, r0
 80080a6:	0790      	lsls	r0, r2, #30
 80080a8:	d514      	bpl.n	80080d4 <ADC_ConversionStop+0x3c>
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80080aa:	f7ff fe17 	bl	8007cdc <HAL_GetTick>

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80080ae:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80080b0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	0759      	lsls	r1, r3, #29
 80080b6:	d50b      	bpl.n	80080d0 <ADC_ConversionStop+0x38>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80080b8:	f7ff fe10 	bl	8007cdc <HAL_GetTick>
 80080bc:	1b43      	subs	r3, r0, r5
 80080be:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80080c0:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80080c2:	d902      	bls.n	80080ca <ADC_ConversionStop+0x32>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	0752      	lsls	r2, r2, #29
 80080c8:	d40d      	bmi.n	80080e6 <ADC_ConversionStop+0x4e>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	075b      	lsls	r3, r3, #29
 80080ce:	d4f3      	bmi.n	80080b8 <ADC_ConversionStop+0x20>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80080d0:	2000      	movs	r0, #0
}
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80080da:	f022 0217 	bic.w	r2, r2, #23
 80080de:	f042 0210 	orr.w	r2, r2, #16
 80080e2:	609a      	str	r2, [r3, #8]
}
 80080e4:	e7e1      	b.n	80080aa <ADC_ConversionStop+0x12>
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080e8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80080ea:	f043 0310 	orr.w	r3, r3, #16
 80080ee:	6623      	str	r3, [r4, #96]	@ 0x60
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080f2:	4303      	orrs	r3, r0
 80080f4:	6663      	str	r3, [r4, #100]	@ 0x64
}
 80080f6:	bd38      	pop	{r3, r4, r5, pc}

080080f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80080f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80080fa:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	0795      	lsls	r5, r2, #30
 8008100:	d502      	bpl.n	8008108 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008102:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008104:	2000      	movs	r0, #0
}
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	07d4      	lsls	r4, r2, #31
 800810c:	d5fa      	bpl.n	8008104 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	4604      	mov	r4, r0
 8008112:	f002 0205 	and.w	r2, r2, #5
 8008116:	2a01      	cmp	r2, #1
 8008118:	d009      	beq.n	800812e <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800811a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 800811c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800811e:	f043 0310 	orr.w	r3, r3, #16
 8008122:	6623      	str	r3, [r4, #96]	@ 0x60
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008124:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008126:	f043 0301 	orr.w	r3, r3, #1
 800812a:	6663      	str	r3, [r4, #100]	@ 0x64
}
 800812c:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800812e:	2103      	movs	r1, #3
  MODIFY_REG(ADCx->CR,
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8008136:	f022 0217 	bic.w	r2, r2, #23
 800813a:	f042 0202 	orr.w	r2, r2, #2
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8008142:	f7ff fdcb 	bl	8007cdc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008146:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008148:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	07d9      	lsls	r1, r3, #31
 800814e:	d403      	bmi.n	8008158 <ADC_Disable+0x60>
 8008150:	e7d8      	b.n	8008104 <ADC_Disable+0xc>
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	07db      	lsls	r3, r3, #31
 8008156:	d5d5      	bpl.n	8008104 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008158:	f7ff fdc0 	bl	8007cdc <HAL_GetTick>
 800815c:	1b40      	subs	r0, r0, r5
 800815e:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008160:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008162:	d9f6      	bls.n	8008152 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	07d2      	lsls	r2, r2, #31
 8008168:	d5f3      	bpl.n	8008152 <ADC_Disable+0x5a>
 800816a:	e7d6      	b.n	800811a <ADC_Disable+0x22>

0800816c <HAL_ADC_DeInit>:
{
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc == NULL)
 800816e:	2800      	cmp	r0, #0
 8008170:	d04e      	beq.n	8008210 <HAL_ADC_DeInit+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8008172:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8008174:	4604      	mov	r4, r0
 8008176:	f043 0302 	orr.w	r3, r3, #2
 800817a:	6603      	str	r3, [r0, #96]	@ 0x60
  tmp_hal_status = ADC_ConversionStop(hadc);
 800817c:	f7ff ff8c 	bl	8008098 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8008180:	4605      	mov	r5, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d035      	beq.n	80081f2 <HAL_ADC_DeInit+0x86>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8008186:	6823      	ldr	r3, [r4, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8008188:	f240 379f 	movw	r7, #927	@ 0x39f
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800818c:	2600      	movs	r6, #0
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800818e:	685a      	ldr	r2, [r3, #4]
  ADC4_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8008190:	4921      	ldr	r1, [pc, #132]	@ (8008218 <HAL_ADC_DeInit+0xac>)
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8008192:	f422 7267 	bic.w	r2, r2, #924	@ 0x39c
 8008196:	f022 0203 	bic.w	r2, r2, #3
 800819a:	605a      	str	r2, [r3, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800819c:	601f      	str	r7, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800819e:	68df      	ldr	r7, [r3, #12]
 80081a0:	4a1e      	ldr	r2, [pc, #120]	@ (800821c <HAL_ADC_DeInit+0xb0>)
  HAL_ADC_MspDeInit(hadc);
 80081a2:	4620      	mov	r0, r4
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80081a4:	403a      	ands	r2, r7
 80081a6:	60da      	str	r2, [r3, #12]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80081a8:	695a      	ldr	r2, [r3, #20]
 80081aa:	f022 0207 	bic.w	r2, r2, #7
 80081ae:	615a      	str	r2, [r3, #20]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80081b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081b2:	629e      	str	r6, [r3, #40]	@ 0x28
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80081b4:	6a1a      	ldr	r2, [r3, #32]
 80081b6:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80081ba:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80081bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081be:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80081c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80081c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c6:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 80081ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->PWRR &= ~(ADC_PWRR_AUTOFF);
 80081cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	645a      	str	r2, [r3, #68]	@ 0x44
  ADC4_COMMON->CCR &= ~(ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80081d4:	f8d1 3308 	ldr.w	r3, [r1, #776]	@ 0x308
 80081d8:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 80081dc:	f8c1 3308 	str.w	r3, [r1, #776]	@ 0x308
  HAL_ADC_MspDeInit(hadc);
 80081e0:	f7f8 fcee 	bl	8000bc0 <HAL_ADC_MspDeInit>
  __HAL_UNLOCK(hadc);
 80081e4:	f884 605c 	strb.w	r6, [r4, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(hadc);
 80081e8:	6666      	str	r6, [r4, #100]	@ 0x64
}
 80081ea:	4628      	mov	r0, r5
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80081ec:	66a6      	str	r6, [r4, #104]	@ 0x68
  hadc->State = HAL_ADC_STATE_RESET;
 80081ee:	6626      	str	r6, [r4, #96]	@ 0x60
}
 80081f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff ff80 	bl	80080f8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80081f8:	4605      	mov	r5, r0
 80081fa:	b908      	cbnz	r0, 8008200 <HAL_ADC_DeInit+0x94>
      hadc->State = HAL_ADC_STATE_READY;
 80081fc:	2301      	movs	r3, #1
 80081fe:	6623      	str	r3, [r4, #96]	@ 0x60
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8008200:	6823      	ldr	r3, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8008208:	f022 0217 	bic.w	r2, r2, #23
 800820c:	609a      	str	r2, [r3, #8]
}
 800820e:	e7bb      	b.n	8008188 <HAL_ADC_DeInit+0x1c>
    return HAL_ERROR;
 8008210:	2501      	movs	r5, #1
}
 8008212:	4628      	mov	r0, r5
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008216:	bf00      	nop
 8008218:	46021000 	.word	0x46021000
 800821c:	831e8200 	.word	0x831e8200

08008220 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008220:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008224:	4906      	ldr	r1, [pc, #24]	@ (8008240 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008226:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008228:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800822a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800822e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800823c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800823e:	4770      	bx	lr
 8008240:	e000ed00 	.word	0xe000ed00

08008244 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008244:	4b1b      	ldr	r3, [pc, #108]	@ (80082b4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008246:	b500      	push	{lr}
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800824e:	f1c3 0e07 	rsb	lr, r3, #7
 8008252:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008256:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800825a:	bf28      	it	cs
 800825c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008260:	f1bc 0f06 	cmp.w	ip, #6
 8008264:	d91c      	bls.n	80082a0 <HAL_NVIC_SetPriority+0x5c>
 8008266:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	fa03 f30c 	lsl.w	r3, r3, ip
 8008272:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008276:	f04f 33ff 	mov.w	r3, #4294967295
 800827a:	fa03 f30e 	lsl.w	r3, r3, lr
 800827e:	ea21 0303 	bic.w	r3, r1, r3
 8008282:	fa03 f30c 	lsl.w	r3, r3, ip
 8008286:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008288:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800828a:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800828c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800828e:	db0a      	blt.n	80082a6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008290:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8008294:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8008298:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800829c:	f85d fb04 	ldr.w	pc, [sp], #4
 80082a0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082a2:	4694      	mov	ip, r2
 80082a4:	e7e7      	b.n	8008276 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082a6:	4a04      	ldr	r2, [pc, #16]	@ (80082b8 <HAL_NVIC_SetPriority+0x74>)
 80082a8:	f000 000f 	and.w	r0, r0, #15
 80082ac:	4402      	add	r2, r0
 80082ae:	7613      	strb	r3, [r2, #24]
 80082b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80082b4:	e000ed00 	.word	0xe000ed00
 80082b8:	e000ecfc 	.word	0xe000ecfc

080082bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80082bc:	2800      	cmp	r0, #0
 80082be:	db07      	blt.n	80082d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082c0:	2301      	movs	r3, #1
 80082c2:	f000 011f 	and.w	r1, r0, #31
 80082c6:	4a03      	ldr	r2, [pc, #12]	@ (80082d4 <HAL_NVIC_EnableIRQ+0x18>)
 80082c8:	0940      	lsrs	r0, r0, #5
 80082ca:	408b      	lsls	r3, r1
 80082cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	e000e100 	.word	0xe000e100

080082d8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80082d8:	2800      	cmp	r0, #0
 80082da:	db0c      	blt.n	80082f6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082dc:	2201      	movs	r2, #1
 80082de:	4906      	ldr	r1, [pc, #24]	@ (80082f8 <HAL_NVIC_DisableIRQ+0x20>)
 80082e0:	0943      	lsrs	r3, r0, #5
 80082e2:	f000 001f 	and.w	r0, r0, #31
 80082e6:	3320      	adds	r3, #32
 80082e8:	4082      	lsls	r2, r0
 80082ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80082ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80082f2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80082f6:	4770      	bx	lr
 80082f8:	e000e100 	.word	0xe000e100

080082fc <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082fc:	1e43      	subs	r3, r0, #1
 80082fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008302:	d209      	bcs.n	8008318 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8008304:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8008308:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800830a:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 800830c:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800830e:	6913      	ldr	r3, [r2, #16]
 8008310:	f043 0303 	orr.w	r3, r3, #3
 8008314:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 8008316:	4770      	bx	lr
    return (1UL);
 8008318:	2001      	movs	r0, #1
}
 800831a:	4770      	bx	lr

0800831c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800831c:	2800      	cmp	r0, #0
 800831e:	db08      	blt.n	8008332 <HAL_NVIC_SetPendingIRQ+0x16>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008320:	2201      	movs	r2, #1
 8008322:	0943      	lsrs	r3, r0, #5
 8008324:	4903      	ldr	r1, [pc, #12]	@ (8008334 <HAL_NVIC_SetPendingIRQ+0x18>)
 8008326:	f000 001f 	and.w	r0, r0, #31
 800832a:	3340      	adds	r3, #64	@ 0x40
 800832c:	4082      	lsls	r2, r0
 800832e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8008332:	4770      	bx	lr
 8008334:	e000e100 	.word	0xe000e100

08008338 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8008338:	2804      	cmp	r0, #4
 800833a:	d813      	bhi.n	8008364 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 800833c:	e8df f000 	tbb	[pc, r0]
 8008340:	12031a2a 	.word	0x12031a2a
 8008344:	13          	.byte	0x13
 8008345:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008346:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 800834a:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800834c:	4a18      	ldr	r2, [pc, #96]	@ (80083b0 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800834e:	f023 0304 	bic.w	r3, r3, #4
 8008352:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8008354:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8008358:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800835c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8008364:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008366:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800836a:	6913      	ldr	r3, [r2, #16]
 800836c:	f043 0304 	orr.w	r3, r3, #4
 8008370:	6113      	str	r3, [r2, #16]
      break;
 8008372:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008374:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8008378:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800837a:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800837c:	f023 0304 	bic.w	r3, r3, #4
 8008380:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8008382:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 8008386:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800838a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800838e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8008392:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8008394:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
 8008398:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800839a:	4a05      	ldr	r2, [pc, #20]	@ (80083b0 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800839c:	f023 0304 	bic.w	r3, r3, #4
 80083a0:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80083a2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
 80083a6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80083aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80083ae:	4770      	bx	lr
 80083b0:	46020c00 	.word	0x46020c00

080083b4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80083b8:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80083ba:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80083bc:	d015      	beq.n	80083ea <CRC_Handle_8+0x36>
 80083be:	468c      	mov	ip, r1
 80083c0:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80083c4:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80083c8:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80083cc:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80083d0:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80083d2:	f89c e002 	ldrb.w	lr, [ip, #2]
 80083d6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80083da:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 80083dc:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80083e0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 80083e4:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80083e6:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80083e8:	d1ec      	bne.n	80083c4 <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 80083ea:	f012 0203 	ands.w	r2, r2, #3
 80083ee:	d00c      	beq.n	800840a <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 80083f0:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80083f2:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 80083f6:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 80083fa:	d009      	beq.n	8008410 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80083fc:	4439      	add	r1, r7
 80083fe:	784b      	ldrb	r3, [r1, #1]
    if ((BufferLength % 4U) == 2U)
 8008400:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008402:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 8008406:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 8008408:	d107      	bne.n	800841a <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800840a:	6828      	ldr	r0, [r5, #0]
}
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008410:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 8008412:	6805      	ldr	r5, [r0, #0]
 8008414:	6828      	ldr	r0, [r5, #0]
}
 8008416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800841a:	788b      	ldrb	r3, [r1, #2]
 800841c:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 800841e:	6805      	ldr	r5, [r0, #0]
 8008420:	6828      	ldr	r0, [r5, #0]
}
 8008422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008426:	bf00      	nop

08008428 <HAL_CRC_Init>:
  if (hcrc == NULL)
 8008428:	2800      	cmp	r0, #0
 800842a:	d036      	beq.n	800849a <HAL_CRC_Init+0x72>
{
 800842c:	b538      	push	{r3, r4, r5, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800842e:	7f43      	ldrb	r3, [r0, #29]
 8008430:	4604      	mov	r4, r0
 8008432:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008436:	b363      	cbz	r3, 8008492 <HAL_CRC_Init+0x6a>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008438:	2202      	movs	r2, #2
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800843a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800843c:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800843e:	b9f3      	cbnz	r3, 800847e <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	4a17      	ldr	r2, [pc, #92]	@ (80084a0 <HAL_CRC_Init+0x78>)
 8008444:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	f022 0218 	bic.w	r2, r2, #24
 800844c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800844e:	7962      	ldrb	r2, [r4, #5]
 8008450:	b18a      	cbz	r2, 8008476 <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008452:	6922      	ldr	r2, [r4, #16]
 8008454:	611a      	str	r2, [r3, #16]
  hcrc->State = HAL_CRC_STATE_READY;
 8008456:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	6965      	ldr	r5, [r4, #20]
 800845c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008460:	432a      	orrs	r2, r5
 8008462:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	69a5      	ldr	r5, [r4, #24]
 8008468:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800846c:	432a      	orrs	r2, r5
 800846e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8008470:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 8008472:	2000      	movs	r0, #0
}
 8008474:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008476:	f04f 32ff 	mov.w	r2, #4294967295
 800847a:	611a      	str	r2, [r3, #16]
 800847c:	e7eb      	b.n	8008456 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800847e:	4620      	mov	r0, r4
 8008480:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008484:	f000 f8a4 	bl	80085d0 <HAL_CRCEx_Polynomial_Set>
 8008488:	b908      	cbnz	r0, 800848e <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	e7df      	b.n	800844e <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800848e:	2001      	movs	r0, #1
}
 8008490:	bd38      	pop	{r3, r4, r5, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8008492:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8008494:	f7f8 fba6 	bl	8000be4 <HAL_CRC_MspInit>
 8008498:	e7ce      	b.n	8008438 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800849a:	2001      	movs	r0, #1
}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	04c11db7 	.word	0x04c11db7

080084a4 <HAL_CRC_DeInit>:
{
 80084a4:	b538      	push	{r3, r4, r5, lr}
  if (hcrc == NULL)
 80084a6:	b1a0      	cbz	r0, 80084d2 <HAL_CRC_DeInit+0x2e>
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 80084a8:	7f42      	ldrb	r2, [r0, #29]
 80084aa:	4604      	mov	r4, r0
 80084ac:	2a02      	cmp	r2, #2
 80084ae:	b2d3      	uxtb	r3, r2
 80084b0:	d00d      	beq.n	80084ce <HAL_CRC_DeInit+0x2a>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80084b2:	2202      	movs	r2, #2
  CLEAR_REG(hcrc->Instance->IDR);
 80084b4:	2500      	movs	r5, #0
  __HAL_CRC_DR_RESET(hcrc);
 80084b6:	6803      	ldr	r3, [r0, #0]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80084b8:	7742      	strb	r2, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	f042 0201 	orr.w	r2, r2, #1
 80084c0:	609a      	str	r2, [r3, #8]
  CLEAR_REG(hcrc->Instance->IDR);
 80084c2:	605d      	str	r5, [r3, #4]
  HAL_CRC_MspDeInit(hcrc);
 80084c4:	f7f8 fba8 	bl	8000c18 <HAL_CRC_MspDeInit>
  return HAL_OK;
 80084c8:	462b      	mov	r3, r5
  hcrc->State = HAL_CRC_STATE_RESET;
 80084ca:	7765      	strb	r5, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80084cc:	7725      	strb	r5, [r4, #28]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd38      	pop	{r3, r4, r5, pc}

080084d8 <HAL_CRC_Accumulate>:
  hcrc->State = HAL_CRC_STATE_BUSY;
 80084d8:	2302      	movs	r3, #2
{
 80084da:	b570      	push	{r4, r5, r6, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 80084dc:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80084de:	6a03      	ldr	r3, [r0, #32]
{
 80084e0:	4605      	mov	r5, r0
  switch (hcrc->InputDataFormat)
 80084e2:	2b02      	cmp	r3, #2
{
 80084e4:	468c      	mov	ip, r1
 80084e6:	4616      	mov	r6, r2
  switch (hcrc->InputDataFormat)
 80084e8:	d007      	beq.n	80084fa <HAL_CRC_Accumulate+0x22>
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d023      	beq.n	8008536 <HAL_CRC_Accumulate+0x5e>
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d01c      	beq.n	800852c <HAL_CRC_Accumulate+0x54>
  hcrc->State = HAL_CRC_STATE_READY;
 80084f2:	2301      	movs	r3, #1
 80084f4:	776b      	strb	r3, [r5, #29]
  switch (hcrc->InputDataFormat)
 80084f6:	2000      	movs	r0, #0
}
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
      temp = hcrc->Instance->DR;
 80084fa:	6801      	ldr	r1, [r0, #0]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80084fc:	0850      	lsrs	r0, r2, #1
 80084fe:	d00c      	beq.n	800851a <HAL_CRC_Accumulate+0x42>
 8008500:	2300      	movs	r3, #0
 8008502:	f10c 0e02 	add.w	lr, ip, #2
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008506:	f83c 2023 	ldrh.w	r2, [ip, r3, lsl #2]
 800850a:	f83e 4023 	ldrh.w	r4, [lr, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800850e:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008514:	4283      	cmp	r3, r0
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008516:	600c      	str	r4, [r1, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008518:	d1f5      	bne.n	8008506 <HAL_CRC_Accumulate+0x2e>
  }
  if ((BufferLength % 2U) != 0U)
 800851a:	07f3      	lsls	r3, r6, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 800851c:	bf44      	itt	mi
 800851e:	f83c 3020 	ldrhmi.w	r3, [ip, r0, lsl #2]
 8008522:	800b      	strhmi	r3, [r1, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8008524:	2301      	movs	r3, #1
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008526:	6808      	ldr	r0, [r1, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8008528:	776b      	strb	r3, [r5, #29]
}
 800852a:	bd70      	pop	{r4, r5, r6, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800852c:	f7ff ff42 	bl	80083b4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 8008530:	2301      	movs	r3, #1
 8008532:	776b      	strb	r3, [r5, #29]
}
 8008534:	bd70      	pop	{r4, r5, r6, pc}
      temp = hcrc->Instance->DR;
 8008536:	6802      	ldr	r2, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 8008538:	b13e      	cbz	r6, 800854a <HAL_CRC_Accumulate+0x72>
 800853a:	3904      	subs	r1, #4
 800853c:	eb01 0686 	add.w	r6, r1, r6, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 8008540:	f851 3f04 	ldr.w	r3, [r1, #4]!
      for (index = 0U; index < BufferLength; index++)
 8008544:	42b1      	cmp	r1, r6
        hcrc->Instance->DR = pBuffer[index];
 8008546:	6013      	str	r3, [r2, #0]
      for (index = 0U; index < BufferLength; index++)
 8008548:	d1fa      	bne.n	8008540 <HAL_CRC_Accumulate+0x68>
  hcrc->State = HAL_CRC_STATE_READY;
 800854a:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 800854c:	6810      	ldr	r0, [r2, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 800854e:	776b      	strb	r3, [r5, #29]
}
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	bf00      	nop

08008554 <HAL_CRC_Calculate>:
{
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008556:	2302      	movs	r3, #2
  __HAL_CRC_DR_RESET(hcrc);
 8008558:	6805      	ldr	r5, [r0, #0]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800855a:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800855c:	68ac      	ldr	r4, [r5, #8]
  switch (hcrc->InputDataFormat)
 800855e:	6a03      	ldr	r3, [r0, #32]
  __HAL_CRC_DR_RESET(hcrc);
 8008560:	f044 0401 	orr.w	r4, r4, #1
  switch (hcrc->InputDataFormat)
 8008564:	2b02      	cmp	r3, #2
{
 8008566:	4606      	mov	r6, r0
 8008568:	468c      	mov	ip, r1
 800856a:	4617      	mov	r7, r2
  __HAL_CRC_DR_RESET(hcrc);
 800856c:	60ac      	str	r4, [r5, #8]
  switch (hcrc->InputDataFormat)
 800856e:	d007      	beq.n	8008580 <HAL_CRC_Calculate+0x2c>
 8008570:	2b03      	cmp	r3, #3
 8008572:	d022      	beq.n	80085ba <HAL_CRC_Calculate+0x66>
 8008574:	2b01      	cmp	r3, #1
 8008576:	d01b      	beq.n	80085b0 <HAL_CRC_Calculate+0x5c>
  hcrc->State = HAL_CRC_STATE_READY;
 8008578:	2301      	movs	r3, #1
 800857a:	7773      	strb	r3, [r6, #29]
  switch (hcrc->InputDataFormat)
 800857c:	2000      	movs	r0, #0
}
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008580:	0851      	lsrs	r1, r2, #1
 8008582:	d00c      	beq.n	800859e <HAL_CRC_Calculate+0x4a>
 8008584:	2300      	movs	r3, #0
 8008586:	f10c 0002 	add.w	r0, ip, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800858a:	f83c 2023 	ldrh.w	r2, [ip, r3, lsl #2]
 800858e:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008592:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008594:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008598:	428b      	cmp	r3, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800859a:	602c      	str	r4, [r5, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800859c:	d1f5      	bne.n	800858a <HAL_CRC_Calculate+0x36>
  if ((BufferLength % 2U) != 0U)
 800859e:	07fb      	lsls	r3, r7, #31
    *pReg = pBuffer[2U * i];
 80085a0:	bf44      	itt	mi
 80085a2:	f83c 3021 	ldrhmi.w	r3, [ip, r1, lsl #2]
 80085a6:	802b      	strhmi	r3, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80085a8:	2301      	movs	r3, #1
  return hcrc->Instance->DR;
 80085aa:	6828      	ldr	r0, [r5, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80085ac:	7773      	strb	r3, [r6, #29]
}
 80085ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80085b0:	f7ff ff00 	bl	80083b4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 80085b4:	2301      	movs	r3, #1
 80085b6:	7773      	strb	r3, [r6, #29]
}
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	d0f4      	beq.n	80085a8 <HAL_CRC_Calculate+0x54>
 80085be:	3904      	subs	r1, #4
 80085c0:	eb01 0782 	add.w	r7, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 80085c4:	f851 3f04 	ldr.w	r3, [r1, #4]!
      for (index = 0U; index < BufferLength; index++)
 80085c8:	42b9      	cmp	r1, r7
        hcrc->Instance->DR = pBuffer[index];
 80085ca:	602b      	str	r3, [r5, #0]
      for (index = 0U; index < BufferLength; index++)
 80085cc:	d1fa      	bne.n	80085c4 <HAL_CRC_Calculate+0x70>
 80085ce:	e7eb      	b.n	80085a8 <HAL_CRC_Calculate+0x54>

080085d0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80085d0:	07cb      	lsls	r3, r1, #31
 80085d2:	d51a      	bpl.n	800860a <HAL_CRCEx_Polynomial_Set+0x3a>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80085d4:	231f      	movs	r3, #31
{
 80085d6:	b410      	push	{r4}
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80085d8:	3b01      	subs	r3, #1
 80085da:	1c5c      	adds	r4, r3, #1
 80085dc:	fa21 fc03 	lsr.w	ip, r1, r3
 80085e0:	d015      	beq.n	800860e <HAL_CRCEx_Polynomial_Set+0x3e>
 80085e2:	f01c 0f01 	tst.w	ip, #1
 80085e6:	d0f7      	beq.n	80085d8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80085e8:	2a18      	cmp	r2, #24
 80085ea:	d811      	bhi.n	8008610 <HAL_CRCEx_Polynomial_Set+0x40>
 80085ec:	e8df f002 	tbb	[pc, r2]
 80085f0:	10101016 	.word	0x10101016
 80085f4:	10101010 	.word	0x10101010
 80085f8:	10101024 	.word	0x10101024
 80085fc:	10101010 	.word	0x10101010
 8008600:	10101021 	.word	0x10101021
 8008604:	10101010 	.word	0x10101010
 8008608:	14          	.byte	0x14
 8008609:	00          	.byte	0x00
 800860a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800860c:	4770      	bx	lr
    switch (PolyLength)
 800860e:	b12a      	cbz	r2, 800861c <HAL_CRCEx_Polynomial_Set+0x4c>
 8008610:	2001      	movs	r0, #1
}
 8008612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008616:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
 8008618:	2b06      	cmp	r3, #6
 800861a:	d8f9      	bhi.n	8008610 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800861c:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800861e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008620:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	f023 0318 	bic.w	r3, r3, #24
 8008628:	4313      	orrs	r3, r2
 800862a:	60a3      	str	r3, [r4, #8]
}
 800862c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008630:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
 8008632:	2b07      	cmp	r3, #7
 8008634:	d9f2      	bls.n	800861c <HAL_CRCEx_Polynomial_Set+0x4c>
 8008636:	e7eb      	b.n	8008610 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
 8008638:	2b0f      	cmp	r3, #15
 800863a:	d9ef      	bls.n	800861c <HAL_CRCEx_Polynomial_Set+0x4c>
 800863c:	e7e8      	b.n	8008610 <HAL_CRCEx_Polynomial_Set+0x40>
 800863e:	bf00      	nop

08008640 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8008644:	f7ff fb4a 	bl	8007cdc <HAL_GetTick>

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8008648:	2c00      	cmp	r4, #0
 800864a:	d07d      	beq.n	8008748 <HAL_DMA_Init+0x108>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800864c:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 800864e:	2100      	movs	r1, #0
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8008650:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8008652:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_BUSY;
 8008656:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	4605      	mov	r5, r0
 800865e:	f042 0206 	orr.w	r2, r2, #6
 8008662:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008664:	e005      	b.n	8008672 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8008666:	f7ff fb39 	bl	8007cdc <HAL_GetTick>
 800866a:	1b43      	subs	r3, r0, r5
 800866c:	2b05      	cmp	r3, #5
 800866e:	d866      	bhi.n	800873e <HAL_DMA_Init+0xfe>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	695a      	ldr	r2, [r3, #20]
 8008674:	07d2      	lsls	r2, r2, #31
 8008676:	d4f6      	bmi.n	8008666 <HAL_DMA_Init+0x26>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8008678:	6959      	ldr	r1, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800867a:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800867c:	f421 0143 	bic.w	r1, r1, #12779520	@ 0xc30000
 8008680:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
 8008684:	4301      	orrs	r1, r0
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008686:	432a      	orrs	r2, r5
 8008688:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800868a:	6159      	str	r1, [r3, #20]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800868c:	69a1      	ldr	r1, [r4, #24]
 800868e:	432a      	orrs	r2, r5
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008690:	6b20      	ldr	r0, [r4, #48]	@ 0x30
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8008692:	4311      	orrs	r1, r2
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008694:	68a2      	ldr	r2, [r4, #8]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008696:	68e5      	ldr	r5, [r4, #12]
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8008698:	4310      	orrs	r0, r2
 800869a:	6862      	ldr	r2, [r4, #4]
 800869c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80086a0:	4310      	orrs	r0, r2
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80086a2:	4a38      	ldr	r2, [pc, #224]	@ (8008784 <HAL_DMA_Init+0x144>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d01e      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086a8:	3280      	adds	r2, #128	@ 0x80
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d01b      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086ae:	3280      	adds	r2, #128	@ 0x80
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d018      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086b4:	3280      	adds	r2, #128	@ 0x80
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d015      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086ba:	3280      	adds	r2, #128	@ 0x80
 80086bc:	4293      	cmp	r3, r2
 80086be:	d012      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086c0:	3280      	adds	r2, #128	@ 0x80
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00f      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086c6:	3280      	adds	r2, #128	@ 0x80
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d00c      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
 80086cc:	3280      	adds	r2, #128	@ 0x80
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_DMA_Init+0xa6>
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80086d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086d4:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80086d8:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 80086dc:	ea42 0201 	orr.w	r2, r2, r1
 80086e0:	641a      	str	r2, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086e2:	d117      	bne.n	8008714 <HAL_DMA_Init+0xd4>
 80086e4:	e01b      	b.n	800871e <HAL_DMA_Init+0xde>
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80086e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80086e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 80086ea:	3a01      	subs	r2, #1
 80086ec:	0512      	lsls	r2, r2, #20
 80086ee:	f002 727c 	and.w	r2, r2, #66060288	@ 0x3f00000
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80086f2:	430a      	orrs	r2, r1
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80086f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80086f6:	4332      	orrs	r2, r6
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80086f8:	3901      	subs	r1, #1
 80086fa:	0109      	lsls	r1, r1, #4
 80086fc:	f401 717c 	and.w	r1, r1, #1008	@ 0x3f0
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8008700:	430a      	orrs	r2, r1
 8008702:	6c19      	ldr	r1, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008704:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8008708:	f001 2180 	and.w	r1, r1, #2147516416	@ 0x80008000
 800870c:	ea42 0201 	orr.w	r2, r2, r1
 8008710:	641a      	str	r2, [r3, #64]	@ 0x40
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008712:	d01b      	beq.n	800874c <HAL_DMA_Init+0x10c>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8008714:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8008718:	bf08      	it	eq
 800871a:	f440 7000 	orreq.w	r0, r0, #512	@ 0x200
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800871e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8008720:	4a19      	ldr	r2, [pc, #100]	@ (8008788 <HAL_DMA_Init+0x148>)
  hdma->Mode = hdma->Init.Mode;
 8008722:	6b65      	ldr	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8008724:	400a      	ands	r2, r1
 8008726:	4302      	orrs	r2, r0
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800872a:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_READY;
 800872c:	2201      	movs	r2, #1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800872e:	6499      	str	r1, [r3, #72]	@ 0x48

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8008730:	67d9      	str	r1, [r3, #124]	@ 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008732:	65a1      	str	r1, [r4, #88]	@ 0x58
  hdma->State = HAL_DMA_STATE_READY;
 8008734:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
  return HAL_OK;
 8008738:	4608      	mov	r0, r1
  hdma->Mode = hdma->Init.Mode;
 800873a:	6525      	str	r5, [r4, #80]	@ 0x50
}
 800873c:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800873e:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8008740:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008742:	65a2      	str	r2, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8008744:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8008748:	2001      	movs	r0, #1
}
 800874a:	bd70      	pop	{r4, r5, r6, pc}
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800874c:	4a0d      	ldr	r2, [pc, #52]	@ (8008784 <HAL_DMA_Init+0x144>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d014      	beq.n	800877c <HAL_DMA_Init+0x13c>
 8008752:	3280      	adds	r2, #128	@ 0x80
 8008754:	4293      	cmp	r3, r2
 8008756:	d011      	beq.n	800877c <HAL_DMA_Init+0x13c>
 8008758:	3280      	adds	r2, #128	@ 0x80
 800875a:	4293      	cmp	r3, r2
 800875c:	d00e      	beq.n	800877c <HAL_DMA_Init+0x13c>
 800875e:	3280      	adds	r2, #128	@ 0x80
 8008760:	4293      	cmp	r3, r2
 8008762:	d00b      	beq.n	800877c <HAL_DMA_Init+0x13c>
 8008764:	3280      	adds	r2, #128	@ 0x80
 8008766:	4293      	cmp	r3, r2
 8008768:	d008      	beq.n	800877c <HAL_DMA_Init+0x13c>
 800876a:	3280      	adds	r2, #128	@ 0x80
 800876c:	4293      	cmp	r3, r2
 800876e:	d005      	beq.n	800877c <HAL_DMA_Init+0x13c>
 8008770:	3280      	adds	r2, #128	@ 0x80
 8008772:	4293      	cmp	r3, r2
 8008774:	d002      	beq.n	800877c <HAL_DMA_Init+0x13c>
 8008776:	3280      	adds	r2, #128	@ 0x80
 8008778:	4293      	cmp	r3, r2
 800877a:	d1d0      	bne.n	800871e <HAL_DMA_Init+0xde>
      tmpreg |= DMA_CTR2_DREQ;
 800877c:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8008780:	e7cd      	b.n	800871e <HAL_DMA_Init+0xde>
 8008782:	bf00      	nop
 8008784:	40020050 	.word	0x40020050
 8008788:	3ce031c0 	.word	0x3ce031c0

0800878c <HAL_DMA_DeInit>:
{
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008790:	f7ff faa4 	bl	8007cdc <HAL_GetTick>
  if (hdma == NULL)
 8008794:	2c00      	cmp	r4, #0
 8008796:	d043      	beq.n	8008820 <HAL_DMA_DeInit+0x94>
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008798:	6826      	ldr	r6, [r4, #0]
 800879a:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800879c:	6973      	ldr	r3, [r6, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800879e:	4632      	mov	r2, r6
  __HAL_DMA_DISABLE(hdma);
 80087a0:	f043 0306 	orr.w	r3, r3, #6
 80087a4:	6173      	str	r3, [r6, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80087a6:	e005      	b.n	80087b4 <HAL_DMA_DeInit+0x28>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80087a8:	f7ff fa98 	bl	8007cdc <HAL_GetTick>
 80087ac:	1b43      	subs	r3, r0, r5
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d831      	bhi.n	8008816 <HAL_DMA_DeInit+0x8a>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	6953      	ldr	r3, [r2, #20]
 80087b6:	f013 0301 	ands.w	r3, r3, #1
 80087ba:	d1f5      	bne.n	80087a8 <HAL_DMA_DeInit+0x1c>
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 80087bc:	2501      	movs	r5, #1
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80087be:	f44f 47fe 	mov.w	r7, #32512	@ 0x7f00
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80087c2:	f426 667f 	bic.w	r6, r6, #4080	@ 0xff0
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 80087c6:	f3c2 010b 	ubfx	r1, r2, #0, #12
  hdma->Instance->CLBAR = 0U;
 80087ca:	6013      	str	r3, [r2, #0]
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80087cc:	f026 060f 	bic.w	r6, r6, #15
  hdma->Instance->CCR   = 0U;
 80087d0:	6153      	str	r3, [r2, #20]
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 80087d2:	3950      	subs	r1, #80	@ 0x50
  hdma->Instance->CTR1  = 0U;
 80087d4:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->Instance->CTR2  = 0U;
 80087d6:	6453      	str	r3, [r2, #68]	@ 0x44
  hdma->Instance->CBR1  = 0U;
 80087d8:	6493      	str	r3, [r2, #72]	@ 0x48
  hdma->Instance->CSAR  = 0U;
 80087da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdma->Instance->CDAR  = 0U;
 80087dc:	6513      	str	r3, [r2, #80]	@ 0x50
  hdma->Instance->CLLR  = 0U;
 80087de:	67d3      	str	r3, [r2, #124]	@ 0x7c
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 80087e0:	6870      	ldr	r0, [r6, #4]
 80087e2:	f3c1 11c4 	ubfx	r1, r1, #7, #5
 80087e6:	fa05 f101 	lsl.w	r1, r5, r1
 80087ea:	ea20 0101 	bic.w	r1, r0, r1
 80087ee:	6071      	str	r1, [r6, #4]
  if (hdma->Parent != NULL)
 80087f0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80087f2:	60d7      	str	r7, [r2, #12]
  hdma->XferCpltCallback     = NULL;
 80087f4:	e9c4 3318 	strd	r3, r3, [r4, #96]	@ 0x60
 80087f8:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
  hdma->LinkedListQueue = NULL;
 80087fc:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hdma->Parent != NULL)
 8008800:	b101      	cbz	r1, 8008804 <HAL_DMA_DeInit+0x78>
    hdma->Parent = NULL;
 8008802:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->Mode = DMA_NORMAL;
 8008804:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008806:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hdma);
 8008808:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  hdma->State = HAL_DMA_STATE_RESET;
 800880c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 8008810:	4618      	mov	r0, r3
  hdma->Mode = DMA_NORMAL;
 8008812:	6523      	str	r3, [r4, #80]	@ 0x50
}
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008816:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8008818:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800881a:	65a2      	str	r2, [r4, #88]	@ 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 800881c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8008820:	2001      	movs	r0, #1
}
 8008822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008824 <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 8008824:	2800      	cmp	r0, #0
 8008826:	d042      	beq.n	80088ae <HAL_DMA_Start_IT+0x8a>
{
 8008828:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800882a:	f890 404c 	ldrb.w	r4, [r0, #76]	@ 0x4c
 800882e:	2c01      	cmp	r4, #1
 8008830:	d03a      	beq.n	80088a8 <HAL_DMA_Start_IT+0x84>
 8008832:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8008834:	f890 4054 	ldrb.w	r4, [r0, #84]	@ 0x54
  __HAL_LOCK(hdma);
 8008838:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 800883c:	42ac      	cmp	r4, r5
 800883e:	d12b      	bne.n	8008898 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8008840:	f04f 0c02 	mov.w	ip, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008844:	2500      	movs	r5, #0
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008846:	f44f 47fe 	mov.w	r7, #32512	@ 0x7f00
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800884a:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800884c:	f880 c054 	strb.w	ip, [r0, #84]	@ 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008850:	6585      	str	r5, [r0, #88]	@ 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8008852:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8008854:	b29b      	uxth	r3, r3
 8008856:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 800885a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800885e:	ea4c 0303 	orr.w	r3, ip, r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008862:	6e46      	ldr	r6, [r0, #100]	@ 0x64
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8008864:	64a3      	str	r3, [r4, #72]	@ 0x48
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008866:	60e7      	str	r7, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 8008868:	64e1      	str	r1, [r4, #76]	@ 0x4c
  hdma->Instance->CDAR = DstAddress;
 800886a:	6522      	str	r2, [r4, #80]	@ 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800886c:	6963      	ldr	r3, [r4, #20]
 800886e:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 8008872:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 8008874:	b11e      	cbz	r6, 800887e <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8008876:	6963      	ldr	r3, [r4, #20]
 8008878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800887c:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 800887e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008880:	b11b      	cbz	r3, 800888a <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8008882:	6963      	ldr	r3, [r4, #20]
 8008884:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008888:	6163      	str	r3, [r4, #20]
    __HAL_DMA_ENABLE(hdma);
 800888a:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 800888c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	6163      	str	r3, [r4, #20]
}
 8008894:	bcf0      	pop	{r4, r5, r6, r7}
 8008896:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 8008898:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800889a:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 800889c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80088a0:	6582      	str	r2, [r0, #88]	@ 0x58
}
 80088a2:	bcf0      	pop	{r4, r5, r6, r7}
    return HAL_ERROR;
 80088a4:	2001      	movs	r0, #1
}
 80088a6:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80088a8:	2002      	movs	r0, #2
}
 80088aa:	bcf0      	pop	{r4, r5, r6, r7}
 80088ac:	4770      	bx	lr
    return HAL_ERROR;
 80088ae:	2001      	movs	r0, #1
}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop

080088b4 <HAL_DMA_Abort>:
{
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80088b8:	f7ff fa10 	bl	8007cdc <HAL_GetTick>
  if (hdma == NULL)
 80088bc:	2c00      	cmp	r4, #0
 80088be:	d034      	beq.n	800892a <HAL_DMA_Abort+0x76>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80088c0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d12b      	bne.n	8008920 <HAL_DMA_Abort+0x6c>
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80088c8:	2105      	movs	r1, #5
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	4605      	mov	r5, r0
 80088ce:	695a      	ldr	r2, [r3, #20]
 80088d0:	f042 0204 	orr.w	r2, r2, #4
 80088d4:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80088d6:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80088da:	e005      	b.n	80088e8 <HAL_DMA_Abort+0x34>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80088dc:	f7ff f9fe 	bl	8007cdc <HAL_GetTick>
 80088e0:	1b43      	subs	r3, r0, r5
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	d823      	bhi.n	800892e <HAL_DMA_Abort+0x7a>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	0491      	lsls	r1, r2, #18
 80088ec:	d5f6      	bpl.n	80088dc <HAL_DMA_Abort+0x28>
    hdma->State = HAL_DMA_STATE_ABORT;
 80088ee:	2504      	movs	r5, #4
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80088f0:	f44f 40fe 	mov.w	r0, #32512	@ 0x7f00
    hdma->State = HAL_DMA_STATE_READY;
 80088f4:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	f042 0202 	orr.w	r2, r2, #2
 80088fc:	615a      	str	r2, [r3, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80088fe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    hdma->State = HAL_DMA_STATE_ABORT;
 8008900:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008904:	0612      	lsls	r2, r2, #24
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8008906:	60d8      	str	r0, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 8008908:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800890c:	d503      	bpl.n	8008916 <HAL_DMA_Abort+0x62>
      hdma->Instance->CBR1 = 0U;
 800890e:	2200      	movs	r2, #0
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008910:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008912:	7301      	strb	r1, [r0, #12]
      hdma->Instance->CBR1 = 0U;
 8008914:	649a      	str	r2, [r3, #72]	@ 0x48
    __HAL_UNLOCK(hdma);
 8008916:	2300      	movs	r3, #0
 8008918:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
  return HAL_OK;
 800891c:	4618      	mov	r0, r3
}
 800891e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008920:	2220      	movs	r2, #32
    __HAL_UNLOCK(hdma);
 8008922:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008924:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8008926:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    return HAL_ERROR;
 800892a:	2001      	movs	r0, #1
}
 800892c:	bd38      	pop	{r3, r4, r5, pc}
        hdma->State = HAL_DMA_STATE_ERROR;
 800892e:	2103      	movs	r1, #3
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8008930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008932:	6d22      	ldr	r2, [r4, #80]	@ 0x50
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8008934:	f043 0310 	orr.w	r3, r3, #16
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008938:	0610      	lsls	r0, r2, #24
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800893a:	65a3      	str	r3, [r4, #88]	@ 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 800893c:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008940:	d502      	bpl.n	8008948 <HAL_DMA_Abort+0x94>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008942:	2201      	movs	r2, #1
 8008944:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008946:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 8008948:	2300      	movs	r3, #0
 800894a:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
        return HAL_ERROR;
 800894e:	e7ec      	b.n	800892a <HAL_DMA_Abort+0x76>

08008950 <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 8008950:	4603      	mov	r3, r0
 8008952:	b128      	cbz	r0, 8008960 <HAL_DMA_Abort_IT+0x10>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008954:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8008958:	2a02      	cmp	r2, #2
 800895a:	d003      	beq.n	8008964 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800895c:	2220      	movs	r2, #32
 800895e:	6582      	str	r2, [r0, #88]	@ 0x58
    return HAL_ERROR;
 8008960:	2001      	movs	r0, #1
 8008962:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8008964:	2104      	movs	r1, #4
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8008966:	681a      	ldr	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8008968:	f883 1054 	strb.w	r1, [r3, #84]	@ 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800896c:	6953      	ldr	r3, [r2, #20]
  return HAL_OK;
 800896e:	2000      	movs	r0, #0
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8008970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008974:	430b      	orrs	r3, r1
 8008976:	6153      	str	r3, [r2, #20]
}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800897c:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800897e:	6803      	ldr	r3, [r0, #0]
{
 8008980:	b510      	push	{r4, lr}
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008982:	f3c3 020b 	ubfx	r2, r3, #0, #12
{
 8008986:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008988:	f423 607f 	bic.w	r0, r3, #4080	@ 0xff0
 800898c:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008990:	3a50      	subs	r2, #80	@ 0x50
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8008992:	68c0      	ldr	r0, [r0, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008994:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 8008998:	4091      	lsls	r1, r2
  if (global_active_flag_ns == 0U)
 800899a:	4201      	tst	r1, r0
 800899c:	f000 80a5 	beq.w	8008aea <HAL_DMA_IRQHandler+0x16e>
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	0552      	lsls	r2, r2, #21
 80089a4:	d509      	bpl.n	80089ba <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80089a6:	695a      	ldr	r2, [r3, #20]
 80089a8:	0550      	lsls	r0, r2, #21
 80089aa:	d506      	bpl.n	80089ba <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80089ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089b0:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80089b2:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80089b4:	f042 0201 	orr.w	r2, r2, #1
 80089b8:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	0511      	lsls	r1, r2, #20
 80089be:	d509      	bpl.n	80089d4 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80089c0:	695a      	ldr	r2, [r3, #20]
 80089c2:	0512      	lsls	r2, r2, #20
 80089c4:	d506      	bpl.n	80089d4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80089c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089ca:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80089cc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80089ce:	f042 0202 	orr.w	r2, r2, #2
 80089d2:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	04d0      	lsls	r0, r2, #19
 80089d8:	d509      	bpl.n	80089ee <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80089da:	695a      	ldr	r2, [r3, #20]
 80089dc:	04d1      	lsls	r1, r2, #19
 80089de:	d506      	bpl.n	80089ee <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80089e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80089e4:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80089e6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80089e8:	f042 0204 	orr.w	r2, r2, #4
 80089ec:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	0452      	lsls	r2, r2, #17
 80089f2:	d509      	bpl.n	8008a08 <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80089f4:	695a      	ldr	r2, [r3, #20]
 80089f6:	0450      	lsls	r0, r2, #17
 80089f8:	d506      	bpl.n	8008a08 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80089fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80089fe:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8008a00:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8008a02:	f042 0208 	orr.w	r2, r2, #8
 8008a06:	65a2      	str	r2, [r4, #88]	@ 0x58
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	0591      	lsls	r1, r2, #22
 8008a0c:	d50a      	bpl.n	8008a24 <HAL_DMA_IRQHandler+0xa8>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008a0e:	695a      	ldr	r2, [r3, #20]
 8008a10:	0592      	lsls	r2, r2, #22
 8008a12:	d507      	bpl.n	8008a24 <HAL_DMA_IRQHandler+0xa8>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8008a14:	f44f 7100 	mov.w	r1, #512	@ 0x200
      if (hdma->XferHalfCpltCallback != NULL)
 8008a18:	6e62      	ldr	r2, [r4, #100]	@ 0x64
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8008a1a:	60d9      	str	r1, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 8008a1c:	b112      	cbz	r2, 8008a24 <HAL_DMA_IRQHandler+0xa8>
        hdma->XferHalfCpltCallback(hdma);
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4790      	blx	r2
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	0490      	lsls	r0, r2, #18
 8008a28:	d511      	bpl.n	8008a4e <HAL_DMA_IRQHandler+0xd2>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	0491      	lsls	r1, r2, #18
 8008a2e:	d50e      	bpl.n	8008a4e <HAL_DMA_IRQHandler+0xd2>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8008a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008a34:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8008a36:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8008a3a:	2a04      	cmp	r2, #4
 8008a3c:	d03d      	beq.n	8008aba <HAL_DMA_IRQHandler+0x13e>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8008a3e:	2105      	movs	r1, #5
        if (hdma->XferSuspendCallback != NULL)
 8008a40:	6f22      	ldr	r2, [r4, #112]	@ 0x70
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8008a42:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
        if (hdma->XferSuspendCallback != NULL)
 8008a46:	b112      	cbz	r2, 8008a4e <HAL_DMA_IRQHandler+0xd2>
          hdma->XferSuspendCallback(hdma);
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4790      	blx	r2
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	05d0      	lsls	r0, r2, #23
 8008a52:	d518      	bpl.n	8008a86 <HAL_DMA_IRQHandler+0x10a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008a54:	695a      	ldr	r2, [r3, #20]
 8008a56:	05d1      	lsls	r1, r2, #23
 8008a58:	d515      	bpl.n	8008a86 <HAL_DMA_IRQHandler+0x10a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008a5a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8008a5c:	0612      	lsls	r2, r2, #24
 8008a5e:	d545      	bpl.n	8008aec <HAL_DMA_IRQHandler+0x170>
        if (hdma->Instance->CLLR == 0U)
 8008a60:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8008a62:	b932      	cbnz	r2, 8008a72 <HAL_DMA_IRQHandler+0xf6>
          if (hdma->Instance->CBR1 == 0U)
 8008a64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a66:	b922      	cbnz	r2, 8008a72 <HAL_DMA_IRQHandler+0xf6>
            hdma->State = HAL_DMA_STATE_READY;
 8008a68:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008a6a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
            hdma->State = HAL_DMA_STATE_READY;
 8008a6c:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008a70:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8008a72:	f44f 7040 	mov.w	r0, #768	@ 0x300
      __HAL_UNLOCK(hdma);
 8008a76:	2100      	movs	r1, #0
      if (hdma->XferCpltCallback != NULL)
 8008a78:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8008a7a:	60d8      	str	r0, [r3, #12]
      __HAL_UNLOCK(hdma);
 8008a7c:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
      if (hdma->XferCpltCallback != NULL)
 8008a80:	b10a      	cbz	r2, 8008a86 <HAL_DMA_IRQHandler+0x10a>
        hdma->XferCpltCallback(hdma);
 8008a82:	4620      	mov	r0, r4
 8008a84:	4790      	blx	r2
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d02e      	beq.n	8008aea <HAL_DMA_IRQHandler+0x16e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008a8c:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 8008a8e:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008a90:	6953      	ldr	r3, [r2, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008a92:	6d20      	ldr	r0, [r4, #80]	@ 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8008a94:	f043 0302 	orr.w	r3, r3, #2
 8008a98:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hdma);
 8008a9a:	2200      	movs	r2, #0
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008a9c:	0603      	lsls	r3, r0, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008a9e:	bf48      	it	mi
 8008aa0:	6f63      	ldrmi	r3, [r4, #116]	@ 0x74
    hdma->State = HAL_DMA_STATE_READY;
 8008aa2:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008aa6:	bf48      	it	mi
 8008aa8:	7319      	strbmi	r1, [r3, #12]
    if (hdma->XferErrorCallback != NULL)
 8008aaa:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
    __HAL_UNLOCK(hdma);
 8008aac:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    if (hdma->XferErrorCallback != NULL)
 8008ab0:	b1db      	cbz	r3, 8008aea <HAL_DMA_IRQHandler+0x16e>
      hdma->XferErrorCallback(hdma);
 8008ab2:	4620      	mov	r0, r4
}
 8008ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 8008ab8:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_READY;
 8008aba:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8008abc:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008abe:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8008ac0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ac4:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	f042 0202 	orr.w	r2, r2, #2
 8008acc:	615a      	str	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008ace:	0602      	lsls	r2, r0, #24
        hdma->State = HAL_DMA_STATE_READY;
 8008ad0:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008ad4:	d503      	bpl.n	8008ade <HAL_DMA_IRQHandler+0x162>
          hdma->Instance->CBR1 = 0U;
 8008ad6:	2200      	movs	r2, #0
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8008ad8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8008ada:	7301      	strb	r1, [r0, #12]
          hdma->Instance->CBR1 = 0U;
 8008adc:	649a      	str	r2, [r3, #72]	@ 0x48
        __HAL_UNLOCK(hdma);
 8008ade:	2200      	movs	r2, #0
        if (hdma->XferAbortCallback != NULL)
 8008ae0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        __HAL_UNLOCK(hdma);
 8008ae2:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
        if (hdma->XferAbortCallback != NULL)
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <HAL_DMA_IRQHandler+0x136>
}
 8008aea:	bd10      	pop	{r4, pc}
        if (hdma->Instance->CBR1 == 0U)
 8008aec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d1bf      	bne.n	8008a72 <HAL_DMA_IRQHandler+0xf6>
          hdma->State = HAL_DMA_STATE_READY;
 8008af2:	2201      	movs	r2, #1
 8008af4:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8008af8:	e7bb      	b.n	8008a72 <HAL_DMA_IRQHandler+0xf6>
 8008afa:	bf00      	nop

08008afc <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8008afc:	b1d0      	cbz	r0, 8008b34 <HAL_DMA_ConfigChannelAttributes+0x38>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8008afe:	06cb      	lsls	r3, r1, #27
 8008b00:	d516      	bpl.n	8008b30 <HAL_DMA_ConfigChannelAttributes+0x34>
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008b02:	f04f 0c01 	mov.w	ip, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008b06:	6803      	ldr	r3, [r0, #0]
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008b08:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008b0c:	f3c3 020b 	ubfx	r2, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8008b10:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008b14:	f023 030f 	bic.w	r3, r3, #15
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008b18:	3a50      	subs	r2, #80	@ 0x50
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8008b1a:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008b1c:	f3c2 12c4 	ubfx	r2, r2, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008b20:	6859      	ldr	r1, [r3, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8008b22:	fa0c f202 	lsl.w	r2, ip, r2
      p_dma_instance->PRIVCFGR |= channel_idx;
 8008b26:	bf0c      	ite	eq
 8008b28:	430a      	orreq	r2, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8008b2a:	ea21 0202 	bicne.w	r2, r1, r2
 8008b2e:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8008b30:	2000      	movs	r0, #0
 8008b32:	4770      	bx	lr
    return HAL_ERROR;
 8008b34:	2001      	movs	r0, #1
}
 8008b36:	4770      	bx	lr

08008b38 <HAL_DMAEx_List_Start_IT>:
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d052      	beq.n	8008be2 <HAL_DMAEx_List_Start_IT+0xaa>
 8008b3c:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	d04f      	beq.n	8008be2 <HAL_DMAEx_List_Start_IT+0xaa>
{
 8008b42:	b410      	push	{r4}
  {
    return HAL_ERROR;
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8008b44:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8008b48:	6802      	ldr	r2, [r0, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8008b4a:	2b01      	cmp	r3, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8008b4c:	6954      	ldr	r4, [r2, #20]
  dma_state = hdma->State;
 8008b4e:	fa5f fc83 	uxtb.w	ip, r3
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8008b52:	d004      	beq.n	8008b5e <HAL_DMAEx_List_Start_IT+0x26>
 8008b54:	f1bc 0f02 	cmp.w	ip, #2
 8008b58:	d10e      	bne.n	8008b78 <HAL_DMAEx_List_Start_IT+0x40>
 8008b5a:	03e3      	lsls	r3, r4, #15
 8008b5c:	d50c      	bpl.n	8008b78 <HAL_DMAEx_List_Start_IT+0x40>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8008b5e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	b2dc      	uxtb	r4, r3
 8008b66:	d010      	beq.n	8008b8a <HAL_DMAEx_List_Start_IT+0x52>
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8008b68:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008b6a:	6953      	ldr	r3, [r2, #20]
 8008b6c:	f043 0301 	orr.w	r3, r3, #1
 8008b70:	6153      	str	r3, [r2, #20]
}
 8008b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b76:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 8008b78:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b7a:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(hdma);
 8008b7c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b80:	6582      	str	r2, [r0, #88]	@ 0x58
}
 8008b82:	f85d 4b04 	ldr.w	r4, [sp], #4
    return HAL_ERROR;
 8008b86:	2001      	movs	r0, #1
}
 8008b88:	4770      	bx	lr
      __HAL_LOCK(hdma);
 8008b8a:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d029      	beq.n	8008be6 <HAL_DMAEx_List_Start_IT+0xae>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8008b92:	2300      	movs	r3, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8008b94:	f04f 0c02 	mov.w	ip, #2
      __HAL_LOCK(hdma);
 8008b98:	f880 404c 	strb.w	r4, [r0, #76]	@ 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8008b9c:	f880 c054 	strb.w	ip, [r0, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8008ba0:	f881 c00c 	strb.w	ip, [r1, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8008ba4:	6583      	str	r3, [r0, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8008ba6:	610b      	str	r3, [r1, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8008ba8:	6953      	ldr	r3, [r2, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8008baa:	6e44      	ldr	r4, [r0, #100]	@ 0x64
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8008bac:	f443 43ba 	orr.w	r3, r3, #23808	@ 0x5d00
 8008bb0:	6153      	str	r3, [r2, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8008bb2:	b11c      	cbz	r4, 8008bbc <HAL_DMAEx_List_Start_IT+0x84>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8008bb4:	6953      	ldr	r3, [r2, #20]
 8008bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008bba:	6153      	str	r3, [r2, #20]
      if (hdma->XferSuspendCallback != NULL)
 8008bbc:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8008bbe:	b11b      	cbz	r3, 8008bc8 <HAL_DMAEx_List_Start_IT+0x90>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8008bc0:	6953      	ldr	r3, [r2, #20]
 8008bc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008bc6:	6153      	str	r3, [r2, #20]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8008bc8:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8008bcc:	680b      	ldr	r3, [r1, #0]
 8008bce:	0c19      	lsrs	r1, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8008bd0:	4003      	ands	r3, r0
 8008bd2:	f043 4378 	orr.w	r3, r3, #4160749568	@ 0xf8000000
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8008bd6:	0409      	lsls	r1, r1, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8008bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8008bdc:	6011      	str	r1, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8008bde:	67d3      	str	r3, [r2, #124]	@ 0x7c
 8008be0:	e7c2      	b.n	8008b68 <HAL_DMAEx_List_Start_IT+0x30>
    return HAL_ERROR;
 8008be2:	2001      	movs	r0, #1
}
 8008be4:	4770      	bx	lr
      __HAL_LOCK(hdma);
 8008be6:	2002      	movs	r0, #2
 8008be8:	e7c3      	b.n	8008b72 <HAL_DMAEx_List_Start_IT+0x3a>
 8008bea:	bf00      	nop

08008bec <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8008bec:	2901      	cmp	r1, #1
 8008bee:	d004      	beq.n	8008bfa <HAL_EXTI_RegisterCallback+0xe>
 8008bf0:	2902      	cmp	r1, #2
 8008bf2:	d009      	beq.n	8008c08 <HAL_EXTI_RegisterCallback+0x1c>
 8008bf4:	b121      	cbz	r1, 8008c00 <HAL_EXTI_RegisterCallback+0x14>
 8008bf6:	2001      	movs	r0, #1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8008bf8:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 8008bfa:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	4770      	bx	lr
      hexti->RisingCallback = pPendingCbfn;
 8008c00:	e9c0 2201 	strd	r2, r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c04:	2000      	movs	r0, #0
 8008c06:	4770      	bx	lr
      hexti->FallingCallback = pPendingCbfn;
 8008c08:	6082      	str	r2, [r0, #8]
      break;
 8008c0a:	e7f7      	b.n	8008bfc <HAL_EXTI_RegisterCallback+0x10>

08008c0c <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	b110      	cbz	r0, 8008c16 <HAL_EXTI_GetHandle+0xa>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8008c10:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8008c12:	6019      	str	r1, [r3, #0]
    return HAL_OK;
 8008c14:	4770      	bx	lr
    return HAL_ERROR;
 8008c16:	2001      	movs	r0, #1
  }
}
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop

08008c1c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8008c1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8008c1e:	2501      	movs	r5, #1
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8008c20:	6804      	ldr	r4, [r0, #0]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8008c22:	4b0d      	ldr	r3, [pc, #52]	@ (8008c58 <HAL_EXTI_IRQHandler+0x3c>)
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8008c24:	f004 021f 	and.w	r2, r4, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8008c28:	f3c4 4400 	ubfx	r4, r4, #16, #1
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8008c2c:	0164      	lsls	r4, r4, #5
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8008c2e:	4095      	lsls	r5, r2
  regval = (*regaddr & maskline);
 8008c30:	58e2      	ldr	r2, [r4, r3]
{
 8008c32:	4606      	mov	r6, r0

  if (regval != 0U)
 8008c34:	422a      	tst	r2, r5
 8008c36:	d003      	beq.n	8008c40 <HAL_EXTI_IRQHandler+0x24>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8008c38:	6842      	ldr	r2, [r0, #4]
    *regaddr = maskline;
 8008c3a:	50e5      	str	r5, [r4, r3]
    if (hexti->RisingCallback != NULL)
 8008c3c:	b102      	cbz	r2, 8008c40 <HAL_EXTI_IRQHandler+0x24>
    {
      hexti->RisingCallback();
 8008c3e:	4790      	blx	r2
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8008c40:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <HAL_EXTI_IRQHandler+0x40>)
  regval = (*regaddr & maskline);
 8008c42:	58e2      	ldr	r2, [r4, r3]

  if (regval != 0U)
 8008c44:	422a      	tst	r2, r5
 8008c46:	d005      	beq.n	8008c54 <HAL_EXTI_IRQHandler+0x38>
  {
    /* Clear pending bit */
    *regaddr = maskline;

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8008c48:	68b2      	ldr	r2, [r6, #8]
    *regaddr = maskline;
 8008c4a:	50e5      	str	r5, [r4, r3]
    if (hexti->FallingCallback != NULL)
 8008c4c:	b112      	cbz	r2, 8008c54 <HAL_EXTI_IRQHandler+0x38>
    {
      hexti->FallingCallback();
    }
  }
}
 8008c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hexti->FallingCallback();
 8008c52:	4710      	bx	r2
}
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	bf00      	nop
 8008c58:	4602200c 	.word	0x4602200c
 8008c5c:	46022010 	.word	0x46022010

08008c60 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 8008c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008c64:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 8008e18 <HAL_FLASH_Program+0x1b8>
 8008c68:	f898 3000 	ldrb.w	r3, [r8]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	f000 809f 	beq.w	8008db0 <HAL_FLASH_Program+0x150>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4615      	mov	r5, r2

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008c76:	2200      	movs	r2, #0
 8008c78:	4681      	mov	r9, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	f8c8 2004 	str.w	r2, [r8, #4]
  __HAL_LOCK(&pFlash);
 8008c80:	f888 3000 	strb.w	r3, [r8]
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8008c84:	f7ff f82a 	bl	8007cdc <HAL_GetTick>
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
#else
  reg_sr = &(FLASH_NS->NSSR);
#endif /* FLASH_SECSR_EOP */

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008c88:	4f62      	ldr	r7, [pc, #392]	@ (8008e14 <HAL_FLASH_Program+0x1b4>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008c8a:	f500 767a 	add.w	r6, r0, #1000	@ 0x3e8
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008c8e:	e004      	b.n	8008c9a <HAL_FLASH_Program+0x3a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if (HAL_GetTick() >= timeout)
 8008c90:	f7ff f824 	bl	8007cdc <HAL_GetTick>
 8008c94:	4286      	cmp	r6, r0
 8008c96:	f240 8085 	bls.w	8008da4 <HAL_FLASH_Program+0x144>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8008ca0:	d1f6      	bne.n	8008c90 <HAL_FLASH_Program+0x30>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8008ca2:	f242 02fa 	movw	r2, #8442	@ 0x20fa
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	f040 8099 	bne.w	8008de0 <HAL_FLASH_Program+0x180>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8008cae:	6a3b      	ldr	r3, [r7, #32]
    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8008cb0:	f029 4600 	bic.w	r6, r9, #2147483648	@ 0x80000000
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8008cb4:	07da      	lsls	r2, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8008cb6:	bf44      	itt	mi
 8008cb8:	2301      	movmi	r3, #1
 8008cba:	623b      	strmi	r3, [r7, #32]
    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8008cbc:	2e01      	cmp	r6, #1
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
  uint8_t index = 4;
  uint32_t *dest_addr = (uint32_t *)Address;
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8008cbe:	462b      	mov	r3, r5
    pFlash.ProcedureOnGoing = TypeProgram;
 8008cc0:	f8c8 9008 	str.w	r9, [r8, #8]
    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 8008cc4:	d077      	beq.n	8008db6 <HAL_FLASH_Program+0x156>
#else
  reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR1_PG | FLASH_NSCR1_BWR));
 8008cc6:	4953      	ldr	r1, [pc, #332]	@ (8008e14 <HAL_FLASH_Program+0x1b4>)
 8008cc8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cce:	f042 0201 	orr.w	r2, r2, #1
 8008cd2:	628a      	str	r2, [r1, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008cd4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008cd8:	b672      	cpsid	i
 8008cda:	1d2a      	adds	r2, r5, #4
 8008cdc:	4294      	cmp	r4, r2
 8008cde:	f000 808f 	beq.w	8008e00 <HAL_FLASH_Program+0x1a0>
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 8008ce2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ce6:	e9c4 2300 	strd	r2, r3, [r4]
 8008cea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8008cee:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008cf2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8008cf6:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8008cfa:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8008cfe:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8008d02:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8008d06:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008d0a:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	@ 0x28
 8008d0e:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
 8008d12:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8008d16:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 8008d1a:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	@ 0x38
 8008d1e:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 8008d22:	e9d5 2310 	ldrd	r2, r3, [r5, #64]	@ 0x40
 8008d26:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8008d2a:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
 8008d2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008d32:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	@ 0x50
 8008d36:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
 8008d3a:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	@ 0x58
 8008d3e:	e9c4 2316 	strd	r2, r3, [r4, #88]	@ 0x58
 8008d42:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	@ 0x60
 8008d46:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
 8008d4a:	e9d5 231a 	ldrd	r2, r3, [r5, #104]	@ 0x68
 8008d4e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 8008d52:	e9d5 231c 	ldrd	r2, r3, [r5, #112]	@ 0x70
 8008d56:	e9c4 231c 	strd	r2, r3, [r4, #112]	@ 0x70
 8008d5a:	e9d5 231e 	ldrd	r2, r3, [r5, #120]	@ 0x78
 8008d5e:	e9c4 231e 	strd	r2, r3, [r4, #120]	@ 0x78
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d62:	f380 8810 	msr	PRIMASK, r0
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008d66:	f7fe ffb9 	bl	8007cdc <HAL_GetTick>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008d6a:	4d2a      	ldr	r5, [pc, #168]	@ (8008e14 <HAL_FLASH_Program+0x1b4>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008d6c:	f500 747a 	add.w	r4, r0, #1000	@ 0x3e8
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008d70:	e003      	b.n	8008d7a <HAL_FLASH_Program+0x11a>
      if (HAL_GetTick() >= timeout)
 8008d72:	f7fe ffb3 	bl	8007cdc <HAL_GetTick>
 8008d76:	4284      	cmp	r4, r0
 8008d78:	d930      	bls.n	8008ddc <HAL_FLASH_Program+0x17c>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008d7a:	6a2b      	ldr	r3, [r5, #32]
 8008d7c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8008d80:	d1f7      	bne.n	8008d72 <HAL_FLASH_Program+0x112>
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8008d82:	f242 02fa 	movw	r2, #8442	@ 0x20fa
 8008d86:	6a2b      	ldr	r3, [r5, #32]
  if (error != 0U)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	d131      	bne.n	8008df0 <HAL_FLASH_Program+0x190>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8008d8c:	6a2b      	ldr	r3, [r5, #32]
    return HAL_ERROR;
 8008d8e:	2000      	movs	r0, #0
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8008d90:	07db      	lsls	r3, r3, #31
    (*reg_sr) = FLASH_FLAG_EOP;
 8008d92:	bf44      	itt	mi
 8008d94:	2301      	movmi	r3, #1
 8008d96:	622b      	strmi	r3, [r5, #32]
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 8008d98:	4a1e      	ldr	r2, [pc, #120]	@ (8008e14 <HAL_FLASH_Program+0x1b4>)
 8008d9a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8008d9c:	ea23 0306 	bic.w	r3, r3, r6
 8008da0:	6293      	str	r3, [r2, #40]	@ 0x28
 8008da2:	e000      	b.n	8008da6 <HAL_FLASH_Program+0x146>
 8008da4:	2003      	movs	r0, #3
  __HAL_UNLOCK(&pFlash);
 8008da6:	2300      	movs	r3, #0
 8008da8:	f888 3000 	strb.w	r3, [r8]
}
 8008dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8008db0:	2002      	movs	r0, #2
}
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT((*reg_cr), FLASH_NSCR1_PG);
 8008db6:	4a17      	ldr	r2, [pc, #92]	@ (8008e14 <HAL_FLASH_Program+0x1b4>)
 8008db8:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	6293      	str	r3, [r2, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008dc0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008dc4:	b672      	cpsid	i
    *dest_addr = *src_addr;
 8008dc6:	682a      	ldr	r2, [r5, #0]
 8008dc8:	6022      	str	r2, [r4, #0]
 8008dca:	686a      	ldr	r2, [r5, #4]
 8008dcc:	6062      	str	r2, [r4, #4]
 8008dce:	68aa      	ldr	r2, [r5, #8]
 8008dd0:	60a2      	str	r2, [r4, #8]
 8008dd2:	68ea      	ldr	r2, [r5, #12]
 8008dd4:	60e2      	str	r2, [r4, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd6:	f383 8810 	msr	PRIMASK, r3
}
 8008dda:	e7c4      	b.n	8008d66 <HAL_FLASH_Program+0x106>
        return HAL_TIMEOUT;
 8008ddc:	2003      	movs	r0, #3
 8008dde:	e7db      	b.n	8008d98 <HAL_FLASH_Program+0x138>
    pFlash.ErrorCode |= error;
 8008de0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return HAL_ERROR;
 8008de4:	2001      	movs	r0, #1
    pFlash.ErrorCode |= error;
 8008de6:	431a      	orrs	r2, r3
 8008de8:	f8c8 2004 	str.w	r2, [r8, #4]
    (*reg_sr) = error;
 8008dec:	623b      	str	r3, [r7, #32]
  if (status == HAL_OK)
 8008dee:	e7da      	b.n	8008da6 <HAL_FLASH_Program+0x146>
    pFlash.ErrorCode |= error;
 8008df0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return HAL_ERROR;
 8008df4:	2001      	movs	r0, #1
    pFlash.ErrorCode |= error;
 8008df6:	431a      	orrs	r2, r3
    (*reg_sr) = error;
 8008df8:	622b      	str	r3, [r5, #32]
    pFlash.ErrorCode |= error;
 8008dfa:	f8c8 2004 	str.w	r2, [r8, #4]
    return HAL_ERROR;
 8008dfe:	e7cb      	b.n	8008d98 <HAL_FLASH_Program+0x138>
 8008e00:	1b64      	subs	r4, r4, r5
 8008e02:	f105 0180 	add.w	r1, r5, #128	@ 0x80
    *dest_addr = *src_addr;
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	511a      	str	r2, [r3, r4]
    dest_addr++;
    src_addr++;
 8008e0a:	3304      	adds	r3, #4
    burst_index--;
  } while (burst_index != 0U);
 8008e0c:	4299      	cmp	r1, r3
 8008e0e:	d1fa      	bne.n	8008e06 <HAL_FLASH_Program+0x1a6>
 8008e10:	e7a7      	b.n	8008d62 <HAL_FLASH_Program+0x102>
 8008e12:	bf00      	nop
 8008e14:	40022000 	.word	0x40022000
 8008e18:	20005b28 	.word	0x20005b28

08008e1c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK) != 0U)
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <HAL_FLASH_Unlock+0x1c>)
 8008e1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e20:	2a00      	cmp	r2, #0
 8008e22:	db01      	blt.n	8008e28 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8008e24:	2000      	movs	r0, #0
}
 8008e26:	4770      	bx	lr
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8008e28:	4904      	ldr	r1, [pc, #16]	@ (8008e3c <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8008e2a:	4a05      	ldr	r2, [pc, #20]	@ (8008e40 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8008e2c:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8008e2e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK) != 0U)
 8008e30:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008e32:	0fc0      	lsrs	r0, r0, #31
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40022000 	.word	0x40022000
 8008e3c:	45670123 	.word	0x45670123
 8008e40:	cdef89ab 	.word	0xcdef89ab

08008e44 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK);
 8008e44:	4b04      	ldr	r3, [pc, #16]	@ (8008e58 <HAL_FLASH_Lock+0x14>)
 8008e46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e48:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (READ_BIT(FLASH->NSCR1, FLASH_NSCR1_LOCK) != 0U)
 8008e4e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
}
 8008e50:	43c0      	mvns	r0, r0
 8008e52:	0fc0      	lsrs	r0, r0, #31
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	40022000 	.word	0x40022000

08008e5c <FLASH_WaitForLastOperation>:
{
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	4604      	mov	r4, r0
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008e60:	f7fe ff3c 	bl	8007cdc <HAL_GetTick>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008e64:	1c62      	adds	r2, r4, #1
 8008e66:	d118      	bne.n	8008e9a <FLASH_WaitForLastOperation+0x3e>
 8008e68:	4a13      	ldr	r2, [pc, #76]	@ (8008eb8 <FLASH_WaitForLastOperation+0x5c>)
 8008e6a:	6a13      	ldr	r3, [r2, #32]
 8008e6c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8008e70:	d1fb      	bne.n	8008e6a <FLASH_WaitForLastOperation+0xe>
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8008e72:	f242 01fa 	movw	r1, #8442	@ 0x20fa
 8008e76:	4a10      	ldr	r2, [pc, #64]	@ (8008eb8 <FLASH_WaitForLastOperation+0x5c>)
 8008e78:	6a13      	ldr	r3, [r2, #32]
  if (error != 0U)
 8008e7a:	400b      	ands	r3, r1
 8008e7c:	d106      	bne.n	8008e8c <FLASH_WaitForLastOperation+0x30>
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8008e7e:	6a13      	ldr	r3, [r2, #32]
    return HAL_ERROR;
 8008e80:	2000      	movs	r0, #0
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8008e82:	07db      	lsls	r3, r3, #31
    (*reg_sr) = FLASH_FLAG_EOP;
 8008e84:	bf44      	itt	mi
 8008e86:	2301      	movmi	r3, #1
 8008e88:	6213      	strmi	r3, [r2, #32]
}
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
    pFlash.ErrorCode |= error;
 8008e8c:	4c0b      	ldr	r4, [pc, #44]	@ (8008ebc <FLASH_WaitForLastOperation+0x60>)
    return HAL_ERROR;
 8008e8e:	2001      	movs	r0, #1
    pFlash.ErrorCode |= error;
 8008e90:	6861      	ldr	r1, [r4, #4]
    (*reg_sr) = error;
 8008e92:	6213      	str	r3, [r2, #32]
    pFlash.ErrorCode |= error;
 8008e94:	4319      	orrs	r1, r3
 8008e96:	6061      	str	r1, [r4, #4]
}
 8008e98:	bd38      	pop	{r3, r4, r5, pc}
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008e9a:	4d07      	ldr	r5, [pc, #28]	@ (8008eb8 <FLASH_WaitForLastOperation+0x5c>)
  uint32_t timeout = HAL_GetTick() + Timeout;
 8008e9c:	4404      	add	r4, r0
 8008e9e:	e003      	b.n	8008ea8 <FLASH_WaitForLastOperation+0x4c>
      if (HAL_GetTick() >= timeout)
 8008ea0:	f7fe ff1c 	bl	8007cdc <HAL_GetTick>
 8008ea4:	42a0      	cmp	r0, r4
 8008ea6:	d204      	bcs.n	8008eb2 <FLASH_WaitForLastOperation+0x56>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8008ea8:	6a2b      	ldr	r3, [r5, #32]
 8008eaa:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8008eae:	d1f7      	bne.n	8008ea0 <FLASH_WaitForLastOperation+0x44>
 8008eb0:	e7df      	b.n	8008e72 <FLASH_WaitForLastOperation+0x16>
        return HAL_TIMEOUT;
 8008eb2:	2003      	movs	r0, #3
}
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	40022000 	.word	0x40022000
 8008ebc:	20005b28 	.word	0x20005b28

08008ec0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008ec4:	4d30      	ldr	r5, [pc, #192]	@ (8008f88 <HAL_FLASHEx_Erase+0xc8>)
 8008ec6:	782b      	ldrb	r3, [r5, #0]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d04c      	beq.n	8008f66 <HAL_FLASHEx_Erase+0xa6>
 8008ecc:	2201      	movs	r2, #1

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4682      	mov	sl, r0

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008ed6:	460f      	mov	r7, r1
  __HAL_LOCK(&pFlash);
 8008ed8:	702a      	strb	r2, [r5, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008eda:	606b      	str	r3, [r5, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008edc:	f7ff ffbe 	bl	8008e5c <FLASH_WaitForLastOperation>

  if (status == HAL_OK)
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d13a      	bne.n	8008f5c <HAL_FLASHEx_Erase+0x9c>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8008ee6:	f8da 3000 	ldr.w	r3, [sl]
 8008eea:	60ab      	str	r3, [r5, #8]
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR1) : &(FLASH_NS->NSCR1);
#else
    reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8008eec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d03c      	beq.n	8008f6e <HAL_FLASHEx_Erase+0xae>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef8:	603b      	str	r3, [r7, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008efa:	e9da 4301 	ldrd	r4, r3, [sl, #4]
 8008efe:	4423      	add	r3, r4
 8008f00:	429c      	cmp	r4, r3
 8008f02:	d21e      	bcs.n	8008f42 <HAL_FLASHEx_Erase+0x82>
  reg_cr = &(FLASH_NS->NSCR1);
#endif /* FLASH_SECCR1_LOCK */


  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR1_PNB | FLASH_NSCR1_PER | FLASH_NSCR1_STRT), ((Page << FLASH_NSCR1_PNB_Pos) | FLASH_NSCR1_PER | FLASH_NSCR1_STRT));
 8008f04:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8008f8c <HAL_FLASHEx_Erase+0xcc>
 8008f08:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 8008f90 <HAL_FLASHEx_Erase+0xd0>
 8008f0c:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8008f94 <HAL_FLASHEx_Erase+0xd4>
 8008f10:	e005      	b.n	8008f1e <HAL_FLASHEx_Erase+0x5e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008f12:	3401      	adds	r4, #1
 8008f14:	e9da 3201 	ldrd	r3, r2, [sl, #4]
 8008f18:	4413      	add	r3, r2
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	d911      	bls.n	8008f42 <HAL_FLASHEx_Erase+0x82>
  MODIFY_REG((*reg_cr), (FLASH_NSCR1_PNB | FLASH_NSCR1_PER | FLASH_NSCR1_STRT), ((Page << FLASH_NSCR1_PNB_Pos) | FLASH_NSCR1_PER | FLASH_NSCR1_STRT));
 8008f1e:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  MODIFY_REG((*reg_cr), (FLASH_NSCR1_PNB | FLASH_NSCR1_PER | FLASH_NSCR1_STRT), ((Page << FLASH_NSCR1_PNB_Pos) | FLASH_NSCR1_PER | FLASH_NSCR1_STRT));
 8008f26:	ea03 0309 	and.w	r3, r3, r9
 8008f2a:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
 8008f2e:	ea43 0308 	orr.w	r3, r3, r8
 8008f32:	f8cb 3028 	str.w	r3, [fp, #40]	@ 0x28
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f36:	f7ff ff91 	bl	8008e5c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d0e9      	beq.n	8008f12 <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f3e:	4606      	mov	r6, r0
          *PageError = page_index;
 8008f40:	603c      	str	r4, [r7, #0]
    CLEAR_BIT((*reg_cr), (((pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK))) | FLASH_NSCR1_PNB));
 8008f42:	f8da 3000 	ldr.w	r3, [sl]
 8008f46:	4911      	ldr	r1, [pc, #68]	@ (8008f8c <HAL_FLASHEx_Erase+0xcc>)
 8008f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f4c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8008f4e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8008f52:	f443 737e 	orr.w	r3, r3, #1016	@ 0x3f8
 8008f56:	ea22 0303 	bic.w	r3, r2, r3
 8008f5a:	628b      	str	r3, [r1, #40]	@ 0x28
  __HAL_UNLOCK(&pFlash);
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	702b      	strb	r3, [r5, #0]
}
 8008f60:	4630      	mov	r0, r6
 8008f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8008f66:	2602      	movs	r6, #2
}
 8008f68:	4630      	mov	r0, r6
 8008f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SET_BIT((*reg_cr), FLASH_NSCR1_MER | FLASH_NSCR1_STRT);
 8008f6e:	4a07      	ldr	r2, [pc, #28]	@ (8008f8c <HAL_FLASHEx_Erase+0xcc>)
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  SET_BIT((*reg_cr), FLASH_NSCR1_MER | FLASH_NSCR1_STRT);
 8008f74:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8008f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f7a:	f043 0304 	orr.w	r3, r3, #4
 8008f7e:	6293      	str	r3, [r2, #40]	@ 0x28
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008f80:	f7ff ff6c 	bl	8008e5c <FLASH_WaitForLastOperation>
 8008f84:	4606      	mov	r6, r0
 8008f86:	e7dc      	b.n	8008f42 <HAL_FLASHEx_Erase+0x82>
 8008f88:	20005b28 	.word	0x20005b28
 8008f8c:	40022000 	.word	0x40022000
 8008f90:	fffefc05 	.word	0xfffefc05
 8008f94:	00010002 	.word	0x00010002

08008f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f9c:	680c      	ldr	r4, [r1, #0]
{
 8008f9e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fa0:	2c00      	cmp	r4, #0
 8008fa2:	f000 80a8 	beq.w	80090f6 <HAL_GPIO_Init+0x15e>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008fa6:	4a5c      	ldr	r2, [pc, #368]	@ (8009118 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8008fa8:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008faa:	ea02 2290 	and.w	r2, r2, r0, lsr #10
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fae:	f04f 0b01 	mov.w	fp, #1
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fb2:	4e5a      	ldr	r6, [pc, #360]	@ (800911c <HAL_GPIO_Init+0x184>)
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008fb4:	9202      	str	r2, [sp, #8]
        temp = EXTI->RTSR1;
 8008fb6:	9101      	str	r1, [sp, #4]
 8008fb8:	e048      	b.n	800904c <HAL_GPIO_Init+0xb4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008fba:	2a03      	cmp	r2, #3
 8008fbc:	f040 809e 	bne.w	80090fc <HAL_GPIO_Init+0x164>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8008fc0:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8008fc2:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008fc4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8008fc8:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8008fcc:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8008fd0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008fd2:	d037      	beq.n	8009044 <HAL_GPIO_Init+0xac>
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008fd4:	210f      	movs	r1, #15
 8008fd6:	f023 0703 	bic.w	r7, r3, #3
 8008fda:	f107 478c 	add.w	r7, r7, #1174405120	@ 0x46000000
 8008fde:	f003 0203 	and.w	r2, r3, #3
 8008fe2:	f507 3708 	add.w	r7, r7, #139264	@ 0x22000
 8008fe6:	00d2      	lsls	r2, r2, #3
        temp = EXTI->EXTICR[position >> 2U];
 8008fe8:	f8d7 e060 	ldr.w	lr, [r7, #96]	@ 0x60
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008fec:	fa01 f802 	lsl.w	r8, r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008ff0:	9902      	ldr	r1, [sp, #8]
        temp &= ~(0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008ff2:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8008ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8008ffa:	ea42 020e 	orr.w	r2, r2, lr
        EXTI->EXTICR[position >> 2U] = temp;
 8008ffe:	663a      	str	r2, [r7, #96]	@ 0x60
        temp &= ~(iocurrent);
 8009000:	ea6f 070c 	mvn.w	r7, ip
        temp = EXTI->RTSR1;
 8009004:	6832      	ldr	r2, [r6, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009006:	02e9      	lsls	r1, r5, #11
        temp &= ~(iocurrent);
 8009008:	bf54      	ite	pl
 800900a:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800900c:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->RTSR1 = temp;
 8009010:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8009012:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009014:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 8009016:	bf54      	ite	pl
 8009018:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800901a:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 800901e:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009020:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009024:	03a9      	lsls	r1, r5, #14
        temp &= ~(iocurrent);
 8009026:	bf54      	ite	pl
 8009028:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800902a:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->EMR1 = temp;
 800902e:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84

        temp = EXTI->IMR1;
 8009032:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009036:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 8009038:	bf54      	ite	pl
 800903a:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800903c:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->IMR1 = temp;
 8009040:	f8c6 2080 	str.w	r2, [r6, #128]	@ 0x80
      }
    }

    position++;
 8009044:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009046:	fa34 f203 	lsrs.w	r2, r4, r3
 800904a:	d054      	beq.n	80090f6 <HAL_GPIO_Init+0x15e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800904c:	fa0b fe03 	lsl.w	lr, fp, r3
    if (iocurrent != 0x00U)
 8009050:	ea1e 0c04 	ands.w	ip, lr, r4
 8009054:	d0f6      	beq.n	8009044 <HAL_GPIO_Init+0xac>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009056:	9901      	ldr	r1, [sp, #4]
 8009058:	005f      	lsls	r7, r3, #1
 800905a:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800905c:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800905e:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009062:	fa01 f807 	lsl.w	r8, r1, r7
 8009066:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800906a:	f102 38ff 	add.w	r8, r2, #4294967295
 800906e:	f1b8 0f01 	cmp.w	r8, #1
 8009072:	d8a2      	bhi.n	8008fba <HAL_GPIO_Init+0x22>
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009074:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8009076:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800907a:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800907c:	ea08 080a 	and.w	r8, r8, sl
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8009080:	fa01 f907 	lsl.w	r9, r1, r7
 8009084:	ea49 0908 	orr.w	r9, r9, r8
        GPIOx->OSPEEDR = temp;
 8009088:	f8c0 9008 	str.w	r9, [r0, #8]
        temp = GPIOx->OTYPER;
 800908c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8009090:	9901      	ldr	r1, [sp, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009092:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009096:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800909a:	fa0e fe03 	lsl.w	lr, lr, r3
 800909e:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80090a2:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80090a6:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80090aa:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80090ac:	ea08 080a 	and.w	r8, r8, sl
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80090b0:	fa01 fe07 	lsl.w	lr, r1, r7
 80090b4:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090b8:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80090ba:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090be:	f47f af7f 	bne.w	8008fc0 <HAL_GPIO_Init+0x28>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090c2:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090c4:	f003 0e07 	and.w	lr, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090c8:	6909      	ldr	r1, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090ce:	fa01 f10e 	lsl.w	r1, r1, lr
 80090d2:	9103      	str	r1, [sp, #12]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090d4:	210f      	movs	r1, #15
        temp = GPIOx->AFR[position >> 3U];
 80090d6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80090da:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80090de:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090e2:	fa01 fe0e 	lsl.w	lr, r1, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090e6:	9903      	ldr	r1, [sp, #12]
        temp &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090e8:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80090ec:	ea41 0e09 	orr.w	lr, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80090f0:	f8c8 e020 	str.w	lr, [r8, #32]
 80090f4:	e764      	b.n	8008fc0 <HAL_GPIO_Init+0x28>
  }
}
 80090f6:	b005      	add	sp, #20
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80090fc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->PUPDR;
 80090fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8009102:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8009104:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8009108:	fa01 fe07 	lsl.w	lr, r1, r7
 800910c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8009110:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009114:	e754      	b.n	8008fc0 <HAL_GPIO_Init+0x28>
 8009116:	bf00      	nop
 8009118:	002f7f7f 	.word	0x002f7f7f
 800911c:	46022000 	.word	0x46022000

08009120 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009120:	2900      	cmp	r1, #0
 8009122:	d064      	beq.n	80091ee <HAL_GPIO_DeInit+0xce>
{
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009128:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800912a:	f04f 0b01 	mov.w	fp, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= (0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800912e:	f04f 080f 	mov.w	r8, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8009132:	4a2f      	ldr	r2, [pc, #188]	@ (80091f0 <HAL_GPIO_DeInit+0xd0>)
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009134:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 80091f4 <HAL_GPIO_DeInit+0xd4>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8009138:	ea02 2a90 	and.w	sl, r2, r0, lsr #10

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
 800913c:	f023 0403 	bic.w	r4, r3, #3
      tmp &= (0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8009140:	f003 0203 	and.w	r2, r3, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 8009144:	fa0b f503 	lsl.w	r5, fp, r3
      tmp &= (0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8009148:	00d2      	lsls	r2, r2, #3
 800914a:	f104 448c 	add.w	r4, r4, #1174405120	@ 0x46000000
    if (iocurrent != 0x00U)
 800914e:	ea15 0e01 	ands.w	lr, r5, r1
      tmp &= (0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8009152:	fa08 f702 	lsl.w	r7, r8, r2
 8009156:	f504 3408 	add.w	r4, r4, #139264	@ 0x22000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 800915a:	fa0a f202 	lsl.w	r2, sl, r2
    if (iocurrent != 0x00U)
 800915e:	d040      	beq.n	80091e2 <HAL_GPIO_DeInit+0xc2>
      tmp = EXTI->EXTICR[position >> 2U];
 8009160:	6e26      	ldr	r6, [r4, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8009162:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      tmp &= (0x0FUL << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8009166:	403e      	ands	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8009168:	42b2      	cmp	r2, r6
 800916a:	d11b      	bne.n	80091a4 <HAL_GPIO_DeInit+0x84>
        EXTI->IMR1 &= ~(iocurrent);
 800916c:	f8d9 2080 	ldr.w	r2, [r9, #128]	@ 0x80
 8009170:	ea22 020e 	bic.w	r2, r2, lr
 8009174:	f8c9 2080 	str.w	r2, [r9, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8009178:	f8d9 2084 	ldr.w	r2, [r9, #132]	@ 0x84
 800917c:	ea22 020e 	bic.w	r2, r2, lr
 8009180:	f8c9 2084 	str.w	r2, [r9, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8009184:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8009188:	ea22 020e 	bic.w	r2, r2, lr
 800918c:	f8c9 2004 	str.w	r2, [r9, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009190:	f8d9 2000 	ldr.w	r2, [r9]
 8009194:	ea22 020e 	bic.w	r2, r2, lr
 8009198:	f8c9 2000 	str.w	r2, [r9]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 800919c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800919e:	ea22 0207 	bic.w	r2, r2, r7
 80091a2:	6622      	str	r2, [r4, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80091a4:	2203      	movs	r2, #3
 80091a6:	6806      	ldr	r6, [r0, #0]
 80091a8:	fa02 f40c 	lsl.w	r4, r2, ip
 80091ac:	4326      	orrs	r6, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80091ae:	fa23 f202 	lsr.w	r2, r3, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80091b2:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80091b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80091b8:	f003 0607 	and.w	r6, r3, #7
 80091bc:	6a17      	ldr	r7, [r2, #32]
 80091be:	00b6      	lsls	r6, r6, #2
 80091c0:	fa08 f606 	lsl.w	r6, r8, r6
 80091c4:	ea27 0606 	bic.w	r6, r7, r6
 80091c8:	6216      	str	r6, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80091ca:	6882      	ldr	r2, [r0, #8]
 80091cc:	ea22 0204 	bic.w	r2, r2, r4
 80091d0:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80091d2:	6842      	ldr	r2, [r0, #4]
 80091d4:	ea22 0205 	bic.w	r2, r2, r5
 80091d8:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80091da:	68c2      	ldr	r2, [r0, #12]
 80091dc:	ea22 0204 	bic.w	r2, r2, r4
 80091e0:	60c2      	str	r2, [r0, #12]
    position++;
 80091e2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 80091e4:	fa31 f203 	lsrs.w	r2, r1, r3
 80091e8:	d1a8      	bne.n	800913c <HAL_GPIO_DeInit+0x1c>
  }
}
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	4770      	bx	lr
 80091f0:	002f7f7f 	.word	0x002f7f7f
 80091f4:	46022000 	.word	0x46022000

080091f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80091f8:	6903      	ldr	r3, [r0, #16]
 80091fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80091fc:	bf14      	ite	ne
 80091fe:	2001      	movne	r0, #1
 8009200:	2000      	moveq	r0, #0
 8009202:	4770      	bx	lr

08009204 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009204:	b10a      	cbz	r2, 800920a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009206:	6181      	str	r1, [r0, #24]
 8009208:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800920a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop

08009210 <HAL_ICACHE_ConfigAssociativityMode>:

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8009210:	4908      	ldr	r1, [pc, #32]	@ (8009234 <HAL_ICACHE_ConfigAssociativityMode+0x24>)
 8009212:	680b      	ldr	r3, [r1, #0]
 8009214:	f013 0301 	ands.w	r3, r3, #1
 8009218:	d10a      	bne.n	8009230 <HAL_ICACHE_ConfigAssociativityMode+0x20>
 800921a:	4602      	mov	r2, r0
{
 800921c:	b410      	push	{r4}
  {
    status = HAL_ERROR;
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800921e:	680c      	ldr	r4, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009220:	4618      	mov	r0, r3
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8009222:	f024 0304 	bic.w	r3, r4, #4
 8009226:	4313      	orrs	r3, r2
  }

  return status;
}
 8009228:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800922c:	600b      	str	r3, [r1, #0]
}
 800922e:	4770      	bx	lr
    status = HAL_ERROR;
 8009230:	2001      	movs	r0, #1
}
 8009232:	4770      	bx	lr
 8009234:	40030400 	.word	0x40030400

08009238 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8009238:	4a03      	ldr	r2, [pc, #12]	@ (8009248 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 800923a:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800923c:	6813      	ldr	r3, [r2, #0]
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	6013      	str	r3, [r2, #0]
}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40030400 	.word	0x40030400

0800924c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800924c:	4a02      	ldr	r2, [pc, #8]	@ (8009258 <HAL_PWR_EnableBkUpAccess+0xc>)
 800924e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009250:	f043 0301 	orr.w	r3, r3, #1
 8009254:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8009256:	4770      	bx	lr
 8009258:	46020800 	.word	0x46020800

0800925c <HAL_PWR_EnableWakeUpPin>:
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  MODIFY_REG(PWR->WUCR2, (PWR_EWUP_MASK & WakeUpPin), (WakeUpPin >> PWR_WUP_POLARITY_SHIFT));
 800925c:	490e      	ldr	r1, [pc, #56]	@ (8009298 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800925e:	b2c3      	uxtb	r3, r0
 8009260:	698a      	ldr	r2, [r1, #24]
 8009262:	ea22 0203 	bic.w	r2, r2, r3
 8009266:	ea42 2210 	orr.w	r2, r2, r0, lsr #8
 800926a:	618a      	str	r2, [r1, #24]

  /* Specifies the wake up line I/O selection */
  MODIFY_REG(PWR->WUCR3, (3UL << (POSITION_VAL(PWR_EWUP_MASK & WakeUpPin) * 2U)),
 800926c:	69c9      	ldr	r1, [r1, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800926e:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8009272:	b142      	cbz	r2, 8009286 <HAL_PWR_EnableWakeUpPin+0x2a>
  return __builtin_clz(value);
 8009274:	fab2 f282 	clz	r2, r2
 8009278:	f04f 0c03 	mov.w	ip, #3
 800927c:	0052      	lsls	r2, r2, #1
 800927e:	fa0c f202 	lsl.w	r2, ip, r2
 8009282:	ea21 0102 	bic.w	r1, r1, r2
 8009286:	4a04      	ldr	r2, [pc, #16]	@ (8009298 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8009288:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800928c:	61d1      	str	r1, [r2, #28]
             (WakeUpPin >> PWR_WUP_SELECT_SIGNAL_SHIFT));

  /* Enable wake-up line */
  SET_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 800928e:	6951      	ldr	r1, [r2, #20]
 8009290:	430b      	orrs	r3, r1
 8009292:	6153      	str	r3, [r2, #20]
}
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	46020800 	.word	0x46020800

0800929c <HAL_PWREx_ControlVoltageScaling>:
  *        only take effect after the 2.4 GHz RADIO has entered Sleep or Deepsleep mode.
  * @note  In range 2, the 2.4 GHz RADIO shall not transmit nor receive.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800929c:	b410      	push	{r4}

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  uint32_t vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800929e:	4c1a      	ldr	r4, [pc, #104]	@ (8009308 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 80092a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80092a6:	4283      	cmp	r3, r0
 80092a8:	d026      	beq.n	80092f8 <HAL_PWREx_ControlVoltageScaling+0x5c>
  /* Set voltage scaling level */
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);


  /* Wait until VOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80092aa:	f04f 0c32 	mov.w	ip, #50	@ 0x32
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80092ae:	68e3      	ldr	r3, [r4, #12]
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80092b0:	4a16      	ldr	r2, [pc, #88]	@ (800930c <HAL_PWREx_ControlVoltageScaling+0x70>)
  MODIFY_REG(PWR->VOSR, PWR_VOSR_VOS, VoltageScaling);
 80092b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092b6:	4303      	orrs	r3, r0
 80092b8:	60e3      	str	r3, [r4, #12]
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80092ba:	6813      	ldr	r3, [r2, #0]
 80092bc:	4a14      	ldr	r2, [pc, #80]	@ (8009310 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80092be:	fb0c f303 	mul.w	r3, ip, r3
 80092c2:	fba2 2303 	umull	r2, r3, r2, r3
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80092c6:	68e1      	ldr	r1, [r4, #12]
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80092c8:	0c9b      	lsrs	r3, r3, #18
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80092ca:	0408      	lsls	r0, r1, #16
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80092cc:	f103 0301 	add.w	r3, r3, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80092d0:	d407      	bmi.n	80092e2 <HAL_PWREx_ControlVoltageScaling+0x46>
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 80092d2:	461a      	mov	r2, r3
 80092d4:	e000      	b.n	80092d8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80092d6:	b19a      	cbz	r2, 8009300 <HAL_PWREx_ControlVoltageScaling+0x64>
 80092d8:	68e1      	ldr	r1, [r4, #12]
  {
    timeout--;
 80092da:	3a01      	subs	r2, #1
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80092dc:	0409      	lsls	r1, r1, #16
 80092de:	d5fa      	bpl.n	80092d6 <HAL_PWREx_ControlVoltageScaling+0x3a>
  }

  /* Check time out  */
  if (timeout == 0U)
 80092e0:	b172      	cbz	r2, 8009300 <HAL_PWREx_ControlVoltageScaling+0x64>
    return HAL_TIMEOUT;
  }

  /* Wait until ACTVOSRDY is set */
  timeout = ((PWR_VOSF_SETTING_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80092e2:	4909      	ldr	r1, [pc, #36]	@ (8009308 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 80092e4:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80092e6:	0410      	lsls	r0, r2, #16
 80092e8:	d406      	bmi.n	80092f8 <HAL_PWREx_ControlVoltageScaling+0x5c>
 80092ea:	e000      	b.n	80092ee <HAL_PWREx_ControlVoltageScaling+0x52>
 80092ec:	b143      	cbz	r3, 8009300 <HAL_PWREx_ControlVoltageScaling+0x64>
 80092ee:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  {
    timeout--;
 80092f0:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80092f2:	0412      	lsls	r2, r2, #16
 80092f4:	d5fa      	bpl.n	80092ec <HAL_PWREx_ControlVoltageScaling+0x50>
  }

  /* Check time out  */
  if (timeout == 0U)
 80092f6:	b11b      	cbz	r3, 8009300 <HAL_PWREx_ControlVoltageScaling+0x64>
    return HAL_OK;
 80092f8:	2000      	movs	r0, #0
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80092fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092fe:	4770      	bx	lr
    return HAL_TIMEOUT;
 8009300:	2003      	movs	r0, #3
}
 8009302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	46020800 	.word	0x46020800
 800930c:	200001a8 	.word	0x200001a8
 8009310:	431bde83 	.word	0x431bde83

08009314 <HAL_PWREx_ConfigSupply>:

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_MODE_CHANGE_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8009314:	2132      	movs	r1, #50	@ 0x32
 8009316:	4b18      	ldr	r3, [pc, #96]	@ (8009378 <HAL_PWREx_ConfigSupply+0x64>)
 8009318:	4a18      	ldr	r2, [pc, #96]	@ (800937c <HAL_PWREx_ConfigSupply+0x68>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	fb01 f303 	mul.w	r3, r1, r3
 8009320:	fba2 2303 	umull	r2, r3, r2, r3

  /* Configure the LDO as system regulator supply  */
  if (SupplySource == PWR_LDO_SUPPLY)
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009324:	4916      	ldr	r1, [pc, #88]	@ (8009380 <HAL_PWREx_ConfigSupply+0x6c>)
  timeout = ((PWR_MODE_CHANGE_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 8009326:	0c9b      	lsrs	r3, r3, #18
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009328:	688a      	ldr	r2, [r1, #8]
  timeout = ((PWR_MODE_CHANGE_DELAY_VALUE * SystemCoreClock) / 1000000U) + 1U;
 800932a:	3301      	adds	r3, #1
  if (SupplySource == PWR_LDO_SUPPLY)
 800932c:	b980      	cbnz	r0, 8009350 <HAL_PWREx_ConfigSupply+0x3c>
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800932e:	f022 0202 	bic.w	r2, r2, #2
 8009332:	608a      	str	r2, [r1, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009334:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8009336:	0790      	lsls	r0, r2, #30
 8009338:	d402      	bmi.n	8009340 <HAL_PWREx_ConfigSupply+0x2c>
  if (timeout == 0U)
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800933a:	2000      	movs	r0, #0
 800933c:	4770      	bx	lr
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800933e:	b12b      	cbz	r3, 800934c <HAL_PWREx_ConfigSupply+0x38>
 8009340:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 8009342:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009344:	0792      	lsls	r2, r2, #30
 8009346:	d4fa      	bmi.n	800933e <HAL_PWREx_ConfigSupply+0x2a>
  if (timeout == 0U)
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f6      	bne.n	800933a <HAL_PWREx_ConfigSupply+0x26>
    return HAL_TIMEOUT;
 800934c:	2003      	movs	r0, #3
}
 800934e:	4770      	bx	lr
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8009350:	f042 0202 	orr.w	r2, r2, #2
 8009354:	608a      	str	r2, [r1, #8]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009356:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8009358:	0790      	lsls	r0, r2, #30
 800935a:	d4ee      	bmi.n	800933a <HAL_PWREx_ConfigSupply+0x26>
 800935c:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 800935e:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8009360:	0792      	lsls	r2, r2, #30
 8009362:	d4f1      	bmi.n	8009348 <HAL_PWREx_ConfigSupply+0x34>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0f1      	beq.n	800934c <HAL_PWREx_ConfigSupply+0x38>
 8009368:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
      timeout--;
 800936a:	3b01      	subs	r3, #1
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800936c:	0792      	lsls	r2, r2, #30
 800936e:	d5f9      	bpl.n	8009364 <HAL_PWREx_ConfigSupply+0x50>
  if (timeout == 0U)
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e2      	bne.n	800933a <HAL_PWREx_ConfigSupply+0x26>
 8009374:	e7ea      	b.n	800934c <HAL_PWREx_ConfigSupply+0x38>
 8009376:	bf00      	nop
 8009378:	200001a8 	.word	0x200001a8
 800937c:	431bde83 	.word	0x431bde83
 8009380:	46020800 	.word	0x46020800

08009384 <HAL_RAMCFG_Init>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMCFG_Init(RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the RAMCFG peripheral handle */
  if (hramcfg == NULL)
 8009384:	b150      	cbz	r0, 800939c <HAL_RAMCFG_Init+0x18>

  /* Check the parameters */
  assert_param(IS_RAMCFG_ALL_INSTANCE(hramcfg->Instance));

  /* Update RAMCFG peripheral state */
  hramcfg->State = HAL_RAMCFG_STATE_BUSY;
 8009386:	2302      	movs	r3, #2
{
 8009388:	b510      	push	{r4, lr}
  hramcfg->State = HAL_RAMCFG_STATE_BUSY;
 800938a:	7103      	strb	r3, [r0, #4]
 800938c:	4604      	mov	r4, r0
    /* Legacy callback */
    hramcfg->MspInitCallback = HAL_RAMCFG_MspInit;
  }
  hramcfg->MspInitCallback(hramcfg);
#else
  HAL_RAMCFG_MspInit(hramcfg);
 800938e:	f7f7 fc55 	bl	8000c3c <HAL_RAMCFG_MspInit>
#endif /* USE_HAL_RAMCFG_REGISTER_CALLBACKS */

  /* Initialize the RAMCFG error code */
  hramcfg->ErrorCode = HAL_RAMCFG_ERROR_NONE;
 8009392:	2000      	movs	r0, #0

  /* Initialize the RAMCFG state */
  hramcfg->State = HAL_RAMCFG_STATE_READY;
 8009394:	2301      	movs	r3, #1
  hramcfg->ErrorCode = HAL_RAMCFG_ERROR_NONE;
 8009396:	60a0      	str	r0, [r4, #8]
  hramcfg->State = HAL_RAMCFG_STATE_READY;
 8009398:	7123      	strb	r3, [r4, #4]

  return HAL_OK;
}
 800939a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800939c:	2001      	movs	r0, #1
}
 800939e:	4770      	bx	lr

080093a0 <HAL_RAMCFG_ConfigWaitState>:
  /* Check the parameters */
  assert_param(IS_RAMCFG_ALL_INSTANCE(hramcfg->Instance));
  assert_param(IS_RAMCFG_WAITSTATE(WaitState));

  /* Get RAMCFG state */
  if (hramcfg->State == HAL_RAMCFG_STATE_READY)
 80093a0:	7902      	ldrb	r2, [r0, #4]
{
 80093a2:	4603      	mov	r3, r0
  if (hramcfg->State == HAL_RAMCFG_STATE_READY)
 80093a4:	2a01      	cmp	r2, #1
 80093a6:	d10d      	bne.n	80093c4 <HAL_RAMCFG_ConfigWaitState+0x24>
{
 80093a8:	b500      	push	{lr}
  {
    /* Update RAMCFG peripheral state */
    hramcfg->State = HAL_RAMCFG_STATE_BUSY;
 80093aa:	f04f 0e02 	mov.w	lr, #2
 80093ae:	fa5f fc82 	uxtb.w	ip, r2

    /* Set the SRAM wait state */
    hramcfg->Instance->CR = WaitState;
 80093b2:	6802      	ldr	r2, [r0, #0]
    hramcfg->State = HAL_RAMCFG_STATE_BUSY;
 80093b4:	f883 e004 	strb.w	lr, [r3, #4]
    hramcfg->Instance->CR = WaitState;
 80093b8:	6011      	str	r1, [r2, #0]

    return HAL_ERROR;
  }

  /* Update RAMCFG peripheral state */
  hramcfg->State = HAL_RAMCFG_STATE_READY;
 80093ba:	f883 c004 	strb.w	ip, [r3, #4]

  return HAL_OK;
 80093be:	2000      	movs	r0, #0
}
 80093c0:	f85d fb04 	ldr.w	pc, [sp], #4
    hramcfg->ErrorCode = HAL_RAMCFG_ERROR_BUSY;
 80093c4:	2202      	movs	r2, #2
    return HAL_ERROR;
 80093c6:	2001      	movs	r0, #1
    hramcfg->ErrorCode = HAL_RAMCFG_ERROR_BUSY;
 80093c8:	609a      	str	r2, [r3, #8]
}
 80093ca:	4770      	bx	lr

080093cc <HAL_RAMCFG_GetWaitState>:
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_ALL_INSTANCE(hramcfg->Instance));

  /* Return the configured wait state number */
  return (hramcfg->Instance->CR & RAMCFG_CR_WSC);
 80093cc:	6803      	ldr	r3, [r0, #0]
 80093ce:	6818      	ldr	r0, [r3, #0]
}
 80093d0:	f400 20e0 	and.w	r0, r0, #458752	@ 0x70000
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop

080093d8 <RCC_PLL1_GetVCOOutputFreq>:
  float_t pllm;
  float_t plln;
  float_t pllfracn;

  /* Get PLL1 DIVR register value */
  tmpreg1 = RCC->PLL1DIVR;
 80093d8:	4824      	ldr	r0, [pc, #144]	@ (800946c <RCC_PLL1_GetVCOOutputFreq+0x94>)
 80093da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  /* Retrieve PLL1 multiplication factor */
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
  plln = (float_t) tmp;

  /* Get PLL1 CFGR register value */
  tmpreg1 = RCC->PLL1CFGR;
 80093dc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9

  /* Retrieve PLL1 divider */
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80093e2:	f3c2 2102 	ubfx	r1, r2, #8, #3
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80093e6:	3301      	adds	r3, #1
  tmp = ((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80093e8:	3101      	adds	r1, #1
  tmp = (tmpreg1 & RCC_PLL1DIVR_PLL1N) + 1U;
 80093ea:	ee07 3a90 	vmov	s15, r3
  pllm = (float_t) tmp;
 80093ee:	ee07 1a10 	vmov	s14, r1

  /* Check if fractional part is enable */
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 80093f2:	06d3      	lsls	r3, r2, #27
  plln = (float_t) tmp;
 80093f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  pllm = (float_t) tmp;
 80093f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if ((tmpreg1 & RCC_PLL1CFGR_PLL1FRACEN) != 0x00u)
 80093fc:	d526      	bpl.n	800944c <RCC_PLL1_GetVCOOutputFreq+0x74>
  {
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 80093fe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    tmp = 0u;
  }
  pllfracn = (float_t)tmp;

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8009400:	f002 0203 	and.w	r2, r2, #3
    tmp = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8009404:	f3c3 03cc 	ubfx	r3, r3, #3, #13
      pllsrc = (float_t)0;
      break;
  }

  /* Compute VCO output frequency */
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8009408:	ee06 3a90 	vmov	s13, r3
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800940c:	2a02      	cmp	r2, #2
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 800940e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 8009412:	d021      	beq.n	8009458 <RCC_PLL1_GetVCOOutputFreq+0x80>
 8009414:	2a03      	cmp	r2, #3
 8009416:	d110      	bne.n	800943a <RCC_PLL1_GetVCOOutputFreq+0x62>
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009418:	4a14      	ldr	r2, [pc, #80]	@ (800946c <RCC_PLL1_GetVCOOutputFreq+0x94>)
 800941a:	4b15      	ldr	r3, [pc, #84]	@ (8009470 <RCC_PLL1_GetVCOOutputFreq+0x98>)
 800941c:	6812      	ldr	r2, [r2, #0]
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      tmp = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009422:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8009426:	40d3      	lsrs	r3, r2
      pllsrc = (float_t)tmp;
 8009428:	ee06 3a10 	vmov	s12, r3
 800942c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 8009430:	ee86 0a07 	vdiv.f32	s0, s12, s14
}
 8009434:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009438:	4770      	bx	lr
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800943a:	ed9f 6a0e 	vldr	s12, [pc, #56]	@ 8009474 <RCC_PLL1_GetVCOOutputFreq+0x9c>
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 800943e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009442:	ee86 0a07 	vdiv.f32	s0, s12, s14
}
 8009446:	ee20 0a27 	vmul.f32	s0, s0, s15
 800944a:	4770      	bx	lr
  switch (tmpreg1 & RCC_PLL1CFGR_PLL1SRC)
 800944c:	f002 0203 	and.w	r2, r2, #3
 8009450:	2a02      	cmp	r2, #2
 8009452:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8009474 <RCC_PLL1_GetVCOOutputFreq+0x9c>
 8009456:	d1dd      	bne.n	8009414 <RCC_PLL1_GetVCOOutputFreq+0x3c>
      pllsrc = (float_t)HSI_VALUE;
 8009458:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8009478 <RCC_PLL1_GetVCOOutputFreq+0xa0>
  return ((pllsrc / pllm) * (plln + (pllfracn / (float_t)0x2000u)));
 800945c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009460:	ee86 0a07 	vdiv.f32	s0, s12, s14
}
 8009464:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	46020c00 	.word	0x46020c00
 8009470:	01e84800 	.word	0x01e84800
 8009474:	00000000 	.word	0x00000000
 8009478:	4b742400 	.word	0x4b742400

0800947c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800947c:	2800      	cmp	r0, #0
 800947e:	f000 82c9 	beq.w	8009a14 <HAL_RCC_OscConfig+0x598>
{
 8009482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009486:	4aab      	ldr	r2, [pc, #684]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009488:	6803      	ldr	r3, [r0, #0]
  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800948a:	69d5      	ldr	r5, [r2, #28]
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800948c:	6a96      	ldr	r6, [r2, #40]	@ 0x28
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800948e:	07d9      	lsls	r1, r3, #31
 8009490:	4604      	mov	r4, r0
{
 8009492:	b083      	sub	sp, #12
  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009494:	f005 050c 	and.w	r5, r5, #12
  pllsrc = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8009498:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800949c:	d520      	bpl.n	80094e0 <HAL_RCC_OscConfig+0x64>
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800949e:	2d08      	cmp	r5, #8
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80094a0:	6841      	ldr	r1, [r0, #4]
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80094a2:	f000 815f 	beq.w	8009764 <HAL_RCC_OscConfig+0x2e8>
 80094a6:	2d0c      	cmp	r5, #12
 80094a8:	f000 813a 	beq.w	8009720 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 80094ac:	4fa1      	ldr	r7, [pc, #644]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094ae:	2900      	cmp	r1, #0
 80094b0:	f000 8124 	beq.w	80096fc <HAL_RCC_OscConfig+0x280>
        __HAL_RCC_HSE_CONFIG((RCC_OscInitStruct->HSEState | RCC_OscInitStruct->HSEDiv));
 80094b4:	68a3      	ldr	r3, [r4, #8]
 80094b6:	4319      	orrs	r1, r3
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	f423 1388 	bic.w	r3, r3, #1114112	@ 0x110000
 80094be:	4319      	orrs	r1, r3
 80094c0:	6039      	str	r1, [r7, #0]
        tickstart = HAL_GetTick();
 80094c2:	f7fe fc0b 	bl	8007cdc <HAL_GetTick>
 80094c6:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094c8:	e006      	b.n	80094d8 <HAL_RCC_OscConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094ca:	f7fe fc07 	bl	8007cdc <HAL_GetTick>
 80094ce:	eba0 0008 	sub.w	r0, r0, r8
 80094d2:	2864      	cmp	r0, #100	@ 0x64
 80094d4:	f200 8142 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	039b      	lsls	r3, r3, #14
 80094dc:	d5f5      	bpl.n	80094ca <HAL_RCC_OscConfig+0x4e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	0799      	lsls	r1, r3, #30
 80094e2:	d50e      	bpl.n	8009502 <HAL_RCC_OscConfig+0x86>
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80094e4:	2d00      	cmp	r5, #0
 80094e6:	f040 80d9 	bne.w	800969c <HAL_RCC_OscConfig+0x220>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80094ea:	6922      	ldr	r2, [r4, #16]
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	f000 8200 	beq.w	80098f2 <HAL_RCC_OscConfig+0x476>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094f2:	4990      	ldr	r1, [pc, #576]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
 80094f4:	6960      	ldr	r0, [r4, #20]
 80094f6:	690a      	ldr	r2, [r1, #16]
 80094f8:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 80094fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009500:	610a      	str	r2, [r1, #16]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009502:	0718      	lsls	r0, r3, #28
 8009504:	d555      	bpl.n	80095b2 <HAL_RCC_OscConfig+0x136>
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 8009506:	4b8b      	ldr	r3, [pc, #556]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
 8009508:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800950c:	0751      	lsls	r1, r2, #29
 800950e:	f140 80e6 	bpl.w	80096de <HAL_RCC_OscConfig+0x262>
    FlagStatus  pwrclkchanged = RESET;
 8009512:	f04f 0900 	mov.w	r9, #0
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009516:	4e88      	ldr	r6, [pc, #544]	@ (8009738 <HAL_RCC_OscConfig+0x2bc>)
 8009518:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800951a:	07da      	lsls	r2, r3, #31
 800951c:	f140 810e 	bpl.w	800973c <HAL_RCC_OscConfig+0x2c0>
    tmpreg1 = RCC->BDCR1;
 8009520:	4e84      	ldr	r6, [pc, #528]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009522:	69a3      	ldr	r3, [r4, #24]
    tmpreg1 = RCC->BDCR1;
 8009524:	f8d6 70f0 	ldr.w	r7, [r6, #240]	@ 0xf0
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 813a 	beq.w	80097a2 <HAL_RCC_OscConfig+0x326>
      if ((RCC_OscInitStruct->LSIState & RCC_LSI1_ON) != 0x00u)
 800952e:	0158      	lsls	r0, r3, #5
 8009530:	d50b      	bpl.n	800954a <HAL_RCC_OscConfig+0xce>
        if ((RCC_OscInitStruct->LSIDiv != (tmpreg1 & RCC_BDCR1_LSI1PREDIV)) && ((tmpreg1 & RCC_BDCR1_LSI1RDY) != 0x00u))
 8009532:	69e2      	ldr	r2, [r4, #28]
 8009534:	f007 5180 	and.w	r1, r7, #268435456	@ 0x10000000
 8009538:	428a      	cmp	r2, r1
 800953a:	d002      	beq.n	8009542 <HAL_RCC_OscConfig+0xc6>
 800953c:	0139      	lsls	r1, r7, #4
 800953e:	f100 81c2 	bmi.w	80098c6 <HAL_RCC_OscConfig+0x44a>
        tmpreg1 &= ~RCC_BDCR1_LSI1PREDIV;
 8009542:	f027 5880 	bic.w	r8, r7, #268435456	@ 0x10000000
        tmpreg1 |= RCC_OscInitStruct->LSIDiv;
 8009546:	ea48 0702 	orr.w	r7, r8, r2
      RCC->BDCR1 = tmpreg1;
 800954a:	4e7a      	ldr	r6, [pc, #488]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 800954c:	ea47 0803 	orr.w	r8, r7, r3
      RCC->BDCR1 = tmpreg1;
 8009550:	f8c6 80f0 	str.w	r8, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8009554:	f7fe fbc2 	bl	8007cdc <HAL_GetTick>
 8009558:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 800955a:	e005      	b.n	8009568 <HAL_RCC_OscConfig+0xec>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800955c:	f7fe fbbe 	bl	8007cdc <HAL_GetTick>
 8009560:	1bc0      	subs	r0, r0, r7
 8009562:	2814      	cmp	r0, #20
 8009564:	f200 80fa 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR1, (RCC_OscInitStruct->LSIState << 1)) == 0x00u)
 8009568:	69a3      	ldr	r3, [r4, #24]
 800956a:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 800956e:	0059      	lsls	r1, r3, #1
 8009570:	ea12 0243 	ands.w	r2, r2, r3, lsl #1
 8009574:	d0f2      	beq.n	800955c <HAL_RCC_OscConfig+0xe0>
      tmpreg1 &= ~mask;
 8009576:	f083 5310 	eor.w	r3, r3, #603979776	@ 0x24000000
 800957a:	43db      	mvns	r3, r3
 800957c:	ea03 0308 	and.w	r3, r3, r8
      RCC->BDCR1 = tmpreg1;
 8009580:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8009584:	f081 4790 	eor.w	r7, r1, #1207959552	@ 0x48000000
      tickstart = HAL_GetTick();
 8009588:	f7fe fba8 	bl	8007cdc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 800958c:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8009734 <HAL_RCC_OscConfig+0x2b8>
      tickstart = HAL_GetTick();
 8009590:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 8009592:	e005      	b.n	80095a0 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009594:	f7fe fba2 	bl	8007cdc <HAL_GetTick>
 8009598:	1b80      	subs	r0, r0, r6
 800959a:	2814      	cmp	r0, #20
 800959c:	f200 80de 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80095a0:	f8d8 30f0 	ldr.w	r3, [r8, #240]	@ 0xf0
 80095a4:	423b      	tst	r3, r7
 80095a6:	d1f5      	bne.n	8009594 <HAL_RCC_OscConfig+0x118>
    if (pwrclkchanged == SET)
 80095a8:	f1b9 0f00 	cmp.w	r9, #0
 80095ac:	f040 8170 	bne.w	8009890 <HAL_RCC_OscConfig+0x414>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	0759      	lsls	r1, r3, #29
 80095b4:	d54f      	bpl.n	8009656 <HAL_RCC_OscConfig+0x1da>
    if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01)
 80095b6:	4b5f      	ldr	r3, [pc, #380]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
 80095b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80095bc:	0752      	lsls	r2, r2, #29
 80095be:	f100 80ee 	bmi.w	800979e <HAL_RCC_OscConfig+0x322>
      pwrclkchanged = SET;
 80095c2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80095c4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80095c8:	f042 0204 	orr.w	r2, r2, #4
 80095cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80095d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80095dc:	4f56      	ldr	r7, [pc, #344]	@ (8009738 <HAL_RCC_OscConfig+0x2bc>)
 80095de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e0:	07db      	lsls	r3, r3, #31
 80095e2:	f140 8138 	bpl.w	8009856 <HAL_RCC_OscConfig+0x3da>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80095e6:	68e3      	ldr	r3, [r4, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 8103 	beq.w	80097f4 <HAL_RCC_OscConfig+0x378>
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 80095ee:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8009734 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f2:	f241 3988 	movw	r9, #5000	@ 0x1388
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_LSESYSEN);
 80095f6:	f8d8 20f0 	ldr.w	r2, [r8, #240]	@ 0xf0
 80095fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
      tmpreg1 |= RCC_OscInitStruct->LSEState;
 80095fe:	4313      	orrs	r3, r2
      RCC->BDCR1 = tmpreg1;
 8009600:	f8c8 30f0 	str.w	r3, [r8, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8009604:	f7fe fb6a 	bl	8007cdc <HAL_GetTick>
 8009608:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 800960a:	e005      	b.n	8009618 <HAL_RCC_OscConfig+0x19c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800960c:	f7fe fb66 	bl	8007cdc <HAL_GetTick>
 8009610:	1bc0      	subs	r0, r0, r7
 8009612:	4548      	cmp	r0, r9
 8009614:	f200 80a2 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) == 0U)
 8009618:	f8d8 30f0 	ldr.w	r3, [r8, #240]	@ 0xf0
 800961c:	0799      	lsls	r1, r3, #30
 800961e:	d5f5      	bpl.n	800960c <HAL_RCC_OscConfig+0x190>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8009620:	68e3      	ldr	r3, [r4, #12]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009622:	f241 3988 	movw	r9, #5000	@ 0x1388
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 8009626:	061a      	lsls	r2, r3, #24
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 8009628:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 8009734 <HAL_RCC_OscConfig+0x2b8>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR1_LSESYSEN) != 0U)
 800962c:	f140 812b 	bpl.w	8009886 <HAL_RCC_OscConfig+0x40a>
 8009630:	e005      	b.n	800963e <HAL_RCC_OscConfig+0x1c2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009632:	f7fe fb53 	bl	8007cdc <HAL_GetTick>
 8009636:	1bc0      	subs	r0, r0, r7
 8009638:	4548      	cmp	r0, r9
 800963a:	f200 808f 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) == 0U)
 800963e:	f8d8 30f0 	ldr.w	r3, [r8, #240]	@ 0xf0
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	d5f5      	bpl.n	8009632 <HAL_RCC_OscConfig+0x1b6>
    if (pwrclkchanged == SET)
 8009646:	b136      	cbz	r6, 8009656 <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009648:	4a3a      	ldr	r2, [pc, #232]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
 800964a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800964e:	f023 0304 	bic.w	r3, r3, #4
 8009652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  if ((RCC_OscInitStruct->PLL1.PLLState) != RCC_PLL_NONE)
 8009656:	6a23      	ldr	r3, [r4, #32]
 8009658:	b1e3      	cbz	r3, 8009694 <HAL_RCC_OscConfig+0x218>
    if (sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800965a:	2d0c      	cmp	r5, #12
 800965c:	f000 814f 	beq.w	80098fe <HAL_RCC_OscConfig+0x482>
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_ON)
 8009660:	2b02      	cmp	r3, #2
 8009662:	f000 811d 	beq.w	80098a0 <HAL_RCC_OscConfig+0x424>
        __HAL_RCC_PLL1_DISABLE();
 8009666:	4c33      	ldr	r4, [pc, #204]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800966e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009670:	f7fe fb34 	bl	8007cdc <HAL_GetTick>
 8009674:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009676:	e004      	b.n	8009682 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009678:	f7fe fb30 	bl	8007cdc <HAL_GetTick>
 800967c:	1b40      	subs	r0, r0, r5
 800967e:	2802      	cmp	r0, #2
 8009680:	d86c      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	0199      	lsls	r1, r3, #6
 8009686:	d4f7      	bmi.n	8009678 <HAL_RCC_OscConfig+0x1fc>
        CLEAR_BIT(RCC->PLL1CFGR, (RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | \
 8009688:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800968a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	62a3      	str	r3, [r4, #40]	@ 0x28
  return HAL_OK;
 8009694:	2000      	movs	r0, #0
}
 8009696:	b003      	add	sp, #12
 8009698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800969c:	2d0c      	cmp	r5, #12
 800969e:	f000 812a 	beq.w	80098f6 <HAL_RCC_OscConfig+0x47a>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096a2:	6923      	ldr	r3, [r4, #16]
        __HAL_RCC_HSI_ENABLE();
 80096a4:	4e23      	ldr	r6, [pc, #140]	@ (8009734 <HAL_RCC_OscConfig+0x2b8>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8092 	beq.w	80097d0 <HAL_RCC_OscConfig+0x354>
        __HAL_RCC_HSI_ENABLE();
 80096ac:	6833      	ldr	r3, [r6, #0]
 80096ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096b2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80096b4:	f7fe fb12 	bl	8007cdc <HAL_GetTick>
 80096b8:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096ba:	e004      	b.n	80096c6 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096bc:	f7fe fb0e 	bl	8007cdc <HAL_GetTick>
 80096c0:	1bc0      	subs	r0, r0, r7
 80096c2:	2802      	cmp	r0, #2
 80096c4:	d84a      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096c6:	6833      	ldr	r3, [r6, #0]
 80096c8:	055a      	lsls	r2, r3, #21
 80096ca:	d5f7      	bpl.n	80096bc <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096cc:	6933      	ldr	r3, [r6, #16]
 80096ce:	6962      	ldr	r2, [r4, #20]
 80096d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80096d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096d8:	6133      	str	r3, [r6, #16]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	e711      	b.n	8009502 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_PWR_CLK_ENABLE();
 80096de:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
      pwrclkchanged = SET;
 80096e2:	f04f 0901 	mov.w	r9, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80096e6:	f042 0204 	orr.w	r2, r2, #4
 80096ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80096ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80096fa:	e70c      	b.n	8009516 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	f423 1388 	bic.w	r3, r3, #1114112	@ 0x110000
 8009702:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8009704:	f7fe faea 	bl	8007cdc <HAL_GetTick>
 8009708:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800970a:	e005      	b.n	8009718 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800970c:	f7fe fae6 	bl	8007cdc <HAL_GetTick>
 8009710:	eba0 0008 	sub.w	r0, r0, r8
 8009714:	2864      	cmp	r0, #100	@ 0x64
 8009716:	d821      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	0398      	lsls	r0, r3, #14
 800971c:	d4f6      	bmi.n	800970c <HAL_RCC_OscConfig+0x290>
 800971e:	e6de      	b.n	80094de <HAL_RCC_OscConfig+0x62>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8009720:	2e03      	cmp	r6, #3
 8009722:	f47f aec3 	bne.w	80094ac <HAL_RCC_OscConfig+0x30>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009726:	2900      	cmp	r1, #0
 8009728:	f000 80e3 	beq.w	80098f2 <HAL_RCC_OscConfig+0x476>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800972c:	079a      	lsls	r2, r3, #30
 800972e:	d4b8      	bmi.n	80096a2 <HAL_RCC_OscConfig+0x226>
 8009730:	e6e7      	b.n	8009502 <HAL_RCC_OscConfig+0x86>
 8009732:	bf00      	nop
 8009734:	46020c00 	.word	0x46020c00
 8009738:	46020800 	.word	0x46020800
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800973c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8009744:	f7fe faca 	bl	8007cdc <HAL_GetTick>
 8009748:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800974a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 800974c:	07db      	lsls	r3, r3, #31
 800974e:	f53f aee7 	bmi.w	8009520 <HAL_RCC_OscConfig+0xa4>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009752:	f7fe fac3 	bl	8007cdc <HAL_GetTick>
 8009756:	1bc0      	subs	r0, r0, r7
 8009758:	2802      	cmp	r0, #2
 800975a:	d9f6      	bls.n	800974a <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 800975c:	2003      	movs	r0, #3
}
 800975e:	b003      	add	sp, #12
 8009760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009764:	2900      	cmp	r1, #0
 8009766:	f000 80c4 	beq.w	80098f2 <HAL_RCC_OscConfig+0x476>
          __HAL_RCC_HSE_CONFIG(RCC_HSE_ON | RCC_OscInitStruct->HSEDiv);
 800976a:	6813      	ldr	r3, [r2, #0]
 800976c:	6881      	ldr	r1, [r0, #8]
 800976e:	f423 1388 	bic.w	r3, r3, #1114112	@ 0x110000
 8009772:	430b      	orrs	r3, r1
 8009774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009778:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	4ba6      	ldr	r3, [pc, #664]	@ (8009a18 <HAL_RCC_OscConfig+0x59c>)
 800977e:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8009782:	40d3      	lsrs	r3, r2
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009784:	4aa5      	ldr	r2, [pc, #660]	@ (8009a1c <HAL_RCC_OscConfig+0x5a0>)
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 8009786:	49a6      	ldr	r1, [pc, #664]	@ (8009a20 <HAL_RCC_OscConfig+0x5a4>)
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009788:	6810      	ldr	r0, [r2, #0]
          SystemCoreClock = (HSE_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSEPRE)) >> RCC_CR_HSEPRE_Pos)));
 800978a:	600b      	str	r3, [r1, #0]
          if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800978c:	f7fe fa2a 	bl	8007be4 <HAL_InitTick>
 8009790:	2800      	cmp	r0, #0
 8009792:	f040 80ae 	bne.w	80098f2 <HAL_RCC_OscConfig+0x476>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	079a      	lsls	r2, r3, #30
 800979a:	d482      	bmi.n	80096a2 <HAL_RCC_OscConfig+0x226>
 800979c:	e6b1      	b.n	8009502 <HAL_RCC_OscConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;
 800979e:	2600      	movs	r6, #0
 80097a0:	e71c      	b.n	80095dc <HAL_RCC_OscConfig+0x160>
      tmpreg1 &= ~mask;
 80097a2:	f027 5710 	bic.w	r7, r7, #603979776	@ 0x24000000
      RCC->BDCR1 = tmpreg1;
 80097a6:	f8c6 70f0 	str.w	r7, [r6, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 80097aa:	f7fe fa97 	bl	8007cdc <HAL_GetTick>
 80097ae:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80097b0:	e004      	b.n	80097bc <HAL_RCC_OscConfig+0x340>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097b2:	f7fe fa93 	bl	8007cdc <HAL_GetTick>
 80097b6:	1bc0      	subs	r0, r0, r7
 80097b8:	2814      	cmp	r0, #20
 80097ba:	d8cf      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR1, (mask << 1)) != 0x00u)
 80097bc:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80097c0:	f013 4f90 	tst.w	r3, #1207959552	@ 0x48000000
 80097c4:	d1f5      	bne.n	80097b2 <HAL_RCC_OscConfig+0x336>
    if (pwrclkchanged == SET)
 80097c6:	f1b9 0f00 	cmp.w	r9, #0
 80097ca:	f43f aef1 	beq.w	80095b0 <HAL_RCC_OscConfig+0x134>
 80097ce:	e05f      	b.n	8009890 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_HSI_DISABLE();
 80097d0:	6833      	ldr	r3, [r6, #0]
 80097d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097d6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80097d8:	f7fe fa80 	bl	8007cdc <HAL_GetTick>
 80097dc:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097de:	e004      	b.n	80097ea <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097e0:	f7fe fa7c 	bl	8007cdc <HAL_GetTick>
 80097e4:	1bc0      	subs	r0, r0, r7
 80097e6:	2802      	cmp	r0, #2
 80097e8:	d8b8      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097ea:	6833      	ldr	r3, [r6, #0]
 80097ec:	055b      	lsls	r3, r3, #21
 80097ee:	d4f7      	bmi.n	80097e0 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	e686      	b.n	8009502 <HAL_RCC_OscConfig+0x86>
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 80097f4:	4f8b      	ldr	r7, [pc, #556]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097f6:	f241 3988 	movw	r9, #5000	@ 0x1388
      CLEAR_BIT(RCC->BDCR1, (RCC_BDCR1_LSEON | RCC_BDCR1_LSESYSEN));
 80097fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80097fe:	f023 0381 	bic.w	r3, r3, #129	@ 0x81
 8009802:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR1, RCC_BDCR1_LSEBYP);
 8009806:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800980a:	f023 0304 	bic.w	r3, r3, #4
 800980e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
      tickstart = HAL_GetTick();
 8009812:	f7fe fa63 	bl	8007cdc <HAL_GetTick>
 8009816:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8009818:	e005      	b.n	8009826 <HAL_RCC_OscConfig+0x3aa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800981a:	f7fe fa5f 	bl	8007cdc <HAL_GetTick>
 800981e:	eba0 0008 	sub.w	r0, r0, r8
 8009822:	4548      	cmp	r0, r9
 8009824:	d89a      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSERDY) != 0U)
 8009826:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800982a:	0799      	lsls	r1, r3, #30
 800982c:	d4f5      	bmi.n	800981a <HAL_RCC_OscConfig+0x39e>
      if (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSEN) != 0U)
 800982e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009832:	061a      	lsls	r2, r3, #24
 8009834:	f57f af07 	bpl.w	8009646 <HAL_RCC_OscConfig+0x1ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009838:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 800983c:	4f79      	ldr	r7, [pc, #484]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 800983e:	e005      	b.n	800984c <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009840:	f7fe fa4c 	bl	8007cdc <HAL_GetTick>
 8009844:	eba0 0008 	sub.w	r0, r0, r8
 8009848:	4548      	cmp	r0, r9
 800984a:	d887      	bhi.n	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 800984c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009850:	051b      	lsls	r3, r3, #20
 8009852:	d4f5      	bmi.n	8009840 <HAL_RCC_OscConfig+0x3c4>
 8009854:	e6f7      	b.n	8009646 <HAL_RCC_OscConfig+0x1ca>
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	62bb      	str	r3, [r7, #40]	@ 0x28
      tickstart = HAL_GetTick();
 800985e:	f7fe fa3d 	bl	8007cdc <HAL_GetTick>
 8009862:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009866:	07d8      	lsls	r0, r3, #31
 8009868:	f53f aebd 	bmi.w	80095e6 <HAL_RCC_OscConfig+0x16a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800986c:	f7fe fa36 	bl	8007cdc <HAL_GetTick>
 8009870:	eba0 0008 	sub.w	r0, r0, r8
 8009874:	2802      	cmp	r0, #2
 8009876:	d9f5      	bls.n	8009864 <HAL_RCC_OscConfig+0x3e8>
 8009878:	e770      	b.n	800975c <HAL_RCC_OscConfig+0x2e0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800987a:	f7fe fa2f 	bl	8007cdc <HAL_GetTick>
 800987e:	1bc0      	subs	r0, r0, r7
 8009880:	4548      	cmp	r0, r9
 8009882:	f63f af6b 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSESYSRDY) != 0U)
 8009886:	f8d8 30f0 	ldr.w	r3, [r8, #240]	@ 0xf0
 800988a:	0518      	lsls	r0, r3, #20
 800988c:	d4f5      	bmi.n	800987a <HAL_RCC_OscConfig+0x3fe>
 800988e:	e6da      	b.n	8009646 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009890:	4a64      	ldr	r2, [pc, #400]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 8009892:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009896:	f023 0304 	bic.w	r3, r3, #4
 800989a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800989e:	e687      	b.n	80095b0 <HAL_RCC_OscConfig+0x134>
        tmpreg1 = (RCC->CR & ~RCC_CR_PLL1ON);
 80098a0:	4f60      	ldr	r7, [pc, #384]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
        RCC->CR = tmpreg1;
 80098a8:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80098aa:	f7fe fa17 	bl	8007cdc <HAL_GetTick>
 80098ae:	4606      	mov	r6, r0
 80098b0:	e002      	b.n	80098b8 <HAL_RCC_OscConfig+0x43c>
        } while ((tmpreg1 & RCC_CR_PLL1RDY) != 0U);
 80098b2:	f015 7300 	ands.w	r3, r5, #33554432	@ 0x2000000
 80098b6:	d066      	beq.n	8009986 <HAL_RCC_OscConfig+0x50a>
          tmpreg1 = RCC->CR;
 80098b8:	683d      	ldr	r5, [r7, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ba:	f7fe fa0f 	bl	8007cdc <HAL_GetTick>
 80098be:	1b80      	subs	r0, r0, r6
 80098c0:	2802      	cmp	r0, #2
 80098c2:	d9f6      	bls.n	80098b2 <HAL_RCC_OscConfig+0x436>
 80098c4:	e74a      	b.n	800975c <HAL_RCC_OscConfig+0x2e0>
          tmpreg1 &= ~RCC_BDCR1_LSI1ON;
 80098c6:	f027 6780 	bic.w	r7, r7, #67108864	@ 0x4000000
          RCC->BDCR1 = tmpreg1;
 80098ca:	f8c6 70f0 	str.w	r7, [r6, #240]	@ 0xf0
          tickstart = HAL_GetTick();
 80098ce:	f7fe fa05 	bl	8007cdc <HAL_GetTick>
 80098d2:	4680      	mov	r8, r0
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 80098d4:	e006      	b.n	80098e4 <HAL_RCC_OscConfig+0x468>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80098d6:	f7fe fa01 	bl	8007cdc <HAL_GetTick>
 80098da:	eba0 0008 	sub.w	r0, r0, r8
 80098de:	2814      	cmp	r0, #20
 80098e0:	f63f af3c 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
          while (READ_BIT(RCC->BDCR1, RCC_BDCR1_LSI1RDY) != 0x00u)
 80098e4:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 80098e8:	0118      	lsls	r0, r3, #4
 80098ea:	d4f4      	bmi.n	80098d6 <HAL_RCC_OscConfig+0x45a>
      tmpreg1 |= RCC_OscInitStruct->LSIState;
 80098ec:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80098f0:	e627      	b.n	8009542 <HAL_RCC_OscConfig+0xc6>
    return HAL_ERROR;
 80098f2:	2001      	movs	r0, #1
 80098f4:	e6cf      	b.n	8009696 <HAL_RCC_OscConfig+0x21a>
        ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsrc == RCC_PLLSOURCE_HSI)))
 80098f6:	2e02      	cmp	r6, #2
 80098f8:	f47f aed3 	bne.w	80096a2 <HAL_RCC_OscConfig+0x226>
 80098fc:	e5f5      	b.n	80094ea <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->PLL1.PLLState) == RCC_PLL_OFF)
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d0f7      	beq.n	80098f2 <HAL_RCC_OscConfig+0x476>
        tmpreg1 = RCC->PLL1CFGR;
 8009902:	4a48      	ldr	r2, [pc, #288]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 8009904:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        tmpreg1 = RCC->PLL1CFGR;
 8009906:	6a93      	ldr	r3, [r2, #40]	@ 0x28
        tmpreg2 = RCC->PLL1DIVR;
 8009908:	6b55      	ldr	r5, [r2, #52]	@ 0x34
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 800990a:	f003 0003 	and.w	r0, r3, #3
 800990e:	4288      	cmp	r0, r1
 8009910:	d1ef      	bne.n	80098f2 <HAL_RCC_OscConfig+0x476>
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8009912:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009914:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009918:	3901      	subs	r1, #1
        if (((tmpreg1 & RCC_PLL1CFGR_PLL1SRC) != RCC_OscInitStruct->PLL1.PLLSource) ||
 800991a:	428b      	cmp	r3, r1
 800991c:	d1e9      	bne.n	80098f2 <HAL_RCC_OscConfig+0x476>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 800991e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009920:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8009924:	3b01      	subs	r3, #1
            (((tmpreg1 & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) != (RCC_OscInitStruct->PLL1.PLLM - 1u)) ||
 8009926:	4299      	cmp	r1, r3
 8009928:	d1e3      	bne.n	80098f2 <HAL_RCC_OscConfig+0x476>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 800992a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800992c:	f3c5 2146 	ubfx	r1, r5, #9, #7
 8009930:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) != (RCC_OscInitStruct->PLL1.PLLN - 1u)) ||
 8009932:	4299      	cmp	r1, r3
 8009934:	d1dd      	bne.n	80098f2 <HAL_RCC_OscConfig+0x476>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 8009936:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009938:	f3c5 4106 	ubfx	r1, r5, #16, #7
 800993c:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) != (RCC_OscInitStruct->PLL1.PLLP - 1u)) ||
 800993e:	4299      	cmp	r1, r3
 8009940:	d1d7      	bne.n	80098f2 <HAL_RCC_OscConfig+0x476>
            (((tmpreg2 & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) != (RCC_OscInitStruct->PLL1.PLLR - 1u)))
 8009942:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009944:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8009948:	3b01      	subs	r3, #1
            (((tmpreg2 & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) != (RCC_OscInitStruct->PLL1.PLLQ - 1u)) ||
 800994a:	429d      	cmp	r5, r3
 800994c:	d1d1      	bne.n	80098f2 <HAL_RCC_OscConfig+0x476>
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 800994e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8009950:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
          tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos);
 8009952:	f3c3 03cc 	ubfx	r3, r3, #3, #13
          if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8009956:	429a      	cmp	r2, r3
 8009958:	f43f ae9c 	beq.w	8009694 <HAL_RCC_OscConfig+0x218>
            __HAL_RCC_PLL1_FRACN_DISABLE();
 800995c:	4a31      	ldr	r2, [pc, #196]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 800995e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8009960:	f023 0310 	bic.w	r3, r3, #16
 8009964:	6293      	str	r3, [r2, #40]	@ 0x28
            tickstart = HAL_GetTick();
 8009966:	f7fe f9b9 	bl	8007cdc <HAL_GetTick>
 800996a:	4605      	mov	r5, r0
            while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800996c:	f7fe f9b6 	bl	8007cdc <HAL_GetTick>
 8009970:	42a8      	cmp	r0, r5
 8009972:	d0fb      	beq.n	800996c <HAL_RCC_OscConfig+0x4f0>
            __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 8009974:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009976:	4b2b      	ldr	r3, [pc, #172]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 8009978:	00d2      	lsls	r2, r2, #3
 800997a:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_RCC_PLL1_FRACN_ENABLE();
 800997c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800997e:	f042 0210 	orr.w	r2, r2, #16
 8009982:	629a      	str	r2, [r3, #40]	@ 0x28
 8009984:	e686      	b.n	8009694 <HAL_RCC_OscConfig+0x218>
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 8009986:	6a66      	ldr	r6, [r4, #36]	@ 0x24
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8009988:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
        if (RCC_OscInitStruct->PLL1.PLLSource == RCC_PLLSOURCE_HSE)
 800998a:	2e03      	cmp	r6, #3
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 800998c:	bf09      	itett	eq
 800998e:	4922      	ldreq	r1, [pc, #136]	@ (8009a18 <HAL_RCC_OscConfig+0x59c>)
          pllsrc = HSI_VALUE;
 8009990:	4925      	ldrne	r1, [pc, #148]	@ (8009a28 <HAL_RCC_OscConfig+0x5ac>)
          pllsrc = HSE_VALUE >> ((tmpreg1 & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos);
 8009992:	f3c5 5500 	ubfxeq	r5, r5, #20, #1
 8009996:	40e9      	lsreq	r1, r5
        pllsrc = (pllsrc / RCC_OscInitStruct->PLL1.PLLM);
 8009998:	fbb1 f1f0 	udiv	r1, r1, r0
        if (pllsrc > PLL_INPUTRANGE0_FREQMAX)
 800999c:	4a23      	ldr	r2, [pc, #140]	@ (8009a2c <HAL_RCC_OscConfig+0x5b0>)
                    ((RCC_OscInitStruct->PLL1.PLLM - 1u) << RCC_PLL1CFGR_PLL1M_Pos) | RCC_PLL1CFGR_PLL1REN);
 800999e:	3801      	subs	r0, #1
          pllsrc = RCC_PLL_VCOINPUT_RANGE1;
 80099a0:	4291      	cmp	r1, r2
 80099a2:	bf88      	it	hi
 80099a4:	230c      	movhi	r3, #12
        tmpreg2 = RCC->PLL1CFGR;
 80099a6:	491f      	ldr	r1, [pc, #124]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 80099a8:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
        tmpreg2 &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1RGE | RCC_PLL1CFGR_PLL1FRACEN | RCC_PLL1CFGR_PLL1M);
 80099aa:	f422 62e3 	bic.w	r2, r2, #1816	@ 0x718
 80099ae:	f022 0207 	bic.w	r2, r2, #7
        tmpreg2 |= (RCC_OscInitStruct->PLL1.PLLSource | pllsrc |
 80099b2:	4313      	orrs	r3, r2
 80099b4:	4333      	orrs	r3, r6
 80099b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80099ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
        RCC->PLL1CFGR = tmpreg2;
 80099be:	628b      	str	r3, [r1, #40]	@ 0x28
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80099c0:	e9d4 030c 	ldrd	r0, r3, [r4, #48]	@ 0x30
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80099c4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 80099c6:	3b01      	subs	r3, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80099c8:	3801      	subs	r0, #1
                   ((RCC_OscInitStruct->PLL1.PLLQ - 1u) << RCC_PLL1DIVR_PLL1Q_Pos) |
 80099ca:	041b      	lsls	r3, r3, #16
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80099cc:	3a01      	subs	r2, #1
                   ((RCC_OscInitStruct->PLL1.PLLP - 1u) << RCC_PLL1DIVR_PLL1P_Pos) |
 80099ce:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80099d2:	4313      	orrs	r3, r2
                   ((RCC_OscInitStruct->PLL1.PLLR - 1u) << RCC_PLL1DIVR_PLL1R_Pos));
 80099d4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80099d6:	3a01      	subs	r2, #1
        tmpreg2 = ((RCC_OscInitStruct->PLL1.PLLN - 1u) |
 80099d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        RCC->PLL1DIVR = tmpreg2;
 80099dc:	634b      	str	r3, [r1, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL1.PLLFractional != 0x00u)
 80099de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80099e0:	b12b      	cbz	r3, 80099ee <HAL_RCC_OscConfig+0x572>
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	638b      	str	r3, [r1, #56]	@ 0x38
          __HAL_RCC_PLL1_FRACN_ENABLE();
 80099e6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80099e8:	f043 0310 	orr.w	r3, r3, #16
 80099ec:	628b      	str	r3, [r1, #40]	@ 0x28
        __HAL_RCC_PLL1_ENABLE();
 80099ee:	4c0d      	ldr	r4, [pc, #52]	@ (8009a24 <HAL_RCC_OscConfig+0x5a8>)
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80099f8:	f7fe f970 	bl	8007cdc <HAL_GetTick>
 80099fc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80099fe:	e005      	b.n	8009a0c <HAL_RCC_OscConfig+0x590>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a00:	f7fe f96c 	bl	8007cdc <HAL_GetTick>
 8009a04:	1b40      	subs	r0, r0, r5
 8009a06:	2802      	cmp	r0, #2
 8009a08:	f63f aea8 	bhi.w	800975c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	0198      	lsls	r0, r3, #6
 8009a10:	d5f6      	bpl.n	8009a00 <HAL_RCC_OscConfig+0x584>
 8009a12:	e63f      	b.n	8009694 <HAL_RCC_OscConfig+0x218>
    return HAL_ERROR;
 8009a14:	2001      	movs	r0, #1
}
 8009a16:	4770      	bx	lr
 8009a18:	01e84800 	.word	0x01e84800
 8009a1c:	200001b0 	.word	0x200001b0
 8009a20:	200001a8 	.word	0x200001a8
 8009a24:	46020c00 	.word	0x46020c00
 8009a28:	00f42400 	.word	0x00f42400
 8009a2c:	007a1200 	.word	0x007a1200

08009a30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f000 80a6 	beq.w	8009b82 <HAL_RCC_ClockConfig+0x152>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a36:	4a6c      	ldr	r2, [pc, #432]	@ (8009be8 <HAL_RCC_ClockConfig+0x1b8>)
{
 8009a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009a3c:	6813      	ldr	r3, [r2, #0]
 8009a3e:	4604      	mov	r4, r0
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	428b      	cmp	r3, r1
 8009a46:	460d      	mov	r5, r1
 8009a48:	d20c      	bcs.n	8009a64 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a4a:	6813      	ldr	r3, [r2, #0]
 8009a4c:	f023 030f 	bic.w	r3, r3, #15
 8009a50:	430b      	orrs	r3, r1
 8009a52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a54:	6813      	ldr	r3, [r2, #0]
 8009a56:	f003 030f 	and.w	r3, r3, #15
 8009a5a:	428b      	cmp	r3, r1
 8009a5c:	d002      	beq.n	8009a64 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009a5e:	2001      	movs	r0, #1
}
 8009a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK5) == RCC_CLOCKTYPE_HCLK5)
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	069a      	lsls	r2, r3, #26
 8009a68:	d50a      	bpl.n	8009a80 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR4, (RCC_CFGR4_HDIV5 | RCC_CFGR4_HPRE5),
 8009a6a:	e9d4 2606 	ldrd	r2, r6, [r4, #24]
 8009a6e:	485f      	ldr	r0, [pc, #380]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
 8009a70:	4332      	orrs	r2, r6
 8009a72:	f8d0 1200 	ldr.w	r1, [r0, #512]	@ 0x200
 8009a76:	f021 0117 	bic.w	r1, r1, #23
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a80:	07df      	lsls	r7, r3, #31
 8009a82:	d524      	bpl.n	8009ace <HAL_RCC_ClockConfig+0x9e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a84:	6862      	ldr	r2, [r4, #4]
    tmpreg1 = RCC->CR;
 8009a86:	4b59      	ldr	r3, [pc, #356]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a88:	2a03      	cmp	r2, #3
    tmpreg1 = RCC->CR;
 8009a8a:	6819      	ldr	r1, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a8c:	f000 808e 	beq.w	8009bac <HAL_RCC_ClockConfig+0x17c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a90:	2a02      	cmp	r2, #2
 8009a92:	d073      	beq.n	8009b7c <HAL_RCC_ClockConfig+0x14c>
        if ((tmpreg1 & RCC_CR_HSIRDY) == 0U)
 8009a94:	0549      	lsls	r1, r1, #21
 8009a96:	d5e2      	bpl.n	8009a5e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a98:	4e54      	ldr	r6, [pc, #336]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a9a:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a9e:	69f3      	ldr	r3, [r6, #28]
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8009aa8:	f7fe f918 	bl	8007cdc <HAL_GetTick>
 8009aac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8009aae:	e004      	b.n	8009aba <HAL_RCC_ClockConfig+0x8a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab0:	f7fe f914 	bl	8007cdc <HAL_GetTick>
 8009ab4:	1bc0      	subs	r0, r0, r7
 8009ab6:	4540      	cmp	r0, r8
 8009ab8:	d875      	bhi.n	8009ba6 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8009aba:	69f3      	ldr	r3, [r6, #28]
 8009abc:	6862      	ldr	r2, [r4, #4]
 8009abe:	f003 030c 	and.w	r3, r3, #12
 8009ac2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009ac6:	d1f3      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0x80>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ac8:	2a03      	cmp	r2, #3
 8009aca:	d05c      	beq.n	8009b86 <HAL_RCC_ClockConfig+0x156>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009acc:	6823      	ldr	r3, [r4, #0]
  tmpreg1 = RCC->CFGR2;
 8009ace:	4a47      	ldr	r2, [pc, #284]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ad0:	079e      	lsls	r6, r3, #30
  tmpreg1 = RCC->CFGR2;
 8009ad2:	6a12      	ldr	r2, [r2, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ad4:	f003 0104 	and.w	r1, r3, #4
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ad8:	f003 0008 	and.w	r0, r3, #8
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009adc:	d441      	bmi.n	8009b62 <HAL_RCC_ClockConfig+0x132>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	d037      	beq.n	8009b52 <HAL_RCC_ClockConfig+0x122>
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8009ae2:	68e1      	ldr	r1, [r4, #12]
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8009ae4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8009ae8:	430a      	orrs	r2, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d133      	bne.n	8009b56 <HAL_RCC_ClockConfig+0x126>
    RCC->CFGR2 = tmpreg1;
 8009aee:	493f      	ldr	r1, [pc, #252]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
 8009af0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK7) == RCC_CLOCKTYPE_PCLK7)
 8009af2:	06db      	lsls	r3, r3, #27
 8009af4:	d502      	bpl.n	8009afc <HAL_RCC_ClockConfig+0xcc>
    WRITE_REG(RCC->CFGR3, RCC_ClkInitStruct->APB7CLKDivider);
 8009af6:	6962      	ldr	r2, [r4, #20]
 8009af8:	4b3c      	ldr	r3, [pc, #240]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
 8009afa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009afc:	4a3a      	ldr	r2, [pc, #232]	@ (8009be8 <HAL_RCC_ClockConfig+0x1b8>)
 8009afe:	6813      	ldr	r3, [r2, #0]
 8009b00:	f003 030f 	and.w	r3, r3, #15
 8009b04:	42ab      	cmp	r3, r5
 8009b06:	d909      	bls.n	8009b1c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b08:	6813      	ldr	r3, [r2, #0]
 8009b0a:	f023 030f 	bic.w	r3, r3, #15
 8009b0e:	432b      	orrs	r3, r5
 8009b10:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	42ab      	cmp	r3, r5
 8009b1a:	d1a0      	bne.n	8009a5e <HAL_RCC_ClockConfig+0x2e>
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b1c:	4a33      	ldr	r2, [pc, #204]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
 8009b1e:	69d3      	ldr	r3, [r2, #28]
  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b20:	f013 030c 	ands.w	r3, r3, #12
 8009b24:	d028      	beq.n	8009b78 <HAL_RCC_ClockConfig+0x148>
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b26:	2b08      	cmp	r3, #8
 8009b28:	d150      	bne.n	8009bcc <HAL_RCC_ClockConfig+0x19c>
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009b2a:	6812      	ldr	r2, [r2, #0]
 8009b2c:	4b30      	ldr	r3, [pc, #192]	@ (8009bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8009b2e:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8009b32:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009b34:	4a2d      	ldr	r2, [pc, #180]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
 8009b36:	482f      	ldr	r0, [pc, #188]	@ (8009bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8009b38:	6a12      	ldr	r2, [r2, #32]
  return HAL_InitTick(uwTickPrio);
 8009b3a:	492f      	ldr	r1, [pc, #188]	@ (8009bf8 <HAL_RCC_ClockConfig+0x1c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009b3c:	f002 0207 	and.w	r2, r2, #7
 8009b40:	5c80      	ldrb	r0, [r0, r2]
 8009b42:	4a2e      	ldr	r2, [pc, #184]	@ (8009bfc <HAL_RCC_ClockConfig+0x1cc>)
 8009b44:	40c3      	lsrs	r3, r0
}
 8009b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
 8009b4a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009b4c:	6013      	str	r3, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8009b4e:	f7fe b849 	b.w	8007be4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d0cd      	beq.n	8009af2 <HAL_RCC_ClockConfig+0xc2>
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8009b56:	6921      	ldr	r1, [r4, #16]
    tmpreg1 &= ~RCC_CFGR2_PPRE2;
 8009b58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
    tmpreg1 |= (RCC_ClkInitStruct->APB2CLKDivider << (RCC_CFGR2_PPRE2_Pos - RCC_CFGR2_PPRE1_Pos));
 8009b5c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  if (update != 0x00u)
 8009b60:	e7c5      	b.n	8009aee <HAL_RCC_ClockConfig+0xbe>
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8009b62:	68a6      	ldr	r6, [r4, #8]
    tmpreg1 &= ~RCC_CFGR2_HPRE;
 8009b64:	f022 0207 	bic.w	r2, r2, #7
    tmpreg1 |= RCC_ClkInitStruct->AHBCLKDivider;
 8009b68:	4332      	orrs	r2, r6
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	d0bd      	beq.n	8009aea <HAL_RCC_ClockConfig+0xba>
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8009b6e:	68e1      	ldr	r1, [r4, #12]
    tmpreg1 &= ~RCC_CFGR2_PPRE1;
 8009b70:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpreg1 |= RCC_ClkInitStruct->APB1CLKDivider;
 8009b74:	430a      	orrs	r2, r1
 8009b76:	e7b8      	b.n	8009aea <HAL_RCC_ClockConfig+0xba>
    sysclk = HSI_VALUE;
 8009b78:	4b21      	ldr	r3, [pc, #132]	@ (8009c00 <HAL_RCC_ClockConfig+0x1d0>)
 8009b7a:	e7db      	b.n	8009b34 <HAL_RCC_ClockConfig+0x104>
        if ((tmpreg1 & RCC_CR_HSERDY) == 0U)
 8009b7c:	0388      	lsls	r0, r1, #14
 8009b7e:	d48b      	bmi.n	8009a98 <HAL_RCC_ClockConfig+0x68>
 8009b80:	e76d      	b.n	8009a5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009b82:	2001      	movs	r0, #1
}
 8009b84:	4770      	bx	lr
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8009b86:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8009b88:	4f18      	ldr	r7, [pc, #96]	@ (8009bec <HAL_RCC_ClockConfig+0x1bc>)
      CLEAR_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRE);
 8009b8a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b8e:	62b3      	str	r3, [r6, #40]	@ 0x28
      tickstart = HAL_GetTick();
 8009b90:	f7fe f8a4 	bl	8007cdc <HAL_GetTick>
 8009b94:	4606      	mov	r6, r0
      while ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RCLKPRERDY) == 0x00u)
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	025b      	lsls	r3, r3, #9
 8009b9a:	d497      	bmi.n	8009acc <HAL_RCC_ClockConfig+0x9c>
        if ((HAL_GetTick() - tickstart) > PLL1_NDIV_TIMEOUT_VALUE)
 8009b9c:	f7fe f89e 	bl	8007cdc <HAL_GetTick>
 8009ba0:	1b80      	subs	r0, r0, r6
 8009ba2:	280a      	cmp	r0, #10
 8009ba4:	d9f7      	bls.n	8009b96 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
 8009ba6:	2003      	movs	r0, #3
}
 8009ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((tmpreg1 & RCC_CR_PLL1RDY) == 0U)
 8009bac:	018e      	lsls	r6, r1, #6
 8009bae:	f57f af56 	bpl.w	8009a5e <HAL_RCC_ClockConfig+0x2e>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR1_SWS_Pos))
 8009bb2:	69d9      	ldr	r1, [r3, #28]
 8009bb4:	f001 010c 	and.w	r1, r1, #12
 8009bb8:	290c      	cmp	r1, #12
 8009bba:	f43f af6d 	beq.w	8009a98 <HAL_RCC_ClockConfig+0x68>
          MODIFY_REG(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1RCLKPRESTEP, RCC_PLL1CFGR_PLL1RCLKPRE);
 8009bbe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009bc0:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8009bc4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8009bc8:	6299      	str	r1, [r3, #40]	@ 0x28
 8009bca:	e765      	b.n	8009a98 <HAL_RCC_ClockConfig+0x68>
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009bcc:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009bce:	f7ff fc03 	bl	80093d8 <RCC_PLL1_GetVCOOutputFreq>
 8009bd2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009bd6:	ee17 3a90 	vmov	r3, s15
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009bda:	f3c4 6406 	ubfx	r4, r4, #24, #7
 8009bde:	3401      	adds	r4, #1
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009be0:	fbb3 f3f4 	udiv	r3, r3, r4
  return sysclk;
 8009be4:	e7a6      	b.n	8009b34 <HAL_RCC_ClockConfig+0x104>
 8009be6:	bf00      	nop
 8009be8:	40022000 	.word	0x40022000
 8009bec:	46020c00 	.word	0x46020c00
 8009bf0:	01e84800 	.word	0x01e84800
 8009bf4:	0802e0c0 	.word	0x0802e0c0
 8009bf8:	200001b0 	.word	0x200001b0
 8009bfc:	200001a8 	.word	0x200001a8
 8009c00:	00f42400 	.word	0x00f42400

08009c04 <HAL_RCC_GetSysClockFreq>:
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c04:	4a0e      	ldr	r2, [pc, #56]	@ (8009c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009c06:	69d3      	ldr	r3, [r2, #28]
  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c08:	f013 030c 	ands.w	r3, r3, #12
 8009c0c:	d015      	beq.n	8009c3a <HAL_RCC_GetSysClockFreq+0x36>
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c0e:	2b08      	cmp	r3, #8
 8009c10:	d105      	bne.n	8009c1e <HAL_RCC_GetSysClockFreq+0x1a>
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009c12:	6813      	ldr	r3, [r2, #0]
 8009c14:	480b      	ldr	r0, [pc, #44]	@ (8009c44 <HAL_RCC_GetSysClockFreq+0x40>)
 8009c16:	f3c3 5300 	ubfx	r3, r3, #20, #1
 8009c1a:	40d8      	lsrs	r0, r3
 8009c1c:	4770      	bx	lr
{
 8009c1e:	b510      	push	{r4, lr}
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009c20:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009c22:	f7ff fbd9 	bl	80093d8 <RCC_PLL1_GetVCOOutputFreq>
 8009c26:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009c2a:	ee17 0a90 	vmov	r0, s15
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009c2e:	f3c4 6406 	ubfx	r4, r4, #24, #7
 8009c32:	3401      	adds	r4, #1
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009c34:	fbb0 f0f4 	udiv	r0, r0, r4
}
 8009c38:	bd10      	pop	{r4, pc}
    sysclk = HSI_VALUE;
 8009c3a:	4803      	ldr	r0, [pc, #12]	@ (8009c48 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	46020c00 	.word	0x46020c00
 8009c44:	01e84800 	.word	0x01e84800
 8009c48:	00f42400 	.word	0x00f42400

08009c4c <HAL_RCC_GetPCLK1Freq>:
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c4c:	4a16      	ldr	r2, [pc, #88]	@ (8009ca8 <HAL_RCC_GetPCLK1Freq+0x5c>)
{
 8009c4e:	b510      	push	{r4, lr}
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c50:	69d3      	ldr	r3, [r2, #28]
  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c52:	f013 030c 	ands.w	r3, r3, #12
 8009c56:	d024      	beq.n	8009ca2 <HAL_RCC_GetPCLK1Freq+0x56>
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d115      	bne.n	8009c88 <HAL_RCC_GetPCLK1Freq+0x3c>
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009c5c:	6812      	ldr	r2, [r2, #0]
 8009c5e:	4b13      	ldr	r3, [pc, #76]	@ (8009cac <HAL_RCC_GetPCLK1Freq+0x60>)
 8009c60:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8009c64:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009c66:	4910      	ldr	r1, [pc, #64]	@ (8009ca8 <HAL_RCC_GetPCLK1Freq+0x5c>)
 8009c68:	4c11      	ldr	r4, [pc, #68]	@ (8009cb0 <HAL_RCC_GetPCLK1Freq+0x64>)
 8009c6a:	6a0a      	ldr	r2, [r1, #32]
 8009c6c:	4811      	ldr	r0, [pc, #68]	@ (8009cb4 <HAL_RCC_GetPCLK1Freq+0x68>)
 8009c6e:	f002 0207 	and.w	r2, r2, #7
 8009c72:	5ca2      	ldrb	r2, [r4, r2]
 8009c74:	40d3      	lsrs	r3, r2
 8009c76:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009c78:	6a0a      	ldr	r2, [r1, #32]
 8009c7a:	490f      	ldr	r1, [pc, #60]	@ (8009cb8 <HAL_RCC_GetPCLK1Freq+0x6c>)
 8009c7c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8009c80:	5c88      	ldrb	r0, [r1, r2]
}
 8009c82:	fa23 f000 	lsr.w	r0, r3, r0
 8009c86:	bd10      	pop	{r4, pc}
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009c88:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009c8a:	f7ff fba5 	bl	80093d8 <RCC_PLL1_GetVCOOutputFreq>
 8009c8e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009c92:	ee17 3a90 	vmov	r3, s15
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009c96:	f3c4 6406 	ubfx	r4, r4, #24, #7
 8009c9a:	3401      	adds	r4, #1
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009c9c:	fbb3 f3f4 	udiv	r3, r3, r4
  return sysclk;
 8009ca0:	e7e1      	b.n	8009c66 <HAL_RCC_GetPCLK1Freq+0x1a>
    sysclk = HSI_VALUE;
 8009ca2:	4b06      	ldr	r3, [pc, #24]	@ (8009cbc <HAL_RCC_GetPCLK1Freq+0x70>)
 8009ca4:	e7df      	b.n	8009c66 <HAL_RCC_GetPCLK1Freq+0x1a>
 8009ca6:	bf00      	nop
 8009ca8:	46020c00 	.word	0x46020c00
 8009cac:	01e84800 	.word	0x01e84800
 8009cb0:	0802e0c0 	.word	0x0802e0c0
 8009cb4:	200001a8 	.word	0x200001a8
 8009cb8:	0802e0b8 	.word	0x0802e0b8
 8009cbc:	00f42400 	.word	0x00f42400

08009cc0 <HAL_RCC_GetPCLK2Freq>:
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cc0:	4a16      	ldr	r2, [pc, #88]	@ (8009d1c <HAL_RCC_GetPCLK2Freq+0x5c>)
{
 8009cc2:	b510      	push	{r4, lr}
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cc4:	69d3      	ldr	r3, [r2, #28]
  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009cc6:	f013 030c 	ands.w	r3, r3, #12
 8009cca:	d024      	beq.n	8009d16 <HAL_RCC_GetPCLK2Freq+0x56>
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ccc:	2b08      	cmp	r3, #8
 8009cce:	d115      	bne.n	8009cfc <HAL_RCC_GetPCLK2Freq+0x3c>
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009cd0:	6812      	ldr	r2, [r2, #0]
 8009cd2:	4b13      	ldr	r3, [pc, #76]	@ (8009d20 <HAL_RCC_GetPCLK2Freq+0x60>)
 8009cd4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8009cd8:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009cda:	4910      	ldr	r1, [pc, #64]	@ (8009d1c <HAL_RCC_GetPCLK2Freq+0x5c>)
 8009cdc:	4c11      	ldr	r4, [pc, #68]	@ (8009d24 <HAL_RCC_GetPCLK2Freq+0x64>)
 8009cde:	6a0a      	ldr	r2, [r1, #32]
 8009ce0:	4811      	ldr	r0, [pc, #68]	@ (8009d28 <HAL_RCC_GetPCLK2Freq+0x68>)
 8009ce2:	f002 0207 	and.w	r2, r2, #7
 8009ce6:	5ca2      	ldrb	r2, [r4, r2]
 8009ce8:	40d3      	lsrs	r3, r2
 8009cea:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009cec:	6a0a      	ldr	r2, [r1, #32]
 8009cee:	490f      	ldr	r1, [pc, #60]	@ (8009d2c <HAL_RCC_GetPCLK2Freq+0x6c>)
 8009cf0:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8009cf4:	5c88      	ldrb	r0, [r1, r2]
}
 8009cf6:	fa23 f000 	lsr.w	r0, r3, r0
 8009cfa:	bd10      	pop	{r4, pc}
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009cfc:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009cfe:	f7ff fb6b 	bl	80093d8 <RCC_PLL1_GetVCOOutputFreq>
 8009d02:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009d06:	ee17 3a90 	vmov	r3, s15
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009d0a:	f3c4 6406 	ubfx	r4, r4, #24, #7
 8009d0e:	3401      	adds	r4, #1
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009d10:	fbb3 f3f4 	udiv	r3, r3, r4
  return sysclk;
 8009d14:	e7e1      	b.n	8009cda <HAL_RCC_GetPCLK2Freq+0x1a>
    sysclk = HSI_VALUE;
 8009d16:	4b06      	ldr	r3, [pc, #24]	@ (8009d30 <HAL_RCC_GetPCLK2Freq+0x70>)
 8009d18:	e7df      	b.n	8009cda <HAL_RCC_GetPCLK2Freq+0x1a>
 8009d1a:	bf00      	nop
 8009d1c:	46020c00 	.word	0x46020c00
 8009d20:	01e84800 	.word	0x01e84800
 8009d24:	0802e0c0 	.word	0x0802e0c0
 8009d28:	200001a8 	.word	0x200001a8
 8009d2c:	0802e0b8 	.word	0x0802e0b8
 8009d30:	00f42400 	.word	0x00f42400

08009d34 <HAL_RCC_GetPCLK7Freq>:
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d34:	4a16      	ldr	r2, [pc, #88]	@ (8009d90 <HAL_RCC_GetPCLK7Freq+0x5c>)
{
 8009d36:	b510      	push	{r4, lr}
  sysclk = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d38:	69d3      	ldr	r3, [r2, #28]
  if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d3a:	f013 030c 	ands.w	r3, r3, #12
 8009d3e:	d024      	beq.n	8009d8a <HAL_RCC_GetPCLK7Freq+0x56>
  else if (sysclk == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d115      	bne.n	8009d70 <HAL_RCC_GetPCLK7Freq+0x3c>
    sysclk = (HSE_VALUE >> ((RCC->CR & RCC_CR_HSEPRE) >> RCC_CR_HSEPRE_Pos));
 8009d44:	6812      	ldr	r2, [r2, #0]
 8009d46:	4b13      	ldr	r3, [pc, #76]	@ (8009d94 <HAL_RCC_GetPCLK7Freq+0x60>)
 8009d48:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8009d4c:	40d3      	lsrs	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009d4e:	4910      	ldr	r1, [pc, #64]	@ (8009d90 <HAL_RCC_GetPCLK7Freq+0x5c>)
 8009d50:	4c11      	ldr	r4, [pc, #68]	@ (8009d98 <HAL_RCC_GetPCLK7Freq+0x64>)
 8009d52:	6a0a      	ldr	r2, [r1, #32]
 8009d54:	4811      	ldr	r0, [pc, #68]	@ (8009d9c <HAL_RCC_GetPCLK7Freq+0x68>)
 8009d56:	f002 0207 	and.w	r2, r2, #7
 8009d5a:	5ca2      	ldrb	r2, [r4, r2]
 8009d5c:	40d3      	lsrs	r3, r2
 8009d5e:	6003      	str	r3, [r0, #0]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE7) >> RCC_CFGR3_PPRE7_Pos]);
 8009d60:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8009d62:	490f      	ldr	r1, [pc, #60]	@ (8009da0 <HAL_RCC_GetPCLK7Freq+0x6c>)
 8009d64:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8009d68:	5c88      	ldrb	r0, [r1, r2]
}
 8009d6a:	fa23 f000 	lsr.w	r0, r3, r0
 8009d6e:	bd10      	pop	{r4, pc}
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009d70:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009d72:	f7ff fb31 	bl	80093d8 <RCC_PLL1_GetVCOOutputFreq>
 8009d76:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009d7a:	ee17 3a90 	vmov	r3, s15
  pllr = ((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U;
 8009d7e:	f3c4 6406 	ubfx	r4, r4, #24, #7
 8009d82:	3401      	adds	r4, #1
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllr);
 8009d84:	fbb3 f3f4 	udiv	r3, r3, r4
  return sysclk;
 8009d88:	e7e1      	b.n	8009d4e <HAL_RCC_GetPCLK7Freq+0x1a>
    sysclk = HSI_VALUE;
 8009d8a:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <HAL_RCC_GetPCLK7Freq+0x70>)
 8009d8c:	e7df      	b.n	8009d4e <HAL_RCC_GetPCLK7Freq+0x1a>
 8009d8e:	bf00      	nop
 8009d90:	46020c00 	.word	0x46020c00
 8009d94:	01e84800 	.word	0x01e84800
 8009d98:	0802e0c0 	.word	0x0802e0c0
 8009d9c:	200001a8 	.word	0x200001a8
 8009da0:	0802e0b8 	.word	0x0802e0b8
 8009da4:	00f42400 	.word	0x00f42400

08009da8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef *PeriphClkInit)
{
 8009da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009dac:	6803      	ldr	r3, [r0, #0]
{
 8009dae:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009db0:	07df      	lsls	r7, r3, #31
{
 8009db2:	b083      	sub	sp, #12
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009db4:	d508      	bpl.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009db6:	49ac      	ldr	r1, [pc, #688]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009db8:	6840      	ldr	r0, [r0, #4]
 8009dba:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009dbe:	f022 0203 	bic.w	r2, r2, #3
 8009dc2:	4302      	orrs	r2, r0
 8009dc4:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  }

#if defined (USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009dc8:	079e      	lsls	r6, r3, #30
 8009dca:	d508      	bpl.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009dcc:	49a6      	ldr	r1, [pc, #664]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009dce:	68a0      	ldr	r0, [r4, #8]
 8009dd0:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009dd4:	f022 020c 	bic.w	r2, r2, #12
 8009dd8:	4302      	orrs	r2, r0
 8009dda:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
#endif


#if defined (I2C1)
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009dde:	075d      	lsls	r5, r3, #29
 8009de0:	d508      	bpl.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009de2:	49a1      	ldr	r1, [pc, #644]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009de4:	68e0      	ldr	r0, [r4, #12]
 8009de6:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009dea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009dee:	4302      	orrs	r2, r0
 8009df0:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0



#if defined (LPTIM2)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009df4:	0718      	lsls	r0, r3, #28
 8009df6:	d508      	bpl.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009df8:	499b      	ldr	r1, [pc, #620]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009dfa:	6920      	ldr	r0, [r4, #16]
 8009dfc:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009e00:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8009e04:	4302      	orrs	r2, r0
 8009e06:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  }
#endif

#if defined (SPI1)
  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009e0a:	06d9      	lsls	r1, r3, #27
 8009e0c:	d508      	bpl.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8009e0e:	4996      	ldr	r1, [pc, #600]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009e10:	6960      	ldr	r0, [r4, #20]
 8009e12:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009e16:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8009e1a:	4302      	orrs	r2, r0
 8009e1c:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  }
#endif

  /*-------------------------- SYSTICK clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SYSTICK) == RCC_PERIPHCLK_SYSTICK)
 8009e20:	069a      	lsls	r2, r3, #26
 8009e22:	d508      	bpl.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SYSTICKCLKSOURCE(PeriphClkInit->SystickClockSelection));

    /* Configure the SYSTICK clock source */
    __HAL_RCC_SYSTICK_CONFIG(PeriphClkInit->SystickClockSelection);
 8009e24:	4990      	ldr	r1, [pc, #576]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009e26:	69a0      	ldr	r0, [r4, #24]
 8009e28:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009e2c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8009e30:	4302      	orrs	r2, r0
 8009e32:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  }

  /*-------------------------- TIMIC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMIC) == RCC_PERIPHCLK_TIMIC)
 8009e36:	065f      	lsls	r7, r3, #25
 8009e38:	d508      	bpl.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMICCLKSOURCE(PeriphClkInit->TimIcClockSelection));

    /* Configure the TIMIC clock source */
    __HAL_RCC_TIMIC_CONFIG(PeriphClkInit->TimIcClockSelection);
 8009e3a:	498b      	ldr	r1, [pc, #556]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009e3c:	69e0      	ldr	r0, [r4, #28]
 8009e3e:	f8d1 20e0 	ldr.w	r2, [r1, #224]	@ 0xe0
 8009e42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009e46:	4302      	orrs	r2, r0
 8009e48:	f8c1 20e0 	str.w	r2, [r1, #224]	@ 0xe0
  }

#if defined (SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e4c:	061e      	lsls	r6, r3, #24
 8009e4e:	d50f      	bpl.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e50:	4985      	ldr	r1, [pc, #532]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009e52:	6a20      	ldr	r0, [r4, #32]
 8009e54:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8009e58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e5c:	4302      	orrs	r2, r0
 8009e5e:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL1P)
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f040 80d6 	bne.w	800a014 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 8009e68:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8009e6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009e6e:	628a      	str	r2, [r1, #40]	@ 0x28
    }
  }
#endif

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e70:	05dd      	lsls	r5, r3, #23
 8009e72:	d50d      	bpl.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Set the source of RNG clock*/
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e74:	497c      	ldr	r1, [pc, #496]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009e76:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009e78:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 8009e7c:	f5b0 5f40 	cmp.w	r0, #12288	@ 0x3000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e80:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009e84:	ea42 0200 	orr.w	r2, r2, r0
 8009e88:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL1Q)
 8009e8c:	f000 80cf 	beq.w	800a02e <HAL_RCCEx_PeriphCLKConfig+0x286>
  }


#if defined (RCC_CCIPR2_ASSEL)
  /*-------------------------- AS clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_AUDIOSYNC) == RCC_PERIPHCLK_AUDIOSYNC)
 8009e90:	0298      	lsls	r0, r3, #10
 8009e92:	d50f      	bpl.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ASCLKSOURCE(PeriphClkInit->AudioSyncClockSelection));

    /* Configure the AS clock source */
    __HAL_RCC_AUDIOSYNC_CONFIG(PeriphClkInit->AudioSyncClockSelection);
 8009e94:	4974      	ldr	r1, [pc, #464]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009e96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009e98:	f8d1 20e4 	ldr.w	r2, [r1, #228]	@ 0xe4
 8009e9c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8009ea0:	4302      	orrs	r2, r0
 8009ea2:	f8c1 20e4 	str.w	r2, [r1, #228]	@ 0xe4

    if (PeriphClkInit->AudioSyncClockSelection == RCC_ASCLKSOURCE_PLL1P)
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f040 80ab 	bne.w	800a002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLL1 PCLK output */
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 8009eac:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8009eae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009eb2:	628a      	str	r2, [r1, #40]	@ 0x28
    }
  }
#endif

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009eb4:	0599      	lsls	r1, r3, #22
 8009eb6:	d508      	bpl.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009eb8:	496b      	ldr	r1, [pc, #428]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009eba:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009ebc:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8009ec0:	f022 0203 	bic.w	r2, r2, #3
 8009ec4:	4302      	orrs	r2, r0
 8009ec6:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009eca:	055a      	lsls	r2, r3, #21
 8009ecc:	d508      	bpl.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
 8009ece:	4966      	ldr	r1, [pc, #408]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009ed0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009ed2:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8009ed6:	f022 0218 	bic.w	r2, r2, #24
 8009eda:	4302      	orrs	r2, r0
 8009edc:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  }


  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ee0:	051f      	lsls	r7, r3, #20
 8009ee2:	d508      	bpl.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009ee4:	4960      	ldr	r1, [pc, #384]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009ee6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009ee8:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8009eec:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8009ef0:	4302      	orrs	r2, r0
 8009ef2:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ef6:	04de      	lsls	r6, r3, #19
 8009ef8:	d508      	bpl.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009efa:	495b      	ldr	r1, [pc, #364]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009efc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8009efe:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8
 8009f02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009f06:	4302      	orrs	r2, r0
 8009f08:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f0c:	049d      	lsls	r5, r3, #18
 8009f0e:	d50c      	bpl.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC4 interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f10:	4955      	ldr	r1, [pc, #340]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009f12:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009f14:	f8d1 20e8 	ldr.w	r2, [r1, #232]	@ 0xe8

    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 8009f18:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f1c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009f20:	ea42 0200 	orr.w	r2, r2, r0
 8009f24:	f8c1 20e8 	str.w	r2, [r1, #232]	@ 0xe8
    if (PeriphClkInit->AdcClockSelection == RCC_PERIPHCLK_ADC)
 8009f28:	d07c      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f2a:	0458      	lsls	r0, r3, #17
 8009f2c:	d553      	bpl.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x22e>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 8009f2e:	4a4e      	ldr	r2, [pc, #312]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)

    /* Check if RTC clock source needs to be changed */
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8009f30:	6c21      	ldr	r1, [r4, #64]	@ 0x40
    tmpreg2 = __HAL_RCC_GET_RTC_SOURCE();
 8009f32:	f8d2 70f0 	ldr.w	r7, [r2, #240]	@ 0xf0
 8009f36:	f407 7740 	and.w	r7, r7, #768	@ 0x300
    if (tmpreg2 != PeriphClkInit->RTCClockSelection)
 8009f3a:	42b9      	cmp	r1, r7
 8009f3c:	d04b      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x22e>
    {
      /* Enable Power Clock */
      if (__HAL_RCC_PWR_IS_CLK_ENABLED() != 0x01u)
 8009f3e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009f42:	0759      	lsls	r1, r3, #29
 8009f44:	d478      	bmi.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x290>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
        pwrclkchanged = SET;
 8009f46:	f04f 0801 	mov.w	r8, #1
        __HAL_RCC_PWR_CLK_ENABLE();
 8009f4a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009f4e:	f043 0304 	orr.w	r3, r3, #4
 8009f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009f56:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009f5a:	f003 0304 	and.w	r3, r3, #4
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	9b01      	ldr	r3, [sp, #4]
      }

      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009f62:	4d42      	ldr	r5, [pc, #264]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009f64:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009f66:	f043 0301 	orr.w	r3, r3, #1
 8009f6a:	62ab      	str	r3, [r5, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f6c:	f7fd feb6 	bl	8007cdc <HAL_GetTick>
 8009f70:	4606      	mov	r6, r0

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f72:	e004      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f74:	f7fd feb2 	bl	8007cdc <HAL_GetTick>
 8009f78:	1b80      	subs	r0, r0, r6
 8009f7a:	2802      	cmp	r0, #2
 8009f7c:	d870      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009f7e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009f80:	07db      	lsls	r3, r3, #31
 8009f82:	d5f7      	bpl.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          return HAL_TIMEOUT;
        }
      }

      /* Save BDCR1 content */
      tmpreg1 = (RCC->BDCR1 & ~RCC_BDCR1_RTCSEL);
 8009f84:	4b38      	ldr	r3, [pc, #224]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009f86:	f8d3 50f0 	ldr.w	r5, [r3, #240]	@ 0xf0
 8009f8a:	f425 7240 	bic.w	r2, r5, #768	@ 0x300

      /* Check if a backup domain reset is required */
      if (tmpreg2 != RCC_RTCCLKSOURCE_DISABLE)
 8009f8e:	b17f      	cbz	r7, 8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
#if defined(RCC_LSI2_SUPPORT)
        /* Save BDCR2 content */
        tmpreg2 = RCC->BDCR2;
 8009f90:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
#endif /* RCC_LSI2_SUPPORT */
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f94:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8009f98:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8009f9c:	f8c3 10f0 	str.w	r1, [r3, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009fa0:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8009fa4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8009fa8:	f8c3 10f0 	str.w	r1, [r3, #240]	@ 0xf0
#if defined(RCC_LSI2_SUPPORT)
        /* Restore previously saved BDCR2 */
        RCC->BDCR2 = tmpreg2;
 8009fac:	f8c3 00f8 	str.w	r0, [r3, #248]	@ 0xf8
#endif /* RCC_LSI2_SUPPORT */
      }

      /* Apply new RTC clock source selection */
      RCC->BDCR1 = (tmpreg1 | PeriphClkInit->RTCClockSelection);
 8009fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fb2:	4e2d      	ldr	r6, [pc, #180]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	f8c6 30f0 	str.w	r3, [r6, #240]	@ 0xf0
#if defined(RCC_LSI2_SUPPORT)
      tmpreg2 |= RCC_BDCR1_LSI2ON;
#endif

      /* Check which oscillators were enable */
      tmpreg2 &= tmpreg1;
 8009fba:	4b2d      	ldr	r3, [pc, #180]	@ (800a070 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)

      if (tmpreg2 != 0x00u)
 8009fbc:	401d      	ands	r5, r3
 8009fbe:	d13e      	bne.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x296>
            return HAL_TIMEOUT;
          }
        }
      }
      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009fc0:	f1b8 0f00 	cmp.w	r8, #0
 8009fc4:	d006      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009fc6:	4a28      	ldr	r2, [pc, #160]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009fc8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8009fcc:	f023 0304 	bic.w	r3, r3, #4
 8009fd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }
    }
  }

  /*-------------------------- RADIO Sleep Timer clock source configuration --*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RADIOST) == RCC_PERIPHCLK_RADIOST)
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	f413 4000 	ands.w	r0, r3, #32768	@ 0x8000
 8009fda:	d00f      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RADIOSLEEPTIMERSOURCE(PeriphClkInit->RadioSlpTimClockSelection));

    /* Configure the RADIO Sleep Timer clock source */
    __HAL_RCC_RADIOSLPTIM_CONFIG(PeriphClkInit->RadioSlpTimClockSelection);
 8009fdc:	4a22      	ldr	r2, [pc, #136]	@ (800a068 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009fde:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009fe0:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8009fe4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check configuration validity as under Backup domain access control */
    if (__HAL_RCC_GET_RADIOSLPTIM_SOURCE() != PeriphClkInit->RadioSlpTimClockSelection)
 8009fee:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
 8009ff2:	f400 2040 	and.w	r0, r0, #786432	@ 0xc0000
 8009ff6:	1a40      	subs	r0, r0, r1
 8009ff8:	bf18      	it	ne
 8009ffa:	2001      	movne	r0, #1
      return HAL_ERROR;
    }
  }

  return HAL_OK;
}
 8009ffc:	b003      	add	sp, #12
 8009ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (PeriphClkInit->AudioSyncClockSelection == RCC_ASCLKSOURCE_PLL1Q)
 800a002:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a006:	f47f af55 	bne.w	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 800a00a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800a00c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a010:	628a      	str	r2, [r1, #40]	@ 0x28
 800a012:	e74f      	b.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL1Q)
 800a014:	2820      	cmp	r0, #32
 800a016:	f47f af2b 	bne.w	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 800a01a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800a01c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a020:	628a      	str	r2, [r1, #40]	@ 0x28
 800a022:	e725      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_PCLK);
 800a024:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800a026:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a02a:	628a      	str	r2, [r1, #40]	@ 0x28
 800a02c:	e77d      	b.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x182>
      __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_QCLK);
 800a02e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800a030:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a034:	628a      	str	r2, [r1, #40]	@ 0x28
 800a036:	e72b      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    FlagStatus       pwrclkchanged = RESET;
 800a038:	f04f 0800 	mov.w	r8, #0
 800a03c:	e791      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        tickstart = HAL_GetTick();
 800a03e:	f7fd fe4d 	bl	8007cdc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a042:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800a046:	4607      	mov	r7, r0
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 800a048:	006d      	lsls	r5, r5, #1
 800a04a:	e004      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04c:	f7fd fe46 	bl	8007cdc <HAL_GetTick>
 800a050:	1bc0      	subs	r0, r0, r7
 800a052:	4548      	cmp	r0, r9
 800a054:	d804      	bhi.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        while (READ_BIT(RCC->BDCR1, (tmpreg2 << 1)) == 0x00u)
 800a056:	f8d6 30f0 	ldr.w	r3, [r6, #240]	@ 0xf0
 800a05a:	422b      	tst	r3, r5
 800a05c:	d0f6      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800a05e:	e7af      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x218>
          return HAL_TIMEOUT;
 800a060:	2003      	movs	r0, #3
}
 800a062:	b003      	add	sp, #12
 800a064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a068:	46020c00 	.word	0x46020c00
 800a06c:	46020800 	.word	0x46020800
 800a070:	24000001 	.word	0x24000001

0800a074 <HAL_RCCEx_HSESetTrimming>:
void HAL_RCCEx_HSESetTrimming(uint32_t Trimming)
{
  /* Check the parameters */
  assert_param(IS_RCC_HSETRIM(Trimming));

  MODIFY_REG(RCC->ECSCR1, RCC_ECSCR1_HSETRIM, Trimming << RCC_ECSCR1_HSETRIM_Pos);
 800a074:	4a04      	ldr	r2, [pc, #16]	@ (800a088 <HAL_RCCEx_HSESetTrimming+0x14>)
 800a076:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 800a07a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800a07e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a082:	f8c2 3210 	str.w	r3, [r2, #528]	@ 0x210
}
 800a086:	4770      	bx	lr
 800a088:	46020c00 	.word	0x46020c00

0800a08c <HAL_RCCEx_EnableRadioBBClock>:
  * @brief  Enable the 2.4 GHz RADIO baseband clock
  * @retval None
  */
void HAL_RCCEx_EnableRadioBBClock(void)
{
  SET_BIT(RCC->RADIOENR, RCC_RADIOENR_BBCLKEN);
 800a08c:	4a03      	ldr	r2, [pc, #12]	@ (800a09c <HAL_RCCEx_EnableRadioBBClock+0x10>)
 800a08e:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800a092:	f043 0302 	orr.w	r3, r3, #2
 800a096:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
}
 800a09a:	4770      	bx	lr
 800a09c:	46020c00 	.word	0x46020c00

0800a0a0 <HAL_RCCEx_DisableRadioBBClock>:
  * @brief  Disable the 2.4 GHz RADIO baseband clock
  * @retval None
  */
void HAL_RCCEx_DisableRadioBBClock(void)
{
  CLEAR_BIT(RCC->RADIOENR, RCC_RADIOENR_BBCLKEN);
 800a0a0:	4a03      	ldr	r2, [pc, #12]	@ (800a0b0 <HAL_RCCEx_DisableRadioBBClock+0x10>)
 800a0a2:	f8d2 3208 	ldr.w	r3, [r2, #520]	@ 0x208
 800a0a6:	f023 0302 	bic.w	r3, r3, #2
 800a0aa:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
}
 800a0ae:	4770      	bx	lr
 800a0b0:	46020c00 	.word	0x46020c00

0800a0b4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d065      	beq.n	800a184 <HAL_RNG_Init+0xd0>
{
 800a0b8:	b570      	push	{r4, r5, r6, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a0ba:	7a43      	ldrb	r3, [r0, #9]
 800a0bc:	4604      	mov	r4, r0
 800a0be:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d050      	beq.n	800a168 <HAL_RNG_Init+0xb4>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0c6:	2102      	movs	r1, #2
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE);
#endif /* defined(RNG_CR_NIST_VALUE) */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a0c8:	f64a 20c7 	movw	r0, #43719	@ 0xaac7
  __HAL_RNG_DISABLE(hrng);
 800a0cc:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0ce:	7261      	strb	r1, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 800a0d0:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG2,
 800a0d2:	6866      	ldr	r6, [r4, #4]
  __HAL_RNG_DISABLE(hrng);
 800a0d4:	f021 0104 	bic.w	r1, r1, #4
 800a0d8:	6011      	str	r1, [r2, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG2,
 800a0da:	6811      	ldr	r1, [r2, #0]
 800a0dc:	4b2a      	ldr	r3, [pc, #168]	@ (800a188 <HAL_RNG_Init+0xd4>)
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE);
 800a0de:	4d2b      	ldr	r5, [pc, #172]	@ (800a18c <HAL_RNG_Init+0xd8>)
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST | RNG_CR_RNG_CONFIG2,
 800a0e0:	400b      	ands	r3, r1
 800a0e2:	4333      	orrs	r3, r6
 800a0e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a0ec:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE);
 800a0ee:	6015      	str	r5, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a0f0:	6110      	str	r0, [r2, #16]
#endif /* defined(RNG_HTCR_NIST_VALUE) */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a0f2:	6813      	ldr	r3, [r2, #0]
 800a0f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a0fa:	f7fd fdef 	bl	8007cdc <HAL_GetTick>

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a0fe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a100:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	0051      	lsls	r1, r2, #1
 800a106:	d50b      	bpl.n	800a120 <HAL_RNG_Init+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a108:	f7fd fde8 	bl	8007cdc <HAL_GetTick>
 800a10c:	1b40      	subs	r0, r0, r5
 800a10e:	280a      	cmp	r0, #10
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a110:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a112:	d902      	bls.n	800a11a <HAL_RNG_Init+0x66>
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	0052      	lsls	r2, r2, #1
 800a118:	d42a      	bmi.n	800a170 <HAL_RNG_Init+0xbc>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	0056      	lsls	r6, r2, #1
 800a11e:	d4f3      	bmi.n	800a108 <HAL_RNG_Init+0x54>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	f042 0204 	orr.w	r2, r2, #4
 800a126:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	0658      	lsls	r0, r3, #25
 800a12c:	d503      	bpl.n	800a136 <HAL_RNG_Init+0x82>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a12e:	2304      	movs	r3, #4
 800a130:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 800a132:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800a134:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800a136:	f7fd fdd1 	bl	8007cdc <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a13a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a13c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	07d9      	lsls	r1, r3, #31
 800a142:	d40b      	bmi.n	800a15c <HAL_RNG_Init+0xa8>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a144:	f7fd fdca 	bl	8007cdc <HAL_GetTick>
 800a148:	1b40      	subs	r0, r0, r5
 800a14a:	280a      	cmp	r0, #10
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a14c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a14e:	d902      	bls.n	800a156 <HAL_RNG_Init+0xa2>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	07d2      	lsls	r2, r2, #31
 800a154:	d511      	bpl.n	800a17a <HAL_RNG_Init+0xc6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	07db      	lsls	r3, r3, #31
 800a15a:	d5f3      	bpl.n	800a144 <HAL_RNG_Init+0x90>
  hrng->State = HAL_RNG_STATE_READY;
 800a15c:	2201      	movs	r2, #1
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a15e:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800a160:	7262      	strb	r2, [r4, #9]
  return HAL_OK;
 800a162:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a164:	60e3      	str	r3, [r4, #12]
}
 800a166:	bd70      	pop	{r4, r5, r6, pc}
    hrng->Lock = HAL_UNLOCKED;
 800a168:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800a16a:	f7f6 fd79 	bl	8000c60 <HAL_RNG_MspInit>
 800a16e:	e7aa      	b.n	800a0c6 <HAL_RNG_Init+0x12>
        hrng->State = HAL_RNG_STATE_READY;
 800a170:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a172:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_READY;
 800a174:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a176:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 800a178:	e7db      	b.n	800a132 <HAL_RNG_Init+0x7e>
        hrng->State = HAL_RNG_STATE_ERROR;
 800a17a:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a17c:	2302      	movs	r3, #2
        hrng->State = HAL_RNG_STATE_ERROR;
 800a17e:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a180:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 800a182:	e7d6      	b.n	800a132 <HAL_RNG_Init+0x7e>
    return HAL_ERROR;
 800a184:	2001      	movs	r0, #1
}
 800a186:	4770      	bx	lr
 800a188:	bfff1fdf 	.word	0xbfff1fdf
 800a18c:	00f02d00 	.word	0x00f02d00

0800a190 <HAL_RTC_SetAlarm_IT>:
{
  uint32_t tmpreg = 0;
  uint32_t binary_mode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a190:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a194:	2b01      	cmp	r3, #1
 800a196:	f000 80dc 	beq.w	800a352 <HAL_RTC_SetAlarm_IT+0x1c2>
{
 800a19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800a19e:	2701      	movs	r7, #1

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1a0:	2402      	movs	r4, #2
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binary_mode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a1a2:	4b6d      	ldr	r3, [pc, #436]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
  __HAL_LOCK(hrtc);
 800a1a4:	f880 702c 	strb.w	r7, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1a8:	f880 402d 	strb.w	r4, [r0, #45]	@ 0x2d
 800a1ac:	4686      	mov	lr, r0
  binary_mode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a1ae:	68d8      	ldr	r0, [r3, #12]
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);

      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800a1b0:	698e      	ldr	r6, [r1, #24]
  binary_mode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a1b2:	f400 7040 	and.w	r0, r0, #768	@ 0x300
  if (binary_mode != RTC_BINARY_ONLY)
 800a1b6:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a1ba:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (binary_mode != RTC_BINARY_ONLY)
 800a1bc:	f000 80a3 	beq.w	800a306 <HAL_RTC_SetAlarm_IT+0x176>
    if (Format == RTC_FORMAT_BIN)
 800a1c0:	2a00      	cmp	r2, #0
 800a1c2:	d041      	beq.n	800a248 <HAL_RTC_SetAlarm_IT+0xb8>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a1c4:	699a      	ldr	r2, [r3, #24]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1c6:	6948      	ldr	r0, [r1, #20]
 800a1c8:	6a0b      	ldr	r3, [r1, #32]
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a1ca:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1ce:	ea43 0300 	orr.w	r3, r3, r0
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a1d2:	7888      	ldrb	r0, [r1, #2]
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a1d4:	bf18      	it	ne
 800a1d6:	78ca      	ldrbne	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1d8:	ea43 0300 	orr.w	r3, r3, r0
 800a1dc:	7808      	ldrb	r0, [r1, #0]
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a1de:	bf18      	it	ne
 800a1e0:	0592      	lslne	r2, r2, #22
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a1e6:	7848      	ldrb	r0, [r1, #1]
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a1e8:	bf08      	it	eq
 800a1ea:	70ca      	strbeq	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1ec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a1f0:	f891 0024 	ldrb.w	r0, [r1, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a1f4:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800a1fc:	ea43 0302 	orr.w	r3, r3, r2
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a200:	d077      	beq.n	800a2f2 <HAL_RTC_SetAlarm_IT+0x162>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a202:	2402      	movs	r4, #2
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a204:	4a54      	ldr	r2, [pc, #336]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
 800a206:	6990      	ldr	r0, [r2, #24]
 800a208:	f420 5008 	bic.w	r0, r0, #8704	@ 0x2200
 800a20c:	6190      	str	r0, [r2, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a20e:	65d4      	str	r4, [r2, #92]	@ 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800a210:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800a212:	64d6      	str	r6, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800a214:	684a      	ldr	r2, [r1, #4]
 800a216:	4b50      	ldr	r3, [pc, #320]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
 800a218:	675a      	str	r2, [r3, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 800a21a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800a21c:	2a01      	cmp	r2, #1
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 800a21e:	699a      	ldr	r2, [r3, #24]
 800a220:	bf0c      	ite	eq
 800a222:	f042 5280 	orreq.w	r2, r2, #268435456	@ 0x10000000
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBFCLR);
 800a226:	f022 5280 	bicne.w	r2, r2, #268435456	@ 0x10000000
 800a22a:	619a      	str	r2, [r3, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a22c:	4a4a      	ldr	r2, [pc, #296]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
 800a22e:	6993      	ldr	r3, [r2, #24]
 800a230:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800a234:	6193      	str	r3, [r2, #24]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a236:	2300      	movs	r3, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a238:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 800a23a:	f88e 302c 	strb.w	r3, [lr, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_READY;
 800a23e:	f88e 202d 	strb.w	r2, [lr, #45]	@ 0x2d

  return HAL_OK;
 800a242:	4618      	mov	r0, r3
}
 800a244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a248:	6998      	ldr	r0, [r3, #24]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a24a:	780b      	ldrb	r3, [r1, #0]
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a24c:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a250:	bf16      	itet	ne
 800a252:	78c8      	ldrbne	r0, [r1, #3]
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a254:	70c8      	strbeq	r0, [r1, #3]
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a256:	0580      	lslne	r0, r0, #22
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcd_high = 0U;
  uint8_t tmp_value = Value;

  while (tmp_value >= 10U)
 800a258:	2b09      	cmp	r3, #9
      if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800a25a:	6a0c      	ldr	r4, [r1, #32]
  while (tmp_value >= 10U)
 800a25c:	d909      	bls.n	800a272 <HAL_RTC_SetAlarm_IT+0xe2>
  uint32_t bcd_high = 0U;
 800a25e:	2700      	movs	r7, #0
  {
    bcd_high++;
    tmp_value -= 10U;
 800a260:	3b0a      	subs	r3, #10
 800a262:	b2db      	uxtb	r3, r3
  while (tmp_value >= 10U)
 800a264:	2b09      	cmp	r3, #9
    bcd_high++;
 800a266:	f107 0701 	add.w	r7, r7, #1
  while (tmp_value >= 10U)
 800a26a:	d8f9      	bhi.n	800a260 <HAL_RTC_SetAlarm_IT+0xd0>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a26c:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800a270:	b2db      	uxtb	r3, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a272:	ea4f 4c03 	mov.w	ip, r3, lsl #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a276:	784b      	ldrb	r3, [r1, #1]
  while (tmp_value >= 10U)
 800a278:	2b09      	cmp	r3, #9
 800a27a:	d909      	bls.n	800a290 <HAL_RTC_SetAlarm_IT+0x100>
  uint32_t bcd_high = 0U;
 800a27c:	2700      	movs	r7, #0
    tmp_value -= 10U;
 800a27e:	3b0a      	subs	r3, #10
 800a280:	b2db      	uxtb	r3, r3
  while (tmp_value >= 10U)
 800a282:	2b09      	cmp	r3, #9
    bcd_high++;
 800a284:	f107 0701 	add.w	r7, r7, #1
  while (tmp_value >= 10U)
 800a288:	d8f9      	bhi.n	800a27e <HAL_RTC_SetAlarm_IT+0xee>
  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a28a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800a28e:	b2db      	uxtb	r3, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a290:	f891 8002 	ldrb.w	r8, [r1, #2]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a294:	021b      	lsls	r3, r3, #8
  while (tmp_value >= 10U)
 800a296:	f1b8 0f09 	cmp.w	r8, #9
 800a29a:	d90d      	bls.n	800a2b8 <HAL_RTC_SetAlarm_IT+0x128>
  uint32_t bcd_high = 0U;
 800a29c:	2700      	movs	r7, #0
    tmp_value -= 10U;
 800a29e:	f1a8 080a 	sub.w	r8, r8, #10
 800a2a2:	fa5f f888 	uxtb.w	r8, r8
  while (tmp_value >= 10U)
 800a2a6:	f1b8 0f09 	cmp.w	r8, #9
    bcd_high++;
 800a2aa:	f107 0701 	add.w	r7, r7, #1
  while (tmp_value >= 10U)
 800a2ae:	d8f6      	bhi.n	800a29e <HAL_RTC_SetAlarm_IT+0x10e>
  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a2b0:	ea48 1707 	orr.w	r7, r8, r7, lsl #4
 800a2b4:	fa5f f887 	uxtb.w	r8, r7
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a2b8:	f891 7024 	ldrb.w	r7, [r1, #36]	@ 0x24
  while (tmp_value >= 10U)
 800a2bc:	2f09      	cmp	r7, #9
 800a2be:	d908      	bls.n	800a2d2 <HAL_RTC_SetAlarm_IT+0x142>
    tmp_value -= 10U;
 800a2c0:	3f0a      	subs	r7, #10
 800a2c2:	b2ff      	uxtb	r7, r7
  while (tmp_value >= 10U)
 800a2c4:	2f09      	cmp	r7, #9
    bcd_high++;
 800a2c6:	f102 0201 	add.w	r2, r2, #1
  while (tmp_value >= 10U)
 800a2ca:	d8f9      	bhi.n	800a2c0 <HAL_RTC_SetAlarm_IT+0x130>
  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a2cc:	ea47 1202 	orr.w	r2, r7, r2, lsl #4
 800a2d0:	b2d7      	uxtb	r7, r2
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a2d2:	694a      	ldr	r2, [r1, #20]
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a2d4:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a2d8:	ea44 0402 	orr.w	r4, r4, r2
 800a2dc:	ea44 0400 	orr.w	r4, r4, r0
 800a2e0:	ea44 040c 	orr.w	r4, r4, ip
 800a2e4:	ea43 0304 	orr.w	r3, r3, r4
 800a2e8:	ea43 0308 	orr.w	r3, r3, r8
 800a2ec:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a2f0:	d187      	bne.n	800a202 <HAL_RTC_SetAlarm_IT+0x72>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a2f2:	2401      	movs	r4, #1
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a2f4:	4a18      	ldr	r2, [pc, #96]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
 800a2f6:	6990      	ldr	r0, [r2, #24]
 800a2f8:	f420 5088 	bic.w	r0, r0, #4352	@ 0x1100
 800a2fc:	6190      	str	r0, [r2, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a2fe:	65d4      	str	r4, [r2, #92]	@ 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800a300:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800a302:	6456      	str	r6, [r2, #68]	@ 0x44
 800a304:	e013      	b.n	800a32e <HAL_RTC_SetAlarm_IT+0x19e>
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a306:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800a30a:	d008      	beq.n	800a31e <HAL_RTC_SetAlarm_IT+0x18e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a30c:	699a      	ldr	r2, [r3, #24]
 800a30e:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 800a312:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a314:	65dc      	str	r4, [r3, #92]	@ 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800a316:	69ca      	ldr	r2, [r1, #28]
 800a318:	4332      	orrs	r2, r6
 800a31a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a31c:	e77a      	b.n	800a214 <HAL_RTC_SetAlarm_IT+0x84>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a31e:	699a      	ldr	r2, [r3, #24]
 800a320:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800a324:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a326:	65df      	str	r7, [r3, #92]	@ 0x5c
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800a328:	69ca      	ldr	r2, [r1, #28]
 800a32a:	4332      	orrs	r2, r6
 800a32c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800a32e:	684a      	ldr	r2, [r1, #4]
 800a330:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
 800a332:	671a      	str	r2, [r3, #112]	@ 0x70
    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 800a334:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 800a336:	2a01      	cmp	r2, #1
      SET_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800a338:	699a      	ldr	r2, [r3, #24]
 800a33a:	bf0c      	ite	eq
 800a33c:	f042 6200 	orreq.w	r2, r2, #134217728	@ 0x8000000
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAFCLR);
 800a340:	f022 6200 	bicne.w	r2, r2, #134217728	@ 0x8000000
 800a344:	619a      	str	r2, [r3, #24]
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a346:	4a04      	ldr	r2, [pc, #16]	@ (800a358 <HAL_RTC_SetAlarm_IT+0x1c8>)
 800a348:	6993      	ldr	r3, [r2, #24]
 800a34a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800a34e:	6193      	str	r3, [r2, #24]
 800a350:	e771      	b.n	800a236 <HAL_RTC_SetAlarm_IT+0xa6>
  __HAL_LOCK(hrtc);
 800a352:	2002      	movs	r0, #2
}
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	46007800 	.word	0x46007800

0800a35c <HAL_RTC_DeactivateAlarm>:
  __HAL_LOCK(hrtc);
 800a35c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
{
 800a360:	4603      	mov	r3, r0
  __HAL_LOCK(hrtc);
 800a362:	2a01      	cmp	r2, #1
 800a364:	d021      	beq.n	800a3aa <HAL_RTC_DeactivateAlarm+0x4e>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a366:	2202      	movs	r2, #2
  __HAL_LOCK(hrtc);
 800a368:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a36a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a36e:	4a10      	ldr	r2, [pc, #64]	@ (800a3b0 <HAL_RTC_DeactivateAlarm+0x54>)
  __HAL_LOCK(hrtc);
 800a370:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c
  if (Alarm == RTC_ALARM_A)
 800a374:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a378:	6991      	ldr	r1, [r2, #24]
  if (Alarm == RTC_ALARM_A)
 800a37a:	d00e      	beq.n	800a39a <HAL_RTC_DeactivateAlarm+0x3e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a37c:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 800a380:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800a382:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 800a384:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a388:	64d1      	str	r1, [r2, #76]	@ 0x4c
  __HAL_UNLOCK(hrtc);
 800a38a:	2200      	movs	r2, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a38c:	2101      	movs	r1, #1
  return HAL_OK;
 800a38e:	4610      	mov	r0, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800a390:	f883 102d 	strb.w	r1, [r3, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 800a394:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  return HAL_OK;
 800a398:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a39a:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 800a39e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800a3a0:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800a3a2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a3a6:	6451      	str	r1, [r2, #68]	@ 0x44
 800a3a8:	e7ef      	b.n	800a38a <HAL_RTC_DeactivateAlarm+0x2e>
  __HAL_LOCK(hrtc);
 800a3aa:	2002      	movs	r0, #2
}
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	46007800 	.word	0x46007800

0800a3b4 <HAL_RTC_AlarmIRQHandler>:
{
 800a3b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = READ_REG(RTC->MISR);
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ec <HAL_RTC_AlarmIRQHandler+0x38>)
{
 800a3b8:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR);
 800a3ba:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800a3bc:	07ea      	lsls	r2, r5, #31
 800a3be:	d405      	bmi.n	800a3cc <HAL_RTC_AlarmIRQHandler+0x18>
  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a3c0:	07ab      	lsls	r3, r5, #30
 800a3c2:	d409      	bmi.n	800a3d8 <HAL_RTC_AlarmIRQHandler+0x24>
  hrtc->State = HAL_RTC_STATE_READY;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800a3d0:	f7f9 f90e 	bl	80035f0 <HAL_RTC_AlarmAEventCallback>
  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a3d4:	07ab      	lsls	r3, r5, #30
 800a3d6:	d5f5      	bpl.n	800a3c4 <HAL_RTC_AlarmIRQHandler+0x10>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a3d8:	2202      	movs	r2, #2
 800a3da:	4b04      	ldr	r3, [pc, #16]	@ (800a3ec <HAL_RTC_AlarmIRQHandler+0x38>)
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a3dc:	4620      	mov	r0, r4
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a3de:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a3e0:	f000 f900 	bl	800a5e4 <HAL_RTCEx_AlarmBEventCallback>
  hrtc->State = HAL_RTC_STATE_READY;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	46007800 	.word	0x46007800

0800a3f0 <RTC_ExitInitMode>:
{
 800a3f0:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a3f2:	4c26      	ldr	r4, [pc, #152]	@ (800a48c <RTC_ExitInitMode+0x9c>)
{
 800a3f4:	4605      	mov	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a3f6:	68e3      	ldr	r3, [r4, #12]
 800a3f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3fc:	60e3      	str	r3, [r4, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a3fe:	69a3      	ldr	r3, [r4, #24]
 800a400:	069e      	lsls	r6, r3, #26
 800a402:	d412      	bmi.n	800a42a <RTC_ExitInitMode+0x3a>
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a404:	68e3      	ldr	r3, [r4, #12]
 800a406:	f023 0320 	bic.w	r3, r3, #32
 800a40a:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 800a40c:	f7fd fc66 	bl	8007cdc <HAL_GetTick>
 800a410:	4606      	mov	r6, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a412:	e005      	b.n	800a420 <RTC_ExitInitMode+0x30>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a414:	f7fd fc62 	bl	8007cdc <HAL_GetTick>
 800a418:	1b83      	subs	r3, r0, r6
 800a41a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a41e:	d820      	bhi.n	800a462 <RTC_ExitInitMode+0x72>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a420:	68e3      	ldr	r3, [r4, #12]
 800a422:	0699      	lsls	r1, r3, #26
 800a424:	d5f6      	bpl.n	800a414 <RTC_ExitInitMode+0x24>
  HAL_StatusTypeDef status = HAL_OK;
 800a426:	2000      	movs	r0, #0
}
 800a428:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a42a:	69a3      	ldr	r3, [r4, #24]
 800a42c:	f023 0320 	bic.w	r3, r3, #32
 800a430:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	f023 0320 	bic.w	r3, r3, #32
 800a438:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick();
 800a43a:	f7fd fc4f 	bl	8007cdc <HAL_GetTick>
 800a43e:	4606      	mov	r6, r0
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a440:	e005      	b.n	800a44e <RTC_ExitInitMode+0x5e>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a442:	f7fd fc4b 	bl	8007cdc <HAL_GetTick>
 800a446:	1b83      	subs	r3, r0, r6
 800a448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a44c:	d813      	bhi.n	800a476 <RTC_ExitInitMode+0x86>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	069b      	lsls	r3, r3, #26
 800a452:	d5f6      	bpl.n	800a442 <RTC_ExitInitMode+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800a454:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a456:	4a0d      	ldr	r2, [pc, #52]	@ (800a48c <RTC_ExitInitMode+0x9c>)
 800a458:	6993      	ldr	r3, [r2, #24]
 800a45a:	f043 0320 	orr.w	r3, r3, #32
 800a45e:	6193      	str	r3, [r2, #24]
}
 800a460:	bd70      	pop	{r4, r5, r6, pc}
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a462:	68e3      	ldr	r3, [r4, #12]
 800a464:	0698      	lsls	r0, r3, #26
 800a466:	d4de      	bmi.n	800a426 <RTC_ExitInitMode+0x36>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a46e:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a472:	4618      	mov	r0, r3
}
 800a474:	bd70      	pop	{r4, r5, r6, pc}
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a476:	68e3      	ldr	r3, [r4, #12]
 800a478:	069a      	lsls	r2, r3, #26
 800a47a:	d4eb      	bmi.n	800a454 <RTC_ExitInitMode+0x64>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a482:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a484:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a488:	e7e5      	b.n	800a456 <RTC_ExitInitMode+0x66>
 800a48a:	bf00      	nop
 800a48c:	46007800 	.word	0x46007800

0800a490 <HAL_RTC_Init>:
  if (hrtc != NULL)
 800a490:	2800      	cmp	r0, #0
 800a492:	d042      	beq.n	800a51a <HAL_RTC_Init+0x8a>
{
 800a494:	b570      	push	{r4, r5, r6, lr}
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a496:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800a49a:	4604      	mov	r4, r0
 800a49c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d035      	beq.n	800a510 <HAL_RTC_Init+0x80>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a4a4:	2302      	movs	r3, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a4a6:	4d34      	ldr	r5, [pc, #208]	@ (800a578 <HAL_RTC_Init+0xe8>)
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a4a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a4ac:	68eb      	ldr	r3, [r5, #12]
 800a4ae:	06db      	lsls	r3, r3, #27
 800a4b0:	d504      	bpl.n	800a4bc <HAL_RTC_Init+0x2c>
      hrtc->State = HAL_RTC_STATE_READY;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800a4b8:	2000      	movs	r0, #0
}
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4bc:	2353      	movs	r3, #83	@ 0x53
 800a4be:	22ca      	movs	r2, #202	@ 0xca
 800a4c0:	626a      	str	r2, [r5, #36]	@ 0x24
 800a4c2:	626b      	str	r3, [r5, #36]	@ 0x24
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a4c4:	68eb      	ldr	r3, [r5, #12]
 800a4c6:	065e      	lsls	r6, r3, #25
 800a4c8:	d529      	bpl.n	800a51e <HAL_RTC_Init+0x8e>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a4ca:	4d2b      	ldr	r5, [pc, #172]	@ (800a578 <HAL_RTC_Init+0xe8>)
        status = RTC_ExitInitMode(hrtc);
 800a4cc:	4620      	mov	r0, r4
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a4ce:	69ab      	ldr	r3, [r5, #24]
 800a4d0:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a4d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4d8:	61ab      	str	r3, [r5, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a4da:	6922      	ldr	r2, [r4, #16]
 800a4dc:	6863      	ldr	r3, [r4, #4]
 800a4de:	69a9      	ldr	r1, [r5, #24]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	69a2      	ldr	r2, [r4, #24]
 800a4e4:	430b      	orrs	r3, r1
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	61ab      	str	r3, [r5, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a4ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800a4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4f2:	612b      	str	r3, [r5, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a4f4:	68ea      	ldr	r2, [r5, #12]
 800a4f6:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	@ 0x24
 800a4fa:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800a4fe:	430b      	orrs	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	60eb      	str	r3, [r5, #12]
        status = RTC_ExitInitMode(hrtc);
 800a504:	f7ff ff74 	bl	800a3f0 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800a508:	b340      	cbz	r0, 800a55c <HAL_RTC_Init+0xcc>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a50a:	23ff      	movs	r3, #255	@ 0xff
 800a50c:	626b      	str	r3, [r5, #36]	@ 0x24
}
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800a510:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 800a514:	f7f6 fbd2 	bl	8000cbc <HAL_RTC_MspInit>
 800a518:	e7c4      	b.n	800a4a4 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 800a51a:	2001      	movs	r0, #1
}
 800a51c:	4770      	bx	lr
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a51e:	68eb      	ldr	r3, [r5, #12]
 800a520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a524:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800a526:	f7fd fbd9 	bl	8007cdc <HAL_GetTick>
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a52a:	68eb      	ldr	r3, [r5, #12]
    tickstart = HAL_GetTick();
 800a52c:	4606      	mov	r6, r0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a52e:	0658      	lsls	r0, r3, #25
 800a530:	d4cb      	bmi.n	800a4ca <HAL_RTC_Init+0x3a>
 800a532:	e002      	b.n	800a53a <HAL_RTC_Init+0xaa>
 800a534:	68eb      	ldr	r3, [r5, #12]
 800a536:	0659      	lsls	r1, r3, #25
 800a538:	d4c7      	bmi.n	800a4ca <HAL_RTC_Init+0x3a>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a53a:	f7fd fbcf 	bl	8007cdc <HAL_GetTick>
 800a53e:	1b80      	subs	r0, r0, r6
 800a540:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a544:	d9f6      	bls.n	800a534 <HAL_RTC_Init+0xa4>
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a546:	4b0c      	ldr	r3, [pc, #48]	@ (800a578 <HAL_RTC_Init+0xe8>)
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	0652      	lsls	r2, r2, #25
 800a54c:	d4bd      	bmi.n	800a4ca <HAL_RTC_Init+0x3a>
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a54e:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a550:	22ff      	movs	r2, #255	@ 0xff
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a552:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a556:	68d9      	ldr	r1, [r3, #12]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a558:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
          MODIFY_REG(RTC->CR, \
 800a55c:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 800a560:	430b      	orrs	r3, r1
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a562:	21ff      	movs	r1, #255	@ 0xff
          MODIFY_REG(RTC->CR, \
 800a564:	69aa      	ldr	r2, [r5, #24]
 800a566:	6960      	ldr	r0, [r4, #20]
 800a568:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 800a56c:	4313      	orrs	r3, r2
 800a56e:	4303      	orrs	r3, r0
 800a570:	61ab      	str	r3, [r5, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a572:	6269      	str	r1, [r5, #36]	@ 0x24
    if (status == HAL_OK)
 800a574:	e79d      	b.n	800a4b2 <HAL_RTC_Init+0x22>
 800a576:	bf00      	nop
 800a578:	46007800 	.word	0x46007800

0800a57c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a57c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
{
 800a580:	4603      	mov	r3, r0
  __HAL_LOCK(hrtc);
 800a582:	2a01      	cmp	r2, #1
 800a584:	d010      	beq.n	800a5a8 <HAL_RTCEx_EnableBypassShadow+0x2c>

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a586:	2202      	movs	r2, #2

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a588:	2100      	movs	r1, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a58a:	f04f 0c01 	mov.w	ip, #1
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a58e:	4807      	ldr	r0, [pc, #28]	@ (800a5ac <HAL_RTCEx_EnableBypassShadow+0x30>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a590:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a594:	6982      	ldr	r2, [r0, #24]
 800a596:	f042 0220 	orr.w	r2, r2, #32
 800a59a:	6182      	str	r2, [r0, #24]

  return HAL_OK;
 800a59c:	4608      	mov	r0, r1
  hrtc->State = HAL_RTC_STATE_READY;
 800a59e:	f883 c02d 	strb.w	ip, [r3, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 800a5a2:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
  return HAL_OK;
 800a5a6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800a5a8:	2002      	movs	r0, #2
}
 800a5aa:	4770      	bx	lr
 800a5ac:	46007800 	.word	0x46007800

0800a5b0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5b0:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
{
 800a5b4:	4603      	mov	r3, r0
  __HAL_LOCK(hrtc);
 800a5b6:	2a01      	cmp	r2, #1
 800a5b8:	d010      	beq.n	800a5dc <HAL_RTCEx_SetSSRU_IT+0x2c>

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ba:	2202      	movs	r2, #2

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5bc:	2100      	movs	r1, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a5be:	f04f 0c01 	mov.w	ip, #1
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a5c2:	4807      	ldr	r0, [pc, #28]	@ (800a5e0 <HAL_RTCEx_SetSSRU_IT+0x30>)
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a5c8:	6982      	ldr	r2, [r0, #24]
 800a5ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a5ce:	6182      	str	r2, [r0, #24]

  return HAL_OK;
 800a5d0:	4608      	mov	r0, r1
  hrtc->State = HAL_RTC_STATE_READY;
 800a5d2:	f883 c02d 	strb.w	ip, [r3, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 800a5d6:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
  return HAL_OK;
 800a5da:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800a5dc:	2002      	movs	r0, #2
}
 800a5de:	4770      	bx	lr
 800a5e0:	46007800 	.word	0x46007800

0800a5e4 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop

0800a5e8 <HAL_RTCEx_BKUPWrite>:
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  /* Determine address of the specified Backup register */
  tmp = (uint32_t)(&(TAMP->BKP0R));
  tmp += (BackupRegister * 4U);
 800a5e8:	0089      	lsls	r1, r1, #2
 800a5ea:	f101 418c 	add.w	r1, r1, #1174405120	@ 0x46000000
 800a5ee:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00

  /* Write data in the specified register Backup register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a5f2:	600a      	str	r2, [r1, #0]
}
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop

0800a5f8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a5f8:	b430      	push	{r4, r5}
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a5fa:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a5fe:	4c0b      	ldr	r4, [pc, #44]	@ (800a62c <HAL_RTCEx_PrivilegeModeSet+0x34>)
 800a600:	432b      	orrs	r3, r5
 800a602:	61e3      	str	r3, [r4, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a604:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800a608:	4323      	orrs	r3, r4
 800a60a:	698c      	ldr	r4, [r1, #24]
 800a60c:	4a08      	ldr	r2, [pc, #32]	@ (800a630 <HAL_RTCEx_PrivilegeModeSet+0x38>)
 800a60e:	4323      	orrs	r3, r4
 800a610:	6253      	str	r3, [r2, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800a612:	6a13      	ldr	r3, [r2, #32]
 800a614:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 800a618:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800a61c:	4323      	orrs	r3, r4
 800a61e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
}
 800a622:	2000      	movs	r0, #0
 800a624:	bc30      	pop	{r4, r5}
  MODIFY_REG(TAMP->SECCFGR,
 800a626:	6213      	str	r3, [r2, #32]
}
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	46007800 	.word	0x46007800
 800a630:	46007c00 	.word	0x46007c00

0800a634 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop

0800a638 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a638:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a63a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a63c:	2b81      	cmp	r3, #129	@ 0x81
 800a63e:	d018      	beq.n	800a672 <UART_DMATransmitCplt+0x3a>
  {
    huart->TxXferCount = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	6802      	ldr	r2, [r0, #0]
 800a644:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a648:	f102 0308 	add.w	r3, r2, #8
 800a64c:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a654:	f102 0008 	add.w	r0, r2, #8
 800a658:	e840 3100 	strex	r1, r3, [r0]
 800a65c:	2900      	cmp	r1, #0
 800a65e:	d1f3      	bne.n	800a648 <UART_DMATransmitCplt+0x10>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a660:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a668:	e842 3100 	strex	r1, r3, [r2]
 800a66c:	2900      	cmp	r1, #0
 800a66e:	d1f7      	bne.n	800a660 <UART_DMATransmitCplt+0x28>
 800a670:	4770      	bx	lr
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800a672:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 800a676:	4718      	bx	r3

0800a678 <UART_DMATxHalfCplt>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a678:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800a67a:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 800a67e:	4718      	bx	r3

0800a680 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a680:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a682:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  huart->RxXferCount = 0U;
 800a684:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a688:	f8d0 20a4 	ldr.w	r2, [r0, #164]	@ 0xa4
  huart->TxXferCount = 0U;
 800a68c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  huart->ErrorCallback(huart);
 800a690:	4710      	bx	r2
 800a692:	bf00      	nop

0800a694 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a698:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800a69a:	f8b0 a060 	ldrh.w	sl, [r0, #96]	@ 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a69e:	f8d3 b01c 	ldr.w	fp, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6a2:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a6a4:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6a6:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800a6aa:	2a22      	cmp	r2, #34	@ 0x22
 800a6ac:	d005      	beq.n	800a6ba <UART_RxISR_8BIT_FIFOEN+0x26>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6ae:	699a      	ldr	r2, [r3, #24]
 800a6b0:	f042 0208 	orr.w	r2, r2, #8
 800a6b4:	619a      	str	r2, [r3, #24]
  }
}
 800a6b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6ba:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800a6be:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6c0:	f406 7680 	and.w	r6, r6, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6c4:	f005 0501 	and.w	r5, r5, #1
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d074      	beq.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0x122>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6cc:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6ce:	f04f 0904 	mov.w	r9, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6d2:	f04f 0802 	mov.w	r8, #2
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6d6:	f01b 0f20 	tst.w	fp, #32
 800a6da:	d06c      	beq.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0x122>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6dc:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6de:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6e2:	ea03 030a 	and.w	r3, r3, sl
 800a6e6:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800a6e8:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a6ec:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 800a6ee:	3a01      	subs	r2, #1
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr++;
 800a6f6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      isrflags = READ_REG(huart->Instance->ISR);
 800a6f8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      huart->pRxBuffPtr++;
 800a6fc:	3101      	adds	r1, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a6fe:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 800a702:	65a1      	str	r1, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a704:	d02b      	beq.n	800a75e <UART_RxISR_8BIT_FIFOEN+0xca>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a706:	f01b 0f01 	tst.w	fp, #1
 800a70a:	d008      	beq.n	800a71e <UART_RxISR_8BIT_FIFOEN+0x8a>
 800a70c:	b13e      	cbz	r6, 800a71e <UART_RxISR_8BIT_FIFOEN+0x8a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a70e:	2201      	movs	r2, #1
 800a710:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a712:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800a716:	f042 0201 	orr.w	r2, r2, #1
 800a71a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a71e:	f01b 0f02 	tst.w	fp, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a722:	f00b 0204 	and.w	r2, fp, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a726:	d069      	beq.n	800a7fc <UART_RxISR_8BIT_FIFOEN+0x168>
 800a728:	b185      	cbz	r5, 800a74c <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a72a:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a72e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800a732:	f041 0104 	orr.w	r1, r1, #4
 800a736:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a73a:	b13a      	cbz	r2, 800a74c <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a73c:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a740:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a74c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a750:	b12b      	cbz	r3, 800a75e <UART_RxISR_8BIT_FIFOEN+0xca>
          huart->ErrorCallback(huart);
 800a752:	4620      	mov	r0, r4
 800a754:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a758:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a75a:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 800a75e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800a762:	b29b      	uxth	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1b6      	bne.n	800a6d6 <UART_RxISR_8BIT_FIFOEN+0x42>
 800a768:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a76e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	e843 2100 	strex	r1, r2, [r3]
 800a776:	2900      	cmp	r1, #0
 800a778:	d1f7      	bne.n	800a76a <UART_RxISR_8BIT_FIFOEN+0xd6>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a77a:	483b      	ldr	r0, [pc, #236]	@ (800a868 <UART_RxISR_8BIT_FIFOEN+0x1d4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77c:	f103 0208 	add.w	r2, r3, #8
 800a780:	e852 2f00 	ldrex	r2, [r2]
 800a784:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	f103 0508 	add.w	r5, r3, #8
 800a78a:	e845 2100 	strex	r1, r2, [r5]
 800a78e:	2900      	cmp	r1, #0
 800a790:	d1f4      	bne.n	800a77c <UART_RxISR_8BIT_FIFOEN+0xe8>
        huart->RxState = HAL_UART_STATE_READY;
 800a792:	2020      	movs	r0, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a794:	4a35      	ldr	r2, [pc, #212]	@ (800a86c <UART_RxISR_8BIT_FIFOEN+0x1d8>)
        huart->RxState = HAL_UART_STATE_READY;
 800a796:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a79a:	4293      	cmp	r3, r2
        huart->RxISR = NULL;
 800a79c:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a79e:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7a0:	d002      	beq.n	800a7a8 <UART_RxISR_8BIT_FIFOEN+0x114>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	0211      	lsls	r1, r2, #8
 800a7a6:	d436      	bmi.n	800a816 <UART_RxISR_8BIT_FIFOEN+0x182>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a7aa:	2a01      	cmp	r2, #1
 800a7ac:	d044      	beq.n	800a838 <UART_RxISR_8BIT_FIFOEN+0x1a4>
          huart->RxCpltCallback(huart);
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800a7b4:	4798      	blx	r3
    rxdatacount = huart->RxXferCount;
 800a7b6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800a7ba:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f43f af7a 	beq.w	800a6b6 <UART_RxISR_8BIT_FIFOEN+0x22>
 800a7c2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	f67f af75 	bls.w	800a6b6 <UART_RxISR_8BIT_FIFOEN+0x22>
 800a7cc:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ce:	f103 0208 	add.w	r2, r3, #8
 800a7d2:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a7d6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	f103 0008 	add.w	r0, r3, #8
 800a7de:	e840 2100 	strex	r1, r2, [r0]
 800a7e2:	2900      	cmp	r1, #0
 800a7e4:	d1f3      	bne.n	800a7ce <UART_RxISR_8BIT_FIFOEN+0x13a>
      huart->RxISR = UART_RxISR_8BIT;
 800a7e6:	4a22      	ldr	r2, [pc, #136]	@ (800a870 <UART_RxISR_8BIT_FIFOEN+0x1dc>)
 800a7e8:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ea:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7ee:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	e843 2100 	strex	r1, r2, [r3]
 800a7f6:	2900      	cmp	r1, #0
 800a7f8:	d1f7      	bne.n	800a7ea <UART_RxISR_8BIT_FIFOEN+0x156>
 800a7fa:	e75c      	b.n	800a6b6 <UART_RxISR_8BIT_FIFOEN+0x22>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	d0a5      	beq.n	800a74c <UART_RxISR_8BIT_FIFOEN+0xb8>
 800a800:	2d00      	cmp	r5, #0
 800a802:	d0a3      	beq.n	800a74c <UART_RxISR_8BIT_FIFOEN+0xb8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a804:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a808:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a80c:	f043 0302 	orr.w	r3, r3, #2
 800a810:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800a814:	e79a      	b.n	800a74c <UART_RxISR_8BIT_FIFOEN+0xb8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a81a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	e843 2100 	strex	r1, r2, [r3]
 800a822:	2900      	cmp	r1, #0
 800a824:	d0c0      	beq.n	800a7a8 <UART_RxISR_8BIT_FIFOEN+0x114>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	e853 2f00 	ldrex	r2, [r3]
 800a82a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	e843 2100 	strex	r1, r2, [r3]
 800a832:	2900      	cmp	r1, #0
 800a834:	d1ef      	bne.n	800a816 <UART_RxISR_8BIT_FIFOEN+0x182>
 800a836:	e7b7      	b.n	800a7a8 <UART_RxISR_8BIT_FIFOEN+0x114>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a838:	2200      	movs	r2, #0
 800a83a:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a840:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	e843 2100 	strex	r1, r2, [r3]
 800a848:	2900      	cmp	r1, #0
 800a84a:	d1f7      	bne.n	800a83c <UART_RxISR_8BIT_FIFOEN+0x1a8>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a84c:	69da      	ldr	r2, [r3, #28]
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a84e:	4620      	mov	r0, r4
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a850:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a852:	bf48      	it	mi
 800a854:	2210      	movmi	r2, #16
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a856:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a85a:	bf48      	it	mi
 800a85c:	621a      	strmi	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a85e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 800a862:	4798      	blx	r3
 800a864:	e7a7      	b.n	800a7b6 <UART_RxISR_8BIT_FIFOEN+0x122>
 800a866:	bf00      	nop
 800a868:	effffffe 	.word	0xeffffffe
 800a86c:	46002400 	.word	0x46002400
 800a870:	0800abd5 	.word	0x0800abd5

0800a874 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a878:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800a87a:	f8b0 a060 	ldrh.w	sl, [r0, #96]	@ 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a87e:	f8d3 b01c 	ldr.w	fp, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a882:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a884:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a886:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800a88a:	2a22      	cmp	r2, #34	@ 0x22
 800a88c:	d005      	beq.n	800a89a <UART_RxISR_16BIT_FIFOEN+0x26>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a88e:	699a      	ldr	r2, [r3, #24]
 800a890:	f042 0208 	orr.w	r2, r2, #8
 800a894:	619a      	str	r2, [r3, #24]
  }
}
 800a896:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a89a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 800a89e:	4604      	mov	r4, r0
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8a0:	f406 7680 	and.w	r6, r6, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8a4:	f005 0501 	and.w	r5, r5, #1
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d072      	beq.n	800a992 <UART_RxISR_16BIT_FIFOEN+0x11e>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	2700      	movs	r7, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a8ae:	f04f 0904 	mov.w	r9, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a8b2:	f04f 0802 	mov.w	r8, #2
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a8b6:	f01b 0f20 	tst.w	fp, #32
 800a8ba:	d06a      	beq.n	800a992 <UART_RxISR_16BIT_FIFOEN+0x11e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8bc:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a8be:	6da1      	ldr	r1, [r4, #88]	@ 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a8c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800a8c2:	ea0a 0202 	and.w	r2, sl, r2
 800a8c6:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 800a8ca:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 800a8ce:	65a1      	str	r1, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800a8d0:	3a01      	subs	r2, #1
 800a8d2:	b292      	uxth	r2, r2
 800a8d4:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a8d8:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a8dc:	f01b 0f07 	tst.w	fp, #7
 800a8e0:	d02b      	beq.n	800a93a <UART_RxISR_16BIT_FIFOEN+0xc6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8e2:	f01b 0f01 	tst.w	fp, #1
 800a8e6:	d008      	beq.n	800a8fa <UART_RxISR_16BIT_FIFOEN+0x86>
 800a8e8:	b13e      	cbz	r6, 800a8fa <UART_RxISR_16BIT_FIFOEN+0x86>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8ee:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800a8f2:	f042 0201 	orr.w	r2, r2, #1
 800a8f6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8fa:	f01b 0f02 	tst.w	fp, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8fe:	f00b 0204 	and.w	r2, fp, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a902:	d069      	beq.n	800a9d8 <UART_RxISR_16BIT_FIFOEN+0x164>
 800a904:	b185      	cbz	r5, 800a928 <UART_RxISR_16BIT_FIFOEN+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a906:	f8c3 8020 	str.w	r8, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a90a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800a90e:	f041 0104 	orr.w	r1, r1, #4
 800a912:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a916:	b13a      	cbz	r2, 800a928 <UART_RxISR_16BIT_FIFOEN+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a918:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a91c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a920:	f043 0302 	orr.w	r3, r3, #2
 800a924:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a928:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a92c:	b12b      	cbz	r3, 800a93a <UART_RxISR_16BIT_FIFOEN+0xc6>
          huart->ErrorCallback(huart);
 800a92e:	4620      	mov	r0, r4
 800a930:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a934:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a936:	f8c4 7090 	str.w	r7, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 800a93a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800a93e:	b29b      	uxth	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1b8      	bne.n	800a8b6 <UART_RxISR_16BIT_FIFOEN+0x42>
 800a944:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a94a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	e843 2100 	strex	r1, r2, [r3]
 800a952:	2900      	cmp	r1, #0
 800a954:	d1f7      	bne.n	800a946 <UART_RxISR_16BIT_FIFOEN+0xd2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a956:	483b      	ldr	r0, [pc, #236]	@ (800aa44 <UART_RxISR_16BIT_FIFOEN+0x1d0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	f103 0208 	add.w	r2, r3, #8
 800a95c:	e852 2f00 	ldrex	r2, [r2]
 800a960:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	f103 0508 	add.w	r5, r3, #8
 800a966:	e845 2100 	strex	r1, r2, [r5]
 800a96a:	2900      	cmp	r1, #0
 800a96c:	d1f4      	bne.n	800a958 <UART_RxISR_16BIT_FIFOEN+0xe4>
        huart->RxState = HAL_UART_STATE_READY;
 800a96e:	2020      	movs	r0, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a970:	4a35      	ldr	r2, [pc, #212]	@ (800aa48 <UART_RxISR_16BIT_FIFOEN+0x1d4>)
        huart->RxState = HAL_UART_STATE_READY;
 800a972:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a976:	4293      	cmp	r3, r2
        huart->RxISR = NULL;
 800a978:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a97a:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a97c:	d002      	beq.n	800a984 <UART_RxISR_16BIT_FIFOEN+0x110>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	0211      	lsls	r1, r2, #8
 800a982:	d436      	bmi.n	800a9f2 <UART_RxISR_16BIT_FIFOEN+0x17e>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a984:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800a986:	2a01      	cmp	r2, #1
 800a988:	d044      	beq.n	800aa14 <UART_RxISR_16BIT_FIFOEN+0x1a0>
          huart->RxCpltCallback(huart);
 800a98a:	4620      	mov	r0, r4
 800a98c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800a990:	4798      	blx	r3
    rxdatacount = huart->RxXferCount;
 800a992:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800a996:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f43f af7c 	beq.w	800a896 <UART_RxISR_16BIT_FIFOEN+0x22>
 800a99e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	f67f af77 	bls.w	800a896 <UART_RxISR_16BIT_FIFOEN+0x22>
 800a9a8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	f103 0208 	add.w	r2, r3, #8
 800a9ae:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9b2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	f103 0008 	add.w	r0, r3, #8
 800a9ba:	e840 2100 	strex	r1, r2, [r0]
 800a9be:	2900      	cmp	r1, #0
 800a9c0:	d1f3      	bne.n	800a9aa <UART_RxISR_16BIT_FIFOEN+0x136>
      huart->RxISR = UART_RxISR_16BIT;
 800a9c2:	4a22      	ldr	r2, [pc, #136]	@ (800aa4c <UART_RxISR_16BIT_FIFOEN+0x1d8>)
 800a9c4:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9ca:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	e843 2100 	strex	r1, r2, [r3]
 800a9d2:	2900      	cmp	r1, #0
 800a9d4:	d1f7      	bne.n	800a9c6 <UART_RxISR_16BIT_FIFOEN+0x152>
 800a9d6:	e75e      	b.n	800a896 <UART_RxISR_16BIT_FIFOEN+0x22>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d0a5      	beq.n	800a928 <UART_RxISR_16BIT_FIFOEN+0xb4>
 800a9dc:	2d00      	cmp	r5, #0
 800a9de:	d0a3      	beq.n	800a928 <UART_RxISR_16BIT_FIFOEN+0xb4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9e0:	f8c3 9020 	str.w	r9, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800a9e8:	f043 0302 	orr.w	r3, r3, #2
 800a9ec:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800a9f0:	e79a      	b.n	800a928 <UART_RxISR_16BIT_FIFOEN+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9f6:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	e843 2100 	strex	r1, r2, [r3]
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d0c0      	beq.n	800a984 <UART_RxISR_16BIT_FIFOEN+0x110>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa02:	e853 2f00 	ldrex	r2, [r3]
 800aa06:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	e843 2100 	strex	r1, r2, [r3]
 800aa0e:	2900      	cmp	r1, #0
 800aa10:	d1ef      	bne.n	800a9f2 <UART_RxISR_16BIT_FIFOEN+0x17e>
 800aa12:	e7b7      	b.n	800a984 <UART_RxISR_16BIT_FIFOEN+0x110>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa14:	2200      	movs	r2, #0
 800aa16:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa1c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	e843 2100 	strex	r1, r2, [r3]
 800aa24:	2900      	cmp	r1, #0
 800aa26:	d1f7      	bne.n	800aa18 <UART_RxISR_16BIT_FIFOEN+0x1a4>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa28:	69da      	ldr	r2, [r3, #28]
          huart->RxEventCallback(huart, huart->RxXferSize);
 800aa2a:	4620      	mov	r0, r4
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aa2c:	06d2      	lsls	r2, r2, #27
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa2e:	bf48      	it	mi
 800aa30:	2210      	movmi	r2, #16
          huart->RxEventCallback(huart, huart->RxXferSize);
 800aa32:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa36:	bf48      	it	mi
 800aa38:	621a      	strmi	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 800aa3a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 800aa3e:	4798      	blx	r3
 800aa40:	e7a7      	b.n	800a992 <UART_RxISR_16BIT_FIFOEN+0x11e>
 800aa42:	bf00      	nop
 800aa44:	effffffe 	.word	0xeffffffe
 800aa48:	46002400 	.word	0x46002400
 800aa4c:	0800ac19 	.word	0x0800ac19

0800aa50 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa50:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800aa54:	2b21      	cmp	r3, #33	@ 0x21
 800aa56:	d000      	beq.n	800aa5a <UART_TxISR_16BIT+0xa>
}
 800aa58:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800aa5a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aa5e:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	b983      	cbnz	r3, 800aa86 <UART_TxISR_16BIT+0x36>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aa68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	e842 3100 	strex	r1, r3, [r2]
 800aa70:	2900      	cmp	r1, #0
 800aa72:	d1f7      	bne.n	800aa64 <UART_TxISR_16BIT+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa74:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	e842 3100 	strex	r1, r3, [r2]
 800aa80:	2900      	cmp	r1, #0
 800aa82:	d1f7      	bne.n	800aa74 <UART_TxISR_16BIT+0x24>
 800aa84:	4770      	bx	lr
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aa86:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800aa88:	f831 3b02 	ldrh.w	r3, [r1], #2
 800aa8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa90:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800aa92:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
      huart->pTxBuffPtr += 2U;
 800aa96:	6501      	str	r1, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
}
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop

0800aaa4 <UART_TxISR_16BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aaa4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800aaa8:	2b21      	cmp	r3, #33	@ 0x21
 800aaaa:	d000      	beq.n	800aaae <UART_TxISR_16BIT_FIFOEN+0xa>
 800aaac:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aaae:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0fa      	beq.n	800aaac <UART_TxISR_16BIT_FIFOEN+0x8>
{
 800aab6:	b410      	push	{r4}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800aab8:	6801      	ldr	r1, [r0, #0]
      if (huart->TxXferCount == 0U)
 800aaba:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aabe:	3b01      	subs	r3, #1
      if (huart->TxXferCount == 0U)
 800aac0:	b292      	uxth	r2, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aac2:	b29b      	uxth	r3, r3
      if (huart->TxXferCount == 0U)
 800aac4:	b1a2      	cbz	r2, 800aaf0 <UART_TxISR_16BIT_FIFOEN+0x4c>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800aac6:	69ca      	ldr	r2, [r1, #28]
 800aac8:	0612      	lsls	r2, r2, #24
 800aaca:	d50c      	bpl.n	800aae6 <UART_TxISR_16BIT_FIFOEN+0x42>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aacc:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800aace:	f834 2b02 	ldrh.w	r2, [r4], #2
 800aad2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aad6:	628a      	str	r2, [r1, #40]	@ 0x28
        huart->TxXferCount--;
 800aad8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
        huart->pTxBuffPtr += 2U;
 800aadc:	6504      	str	r4, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 800aade:	3a01      	subs	r2, #1
 800aae0:	b292      	uxth	r2, r2
 800aae2:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1e7      	bne.n	800aaba <UART_TxISR_16BIT_FIFOEN+0x16>
}
 800aaea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaee:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf0:	f101 0308 	add.w	r3, r1, #8
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aaf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafc:	f101 0008 	add.w	r0, r1, #8
 800ab00:	e840 3200 	strex	r2, r3, [r0]
 800ab04:	2a00      	cmp	r2, #0
 800ab06:	d1f3      	bne.n	800aaf0 <UART_TxISR_16BIT_FIFOEN+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	e851 3f00 	ldrex	r3, [r1]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	e841 3200 	strex	r2, r3, [r1]
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	d0e8      	beq.n	800aaea <UART_TxISR_16BIT_FIFOEN+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	e851 3f00 	ldrex	r3, [r1]
 800ab1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab20:	e841 3200 	strex	r2, r3, [r1]
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	d1ef      	bne.n	800ab08 <UART_TxISR_16BIT_FIFOEN+0x64>
 800ab28:	e7df      	b.n	800aaea <UART_TxISR_16BIT_FIFOEN+0x46>
 800ab2a:	bf00      	nop

0800ab2c <UART_RxISR_16BIT.part.0>:
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 800ab2c:	b410      	push	{r4}
 800ab2e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab30:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab34:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	e843 2100 	strex	r1, r2, [r3]
 800ab3c:	2900      	cmp	r1, #0
 800ab3e:	d1f7      	bne.n	800ab30 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	f103 0208 	add.w	r2, r3, #8
 800ab44:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab48:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	f103 0408 	add.w	r4, r3, #8
 800ab50:	e844 2100 	strex	r1, r2, [r4]
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d1f3      	bne.n	800ab40 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxState = HAL_UART_STATE_READY;
 800ab58:	2420      	movs	r4, #32
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab5a:	4a1d      	ldr	r2, [pc, #116]	@ (800abd0 <UART_RxISR_16BIT.part.0+0xa4>)
      huart->RxState = HAL_UART_STATE_READY;
 800ab5c:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab60:	4293      	cmp	r3, r2
      huart->RxISR = NULL;
 800ab62:	6741      	str	r1, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab64:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab66:	d002      	beq.n	800ab6e <UART_RxISR_16BIT.part.0+0x42>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	0211      	lsls	r1, r2, #8
 800ab6c:	d407      	bmi.n	800ab7e <UART_RxISR_16BIT.part.0+0x52>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab6e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800ab70:	2a01      	cmp	r2, #1
 800ab72:	d015      	beq.n	800aba0 <UART_RxISR_16BIT.part.0+0x74>
        huart->RxCpltCallback(huart);
 800ab74:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
}
 800ab78:	f85d 4b04 	ldr.w	r4, [sp], #4
        huart->RxCpltCallback(huart);
 800ab7c:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab82:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	e843 2100 	strex	r1, r2, [r3]
 800ab8a:	2900      	cmp	r1, #0
 800ab8c:	d0ef      	beq.n	800ab6e <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	e853 2f00 	ldrex	r2, [r3]
 800ab92:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	e843 2100 	strex	r1, r2, [r3]
 800ab9a:	2900      	cmp	r1, #0
 800ab9c:	d1ef      	bne.n	800ab7e <UART_RxISR_16BIT.part.0+0x52>
 800ab9e:	e7e6      	b.n	800ab6e <UART_RxISR_16BIT.part.0+0x42>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba0:	2200      	movs	r2, #0
 800aba2:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aba8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	e843 2100 	strex	r1, r2, [r3]
 800abb0:	2900      	cmp	r1, #0
 800abb2:	d1f7      	bne.n	800aba4 <UART_RxISR_16BIT.part.0+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abb4:	69da      	ldr	r2, [r3, #28]
        huart->RxEventCallback(huart, huart->RxXferSize);
 800abb6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abba:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abbc:	bf48      	it	mi
 800abbe:	2210      	movmi	r2, #16
}
 800abc0:	f85d 4b04 	ldr.w	r4, [sp], #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abc4:	bf48      	it	mi
 800abc6:	621a      	strmi	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 800abc8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	@ 0xbc
 800abcc:	4718      	bx	r3
 800abce:	bf00      	nop
 800abd0:	46002400 	.word	0x46002400

0800abd4 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abd4:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800abd8:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abdc:	2922      	cmp	r1, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abde:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abe0:	d004      	beq.n	800abec <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abe2:	6993      	ldr	r3, [r2, #24]
 800abe4:	f043 0308 	orr.w	r3, r3, #8
 800abe8:	6193      	str	r3, [r2, #24]
}
 800abea:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abee:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800abf0:	ea02 020c 	and.w	r2, r2, ip
 800abf4:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800abf6:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 800abfa:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800abfc:	3a01      	subs	r2, #1
 800abfe:	b292      	uxth	r2, r2
 800ac00:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800ac04:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 800ac08:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 800ac0a:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800ac0c:	6581      	str	r1, [r0, #88]	@ 0x58
    if (huart->RxXferCount == 0U)
 800ac0e:	2a00      	cmp	r2, #0
 800ac10:	d1eb      	bne.n	800abea <UART_RxISR_8BIT+0x16>
 800ac12:	f7ff bf8b 	b.w	800ab2c <UART_RxISR_16BIT.part.0>
 800ac16:	bf00      	nop

0800ac18 <UART_RxISR_16BIT>:
{
 800ac18:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac1a:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800ac1e:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac22:	2c22      	cmp	r4, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac24:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac26:	d006      	beq.n	800ac36 <UART_RxISR_16BIT+0x1e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac28:	6993      	ldr	r3, [r2, #24]
 800ac2a:	f043 0308 	orr.w	r3, r3, #8
 800ac2e:	6193      	str	r3, [r2, #24]
}
 800ac30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac34:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800ac38:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 800ac3a:	4011      	ands	r1, r2
 800ac3c:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 800ac40:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 800ac44:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800ac46:	3a01      	subs	r2, #1
 800ac48:	b292      	uxth	r2, r2
 800ac4a:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 800ac4e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1eb      	bne.n	800ac30 <UART_RxISR_16BIT+0x18>
}
 800ac58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac5c:	f7ff bf66 	b.w	800ab2c <UART_RxISR_16BIT.part.0>

0800ac60 <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop

0800ac64 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop

0800ac68 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop

0800ac6c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop

0800ac70 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop

0800ac74 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop

0800ac78 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop

0800ac7c <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop

0800ac80 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac80:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800ac84:	2b21      	cmp	r3, #33	@ 0x21
 800ac86:	d000      	beq.n	800ac8a <UART_TxISR_8BIT+0xa>
}
 800ac88:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800ac8a:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ac8e:	6802      	ldr	r2, [r0, #0]
    if (huart->TxXferCount == 0U)
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	b983      	cbnz	r3, 800acb6 <UART_TxISR_8BIT+0x36>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ac98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	e842 3100 	strex	r1, r3, [r2]
 800aca0:	2900      	cmp	r1, #0
 800aca2:	d1f7      	bne.n	800ac94 <UART_TxISR_8BIT+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acac:	e842 3100 	strex	r1, r3, [r2]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	d1f7      	bne.n	800aca4 <UART_TxISR_8BIT+0x24>
 800acb4:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800acb6:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800acb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acbc:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800acbe:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
      huart->pTxBuffPtr++;
 800acc2:	6501      	str	r1, [r0, #80]	@ 0x50
      huart->TxXferCount--;
 800acc4:	3b01      	subs	r3, #1
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
}
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop

0800acd0 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acd0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800acd4:	2b21      	cmp	r3, #33	@ 0x21
 800acd6:	d000      	beq.n	800acda <UART_TxISR_8BIT_FIFOEN+0xa>
 800acd8:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800acda:	f8b0 306a 	ldrh.w	r3, [r0, #106]	@ 0x6a
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0fa      	beq.n	800acd8 <UART_TxISR_8BIT_FIFOEN+0x8>
{
 800ace2:	b410      	push	{r4}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ace4:	6801      	ldr	r1, [r0, #0]
      if (huart->TxXferCount == 0U)
 800ace6:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800acea:	3b01      	subs	r3, #1
      if (huart->TxXferCount == 0U)
 800acec:	b292      	uxth	r2, r2
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800acee:	b29b      	uxth	r3, r3
      if (huart->TxXferCount == 0U)
 800acf0:	b192      	cbz	r2, 800ad18 <UART_TxISR_8BIT_FIFOEN+0x48>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800acf2:	69ca      	ldr	r2, [r1, #28]
 800acf4:	0612      	lsls	r2, r2, #24
 800acf6:	d50a      	bpl.n	800ad0e <UART_TxISR_8BIT_FIFOEN+0x3e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800acf8:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 800acfa:	f814 2b01 	ldrb.w	r2, [r4], #1
 800acfe:	628a      	str	r2, [r1, #40]	@ 0x28
        huart->TxXferCount--;
 800ad00:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
        huart->pTxBuffPtr++;
 800ad04:	6504      	str	r4, [r0, #80]	@ 0x50
        huart->TxXferCount--;
 800ad06:	3a01      	subs	r2, #1
 800ad08:	b292      	uxth	r2, r2
 800ad0a:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d1e9      	bne.n	800ace6 <UART_TxISR_8BIT_FIFOEN+0x16>
}
 800ad12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad16:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	f101 0308 	add.w	r3, r1, #8
 800ad1c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ad20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	f101 0008 	add.w	r0, r1, #8
 800ad28:	e840 3200 	strex	r2, r3, [r0]
 800ad2c:	2a00      	cmp	r2, #0
 800ad2e:	d1f3      	bne.n	800ad18 <UART_TxISR_8BIT_FIFOEN+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	e851 3f00 	ldrex	r3, [r1]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	e841 3200 	strex	r2, r3, [r1]
 800ad3c:	2a00      	cmp	r2, #0
 800ad3e:	d0e8      	beq.n	800ad12 <UART_TxISR_8BIT_FIFOEN+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad40:	e851 3f00 	ldrex	r3, [r1]
 800ad44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad48:	e841 3200 	strex	r2, r3, [r1]
 800ad4c:	2a00      	cmp	r2, #0
 800ad4e:	d1ef      	bne.n	800ad30 <UART_TxISR_8BIT_FIFOEN+0x60>
 800ad50:	e7df      	b.n	800ad12 <UART_TxISR_8BIT_FIFOEN+0x42>
 800ad52:	bf00      	nop

0800ad54 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad54:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
{
 800ad56:	b410      	push	{r4}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad58:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad5a:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad5e:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	0612      	lsls	r2, r2, #24
 800ad66:	d501      	bpl.n	800ad6c <UART_DMAError+0x18>
 800ad68:	2921      	cmp	r1, #33	@ 0x21
 800ad6a:	d00f      	beq.n	800ad8c <UART_DMAError+0x38>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	0652      	lsls	r2, r2, #25
 800ad70:	d501      	bpl.n	800ad76 <UART_DMAError+0x22>
 800ad72:	2c22      	cmp	r4, #34	@ 0x22
 800ad74:	d025      	beq.n	800adc2 <UART_DMAError+0x6e>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad76:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
  huart->ErrorCallback(huart);
 800ad7a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	@ 0xa4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad7e:	f043 0310 	orr.w	r3, r3, #16
}
 800ad82:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad86:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->ErrorCallback(huart);
 800ad8a:	4710      	bx	r2
    huart->TxXferCount = 0U;
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad92:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ad96:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	e843 2100 	strex	r1, r2, [r3]
 800ad9e:	2900      	cmp	r1, #0
 800ada0:	d1f7      	bne.n	800ad92 <UART_DMAError+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	f103 0208 	add.w	r2, r3, #8
 800ada6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800adaa:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	f103 0c08 	add.w	ip, r3, #8
 800adb2:	e84c 2100 	strex	r1, r2, [ip]
 800adb6:	2900      	cmp	r1, #0
 800adb8:	d1f3      	bne.n	800ada2 <UART_DMAError+0x4e>
  huart->gState = HAL_UART_STATE_READY;
 800adba:	2220      	movs	r2, #32
 800adbc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 800adc0:	e7d4      	b.n	800ad6c <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adcc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add0:	e843 2100 	strex	r1, r2, [r3]
 800add4:	2900      	cmp	r1, #0
 800add6:	d1f7      	bne.n	800adc8 <UART_DMAError+0x74>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800add8:	4c13      	ldr	r4, [pc, #76]	@ (800ae28 <UART_DMAError+0xd4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	f103 0208 	add.w	r2, r3, #8
 800adde:	e852 2f00 	ldrex	r2, [r2]
 800ade2:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	f103 0c08 	add.w	ip, r3, #8
 800ade8:	e84c 2100 	strex	r1, r2, [ip]
 800adec:	2900      	cmp	r1, #0
 800adee:	d1f4      	bne.n	800adda <UART_DMAError+0x86>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adf0:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800adf2:	2a01      	cmp	r2, #1
 800adf4:	d006      	beq.n	800ae04 <UART_DMAError+0xb0>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800adf8:	2220      	movs	r2, #32
  huart->RxISR = NULL;
 800adfa:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800adfc:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae00:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 800ae02:	e7b8      	b.n	800ad76 <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae08:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0c:	e843 2100 	strex	r1, r2, [r3]
 800ae10:	2900      	cmp	r1, #0
 800ae12:	d0f0      	beq.n	800adf6 <UART_DMAError+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	e853 2f00 	ldrex	r2, [r3]
 800ae18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1c:	e843 2100 	strex	r1, r2, [r3]
 800ae20:	2900      	cmp	r1, #0
 800ae22:	d1ef      	bne.n	800ae04 <UART_DMAError+0xb0>
 800ae24:	e7e7      	b.n	800adf6 <UART_DMAError+0xa2>
 800ae26:	bf00      	nop
 800ae28:	effffffe 	.word	0xeffffffe

0800ae2c <HAL_UART_DeInit>:
  if (huart == NULL)
 800ae2c:	b320      	cbz	r0, 800ae78 <HAL_UART_DeInit+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800ae2e:	2124      	movs	r1, #36	@ 0x24
  huart->Instance->CR1 = 0x0U;
 800ae30:	2200      	movs	r2, #0
{
 800ae32:	b538      	push	{r3, r4, r5, lr}
  __HAL_UART_DISABLE(huart);
 800ae34:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ae36:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800ae3a:	6819      	ldr	r1, [r3, #0]
  if (huart->MspDeInitCallback == NULL)
 800ae3c:	f8d0 50c4 	ldr.w	r5, [r0, #196]	@ 0xc4
  __HAL_UART_DISABLE(huart);
 800ae40:	f021 0101 	bic.w	r1, r1, #1
 800ae44:	6019      	str	r1, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800ae46:	4604      	mov	r4, r0
 800ae48:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800ae4a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800ae4c:	609a      	str	r2, [r3, #8]
  if (huart->MspDeInitCallback == NULL)
 800ae4e:	b175      	cbz	r5, 800ae6e <HAL_UART_DeInit+0x42>
  huart->MspDeInitCallback(huart);
 800ae50:	4620      	mov	r0, r4
 800ae52:	47a8      	blx	r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae54:	2300      	movs	r3, #0
  __HAL_UNLOCK(huart);
 800ae56:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae5a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  return HAL_OK;
 800ae5e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_RESET;
 800ae60:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800ae64:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae68:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae6a:	6723      	str	r3, [r4, #112]	@ 0x70
}
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 800ae6e:	4b03      	ldr	r3, [pc, #12]	@ (800ae7c <HAL_UART_DeInit+0x50>)
 800ae70:	461d      	mov	r5, r3
 800ae72:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4
 800ae76:	e7eb      	b.n	800ae50 <HAL_UART_DeInit+0x24>
    return HAL_ERROR;
 800ae78:	2001      	movs	r0, #1
}
 800ae7a:	4770      	bx	lr
 800ae7c:	08000eb1 	.word	0x08000eb1

0800ae80 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800ae80:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800ae84:	2b20      	cmp	r3, #32
 800ae86:	d125      	bne.n	800aed4 <HAL_UART_Transmit_IT+0x54>
    if ((pData == NULL) || (Size == 0U))
 800ae88:	b101      	cbz	r1, 800ae8c <HAL_UART_Transmit_IT+0xc>
 800ae8a:	b90a      	cbnz	r2, 800ae90 <HAL_UART_Transmit_IT+0x10>
      return HAL_ERROR;
 800ae8c:	2001      	movs	r0, #1
}
 800ae8e:	4770      	bx	lr
{
 800ae90:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae92:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae94:	2421      	movs	r4, #33	@ 0x21
    huart->TxXferCount = Size;
 800ae96:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    huart->TxXferSize  = Size;
 800ae9a:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ae9e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aea0:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aea4:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aea8:	6883      	ldr	r3, [r0, #8]
    huart->pTxBuffPtr  = pData;
 800aeaa:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aeac:	f8c0 4088 	str.w	r4, [r0, #136]	@ 0x88
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800aeb0:	d012      	beq.n	800aed8 <HAL_UART_Transmit_IT+0x58>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aeb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeb6:	d022      	beq.n	800aefe <HAL_UART_Transmit_IT+0x7e>
        huart->TxISR = UART_TxISR_8BIT;
 800aeb8:	4b18      	ldr	r3, [pc, #96]	@ (800af1c <HAL_UART_Transmit_IT+0x9c>)
 800aeba:	6802      	ldr	r2, [r0, #0]
 800aebc:	6783      	str	r3, [r0, #120]	@ 0x78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebe:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	e842 3100 	strex	r1, r3, [r2]
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d1f7      	bne.n	800aebe <HAL_UART_Transmit_IT+0x3e>
}
 800aece:	bc30      	pop	{r4, r5}
    return HAL_OK;
 800aed0:	2000      	movs	r0, #0
}
 800aed2:	4770      	bx	lr
    return HAL_BUSY;
 800aed4:	2002      	movs	r0, #2
 800aed6:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aedc:	d016      	beq.n	800af0c <HAL_UART_Transmit_IT+0x8c>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800aede:	4b10      	ldr	r3, [pc, #64]	@ (800af20 <HAL_UART_Transmit_IT+0xa0>)
 800aee0:	6802      	ldr	r2, [r0, #0]
 800aee2:	6783      	str	r3, [r0, #120]	@ 0x78
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	f102 0308 	add.w	r3, r2, #8
 800aee8:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800aeec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef0:	f102 0008 	add.w	r0, r2, #8
 800aef4:	e840 3100 	strex	r1, r3, [r0]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d1f3      	bne.n	800aee4 <HAL_UART_Transmit_IT+0x64>
 800aefc:	e7e7      	b.n	800aece <HAL_UART_Transmit_IT+0x4e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aefe:	6901      	ldr	r1, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT;
 800af00:	4b06      	ldr	r3, [pc, #24]	@ (800af1c <HAL_UART_Transmit_IT+0x9c>)
 800af02:	4a08      	ldr	r2, [pc, #32]	@ (800af24 <HAL_UART_Transmit_IT+0xa4>)
 800af04:	2900      	cmp	r1, #0
 800af06:	bf08      	it	eq
 800af08:	4613      	moveq	r3, r2
 800af0a:	e7d6      	b.n	800aeba <HAL_UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af0c:	6901      	ldr	r1, [r0, #16]
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800af0e:	4b04      	ldr	r3, [pc, #16]	@ (800af20 <HAL_UART_Transmit_IT+0xa0>)
 800af10:	4a05      	ldr	r2, [pc, #20]	@ (800af28 <HAL_UART_Transmit_IT+0xa8>)
 800af12:	42a9      	cmp	r1, r5
 800af14:	bf08      	it	eq
 800af16:	4613      	moveq	r3, r2
 800af18:	e7e2      	b.n	800aee0 <HAL_UART_Transmit_IT+0x60>
 800af1a:	bf00      	nop
 800af1c:	0800ac81 	.word	0x0800ac81
 800af20:	0800acd1 	.word	0x0800acd1
 800af24:	0800aa51 	.word	0x0800aa51
 800af28:	0800aaa5 	.word	0x0800aaa5

0800af2c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800af2c:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800af30:	2b20      	cmp	r3, #32
 800af32:	d152      	bne.n	800afda <HAL_UART_Receive_IT+0xae>
    if ((pData == NULL) || (Size == 0U))
 800af34:	b101      	cbz	r1, 800af38 <HAL_UART_Receive_IT+0xc>
 800af36:	b90a      	cbnz	r2, 800af3c <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 800af38:	2001      	movs	r0, #1
}
 800af3a:	4770      	bx	lr
{
 800af3c:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3e:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af40:	6803      	ldr	r3, [r0, #0]
 800af42:	4c52      	ldr	r4, [pc, #328]	@ (800b08c <HAL_UART_Receive_IT+0x160>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af44:	66c5      	str	r5, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af46:	42a3      	cmp	r3, r4
 800af48:	d00a      	beq.n	800af60 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af4a:	685c      	ldr	r4, [r3, #4]
 800af4c:	0224      	lsls	r4, r4, #8
 800af4e:	d507      	bpl.n	800af60 <HAL_UART_Receive_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af54:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af58:	e843 4500 	strex	r5, r4, [r3]
 800af5c:	2d00      	cmp	r5, #0
 800af5e:	d1f7      	bne.n	800af50 <HAL_UART_Receive_IT+0x24>
  huart->RxISR       = NULL;
 800af60:	2400      	movs	r4, #0
  huart->pRxBuffPtr  = pData;
 800af62:	6581      	str	r1, [r0, #88]	@ 0x58
  UART_MASK_COMPUTATION(huart);
 800af64:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 800af66:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 800af6a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 800af6e:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800af72:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 800af74:	d048      	beq.n	800b008 <HAL_UART_Receive_IT+0xdc>
 800af76:	2900      	cmp	r1, #0
 800af78:	d164      	bne.n	800b044 <HAL_UART_Receive_IT+0x118>
 800af7a:	6901      	ldr	r1, [r0, #16]
 800af7c:	2900      	cmp	r1, #0
 800af7e:	bf14      	ite	ne
 800af80:	247f      	movne	r4, #127	@ 0x7f
 800af82:	24ff      	moveq	r4, #255	@ 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af84:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af86:	2122      	movs	r1, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af88:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
  UART_MASK_COMPUTATION(huart);
 800af8c:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af90:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	f103 0108 	add.w	r1, r3, #8
 800af98:	e851 1f00 	ldrex	r1, [r1]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af9c:	f041 0101 	orr.w	r1, r1, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa0:	f103 0508 	add.w	r5, r3, #8
 800afa4:	e845 1400 	strex	r4, r1, [r5]
 800afa8:	2c00      	cmp	r4, #0
 800afaa:	d1f3      	bne.n	800af94 <HAL_UART_Receive_IT+0x68>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800afac:	6e41      	ldr	r1, [r0, #100]	@ 0x64
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afae:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800afb0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb4:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800afb6:	d02e      	beq.n	800b016 <HAL_UART_Receive_IT+0xea>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb8:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800afbc:	d00f      	beq.n	800afde <HAL_UART_Receive_IT+0xb2>
 800afbe:	4a34      	ldr	r2, [pc, #208]	@ (800b090 <HAL_UART_Receive_IT+0x164>)
 800afc0:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800afc2:	b184      	cbz	r4, 800afe6 <HAL_UART_Receive_IT+0xba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800afc8:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afcc:	e843 2100 	strex	r1, r2, [r3]
 800afd0:	2900      	cmp	r1, #0
 800afd2:	d1f7      	bne.n	800afc4 <HAL_UART_Receive_IT+0x98>
}
 800afd4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800afd6:	2000      	movs	r0, #0
}
 800afd8:	4770      	bx	lr
    return HAL_BUSY;
 800afda:	2002      	movs	r0, #2
 800afdc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afde:	2c00      	cmp	r4, #0
 800afe0:	d14d      	bne.n	800b07e <HAL_UART_Receive_IT+0x152>
 800afe2:	4a2c      	ldr	r2, [pc, #176]	@ (800b094 <HAL_UART_Receive_IT+0x168>)
 800afe4:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800afea:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	e843 2100 	strex	r1, r2, [r3]
 800aff2:	2900      	cmp	r1, #0
 800aff4:	d0ee      	beq.n	800afd4 <HAL_UART_Receive_IT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	e853 2f00 	ldrex	r2, [r3]
 800affa:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affe:	e843 2100 	strex	r1, r2, [r3]
 800b002:	2900      	cmp	r1, #0
 800b004:	d1ef      	bne.n	800afe6 <HAL_UART_Receive_IT+0xba>
 800b006:	e7e5      	b.n	800afd4 <HAL_UART_Receive_IT+0xa8>
  UART_MASK_COMPUTATION(huart);
 800b008:	6901      	ldr	r1, [r0, #16]
 800b00a:	f240 14ff 	movw	r4, #511	@ 0x1ff
 800b00e:	2900      	cmp	r1, #0
 800b010:	bf18      	it	ne
 800b012:	24ff      	movne	r4, #255	@ 0xff
 800b014:	e7b6      	b.n	800af84 <HAL_UART_Receive_IT+0x58>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b016:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 800b01a:	4291      	cmp	r1, r2
 800b01c:	d8cc      	bhi.n	800afb8 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b01e:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b022:	d018      	beq.n	800b056 <HAL_UART_Receive_IT+0x12a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b024:	4a1c      	ldr	r2, [pc, #112]	@ (800b098 <HAL_UART_Receive_IT+0x16c>)
 800b026:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b028:	b9c4      	cbnz	r4, 800b05c <HAL_UART_Receive_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	f103 0208 	add.w	r2, r3, #8
 800b02e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b032:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	f103 0008 	add.w	r0, r3, #8
 800b03a:	e840 2100 	strex	r1, r2, [r0]
 800b03e:	2900      	cmp	r1, #0
 800b040:	d1f3      	bne.n	800b02a <HAL_UART_Receive_IT+0xfe>
 800b042:	e7c7      	b.n	800afd4 <HAL_UART_Receive_IT+0xa8>
  UART_MASK_COMPUTATION(huart);
 800b044:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800b048:	d19c      	bne.n	800af84 <HAL_UART_Receive_IT+0x58>
 800b04a:	6901      	ldr	r1, [r0, #16]
 800b04c:	2900      	cmp	r1, #0
 800b04e:	bf14      	ite	ne
 800b050:	243f      	movne	r4, #63	@ 0x3f
 800b052:	247f      	moveq	r4, #127	@ 0x7f
 800b054:	e796      	b.n	800af84 <HAL_UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b056:	b1ac      	cbz	r4, 800b084 <HAL_UART_Receive_IT+0x158>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b058:	4a0f      	ldr	r2, [pc, #60]	@ (800b098 <HAL_UART_Receive_IT+0x16c>)
 800b05a:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	e843 2100 	strex	r1, r2, [r3]
 800b068:	2900      	cmp	r1, #0
 800b06a:	d0de      	beq.n	800b02a <HAL_UART_Receive_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	e853 2f00 	ldrex	r2, [r3]
 800b070:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	e843 2100 	strex	r1, r2, [r3]
 800b078:	2900      	cmp	r1, #0
 800b07a:	d1ef      	bne.n	800b05c <HAL_UART_Receive_IT+0x130>
 800b07c:	e7d5      	b.n	800b02a <HAL_UART_Receive_IT+0xfe>
 800b07e:	4a04      	ldr	r2, [pc, #16]	@ (800b090 <HAL_UART_Receive_IT+0x164>)
 800b080:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b082:	e79f      	b.n	800afc4 <HAL_UART_Receive_IT+0x98>
 800b084:	4a05      	ldr	r2, [pc, #20]	@ (800b09c <HAL_UART_Receive_IT+0x170>)
 800b086:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b088:	e7cf      	b.n	800b02a <HAL_UART_Receive_IT+0xfe>
 800b08a:	bf00      	nop
 800b08c:	46002400 	.word	0x46002400
 800b090:	0800abd5 	.word	0x0800abd5
 800b094:	0800ac19 	.word	0x0800ac19
 800b098:	0800a695 	.word	0x0800a695
 800b09c:	0800a875 	.word	0x0800a875

0800b0a0 <HAL_UART_Transmit_DMA>:
{
 800b0a0:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800b0a2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	d13c      	bne.n	800b124 <HAL_UART_Transmit_DMA+0x84>
    if ((pData == NULL) || (Size == 0U))
 800b0aa:	2900      	cmp	r1, #0
 800b0ac:	d042      	beq.n	800b134 <HAL_UART_Transmit_DMA+0x94>
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	d040      	beq.n	800b134 <HAL_UART_Transmit_DMA+0x94>
    huart->pTxBuffPtr  = pData;
 800b0b2:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b4:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0b6:	2521      	movs	r5, #33	@ 0x21
    huart->TxXferCount = Size;
 800b0b8:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
    huart->pTxBuffPtr  = pData;
 800b0bc:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b0be:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
    if (huart->hdmatx != NULL)
 800b0c2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0c8:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 800b0cc:	b1c8      	cbz	r0, 800b102 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b0ce:	4d21      	ldr	r5, [pc, #132]	@ (800b154 <HAL_UART_Transmit_DMA+0xb4>)
      huart->hdmatx->XferAbortCallback = NULL;
 800b0d0:	66c3      	str	r3, [r0, #108]	@ 0x6c
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0d2:	68a3      	ldr	r3, [r4, #8]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b0d4:	6605      	str	r5, [r0, #96]	@ 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0d6:	4d20      	ldr	r5, [pc, #128]	@ (800b158 <HAL_UART_Transmit_DMA+0xb8>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b0dc:	6645      	str	r5, [r0, #100]	@ 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b0de:	4d1f      	ldr	r5, [pc, #124]	@ (800b15c <HAL_UART_Transmit_DMA+0xbc>)
 800b0e0:	6685      	str	r5, [r0, #104]	@ 0x68
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0e2:	d029      	beq.n	800b138 <HAL_UART_Transmit_DMA+0x98>
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b0e4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b0e6:	061b      	lsls	r3, r3, #24
 800b0e8:	d52c      	bpl.n	800b144 <HAL_UART_Transmit_DMA+0xa4>
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800b0ea:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800b0ec:	b1e3      	cbz	r3, 800b128 <HAL_UART_Transmit_DMA+0x88>
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	b1d3      	cbz	r3, 800b128 <HAL_UART_Transmit_DMA+0x88>
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800b0f2:	609a      	str	r2, [r3, #8]
            (uint32_t)&huart->Instance->TDR;
 800b0f4:	6822      	ldr	r2, [r4, #0]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800b0f6:	60d9      	str	r1, [r3, #12]
            (uint32_t)&huart->Instance->TDR;
 800b0f8:	3228      	adds	r2, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800b0fa:	611a      	str	r2, [r3, #16]
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800b0fc:	f7fd fd1c 	bl	8008b38 <HAL_DMAEx_List_Start_IT>
      if (status != HAL_OK)
 800b100:	b990      	cbnz	r0, 800b128 <HAL_UART_Transmit_DMA+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b102:	2340      	movs	r3, #64	@ 0x40
 800b104:	6822      	ldr	r2, [r4, #0]
 800b106:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	f102 0308 	add.w	r3, r2, #8
 800b10c:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	f102 0008 	add.w	r0, r2, #8
 800b118:	e840 3100 	strex	r1, r3, [r0]
 800b11c:	2900      	cmp	r1, #0
 800b11e:	d1f3      	bne.n	800b108 <HAL_UART_Transmit_DMA+0x68>
    return HAL_OK;
 800b120:	2000      	movs	r0, #0
}
 800b122:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800b124:	2002      	movs	r0, #2
}
 800b126:	bd38      	pop	{r3, r4, r5, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b128:	2210      	movs	r2, #16
        huart->gState = HAL_UART_STATE_READY;
 800b12a:	2320      	movs	r3, #32
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b12c:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 800b130:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800b134:	2001      	movs	r0, #1
}
 800b136:	bd38      	pop	{r3, r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1d2      	bne.n	800b0e4 <HAL_UART_Transmit_DMA+0x44>
        nbByte = Size * 2U;
 800b13e:	0052      	lsls	r2, r2, #1
 800b140:	b292      	uxth	r2, r2
 800b142:	e7cf      	b.n	800b0e4 <HAL_UART_Transmit_DMA+0x44>
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800b144:	6825      	ldr	r5, [r4, #0]
 800b146:	4613      	mov	r3, r2
 800b148:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 800b14c:	f7fd fb6a 	bl	8008824 <HAL_DMA_Start_IT>
 800b150:	e7d6      	b.n	800b100 <HAL_UART_Transmit_DMA+0x60>
 800b152:	bf00      	nop
 800b154:	0800a639 	.word	0x0800a639
 800b158:	0800a679 	.word	0x0800a679
 800b15c:	0800ad55 	.word	0x0800ad55

0800b160 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b160:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b164:	6803      	ldr	r3, [r0, #0]
{
 800b166:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b168:	69da      	ldr	r2, [r3, #28]
{
 800b16a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800b16c:	ea12 0f0c 	tst.w	r2, ip
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b170:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b172:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800b174:	d13d      	bne.n	800b1f2 <HAL_UART_IRQHandler+0x92>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b176:	0696      	lsls	r6, r2, #26
 800b178:	d507      	bpl.n	800b18a <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b17a:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b17e:	f005 5e80 	and.w	lr, r5, #268435456	@ 0x10000000
 800b182:	ea5c 0c0e 	orrs.w	ip, ip, lr
 800b186:	f040 8103 	bne.w	800b390 <HAL_UART_IRQHandler+0x230>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800b18c:	2801      	cmp	r0, #1
 800b18e:	f000 8096 	beq.w	800b2be <HAL_UART_IRQHandler+0x15e>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b192:	0616      	lsls	r6, r2, #24
 800b194:	d506      	bpl.n	800b1a4 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b196:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b19a:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b19e:	4328      	orrs	r0, r5
 800b1a0:	f040 80ee 	bne.w	800b380 <HAL_UART_IRQHandler+0x220>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1a4:	0650      	lsls	r0, r2, #25
 800b1a6:	d514      	bpl.n	800b1d2 <HAL_UART_IRQHandler+0x72>
 800b1a8:	064e      	lsls	r6, r1, #25
 800b1aa:	d512      	bpl.n	800b1d2 <HAL_UART_IRQHandler+0x72>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	e843 2100 	strex	r1, r2, [r3]
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	d1f7      	bne.n	800b1ac <HAL_UART_IRQHandler+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 800b1bc:	2120      	movs	r1, #32
  huart->TxISR = NULL;
 800b1be:	2200      	movs	r2, #0
  huart->TxCpltCallback(huart);
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
  huart->gState = HAL_UART_STATE_READY;
 800b1c6:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 800b1ca:	67a2      	str	r2, [r4, #120]	@ 0x78
}
 800b1cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  huart->TxCpltCallback(huart);
 800b1d0:	4718      	bx	r3
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b1d2:	0215      	lsls	r5, r2, #8
 800b1d4:	d507      	bpl.n	800b1e6 <HAL_UART_IRQHandler+0x86>
 800b1d6:	0048      	lsls	r0, r1, #1
 800b1d8:	d505      	bpl.n	800b1e6 <HAL_UART_IRQHandler+0x86>
    huart->TxFifoEmptyCallback(huart);
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
}
 800b1e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    huart->TxFifoEmptyCallback(huart);
 800b1e4:	4718      	bx	r3
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b1e6:	01d3      	lsls	r3, r2, #7
 800b1e8:	d502      	bpl.n	800b1f0 <HAL_UART_IRQHandler+0x90>
 800b1ea:	2900      	cmp	r1, #0
 800b1ec:	f2c0 8132 	blt.w	800b454 <HAL_UART_IRQHandler+0x2f4>
}
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b1f2:	48b6      	ldr	r0, [pc, #728]	@ (800b4cc <HAL_UART_IRQHandler+0x36c>)
 800b1f4:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b1f8:	48b5      	ldr	r0, [pc, #724]	@ (800b4d0 <HAL_UART_IRQHandler+0x370>)
 800b1fa:	4008      	ands	r0, r1
 800b1fc:	ea50 000c 	orrs.w	r0, r0, ip
 800b200:	d0c3      	beq.n	800b18a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b202:	07d6      	lsls	r6, r2, #31
 800b204:	d509      	bpl.n	800b21a <HAL_UART_IRQHandler+0xba>
 800b206:	05c8      	lsls	r0, r1, #23
 800b208:	d507      	bpl.n	800b21a <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b20a:	2001      	movs	r0, #1
 800b20c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b20e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b212:	f040 0001 	orr.w	r0, r0, #1
 800b216:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b21a:	0796      	lsls	r6, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b21c:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b220:	f140 80a7 	bpl.w	800b372 <HAL_UART_IRQHandler+0x212>
 800b224:	07ee      	lsls	r6, r5, #31
 800b226:	d510      	bpl.n	800b24a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b228:	2602      	movs	r6, #2
 800b22a:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b22c:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800b230:	f046 0604 	orr.w	r6, r6, #4
 800b234:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b238:	b138      	cbz	r0, 800b24a <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b23a:	2004      	movs	r0, #4
 800b23c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b23e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b242:	f040 0002 	orr.w	r0, r0, #2
 800b246:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b24a:	0716      	lsls	r6, r2, #28
 800b24c:	d50c      	bpl.n	800b268 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b24e:	f001 0020 	and.w	r0, r1, #32
 800b252:	ea50 000c 	orrs.w	r0, r0, ip
 800b256:	d007      	beq.n	800b268 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b258:	2008      	movs	r0, #8
 800b25a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b25c:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b260:	f040 0008 	orr.w	r0, r0, #8
 800b264:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b268:	0510      	lsls	r0, r2, #20
 800b26a:	d50a      	bpl.n	800b282 <HAL_UART_IRQHandler+0x122>
 800b26c:	014e      	lsls	r6, r1, #5
 800b26e:	d508      	bpl.n	800b282 <HAL_UART_IRQHandler+0x122>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b270:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b274:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b276:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b27a:	f040 0020 	orr.w	r0, r0, #32
 800b27e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b282:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b286:	2800      	cmp	r0, #0
 800b288:	d0b2      	beq.n	800b1f0 <HAL_UART_IRQHandler+0x90>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b28a:	0690      	lsls	r0, r2, #26
 800b28c:	d506      	bpl.n	800b29c <HAL_UART_IRQHandler+0x13c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b28e:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b292:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800b296:	4329      	orrs	r1, r5
 800b298:	f040 80d4 	bne.w	800b444 <HAL_UART_IRQHandler+0x2e4>
      errorcode = huart->ErrorCode;
 800b29c:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2a0:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2a2:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2a6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800b2aa:	ea52 0501 	orrs.w	r5, r2, r1
 800b2ae:	d176      	bne.n	800b39e <HAL_UART_IRQHandler+0x23e>
        huart->ErrorCallback(huart);
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800b2b6:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2be:	06d6      	lsls	r6, r2, #27
 800b2c0:	f57f af67 	bpl.w	800b192 <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2c4:	06c8      	lsls	r0, r1, #27
 800b2c6:	f57f af64 	bpl.w	800b192 <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2ca:	2110      	movs	r1, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2cc:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2d0:	6219      	str	r1, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2d2:	6899      	ldr	r1, [r3, #8]
 800b2d4:	0649      	lsls	r1, r1, #25
 800b2d6:	f140 80c1 	bpl.w	800b45c <HAL_UART_IRQHandler+0x2fc>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2da:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800b2de:	6801      	ldr	r1, [r0, #0]
 800b2e0:	6c89      	ldr	r1, [r1, #72]	@ 0x48
 800b2e2:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800b2e4:	2900      	cmp	r1, #0
 800b2e6:	f000 80f9 	beq.w	800b4dc <HAL_UART_IRQHandler+0x37c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2ea:	4291      	cmp	r1, r2
 800b2ec:	f080 80f6 	bcs.w	800b4dc <HAL_UART_IRQHandler+0x37c>
        huart->RxXferCount = nb_remaining_rx_data;
 800b2f0:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b2f4:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800b2f6:	2981      	cmp	r1, #129	@ 0x81
 800b2f8:	d02f      	beq.n	800b35a <HAL_UART_IRQHandler+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	e843 2100 	strex	r1, r2, [r3]
 800b306:	2900      	cmp	r1, #0
 800b308:	d1f7      	bne.n	800b2fa <HAL_UART_IRQHandler+0x19a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b30a:	f103 0208 	add.w	r2, r3, #8
 800b30e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b312:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b316:	f103 0508 	add.w	r5, r3, #8
 800b31a:	e845 2100 	strex	r1, r2, [r5]
 800b31e:	2900      	cmp	r1, #0
 800b320:	d1f3      	bne.n	800b30a <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	f103 0208 	add.w	r2, r3, #8
 800b326:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b32a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32e:	f103 0508 	add.w	r5, r3, #8
 800b332:	e845 2100 	strex	r1, r2, [r5]
 800b336:	2900      	cmp	r1, #0
 800b338:	d1f3      	bne.n	800b322 <HAL_UART_IRQHandler+0x1c2>
          huart->RxState = HAL_UART_STATE_READY;
 800b33a:	2220      	movs	r2, #32
 800b33c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b340:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b346:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34a:	e843 2100 	strex	r1, r2, [r3]
 800b34e:	2900      	cmp	r1, #0
 800b350:	d1f7      	bne.n	800b342 <HAL_UART_IRQHandler+0x1e2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b352:	f7fd faaf 	bl	80088b4 <HAL_DMA_Abort>
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b356:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b35a:	2102      	movs	r1, #2
 800b35c:	6721      	str	r1, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b35e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
 800b362:	4620      	mov	r0, r4
 800b364:	1a51      	subs	r1, r2, r1
 800b366:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 800b36a:	b289      	uxth	r1, r1
}
 800b36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b370:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b372:	2800      	cmp	r0, #0
 800b374:	f43f af69 	beq.w	800b24a <HAL_UART_IRQHandler+0xea>
 800b378:	07e8      	lsls	r0, r5, #31
 800b37a:	f53f af5e 	bmi.w	800b23a <HAL_UART_IRQHandler+0xda>
 800b37e:	e764      	b.n	800b24a <HAL_UART_IRQHandler+0xea>
    if (huart->TxISR != NULL)
 800b380:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800b382:	2b00      	cmp	r3, #0
 800b384:	f43f af34 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x90>
      huart->TxISR(huart);
 800b388:	4620      	mov	r0, r4
}
 800b38a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800b38e:	4718      	bx	r3
      if (huart->RxISR != NULL)
 800b390:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800b392:	2b00      	cmp	r3, #0
 800b394:	f43f af2c 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x90>
}
 800b398:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    huart->RxFifoFullCallback(huart);
 800b39c:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3a2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	e843 2100 	strex	r1, r2, [r3]
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	d1f7      	bne.n	800b39e <HAL_UART_IRQHandler+0x23e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3ae:	4849      	ldr	r0, [pc, #292]	@ (800b4d4 <HAL_UART_IRQHandler+0x374>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	f103 0208 	add.w	r2, r3, #8
 800b3b4:	e852 2f00 	ldrex	r2, [r2]
 800b3b8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ba:	f103 0508 	add.w	r5, r3, #8
 800b3be:	e845 2100 	strex	r1, r2, [r5]
 800b3c2:	2900      	cmp	r1, #0
 800b3c4:	d1f4      	bne.n	800b3b0 <HAL_UART_IRQHandler+0x250>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b3c8:	2a01      	cmp	r2, #1
 800b3ca:	d024      	beq.n	800b416 <HAL_UART_IRQHandler+0x2b6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3cc:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	2120      	movs	r1, #32
 800b3d0:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d4:	66e2      	str	r2, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800b3d6:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3d8:	689a      	ldr	r2, [r3, #8]
 800b3da:	0652      	lsls	r2, r2, #25
 800b3dc:	d52c      	bpl.n	800b438 <HAL_UART_IRQHandler+0x2d8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	f103 0208 	add.w	r2, r3, #8
 800b3e2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	f103 0008 	add.w	r0, r3, #8
 800b3ee:	e840 2100 	strex	r1, r2, [r0]
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	d1f3      	bne.n	800b3de <HAL_UART_IRQHandler+0x27e>
          if (huart->hdmarx != NULL)
 800b3f6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800b3fa:	b1e8      	cbz	r0, 800b438 <HAL_UART_IRQHandler+0x2d8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3fc:	4b36      	ldr	r3, [pc, #216]	@ (800b4d8 <HAL_UART_IRQHandler+0x378>)
 800b3fe:	66c3      	str	r3, [r0, #108]	@ 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b400:	f7fd faa6 	bl	8008950 <HAL_DMA_Abort_IT>
 800b404:	2800      	cmp	r0, #0
 800b406:	f43f aef3 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x90>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b40a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
}
 800b40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b412:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b414:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b416:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b41a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41e:	e843 2100 	strex	r1, r2, [r3]
 800b422:	2900      	cmp	r1, #0
 800b424:	d0d2      	beq.n	800b3cc <HAL_UART_IRQHandler+0x26c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	e853 2f00 	ldrex	r2, [r3]
 800b42a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42e:	e843 2100 	strex	r1, r2, [r3]
 800b432:	2900      	cmp	r1, #0
 800b434:	d1ef      	bne.n	800b416 <HAL_UART_IRQHandler+0x2b6>
 800b436:	e7c9      	b.n	800b3cc <HAL_UART_IRQHandler+0x26c>
          huart->ErrorCallback(huart);
 800b438:	4620      	mov	r0, r4
 800b43a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
}
 800b43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          huart->ErrorCallback(huart);
 800b442:	4718      	bx	r3
        if (huart->RxISR != NULL)
 800b444:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800b446:	2a00      	cmp	r2, #0
 800b448:	f43f af28 	beq.w	800b29c <HAL_UART_IRQHandler+0x13c>
          huart->RxISR(huart);
 800b44c:	4620      	mov	r0, r4
 800b44e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	e723      	b.n	800b29c <HAL_UART_IRQHandler+0x13c>
    huart->RxFifoFullCallback(huart);
 800b454:	4620      	mov	r0, r4
 800b456:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800b45a:	e79d      	b.n	800b398 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b45c:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800b460:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b464:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800b466:	b289      	uxth	r1, r1
 800b468:	2900      	cmp	r1, #0
 800b46a:	f43f aec1 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x90>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b46e:	1a12      	subs	r2, r2, r0
 800b470:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 800b472:	2900      	cmp	r1, #0
 800b474:	f43f aebc 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b47c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b480:	e843 2000 	strex	r0, r2, [r3]
 800b484:	2800      	cmp	r0, #0
 800b486:	d1f7      	bne.n	800b478 <HAL_UART_IRQHandler+0x318>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b488:	4d12      	ldr	r5, [pc, #72]	@ (800b4d4 <HAL_UART_IRQHandler+0x374>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48a:	f103 0208 	add.w	r2, r3, #8
 800b48e:	e852 2f00 	ldrex	r2, [r2]
 800b492:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	f103 0608 	add.w	r6, r3, #8
 800b498:	e846 2000 	strex	r0, r2, [r6]
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d1f4      	bne.n	800b48a <HAL_UART_IRQHandler+0x32a>
        huart->RxState = HAL_UART_STATE_READY;
 800b4a0:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800b4a2:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b4a4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4a8:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b2:	e843 2000 	strex	r0, r2, [r3]
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d1f7      	bne.n	800b4aa <HAL_UART_IRQHandler+0x34a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4ba:	2202      	movs	r2, #2
        huart->RxEventCallback(huart, nb_rx_data);
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4c2:	6722      	str	r2, [r4, #112]	@ 0x70
}
 800b4c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, nb_rx_data);
 800b4c8:	4718      	bx	r3
 800b4ca:	bf00      	nop
 800b4cc:	10000001 	.word	0x10000001
 800b4d0:	04000120 	.word	0x04000120
 800b4d4:	effffffe 	.word	0xeffffffe
 800b4d8:	0800a681 	.word	0x0800a681
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b4dc:	4291      	cmp	r1, r2
 800b4de:	f47f ae87 	bne.w	800b1f0 <HAL_UART_IRQHandler+0x90>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b4e2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b4e4:	2b81      	cmp	r3, #129	@ 0x81
 800b4e6:	d0e8      	beq.n	800b4ba <HAL_UART_IRQHandler+0x35a>
}
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ea:	bf00      	nop

0800b4ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 800b4ee:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4f0:	071a      	lsls	r2, r3, #28
 800b4f2:	d506      	bpl.n	800b502 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4f4:	6801      	ldr	r1, [r0, #0]
 800b4f6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800b4f8:	684a      	ldr	r2, [r1, #4]
 800b4fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b4fe:	4322      	orrs	r2, r4
 800b500:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b502:	07dc      	lsls	r4, r3, #31
 800b504:	d506      	bpl.n	800b514 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b506:	6801      	ldr	r1, [r0, #0]
 800b508:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800b50a:	684a      	ldr	r2, [r1, #4]
 800b50c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800b510:	4322      	orrs	r2, r4
 800b512:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b514:	0799      	lsls	r1, r3, #30
 800b516:	d506      	bpl.n	800b526 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b518:	6801      	ldr	r1, [r0, #0]
 800b51a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800b51c:	684a      	ldr	r2, [r1, #4]
 800b51e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b522:	4322      	orrs	r2, r4
 800b524:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b526:	075a      	lsls	r2, r3, #29
 800b528:	d506      	bpl.n	800b538 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b52a:	6801      	ldr	r1, [r0, #0]
 800b52c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800b52e:	684a      	ldr	r2, [r1, #4]
 800b530:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b534:	4322      	orrs	r2, r4
 800b536:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b538:	06dc      	lsls	r4, r3, #27
 800b53a:	d506      	bpl.n	800b54a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b53c:	6801      	ldr	r1, [r0, #0]
 800b53e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800b540:	688a      	ldr	r2, [r1, #8]
 800b542:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b546:	4322      	orrs	r2, r4
 800b548:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b54a:	0699      	lsls	r1, r3, #26
 800b54c:	d506      	bpl.n	800b55c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b54e:	6801      	ldr	r1, [r0, #0]
 800b550:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800b552:	688a      	ldr	r2, [r1, #8]
 800b554:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b558:	4322      	orrs	r2, r4
 800b55a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b55c:	065a      	lsls	r2, r3, #25
 800b55e:	d50a      	bpl.n	800b576 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b560:	6801      	ldr	r1, [r0, #0]
 800b562:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800b564:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b566:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b56a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800b56e:	ea42 0204 	orr.w	r2, r2, r4
 800b572:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b574:	d00b      	beq.n	800b58e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b576:	061b      	lsls	r3, r3, #24
 800b578:	d506      	bpl.n	800b588 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b57a:	6802      	ldr	r2, [r0, #0]
 800b57c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b57e:	6853      	ldr	r3, [r2, #4]
 800b580:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800b584:	430b      	orrs	r3, r1
 800b586:	6053      	str	r3, [r2, #4]
}
 800b588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b58c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b58e:	684a      	ldr	r2, [r1, #4]
 800b590:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800b592:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800b596:	4322      	orrs	r2, r4
 800b598:	604a      	str	r2, [r1, #4]
 800b59a:	e7ec      	b.n	800b576 <UART_AdvFeatureConfig+0x8a>

0800b59c <UART_CheckIdleState>:
{
 800b59c:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b59e:	2300      	movs	r3, #0
{
 800b5a0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a2:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800b5a6:	f7fc fb99 	bl	8007cdc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5aa:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800b5ac:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5ae:	6813      	ldr	r3, [r2, #0]
 800b5b0:	071b      	lsls	r3, r3, #28
 800b5b2:	d40f      	bmi.n	800b5d4 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5b4:	6813      	ldr	r3, [r2, #0]
 800b5b6:	0759      	lsls	r1, r3, #29
 800b5b8:	d431      	bmi.n	800b61e <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ba:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b5bc:	2220      	movs	r2, #32
  return HAL_OK;
 800b5be:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800b5c0:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5c4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5ca:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5d4:	69d3      	ldr	r3, [r2, #28]
 800b5d6:	0298      	lsls	r0, r3, #10
 800b5d8:	d4ec      	bmi.n	800b5b4 <UART_CheckIdleState+0x18>
 800b5da:	e00c      	b.n	800b5f6 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b5dc:	6819      	ldr	r1, [r3, #0]
 800b5de:	461a      	mov	r2, r3
 800b5e0:	0749      	lsls	r1, r1, #29
 800b5e2:	d505      	bpl.n	800b5f0 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5e4:	69d9      	ldr	r1, [r3, #28]
 800b5e6:	0708      	lsls	r0, r1, #28
 800b5e8:	d44a      	bmi.n	800b680 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5ea:	69d9      	ldr	r1, [r3, #28]
 800b5ec:	0509      	lsls	r1, r1, #20
 800b5ee:	d475      	bmi.n	800b6dc <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	0298      	lsls	r0, r3, #10
 800b5f4:	d4de      	bmi.n	800b5b4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5f6:	f7fc fb71 	bl	8007cdc <HAL_GetTick>
 800b5fa:	1b43      	subs	r3, r0, r5
 800b5fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b600:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b602:	d3eb      	bcc.n	800b5dc <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b608:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	e843 2100 	strex	r1, r2, [r3]
 800b610:	2900      	cmp	r1, #0
 800b612:	d1f7      	bne.n	800b604 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800b614:	2320      	movs	r3, #32
 800b616:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800b61a:	2003      	movs	r0, #3
 800b61c:	e7d6      	b.n	800b5cc <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b61e:	69d3      	ldr	r3, [r2, #28]
 800b620:	025b      	lsls	r3, r3, #9
 800b622:	d4ca      	bmi.n	800b5ba <UART_CheckIdleState+0x1e>
 800b624:	e00d      	b.n	800b642 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	0750      	lsls	r0, r2, #29
 800b62a:	d507      	bpl.n	800b63c <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b62c:	69da      	ldr	r2, [r3, #28]
 800b62e:	0711      	lsls	r1, r2, #28
 800b630:	f100 8082 	bmi.w	800b738 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b634:	69da      	ldr	r2, [r3, #28]
 800b636:	0512      	lsls	r2, r2, #20
 800b638:	f100 80ac 	bmi.w	800b794 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	025b      	lsls	r3, r3, #9
 800b640:	d4bb      	bmi.n	800b5ba <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b642:	f7fc fb4b 	bl	8007cdc <HAL_GetTick>
 800b646:	1b43      	subs	r3, r0, r5
 800b648:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	d3ea      	bcc.n	800b626 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b654:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b658:	e843 2100 	strex	r1, r2, [r3]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	d1f7      	bne.n	800b650 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	f103 0208 	add.w	r2, r3, #8
 800b664:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b668:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	f103 0008 	add.w	r0, r3, #8
 800b670:	e840 2100 	strex	r1, r2, [r0]
 800b674:	2900      	cmp	r1, #0
 800b676:	d1f3      	bne.n	800b660 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 800b678:	2320      	movs	r3, #32
 800b67a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800b67e:	e7cc      	b.n	800b61a <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b680:	2208      	movs	r2, #8
 800b682:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b688:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	e843 2100 	strex	r1, r2, [r3]
 800b690:	2900      	cmp	r1, #0
 800b692:	d1f7      	bne.n	800b684 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b694:	4856      	ldr	r0, [pc, #344]	@ (800b7f0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	f103 0208 	add.w	r2, r3, #8
 800b69a:	e852 2f00 	ldrex	r2, [r2]
 800b69e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	f103 0508 	add.w	r5, r3, #8
 800b6a4:	e845 2100 	strex	r1, r2, [r5]
 800b6a8:	2900      	cmp	r1, #0
 800b6aa:	d1f4      	bne.n	800b696 <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ac:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b6ae:	2a01      	cmp	r2, #1
 800b6b0:	d00b      	beq.n	800b6ca <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b6b4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6b6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800b6b8:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800b6bc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6be:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800b6c0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b6c4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800b6c8:	e79c      	b.n	800b604 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ca:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	e843 2100 	strex	r1, r2, [r3]
 800b6d6:	2900      	cmp	r1, #0
 800b6d8:	d1f7      	bne.n	800b6ca <UART_CheckIdleState+0x12e>
 800b6da:	e7ea      	b.n	800b6b2 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6e0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6e6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	e843 2100 	strex	r1, r2, [r3]
 800b6ee:	2900      	cmp	r1, #0
 800b6f0:	d1f7      	bne.n	800b6e2 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6f2:	483f      	ldr	r0, [pc, #252]	@ (800b7f0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f4:	f103 0208 	add.w	r2, r3, #8
 800b6f8:	e852 2f00 	ldrex	r2, [r2]
 800b6fc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fe:	f103 0508 	add.w	r5, r3, #8
 800b702:	e845 2100 	strex	r1, r2, [r5]
 800b706:	2900      	cmp	r1, #0
 800b708:	d1f4      	bne.n	800b6f4 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b70a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b70c:	2a01      	cmp	r2, #1
 800b70e:	d00a      	beq.n	800b726 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b710:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b712:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800b714:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b716:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800b71a:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b71e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b720:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800b724:	e76e      	b.n	800b604 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b72a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	e843 2100 	strex	r1, r2, [r3]
 800b732:	2900      	cmp	r1, #0
 800b734:	d1f7      	bne.n	800b726 <UART_CheckIdleState+0x18a>
 800b736:	e7eb      	b.n	800b710 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b738:	2208      	movs	r2, #8
 800b73a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b740:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	e843 2100 	strex	r1, r2, [r3]
 800b748:	2900      	cmp	r1, #0
 800b74a:	d1f7      	bne.n	800b73c <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b74c:	4828      	ldr	r0, [pc, #160]	@ (800b7f0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74e:	f103 0208 	add.w	r2, r3, #8
 800b752:	e852 2f00 	ldrex	r2, [r2]
 800b756:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b758:	f103 0508 	add.w	r5, r3, #8
 800b75c:	e845 2100 	strex	r1, r2, [r5]
 800b760:	2900      	cmp	r1, #0
 800b762:	d1f4      	bne.n	800b74e <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b764:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b766:	2a01      	cmp	r2, #1
 800b768:	d00b      	beq.n	800b782 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b76c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b76e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800b770:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800b774:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b776:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800b778:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b77c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800b780:	e766      	b.n	800b650 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b786:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	e843 2100 	strex	r1, r2, [r3]
 800b78e:	2900      	cmp	r1, #0
 800b790:	d1f7      	bne.n	800b782 <UART_CheckIdleState+0x1e6>
 800b792:	e7ea      	b.n	800b76a <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b798:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b79e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	e843 2100 	strex	r1, r2, [r3]
 800b7a6:	2900      	cmp	r1, #0
 800b7a8:	d1f7      	bne.n	800b79a <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7aa:	4811      	ldr	r0, [pc, #68]	@ (800b7f0 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ac:	f103 0208 	add.w	r2, r3, #8
 800b7b0:	e852 2f00 	ldrex	r2, [r2]
 800b7b4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	f103 0508 	add.w	r5, r3, #8
 800b7ba:	e845 2100 	strex	r1, r2, [r5]
 800b7be:	2900      	cmp	r1, #0
 800b7c0:	d1f4      	bne.n	800b7ac <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800b7c4:	2a01      	cmp	r2, #1
 800b7c6:	d00a      	beq.n	800b7de <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b7ca:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 800b7cc:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b7ce:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 800b7d2:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7d6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7d8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800b7dc:	e738      	b.n	800b650 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e6:	e843 2100 	strex	r1, r2, [r3]
 800b7ea:	2900      	cmp	r1, #0
 800b7ec:	d1f7      	bne.n	800b7de <UART_CheckIdleState+0x242>
 800b7ee:	e7eb      	b.n	800b7c8 <UART_CheckIdleState+0x22c>
 800b7f0:	effffffe 	.word	0xeffffffe

0800b7f4 <HAL_UART_Init>:
  if (huart == NULL)
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	f000 812c 	beq.w	800ba52 <HAL_UART_Init+0x25e>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b7fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800b7fe:	b570      	push	{r4, r5, r6, lr}
 800b800:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b802:	2b00      	cmp	r3, #0
 800b804:	d03f      	beq.n	800b886 <HAL_UART_Init+0x92>
  huart->gState = HAL_UART_STATE_BUSY;
 800b806:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800b808:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b80a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800b80e:	682b      	ldr	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b810:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  __HAL_UART_DISABLE(huart);
 800b812:	f023 0301 	bic.w	r3, r3, #1
 800b816:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b818:	2a00      	cmp	r2, #0
 800b81a:	d16c      	bne.n	800b8f6 <HAL_UART_Init+0x102>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b81c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800b820:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b822:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b824:	4303      	orrs	r3, r0
 800b826:	4313      	orrs	r3, r2
 800b828:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b82a:	4aaf      	ldr	r2, [pc, #700]	@ (800bae8 <HAL_UART_Init+0x2f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b82c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b82e:	400a      	ands	r2, r1
 800b830:	4313      	orrs	r3, r2
 800b832:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b834:	686b      	ldr	r3, [r5, #4]
 800b836:	68e2      	ldr	r2, [r4, #12]
 800b838:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b83c:	4313      	orrs	r3, r2
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b83e:	4aab      	ldr	r2, [pc, #684]	@ (800baec <HAL_UART_Init+0x2f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b840:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b842:	4295      	cmp	r5, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b844:	68aa      	ldr	r2, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b846:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b848:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b84c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b84e:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b852:	f000 8082 	beq.w	800b95a <HAL_UART_Init+0x166>
    tmpreg |= huart->Init.OneBitSampling;
 800b856:	6a26      	ldr	r6, [r4, #32]
 800b858:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b85e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b860:	f023 030f 	bic.w	r3, r3, #15
 800b864:	430b      	orrs	r3, r1
 800b866:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b868:	4ba1      	ldr	r3, [pc, #644]	@ (800baf0 <HAL_UART_Init+0x2fc>)
 800b86a:	429d      	cmp	r5, r3
 800b86c:	d02c      	beq.n	800b8c8 <HAL_UART_Init+0xd4>
 800b86e:	4ba1      	ldr	r3, [pc, #644]	@ (800baf4 <HAL_UART_Init+0x300>)
 800b870:	429d      	cmp	r5, r3
 800b872:	f000 8092 	beq.w	800b99a <HAL_UART_Init+0x1a6>
  huart->RxISR = NULL;
 800b876:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800b878:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
}
 800b87c:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800b87e:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800b880:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800b882:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800b884:	bd70      	pop	{r4, r5, r6, pc}
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b886:	489c      	ldr	r0, [pc, #624]	@ (800baf8 <HAL_UART_Init+0x304>)
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b888:	499c      	ldr	r1, [pc, #624]	@ (800bafc <HAL_UART_Init+0x308>)
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b88a:	4a9d      	ldr	r2, [pc, #628]	@ (800bb00 <HAL_UART_Init+0x30c>)
    huart->Lock = HAL_UNLOCKED;
 800b88c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b890:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b894:	4b9b      	ldr	r3, [pc, #620]	@ (800bb04 <HAL_UART_Init+0x310>)
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b896:	489c      	ldr	r0, [pc, #624]	@ (800bb08 <HAL_UART_Init+0x314>)
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b898:	e9c4 1226 	strd	r1, r2, [r4, #152]	@ 0x98
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b89c:	e9c4 0328 	strd	r0, r3, [r4, #160]	@ 0xa0
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b8a0:	499a      	ldr	r1, [pc, #616]	@ (800bb0c <HAL_UART_Init+0x318>)
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b8a2:	4a9b      	ldr	r2, [pc, #620]	@ (800bb10 <HAL_UART_Init+0x31c>)
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b8a4:	4b9b      	ldr	r3, [pc, #620]	@ (800bb14 <HAL_UART_Init+0x320>)
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b8a6:	489c      	ldr	r0, [pc, #624]	@ (800bb18 <HAL_UART_Init+0x324>)
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b8a8:	e9c4 122a 	strd	r1, r2, [r4, #168]	@ 0xa8
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b8ac:	e9c4 032c 	strd	r0, r3, [r4, #176]	@ 0xb0
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b8b0:	499a      	ldr	r1, [pc, #616]	@ (800bb1c <HAL_UART_Init+0x328>)
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b8b2:	4a9b      	ldr	r2, [pc, #620]	@ (800bb20 <HAL_UART_Init+0x32c>)
    if (huart->MspInitCallback == NULL)
 800b8b4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b8b8:	e9c4 122e 	strd	r1, r2, [r4, #184]	@ 0xb8
    if (huart->MspInitCallback == NULL)
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 809d 	beq.w	800b9fc <HAL_UART_Init+0x208>
    huart->MspInitCallback(huart);
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	4798      	blx	r3
 800b8c6:	e79e      	b.n	800b806 <HAL_UART_Init+0x12>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8c8:	4b96      	ldr	r3, [pc, #600]	@ (800bb24 <HAL_UART_Init+0x330>)
 800b8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d013      	beq.n	800b8fe <HAL_UART_Init+0x10a>
 800b8d6:	2b03      	cmp	r3, #3
 800b8d8:	f000 8084 	beq.w	800b9e4 <HAL_UART_Init+0x1f0>
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	f000 8087 	beq.w	800b9f0 <HAL_UART_Init+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8e2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b8e6:	f000 80e7 	beq.w	800bab8 <HAL_UART_Init+0x2c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ea:	f7fe f9e9 	bl	8009cc0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d04c      	beq.n	800b98c <HAL_UART_Init+0x198>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b8f4:	e008      	b.n	800b908 <HAL_UART_Init+0x114>
    UART_AdvFeatureConfig(huart);
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7ff fdf8 	bl	800b4ec <UART_AdvFeatureConfig>
 800b8fc:	e78e      	b.n	800b81c <HAL_UART_Init+0x28>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8fe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800b902:	4889      	ldr	r0, [pc, #548]	@ (800bb28 <HAL_UART_Init+0x334>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b904:	f000 8084 	beq.w	800ba10 <HAL_UART_Init+0x21c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b908:	4a88      	ldr	r2, [pc, #544]	@ (800bb2c <HAL_UART_Init+0x338>)
 800b90a:	6863      	ldr	r3, [r4, #4]
 800b90c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b910:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b914:	fbb0 f0f1 	udiv	r0, r0, r1
 800b918:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800b91c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b920:	f1a0 0310 	sub.w	r3, r0, #16
 800b924:	4293      	cmp	r3, r2
 800b926:	d8a6      	bhi.n	800b876 <HAL_UART_Init+0x82>
  huart->RxISR = NULL;
 800b928:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800b92a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b92e:	6822      	ldr	r2, [r4, #0]
 800b930:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 800b932:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800b934:	66a1      	str	r1, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800b936:	67a3      	str	r3, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b938:	6853      	ldr	r3, [r2, #4]
  return (UART_CheckIdleState(huart));
 800b93a:	4620      	mov	r0, r4
}
 800b93c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b940:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 800b944:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b946:	6893      	ldr	r3, [r2, #8]
 800b948:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800b94c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	f043 0301 	orr.w	r3, r3, #1
 800b954:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800b956:	f7ff be21 	b.w	800b59c <UART_CheckIdleState>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b95a:	431a      	orrs	r2, r3
 800b95c:	60aa      	str	r2, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b95e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b960:	4a70      	ldr	r2, [pc, #448]	@ (800bb24 <HAL_UART_Init+0x330>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b962:	f023 030f 	bic.w	r3, r3, #15
 800b966:	430b      	orrs	r3, r1
 800b968:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b96a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 800b96e:	f003 0303 	and.w	r3, r3, #3
 800b972:	2b02      	cmp	r3, #2
 800b974:	f000 80b5 	beq.w	800bae2 <HAL_UART_Init+0x2ee>
 800b978:	2b03      	cmp	r3, #3
 800b97a:	f000 80ac 	beq.w	800bad6 <HAL_UART_Init+0x2e2>
 800b97e:	2b01      	cmp	r3, #1
 800b980:	f000 80a3 	beq.w	800baca <HAL_UART_Init+0x2d6>
        pclk = HAL_RCC_GetPCLK7Freq();
 800b984:	f7fe f9d6 	bl	8009d34 <HAL_RCC_GetPCLK7Freq>
    if (pclk != 0U)
 800b988:	2800      	cmp	r0, #0
 800b98a:	d164      	bne.n	800ba56 <HAL_UART_Init+0x262>
  huart->NbRxDataToProcess = 1;
 800b98c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  huart->TxISR = NULL;
 800b990:	e9c4 001d 	strd	r0, r0, [r4, #116]	@ 0x74
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b994:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800b996:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 800b998:	e7ce      	b.n	800b938 <HAL_UART_Init+0x144>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b99a:	4b62      	ldr	r3, [pc, #392]	@ (800bb24 <HAL_UART_Init+0x330>)
 800b99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9a0:	f003 030c 	and.w	r3, r3, #12
 800b9a4:	2b0c      	cmp	r3, #12
 800b9a6:	f63f af66 	bhi.w	800b876 <HAL_UART_Init+0x82>
 800b9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b0 <HAL_UART_Init+0x1bc>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800babf 	.word	0x0800babf
 800b9b4:	0800b877 	.word	0x0800b877
 800b9b8:	0800b877 	.word	0x0800b877
 800b9bc:	0800b877 	.word	0x0800b877
 800b9c0:	0800b9f1 	.word	0x0800b9f1
 800b9c4:	0800b877 	.word	0x0800b877
 800b9c8:	0800b877 	.word	0x0800b877
 800b9cc:	0800b877 	.word	0x0800b877
 800b9d0:	0800b8ff 	.word	0x0800b8ff
 800b9d4:	0800b877 	.word	0x0800b877
 800b9d8:	0800b877 	.word	0x0800b877
 800b9dc:	0800b877 	.word	0x0800b877
 800b9e0:	0800b9e5 	.word	0x0800b9e5
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9e4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b9e8:	d012      	beq.n	800ba10 <HAL_UART_Init+0x21c>
        pclk = (uint32_t) LSE_VALUE;
 800b9ea:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b9ee:	e78b      	b.n	800b908 <HAL_UART_Init+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9f0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800b9f4:	d007      	beq.n	800ba06 <HAL_UART_Init+0x212>
        pclk = HAL_RCC_GetSysClockFreq();
 800b9f6:	f7fe f905 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
        break;
 800b9fa:	e778      	b.n	800b8ee <HAL_UART_Init+0xfa>
      huart->MspInitCallback = HAL_UART_MspInit;
 800b9fc:	4a4c      	ldr	r2, [pc, #304]	@ (800bb30 <HAL_UART_Init+0x33c>)
 800b9fe:	4613      	mov	r3, r2
 800ba00:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
 800ba04:	e75d      	b.n	800b8c2 <HAL_UART_Init+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 800ba06:	f7fe f8fd 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d0be      	beq.n	800b98c <HAL_UART_Init+0x198>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba0e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ba10:	4b46      	ldr	r3, [pc, #280]	@ (800bb2c <HAL_UART_Init+0x338>)
 800ba12:	6865      	ldr	r5, [r4, #4]
 800ba14:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800ba18:	086b      	lsrs	r3, r5, #1
 800ba1a:	fbb0 f2f2 	udiv	r2, r0, r2
 800ba1e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800ba22:	fbb3 f3f5 	udiv	r3, r3, r5
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba26:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800ba2a:	f1a3 0210 	sub.w	r2, r3, #16
 800ba2e:	428a      	cmp	r2, r1
 800ba30:	f63f af21 	bhi.w	800b876 <HAL_UART_Init+0x82>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba34:	f023 010f 	bic.w	r1, r3, #15
 800ba38:	b289      	uxth	r1, r1
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba3a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800ba3e:	430b      	orrs	r3, r1
  huart->NbRxDataToProcess = 1;
 800ba40:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
  huart->RxISR = NULL;
 800ba44:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 800ba46:	6822      	ldr	r2, [r4, #0]
 800ba48:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800ba4a:	6761      	str	r1, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800ba4c:	66a0      	str	r0, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 800ba4e:	67a1      	str	r1, [r4, #120]	@ 0x78
  return ret;
 800ba50:	e772      	b.n	800b938 <HAL_UART_Init+0x144>
}
 800ba52:	2001      	movs	r0, #1
 800ba54:	4770      	bx	lr
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba56:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ba58:	4b34      	ldr	r3, [pc, #208]	@ (800bb2c <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba5a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba5c:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba60:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba64:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba68:	428b      	cmp	r3, r1
 800ba6a:	f4ff af04 	bcc.w	800b876 <HAL_UART_Init+0x82>
 800ba6e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800ba72:	f63f af00 	bhi.w	800b876 <HAL_UART_Init+0x82>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba76:	2600      	movs	r6, #0
 800ba78:	4633      	mov	r3, r6
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	f7f4 fbde 	bl	800023c <__aeabi_uldivmod>
 800ba80:	0209      	lsls	r1, r1, #8
 800ba82:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800ba86:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800ba8a:	0200      	lsls	r0, r0, #8
 800ba8c:	eb10 000c 	adds.w	r0, r0, ip
 800ba90:	462a      	mov	r2, r5
 800ba92:	4633      	mov	r3, r6
 800ba94:	f141 0100 	adc.w	r1, r1, #0
 800ba98:	f7f4 fbd0 	bl	800023c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba9c:	4b25      	ldr	r3, [pc, #148]	@ (800bb34 <HAL_UART_Init+0x340>)
 800ba9e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800baa2:	429a      	cmp	r2, r3
 800baa4:	f63f aee7 	bhi.w	800b876 <HAL_UART_Init+0x82>
  huart->NbRxDataToProcess = 1;
 800baa8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
          huart->Instance->BRR = usartdiv;
 800baac:	6822      	ldr	r2, [r4, #0]
 800baae:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800bab0:	e9c4 661d 	strd	r6, r6, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800bab4:	66a3      	str	r3, [r4, #104]	@ 0x68
  return ret;
 800bab6:	e73f      	b.n	800b938 <HAL_UART_Init+0x144>
        pclk = HAL_RCC_GetPCLK2Freq();
 800bab8:	f7fe f902 	bl	8009cc0 <HAL_RCC_GetPCLK2Freq>
        break;
 800babc:	e7a5      	b.n	800ba0a <HAL_UART_Init+0x216>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800babe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bac2:	d00b      	beq.n	800badc <HAL_UART_Init+0x2e8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bac4:	f7fe f8c2 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
        break;
 800bac8:	e711      	b.n	800b8ee <HAL_UART_Init+0xfa>
        pclk = HAL_RCC_GetSysClockFreq();
 800baca:	f7fe f89b 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800bace:	2800      	cmp	r0, #0
 800bad0:	f43f af5c 	beq.w	800b98c <HAL_UART_Init+0x198>
 800bad4:	e7bf      	b.n	800ba56 <HAL_UART_Init+0x262>
        pclk = (uint32_t) LSE_VALUE;
 800bad6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bada:	e7bd      	b.n	800ba58 <HAL_UART_Init+0x264>
        pclk = HAL_RCC_GetPCLK1Freq();
 800badc:	f7fe f8b6 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
        break;
 800bae0:	e793      	b.n	800ba0a <HAL_UART_Init+0x216>
        pclk = (uint32_t) HSI_VALUE;
 800bae2:	4811      	ldr	r0, [pc, #68]	@ (800bb28 <HAL_UART_Init+0x334>)
 800bae4:	e7b8      	b.n	800ba58 <HAL_UART_Init+0x264>
 800bae6:	bf00      	nop
 800bae8:	cfff69f3 	.word	0xcfff69f3
 800baec:	46002400 	.word	0x46002400
 800baf0:	40013800 	.word	0x40013800
 800baf4:	40004400 	.word	0x40004400
 800baf8:	0800ac69 	.word	0x0800ac69
 800bafc:	0800ac65 	.word	0x0800ac65
 800bb00:	0800ac71 	.word	0x0800ac71
 800bb04:	0800ac75 	.word	0x0800ac75
 800bb08:	0800ac6d 	.word	0x0800ac6d
 800bb0c:	0800ac79 	.word	0x0800ac79
 800bb10:	0800ac7d 	.word	0x0800ac7d
 800bb14:	0800bb39 	.word	0x0800bb39
 800bb18:	0800ac61 	.word	0x0800ac61
 800bb1c:	0800bb3d 	.word	0x0800bb3d
 800bb20:	0800a635 	.word	0x0800a635
 800bb24:	46020c00 	.word	0x46020c00
 800bb28:	00f42400 	.word	0x00f42400
 800bb2c:	0802e0c8 	.word	0x0802e0c8
 800bb30:	08000d29 	.word	0x08000d29
 800bb34:	000ffcff 	.word	0x000ffcff

0800bb38 <HAL_UARTEx_RxFifoFullCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop

0800bb3c <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop

0800bb40 <HAL_UARTEx_EnableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb40:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800bb44:	2a01      	cmp	r2, #1
 800bb46:	d032      	beq.n	800bbae <HAL_UARTEx_EnableFifoMode+0x6e>

  huart->gState = HAL_UART_STATE_BUSY;
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2124      	movs	r1, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800bb4c:	f04f 5c00 	mov.w	ip, #536870912	@ 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb50:	6802      	ldr	r2, [r0, #0]
{
 800bb52:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800bb54:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb58:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800bb5a:	6814      	ldr	r4, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb5c:	ea41 010c 	orr.w	r1, r1, ip
  __HAL_UART_DISABLE(huart);
 800bb60:	f024 0401 	bic.w	r4, r4, #1
 800bb64:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800bb66:	f8c3 c064 	str.w	ip, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb6a:	6011      	str	r1, [r2, #0]
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb6c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb6e:	6892      	ldr	r2, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb70:	4e10      	ldr	r6, [pc, #64]	@ (800bbb4 <HAL_UARTEx_EnableFifoMode+0x74>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb72:	ea4f 7e52 	mov.w	lr, r2, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb76:	f3c1 6c42 	ubfx	ip, r1, #25, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb7a:	4d0f      	ldr	r5, [pc, #60]	@ (800bbb8 <HAL_UARTEx_EnableFifoMode+0x78>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb7c:	f816 100e 	ldrb.w	r1, [r6, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb80:	f816 200c 	ldrb.w	r2, [r6, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb84:	f815 400c 	ldrb.w	r4, [r5, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb88:	f815 600e 	ldrb.w	r6, [r5, lr]
  __HAL_UNLOCK(huart);
 800bb8c:	2000      	movs	r0, #0
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb8e:	00c9      	lsls	r1, r1, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb90:	00d2      	lsls	r2, r2, #3
  huart->gState = HAL_UART_STATE_READY;
 800bb92:	2720      	movs	r7, #32
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb94:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb98:	fbb2 f2f4 	udiv	r2, r2, r4
  __HAL_UNLOCK(huart);
 800bb9c:	f883 0084 	strb.w	r0, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800bba0:	f8c3 7088 	str.w	r7, [r3, #136]	@ 0x88
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bba4:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bba8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800bbae:	2002      	movs	r0, #2
}
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	0802e0e8 	.word	0x0802e0e8
 800bbb8:	0802e0e0 	.word	0x0802e0e0

0800bbbc <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800bbbc:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800bbc0:	2a01      	cmp	r2, #1
 800bbc2:	d037      	beq.n	800bc34 <HAL_UARTEx_SetTxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbc8:	681a      	ldr	r2, [r3, #0]
{
 800bbca:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800bbcc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800bbd2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbd4:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800bbd6:	f020 0001 	bic.w	r0, r0, #1
 800bbda:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbdc:	6890      	ldr	r0, [r2, #8]
 800bbde:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 800bbe2:	4301      	orrs	r1, r0
 800bbe4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbe6:	b315      	cbz	r5, 800bc2e <HAL_UARTEx_SetTxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbe8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbea:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbec:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbf0:	4911      	ldr	r1, [pc, #68]	@ (800bc38 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800bbf2:	4d12      	ldr	r5, [pc, #72]	@ (800bc3c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbf4:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bbf8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bbfc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc00:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc04:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc08:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc0a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc0c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc10:	fbb1 f1f5 	udiv	r1, r1, r5
 800bc14:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800bc18:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800bc1a:	2520      	movs	r5, #32
 800bc1c:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc20:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800bc22:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800bc26:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800bc28:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800bc2c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800bc2e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800bc30:	4608      	mov	r0, r1
 800bc32:	e7ef      	b.n	800bc14 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800bc34:	2002      	movs	r0, #2
}
 800bc36:	4770      	bx	lr
 800bc38:	0802e0e8 	.word	0x0802e0e8
 800bc3c:	0802e0e0 	.word	0x0802e0e0

0800bc40 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800bc40:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 800bc44:	2a01      	cmp	r2, #1
 800bc46:	d037      	beq.n	800bcb8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc4c:	681a      	ldr	r2, [r3, #0]
{
 800bc4e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800bc50:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc54:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800bc56:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc58:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 800bc5a:	f020 0001 	bic.w	r0, r0, #1
 800bc5e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc60:	6890      	ldr	r0, [r2, #8]
 800bc62:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 800bc66:	4301      	orrs	r1, r0
 800bc68:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc6a:	b315      	cbz	r5, 800bcb2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc6c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc6e:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc70:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc74:	4911      	ldr	r1, [pc, #68]	@ (800bcbc <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc76:	4d12      	ldr	r5, [pc, #72]	@ (800bcc0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc78:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc7c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc80:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc84:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc88:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc8c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc8e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc90:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc94:	fbb1 f1f5 	udiv	r1, r1, r5
 800bc98:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800bc9c:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800bc9e:	2520      	movs	r5, #32
 800bca0:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800bca6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800bcaa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800bcac:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800bcb0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800bcb2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	e7ef      	b.n	800bc98 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800bcb8:	2002      	movs	r0, #2
}
 800bcba:	4770      	bx	lr
 800bcbc:	0802e0e8 	.word	0x0802e0e8
 800bcc0:	0802e0e0 	.word	0x0802e0e0

0800bcc4 <ll_sys_enable_specific_irq>:
  * @param  None
  * @retval None
  */
void ll_sys_enable_specific_irq(uint8_t isr_type)
{
  LINKLAYER_PLAT_EnableSpecificIRQ(isr_type);
 800bcc4:	f7f6 bd3a 	b.w	800273c <LINKLAYER_PLAT_EnableSpecificIRQ>

0800bcc8 <ll_sys_disable_specific_irq>:
  * @param  None
  * @retval None
  */
void ll_sys_disable_specific_irq(uint8_t isr_type)
{
  LINKLAYER_PLAT_DisableSpecificIRQ(isr_type);
 800bcc8:	f7f6 bd68 	b.w	800279c <LINKLAYER_PLAT_DisableSpecificIRQ>

0800bccc <ll_sys_enable_os_context_switch>:
}

void ll_sys_enable_os_context_switch(void)
{
  LINKLAYER_PLAT_EnableOSContextSwitch();
 800bccc:	f7f6 bde4 	b.w	8002898 <LINKLAYER_PLAT_EnableOSContextSwitch>

0800bcd0 <ll_sys_disable_os_context_switch>:
}

void ll_sys_disable_os_context_switch(void)
{
  LINKLAYER_PLAT_DisableOSContextSwitch();
 800bcd0:	f7f6 bde4 	b.w	800289c <LINKLAYER_PLAT_DisableOSContextSwitch>

0800bcd4 <ll_sys_dp_slp_wakeup_evt_clbk>:
/**
  * @brief  Link Layer deep sleep wake-up timer callback
  * @param  ptr_arg    pointer passed through the callback
  * @retval LL_SYS status
  */
void ll_sys_dp_slp_wakeup_evt_clbk(void const *ptr_arg){
 800bcd4:	b538      	push	{r3, r4, r5, lr}
  int32_t os_status;

  /* Stop the Link Layer IP DEEP SLEEP wake-up timer */
  os_status = os_timer_stop(radio_dp_slp_tmr_id);
 800bcd6:	4c0f      	ldr	r4, [pc, #60]	@ (800bd14 <ll_sys_dp_slp_wakeup_evt_clbk+0x40>)
 800bcd8:	6820      	ldr	r0, [r4, #0]
 800bcda:	f012 f9eb 	bl	801e0b4 <os_timer_stop>
  if(os_status != SUCCESS){
 800bcde:	b100      	cbz	r0, 800bce2 <ll_sys_dp_slp_wakeup_evt_clbk+0xe>
    return;
  }

  /* Link Layer IP exits from DEEP SLEEP mode */
  ll_sys_dp_slp_exit();
}
 800bce0:	bd38      	pop	{r3, r4, r5, pc}
  if(linklayer_dp_slp_state == LL_SYS_DP_SLP_DISABLED)
 800bce2:	4d0d      	ldr	r5, [pc, #52]	@ (800bd18 <ll_sys_dp_slp_wakeup_evt_clbk+0x44>)
  LINKLAYER_PLAT_DisableRadioIT();
 800bce4:	f7f6 fd94 	bl	8002810 <LINKLAYER_PLAT_DisableRadioIT>
  if(linklayer_dp_slp_state == LL_SYS_DP_SLP_DISABLED)
 800bce8:	782b      	ldrb	r3, [r5, #0]
 800bcea:	b91b      	cbnz	r3, 800bcf4 <ll_sys_dp_slp_wakeup_evt_clbk+0x20>
}
 800bcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LINKLAYER_PLAT_EnableRadioIT();
 800bcf0:	f7f6 bd8a 	b.w	8002808 <LINKLAYER_PLAT_EnableRadioIT>
    if(os_get_tmr_state(radio_dp_slp_tmr_id) != (os_timer_state)osTimerStopped)
 800bcf4:	6820      	ldr	r0, [r4, #0]
 800bcf6:	f012 fa84 	bl	801e202 <os_get_tmr_state>
 800bcfa:	2802      	cmp	r0, #2
 800bcfc:	d002      	beq.n	800bd04 <ll_sys_dp_slp_wakeup_evt_clbk+0x30>
      os_timer_stop(radio_dp_slp_tmr_id);
 800bcfe:	6820      	ldr	r0, [r4, #0]
 800bd00:	f012 f9d8 	bl	801e0b4 <os_timer_stop>
    cmd_status = ll_intf_cmn_le_set_dp_slp_mode(DEEP_SLEEP_DISABLE);
 800bd04:	2000      	movs	r0, #0
 800bd06:	f014 fff8 	bl	8020cfa <ll_intf_cmn_le_set_dp_slp_mode>
    if(cmd_status == SUCCESS)
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d1ee      	bne.n	800bcec <ll_sys_dp_slp_wakeup_evt_clbk+0x18>
      linklayer_dp_slp_state = LL_SYS_DP_SLP_DISABLED;
 800bd0e:	7028      	strb	r0, [r5, #0]
      return_status = LL_SYS_OK;
 800bd10:	e7ec      	b.n	800bcec <ll_sys_dp_slp_wakeup_evt_clbk+0x18>
 800bd12:	bf00      	nop
 800bd14:	20005b44 	.word	0x20005b44
 800bd18:	20005b40 	.word	0x20005b40

0800bd1c <ll_sys_dp_slp_init>:
  radio_dp_slp_tmr_id = os_timer_create((t_timer_callbk)ll_sys_dp_slp_wakeup_evt_clbk, os_timer_once, NULL);
 800bd1c:	2200      	movs	r2, #0
{
 800bd1e:	b510      	push	{r4, lr}
  radio_dp_slp_tmr_id = os_timer_create((t_timer_callbk)ll_sys_dp_slp_wakeup_evt_clbk, os_timer_once, NULL);
 800bd20:	4611      	mov	r1, r2
 800bd22:	4806      	ldr	r0, [pc, #24]	@ (800bd3c <ll_sys_dp_slp_init+0x20>)
 800bd24:	f012 f890 	bl	801de48 <os_timer_create>
 800bd28:	4c05      	ldr	r4, [pc, #20]	@ (800bd40 <ll_sys_dp_slp_init+0x24>)
  os_timer_set_prio(radio_dp_slp_tmr_id, hg_prio_tmr);
 800bd2a:	2101      	movs	r1, #1
  radio_dp_slp_tmr_id = os_timer_create((t_timer_callbk)ll_sys_dp_slp_wakeup_evt_clbk, os_timer_once, NULL);
 800bd2c:	6020      	str	r0, [r4, #0]
  os_timer_set_prio(radio_dp_slp_tmr_id, hg_prio_tmr);
 800bd2e:	f012 f8d4 	bl	801deda <os_timer_set_prio>
  if (radio_dp_slp_tmr_id != NULL)
 800bd32:	6820      	ldr	r0, [r4, #0]
}
 800bd34:	fab0 f080 	clz	r0, r0
 800bd38:	0940      	lsrs	r0, r0, #5
 800bd3a:	bd10      	pop	{r4, pc}
 800bd3c:	0800bcd5 	.word	0x0800bcd5
 800bd40:	20005b44 	.word	0x20005b44

0800bd44 <ll_sys_dp_slp_exit>:
ll_sys_status_t ll_sys_dp_slp_exit(void){
 800bd44:	b538      	push	{r3, r4, r5, lr}
  if(linklayer_dp_slp_state == LL_SYS_DP_SLP_DISABLED)
 800bd46:	4c12      	ldr	r4, [pc, #72]	@ (800bd90 <ll_sys_dp_slp_exit+0x4c>)
  LINKLAYER_PLAT_DisableRadioIT();
 800bd48:	f7f6 fd62 	bl	8002810 <LINKLAYER_PLAT_DisableRadioIT>
  if(linklayer_dp_slp_state == LL_SYS_DP_SLP_DISABLED)
 800bd4c:	7823      	ldrb	r3, [r4, #0]
 800bd4e:	b923      	cbnz	r3, 800bd5a <ll_sys_dp_slp_exit+0x16>
    return_status = LL_SYS_OK;
 800bd50:	2400      	movs	r4, #0
  LINKLAYER_PLAT_EnableRadioIT();
 800bd52:	f7f6 fd59 	bl	8002808 <LINKLAYER_PLAT_EnableRadioIT>
}
 800bd56:	4620      	mov	r0, r4
 800bd58:	bd38      	pop	{r3, r4, r5, pc}
    if(os_get_tmr_state(radio_dp_slp_tmr_id) != (os_timer_state)osTimerStopped)
 800bd5a:	4d0e      	ldr	r5, [pc, #56]	@ (800bd94 <ll_sys_dp_slp_exit+0x50>)
 800bd5c:	6828      	ldr	r0, [r5, #0]
 800bd5e:	f012 fa50 	bl	801e202 <os_get_tmr_state>
 800bd62:	2802      	cmp	r0, #2
 800bd64:	d10a      	bne.n	800bd7c <ll_sys_dp_slp_exit+0x38>
    cmd_status = ll_intf_cmn_le_set_dp_slp_mode(DEEP_SLEEP_DISABLE);
 800bd66:	2000      	movs	r0, #0
 800bd68:	f014 ffc7 	bl	8020cfa <ll_intf_cmn_le_set_dp_slp_mode>
    if(cmd_status == SUCCESS)
 800bd6c:	b908      	cbnz	r0, 800bd72 <ll_sys_dp_slp_exit+0x2e>
      linklayer_dp_slp_state = LL_SYS_DP_SLP_DISABLED;
 800bd6e:	7020      	strb	r0, [r4, #0]
      return_status = LL_SYS_OK;
 800bd70:	e7ee      	b.n	800bd50 <ll_sys_dp_slp_exit+0xc>
  ll_sys_status_t return_status = LL_SYS_ERROR;
 800bd72:	2401      	movs	r4, #1
  LINKLAYER_PLAT_EnableRadioIT();
 800bd74:	f7f6 fd48 	bl	8002808 <LINKLAYER_PLAT_EnableRadioIT>
}
 800bd78:	4620      	mov	r0, r4
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
      os_timer_stop(radio_dp_slp_tmr_id);
 800bd7c:	6828      	ldr	r0, [r5, #0]
 800bd7e:	f012 f999 	bl	801e0b4 <os_timer_stop>
    cmd_status = ll_intf_cmn_le_set_dp_slp_mode(DEEP_SLEEP_DISABLE);
 800bd82:	2000      	movs	r0, #0
 800bd84:	f014 ffb9 	bl	8020cfa <ll_intf_cmn_le_set_dp_slp_mode>
    if(cmd_status == SUCCESS)
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d1f2      	bne.n	800bd72 <ll_sys_dp_slp_exit+0x2e>
 800bd8c:	e7ef      	b.n	800bd6e <ll_sys_dp_slp_exit+0x2a>
 800bd8e:	bf00      	nop
 800bd90:	20005b40 	.word	0x20005b40
 800bd94:	20005b44 	.word	0x20005b44

0800bd98 <ll_sys_init>:
  * @param  None
  * @retval None
  */
void ll_sys_init()
{
  LINKLAYER_PLAT_ClockInit();	
 800bd98:	f7f6 bc00 	b.w	800259c <LINKLAYER_PLAT_ClockInit>

0800bd9c <ll_sys_delay_us>:
  * @param  None
  * @retval None
  */
void ll_sys_delay_us(uint32_t delay)
{
  LINKLAYER_PLAT_DelayUs(delay);
 800bd9c:	f7f6 bc12 	b.w	80025c4 <LINKLAYER_PLAT_DelayUs>

0800bda0 <ll_sys_assert>:
  * @param  None
  * @retval None
  */
void ll_sys_assert(uint8_t condition)
{
  LINKLAYER_PLAT_Assert(condition);
 800bda0:	f7f6 bc26 	b.w	80025f0 <LINKLAYER_PLAT_Assert>

0800bda4 <ll_sys_radio_ack_ctrl>:
  * @param  None
  * @retval None
  */
void ll_sys_radio_ack_ctrl(uint8_t enable)
{
  LINKLAYER_PLAT_AclkCtrl(enable);
 800bda4:	f7f6 bc26 	b.w	80025f4 <LINKLAYER_PLAT_AclkCtrl>

0800bda8 <ll_sys_get_rng>:
  * @param  None
  * @retval None
  */
void ll_sys_get_rng(uint8_t *ptr_rnd, uint32_t len)
{
  LINKLAYER_PLAT_GetRNG(ptr_rnd, len);
 800bda8:	f7f6 bc32 	b.w	8002610 <LINKLAYER_PLAT_GetRNG>

0800bdac <ll_sys_setup_radio_intr>:
  * @param  intr_cb    radio interrupt callback to link with the radio IRQ
  * @retval None
  */
void ll_sys_setup_radio_intr(void (*intr_cb)())
{
  LINKLAYER_PLAT_SetupRadioIT(intr_cb);
 800bdac:	f7f6 bc60 	b.w	8002670 <LINKLAYER_PLAT_SetupRadioIT>

0800bdb0 <ll_sys_setup_radio_sw_low_intr>:
  *                    with the defined interrupt vector
  * @retval None
  */
void ll_sys_setup_radio_sw_low_intr(void (*intr_cb)())
{
  LINKLAYER_PLAT_SetupSwLowIT(intr_cb);
 800bdb0:	f7f6 bc6e 	b.w	8002690 <LINKLAYER_PLAT_SetupSwLowIT>

0800bdb4 <ll_sys_radio_sw_low_intr_trigger>:
  * @param  None
  * @retval None
  */
void ll_sys_radio_sw_low_intr_trigger(uint8_t priority)
{
  LINKLAYER_PLAT_TriggerSwLowIT(priority);
 800bdb4:	f7f6 bc7c 	b.w	80026b0 <LINKLAYER_PLAT_TriggerSwLowIT>

0800bdb8 <ll_sys_radio_evt_not>:
  * @param  start      start/end of radio event
  * @retval None
  */
void ll_sys_radio_evt_not(uint8_t start)
{
  if(start)
 800bdb8:	b108      	cbz	r0, 800bdbe <ll_sys_radio_evt_not+0x6>
  {
    LINKLAYER_PLAT_StartRadioEvt();
 800bdba:	f7f6 bd2d 	b.w	8002818 <LINKLAYER_PLAT_StartRadioEvt>
  }
  
  else
  {
    LINKLAYER_PLAT_StopRadioEvt();
 800bdbe:	f7f6 bd3d 	b.w	800283c <LINKLAYER_PLAT_StopRadioEvt>
 800bdc2:	bf00      	nop

0800bdc4 <ll_sys_rco_clbr_not>:
  * @param  start      start/end of RCO calibration
  * @retval None
  */
void ll_sys_rco_clbr_not(uint8_t start)
{
  if(start)
 800bdc4:	b108      	cbz	r0, 800bdca <ll_sys_rco_clbr_not+0x6>
  {
    LINKLAYER_PLAT_RCOStartClbr();
 800bdc6:	f7f6 bd4d 	b.w	8002864 <LINKLAYER_PLAT_RCOStartClbr>
  }
  
  else
  {
    LINKLAYER_PLAT_RCOStopClbr();
 800bdca:	f7f6 bd57 	b.w	800287c <LINKLAYER_PLAT_RCOStopClbr>
 800bdce:	bf00      	nop

0800bdd0 <ll_sys_request_temperature>:
  * @param  None
  * @retval None
  */
void ll_sys_request_temperature(void)
{
   LINKLAYER_PLAT_RequestTemperature();
 800bdd0:	f7f6 bd60 	b.w	8002894 <LINKLAYER_PLAT_RequestTemperature>

0800bdd4 <ll_sys_schldr_timing_update_not>:
  }
}

void ll_sys_schldr_timing_update_not(Evnt_timing_t * p_evnt_timing)
{
  LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT(p_evnt_timing);
 800bdd4:	f7f6 bd64 	b.w	80028a0 <LINKLAYER_PLAT_SCHLDR_TIMING_UPDATE_NOT>

0800bdd8 <ll_sys_get_concurrent_state_machines_num>:
  * @retval Supported number of concurrent state machines 
  */
uint8_t ll_sys_get_concurrent_state_machines_num(void)
{
  return MAX_NUM_CNCRT_STAT_MCHNS;
}
 800bdd8:	2008      	movs	r0, #8
 800bdda:	4770      	bx	lr

0800bddc <ll_sys_bg_process>:
{
 800bddc:	b508      	push	{r3, lr}
  if(emngr_can_mcu_sleep() == 0)
 800bdde:	f011 fe45 	bl	801da6c <emngr_can_mcu_sleep>
 800bde2:	b118      	cbz	r0, 800bdec <ll_sys_bg_process+0x10>
  if(emngr_can_mcu_sleep() == 0)
 800bde4:	f011 fe42 	bl	801da6c <emngr_can_mcu_sleep>
 800bde8:	b150      	cbz	r0, 800be00 <ll_sys_bg_process+0x24>
}
 800bdea:	bd08      	pop	{r3, pc}
    ll_sys_dp_slp_exit();
 800bdec:	f7ff ffaa 	bl	800bd44 <ll_sys_dp_slp_exit>
    emngr_handle_all_events();
 800bdf0:	f011 fd72 	bl	801d8d8 <emngr_handle_all_events>
    HostStack_Process();
 800bdf4:	f7f6 fba2 	bl	800253c <HostStack_Process>
  if(emngr_can_mcu_sleep() == 0)
 800bdf8:	f011 fe38 	bl	801da6c <emngr_can_mcu_sleep>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d1f4      	bne.n	800bdea <ll_sys_bg_process+0xe>
}
 800be00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ll_sys_schedule_bg_process();
 800be04:	f7f6 bd56 	b.w	80028b4 <ll_sys_schedule_bg_process>

0800be08 <ll_sys_event_missed_cb>:

static void ll_sys_dependencies_init(void);
#ifdef BLE
static void ll_sys_event_missed_cb( ble_buff_hdr_t* ptr_evnt_hdr )
{
  missed_hci_event_flag = 1;
 800be08:	2201      	movs	r2, #1
 800be0a:	4b01      	ldr	r3, [pc, #4]	@ (800be10 <ll_sys_event_missed_cb+0x8>)
 800be0c:	701a      	strb	r2, [r3, #0]
}
 800be0e:	4770      	bx	lr
 800be10:	20005b49 	.word	0x20005b49

0800be14 <ll_sys_ble_cntrl_init>:
  * @param  None
  * @retval None
  */
void ll_sys_ble_cntrl_init(hst_cbk hostCallback)
{ 
  const struct hci_dispatch_tbl* p_hci_dis_tbl = NULL;
 800be14:	2300      	movs	r3, #0
{ 
 800be16:	b510      	push	{r4, lr}
 800be18:	4604      	mov	r4, r0
 800be1a:	b082      	sub	sp, #8
  
  hci_get_dis_tbl( &p_hci_dis_tbl );
 800be1c:	a801      	add	r0, sp, #4
  const struct hci_dispatch_tbl* p_hci_dis_tbl = NULL;
 800be1e:	9301      	str	r3, [sp, #4]
  hci_get_dis_tbl( &p_hci_dis_tbl );
 800be20:	f003 fc5a 	bl	800f6d8 <hci_get_dis_tbl>
  
  ll_intf_init(p_hci_dis_tbl);
 800be24:	9801      	ldr	r0, [sp, #4]
 800be26:	f004 faf8 	bl	801041a <ll_intf_init>

  ll_intf_rgstr_hst_cbk(hostCallback);
 800be2a:	4620      	mov	r0, r4
 800be2c:	f004 fd5c 	bl	80108e8 <ll_intf_rgstr_hst_cbk>

  ll_intf_rgstr_hst_cbk_ll_queue_full( ll_sys_event_missed_cb );
 800be30:	480a      	ldr	r0, [pc, #40]	@ (800be5c <ll_sys_ble_cntrl_init+0x48>)
 800be32:	f004 fd66 	bl	8010902 <ll_intf_rgstr_hst_cbk_ll_queue_full>
{
  static uint8_t is_ll_initialized = 0;
  ll_sys_status_t dp_slp_status;
  
  /* Ensure Link Layer resources are created only once */
  if (is_ll_initialized == 1) {
 800be36:	4b0a      	ldr	r3, [pc, #40]	@ (800be60 <ll_sys_ble_cntrl_init+0x4c>)
 800be38:	781a      	ldrb	r2, [r3, #0]
 800be3a:	2a01      	cmp	r2, #1
 800be3c:	d00c      	beq.n	800be58 <ll_sys_ble_cntrl_init+0x44>
    return;
  }
  is_ll_initialized = 1;
 800be3e:	2201      	movs	r2, #1
 800be40:	701a      	strb	r2, [r3, #0]
  
  /* Deep sleep feature initialization */
  dp_slp_status = ll_sys_dp_slp_init();
 800be42:	f7ff ff6b 	bl	800bd1c <ll_sys_dp_slp_init>
  ll_sys_assert(dp_slp_status == LL_SYS_OK); 
 800be46:	fab0 f080 	clz	r0, r0
 800be4a:	0940      	lsrs	r0, r0, #5
 800be4c:	f7ff ffa8 	bl	800bda0 <ll_sys_assert>
  
  /* Background task initialization */
  ll_sys_bg_process_init();
 800be50:	f7f6 fd28 	bl	80028a4 <ll_sys_bg_process_init>
  
  /* Link Layer user parameters application */
  ll_sys_config_params();
 800be54:	f7f6 fd36 	bl	80028c4 <ll_sys_config_params>
}
 800be58:	b002      	add	sp, #8
 800be5a:	bd10      	pop	{r4, pc}
 800be5c:	0800be09 	.word	0x0800be09
 800be60:	20005b48 	.word	0x20005b48

0800be64 <SVCCTL_Init>:
{

  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	4803      	ldr	r0, [pc, #12]	@ (800be74 <SVCCTL_Init+0x10>)
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800be68:	4903      	ldr	r1, [pc, #12]	@ (800be78 <SVCCTL_Init+0x14>)
  SVCCTL_Handler.NbreOfRegisteredHandler = 0;
 800be6a:	4a04      	ldr	r2, [pc, #16]	@ (800be7c <SVCCTL_Init+0x18>)
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800be6c:	7703      	strb	r3, [r0, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800be6e:	700b      	strb	r3, [r1, #0]
  SVCCTL_Handler.NbreOfRegisteredHandler = 0;
 800be70:	7013      	strb	r3, [r2, #0]

  return;
}
 800be72:	4770      	bx	lr
 800be74:	20005b54 	.word	0x20005b54
 800be78:	20005b50 	.word	0x20005b50
 800be7c:	20005b4c 	.word	0x20005b4c

0800be80 <SVCCTL_RegisterSvcHandler>:
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800be80:	4b03      	ldr	r3, [pc, #12]	@ (800be90 <SVCCTL_RegisterSvcHandler+0x10>)
 800be82:	7f1a      	ldrb	r2, [r3, #28]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800be84:	1c51      	adds	r1, r2, #1
 800be86:	7719      	strb	r1, [r3, #28]
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800be88:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
}
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20005b54 	.word	0x20005b54

0800be94 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800be94:	b570      	push	{r4, r5, r6, lr}
#endif

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
  event_notification_status = SVCCTL_EvtNotAck;

  switch (event_pckt->evt)
 800be96:	7843      	ldrb	r3, [r0, #1]
{
 800be98:	4604      	mov	r4, r0
  switch (event_pckt->evt)
 800be9a:	2bff      	cmp	r3, #255	@ 0xff
 800be9c:	d106      	bne.n	800beac <SVCCTL_UserEvtRx+0x18>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800be9e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800bea2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bea6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800beaa:	d004      	beq.n	800beb6 <SVCCTL_UserEvtRx+0x22>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800beac:	4620      	mov	r0, r4
      return_status = SVCCTL_UserEvtFlowEnable;
      break;
  }

  return (return_status);
}
 800beae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return_status = SVCCTL_App_Notification(pckt);
 800beb2:	f7f5 bc8f 	b.w	80017d4 <SVCCTL_App_Notification>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800beb6:	4e0b      	ldr	r6, [pc, #44]	@ (800bee4 <SVCCTL_UserEvtRx+0x50>)
 800beb8:	7f33      	ldrb	r3, [r6, #28]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d0f6      	beq.n	800beac <SVCCTL_UserEvtRx+0x18>
 800bebe:	2500      	movs	r5, #0
 800bec0:	462b      	mov	r3, r5
 800bec2:	e002      	b.n	800beca <SVCCTL_UserEvtRx+0x36>
 800bec4:	7f32      	ldrb	r2, [r6, #28]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d9f0      	bls.n	800beac <SVCCTL_UserEvtRx+0x18>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800beca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800bece:	4620      	mov	r0, r4
 800bed0:	4798      	blx	r3
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800bed2:	3501      	adds	r5, #1
 800bed4:	b2eb      	uxtb	r3, r5
            if (event_notification_status != SVCCTL_EvtNotAck)
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d0f4      	beq.n	800bec4 <SVCCTL_UserEvtRx+0x30>
}
 800beda:	3802      	subs	r0, #2
 800bedc:	bf18      	it	ne
 800bede:	2001      	movne	r0, #1
 800bee0:	bd70      	pop	{r4, r5, r6, pc}
 800bee2:	bf00      	nop
 800bee4:	20005b54 	.word	0x20005b54

0800bee8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800bee8:	b510      	push	{r4, lr}
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800beea:	2218      	movs	r2, #24
 800beec:	2100      	movs	r1, #0
 800beee:	4807      	ldr	r0, [pc, #28]	@ (800bf0c <UTIL_ADV_TRACE_Init+0x24>)
 800bef0:	f000 f92c 	bl	800c14c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800bef4:	4806      	ldr	r0, [pc, #24]	@ (800bf10 <UTIL_ADV_TRACE_Init+0x28>)
 800bef6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800befa:	2100      	movs	r1, #0
 800befc:	f000 f926 	bl	800c14c <UTIL_MEM_set_8>
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
}
 800bf00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800bf04:	4b03      	ldr	r3, [pc, #12]	@ (800bf14 <UTIL_ADV_TRACE_Init+0x2c>)
 800bf06:	4804      	ldr	r0, [pc, #16]	@ (800bf18 <UTIL_ADV_TRACE_Init+0x30>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4718      	bx	r3
 800bf0c:	20006b74 	.word	0x20006b74
 800bf10:	20005b74 	.word	0x20005b74
 800bf14:	0802d7b8 	.word	0x0802d7b8
 800bf18:	0800c0a1 	.word	0x0800c0a1

0800bf1c <UTIL_ADV_TRACE_StartRxProcess>:
}

UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_StartRxProcess(void (*UserCallback)(uint8_t *PData, uint16_t Size, uint8_t Error))
{
  /* start the RX process */
  return UTIL_TraceDriver.StartRx(UserCallback);
 800bf1c:	4b01      	ldr	r3, [pc, #4]	@ (800bf24 <UTIL_ADV_TRACE_StartRxProcess+0x8>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	4718      	bx	r3
 800bf22:	bf00      	nop
 800bf24:	0802d7b8 	.word	0x0802d7b8

0800bf28 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800bf28:	b530      	push	{r4, r5, lr}
 800bf2a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bf2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf30:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800bf32:	4c28      	ldr	r4, [pc, #160]	@ (800bfd4 <TRACE_Send+0xac>)
  if(TRACE_IsLocked() == 0u)
 800bf34:	8ae2      	ldrh	r2, [r4, #22]
 800bf36:	b9fa      	cbnz	r2, 800bf78 <TRACE_Send+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bf38:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf3c:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock++;
 800bf3e:	8ae3      	ldrh	r3, [r4, #22]
 800bf40:	3301      	adds	r3, #1
 800bf42:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf44:	f380 8810 	msr	PRIMASK, r0
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800bf48:	8a23      	ldrh	r3, [r4, #16]
 800bf4a:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 800bf4e:	4563      	cmp	r3, ip
 800bf50:	d017      	beq.n	800bf82 <TRACE_Send+0x5a>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800bf52:	78a0      	ldrb	r0, [r4, #2]
 800bf54:	2801      	cmp	r0, #1
 800bf56:	d02d      	beq.n	800bfb4 <TRACE_Send+0x8c>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bf58:	4d1f      	ldr	r5, [pc, #124]	@ (800bfd8 <TRACE_Send+0xb0>)
 800bf5a:	441d      	add	r5, r3
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800bf5c:	b310      	cbz	r0, 800bfa4 <TRACE_Send+0x7c>
 800bf5e:	f381 8810 	msr	PRIMASK, r1
      UTIL_ADV_TRACE_PreSendHook();
 800bf62:	f7f4 fc39 	bl	80007d8 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bf66:	4628      	mov	r0, r5
 800bf68:	4b1c      	ldr	r3, [pc, #112]	@ (800bfdc <TRACE_Send+0xb4>)
 800bf6a:	8aa1      	ldrh	r1, [r4, #20]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	9301      	str	r3, [sp, #4]
}
 800bf70:	b003      	add	sp, #12
 800bf72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800bf76:	4718      	bx	r3
 800bf78:	f381 8810 	msr	PRIMASK, r1
}
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	b003      	add	sp, #12
 800bf80:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bf82:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bf86:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800bf88:	8ae3      	ldrh	r3, [r4, #22]
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf8e:	f382 8810 	msr	PRIMASK, r2
 800bf92:	f381 8810 	msr	PRIMASK, r1
}
 800bf96:	2000      	movs	r0, #0
 800bf98:	b003      	add	sp, #12
 800bf9a:	bd30      	pop	{r4, r5, pc}
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	4d0e      	ldr	r5, [pc, #56]	@ (800bfd8 <TRACE_Send+0xb0>)
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800bfa0:	70a2      	strb	r2, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800bfa2:	8222      	strh	r2, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800bfa4:	459c      	cmp	ip, r3
 800bfa6:	d911      	bls.n	800bfcc <TRACE_Send+0xa4>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800bfa8:	ebac 0c03 	sub.w	ip, ip, r3
 800bfac:	fa1f f38c 	uxth.w	r3, ip
 800bfb0:	82a3      	strh	r3, [r4, #20]
 800bfb2:	e7d4      	b.n	800bf5e <TRACE_Send+0x36>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800bfb4:	2002      	movs	r0, #2
 800bfb6:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bfb8:	8820      	ldrh	r0, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800bfba:	8022      	strh	r2, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800bfbc:	1ac2      	subs	r2, r0, r3
 800bfbe:	b292      	uxth	r2, r2
 800bfc0:	82a2      	strh	r2, [r4, #20]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	d0ea      	beq.n	800bf9c <TRACE_Send+0x74>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800bfc6:	4d04      	ldr	r5, [pc, #16]	@ (800bfd8 <TRACE_Send+0xb0>)
 800bfc8:	441d      	add	r5, r3
 800bfca:	e7c8      	b.n	800bf5e <TRACE_Send+0x36>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800bfcc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	e7ed      	b.n	800bfb0 <TRACE_Send+0x88>
 800bfd4:	20006b74 	.word	0x20006b74
 800bfd8:	20005b74 	.word	0x20005b74
 800bfdc:	0802d7b8 	.word	0x0802d7b8

0800bfe0 <UTIL_ADV_TRACE_Send>:
{
 800bfe0:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bfe2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bfe6:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock++;
 800bfe8:	4d2b      	ldr	r5, [pc, #172]	@ (800c098 <UTIL_ADV_TRACE_Send+0xb8>)
 800bfea:	8aeb      	ldrh	r3, [r5, #22]
 800bfec:	3301      	adds	r3, #1
 800bfee:	82eb      	strh	r3, [r5, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bff0:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bff4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bff8:	b672      	cpsid	i
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800bffa:	8a6b      	ldrh	r3, [r5, #18]
 800bffc:	8a2a      	ldrh	r2, [r5, #16]
 800bffe:	4293      	cmp	r3, r2
 800c000:	d02f      	beq.n	800c062 <UTIL_ADV_TRACE_Send+0x82>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c002:	d821      	bhi.n	800c048 <UTIL_ADV_TRACE_Send+0x68>
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800c004:	1ad2      	subs	r2, r2, r3
  if(freesize > Size)
 800c006:	b292      	uxth	r2, r2
 800c008:	4291      	cmp	r1, r2
 800c00a:	d237      	bcs.n	800c07c <UTIL_ADV_TRACE_Send+0x9c>
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c00c:	185a      	adds	r2, r3, r1
 800c00e:	b292      	uxth	r2, r2
 800c010:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800c014:	826a      	strh	r2, [r5, #18]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c016:	f384 8810 	msr	PRIMASK, r4
    for (idx = 0u; idx < Length; idx++)
 800c01a:	b151      	cbz	r1, 800c032 <UTIL_ADV_TRACE_Send+0x52>
 800c01c:	4c1f      	ldr	r4, [pc, #124]	@ (800c09c <UTIL_ADV_TRACE_Send+0xbc>)
 800c01e:	4401      	add	r1, r0
      ADV_TRACE_Buffer[writepos] = pData[idx];
 800c020:	f810 cb01 	ldrb.w	ip, [r0], #1
      writepos = (uint16_t) ((writepos + 1u) % UTIL_ADV_TRACE_FIFO_SIZE);
 800c024:	1c5a      	adds	r2, r3, #1
    for (idx = 0u; idx < Length; idx++)
 800c026:	4288      	cmp	r0, r1
      ADV_TRACE_Buffer[writepos] = pData[idx];
 800c028:	f804 c003 	strb.w	ip, [r4, r3]
      writepos = (uint16_t) ((writepos + 1u) % UTIL_ADV_TRACE_FIFO_SIZE);
 800c02c:	f3c2 030b 	ubfx	r3, r2, #0, #12
    for (idx = 0u; idx < Length; idx++)
 800c030:	d1f6      	bne.n	800c020 <UTIL_ADV_TRACE_Send+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c032:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c036:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800c038:	8aeb      	ldrh	r3, [r5, #22]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	82eb      	strh	r3, [r5, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c03e:	f382 8810 	msr	PRIMASK, r2
}
 800c042:	bc30      	pop	{r4, r5}
    ret = TRACE_Send();
 800c044:	f7ff bf70 	b.w	800bf28 <TRACE_Send>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c048:	f5c3 5c80 	rsb	ip, r3, #4096	@ 0x1000
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800c04c:	fa1f fc8c 	uxth.w	ip, ip
 800c050:	4561      	cmp	r1, ip
 800c052:	d3db      	bcc.n	800c00c <UTIL_ADV_TRACE_Send+0x2c>
 800c054:	4291      	cmp	r1, r2
 800c056:	d211      	bcs.n	800c07c <UTIL_ADV_TRACE_Send+0x9c>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c058:	2201      	movs	r2, #1
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c05a:	802b      	strh	r3, [r5, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c05c:	70aa      	strb	r2, [r5, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c05e:	2300      	movs	r3, #0
 800c060:	e7d4      	b.n	800c00c <UTIL_ADV_TRACE_Send+0x2c>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800c062:	f5c3 5280 	rsb	r2, r3, #4096	@ 0x1000
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800c066:	b292      	uxth	r2, r2
 800c068:	4291      	cmp	r1, r2
 800c06a:	d3cf      	bcc.n	800c00c <UTIL_ADV_TRACE_Send+0x2c>
 800c06c:	4299      	cmp	r1, r3
 800c06e:	d205      	bcs.n	800c07c <UTIL_ADV_TRACE_Send+0x9c>
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c070:	802b      	strh	r3, [r5, #0]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c072:	2301      	movs	r3, #1
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c074:	460a      	mov	r2, r1
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800c076:	70ab      	strb	r3, [r5, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800c078:	2300      	movs	r3, #0
 800c07a:	e7c9      	b.n	800c010 <UTIL_ADV_TRACE_Send+0x30>
 800c07c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c080:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c084:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800c086:	8aeb      	ldrh	r3, [r5, #22]
 800c088:	3b01      	subs	r3, #1
 800c08a:	82eb      	strh	r3, [r5, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c08c:	f382 8810 	msr	PRIMASK, r2
}
 800c090:	f06f 0002 	mvn.w	r0, #2
 800c094:	bc30      	pop	{r4, r5}
 800c096:	4770      	bx	lr
 800c098:	20006b74 	.word	0x20006b74
 800c09c:	20005b74 	.word	0x20005b74

0800c0a0 <TRACE_TxCpltCallback>:
{
 800c0a0:	b510      	push	{r4, lr}
 800c0a2:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c0a4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c0a8:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800c0aa:	4c25      	ldr	r4, [pc, #148]	@ (800c140 <TRACE_TxCpltCallback+0xa0>)
 800c0ac:	78a2      	ldrb	r2, [r4, #2]
 800c0ae:	2a02      	cmp	r2, #2
 800c0b0:	d019      	beq.n	800c0e6 <TRACE_TxCpltCallback+0x46>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800c0b2:	8a23      	ldrh	r3, [r4, #16]
 800c0b4:	8aa1      	ldrh	r1, [r4, #20]
 800c0b6:	440b      	add	r3, r1
 800c0b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800c0bc:	8a61      	ldrh	r1, [r4, #18]
 800c0be:	8223      	strh	r3, [r4, #16]
 800c0c0:	4299      	cmp	r1, r3
 800c0c2:	d002      	beq.n	800c0ca <TRACE_TxCpltCallback+0x2a>
 800c0c4:	8ae0      	ldrh	r0, [r4, #22]
 800c0c6:	2801      	cmp	r0, #1
 800c0c8:	d011      	beq.n	800c0ee <TRACE_TxCpltCallback+0x4e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0ca:	f38c 8810 	msr	PRIMASK, ip
    UTIL_ADV_TRACE_PostSendHook();
 800c0ce:	f7f4 fb85 	bl	80007dc <UTIL_ADV_TRACE_PostSendHook>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c0d2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c0d6:	b672      	cpsid	i
  ADV_TRACE_Ctx.TraceLock--;
 800c0d8:	8ae3      	ldrh	r3, [r4, #22]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	82e3      	strh	r3, [r4, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0de:	f382 8810 	msr	PRIMASK, r2
}
 800c0e2:	b002      	add	sp, #8
 800c0e4:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	70a3      	strb	r3, [r4, #2]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800c0ec:	e7e6      	b.n	800c0bc <TRACE_TxCpltCallback+0x1c>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800c0ee:	2a01      	cmp	r2, #1
 800c0f0:	d011      	beq.n	800c116 <TRACE_TxCpltCallback+0x76>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c0f2:	4814      	ldr	r0, [pc, #80]	@ (800c144 <TRACE_TxCpltCallback+0xa4>)
 800c0f4:	4418      	add	r0, r3
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c0f6:	b922      	cbnz	r2, 800c102 <TRACE_TxCpltCallback+0x62>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	d91a      	bls.n	800c132 <TRACE_TxCpltCallback+0x92>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800c0fc:	1ac9      	subs	r1, r1, r3
 800c0fe:	b28b      	uxth	r3, r1
 800c100:	82a3      	strh	r3, [r4, #20]
 800c102:	f38c 8810 	msr	PRIMASK, ip
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c106:	4b10      	ldr	r3, [pc, #64]	@ (800c148 <TRACE_TxCpltCallback+0xa8>)
 800c108:	8aa1      	ldrh	r1, [r4, #20]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	9301      	str	r3, [sp, #4]
}
 800c10e:	b002      	add	sp, #8
 800c110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800c114:	4718      	bx	r3
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800c116:	2002      	movs	r0, #2
 800c118:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c11a:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c11c:	8822      	ldrh	r2, [r4, #0]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800c11e:	8020      	strh	r0, [r4, #0]
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800c120:	1ad2      	subs	r2, r2, r3
 800c122:	b292      	uxth	r2, r2
 800c124:	82a2      	strh	r2, [r4, #20]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800c126:	b942      	cbnz	r2, 800c13a <TRACE_TxCpltCallback+0x9a>
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c128:	4613      	mov	r3, r2
 800c12a:	4806      	ldr	r0, [pc, #24]	@ (800c144 <TRACE_TxCpltCallback+0xa4>)
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800c12c:	70a2      	strb	r2, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800c12e:	8222      	strh	r2, [r4, #16]
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800c130:	e7e2      	b.n	800c0f8 <TRACE_TxCpltCallback+0x58>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800c132:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800c136:	b29b      	uxth	r3, r3
 800c138:	e7e2      	b.n	800c100 <TRACE_TxCpltCallback+0x60>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800c13a:	4802      	ldr	r0, [pc, #8]	@ (800c144 <TRACE_TxCpltCallback+0xa4>)
 800c13c:	4418      	add	r0, r3
 800c13e:	e7e0      	b.n	800c102 <TRACE_TxCpltCallback+0x62>
 800c140:	20006b74 	.word	0x20006b74
 800c144:	20005b74 	.word	0x20005b74
 800c148:	0802d7b8 	.word	0x0802d7b8

0800c14c <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800c14c:	b10a      	cbz	r2, 800c152 <UTIL_MEM_set_8+0x6>
  {
    *dst8++ = value;
 800c14e:	f01f bbd3 	b.w	802b8f8 <memset>
  }
}
 800c152:	4770      	bx	lr

0800c154 <UTIL_SEQ_RegTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c154:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c158:	b672      	cpsid	i
  if (value == 0U)
 800c15a:	b150      	cbz	r0, 800c172 <UTIL_SEQ_RegTask+0x1e>
  return __builtin_clz(value);
 800c15c:	fab0 f080 	clz	r0, r0
void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c160:	4907      	ldr	r1, [pc, #28]	@ (800c180 <UTIL_SEQ_RegTask+0x2c>)
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  return (uint8_t)(31 -__CLZ( Value ));
 800c162:	f1c0 001f 	rsb	r0, r0, #31
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c166:	b2c0      	uxtb	r0, r0
 800c168:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c16c:	f383 8810 	msr	PRIMASK, r3
}
 800c170:	4770      	bx	lr
 800c172:	20ff      	movs	r0, #255	@ 0xff
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c174:	4902      	ldr	r1, [pc, #8]	@ (800c180 <UTIL_SEQ_RegTask+0x2c>)
 800c176:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
 800c17a:	f383 8810 	msr	PRIMASK, r3
}
 800c17e:	4770      	bx	lr
 800c180:	20006b9c 	.word	0x20006b9c

0800c184 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c184:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c188:	b672      	cpsid	i
  TaskSet |= TaskId_bm;
 800c18a:	4a06      	ldr	r2, [pc, #24]	@ (800c1a4 <UTIL_SEQ_SetTask+0x20>)
 800c18c:	6813      	ldr	r3, [r2, #0]
 800c18e:	4303      	orrs	r3, r0
 800c190:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c192:	4a05      	ldr	r2, [pc, #20]	@ (800c1a8 <UTIL_SEQ_SetTask+0x24>)
 800c194:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 800c198:	4303      	orrs	r3, r0
 800c19a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c19e:	f38c 8810 	msr	PRIMASK, ip
}
 800c1a2:	4770      	bx	lr
 800c1a4:	20006c28 	.word	0x20006c28
 800c1a8:	20006b8c 	.word	0x20006b8c

0800c1ac <UTIL_SEQ_SetEvt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c1ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c1b0:	b672      	cpsid	i
  EvtSet |= EvtId_bm;
 800c1b2:	4a03      	ldr	r2, [pc, #12]	@ (800c1c0 <UTIL_SEQ_SetEvt+0x14>)
 800c1b4:	6813      	ldr	r3, [r2, #0]
 800c1b6:	4318      	orrs	r0, r3
 800c1b8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ba:	f381 8810 	msr	PRIMASK, r1
}
 800c1be:	4770      	bx	lr
 800c1c0:	20006c24 	.word	0x20006c24

0800c1c4 <UTIL_SEQ_Run>:
{
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  super_mask_backup = SuperMask;
 800c1c8:	4e54      	ldr	r6, [pc, #336]	@ (800c31c <UTIL_SEQ_Run+0x158>)
  local_taskset = TaskSet;
 800c1ca:	f8df b160 	ldr.w	fp, [pc, #352]	@ 800c32c <UTIL_SEQ_Run+0x168>
  local_evtset = EvtSet;
 800c1ce:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 800c330 <UTIL_SEQ_Run+0x16c>
  local_taskmask = TaskMask;
 800c1d2:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 800c334 <UTIL_SEQ_Run+0x170>
  local_taskset = TaskSet;
 800c1d6:	f8db 3000 	ldr.w	r3, [fp]
  super_mask_backup = SuperMask;
 800c1da:	6831      	ldr	r1, [r6, #0]
  local_evtset = EvtSet;
 800c1dc:	f8d9 c000 	ldr.w	ip, [r9]
  local_taskmask = TaskMask;
 800c1e0:	f8d8 2000 	ldr.w	r2, [r8]
{
 800c1e4:	b083      	sub	sp, #12
  SuperMask &= Mask_bm;
 800c1e6:	4008      	ands	r0, r1
  super_mask_backup = SuperMask;
 800c1e8:	9101      	str	r1, [sp, #4]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c1ea:	4013      	ands	r3, r2
  local_evtwaited =  EvtWaited;
 800c1ec:	494c      	ldr	r1, [pc, #304]	@ (800c320 <UTIL_SEQ_Run+0x15c>)
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c1ee:	4203      	tst	r3, r0
  local_evtwaited =  EvtWaited;
 800c1f0:	6809      	ldr	r1, [r1, #0]
  SuperMask &= Mask_bm;
 800c1f2:	6030      	str	r0, [r6, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c1f4:	f000 808f 	beq.w	800c316 <UTIL_SEQ_Run+0x152>
 800c1f8:	ea1c 0f01 	tst.w	ip, r1
 800c1fc:	f040 808b 	bne.w	800c316 <UTIL_SEQ_Run+0x152>
      counter++;
 800c200:	2501      	movs	r5, #1
 800c202:	4c48      	ldr	r4, [pc, #288]	@ (800c324 <UTIL_SEQ_Run+0x160>)
 800c204:	f8df a130 	ldr.w	sl, [pc, #304]	@ 800c338 <UTIL_SEQ_Run+0x174>
 800c208:	e04c      	b.n	800c2a4 <UTIL_SEQ_Run+0xe0>
    counter = 0U;
 800c20a:	2200      	movs	r2, #0
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c20c:	f854 1032 	ldr.w	r1, [r4, r2, lsl #3]
 800c210:	400b      	ands	r3, r1
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c212:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 800c216:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800c21a:	00d2      	lsls	r2, r2, #3
 800c21c:	ea1c 0f03 	tst.w	ip, r3
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c220:	bf04      	itt	eq
 800c222:	f04f 37ff 	moveq.w	r7, #4294967295
 800c226:	604f      	streq	r7, [r1, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c228:	6849      	ldr	r1, [r1, #4]
  if (value == 0U)
 800c22a:	4019      	ands	r1, r3
 800c22c:	d042      	beq.n	800c2b4 <UTIL_SEQ_Run+0xf0>
  return __builtin_clz(value);
 800c22e:	fab1 f181 	clz	r1, r1
  return (uint8_t)(31 -__CLZ( Value ));
 800c232:	f1c1 011f 	rsb	r1, r1, #31
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c236:	b2c9      	uxtb	r1, r1
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c238:	fa05 f001 	lsl.w	r0, r5, r1
 800c23c:	43c0      	mvns	r0, r0
 800c23e:	4422      	add	r2, r4
 800c240:	6853      	ldr	r3, [r2, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c242:	f8ca 1000 	str.w	r1, [sl]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c246:	4003      	ands	r3, r0
 800c248:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c24a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c24e:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c250:	f8da 3000 	ldr.w	r3, [sl]
 800c254:	f8db 2000 	ldr.w	r2, [fp]
 800c258:	fa05 f303 	lsl.w	r3, r5, r3
 800c25c:	ea22 0203 	bic.w	r2, r2, r3
 800c260:	f8cb 2000 	str.w	r2, [fp]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c264:	68a2      	ldr	r2, [r4, #8]
 800c266:	ea22 0203 	bic.w	r2, r2, r3
 800c26a:	60a2      	str	r2, [r4, #8]
 800c26c:	6822      	ldr	r2, [r4, #0]
 800c26e:	ea22 0303 	bic.w	r3, r2, r3
 800c272:	6023      	str	r3, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c274:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800c278:	4a2b      	ldr	r2, [pc, #172]	@ (800c328 <UTIL_SEQ_Run+0x164>)
 800c27a:	f8da 3000 	ldr.w	r3, [sl]
    local_evtwaited = EvtWaited;
 800c27e:	4f28      	ldr	r7, [pc, #160]	@ (800c320 <UTIL_SEQ_Run+0x15c>)
    TaskCb[CurrentTaskIdx]( );
 800c280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c284:	4798      	blx	r3
    local_taskset = TaskSet;
 800c286:	f8db 3000 	ldr.w	r3, [fp]
    local_evtset = EvtSet;
 800c28a:	f8d9 1000 	ldr.w	r1, [r9]
    local_taskmask = TaskMask;
 800c28e:	f8d8 2000 	ldr.w	r2, [r8]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c292:	6830      	ldr	r0, [r6, #0]
 800c294:	4013      	ands	r3, r2
 800c296:	4203      	tst	r3, r0
    local_evtwaited = EvtWaited;
 800c298:	f8d7 c000 	ldr.w	ip, [r7]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c29c:	d00e      	beq.n	800c2bc <UTIL_SEQ_Run+0xf8>
 800c29e:	ea11 0f0c 	tst.w	r1, ip
 800c2a2:	d10b      	bne.n	800c2bc <UTIL_SEQ_Run+0xf8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c2a4:	6821      	ldr	r1, [r4, #0]
 800c2a6:	ea00 0302 	and.w	r3, r0, r2
 800c2aa:	420b      	tst	r3, r1
 800c2ac:	d1ad      	bne.n	800c20a <UTIL_SEQ_Run+0x46>
      counter++;
 800c2ae:	2201      	movs	r2, #1
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c2b0:	68a1      	ldr	r1, [r4, #8]
 800c2b2:	e7ab      	b.n	800c20c <UTIL_SEQ_Run+0x48>
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	21ff      	movs	r1, #255	@ 0xff
 800c2ba:	e7c0      	b.n	800c23e <UTIL_SEQ_Run+0x7a>
 800c2bc:	468c      	mov	ip, r1
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c2be:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c2:	f8ca 3000 	str.w	r3, [sl]
  if ((local_evtset & EvtWaited)== 0U)
 800c2c6:	4b16      	ldr	r3, [pc, #88]	@ (800c320 <UTIL_SEQ_Run+0x15c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	ea1c 0f03 	tst.w	ip, r3
 800c2ce:	d004      	beq.n	800c2da <UTIL_SEQ_Run+0x116>
  SuperMask = super_mask_backup;
 800c2d0:	9b01      	ldr	r3, [sp, #4]
 800c2d2:	6033      	str	r3, [r6, #0]
}
 800c2d4:	b003      	add	sp, #12
 800c2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    UTIL_SEQ_PreIdle( );
 800c2da:	f7f4 fa5b 	bl	8000794 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c2de:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c2e2:	b672      	cpsid	i
    local_taskset = TaskSet;
 800c2e4:	f8db 3000 	ldr.w	r3, [fp]
    local_evtset = EvtSet;
 800c2e8:	f8d9 1000 	ldr.w	r1, [r9]
    local_taskmask = TaskMask;
 800c2ec:	f8d8 2000 	ldr.w	r2, [r8]
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	6832      	ldr	r2, [r6, #0]
 800c2f4:	4213      	tst	r3, r2
 800c2f6:	d105      	bne.n	800c304 <UTIL_SEQ_Run+0x140>
      if ((local_evtset & EvtWaited)== 0U)
 800c2f8:	4b09      	ldr	r3, [pc, #36]	@ (800c320 <UTIL_SEQ_Run+0x15c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	420b      	tst	r3, r1
 800c2fe:	d101      	bne.n	800c304 <UTIL_SEQ_Run+0x140>
        UTIL_SEQ_Idle( );
 800c300:	f7f4 fa46 	bl	8000790 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c304:	f384 8810 	msr	PRIMASK, r4
    UTIL_SEQ_PostIdle( );
 800c308:	f7f4 fa46 	bl	8000798 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800c30c:	9b01      	ldr	r3, [sp, #4]
 800c30e:	6033      	str	r3, [r6, #0]
}
 800c310:	b003      	add	sp, #12
 800c312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c316:	f8df a020 	ldr.w	sl, [pc, #32]	@ 800c338 <UTIL_SEQ_Run+0x174>
 800c31a:	e7d0      	b.n	800c2be <UTIL_SEQ_Run+0xfa>
 800c31c:	200001b4 	.word	0x200001b4
 800c320:	20006c20 	.word	0x20006c20
 800c324:	20006b8c 	.word	0x20006b8c
 800c328:	20006b9c 	.word	0x20006b9c
 800c32c:	20006c28 	.word	0x20006c28
 800c330:	20006c24 	.word	0x20006c24
 800c334:	200001b8 	.word	0x200001b8
 800c338:	20006c1c 	.word	0x20006c1c

0800c33c <UTIL_TIMER_Start.part.0>:
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
 800c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c340:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c342:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c346:	b672      	cpsid	i
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
    ticks = TimerObject->ReloadValue;
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c348:	4f37      	ldr	r7, [pc, #220]	@ (800c428 <UTIL_TIMER_Start.part.0+0xec>)
    ticks = TimerObject->ReloadValue;
 800c34a:	6845      	ldr	r5, [r0, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800c34c:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800c350:	47c8      	blx	r9
    if( ticks < minValue )
    {
      ticks = minValue;
    }
    
    TimerObject->Timestamp = ticks;
 800c352:	42a8      	cmp	r0, r5
 800c354:	bf38      	it	cc
 800c356:	4628      	movcc	r0, r5
    TimerObject->IsPending = 0U;
 800c358:	f44f 7380 	mov.w	r3, #256	@ 0x100
    TimerObject->IsRunning = 1U;
    TimerObject->IsReloadStopped = 0U;
 800c35c:	f04f 0a00 	mov.w	sl, #0
    if( TimerListHead == NULL )
 800c360:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 800c42c <UTIL_TIMER_Start.part.0+0xf0>
    TimerObject->IsPending = 0U;
 800c364:	8123      	strh	r3, [r4, #8]
    if( TimerListHead == NULL )
 800c366:	f8d8 5000 	ldr.w	r5, [r8]
    TimerObject->Timestamp = ticks;
 800c36a:	6020      	str	r0, [r4, #0]
    TimerObject->IsReloadStopped = 0U;
 800c36c:	f884 a00a 	strb.w	sl, [r4, #10]
    if( TimerListHead == NULL )
 800c370:	2d00      	cmp	r5, #0
 800c372:	d032      	beq.n	800c3da <UTIL_TIMER_Start.part.0+0x9e>
      UTIL_TimerDriver.SetTimerContext();
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800c374:	69bd      	ldr	r5, [r7, #24]
 800c376:	47a8      	blx	r5
      TimerObject->Timestamp += elapsedTime;
 800c378:	6823      	ldr	r3, [r4, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c37a:	f8d8 1000 	ldr.w	r1, [r8]
      TimerObject->Timestamp += elapsedTime;
 800c37e:	4418      	add	r0, r3
 800c380:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800c382:	680b      	ldr	r3, [r1, #0]
 800c384:	4298      	cmp	r0, r3
 800c386:	d311      	bcc.n	800c3ac <UTIL_TIMER_Start.part.0+0x70>
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800c388:	694b      	ldr	r3, [r1, #20]

  while (cur->Next != NULL )
 800c38a:	b92b      	cbnz	r3, 800c398 <UTIL_TIMER_Start.part.0+0x5c>
 800c38c:	e03e      	b.n	800c40c <UTIL_TIMER_Start.part.0+0xd0>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
        next = next->Next;
 800c38e:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 800c390:	4619      	mov	r1, r3
 800c392:	2a00      	cmp	r2, #0
 800c394:	d03b      	beq.n	800c40e <UTIL_TIMER_Start.part.0+0xd2>
        next = next->Next;
 800c396:	4613      	mov	r3, r2
    if( TimerObject->Timestamp  > next->Timestamp )
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	4290      	cmp	r0, r2
 800c39c:	d8f7      	bhi.n	800c38e <UTIL_TIMER_Start.part.0+0x52>
    }
    else
    {
        cur->Next = TimerObject;
 800c39e:	614c      	str	r4, [r1, #20]
        TimerObject->Next = next;
 800c3a0:	6163      	str	r3, [r4, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3a2:	f386 8810 	msr	PRIMASK, r6
}
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  UTIL_TIMER_Object_t* cur = TimerListHead;

  if( cur != NULL )
  {
    cur->IsPending = 0;
 800c3ac:	f881 a008 	strb.w	sl, [r1, #8]
  }

  TimerObject->Next = cur;
 800c3b0:	6161      	str	r1, [r4, #20]
  TimerListHead = TimerObject;
 800c3b2:	f8c8 4000 	str.w	r4, [r8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c3b6:	47c8      	blx	r9
  TimerObject->IsPending = 1;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	7223      	strb	r3, [r4, #8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c3bc:	4680      	mov	r8, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c3be:	f8d4 9000 	ldr.w	r9, [r4]
 800c3c2:	47a8      	blx	r5
 800c3c4:	4440      	add	r0, r8
 800c3c6:	4581      	cmp	r9, r0
 800c3c8:	d329      	bcc.n	800c41e <UTIL_TIMER_Start.part.0+0xe2>
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c3ca:	6820      	ldr	r0, [r4, #0]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	4798      	blx	r3
 800c3d0:	f386 8810 	msr	PRIMASK, r6
}
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      UTIL_TimerDriver.SetTimerContext();
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	4798      	blx	r3
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c3de:	f8d8 3000 	ldr.w	r3, [r8]
  if( cur != NULL )
 800c3e2:	b103      	cbz	r3, 800c3e6 <UTIL_TIMER_Start.part.0+0xaa>
    cur->IsPending = 0;
 800c3e4:	721d      	strb	r5, [r3, #8]
  TimerObject->Next = cur;
 800c3e6:	6163      	str	r3, [r4, #20]
  TimerListHead = TimerObject;
 800c3e8:	f8c8 4000 	str.w	r4, [r8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c3ec:	47c8      	blx	r9
  TimerObject->IsPending = 1;
 800c3ee:	2301      	movs	r3, #1
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c3f0:	f8d7 8018 	ldr.w	r8, [r7, #24]
  TimerObject->IsPending = 1;
 800c3f4:	7223      	strb	r3, [r4, #8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c3f6:	4605      	mov	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c3f8:	f8d4 9000 	ldr.w	r9, [r4]
 800c3fc:	47c0      	blx	r8
 800c3fe:	4428      	add	r0, r5
 800c400:	4581      	cmp	r9, r0
 800c402:	d2e2      	bcs.n	800c3ca <UTIL_TIMER_Start.part.0+0x8e>
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c404:	47c0      	blx	r8
 800c406:	4428      	add	r0, r5
 800c408:	6020      	str	r0, [r4, #0]
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c40a:	e7df      	b.n	800c3cc <UTIL_TIMER_Start.part.0+0x90>
  while (cur->Next != NULL )
 800c40c:	460b      	mov	r3, r1
  TimerObject->Next = NULL;
 800c40e:	2200      	movs	r2, #0
  cur->Next = TimerObject;
 800c410:	615c      	str	r4, [r3, #20]
  TimerObject->Next = NULL;
 800c412:	6162      	str	r2, [r4, #20]
 800c414:	f386 8810 	msr	PRIMASK, r6
}
 800c418:	2000      	movs	r0, #0
 800c41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c41e:	47a8      	blx	r5
 800c420:	4440      	add	r0, r8
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	e7d2      	b.n	800c3cc <UTIL_TIMER_Start.part.0+0x90>
 800c426:	bf00      	nop
 800c428:	0802d78c 	.word	0x0802d78c
 800c42c:	20006c2c 	.word	0x20006c2c

0800c430 <UTIL_TIMER_Init>:
  TimerListHead = NULL;
 800c430:	2100      	movs	r1, #0
  return UTIL_TimerDriver.InitTimer();
 800c432:	4b02      	ldr	r3, [pc, #8]	@ (800c43c <UTIL_TIMER_Init+0xc>)
  TimerListHead = NULL;
 800c434:	4a02      	ldr	r2, [pc, #8]	@ (800c440 <UTIL_TIMER_Init+0x10>)
  return UTIL_TimerDriver.InitTimer();
 800c436:	681b      	ldr	r3, [r3, #0]
  TimerListHead = NULL;
 800c438:	6011      	str	r1, [r2, #0]
  return UTIL_TimerDriver.InitTimer();
 800c43a:	4718      	bx	r3
 800c43c:	0802d78c 	.word	0x0802d78c
 800c440:	20006c2c 	.word	0x20006c2c

0800c444 <UTIL_TIMER_Create>:
{
 800c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((TimerObject != NULL) && (Callback != NULL))
 800c446:	4604      	mov	r4, r0
 800c448:	b198      	cbz	r0, 800c472 <UTIL_TIMER_Create+0x2e>
 800c44a:	461d      	mov	r5, r3
 800c44c:	b18b      	cbz	r3, 800c472 <UTIL_TIMER_Create+0x2e>
    TimerObject->Timestamp = 0U;
 800c44e:	2700      	movs	r7, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c450:	4b09      	ldr	r3, [pc, #36]	@ (800c478 <UTIL_TIMER_Create+0x34>)
 800c452:	4608      	mov	r0, r1
 800c454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    TimerObject->Timestamp = 0U;
 800c456:	6027      	str	r7, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c458:	4616      	mov	r6, r2
 800c45a:	4798      	blx	r3
 800c45c:	4603      	mov	r3, r0
    TimerObject->argument = Argument;
 800c45e:	9a06      	ldr	r2, [sp, #24]
    TimerObject->IsPending = 0U;
 800c460:	8127      	strh	r7, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800c462:	72a7      	strb	r7, [r4, #10]
    TimerObject->Mode = Mode;
 800c464:	72e6      	strb	r6, [r4, #11]
    return UTIL_TIMER_OK;
 800c466:	4638      	mov	r0, r7
    TimerObject->Callback = Callback;
 800c468:	60e5      	str	r5, [r4, #12]
    TimerObject->argument = Argument;
 800c46a:	6122      	str	r2, [r4, #16]
    TimerObject->Next = NULL;
 800c46c:	6167      	str	r7, [r4, #20]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c46e:	6063      	str	r3, [r4, #4]
}
 800c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800c472:	2001      	movs	r0, #1
}
 800c474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c476:	bf00      	nop
 800c478:	0802d78c 	.word	0x0802d78c

0800c47c <UTIL_TIMER_Start>:
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c47c:	b138      	cbz	r0, 800c48e <UTIL_TIMER_Start+0x12>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c47e:	4b07      	ldr	r3, [pc, #28]	@ (800c49c <UTIL_TIMER_Start+0x20>)
 800c480:	681b      	ldr	r3, [r3, #0]
  while( cur != NULL )
 800c482:	b913      	cbnz	r3, 800c48a <UTIL_TIMER_Start+0xe>
 800c484:	e005      	b.n	800c492 <UTIL_TIMER_Start+0x16>
    cur = cur->Next;
 800c486:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c488:	b11b      	cbz	r3, 800c492 <UTIL_TIMER_Start+0x16>
    if( cur == TimerObject )
 800c48a:	4298      	cmp	r0, r3
 800c48c:	d1fb      	bne.n	800c486 <UTIL_TIMER_Start+0xa>
}
 800c48e:	2001      	movs	r0, #1
 800c490:	4770      	bx	lr
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c492:	7a43      	ldrb	r3, [r0, #9]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1fa      	bne.n	800c48e <UTIL_TIMER_Start+0x12>
 800c498:	f7ff bf50 	b.w	800c33c <UTIL_TIMER_Start.part.0>
 800c49c:	20006c2c 	.word	0x20006c2c

0800c4a0 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800c4a0:	b1d0      	cbz	r0, 800c4d8 <UTIL_TIMER_Stop+0x38>
{
 800c4a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4a6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c4aa:	b672      	cpsid	i
    TimerObject->IsReloadStopped = 1U;
 800c4ac:	2501      	movs	r5, #1
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c4ae:	4c1f      	ldr	r4, [pc, #124]	@ (800c52c <UTIL_TIMER_Stop+0x8c>)
    TimerObject->IsReloadStopped = 1U;
 800c4b0:	7285      	strb	r5, [r0, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800c4b2:	6823      	ldr	r3, [r4, #0]
    if(NULL != TimerListHead)
 800c4b4:	b15b      	cbz	r3, 800c4ce <UTIL_TIMER_Stop+0x2e>
      TimerObject->IsRunning = 0U;
 800c4b6:	2200      	movs	r2, #0
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c4b8:	4298      	cmp	r0, r3
      TimerObject->IsRunning = 0U;
 800c4ba:	7242      	strb	r2, [r0, #9]
          if( TimerListHead->Next != NULL )
 800c4bc:	695f      	ldr	r7, [r3, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800c4be:	d102      	bne.n	800c4c6 <UTIL_TIMER_Stop+0x26>
 800c4c0:	e013      	b.n	800c4ea <UTIL_TIMER_Stop+0x4a>
          if( cur == TimerObject )
 800c4c2:	4298      	cmp	r0, r3
 800c4c4:	d00a      	beq.n	800c4dc <UTIL_TIMER_Stop+0x3c>
            cur = cur->Next;
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	695b      	ldr	r3, [r3, #20]
        while( cur != NULL )
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1f9      	bne.n	800c4c2 <UTIL_TIMER_Stop+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4ce:	f386 8810 	msr	PRIMASK, r6
}
 800c4d2:	2000      	movs	r0, #0
}
 800c4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ret = UTIL_TIMER_INVALID_PARAM;
 800c4d8:	2001      	movs	r0, #1
}
 800c4da:	4770      	bx	lr
            if( cur->Next != NULL )
 800c4dc:	6943      	ldr	r3, [r0, #20]
              prev->Next = cur;
 800c4de:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4e0:	f386 8810 	msr	PRIMASK, r6
}
 800c4e4:	2000      	movs	r0, #0
}
 800c4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          TimerListHead->IsPending = 0;
 800c4ea:	7202      	strb	r2, [r0, #8]
          if( TimerListHead->Next != NULL )
 800c4ec:	b1a7      	cbz	r7, 800c518 <UTIL_TIMER_Stop+0x78>
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c4ee:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800c530 <UTIL_TIMER_Stop+0x90>
            TimerListHead = TimerListHead->Next;
 800c4f2:	6027      	str	r7, [r4, #0]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c4f4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c4f8:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800c4fa:	723d      	strb	r5, [r7, #8]
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c4fc:	f8d8 5018 	ldr.w	r5, [r8, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c500:	4604      	mov	r4, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c502:	f8d7 9000 	ldr.w	r9, [r7]
 800c506:	47a8      	blx	r5
 800c508:	4420      	add	r0, r4
 800c50a:	4581      	cmp	r9, r0
 800c50c:	d309      	bcc.n	800c522 <UTIL_TIMER_Stop+0x82>
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c50e:	6838      	ldr	r0, [r7, #0]
 800c510:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c514:	4798      	blx	r3
}
 800c516:	e7da      	b.n	800c4ce <UTIL_TIMER_Stop+0x2e>
            UTIL_TimerDriver.StopTimerEvt( );
 800c518:	4b05      	ldr	r3, [pc, #20]	@ (800c530 <UTIL_TIMER_Stop+0x90>)
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	4798      	blx	r3
            TimerListHead = NULL;
 800c51e:	6027      	str	r7, [r4, #0]
 800c520:	e7d5      	b.n	800c4ce <UTIL_TIMER_Stop+0x2e>
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c522:	47a8      	blx	r5
 800c524:	4420      	add	r0, r4
 800c526:	6038      	str	r0, [r7, #0]
 800c528:	e7f2      	b.n	800c510 <UTIL_TIMER_Stop+0x70>
 800c52a:	bf00      	nop
 800c52c:	20006c2c 	.word	0x20006c2c
 800c530:	0802d78c 	.word	0x0802d78c

0800c534 <UTIL_TIMER_StartWithPeriod>:
{
 800c534:	b538      	push	{r3, r4, r5, lr}
  if(NULL == TimerObject)
 800c536:	4604      	mov	r4, r0
 800c538:	b1a0      	cbz	r0, 800c564 <UTIL_TIMER_StartWithPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c53a:	4b12      	ldr	r3, [pc, #72]	@ (800c584 <UTIL_TIMER_StartWithPeriod+0x50>)
 800c53c:	4608      	mov	r0, r1
 800c53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c540:	4798      	blx	r3
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c542:	4d11      	ldr	r5, [pc, #68]	@ (800c588 <UTIL_TIMER_StartWithPeriod+0x54>)
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800c544:	6060      	str	r0, [r4, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c546:	682a      	ldr	r2, [r5, #0]
  while( cur != NULL )
 800c548:	b1a2      	cbz	r2, 800c574 <UTIL_TIMER_StartWithPeriod+0x40>
    if( cur == TimerObject )
 800c54a:	4294      	cmp	r4, r2
 800c54c:	d00c      	beq.n	800c568 <UTIL_TIMER_StartWithPeriod+0x34>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c54e:	4613      	mov	r3, r2
 800c550:	e001      	b.n	800c556 <UTIL_TIMER_StartWithPeriod+0x22>
    if( cur == TimerObject )
 800c552:	429c      	cmp	r4, r3
 800c554:	d008      	beq.n	800c568 <UTIL_TIMER_StartWithPeriod+0x34>
    cur = cur->Next;
 800c556:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1fa      	bne.n	800c552 <UTIL_TIMER_StartWithPeriod+0x1e>
    cur = cur->Next;
 800c55c:	6952      	ldr	r2, [r2, #20]
  while( cur != NULL )
 800c55e:	b14a      	cbz	r2, 800c574 <UTIL_TIMER_StartWithPeriod+0x40>
    if( cur == TimerObject )
 800c560:	4294      	cmp	r4, r2
 800c562:	d1fb      	bne.n	800c55c <UTIL_TIMER_StartWithPeriod+0x28>
}
 800c564:	2001      	movs	r0, #1
 800c566:	bd38      	pop	{r3, r4, r5, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 800c568:	4620      	mov	r0, r4
 800c56a:	f7ff ff99 	bl	800c4a0 <UTIL_TIMER_Stop>
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800c56e:	682a      	ldr	r2, [r5, #0]
  while( cur != NULL )
 800c570:	2a00      	cmp	r2, #0
 800c572:	d1f5      	bne.n	800c560 <UTIL_TIMER_StartWithPeriod+0x2c>
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c574:	7a63      	ldrb	r3, [r4, #9]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1f4      	bne.n	800c564 <UTIL_TIMER_StartWithPeriod+0x30>
 800c57a:	4620      	mov	r0, r4
}
 800c57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c580:	f7ff bedc 	b.w	800c33c <UTIL_TIMER_Start.part.0>
 800c584:	0802d78c 	.word	0x0802d78c
 800c588:	20006c2c 	.word	0x20006c2c

0800c58c <UTIL_TIMER_IRQ_Handler>:
{
 800c58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c590:	b081      	sub	sp, #4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c592:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c596:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c598:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800c694 <UTIL_TIMER_IRQ_Handler+0x108>
  if ( TimerListHead != NULL )
 800c59c:	4f3c      	ldr	r7, [pc, #240]	@ (800c690 <UTIL_TIMER_IRQ_Handler+0x104>)
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c59e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c5a2:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c5a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800c5a8:	4604      	mov	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800c5aa:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800c5ac:	f8d7 b000 	ldr.w	fp, [r7]
 800c5b0:	f1bb 0f00 	cmp.w	fp, #0
 800c5b4:	d05e      	beq.n	800c674 <UTIL_TIMER_IRQ_Handler+0xe8>
  DeltaContext = now  - old; /*intentional wrap around */
 800c5b6:	f04f 0e00 	mov.w	lr, #0
 800c5ba:	eba0 0c04 	sub.w	ip, r0, r4
        cur->Timestamp -= DeltaContext;
 800c5be:	1a21      	subs	r1, r4, r0
  DeltaContext = now  - old; /*intentional wrap around */
 800c5c0:	465d      	mov	r5, fp
 800c5c2:	465b      	mov	r3, fp
  void *argument = NULL;
 800c5c4:	46f1      	mov	r9, lr
  void ( *FunctionCallback )( void *) = NULL;
 800c5c6:	4674      	mov	r4, lr
  UTIL_TIMER_Object_t *cur, *exec = NULL;
 800c5c8:	4670      	mov	r0, lr
        cur->Timestamp = 0;
 800c5ca:	46f2      	mov	sl, lr
 800c5cc:	e002      	b.n	800c5d4 <UTIL_TIMER_IRQ_Handler+0x48>
        cur->Timestamp -= DeltaContext;
 800c5ce:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800c5d0:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800c5d2:	b1ab      	cbz	r3, 800c600 <UTIL_TIMER_IRQ_Handler+0x74>
      if (cur->Timestamp > DeltaContext)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	4562      	cmp	r2, ip
        cur->Timestamp -= DeltaContext;
 800c5d8:	440a      	add	r2, r1
      if (cur->Timestamp > DeltaContext)
 800c5da:	d8f8      	bhi.n	800c5ce <UTIL_TIMER_IRQ_Handler+0x42>
        cur->Timestamp = 0;
 800c5dc:	f8c3 a000 	str.w	sl, [r3]
        if (FunctionCallback == NULL)
 800c5e0:	2c00      	cmp	r4, #0
 800c5e2:	d1f5      	bne.n	800c5d0 <UTIL_TIMER_IRQ_Handler+0x44>
            if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800c5e4:	895a      	ldrh	r2, [r3, #10]
            TimerListHead = TimerListHead->Next;
 800c5e6:	696d      	ldr	r5, [r5, #20]
            cur->IsRunning = 0;
 800c5e8:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800c5ec:	bf08      	it	eq
 800c5ee:	4618      	moveq	r0, r3
            cur->IsPending = 0;
 800c5f0:	811c      	strh	r4, [r3, #8]
            FunctionCallback = cur->Callback;
 800c5f2:	e9d3 4903 	ldrd	r4, r9, [r3, #12]
      cur = cur->Next;
 800c5f6:	695b      	ldr	r3, [r3, #20]
            FunctionCallback = cur->Callback;
 800c5f8:	f04f 0e01 	mov.w	lr, #1
    } while(cur != NULL);
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e9      	bne.n	800c5d4 <UTIL_TIMER_IRQ_Handler+0x48>
 800c600:	f1be 0f00 	cmp.w	lr, #0
 800c604:	d01d      	beq.n	800c642 <UTIL_TIMER_IRQ_Handler+0xb6>
 800c606:	603d      	str	r5, [r7, #0]
	if (exec != NULL) (void)UTIL_TIMER_Start(exec);
 800c608:	b178      	cbz	r0, 800c62a <UTIL_TIMER_IRQ_Handler+0x9e>
  while( cur != NULL )
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	d03b      	beq.n	800c686 <UTIL_TIMER_IRQ_Handler+0xfa>
    if( cur == TimerObject )
 800c60e:	42a8      	cmp	r0, r5
 800c610:	d00c      	beq.n	800c62c <UTIL_TIMER_IRQ_Handler+0xa0>
 800c612:	462b      	mov	r3, r5
 800c614:	e001      	b.n	800c61a <UTIL_TIMER_IRQ_Handler+0x8e>
 800c616:	4298      	cmp	r0, r3
 800c618:	d008      	beq.n	800c62c <UTIL_TIMER_IRQ_Handler+0xa0>
    cur = cur->Next;
 800c61a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1fa      	bne.n	800c616 <UTIL_TIMER_IRQ_Handler+0x8a>
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c620:	7a43      	ldrb	r3, [r0, #9]
 800c622:	b91b      	cbnz	r3, 800c62c <UTIL_TIMER_IRQ_Handler+0xa0>
 800c624:	f7ff fe8a 	bl	800c33c <UTIL_TIMER_Start.part.0>
    if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c628:	683d      	ldr	r5, [r7, #0]
 800c62a:	b10d      	cbz	r5, 800c630 <UTIL_TIMER_IRQ_Handler+0xa4>
 800c62c:	7a2b      	ldrb	r3, [r5, #8]
 800c62e:	b173      	cbz	r3, 800c64e <UTIL_TIMER_IRQ_Handler+0xc2>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c630:	f386 8810 	msr	PRIMASK, r6
  if (FunctionCallback != NULL)
 800c634:	b304      	cbz	r4, 800c678 <UTIL_TIMER_IRQ_Handler+0xec>
    FunctionCallback(argument);
 800c636:	4648      	mov	r0, r9
 800c638:	4623      	mov	r3, r4
}
 800c63a:	b001      	add	sp, #4
 800c63c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FunctionCallback(argument);
 800c640:	4718      	bx	r3
	if (exec != NULL) (void)UTIL_TIMER_Start(exec);
 800c642:	465d      	mov	r5, fp
 800c644:	2800      	cmp	r0, #0
 800c646:	d1e2      	bne.n	800c60e <UTIL_TIMER_IRQ_Handler+0x82>
    if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800c648:	7a2b      	ldrb	r3, [r5, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1f0      	bne.n	800c630 <UTIL_TIMER_IRQ_Handler+0xa4>
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c64e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800c652:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800c654:	2301      	movs	r3, #1
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c656:	f8d8 7018 	ldr.w	r7, [r8, #24]
  TimerObject->IsPending = 1;
 800c65a:	722b      	strb	r3, [r5, #8]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800c65c:	4682      	mov	sl, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800c65e:	f8d5 b000 	ldr.w	fp, [r5]
 800c662:	47b8      	blx	r7
 800c664:	4450      	add	r0, sl
 800c666:	4583      	cmp	fp, r0
 800c668:	d309      	bcc.n	800c67e <UTIL_TIMER_IRQ_Handler+0xf2>
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800c66a:	6828      	ldr	r0, [r5, #0]
 800c66c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c670:	4798      	blx	r3
}
 800c672:	e7dd      	b.n	800c630 <UTIL_TIMER_IRQ_Handler+0xa4>
 800c674:	f386 8810 	msr	PRIMASK, r6
}
 800c678:	b001      	add	sp, #4
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800c67e:	47b8      	blx	r7
 800c680:	4450      	add	r0, sl
 800c682:	6028      	str	r0, [r5, #0]
 800c684:	e7f2      	b.n	800c66c <UTIL_TIMER_IRQ_Handler+0xe0>
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800c686:	7a43      	ldrb	r3, [r0, #9]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1d1      	bne.n	800c630 <UTIL_TIMER_IRQ_Handler+0xa4>
 800c68c:	e7ca      	b.n	800c624 <UTIL_TIMER_IRQ_Handler+0x98>
 800c68e:	bf00      	nop
 800c690:	20006c2c 	.word	0x20006c2c
 800c694:	0802d78c 	.word	0x0802d78c

0800c698 <evnt_schdlr_get_prdc_clbr_evnt_hndl>:
 800c698:	b580      	push	{r7, lr}
 800c69a:	f646 403c 	movw	r0, #27708	@ 0x6c3c
 800c69e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800c6a2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800c6a4:	68c1      	ldr	r1, [r0, #12]
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	4788      	blx	r1
 800c6aa:	bf00      	nop
 800c6ac:	b130      	cbz	r0, 800c6bc <evnt_schdlr_get_prdc_clbr_evnt_hndl+0x24>
 800c6ae:	f890 1046 	ldrb.w	r1, [r0, #70]	@ 0x46
 800c6b2:	2901      	cmp	r1, #1
 800c6b4:	bf08      	it	eq
 800c6b6:	bd80      	popeq	{r7, pc}
 800c6b8:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800c6ba:	e7f7      	b.n	800c6ac <evnt_schdlr_get_prdc_clbr_evnt_hndl+0x14>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <evnt_schdlr_hndl_next_evnt>:
 800c6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c4:	b08b      	sub	sp, #44	@ 0x2c
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800c6cc:	e9cd 0004 	strd	r0, r0, [sp, #16]
 800c6d0:	e9cd 0002 	strd	r0, r0, [sp, #8]
 800c6d4:	2007      	movs	r0, #7
 800c6d6:	f00f f969 	bl	801b9ac <bsp_debug_gpio_set>
 800c6da:	2007      	movs	r0, #7
 800c6dc:	f00f f97d 	bl	801b9da <disable_specific_irq>
 800c6e0:	f646 493c 	movw	r9, #27708	@ 0x6c3c
 800c6e4:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 800c6e8:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f040 8173 	bne.w	800c9d8 <evnt_schdlr_hndl_next_evnt+0x318>
 800c6f2:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c6f6:	6880      	ldr	r0, [r0, #8]
 800c6f8:	4780      	blx	r0
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f000 80ef 	beq.w	800c8de <evnt_schdlr_hndl_next_evnt+0x21e>
 800c700:	f244 77ff 	movw	r7, #18431	@ 0x47ff
 800c704:	f646 4b78 	movw	fp, #27768	@ 0x6c78
 800c708:	f240 18bc 	movw	r8, #444	@ 0x1bc
 800c70c:	4605      	mov	r5, r0
 800c70e:	ac07      	add	r4, sp, #28
 800c710:	ae04      	add	r6, sp, #16
 800c712:	f10d 0a08 	add.w	sl, sp, #8
 800c716:	f2c0 17e8 	movt	r7, #488	@ 0x1e8
 800c71a:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 800c71e:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800c722:	2000      	movs	r0, #0
 800c724:	9001      	str	r0, [sp, #4]
 800c726:	bf00      	nop
 800c728:	f895 0098 	ldrb.w	r0, [r5, #152]	@ 0x98
 800c72c:	2800      	cmp	r0, #0
 800c72e:	f040 8153 	bne.w	800c9d8 <evnt_schdlr_hndl_next_evnt+0x318>
 800c732:	f8b5 0090 	ldrh.w	r0, [r5, #144]	@ 0x90
 800c736:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 800c73a:	d00b      	beq.n	800c754 <evnt_schdlr_hndl_next_evnt+0x94>
 800c73c:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 800c73e:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 800c742:	2002      	movs	r0, #2
 800c744:	2101      	movs	r1, #1
 800c746:	f6c0 0302 	movt	r3, #2050	@ 0x802
 800c74a:	f011 f91f 	bl	801d98c <emngr_process_conditional_event>
 800c74e:	2801      	cmp	r0, #1
 800c750:	f000 80bc 	beq.w	800c8cc <evnt_schdlr_hndl_next_evnt+0x20c>
 800c754:	f899 0039 	ldrb.w	r0, [r9, #57]	@ 0x39
 800c758:	2800      	cmp	r0, #0
 800c75a:	f040 80e0 	bne.w	800c91e <evnt_schdlr_hndl_next_evnt+0x25e>
 800c75e:	209a      	movs	r0, #154	@ 0x9a
 800c760:	f00f f928 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800c764:	4620      	mov	r0, r4
 800c766:	f011 feb0 	bl	801e4ca <llhwc_slptmr_get>
 800c76a:	9807      	ldr	r0, [sp, #28]
 800c76c:	42b8      	cmp	r0, r7
 800c76e:	bf9c      	itt	ls
 800c770:	4628      	movls	r0, r5
 800c772:	f002 ff83 	blls	800f67c <evnt_utils_reset_sw_overflow>
 800c776:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	@ 0x50
 800c77a:	e9d5 2324 	ldrd	r2, r3, [r5, #144]	@ 0x90
 800c77e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c782:	f083 0008 	eor.w	r0, r3, #8
 800c786:	4310      	orrs	r0, r2
 800c788:	4640      	mov	r0, r8
 800c78a:	bf08      	it	eq
 800c78c:	4658      	moveq	r0, fp
 800c78e:	6801      	ldr	r1, [r0, #0]
 800c790:	4630      	mov	r0, r6
 800c792:	2205      	movs	r2, #5
 800c794:	f010 ff08 	bl	801d5a8 <ble_time_rmv_uint>
 800c798:	f012 f8b2 	bl	801e900 <llhwc_cmn_is_dp_slp_enabled>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f040 811b 	bne.w	800c9d8 <evnt_schdlr_hndl_next_evnt+0x318>
 800c7a2:	e9dd 2004 	ldrd	r2, r0, [sp, #16]
 800c7a6:	f8db 1000 	ldr.w	r1, [fp]
 800c7aa:	9202      	str	r2, [sp, #8]
 800c7ac:	2205      	movs	r2, #5
 800c7ae:	9003      	str	r0, [sp, #12]
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	f010 fe57 	bl	801d464 <ble_time_add_uint>
 800c7b6:	9907      	ldr	r1, [sp, #28]
 800c7b8:	4650      	mov	r0, sl
 800c7ba:	f010 ff33 	bl	801d624 <ble_time_cmp_raw_reading>
 800c7be:	2801      	cmp	r0, #1
 800c7c0:	db06      	blt.n	800c7d0 <evnt_schdlr_hndl_next_evnt+0x110>
 800c7c2:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c7c6:	6941      	ldr	r1, [r0, #20]
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	4788      	blx	r1
 800c7cc:	e07e      	b.n	800c8cc <evnt_schdlr_hndl_next_evnt+0x20c>
 800c7ce:	bf00      	nop
 800c7d0:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 800c7d4:	2205      	movs	r2, #5
 800c7d6:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800c7da:	4650      	mov	r0, sl
 800c7dc:	2104      	movs	r1, #4
 800c7de:	f010 fee3 	bl	801d5a8 <ble_time_rmv_uint>
 800c7e2:	9907      	ldr	r1, [sp, #28]
 800c7e4:	4650      	mov	r0, sl
 800c7e6:	f010 ff1d 	bl	801d624 <ble_time_cmp_raw_reading>
 800c7ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c7ee:	f300 8096 	bgt.w	800c91e <evnt_schdlr_hndl_next_evnt+0x25e>
 800c7f2:	464f      	mov	r7, r9
 800c7f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7f6:	46d9      	mov	r9, fp
 800c7f8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800c7fa:	46c3      	mov	fp, r8
 800c7fc:	4780      	blx	r0
 800c7fe:	b3a0      	cbz	r0, 800c86a <evnt_schdlr_hndl_next_evnt+0x1aa>
 800c800:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c802:	463e      	mov	r6, r7
 800c804:	68c1      	ldr	r1, [r0, #12]
 800c806:	2000      	movs	r0, #0
 800c808:	4788      	blx	r1
 800c80a:	b378      	cbz	r0, 800c86c <evnt_schdlr_hndl_next_evnt+0x1ac>
 800c80c:	4680      	mov	r8, r0
 800c80e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800c810:	217d      	movs	r1, #125	@ 0x7d
 800c812:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800c816:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 800c81a:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 800c81e:	fba0 0101 	umull	r0, r1, r0, r1
 800c822:	08c8      	lsrs	r0, r1, #3
 800c824:	9001      	str	r0, [sp, #4]
 800c826:	9008      	str	r0, [sp, #32]
 800c828:	e9dd 2004 	ldrd	r2, r0, [sp, #16]
 800c82c:	9202      	str	r2, [sp, #8]
 800c82e:	2205      	movs	r2, #5
 800c830:	9003      	str	r0, [sp, #12]
 800c832:	2004      	movs	r0, #4
 800c834:	eb00 01d1 	add.w	r1, r0, r1, lsr #3
 800c838:	4650      	mov	r0, sl
 800c83a:	f010 feb5 	bl	801d5a8 <ble_time_rmv_uint>
 800c83e:	9907      	ldr	r1, [sp, #28]
 800c840:	4650      	mov	r0, sl
 800c842:	f010 feef 	bl	801d624 <ble_time_cmp_raw_reading>
 800c846:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c84a:	dc0f      	bgt.n	800c86c <evnt_schdlr_hndl_next_evnt+0x1ac>
 800c84c:	f898 0046 	ldrb.w	r0, [r8, #70]	@ 0x46
 800c850:	2801      	cmp	r0, #1
 800c852:	d106      	bne.n	800c862 <evnt_schdlr_hndl_next_evnt+0x1a2>
 800c854:	9804      	ldr	r0, [sp, #16]
 800c856:	9907      	ldr	r1, [sp, #28]
 800c858:	f010 ff09 	bl	801d66e <ble_time_overflow_diff>
 800c85c:	3804      	subs	r0, #4
 800c85e:	9001      	str	r0, [sp, #4]
 800c860:	9008      	str	r0, [sp, #32]
 800c862:	f898 0049 	ldrb.w	r0, [r8, #73]	@ 0x49
 800c866:	b908      	cbnz	r0, 800c86c <evnt_schdlr_hndl_next_evnt+0x1ac>
 800c868:	e0ef      	b.n	800ca4a <evnt_schdlr_hndl_next_evnt+0x38a>
 800c86a:	463e      	mov	r6, r7
 800c86c:	e9d5 0114 	ldrd	r0, r1, [r5, #80]	@ 0x50
 800c870:	f8db 2000 	ldr.w	r2, [fp]
 800c874:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c878:	9002      	str	r0, [sp, #8]
 800c87a:	9103      	str	r1, [sp, #12]
 800c87c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800c880:	4650      	mov	r0, sl
 800c882:	3110      	adds	r1, #16
 800c884:	2205      	movs	r2, #5
 800c886:	46d8      	mov	r8, fp
 800c888:	46cb      	mov	fp, r9
 800c88a:	f010 fe8d 	bl	801d5a8 <ble_time_rmv_uint>
 800c88e:	9907      	ldr	r1, [sp, #28]
 800c890:	4650      	mov	r0, sl
 800c892:	f010 fec7 	bl	801d624 <ble_time_cmp_raw_reading>
 800c896:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c89a:	46b1      	mov	r9, r6
 800c89c:	dc72      	bgt.n	800c984 <evnt_schdlr_hndl_next_evnt+0x2c4>
 800c89e:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800c8a6:	910a      	str	r1, [sp, #40]	@ 0x28
 800c8a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8aa:	a809      	add	r0, sp, #36	@ 0x24
 800c8ac:	a90a      	add	r1, sp, #40	@ 0x28
 800c8ae:	4790      	blx	r2
 800c8b0:	b918      	cbnz	r0, 800c8ba <evnt_schdlr_hndl_next_evnt+0x1fa>
 800c8b2:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	@ 0x24
 800c8b6:	f000 f8cb 	bl	800ca50 <evnt_schdlr_exec>
 800c8ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c8be:	f244 77ff 	movw	r7, #18431	@ 0x47ff
 800c8c2:	4288      	cmp	r0, r1
 800c8c4:	ae04      	add	r6, sp, #16
 800c8c6:	f2c0 17e8 	movt	r7, #488	@ 0x1e8
 800c8ca:	d14f      	bne.n	800c96c <evnt_schdlr_hndl_next_evnt+0x2ac>
 800c8cc:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c8d0:	6880      	ldr	r0, [r0, #8]
 800c8d2:	4780      	blx	r0
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f47f af26 	bne.w	800c728 <evnt_schdlr_hndl_next_evnt+0x68>
 800c8dc:	e001      	b.n	800c8e2 <evnt_schdlr_hndl_next_evnt+0x222>
 800c8de:	2000      	movs	r0, #0
 800c8e0:	9001      	str	r0, [sp, #4]
 800c8e2:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c8e6:	68c1      	ldr	r1, [r0, #12]
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	4788      	blx	r1
 800c8ec:	f646 4130 	movw	r1, #27696	@ 0x6c30
 800c8f0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800c8f4:	7809      	ldrb	r1, [r1, #0]
 800c8f6:	2900      	cmp	r1, #0
 800c8f8:	d16b      	bne.n	800c9d2 <evnt_schdlr_hndl_next_evnt+0x312>
 800c8fa:	4605      	mov	r5, r0
 800c8fc:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c900:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800c902:	4780      	blx	r0
 800c904:	2800      	cmp	r0, #0
 800c906:	d064      	beq.n	800c9d2 <evnt_schdlr_hndl_next_evnt+0x312>
 800c908:	2d00      	cmp	r5, #0
 800c90a:	d062      	beq.n	800c9d2 <evnt_schdlr_hndl_next_evnt+0x312>
 800c90c:	f011 fff8 	bl	801e900 <llhwc_cmn_is_dp_slp_enabled>
 800c910:	2800      	cmp	r0, #0
 800c912:	d15e      	bne.n	800c9d2 <evnt_schdlr_hndl_next_evnt+0x312>
 800c914:	4628      	mov	r0, r5
 800c916:	9901      	ldr	r1, [sp, #4]
 800c918:	f000 f89a 	bl	800ca50 <evnt_schdlr_exec>
 800c91c:	e05f      	b.n	800c9de <evnt_schdlr_hndl_next_evnt+0x31e>
 800c91e:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c922:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800c924:	4780      	blx	r0
 800c926:	b1c8      	cbz	r0, 800c95c <evnt_schdlr_hndl_next_evnt+0x29c>
 800c928:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c92c:	68c1      	ldr	r1, [r0, #12]
 800c92e:	2000      	movs	r0, #0
 800c930:	4788      	blx	r1
 800c932:	b198      	cbz	r0, 800c95c <evnt_schdlr_hndl_next_evnt+0x29c>
 800c934:	4604      	mov	r4, r0
 800c936:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
 800c93a:	b978      	cbnz	r0, 800c95c <evnt_schdlr_hndl_next_evnt+0x29c>
 800c93c:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c940:	a908      	add	r1, sp, #32
 800c942:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c944:	4620      	mov	r0, r4
 800c946:	4790      	blx	r2
 800c948:	2801      	cmp	r0, #1
 800c94a:	d107      	bne.n	800c95c <evnt_schdlr_hndl_next_evnt+0x29c>
 800c94c:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c950:	6941      	ldr	r1, [r0, #20]
 800c952:	4628      	mov	r0, r5
 800c954:	4788      	blx	r1
 800c956:	9908      	ldr	r1, [sp, #32]
 800c958:	4620      	mov	r0, r4
 800c95a:	e7dd      	b.n	800c918 <evnt_schdlr_hndl_next_evnt+0x258>
 800c95c:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c960:	6880      	ldr	r0, [r0, #8]
 800c962:	4780      	blx	r0
 800c964:	2100      	movs	r1, #0
 800c966:	f000 f873 	bl	800ca50 <evnt_schdlr_exec>
 800c96a:	e035      	b.n	800c9d8 <evnt_schdlr_hndl_next_evnt+0x318>
 800c96c:	b3a0      	cbz	r0, 800c9d8 <evnt_schdlr_hndl_next_evnt+0x318>
 800c96e:	2807      	cmp	r0, #7
 800c970:	d105      	bne.n	800c97e <evnt_schdlr_hndl_next_evnt+0x2be>
 800c972:	a807      	add	r0, sp, #28
 800c974:	f011 fda9 	bl	801e4ca <llhwc_slptmr_get>
 800c978:	f44f 74a0 	mov.w	r4, #320	@ 0x140
 800c97c:	e014      	b.n	800c9a8 <evnt_schdlr_hndl_next_evnt+0x2e8>
 800c97e:	a807      	add	r0, sp, #28
 800c980:	f011 fda3 	bl	801e4ca <llhwc_slptmr_get>
 800c984:	9907      	ldr	r1, [sp, #28]
 800c986:	a804      	add	r0, sp, #16
 800c988:	f010 fe4c 	bl	801d624 <ble_time_cmp_raw_reading>
 800c98c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c990:	dd05      	ble.n	800c99e <evnt_schdlr_hndl_next_evnt+0x2de>
 800c992:	2000      	movs	r0, #0
 800c994:	2101      	movs	r1, #1
 800c996:	2400      	movs	r4, #0
 800c998:	f00e ffc1 	bl	801b91e <bsp_assert>
 800c99c:	e004      	b.n	800c9a8 <evnt_schdlr_hndl_next_evnt+0x2e8>
 800c99e:	9804      	ldr	r0, [sp, #16]
 800c9a0:	9907      	ldr	r1, [sp, #28]
 800c9a2:	f010 fe64 	bl	801d66e <ble_time_overflow_diff>
 800c9a6:	4604      	mov	r4, r0
 800c9a8:	f247 30a8 	movw	r0, #29608	@ 0x73a8
 800c9ac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800c9b0:	7880      	ldrb	r0, [r0, #2]
 800c9b2:	b1d0      	cbz	r0, 800c9ea <evnt_schdlr_hndl_next_evnt+0x32a>
 800c9b4:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	f011 fc0f 	bl	801e1dc <os_timer_set>
 800c9be:	4604      	mov	r4, r0
 800c9c0:	2004      	movs	r0, #4
 800c9c2:	f00e fff7 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800c9c6:	fab4 f084 	clz	r0, r4
 800c9ca:	0940      	lsrs	r0, r0, #5
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	f00e ffa6 	bl	801b91e <bsp_assert>
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	f013 fce9 	bl	80203aa <llhwc_cmn_evnt_notify>
 800c9d8:	2007      	movs	r0, #7
 800c9da:	f00e fffc 	bl	801b9d6 <enable_specific_irq>
 800c9de:	2007      	movs	r0, #7
 800c9e0:	f00e ffe6 	bl	801b9b0 <bsp_debug_gpio_clear>
 800c9e4:	b00b      	add	sp, #44	@ 0x2c
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 800c9ee:	68c1      	ldr	r1, [r0, #12]
 800c9f0:	2001      	movs	r0, #1
 800c9f2:	4788      	blx	r1
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d0dd      	beq.n	800c9b4 <evnt_schdlr_hndl_next_evnt+0x2f4>
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 800c9fe:	2801      	cmp	r0, #1
 800ca00:	d003      	beq.n	800ca0a <evnt_schdlr_hndl_next_evnt+0x34a>
 800ca02:	6fad      	ldr	r5, [r5, #120]	@ 0x78
 800ca04:	2d00      	cmp	r5, #0
 800ca06:	d1f8      	bne.n	800c9fa <evnt_schdlr_hndl_next_evnt+0x33a>
 800ca08:	e7d4      	b.n	800c9b4 <evnt_schdlr_hndl_next_evnt+0x2f4>
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f000 fd9e 	bl	800d54c <evnt_schdlr_get_req_phy_clbr_time>
 800ca10:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	@ 0x50
 800ca14:	4606      	mov	r6, r0
 800ca16:	9008      	str	r0, [sp, #32]
 800ca18:	a802      	add	r0, sp, #8
 800ca1a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ca1e:	4631      	mov	r1, r6
 800ca20:	2205      	movs	r2, #5
 800ca22:	f010 fd1f 	bl	801d464 <ble_time_add_uint>
 800ca26:	42b4      	cmp	r4, r6
 800ca28:	d9c4      	bls.n	800c9b4 <evnt_schdlr_hndl_next_evnt+0x2f4>
 800ca2a:	a804      	add	r0, sp, #16
 800ca2c:	a902      	add	r1, sp, #8
 800ca2e:	f010 fc77 	bl	801d320 <ble_time_comp>
 800ca32:	2801      	cmp	r0, #1
 800ca34:	dbbe      	blt.n	800c9b4 <evnt_schdlr_hndl_next_evnt+0x2f4>
 800ca36:	2005      	movs	r0, #5
 800ca38:	f00e ffbc 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800ca3c:	f895 0044 	ldrb.w	r0, [r5, #68]	@ 0x44
 800ca40:	1ba4      	subs	r4, r4, r6
 800ca42:	3001      	adds	r0, #1
 800ca44:	f885 0044 	strb.w	r0, [r5, #68]	@ 0x44
 800ca48:	e7b4      	b.n	800c9b4 <evnt_schdlr_hndl_next_evnt+0x2f4>
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	e763      	b.n	800c916 <evnt_schdlr_hndl_next_evnt+0x256>
	...

0800ca50 <evnt_schdlr_exec>:
 800ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	b08f      	sub	sp, #60	@ 0x3c
 800ca56:	4683      	mov	fp, r0
 800ca58:	2600      	movs	r6, #0
 800ca5a:	2011      	movs	r0, #17
 800ca5c:	4689      	mov	r9, r1
 800ca5e:	e9cd 6604 	strd	r6, r6, [sp, #16]
 800ca62:	f00e ffa3 	bl	801b9ac <bsp_debug_gpio_set>
 800ca66:	2010      	movs	r0, #16
 800ca68:	f00e ffa0 	bl	801b9ac <bsp_debug_gpio_set>
 800ca6c:	f1bb 0f00 	cmp.w	fp, #0
 800ca70:	f000 852c 	beq.w	800d4cc <evnt_schdlr_exec+0xa7c>
 800ca74:	f646 4a3c 	movw	sl, #27708	@ 0x6c3c
 800ca78:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 800ca7c:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 800ca80:	2800      	cmp	r0, #0
 800ca82:	f040 8523 	bne.w	800d4cc <evnt_schdlr_exec+0xa7c>
 800ca86:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800ca8a:	f081 0102 	eor.w	r1, r1, #2
 800ca8e:	4308      	orrs	r0, r1
 800ca90:	d108      	bne.n	800caa4 <evnt_schdlr_exec+0x54>
 800ca92:	f89b 0049 	ldrb.w	r0, [fp, #73]	@ 0x49
 800ca96:	2801      	cmp	r0, #1
 800ca98:	f000 853e 	beq.w	800d518 <evnt_schdlr_exec+0xac8>
 800ca9c:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 800caa0:	2801      	cmp	r0, #1
 800caa2:	d004      	beq.n	800caae <evnt_schdlr_exec+0x5e>
 800caa4:	2000      	movs	r0, #0
 800caa6:	f013 fc80 	bl	80203aa <llhwc_cmn_evnt_notify>
 800caaa:	f013 fd0e 	bl	80204ca <llhwc_cmn_request_temperature>
 800caae:	f89a 0039 	ldrb.w	r0, [sl, #57]	@ 0x39
 800cab2:	b120      	cbz	r0, 800cabe <evnt_schdlr_exec+0x6e>
 800cab4:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 800cab8:	f8ad 0014 	strh.w	r0, [sp, #20]
 800cabc:	e048      	b.n	800cb50 <evnt_schdlr_exec+0x100>
 800cabe:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800cac2:	4240      	negs	r0, r0
 800cac4:	f04f 0001 	mov.w	r0, #1
 800cac8:	4188      	sbcs	r0, r1
 800caca:	d341      	bcc.n	800cb50 <evnt_schdlr_exec+0x100>
 800cacc:	f1b9 0f00 	cmp.w	r9, #0
 800cad0:	d012      	beq.n	800caf8 <evnt_schdlr_exec+0xa8>
 800cad2:	ad04      	add	r5, sp, #16
 800cad4:	4628      	mov	r0, r5
 800cad6:	f011 fcf8 	bl	801e4ca <llhwc_slptmr_get>
 800cada:	f240 14bc 	movw	r4, #444	@ 0x1bc
 800cade:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800cae2:	6821      	ldr	r1, [r4, #0]
 800cae4:	4628      	mov	r0, r5
 800cae6:	2205      	movs	r2, #5
 800cae8:	f010 fcbc 	bl	801d464 <ble_time_add_uint>
 800caec:	6820      	ldr	r0, [r4, #0]
 800caee:	eba9 0000 	sub.w	r0, r9, r0
 800caf2:	f1a0 090a 	sub.w	r9, r0, #10
 800caf6:	e004      	b.n	800cb02 <evnt_schdlr_exec+0xb2>
 800caf8:	f8db 0050 	ldr.w	r0, [fp, #80]	@ 0x50
 800cafc:	f04f 0900 	mov.w	r9, #0
 800cb00:	9004      	str	r0, [sp, #16]
 800cb02:	f8bb 0054 	ldrh.w	r0, [fp, #84]	@ 0x54
 800cb06:	a904      	add	r1, sp, #16
 800cb08:	f8ad 0014 	strh.w	r0, [sp, #20]
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	f88d 0016 	strb.w	r0, [sp, #22]
 800cb12:	2000      	movs	r0, #0
 800cb14:	f012 f956 	bl	801edc4 <llhwc_slptmr_set>
 800cb18:	b110      	cbz	r0, 800cb20 <evnt_schdlr_exec+0xd0>
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	f000 bcad 	b.w	800d47a <evnt_schdlr_exec+0xa2a>
 800cb20:	2001      	movs	r0, #1
 800cb22:	2100      	movs	r1, #0
 800cb24:	2401      	movs	r4, #1
 800cb26:	f013 f8ad 	bl	801fc84 <llhwc_cmn_control_aclk>
 800cb2a:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800cb2e:	4242      	negs	r2, r0
 800cb30:	eb74 0101 	sbcs.w	r1, r4, r1
 800cb34:	d30c      	bcc.n	800cb50 <evnt_schdlr_exec+0x100>
 800cb36:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 800cb3a:	d006      	beq.n	800cb4a <evnt_schdlr_exec+0xfa>
 800cb3c:	f8db 0074 	ldr.w	r0, [fp, #116]	@ 0x74
 800cb40:	f890 0122 	ldrb.w	r0, [r0, #290]	@ 0x122
 800cb44:	3801      	subs	r0, #1
 800cb46:	2802      	cmp	r0, #2
 800cb48:	d302      	bcc.n	800cb50 <evnt_schdlr_exec+0x100>
 800cb4a:	2002      	movs	r0, #2
 800cb4c:	f011 feac 	bl	801e8a8 <llhwc_pwr_switch>
 800cb50:	4658      	mov	r0, fp
 800cb52:	f008 fdba 	bl	80156ca <llhwc_set_evnt_hndl>
 800cb56:	e9db 7524 	ldrd	r7, r5, [fp, #144]	@ 0x90
 800cb5a:	261f      	movs	r6, #31
 800cb5c:	f1d7 003f 	rsbs	r0, r7, #63	@ 0x3f
 800cb60:	f04f 0000 	mov.w	r0, #0
 800cb64:	eb70 0105 	sbcs.w	r1, r0, r5
 800cb68:	f2c0 808d 	blt.w	800cc86 <evnt_schdlr_exec+0x236>
 800cb6c:	1e79      	subs	r1, r7, #1
 800cb6e:	f165 0200 	sbc.w	r2, r5, #0
 800cb72:	f1d1 031f 	rsbs	r3, r1, #31
 800cb76:	4190      	sbcs	r0, r2
 800cb78:	f0c0 847f 	bcc.w	800d47a <evnt_schdlr_exec+0xa2a>
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	4088      	lsls	r0, r1
 800cb80:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 800cb84:	f000 80c2 	beq.w	800cd0c <evnt_schdlr_exec+0x2bc>
 800cb88:	f8db 6074 	ldr.w	r6, [fp, #116]	@ 0x74
 800cb8c:	f646 48a0 	movw	r8, #27808	@ 0x6ca0
 800cb90:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 800cb94:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800cb98:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb9c:	f896 a018 	ldrb.w	sl, [r6, #24]
 800cba0:	7e74      	ldrb	r4, [r6, #25]
 800cba2:	9001      	str	r0, [sp, #4]
 800cba4:	f8bb 9008 	ldrh.w	r9, [fp, #8]
 800cba8:	f108 0004 	add.w	r0, r8, #4
 800cbac:	2124      	movs	r1, #36	@ 0x24
 800cbae:	f8c8 6000 	str.w	r6, [r8]
 800cbb2:	9002      	str	r0, [sp, #8]
 800cbb4:	f01e fed4 	bl	802b960 <__aeabi_memclr>
 800cbb8:	f108 0033 	add.w	r0, r8, #51	@ 0x33
 800cbbc:	210d      	movs	r1, #13
 800cbbe:	e9c8 750a 	strd	r7, r5, [r8, #40]	@ 0x28
 800cbc2:	f8a8 9030 	strh.w	r9, [r8, #48]	@ 0x30
 800cbc6:	f888 a032 	strb.w	sl, [r8, #50]	@ 0x32
 800cbca:	f01e fec9 	bl	802b960 <__aeabi_memclr>
 800cbce:	9801      	ldr	r0, [sp, #4]
 800cbd0:	2107      	movs	r1, #7
 800cbd2:	f888 0040 	strb.w	r0, [r8, #64]	@ 0x40
 800cbd6:	f108 0041 	add.w	r0, r8, #65	@ 0x41
 800cbda:	4645      	mov	r5, r8
 800cbdc:	f01e fec0 	bl	802b960 <__aeabi_memclr>
 800cbe0:	2c04      	cmp	r4, #4
 800cbe2:	d80c      	bhi.n	800cbfe <evnt_schdlr_exec+0x1ae>
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	40a0      	lsls	r0, r4
 800cbe8:	f010 0f15 	tst.w	r0, #21
 800cbec:	d007      	beq.n	800cbfe <evnt_schdlr_exec+0x1ae>
 800cbee:	f106 004c 	add.w	r0, r6, #76	@ 0x4c
 800cbf2:	f105 0108 	add.w	r1, r5, #8
 800cbf6:	f10d 021e 	add.w	r2, sp, #30
 800cbfa:	f002 f848 	bl	800ec8e <get_pkt_data>
 800cbfe:	9902      	ldr	r1, [sp, #8]
 800cc00:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 800cc04:	f10d 021e 	add.w	r2, sp, #30
 800cc08:	f002 f841 	bl	800ec8e <get_pkt_data>
 800cc0c:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800cc10:	2201      	movs	r2, #1
 800cc12:	f080 0004 	eor.w	r0, r0, #4
 800cc16:	f885 2034 	strb.w	r2, [r5, #52]	@ 0x34
 800cc1a:	4308      	orrs	r0, r1
 800cc1c:	d10e      	bne.n	800cc3c <evnt_schdlr_exec+0x1ec>
 800cc1e:	f895 0032 	ldrb.w	r0, [r5, #50]	@ 0x32
 800cc22:	f002 fbdb 	bl	800f3dc <evnt_count_adv_channels>
 800cc26:	2802      	cmp	r0, #2
 800cc28:	d308      	bcc.n	800cc3c <evnt_schdlr_exec+0x1ec>
 800cc2a:	6869      	ldr	r1, [r5, #4]
 800cc2c:	f105 0208 	add.w	r2, r5, #8
 800cc30:	3801      	subs	r0, #1
 800cc32:	bf00      	nop
 800cc34:	f842 1b04 	str.w	r1, [r2], #4
 800cc38:	3801      	subs	r0, #1
 800cc3a:	d1fb      	bne.n	800cc34 <evnt_schdlr_exec+0x1e4>
 800cc3c:	7e30      	ldrb	r0, [r6, #24]
 800cc3e:	7e73      	ldrb	r3, [r6, #25]
 800cc40:	0147      	lsls	r7, r0, #5
 800cc42:	b27f      	sxtb	r7, r7
 800cc44:	2100      	movs	r1, #0
 800cc46:	f3c7 17c1 	ubfx	r7, r7, #7, #2
 800cc4a:	f646 4a3c 	movw	sl, #27708	@ 0x6c3c
 800cc4e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cc52:	910a      	str	r1, [sp, #40]	@ 0x28
 800cc54:	9108      	str	r1, [sp, #32]
 800cc56:	f000 0101 	and.w	r1, r0, #1
 800cc5a:	f000 0202 	and.w	r2, r0, #2
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 800cc64:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
 800cc68:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
 800cc6c:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 800cc70:	f040 8128 	bne.w	800cec4 <evnt_schdlr_exec+0x474>
 800cc74:	0740      	lsls	r0, r0, #29
 800cc76:	2303      	movs	r3, #3
 800cc78:	ea03 70e0 	and.w	r0, r3, r0, asr #31
 800cc7c:	0100      	lsls	r0, r0, #4
 800cc7e:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 800cc82:	4408      	add	r0, r1
 800cc84:	e204      	b.n	800d090 <evnt_schdlr_exec+0x640>
 800cc86:	f1d7 01ff 	rsbs	r1, r7, #255	@ 0xff
 800cc8a:	41a8      	sbcs	r0, r5
 800cc8c:	f280 80ae 	bge.w	800cdec <evnt_schdlr_exec+0x39c>
 800cc90:	f487 7080 	eor.w	r0, r7, #256	@ 0x100
 800cc94:	4328      	orrs	r0, r5
 800cc96:	f000 80b3 	beq.w	800ce00 <evnt_schdlr_exec+0x3b0>
 800cc9a:	f085 0002 	eor.w	r0, r5, #2
 800cc9e:	4338      	orrs	r0, r7
 800cca0:	f000 813c 	beq.w	800cf1c <evnt_schdlr_exec+0x4cc>
 800cca4:	f085 0008 	eor.w	r0, r5, #8
 800cca8:	4338      	orrs	r0, r7
 800ccaa:	f040 83e6 	bne.w	800d47a <evnt_schdlr_exec+0xa2a>
 800ccae:	e9db 0105 	ldrd	r0, r1, [fp, #20]
 800ccb2:	4281      	cmp	r1, r0
 800ccb4:	bf84      	itt	hi
 800ccb6:	4658      	movhi	r0, fp
 800ccb8:	f001 ff34 	blhi	800eb24 <gnrc_evnt_durn_update>
 800ccbc:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 800ccc0:	f8ca b028 	str.w	fp, [sl, #40]	@ 0x28
 800ccc4:	6901      	ldr	r1, [r0, #16]
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	4788      	blx	r1
 800ccca:	f240 10bc 	movw	r0, #444	@ 0x1bc
 800ccce:	f646 4178 	movw	r1, #27768	@ 0x6c78
 800ccd2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ccd6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800ccda:	6800      	ldr	r0, [r0, #0]
 800ccdc:	6889      	ldr	r1, [r1, #8]
 800ccde:	f8db 3060 	ldr.w	r3, [fp, #96]	@ 0x60
 800cce2:	4408      	add	r0, r1
 800cce4:	1a18      	subs	r0, r3, r0
 800cce6:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 800ccea:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 800ccee:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 800ccf2:	eb01 0190 	add.w	r1, r1, r0, lsr #2
 800ccf6:	4658      	mov	r0, fp
 800ccf8:	4798      	blx	r3
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	f000 840c 	beq.w	800d518 <evnt_schdlr_exec+0xac8>
 800cd00:	4606      	mov	r6, r0
 800cd02:	4658      	mov	r0, fp
 800cd04:	f001 fdd3 	bl	800e8ae <evnt_schdlr_gnrc_evnt_cmplt>
 800cd08:	f000 bc07 	b.w	800d51a <evnt_schdlr_exec+0xaca>
 800cd0c:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 800cd10:	f000 83b3 	beq.w	800d47a <evnt_schdlr_exec+0xa2a>
 800cd14:	2001      	movs	r0, #1
 800cd16:	2101      	movs	r1, #1
 800cd18:	f00e fe01 	bl	801b91e <bsp_assert>
 800cd1c:	f8db 7074 	ldr.w	r7, [fp, #116]	@ 0x74
 800cd20:	2100      	movs	r1, #0
 800cd22:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 800cd26:	8978      	ldrh	r0, [r7, #10]
 800cd28:	f240 2271 	movw	r2, #625	@ 0x271
 800cd2c:	fb00 f202 	mul.w	r2, r0, r2
 800cd30:	f646 40a0 	movw	r0, #27808	@ 0x6ca0
 800cd34:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800cd38:	f1b9 0f00 	cmp.w	r9, #0
 800cd3c:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 800cd40:	e9c0 1200 	strd	r1, r2, [r0]
 800cd44:	e9c0 1702 	strd	r1, r7, [r0, #8]
 800cd48:	e9c0 1104 	strd	r1, r1, [r0, #16]
 800cd4c:	6181      	str	r1, [r0, #24]
 800cd4e:	61c1      	str	r1, [r0, #28]
 800cd50:	d004      	beq.n	800cd5c <evnt_schdlr_exec+0x30c>
 800cd52:	ebc9 1149 	rsb	r1, r9, r9, lsl #5
 800cd56:	eb01 0199 	add.w	r1, r1, r9, lsr #2
 800cd5a:	6041      	str	r1, [r0, #4]
 800cd5c:	f646 48a0 	movw	r8, #27808	@ 0x6ca0
 800cd60:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800cd64:	f107 0010 	add.w	r0, r7, #16
 800cd68:	4641      	mov	r1, r8
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2400      	movs	r4, #0
 800cd6e:	f001 ff8e 	bl	800ec8e <get_pkt_data>
 800cd72:	f8bb 0088 	ldrh.w	r0, [fp, #136]	@ 0x88
 800cd76:	f64a 26ab 	movw	r6, #43691	@ 0xaaab
 800cd7a:	f8bb 100e 	ldrh.w	r1, [fp, #14]
 800cd7e:	f6ca 26aa 	movt	r6, #43690	@ 0xaaaa
 800cd82:	fba0 2306 	umull	r2, r3, r0, r6
 800cd86:	fba1 1206 	umull	r1, r2, r1, r6
 800cd8a:	ea83 0102 	eor.w	r1, r3, r2
 800cd8e:	0909      	lsrs	r1, r1, #4
 800cd90:	0609      	lsls	r1, r1, #24
 800cd92:	f107 0551 	add.w	r5, r7, #81	@ 0x51
 800cd96:	d103      	bne.n	800cda0 <evnt_schdlr_exec+0x350>
 800cd98:	f89b 108c 	ldrb.w	r1, [fp, #140]	@ 0x8c
 800cd9c:	2901      	cmp	r1, #1
 800cd9e:	d107      	bne.n	800cdb0 <evnt_schdlr_exec+0x360>
 800cda0:	4628      	mov	r0, r5
 800cda2:	2108      	movs	r1, #8
 800cda4:	f007 f91f 	bl	8013fe6 <llhwc_gen_rnd_num>
 800cda8:	f8bb 0088 	ldrh.w	r0, [fp, #136]	@ 0x88
 800cdac:	f88b 408c 	strb.w	r4, [fp, #140]	@ 0x8c
 800cdb0:	fba0 0106 	umull	r0, r1, r0, r6
 800cdb4:	f3c1 0242 	ubfx	r2, r1, #1, #3
 800cdb8:	5ca9      	ldrb	r1, [r5, r2]
 800cdba:	f001 0003 	and.w	r0, r1, #3
 800cdbe:	2803      	cmp	r0, #3
 800cdc0:	f040 80c7 	bne.w	800cf52 <evnt_schdlr_exec+0x502>
 800cdc4:	f89b 0010 	ldrb.w	r0, [fp, #16]
 800cdc8:	230c      	movs	r3, #12
 800cdca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800cdce:	f001 04f3 	and.w	r4, r1, #243	@ 0xf3
 800cdd2:	f003 030c 	and.w	r3, r3, #12
 800cdd6:	4423      	add	r3, r4
 800cdd8:	54ab      	strb	r3, [r5, r2]
 800cdda:	f89b 2010 	ldrb.w	r2, [fp, #16]
 800cdde:	2a27      	cmp	r2, #39	@ 0x27
 800cde0:	bf14      	ite	ne
 800cde2:	3201      	addne	r2, #1
 800cde4:	2225      	moveq	r2, #37	@ 0x25
 800cde6:	f88b 2010 	strb.w	r2, [fp, #16]
 800cdea:	e0b3      	b.n	800cf54 <evnt_schdlr_exec+0x504>
 800cdec:	f087 0040 	eor.w	r0, r7, #64	@ 0x40
 800cdf0:	4328      	orrs	r0, r5
 800cdf2:	f000 80f1 	beq.w	800cfd8 <evnt_schdlr_exec+0x588>
 800cdf6:	f087 0080 	eor.w	r0, r7, #128	@ 0x80
 800cdfa:	4328      	orrs	r0, r5
 800cdfc:	f040 833d 	bne.w	800d47a <evnt_schdlr_exec+0xa2a>
 800ce00:	f89a 0039 	ldrb.w	r0, [sl, #57]	@ 0x39
 800ce04:	b970      	cbnz	r0, 800ce24 <evnt_schdlr_exec+0x3d4>
 800ce06:	f8db 0074 	ldr.w	r0, [fp, #116]	@ 0x74
 800ce0a:	f890 0122 	ldrb.w	r0, [r0, #290]	@ 0x122
 800ce0e:	3801      	subs	r0, #1
 800ce10:	2801      	cmp	r0, #1
 800ce12:	d807      	bhi.n	800ce24 <evnt_schdlr_exec+0x3d4>
 800ce14:	2004      	movs	r0, #4
 800ce16:	f011 fd47 	bl	801e8a8 <llhwc_pwr_switch>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	f47f ae7d 	bne.w	800cb1a <evnt_schdlr_exec+0xca>
 800ce20:	e9db 7524 	ldrd	r7, r5, [fp, #144]	@ 0x90
 800ce24:	f646 40a0 	movw	r0, #27808	@ 0x6ca0
 800ce28:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ce2c:	2400      	movs	r4, #0
 800ce2e:	f8db 8074 	ldr.w	r8, [fp, #116]	@ 0x74
 800ce32:	e9c0 5403 	strd	r5, r4, [r0, #12]
 800ce36:	f646 45e8 	movw	r5, #27880	@ 0x6ce8
 800ce3a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800ce3e:	7004      	strb	r4, [r0, #0]
 800ce40:	6087      	str	r7, [r0, #8]
 800ce42:	4607      	mov	r7, r0
 800ce44:	7504      	strb	r4, [r0, #20]
 800ce46:	6185      	str	r5, [r0, #24]
 800ce48:	8384      	strh	r4, [r0, #28]
 800ce4a:	f898 0127 	ldrb.w	r0, [r8, #295]	@ 0x127
 800ce4e:	77bc      	strb	r4, [r7, #30]
 800ce50:	2801      	cmp	r0, #1
 800ce52:	623c      	str	r4, [r7, #32]
 800ce54:	d107      	bne.n	800ce66 <evnt_schdlr_exec+0x416>
 800ce56:	f898 012f 	ldrb.w	r0, [r8, #303]	@ 0x12f
 800ce5a:	f8db 4000 	ldr.w	r4, [fp]
 800ce5e:	2101      	movs	r1, #1
 800ce60:	f012 fb9a 	bl	801f598 <llhwc_get_hw_setup_time>
 800ce64:	4404      	add	r4, r0
 800ce66:	f8d8 014c 	ldr.w	r0, [r8, #332]	@ 0x14c
 800ce6a:	f10b 0158 	add.w	r1, fp, #88	@ 0x58
 800ce6e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ce70:	f10b 0050 	add.w	r0, fp, #80	@ 0x50
 800ce74:	f010 fab1 	bl	801d3da <ble_time_ordered_diff_us>
 800ce78:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 800ce7c:	4420      	add	r0, r4
 800ce7e:	e9cd 010b 	strd	r0, r1, [sp, #44]	@ 0x2c
 800ce82:	f8db 0000 	ldr.w	r0, [fp]
 800ce86:	f8b8 1016 	ldrh.w	r1, [r8, #22]
 800ce8a:	2204      	movs	r2, #4
 800ce8c:	e9cd 010d 	strd	r0, r1, [sp, #52]	@ 0x34
 800ce90:	f508 7197 	add.w	r1, r8, #302	@ 0x12e
 800ce94:	f107 0020 	add.w	r0, r7, #32
 800ce98:	f013 fcd4 	bl	8020844 <ble_memcpy>
 800ce9c:	f898 012c 	ldrb.w	r0, [r8, #300]	@ 0x12c
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f000 811d 	beq.w	800d0e0 <evnt_schdlr_exec+0x690>
 800cea6:	f8b8 10da 	ldrh.w	r1, [r8, #218]	@ 0xda
 800ceaa:	f646 42a0 	movw	r2, #27808	@ 0x6ca0
 800ceae:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800ceb2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800ceb6:	f006 fe25 	bl	8013b04 <llhwc_get_ch_idx_algo_2>
 800ceba:	4606      	mov	r6, r0
 800cebc:	2800      	cmp	r0, #0
 800cebe:	f040 82d6 	bne.w	800d46e <evnt_schdlr_exec+0xa1e>
 800cec2:	e110      	b.n	800d0e6 <evnt_schdlr_exec+0x696>
 800cec4:	a80a      	add	r0, sp, #40	@ 0x28
 800cec6:	2101      	movs	r1, #1
 800cec8:	f007 f88d 	bl	8013fe6 <llhwc_gen_rnd_num>
 800cecc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cece:	f10d 0725 	add.w	r7, sp, #37	@ 0x25
 800ced2:	f000 0003 	and.w	r0, r0, #3
 800ced6:	1ec1      	subs	r1, r0, #3
 800ced8:	bf18      	it	ne
 800ceda:	4601      	movne	r1, r0
 800cedc:	5c78      	ldrb	r0, [r7, r1]
 800cede:	910a      	str	r1, [sp, #40]	@ 0x28
 800cee0:	f000 0803 	and.w	r8, r0, #3
 800cee4:	a808      	add	r0, sp, #32
 800cee6:	2101      	movs	r1, #1
 800cee8:	f007 f87d 	bl	8013fe6 <llhwc_gen_rnd_num>
 800ceec:	f89d 1020 	ldrb.w	r1, [sp, #32]
 800cef0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cef2:	07c9      	lsls	r1, r1, #31
 800cef4:	f040 80bb 	bne.w	800d06e <evnt_schdlr_exec+0x61e>
 800cef8:	1e41      	subs	r1, r0, #1
 800cefa:	2800      	cmp	r0, #0
 800cefc:	bf08      	it	eq
 800cefe:	2102      	moveq	r1, #2
 800cf00:	1e4a      	subs	r2, r1, #1
 800cf02:	5c78      	ldrb	r0, [r7, r1]
 800cf04:	2900      	cmp	r1, #0
 800cf06:	bf08      	it	eq
 800cf08:	2202      	moveq	r2, #2
 800cf0a:	5cb9      	ldrb	r1, [r7, r2]
 800cf0c:	2230      	movs	r2, #48	@ 0x30
 800cf0e:	ea02 1101 	and.w	r1, r2, r1, lsl #4
 800cf12:	f360 0183 	bfi	r1, r0, #2, #2
 800cf16:	eb01 0008 	add.w	r0, r1, r8
 800cf1a:	e0b9      	b.n	800d090 <evnt_schdlr_exec+0x640>
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	f88b 008d 	strb.w	r0, [fp, #141]	@ 0x8d
 800cf22:	ebc9 1049 	rsb	r0, r9, r9, lsl #5
 800cf26:	f8ca b028 	str.w	fp, [sl, #40]	@ 0x28
 800cf2a:	f8db 2024 	ldr.w	r2, [fp, #36]	@ 0x24
 800cf2e:	f8db 3028 	ldr.w	r3, [fp, #40]	@ 0x28
 800cf32:	eb00 0199 	add.w	r1, r0, r9, lsr #2
 800cf36:	2600      	movs	r6, #0
 800cf38:	4658      	mov	r0, fp
 800cf3a:	f88b 6099 	strb.w	r6, [fp, #153]	@ 0x99
 800cf3e:	4798      	blx	r3
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f000 82ea 	beq.w	800d51a <evnt_schdlr_exec+0xaca>
 800cf46:	4605      	mov	r5, r0
 800cf48:	4658      	mov	r0, fp
 800cf4a:	f001 fcb0 	bl	800e8ae <evnt_schdlr_gnrc_evnt_cmplt>
 800cf4e:	462e      	mov	r6, r5
 800cf50:	e2e3      	b.n	800d51a <evnt_schdlr_exec+0xaca>
 800cf52:	3025      	adds	r0, #37	@ 0x25
 800cf54:	f8bb 2088 	ldrh.w	r2, [fp, #136]	@ 0x88
 800cf58:	fba2 3606 	umull	r3, r6, r2, r6
 800cf5c:	0873      	lsrs	r3, r6, #1
 800cf5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	d00f      	beq.n	800cf86 <evnt_schdlr_exec+0x536>
 800cf66:	3b01      	subs	r3, #1
 800cf68:	bf18      	it	ne
 800cf6a:	2301      	movne	r3, #1
 800cf6c:	ea83 0191 	eor.w	r1, r3, r1, lsr #2
 800cf70:	f24e 03f0 	movw	r3, #57584	@ 0xe0f0
 800cf74:	f6c0 0302 	movt	r3, #2050	@ 0x802
 800cf78:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800cf7c:	f001 0101 	and.w	r1, r1, #1
 800cf80:	4408      	add	r0, r1
 800cf82:	f810 0c4a 	ldrb.w	r0, [r0, #-74]
 800cf86:	f88b 000c 	strb.w	r0, [fp, #12]
 800cf8a:	f8db 0090 	ldr.w	r0, [fp, #144]	@ 0x90
 800cf8e:	2100      	movs	r1, #0
 800cf90:	f010 0f30 	tst.w	r0, #48	@ 0x30
 800cf94:	f8ab 200e 	strh.w	r2, [fp, #14]
 800cf98:	f88b 1099 	strb.w	r1, [fp, #153]	@ 0x99
 800cf9c:	d006      	beq.n	800cfac <evnt_schdlr_exec+0x55c>
 800cf9e:	f8db 1094 	ldr.w	r1, [fp, #148]	@ 0x94
 800cfa2:	e9cb 0106 	strd	r0, r1, [fp, #24]
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	f888 0019 	strb.w	r0, [r8, #25]
 800cfac:	e9db 0106 	ldrd	r0, r1, [fp, #24]
 800cfb0:	e9c8 0104 	strd	r0, r1, [r8, #16]
 800cfb4:	f89b 000c 	ldrb.w	r0, [fp, #12]
 800cfb8:	f888 0018 	strb.w	r0, [r8, #24]
 800cfbc:	f108 0009 	add.w	r0, r8, #9
 800cfc0:	f015 fbef 	bl	80227a2 <db_get_tx_power_value>
 800cfc4:	f013 fdf9 	bl	8020bba <pta_configure_non_prdc_scan_params>
 800cfc8:	f107 000e 	add.w	r0, r7, #14
 800cfcc:	a90a      	add	r1, sp, #40	@ 0x28
 800cfce:	4642      	mov	r2, r8
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	f007 fbd2 	bl	801477a <llhwc_set_scan_param>
 800cfd6:	e176      	b.n	800d2c6 <evnt_schdlr_exec+0x876>
 800cfd8:	f8db 7074 	ldr.w	r7, [fp, #116]	@ 0x74
 800cfdc:	2001      	movs	r0, #1
 800cfde:	2101      	movs	r1, #1
 800cfe0:	f00e fc9d 	bl	801b91e <bsp_assert>
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	2f00      	cmp	r7, #0
 800cfea:	bf18      	it	ne
 800cfec:	2001      	movne	r0, #1
 800cfee:	f00e fc96 	bl	801b91e <bsp_assert>
 800cff2:	f8bb 0088 	ldrh.w	r0, [fp, #136]	@ 0x88
 800cff6:	f64a 26ab 	movw	r6, #43691	@ 0xaaab
 800cffa:	f8bb 100e 	ldrh.w	r1, [fp, #14]
 800cffe:	f6ca 26aa 	movt	r6, #43690	@ 0xaaaa
 800d002:	fba0 2306 	umull	r2, r3, r0, r6
 800d006:	fba1 1206 	umull	r1, r2, r1, r6
 800d00a:	ea83 0102 	eor.w	r1, r3, r2
 800d00e:	0909      	lsrs	r1, r1, #4
 800d010:	0609      	lsls	r1, r1, #24
 800d012:	f107 0542 	add.w	r5, r7, #66	@ 0x42
 800d016:	d103      	bne.n	800d020 <evnt_schdlr_exec+0x5d0>
 800d018:	f89b 108c 	ldrb.w	r1, [fp, #140]	@ 0x8c
 800d01c:	2901      	cmp	r1, #1
 800d01e:	d108      	bne.n	800d032 <evnt_schdlr_exec+0x5e2>
 800d020:	4628      	mov	r0, r5
 800d022:	2108      	movs	r1, #8
 800d024:	f006 ffdf 	bl	8013fe6 <llhwc_gen_rnd_num>
 800d028:	f8bb 0088 	ldrh.w	r0, [fp, #136]	@ 0x88
 800d02c:	2100      	movs	r1, #0
 800d02e:	f88b 108c 	strb.w	r1, [fp, #140]	@ 0x8c
 800d032:	fba0 0106 	umull	r0, r1, r0, r6
 800d036:	f3c1 0242 	ubfx	r2, r1, #1, #3
 800d03a:	5ca9      	ldrb	r1, [r5, r2]
 800d03c:	f001 0003 	and.w	r0, r1, #3
 800d040:	2803      	cmp	r0, #3
 800d042:	f040 8142 	bne.w	800d2ca <evnt_schdlr_exec+0x87a>
 800d046:	f89b 0010 	ldrb.w	r0, [fp, #16]
 800d04a:	230c      	movs	r3, #12
 800d04c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800d050:	f001 04f3 	and.w	r4, r1, #243	@ 0xf3
 800d054:	f003 030c 	and.w	r3, r3, #12
 800d058:	4423      	add	r3, r4
 800d05a:	54ab      	strb	r3, [r5, r2]
 800d05c:	f89b 2010 	ldrb.w	r2, [fp, #16]
 800d060:	2a27      	cmp	r2, #39	@ 0x27
 800d062:	bf14      	ite	ne
 800d064:	3201      	addne	r2, #1
 800d066:	2225      	moveq	r2, #37	@ 0x25
 800d068:	f88b 2010 	strb.w	r2, [fp, #16]
 800d06c:	e12e      	b.n	800d2cc <evnt_schdlr_exec+0x87c>
 800d06e:	3001      	adds	r0, #1
 800d070:	2802      	cmp	r0, #2
 800d072:	bf88      	it	hi
 800d074:	2000      	movhi	r0, #0
 800d076:	1839      	adds	r1, r7, r0
 800d078:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d07c:	2801      	cmp	r0, #1
 800d07e:	bf88      	it	hi
 800d080:	4639      	movhi	r1, r7
 800d082:	7808      	ldrb	r0, [r1, #0]
 800d084:	2130      	movs	r1, #48	@ 0x30
 800d086:	ea01 1000 	and.w	r0, r1, r0, lsl #4
 800d08a:	f362 0083 	bfi	r0, r2, #2, #2
 800d08e:	4440      	add	r0, r8
 800d090:	e9db 2124 	ldrd	r2, r1, [fp, #144]	@ 0x90
 800d094:	f885 0032 	strb.w	r0, [r5, #50]	@ 0x32
 800d098:	f641 77ff 	movw	r7, #8191	@ 0x1fff
 800d09c:	7e33      	ldrb	r3, [r6, #24]
 800d09e:	2000      	movs	r0, #0
 800d0a0:	1abf      	subs	r7, r7, r2
 800d0a2:	eb70 0701 	sbcs.w	r7, r0, r1
 800d0a6:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
 800d0aa:	da0f      	bge.n	800d0cc <evnt_schdlr_exec+0x67c>
 800d0ac:	f482 5300 	eor.w	r3, r2, #8192	@ 0x2000
 800d0b0:	430b      	orrs	r3, r1
 800d0b2:	f000 80ed 	beq.w	800d290 <evnt_schdlr_exec+0x840>
 800d0b6:	f082 7300 	eor.w	r3, r2, #33554432	@ 0x2000000
 800d0ba:	430b      	orrs	r3, r1
 800d0bc:	f000 80ea 	beq.w	800d294 <evnt_schdlr_exec+0x844>
 800d0c0:	f082 6280 	eor.w	r2, r2, #67108864	@ 0x4000000
 800d0c4:	4311      	orrs	r1, r2
 800d0c6:	bf08      	it	eq
 800d0c8:	2002      	moveq	r0, #2
 800d0ca:	e0e4      	b.n	800d296 <evnt_schdlr_exec+0x846>
 800d0cc:	f082 0304 	eor.w	r3, r2, #4
 800d0d0:	430b      	orrs	r3, r1
 800d0d2:	bf1a      	itte	ne
 800d0d4:	f082 0208 	eorne.w	r2, r2, #8
 800d0d8:	ea51 0102 	orrsne.w	r1, r1, r2
 800d0dc:	2001      	moveq	r0, #1
 800d0de:	e0da      	b.n	800d296 <evnt_schdlr_exec+0x846>
 800d0e0:	f898 0025 	ldrb.w	r0, [r8, #37]	@ 0x25
 800d0e4:	7038      	strb	r0, [r7, #0]
 800d0e6:	f898 0020 	ldrb.w	r0, [r8, #32]
 800d0ea:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 800d0ee:	fb00 f101 	mul.w	r1, r0, r1
 800d0f2:	f8db 2000 	ldr.w	r2, [fp]
 800d0f6:	f898 012f 	ldrb.w	r0, [r8, #303]	@ 0x12f
 800d0fa:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 800d0fe:	2101      	movs	r1, #1
 800d100:	f007 fb26 	bl	8014750 <llhwc_get_access_adrs_time>
 800d104:	4420      	add	r0, r4
 800d106:	3008      	adds	r0, #8
 800d108:	6138      	str	r0, [r7, #16]
 800d10a:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 800d10e:	f89b 1018 	ldrb.w	r1, [fp, #24]
 800d112:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d114:	4658      	mov	r0, fp
 800d116:	7739      	strb	r1, [r7, #28]
 800d118:	4790      	blx	r2
 800d11a:	2101      	movs	r1, #1
 800d11c:	4607      	mov	r7, r0
 800d11e:	2800      	cmp	r0, #0
 800d120:	bf18      	it	ne
 800d122:	2001      	movne	r0, #1
 800d124:	f00e fbfb 	bl	801b91e <bsp_assert>
 800d128:	f248 14e8 	movw	r4, #33256	@ 0x81e8
 800d12c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800d130:	2100      	movs	r1, #0
 800d132:	6820      	ldr	r0, [r4, #0]
 800d134:	f88b 1018 	strb.w	r1, [fp, #24]
 800d138:	f04f 31ff 	mov.w	r1, #4294967295
 800d13c:	f00e fc53 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800d140:	f10b 0a0c 	add.w	sl, fp, #12
 800d144:	4650      	mov	r0, sl
 800d146:	f002 f9ac 	bl	800f4a2 <packet_get_frst_pkt>
 800d14a:	e9db 1224 	ldrd	r1, r2, [fp, #144]	@ 0x90
 800d14e:	4606      	mov	r6, r0
 800d150:	f481 7180 	eor.w	r1, r1, #256	@ 0x100
 800d154:	f8cd 900c 	str.w	r9, [sp, #12]
 800d158:	4311      	orrs	r1, r2
 800d15a:	d112      	bne.n	800d182 <evnt_schdlr_exec+0x732>
 800d15c:	f240 10c0 	movw	r0, #448	@ 0x1c0
 800d160:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800d164:	4286      	cmp	r6, r0
 800d166:	d00b      	beq.n	800d180 <evnt_schdlr_exec+0x730>
 800d168:	7bb0      	ldrb	r0, [r6, #14]
 800d16a:	0780      	lsls	r0, r0, #30
 800d16c:	d508      	bpl.n	800d180 <evnt_schdlr_exec+0x730>
 800d16e:	6830      	ldr	r0, [r6, #0]
 800d170:	8971      	ldrh	r1, [r6, #10]
 800d172:	89b2      	ldrh	r2, [r6, #12]
 800d174:	4408      	add	r0, r1
 800d176:	4410      	add	r0, r2
 800d178:	7900      	ldrb	r0, [r0, #4]
 800d17a:	280b      	cmp	r0, #11
 800d17c:	bf08      	it	eq
 800d17e:	2701      	moveq	r7, #1
 800d180:	3701      	adds	r7, #1
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	f8cd 8008 	str.w	r8, [sp, #8]
 800d18a:	b386      	cbz	r6, 800d1ee <evnt_schdlr_exec+0x79e>
 800d18c:	0638      	lsls	r0, r7, #24
 800d18e:	d02e      	beq.n	800d1ee <evnt_schdlr_exec+0x79e>
 800d190:	4638      	mov	r0, r7
 800d192:	f240 14c0 	movw	r4, #448	@ 0x1c0
 800d196:	462f      	mov	r7, r5
 800d198:	3520      	adds	r5, #32
 800d19a:	fa5f f880 	uxtb.w	r8, r0
 800d19e:	f04f 0900 	mov.w	r9, #0
 800d1a2:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800d1a6:	9001      	str	r0, [sp, #4]
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	4639      	mov	r1, r7
 800d1ac:	462a      	mov	r2, r5
 800d1ae:	f001 fd6e 	bl	800ec8e <get_pkt_data>
 800d1b2:	f89b 0018 	ldrb.w	r0, [fp, #24]
 800d1b6:	42a6      	cmp	r6, r4
 800d1b8:	f100 0001 	add.w	r0, r0, #1
 800d1bc:	f88b 0018 	strb.w	r0, [fp, #24]
 800d1c0:	4650      	mov	r0, sl
 800d1c2:	bf18      	it	ne
 800d1c4:	1d30      	addne	r0, r6, #4
 800d1c6:	6806      	ldr	r6, [r0, #0]
 800d1c8:	f109 0901 	add.w	r9, r9, #1
 800d1cc:	b126      	cbz	r6, 800d1d8 <evnt_schdlr_exec+0x788>
 800d1ce:	3502      	adds	r5, #2
 800d1d0:	45c1      	cmp	r9, r8
 800d1d2:	f107 0704 	add.w	r7, r7, #4
 800d1d6:	d3e7      	bcc.n	800d1a8 <evnt_schdlr_exec+0x758>
 800d1d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d1dc:	f646 45e8 	movw	r5, #27880	@ 0x6ce8
 800d1e0:	f248 14e8 	movw	r4, #33256	@ 0x81e8
 800d1e4:	9f01      	ldr	r7, [sp, #4]
 800d1e6:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800d1ea:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	b2ff      	uxtb	r7, r7
 800d1f2:	fa5f f089 	uxtb.w	r0, r9
 800d1f6:	f646 4a3c 	movw	sl, #27708	@ 0x6c3c
 800d1fa:	42b8      	cmp	r0, r7
 800d1fc:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 800d200:	d222      	bcs.n	800d248 <evnt_schdlr_exec+0x7f8>
 800d202:	4689      	mov	r9, r1
 800d204:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800d208:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800d20c:	f240 18c0 	movw	r8, #448	@ 0x1c0
 800d210:	1c44      	adds	r4, r0, #1
 800d212:	f101 0620 	add.w	r6, r1, #32
 800d216:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800d21a:	bf00      	nop
 800d21c:	4640      	mov	r0, r8
 800d21e:	4629      	mov	r1, r5
 800d220:	4632      	mov	r2, r6
 800d222:	f001 fd34 	bl	800ec8e <get_pkt_data>
 800d226:	b2e0      	uxtb	r0, r4
 800d228:	3401      	adds	r4, #1
 800d22a:	3602      	adds	r6, #2
 800d22c:	4287      	cmp	r7, r0
 800d22e:	f105 0504 	add.w	r5, r5, #4
 800d232:	d1f3      	bne.n	800d21c <evnt_schdlr_exec+0x7cc>
 800d234:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d238:	f646 45e8 	movw	r5, #27880	@ 0x6ce8
 800d23c:	f248 14e8 	movw	r4, #33256	@ 0x81e8
 800d240:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800d244:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800d248:	fa5f f089 	uxtb.w	r0, r9
 800d24c:	2807      	cmp	r0, #7
 800d24e:	d80a      	bhi.n	800d266 <evnt_schdlr_exec+0x816>
 800d250:	2100      	movs	r1, #0
 800d252:	bf00      	nop
 800d254:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800d258:	eb05 0240 	add.w	r2, r5, r0, lsl #1
 800d25c:	3001      	adds	r0, #1
 800d25e:	b2c3      	uxtb	r3, r0
 800d260:	2b08      	cmp	r3, #8
 800d262:	8411      	strh	r1, [r2, #32]
 800d264:	d1f6      	bne.n	800d254 <evnt_schdlr_exec+0x804>
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	f00e fbc3 	bl	801b9f2 <os_rcrsv_mutex_release>
 800d26c:	f8d8 00bc 	ldr.w	r0, [r8, #188]	@ 0xbc
 800d270:	f646 41a0 	movw	r1, #27808	@ 0x6ca0
 800d274:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800d278:	f881 9014 	strb.w	r9, [r1, #20]
 800d27c:	f00e fb28 	bl	801b8d0 <state_mngr_get_state_type>
 800d280:	2805      	cmp	r0, #5
 800d282:	f000 80a9 	beq.w	800d3d8 <evnt_schdlr_exec+0x988>
 800d286:	2806      	cmp	r0, #6
 800d288:	f040 80a8 	bne.w	800d3dc <evnt_schdlr_exec+0x98c>
 800d28c:	2501      	movs	r5, #1
 800d28e:	e0aa      	b.n	800d3e6 <evnt_schdlr_exec+0x996>
 800d290:	2003      	movs	r0, #3
 800d292:	e000      	b.n	800d296 <evnt_schdlr_exec+0x846>
 800d294:	2004      	movs	r0, #4
 800d296:	1f21      	subs	r1, r4, #4
 800d298:	bf18      	it	ne
 800d29a:	2101      	movne	r1, #1
 800d29c:	1e62      	subs	r2, r4, #1
 800d29e:	bf18      	it	ne
 800d2a0:	2201      	movne	r2, #1
 800d2a2:	4011      	ands	r1, r2
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f013 fc71 	bl	8020b8c <pta_configure_adv_params>
 800d2aa:	7e70      	ldrb	r0, [r6, #25]
 800d2ac:	1ec1      	subs	r1, r0, #3
 800d2ae:	bf18      	it	ne
 800d2b0:	2101      	movne	r1, #1
 800d2b2:	f886 1025 	strb.w	r1, [r6, #37]	@ 0x25
 800d2b6:	f646 41a0 	movw	r1, #27808	@ 0x6ca0
 800d2ba:	f106 001b 	add.w	r0, r6, #27
 800d2be:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800d2c2:	f007 f87f 	bl	80143c4 <llhwc_set_adv_param>
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	e0d6      	b.n	800d478 <evnt_schdlr_exec+0xa28>
 800d2ca:	3025      	adds	r0, #37	@ 0x25
 800d2cc:	f8bb 2088 	ldrh.w	r2, [fp, #136]	@ 0x88
 800d2d0:	fba2 3606 	umull	r3, r6, r2, r6
 800d2d4:	0873      	lsrs	r3, r6, #1
 800d2d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	d00f      	beq.n	800d2fe <evnt_schdlr_exec+0x8ae>
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	bf18      	it	ne
 800d2e2:	2301      	movne	r3, #1
 800d2e4:	ea83 0191 	eor.w	r1, r3, r1, lsr #2
 800d2e8:	f24e 03f0 	movw	r3, #57584	@ 0xe0f0
 800d2ec:	f6c0 0302 	movt	r3, #2050	@ 0x802
 800d2f0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d2f4:	f001 0101 	and.w	r1, r1, #1
 800d2f8:	4408      	add	r0, r1
 800d2fa:	f810 0c4a 	ldrb.w	r0, [r0, #-74]
 800d2fe:	2100      	movs	r1, #0
 800d300:	f88b 000c 	strb.w	r0, [fp, #12]
 800d304:	f8ab 200e 	strh.w	r2, [fp, #14]
 800d308:	f88b 1099 	strb.w	r1, [fp, #153]	@ 0x99
 800d30c:	897a      	ldrh	r2, [r7, #10]
 800d30e:	f240 2371 	movw	r3, #625	@ 0x271
 800d312:	fb02 f203 	mul.w	r2, r2, r3
 800d316:	f646 48a0 	movw	r8, #27808	@ 0x6ca0
 800d31a:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800d31e:	f1b9 0f00 	cmp.w	r9, #0
 800d322:	e9c8 7100 	strd	r7, r1, [r8]
 800d326:	f8c8 2008 	str.w	r2, [r8, #8]
 800d32a:	f888 000c 	strb.w	r0, [r8, #12]
 800d32e:	f888 100d 	strb.w	r1, [r8, #13]
 800d332:	f888 100e 	strb.w	r1, [r8, #14]
 800d336:	d005      	beq.n	800d344 <evnt_schdlr_exec+0x8f4>
 800d338:	ebc9 1049 	rsb	r0, r9, r9, lsl #5
 800d33c:	eb00 0099 	add.w	r0, r0, r9, lsr #2
 800d340:	f8c8 0008 	str.w	r0, [r8, #8]
 800d344:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 800d346:	f107 0618 	add.w	r6, r7, #24
 800d34a:	2807      	cmp	r0, #7
 800d34c:	bf8f      	iteee	hi
 800d34e:	2500      	movhi	r5, #0
 800d350:	f649 7118 	movwls	r1, #40728	@ 0x9f18
 800d354:	f2c2 0100 	movtls	r1, #8192	@ 0x2000
 800d358:	f851 5020 	ldrls.w	r5, [r1, r0, lsl #2]
 800d35c:	f108 0104 	add.w	r1, r8, #4
 800d360:	4630      	mov	r0, r6
 800d362:	2200      	movs	r2, #0
 800d364:	464c      	mov	r4, r9
 800d366:	f001 fc92 	bl	800ec8e <get_pkt_data>
 800d36a:	2001      	movs	r0, #1
 800d36c:	2101      	movs	r1, #1
 800d36e:	f04f 0901 	mov.w	r9, #1
 800d372:	f00e fad4 	bl	801b91e <bsp_assert>
 800d376:	4628      	mov	r0, r5
 800d378:	2101      	movs	r1, #1
 800d37a:	2d00      	cmp	r5, #0
 800d37c:	bf18      	it	ne
 800d37e:	2001      	movne	r0, #1
 800d380:	f00e facd 	bl	801b91e <bsp_assert>
 800d384:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 800d386:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800d388:	f105 0216 	add.w	r2, r5, #22
 800d38c:	2320      	movs	r3, #32
 800d38e:	f009 f9ef 	bl	8016770 <evnt_schdlr_choose_suitable_intrv>
 800d392:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800d394:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800d398:	f009 fc28 	bl	8016bec <evnt_schdlr_get_master_conn_anchor_point>
 800d39c:	8ae9      	ldrh	r1, [r5, #22]
 800d39e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d3a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f8cd 9000 	str.w	r9, [sp]
 800d3a8:	f00c fd37 	bl	8019e1a <pdu_trnsprt_hndlr_nconn_init_patch>
 800d3ac:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800d3b0:	f080 0040 	eor.w	r0, r0, #64	@ 0x40
 800d3b4:	4308      	orrs	r0, r1
 800d3b6:	bf08      	it	eq
 800d3b8:	f888 900d 	strbeq.w	r9, [r8, #13]
 800d3bc:	f013 fc0c 	bl	8020bd8 <pta_configure_init_params>
 800d3c0:	f646 41a0 	movw	r1, #27808	@ 0x6ca0
 800d3c4:	f107 000d 	add.w	r0, r7, #13
 800d3c8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f007 fb8a 	bl	8014ae6 <llhwc_set_init_param>
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	46a1      	mov	r9, r4
 800d3d6:	e04f      	b.n	800d478 <evnt_schdlr_exec+0xa28>
 800d3d8:	2500      	movs	r5, #0
 800d3da:	e004      	b.n	800d3e6 <evnt_schdlr_exec+0x996>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	2101      	movs	r1, #1
 800d3e0:	2500      	movs	r5, #0
 800d3e2:	f00e fa9c 	bl	801b91e <bsp_assert>
 800d3e6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d3ea:	a80a      	add	r0, sp, #40	@ 0x28
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f013 fb54 	bl	8020a9c <pta_configure_acl_params>
 800d3f4:	f646 47a0 	movw	r7, #27808	@ 0x6ca0
 800d3f8:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800d3fc:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 800d400:	f508 7190 	add.w	r1, r8, #288	@ 0x120
 800d404:	463a      	mov	r2, r7
 800d406:	f007 fcf5 	bl	8014df4 <llhwc_set_conn_evnt_param>
 800d40a:	f646 42e8 	movw	r2, #27880	@ 0x6ce8
 800d40e:	4606      	mov	r6, r0
 800d410:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800d414:	bb58      	cbnz	r0, 800d46e <evnt_schdlr_exec+0xa1e>
 800d416:	f898 0122 	ldrb.w	r0, [r8, #290]	@ 0x122
 800d41a:	3801      	subs	r0, #1
 800d41c:	2801      	cmp	r0, #1
 800d41e:	d825      	bhi.n	800d46c <evnt_schdlr_exec+0xa1c>
 800d420:	f898 1127 	ldrb.w	r1, [r8, #295]	@ 0x127
 800d424:	7f78      	ldrb	r0, [r7, #29]
 800d426:	b131      	cbz	r1, 800d436 <evnt_schdlr_exec+0x9e6>
 800d428:	7fb9      	ldrb	r1, [r7, #30]
 800d42a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800d42e:	7778      	strb	r0, [r7, #29]
 800d430:	f061 007f 	orn	r0, r1, #127	@ 0x7f
 800d434:	e005      	b.n	800d442 <evnt_schdlr_exec+0x9f2>
 800d436:	7fb9      	ldrb	r1, [r7, #30]
 800d438:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800d43c:	7778      	strb	r0, [r7, #29]
 800d43e:	f001 007f 	and.w	r0, r1, #127	@ 0x7f
 800d442:	6811      	ldr	r1, [r2, #0]
 800d444:	f240 12c0 	movw	r2, #448	@ 0x1c0
 800d448:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	77b8      	strb	r0, [r7, #30]
 800d450:	4291      	cmp	r1, r2
 800d452:	d103      	bne.n	800d45c <evnt_schdlr_exec+0xa0c>
 800d454:	7f38      	ldrb	r0, [r7, #28]
 800d456:	b108      	cbz	r0, 800d45c <evnt_schdlr_exec+0xa0c>
 800d458:	3801      	subs	r0, #1
 800d45a:	7738      	strb	r0, [r7, #28]
 800d45c:	f646 41a0 	movw	r1, #27808	@ 0x6ca0
 800d460:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800d464:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800d468:	f007 ffd5 	bl	8015416 <llhwc_conn_evnt_en_encry>
 800d46c:	2600      	movs	r6, #0
 800d46e:	f89b 009d 	ldrb.w	r0, [fp, #157]	@ 0x9d
 800d472:	3001      	adds	r0, #1
 800d474:	f88b 009d 	strb.w	r0, [fp, #157]	@ 0x9d
 800d478:	b37e      	cbz	r6, 800d4da <evnt_schdlr_exec+0xa8a>
 800d47a:	f008 f92c 	bl	80156d6 <llhwc_reset_evnt_hndl>
 800d47e:	2000      	movs	r0, #0
 800d480:	2400      	movs	r4, #0
 800d482:	f011 fed1 	bl	801f228 <llhwc_slptmr_stop>
 800d486:	2001      	movs	r0, #1
 800d488:	f011 fa0e 	bl	801e8a8 <llhwc_pwr_switch>
 800d48c:	2012      	movs	r0, #18
 800d48e:	f88b 4098 	strb.w	r4, [fp, #152]	@ 0x98
 800d492:	f00e fa8f 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800d496:	2000      	movs	r0, #0
 800d498:	2100      	movs	r1, #0
 800d49a:	f012 fbf3 	bl	801fc84 <llhwc_cmn_control_aclk>
 800d49e:	f89b 0099 	ldrb.w	r0, [fp, #153]	@ 0x99
 800d4a2:	b110      	cbz	r0, 800d4aa <evnt_schdlr_exec+0xa5a>
 800d4a4:	3801      	subs	r0, #1
 800d4a6:	f88b 0099 	strb.w	r0, [fp, #153]	@ 0x99
 800d4aa:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 800d4ae:	6941      	ldr	r1, [r0, #20]
 800d4b0:	4658      	mov	r0, fp
 800d4b2:	4788      	blx	r1
 800d4b4:	f1b9 0f00 	cmp.w	r9, #0
 800d4b8:	d12f      	bne.n	800d51a <evnt_schdlr_exec+0xaca>
 800d4ba:	e001      	b.n	800d4c0 <evnt_schdlr_exec+0xa70>
 800d4bc:	f00e fcd0 	bl	801be60 <llhwc_phy_get_nxt_seq_from_queue>
 800d4c0:	f00e fcc8 	bl	801be54 <llhwc_phy_is_phy_driver_busy>
 800d4c4:	2801      	cmp	r0, #1
 800d4c6:	d0f9      	beq.n	800d4bc <evnt_schdlr_exec+0xa6c>
 800d4c8:	f7ff f8fa 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800d4cc:	2011      	movs	r0, #17
 800d4ce:	f00e fa6f 	bl	801b9b0 <bsp_debug_gpio_clear>
 800d4d2:	f1bb 0f00 	cmp.w	fp, #0
 800d4d6:	d123      	bne.n	800d520 <evnt_schdlr_exec+0xad0>
 800d4d8:	e031      	b.n	800d53e <evnt_schdlr_exec+0xaee>
 800d4da:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800d4de:	4242      	negs	r2, r0
 800d4e0:	f04f 0201 	mov.w	r2, #1
 800d4e4:	eb72 0101 	sbcs.w	r1, r2, r1
 800d4e8:	d30f      	bcc.n	800d50a <evnt_schdlr_exec+0xaba>
 800d4ea:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 800d4ee:	d004      	beq.n	800d4fa <evnt_schdlr_exec+0xaaa>
 800d4f0:	f8db 0074 	ldr.w	r0, [fp, #116]	@ 0x74
 800d4f4:	f890 0129 	ldrb.w	r0, [r0, #297]	@ 0x129
 800d4f8:	e001      	b.n	800d4fe <evnt_schdlr_exec+0xaae>
 800d4fa:	f008 f911 	bl	8015720 <llhwc_is_in_augmented_mode>
 800d4fe:	3801      	subs	r0, #1
 800d500:	fab0 f080 	clz	r0, r0
 800d504:	0940      	lsrs	r0, r0, #5
 800d506:	f008 f8ed 	bl	80156e4 <llhwc_enable_augment_event>
 800d50a:	f8da 0024 	ldr.w	r0, [sl, #36]	@ 0x24
 800d50e:	f8ca b028 	str.w	fp, [sl, #40]	@ 0x28
 800d512:	6901      	ldr	r1, [r0, #16]
 800d514:	4658      	mov	r0, fp
 800d516:	4788      	blx	r1
 800d518:	2600      	movs	r6, #0
 800d51a:	2011      	movs	r0, #17
 800d51c:	f00e fa48 	bl	801b9b0 <bsp_debug_gpio_clear>
 800d520:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 800d524:	4240      	negs	r0, r0
 800d526:	f04f 0001 	mov.w	r0, #1
 800d52a:	4188      	sbcs	r0, r1
 800d52c:	d307      	bcc.n	800d53e <evnt_schdlr_exec+0xaee>
 800d52e:	bf00      	nop
 800d530:	f00e fc90 	bl	801be54 <llhwc_phy_is_phy_driver_busy>
 800d534:	2801      	cmp	r0, #1
 800d536:	d102      	bne.n	800d53e <evnt_schdlr_exec+0xaee>
 800d538:	f00e fc92 	bl	801be60 <llhwc_phy_get_nxt_seq_from_queue>
 800d53c:	e7f8      	b.n	800d530 <evnt_schdlr_exec+0xae0>
 800d53e:	2010      	movs	r0, #16
 800d540:	f00e fa36 	bl	801b9b0 <bsp_debug_gpio_clear>
 800d544:	4630      	mov	r0, r6
 800d546:	b00f      	add	sp, #60	@ 0x3c
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d54c <evnt_schdlr_get_req_phy_clbr_time>:
 800d54c:	b510      	push	{r4, lr}
 800d54e:	4604      	mov	r4, r0
 800d550:	f00e fa8b 	bl	801ba6a <llhwc_phy_get_num_of_prdc_clbr_chnls>
 800d554:	f894 1047 	ldrb.w	r1, [r4, #71]	@ 0x47
 800d558:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800d55c:	1a40      	subs	r0, r0, r1
 800d55e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d560:	b2c0      	uxtb	r0, r0
 800d562:	fb01 2000 	mla	r0, r1, r0, r2
 800d566:	217d      	movs	r1, #125	@ 0x7d
 800d568:	4418      	add	r0, r3
 800d56a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800d56e:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 800d572:	f247 3288 	movw	r2, #29576	@ 0x7388
 800d576:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 800d57a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800d57e:	fba0 0101 	umull	r0, r1, r0, r1
 800d582:	7d12      	ldrb	r2, [r2, #20]
 800d584:	08c8      	lsrs	r0, r1, #3
 800d586:	230a      	movs	r3, #10
 800d588:	2a01      	cmp	r2, #1
 800d58a:	bf08      	it	eq
 800d58c:	eb03 00d1 	addeq.w	r0, r3, r1, lsr #3
 800d590:	bd10      	pop	{r4, pc}

0800d592 <evnt_schdlr_rgstr_prdc_clbr_evnt>:
 800d592:	b510      	push	{r4, lr}
 800d594:	b092      	sub	sp, #72	@ 0x48
 800d596:	f24d 50d7 	movw	r0, #54743	@ 0xd5d7
 800d59a:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800d59e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d5a0:	f24d 60bf 	movw	r0, #54975	@ 0xd6bf
 800d5a4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800d5a8:	9011      	str	r0, [sp, #68]	@ 0x44
 800d5aa:	f24d 60cd 	movw	r0, #54989	@ 0xd6cd
 800d5ae:	f24d 71d9 	movw	r1, #55257	@ 0xd7d9
 800d5b2:	2400      	movs	r4, #0
 800d5b4:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800d5b8:	f6c0 0100 	movt	r1, #2048	@ 0x800
 800d5bc:	940e      	str	r4, [sp, #56]	@ 0x38
 800d5be:	f00f fa80 	bl	801cac2 <llhwc_phy_set_schdr_clbr_cbks>
 800d5c2:	aa04      	add	r2, sp, #16
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	2104      	movs	r1, #4
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	9402      	str	r4, [sp, #8]
 800d5cc:	9400      	str	r4, [sp, #0]
 800d5ce:	f000 f964 	bl	800d89a <evnt_schdlr_rgstr_evnt>
 800d5d2:	b012      	add	sp, #72	@ 0x48
 800d5d4:	bd10      	pop	{r4, pc}

0800d5d6 <evnt_schdlr_prdc_clbr_strtd>:
 800d5d6:	b570      	push	{r4, r5, r6, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	4604      	mov	r4, r0
 800d5dc:	2000      	movs	r0, #0
 800d5de:	9003      	str	r0, [sp, #12]
 800d5e0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800d5e4:	2031      	movs	r0, #49	@ 0x31
 800d5e6:	6421      	str	r1, [r4, #64]	@ 0x40
 800d5e8:	f00e f9e0 	bl	801b9ac <bsp_debug_gpio_set>
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f00e fa4b 	bl	801ba88 <llhwc_phy_set_phy_clbr_state>
 800d5f2:	2001      	movs	r0, #1
 800d5f4:	f00e f9e0 	bl	801b9b8 <bsp_set_phy_clbr_state>
 800d5f8:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d5fc:	b330      	cbz	r0, 800d64c <evnt_schdlr_prdc_clbr_strtd+0x76>
 800d5fe:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800d602:	2801      	cmp	r0, #1
 800d604:	d122      	bne.n	800d64c <evnt_schdlr_prdc_clbr_strtd+0x76>
 800d606:	2000      	movs	r0, #0
 800d608:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 800d60c:	2001      	movs	r0, #1
 800d60e:	f010 f938 	bl	801d882 <emngr_get_handle_events>
 800d612:	b918      	cbnz	r0, 800d61c <evnt_schdlr_prdc_clbr_strtd+0x46>
 800d614:	2001      	movs	r0, #1
 800d616:	4621      	mov	r1, r4
 800d618:	f010 f879 	bl	801d70e <emngr_post_event>
 800d61c:	f894 0045 	ldrb.w	r0, [r4, #69]	@ 0x45
 800d620:	f646 463c 	movw	r6, #27708	@ 0x6c3c
 800d624:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800d628:	b1e0      	cbz	r0, 800d664 <evnt_schdlr_prdc_clbr_strtd+0x8e>
 800d62a:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800d62c:	2101      	movs	r1, #1
 800d62e:	1b00      	subs	r0, r0, r4
 800d630:	fab0 f080 	clz	r0, r0
 800d634:	0940      	lsrs	r0, r0, #5
 800d636:	f00e f972 	bl	801b91e <bsp_assert>
 800d63a:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800d63c:	2100      	movs	r1, #0
 800d63e:	f880 108d 	strb.w	r1, [r0, #141]	@ 0x8d
 800d642:	2007      	movs	r0, #7
 800d644:	62b1      	str	r1, [r6, #40]	@ 0x28
 800d646:	f00e f9c6 	bl	801b9d6 <enable_specific_irq>
 800d64a:	e005      	b.n	800d658 <evnt_schdlr_prdc_clbr_strtd+0x82>
 800d64c:	2007      	movs	r0, #7
 800d64e:	f00e f9c2 	bl	801b9d6 <enable_specific_irq>
 800d652:	4620      	mov	r0, r4
 800d654:	f001 fa2e 	bl	800eab4 <evnt_schdlr_prdc_clbr_exec>
 800d658:	2031      	movs	r0, #49	@ 0x31
 800d65a:	f00e f9a9 	bl	801b9b0 <bsp_debug_gpio_clear>
 800d65e:	2000      	movs	r0, #0
 800d660:	b004      	add	sp, #16
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800d666:	6880      	ldr	r0, [r0, #8]
 800d668:	4780      	blx	r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0dd      	beq.n	800d62a <evnt_schdlr_prdc_clbr_strtd+0x54>
 800d66e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 800d672:	ad02      	add	r5, sp, #8
 800d674:	9002      	str	r0, [sp, #8]
 800d676:	4628      	mov	r0, r5
 800d678:	9103      	str	r1, [sp, #12]
 800d67a:	f240 11bc 	movw	r1, #444	@ 0x1bc
 800d67e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800d682:	6809      	ldr	r1, [r1, #0]
 800d684:	2205      	movs	r2, #5
 800d686:	f00f ff8f 	bl	801d5a8 <ble_time_rmv_uint>
 800d68a:	a801      	add	r0, sp, #4
 800d68c:	f010 ff1d 	bl	801e4ca <llhwc_slptmr_get>
 800d690:	9901      	ldr	r1, [sp, #4]
 800d692:	4628      	mov	r0, r5
 800d694:	f00f ffc6 	bl	801d624 <ble_time_cmp_raw_reading>
 800d698:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d69c:	dcc5      	bgt.n	800d62a <evnt_schdlr_prdc_clbr_strtd+0x54>
 800d69e:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800d6a2:	6af5      	ldr	r5, [r6, #44]	@ 0x2c
 800d6a4:	f00f ffe3 	bl	801d66e <ble_time_overflow_diff>
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f010 fd96 	bl	801e1dc <os_timer_set>
 800d6b0:	fab0 f080 	clz	r0, r0
 800d6b4:	0940      	lsrs	r0, r0, #5
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	f00e f931 	bl	801b91e <bsp_assert>
 800d6bc:	e7b5      	b.n	800d62a <evnt_schdlr_prdc_clbr_strtd+0x54>

0800d6be <evnt_schdlr_prdc_clbr_abortd>:
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	2000      	movs	r0, #0
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	f00e f92b 	bl	801b91e <bsp_assert>
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <evnt_schdlr_phy_clbr_done_clbk>:
 800d6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	f646 473c 	movw	r7, #27708	@ 0x6c3c
 800d6d4:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800d6d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6da:	460d      	mov	r5, r1
 800d6dc:	68d1      	ldr	r1, [r2, #12]
 800d6de:	4606      	mov	r6, r0
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	4788      	blx	r1
 800d6e4:	4604      	mov	r4, r0
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f04f 0000 	mov.w	r0, #0
 800d6ec:	d007      	beq.n	800d6fe <evnt_schdlr_phy_clbr_done_clbk+0x32>
 800d6ee:	bf00      	nop
 800d6f0:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 800d6f4:	2901      	cmp	r1, #1
 800d6f6:	d003      	beq.n	800d700 <evnt_schdlr_phy_clbr_done_clbk+0x34>
 800d6f8:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 800d6fa:	2c00      	cmp	r4, #0
 800d6fc:	d1f8      	bne.n	800d6f0 <evnt_schdlr_phy_clbr_done_clbk+0x24>
 800d6fe:	2400      	movs	r4, #0
 800d700:	e9cd 0000 	strd	r0, r0, [sp]
 800d704:	4620      	mov	r0, r4
 800d706:	2101      	movs	r1, #1
 800d708:	2c00      	cmp	r4, #0
 800d70a:	bf18      	it	ne
 800d70c:	2001      	movne	r0, #1
 800d70e:	f00e f906 	bl	801b91e <bsp_assert>
 800d712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d714:	2101      	movs	r1, #1
 800d716:	1a20      	subs	r0, r4, r0
 800d718:	fab0 f080 	clz	r0, r0
 800d71c:	0940      	lsrs	r0, r0, #5
 800d71e:	f00e f8fe 	bl	801b91e <bsp_assert>
 800d722:	2001      	movs	r0, #1
 800d724:	f011 f8c0 	bl	801e8a8 <llhwc_pwr_switch>
 800d728:	2e01      	cmp	r6, #1
 800d72a:	bf08      	it	eq
 800d72c:	2dff      	cmpeq	r5, #255	@ 0xff
 800d72e:	d01e      	beq.n	800d76e <evnt_schdlr_phy_clbr_done_clbk+0xa2>
 800d730:	b316      	cbz	r6, 800d778 <evnt_schdlr_phy_clbr_done_clbk+0xac>
 800d732:	2001      	movs	r0, #1
 800d734:	2501      	movs	r5, #1
 800d736:	f00f ffd1 	bl	801d6dc <emngr_handle_remove>
 800d73a:	2000      	movs	r0, #0
 800d73c:	2600      	movs	r6, #0
 800d73e:	f00e f9a3 	bl	801ba88 <llhwc_phy_set_phy_clbr_state>
 800d742:	f247 30a8 	movw	r0, #29608	@ 0x73a8
 800d746:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800d74a:	7881      	ldrb	r1, [r0, #2]
 800d74c:	f884 6045 	strb.w	r6, [r4, #69]	@ 0x45
 800d750:	2901      	cmp	r1, #1
 800d752:	f884 5048 	strb.w	r5, [r4, #72]	@ 0x48
 800d756:	f884 6047 	strb.w	r6, [r4, #71]	@ 0x47
 800d75a:	d110      	bne.n	800d77e <evnt_schdlr_phy_clbr_done_clbk+0xb2>
 800d75c:	78c1      	ldrb	r1, [r0, #3]
 800d75e:	6526      	str	r6, [r4, #80]	@ 0x50
 800d760:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 800d764:	3102      	adds	r1, #2
 800d766:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
 800d76a:	70c1      	strb	r1, [r0, #3]
 800d76c:	e029      	b.n	800d7c2 <evnt_schdlr_phy_clbr_done_clbk+0xf6>
 800d76e:	2000      	movs	r0, #0
 800d770:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 800d774:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d776:	e02a      	b.n	800d7ce <evnt_schdlr_phy_clbr_done_clbk+0x102>
 800d778:	f884 5047 	strb.w	r5, [r4, #71]	@ 0x47
 800d77c:	e024      	b.n	800d7c8 <evnt_schdlr_phy_clbr_done_clbk+0xfc>
 800d77e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d780:	4625      	mov	r5, r4
 800d782:	f646 4794 	movw	r7, #27796	@ 0x6c94
 800d786:	f845 0f50 	str.w	r0, [r5, #80]!
 800d78a:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	4628      	mov	r0, r5
 800d792:	2205      	movs	r2, #5
 800d794:	71ae      	strb	r6, [r5, #6]
 800d796:	80ae      	strh	r6, [r5, #4]
 800d798:	f00f fe64 	bl	801d464 <ble_time_add_uint>
 800d79c:	4668      	mov	r0, sp
 800d79e:	f010 fe94 	bl	801e4ca <llhwc_slptmr_get>
 800d7a2:	9900      	ldr	r1, [sp, #0]
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	f00f ff3d 	bl	801d624 <ble_time_cmp_raw_reading>
 800d7aa:	0fc0      	lsrs	r0, r0, #31
 800d7ac:	2101      	movs	r1, #1
 800d7ae:	f00e f8b6 	bl	801b91e <bsp_assert>
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	b128      	cbz	r0, 800d7c2 <evnt_schdlr_phy_clbr_done_clbk+0xf6>
 800d7b6:	68b8      	ldr	r0, [r7, #8]
 800d7b8:	3801      	subs	r0, #1
 800d7ba:	60b8      	str	r0, [r7, #8]
 800d7bc:	bf08      	it	eq
 800d7be:	f007 ff6e 	bleq	801569e <llhwc_prdc_clbr_deinit>
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	f00e f8f8 	bl	801b9b8 <bsp_set_phy_clbr_state>
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f001 f870 	bl	800e8ae <evnt_schdlr_gnrc_evnt_cmplt>
 800d7ce:	2032      	movs	r0, #50	@ 0x32
 800d7d0:	f00e f8ee 	bl	801b9b0 <bsp_debug_gpio_clear>
 800d7d4:	b003      	add	sp, #12
 800d7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7d8 <evnt_schdlr_get_nxt_event_chnl>:
 800d7d8:	b570      	push	{r4, r5, r6, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	f646 413c 	movw	r1, #27708	@ 0x6c3c
 800d7e0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800d7e4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	6889      	ldr	r1, [r1, #8]
 800d7ea:	4788      	blx	r1
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d04b      	beq.n	800d888 <evnt_schdlr_get_nxt_event_chnl+0xb0>
 800d7f0:	e9d0 3224 	ldrd	r3, r2, [r0, #144]	@ 0x90
 800d7f4:	4601      	mov	r1, r0
 800d7f6:	f1d3 003f 	rsbs	r0, r3, #63	@ 0x3f
 800d7fa:	f04f 0400 	mov.w	r4, #0
 800d7fe:	eb74 0002 	sbcs.w	r0, r4, r2
 800d802:	f04f 00ff 	mov.w	r0, #255	@ 0xff
 800d806:	db19      	blt.n	800d83c <evnt_schdlr_get_nxt_event_chnl+0x64>
 800d808:	3b01      	subs	r3, #1
 800d80a:	f162 0200 	sbc.w	r2, r2, #0
 800d80e:	f1d3 051f 	rsbs	r5, r3, #31
 800d812:	eb74 0202 	sbcs.w	r2, r4, r2
 800d816:	d338      	bcc.n	800d88a <evnt_schdlr_get_nxt_event_chnl+0xb2>
 800d818:	2201      	movs	r2, #1
 800d81a:	409a      	lsls	r2, r3
 800d81c:	f012 0f8b 	tst.w	r2, #139	@ 0x8b
 800d820:	d028      	beq.n	800d874 <evnt_schdlr_get_nxt_event_chnl+0x9c>
 800d822:	6f48      	ldr	r0, [r1, #116]	@ 0x74
 800d824:	7e00      	ldrb	r0, [r0, #24]
 800d826:	07c1      	lsls	r1, r0, #31
 800d828:	d001      	beq.n	800d82e <evnt_schdlr_get_nxt_event_chnl+0x56>
 800d82a:	7831      	ldrb	r1, [r6, #0]
 800d82c:	b379      	cbz	r1, 800d88e <evnt_schdlr_get_nxt_event_chnl+0xb6>
 800d82e:	0781      	lsls	r1, r0, #30
 800d830:	d501      	bpl.n	800d836 <evnt_schdlr_get_nxt_event_chnl+0x5e>
 800d832:	7b31      	ldrb	r1, [r6, #12]
 800d834:	b369      	cbz	r1, 800d892 <evnt_schdlr_get_nxt_event_chnl+0xba>
 800d836:	0740      	lsls	r0, r0, #29
 800d838:	d423      	bmi.n	800d882 <evnt_schdlr_get_nxt_event_chnl+0xaa>
 800d83a:	e025      	b.n	800d888 <evnt_schdlr_get_nxt_event_chnl+0xb0>
 800d83c:	f083 0540 	eor.w	r5, r3, #64	@ 0x40
 800d840:	4315      	orrs	r5, r2
 800d842:	d01a      	beq.n	800d87a <evnt_schdlr_get_nxt_event_chnl+0xa2>
 800d844:	f083 0680 	eor.w	r6, r3, #128	@ 0x80
 800d848:	4316      	orrs	r6, r2
 800d84a:	bf1c      	itt	ne
 800d84c:	f483 7380 	eorne.w	r3, r3, #256	@ 0x100
 800d850:	ea52 0203 	orrsne.w	r2, r2, r3
 800d854:	d119      	bne.n	800d88a <evnt_schdlr_get_nxt_event_chnl+0xb2>
 800d856:	6f48      	ldr	r0, [r1, #116]	@ 0x74
 800d858:	2201      	movs	r2, #1
 800d85a:	f890 112c 	ldrb.w	r1, [r0, #300]	@ 0x12c
 800d85e:	f88d 2007 	strb.w	r2, [sp, #7]
 800d862:	b189      	cbz	r1, 800d888 <evnt_schdlr_get_nxt_event_chnl+0xb0>
 800d864:	f8b0 10da 	ldrh.w	r1, [r0, #218]	@ 0xda
 800d868:	3028      	adds	r0, #40	@ 0x28
 800d86a:	f10d 0207 	add.w	r2, sp, #7
 800d86e:	f006 f949 	bl	8013b04 <llhwc_get_ch_idx_algo_2>
 800d872:	e009      	b.n	800d888 <evnt_schdlr_get_nxt_event_chnl+0xb0>
 800d874:	f012 2f80 	tst.w	r2, #2147516416	@ 0x80008000
 800d878:	d007      	beq.n	800d88a <evnt_schdlr_get_nxt_event_chnl+0xb2>
 800d87a:	7830      	ldrb	r0, [r6, #0]
 800d87c:	b138      	cbz	r0, 800d88e <evnt_schdlr_get_nxt_event_chnl+0xb6>
 800d87e:	7b30      	ldrb	r0, [r6, #12]
 800d880:	b138      	cbz	r0, 800d892 <evnt_schdlr_get_nxt_event_chnl+0xba>
 800d882:	f896 0027 	ldrb.w	r0, [r6, #39]	@ 0x27
 800d886:	b130      	cbz	r0, 800d896 <evnt_schdlr_get_nxt_event_chnl+0xbe>
 800d888:	20ff      	movs	r0, #255	@ 0xff
 800d88a:	b002      	add	sp, #8
 800d88c:	bd70      	pop	{r4, r5, r6, pc}
 800d88e:	2000      	movs	r0, #0
 800d890:	e7fb      	b.n	800d88a <evnt_schdlr_get_nxt_event_chnl+0xb2>
 800d892:	200c      	movs	r0, #12
 800d894:	e7f9      	b.n	800d88a <evnt_schdlr_get_nxt_event_chnl+0xb2>
 800d896:	2027      	movs	r0, #39	@ 0x27
 800d898:	e7f7      	b.n	800d88a <evnt_schdlr_get_nxt_event_chnl+0xb2>

0800d89a <evnt_schdlr_rgstr_evnt>:
 800d89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89e:	b081      	sub	sp, #4
 800d8a0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800d8a2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800d8a6:	4683      	mov	fp, r0
 800d8a8:	200c      	movs	r0, #12
 800d8aa:	461e      	mov	r6, r3
 800d8ac:	4615      	mov	r5, r2
 800d8ae:	4689      	mov	r9, r1
 800d8b0:	f00e f87c 	bl	801b9ac <bsp_debug_gpio_set>
 800d8b4:	f001 f96f 	bl	800eb96 <evnt_schdlr_alloc_evnt>
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	bf18      	it	ne
 800d8c0:	2001      	movne	r0, #1
 800d8c2:	9000      	str	r0, [sp, #0]
 800d8c4:	f04f 0a01 	mov.w	sl, #1
 800d8c8:	f00e f829 	bl	801b91e <bsp_assert>
 800d8cc:	f089 0004 	eor.w	r0, r9, #4
 800d8d0:	ea50 000b 	orrs.w	r0, r0, fp
 800d8d4:	bf02      	ittt	eq
 800d8d6:	f884 a046 	strbeq.w	sl, [r4, #70]	@ 0x46
 800d8da:	f04f 0b00 	moveq.w	fp, #0
 800d8de:	f04f 0902 	moveq.w	r9, #2
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 800d8e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8ec:	e9c4 b924 	strd	fp, r9, [r4, #144]	@ 0x90
 800d8f0:	e880 01c0 	stmia.w	r0, {r6, r7, r8}
 800d8f4:	6765      	str	r5, [r4, #116]	@ 0x74
 800d8f6:	b165      	cbz	r5, 800d912 <evnt_schdlr_rgstr_evnt+0x78>
 800d8f8:	f08b 5080 	eor.w	r0, fp, #268435456	@ 0x10000000
 800d8fc:	ea50 0009 	orrs.w	r0, r0, r9
 800d900:	d107      	bne.n	800d912 <evnt_schdlr_rgstr_evnt+0x78>
 800d902:	f895 0050 	ldrb.w	r0, [r5, #80]	@ 0x50
 800d906:	f884 0020 	strb.w	r0, [r4, #32]
 800d90a:	2000      	movs	r0, #0
 800d90c:	f885 0050 	strb.w	r0, [r5, #80]	@ 0x50
 800d910:	e040      	b.n	800d994 <evnt_schdlr_rgstr_evnt+0xfa>
 800d912:	f019 0f0a 	tst.w	r9, #10
 800d916:	d034      	beq.n	800d982 <evnt_schdlr_rgstr_evnt+0xe8>
 800d918:	6a28      	ldr	r0, [r5, #32]
 800d91a:	f644 56d3 	movw	r6, #19923	@ 0x4dd3
 800d91e:	0080      	lsls	r0, r0, #2
 800d920:	f2c1 0662 	movt	r6, #4194	@ 0x1062
 800d924:	fba0 0206 	umull	r0, r2, r0, r6
 800d928:	08d0      	lsrs	r0, r2, #3
 800d92a:	68e9      	ldr	r1, [r5, #12]
 800d92c:	60a0      	str	r0, [r4, #8]
 800d92e:	68a8      	ldr	r0, [r5, #8]
 800d930:	f012 fab1 	bl	801fe96 <US_TO_SLP_TMR_PROTECTED>
 800d934:	60e0      	str	r0, [r4, #12]
 800d936:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d93a:	f012 faac 	bl	801fe96 <US_TO_SLP_TMR_PROTECTED>
 800d93e:	6120      	str	r0, [r4, #16]
 800d940:	69a8      	ldr	r0, [r5, #24]
 800d942:	0080      	lsls	r0, r0, #2
 800d944:	fba0 0106 	umull	r0, r1, r0, r6
 800d948:	08c8      	lsrs	r0, r1, #3
 800d94a:	6160      	str	r0, [r4, #20]
 800d94c:	69e8      	ldr	r0, [r5, #28]
 800d94e:	6869      	ldr	r1, [r5, #4]
 800d950:	0080      	lsls	r0, r0, #2
 800d952:	fba0 0206 	umull	r0, r2, r0, r6
 800d956:	08d0      	lsrs	r0, r2, #3
 800d958:	61a0      	str	r0, [r4, #24]
 800d95a:	6828      	ldr	r0, [r5, #0]
 800d95c:	f012 fa9b 	bl	801fe96 <US_TO_SLP_TMR_PROTECTED>
 800d960:	61e0      	str	r0, [r4, #28]
 800d962:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800d964:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800d966:	f895 0025 	ldrb.w	r0, [r5, #37]	@ 0x25
 800d96a:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 800d96e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800d970:	6260      	str	r0, [r4, #36]	@ 0x24
 800d972:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800d976:	f884 0020 	strb.w	r0, [r4, #32]
 800d97a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800d97c:	62a0      	str	r0, [r4, #40]	@ 0x28
 800d97e:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d980:	6320      	str	r0, [r4, #48]	@ 0x30
 800d982:	f41b 7fc0 	tst.w	fp, #384	@ 0x180
 800d986:	d005      	beq.n	800d994 <evnt_schdlr_rgstr_evnt+0xfa>
 800d988:	2000      	movs	r0, #0
 800d98a:	7660      	strb	r0, [r4, #25]
 800d98c:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800d990:	2001      	movs	r0, #1
 800d992:	7520      	strb	r0, [r4, #20]
 800d994:	e9d4 1224 	ldrd	r1, r2, [r4, #144]	@ 0x90
 800d998:	2000      	movs	r0, #0
 800d99a:	e9c4 001f 	strd	r0, r0, [r4, #124]	@ 0x7c
 800d99e:	f081 0002 	eor.w	r0, r1, #2
 800d9a2:	4310      	orrs	r0, r2
 800d9a4:	f646 463c 	movw	r6, #27708	@ 0x6c3c
 800d9a8:	f04f 0001 	mov.w	r0, #1
 800d9ac:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800d9b0:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
 800d9b4:	d105      	bne.n	800d9c2 <evnt_schdlr_rgstr_evnt+0x128>
 800d9b6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d9b8:	7e40      	ldrb	r0, [r0, #25]
 800d9ba:	2801      	cmp	r0, #1
 800d9bc:	bf04      	itt	eq
 800d9be:	2000      	moveq	r0, #0
 800d9c0:	6030      	streq	r0, [r6, #0]
 800d9c2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800d9c4:	6981      	ldr	r1, [r0, #24]
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	4788      	blx	r1
 800d9ca:	b130      	cbz	r0, 800d9da <evnt_schdlr_rgstr_evnt+0x140>
 800d9cc:	f089 0008 	eor.w	r0, r9, #8
 800d9d0:	ea50 000b 	orrs.w	r0, r0, fp
 800d9d4:	d13e      	bne.n	800da54 <evnt_schdlr_rgstr_evnt+0x1ba>
 800d9d6:	2400      	movs	r4, #0
 800d9d8:	e0bb      	b.n	800db52 <evnt_schdlr_rgstr_evnt+0x2b8>
 800d9da:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800d9dc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800d9de:	4780      	blx	r0
 800d9e0:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800d9e6:	4788      	blx	r1
 800d9e8:	4428      	add	r0, r5
 800d9ea:	2801      	cmp	r0, #1
 800d9ec:	d114      	bne.n	800da18 <evnt_schdlr_rgstr_evnt+0x17e>
 800d9ee:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800d9f0:	b990      	cbnz	r0, 800da18 <evnt_schdlr_rgstr_evnt+0x17e>
 800d9f2:	f24e 406f 	movw	r0, #58479	@ 0xe46f
 800d9f6:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f010 fa23 	bl	801de48 <os_timer_create>
 800da02:	2101      	movs	r1, #1
 800da04:	62f0      	str	r0, [r6, #44]	@ 0x2c
 800da06:	2800      	cmp	r0, #0
 800da08:	bf18      	it	ne
 800da0a:	2001      	movne	r0, #1
 800da0c:	f00d ff87 	bl	801b91e <bsp_assert>
 800da10:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800da12:	2101      	movs	r1, #1
 800da14:	f010 fa61 	bl	801deda <os_timer_set_prio>
 800da18:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800da1a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800da1c:	4780      	blx	r0
 800da1e:	2801      	cmp	r0, #1
 800da20:	bf04      	itt	eq
 800da22:	2001      	moveq	r0, #1
 800da24:	f012 fa50 	bleq	801fec8 <llhwc_cmn_set_controller_activity>
 800da28:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800da2c:	f000 43e0 	and.w	r3, r0, #1879048192	@ 0x70000000
 800da30:	f001 0201 	and.w	r2, r1, #1
 800da34:	18d2      	adds	r2, r2, r3
 800da36:	f040 8087 	bne.w	800db48 <evnt_schdlr_rgstr_evnt+0x2ae>
 800da3a:	f480 2200 	eor.w	r2, r0, #524288	@ 0x80000
 800da3e:	430a      	orrs	r2, r1
 800da40:	d00d      	beq.n	800da5e <evnt_schdlr_rgstr_evnt+0x1c4>
 800da42:	f081 0102 	eor.w	r1, r1, #2
 800da46:	4308      	orrs	r0, r1
 800da48:	d10e      	bne.n	800da68 <evnt_schdlr_rgstr_evnt+0x1ce>
 800da4a:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 800da4e:	2801      	cmp	r0, #1
 800da50:	d10a      	bne.n	800da68 <evnt_schdlr_rgstr_evnt+0x1ce>
 800da52:	e079      	b.n	800db48 <evnt_schdlr_rgstr_evnt+0x2ae>
 800da54:	4620      	mov	r0, r4
 800da56:	f001 f8af 	bl	800ebb8 <evnt_schdlr_free_evnt>
 800da5a:	2400      	movs	r4, #0
 800da5c:	e086      	b.n	800db6c <evnt_schdlr_rgstr_evnt+0x2d2>
 800da5e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800da60:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800da62:	4780      	blx	r0
 800da64:	2801      	cmp	r0, #1
 800da66:	d06d      	beq.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800da68:	9800      	ldr	r0, [sp, #0]
 800da6a:	2100      	movs	r1, #0
 800da6c:	2500      	movs	r5, #0
 800da6e:	f00d ff56 	bl	801b91e <bsp_assert>
 800da72:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 800da76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da7a:	f2c0 021f 	movt	r2, #31
 800da7e:	1a52      	subs	r2, r2, r1
 800da80:	eb75 0200 	sbcs.w	r2, r5, r0
 800da84:	db16      	blt.n	800dab4 <evnt_schdlr_rgstr_evnt+0x21a>
 800da86:	f1d1 023f 	rsbs	r2, r1, #63	@ 0x3f
 800da8a:	eb75 0200 	sbcs.w	r2, r5, r0
 800da8e:	db33      	blt.n	800daf8 <evnt_schdlr_rgstr_evnt+0x25e>
 800da90:	3901      	subs	r1, #1
 800da92:	f160 0000 	sbc.w	r0, r0, #0
 800da96:	f1d1 021f 	rsbs	r2, r1, #31
 800da9a:	f04f 0200 	mov.w	r2, #0
 800da9e:	eb72 0000 	sbcs.w	r0, r2, r0
 800daa2:	d36d      	bcc.n	800db80 <evnt_schdlr_rgstr_evnt+0x2e6>
 800daa4:	2001      	movs	r0, #1
 800daa6:	4088      	lsls	r0, r1
 800daa8:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 800daac:	d035      	beq.n	800db1a <evnt_schdlr_rgstr_evnt+0x280>
 800daae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dab0:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800dab2:	e047      	b.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800dab4:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800dab8:	1a52      	subs	r2, r2, r1
 800daba:	eb75 0200 	sbcs.w	r2, r5, r0
 800dabe:	da0d      	bge.n	800dadc <evnt_schdlr_rgstr_evnt+0x242>
 800dac0:	2801      	cmp	r0, #1
 800dac2:	dd30      	ble.n	800db26 <evnt_schdlr_rgstr_evnt+0x28c>
 800dac4:	f080 0202 	eor.w	r2, r0, #2
 800dac8:	430a      	orrs	r2, r1
 800daca:	bf1c      	itt	ne
 800dacc:	f080 0204 	eorne.w	r2, r0, #4
 800dad0:	ea52 0201 	orrsne.w	r2, r2, r1
 800dad4:	d036      	beq.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800dad6:	f080 0008 	eor.w	r0, r0, #8
 800dada:	e031      	b.n	800db40 <evnt_schdlr_rgstr_evnt+0x2a6>
 800dadc:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800dae0:	1a52      	subs	r2, r2, r1
 800dae2:	f04f 0200 	mov.w	r2, #0
 800dae6:	4182      	sbcs	r2, r0
 800dae8:	db24      	blt.n	800db34 <evnt_schdlr_rgstr_evnt+0x29a>
 800daea:	f481 1200 	eor.w	r2, r1, #2097152	@ 0x200000
 800daee:	4302      	orrs	r2, r0
 800daf0:	d028      	beq.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800daf2:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800daf6:	e023      	b.n	800db40 <evnt_schdlr_rgstr_evnt+0x2a6>
 800daf8:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 800dafc:	4302      	orrs	r2, r0
 800dafe:	d03c      	beq.n	800db7a <evnt_schdlr_rgstr_evnt+0x2e0>
 800db00:	f081 0280 	eor.w	r2, r1, #128	@ 0x80
 800db04:	4302      	orrs	r2, r0
 800db06:	bf1c      	itt	ne
 800db08:	f481 7180 	eorne.w	r1, r1, #256	@ 0x100
 800db0c:	ea50 0001 	orrsne.w	r0, r0, r1
 800db10:	d136      	bne.n	800db80 <evnt_schdlr_rgstr_evnt+0x2e6>
 800db12:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800db14:	f8c0 40c0 	str.w	r4, [r0, #192]	@ 0xc0
 800db18:	e014      	b.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800db1a:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 800db1e:	d02f      	beq.n	800db80 <evnt_schdlr_rgstr_evnt+0x2e6>
 800db20:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800db22:	6244      	str	r4, [r0, #36]	@ 0x24
 800db24:	e00e      	b.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800db26:	f081 4280 	eor.w	r2, r1, #1073741824	@ 0x40000000
 800db2a:	4302      	orrs	r2, r0
 800db2c:	d00a      	beq.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800db2e:	f080 0001 	eor.w	r0, r0, #1
 800db32:	e005      	b.n	800db40 <evnt_schdlr_rgstr_evnt+0x2a6>
 800db34:	f081 5280 	eor.w	r2, r1, #268435456	@ 0x10000000
 800db38:	4302      	orrs	r2, r0
 800db3a:	d003      	beq.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800db3c:	f081 5100 	eor.w	r1, r1, #536870912	@ 0x20000000
 800db40:	4308      	orrs	r0, r1
 800db42:	d11d      	bne.n	800db80 <evnt_schdlr_rgstr_evnt+0x2e6>
 800db44:	f7fe fdbc 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800db48:	f089 0008 	eor.w	r0, r9, #8
 800db4c:	ea50 000b 	orrs.w	r0, r0, fp
 800db50:	d103      	bne.n	800db5a <evnt_schdlr_rgstr_evnt+0x2c0>
 800db52:	4620      	mov	r0, r4
 800db54:	f009 f836 	bl	8016bc4 <evnt_schdlr_check_if_evnt_exist>
 800db58:	4604      	mov	r4, r0
 800db5a:	f1b8 0f00 	cmp.w	r8, #0
 800db5e:	bf18      	it	ne
 800db60:	2c00      	cmpne	r4, #0
 800db62:	d003      	beq.n	800db6c <evnt_schdlr_rgstr_evnt+0x2d2>
 800db64:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800db66:	2800      	cmp	r0, #0
 800db68:	bf08      	it	eq
 800db6a:	4604      	moveq	r4, r0
 800db6c:	200c      	movs	r0, #12
 800db6e:	f00d ff1f 	bl	801b9b0 <bsp_debug_gpio_clear>
 800db72:	4620      	mov	r0, r4
 800db74:	b001      	add	sp, #4
 800db76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800db7c:	6304      	str	r4, [r0, #48]	@ 0x30
 800db7e:	e7e1      	b.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>
 800db80:	2000      	movs	r0, #0
 800db82:	2101      	movs	r1, #1
 800db84:	f00d fecb 	bl	801b91e <bsp_assert>
 800db88:	e7dc      	b.n	800db44 <evnt_schdlr_rgstr_evnt+0x2aa>

0800db8a <evnt_schdlr_init>:
 800db8a:	b570      	push	{r4, r5, r6, lr}
 800db8c:	f646 443c 	movw	r4, #27708	@ 0x6c3c
 800db90:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800db94:	4620      	mov	r0, r4
 800db96:	2100      	movs	r1, #0
 800db98:	223c      	movs	r2, #60	@ 0x3c
 800db9a:	2600      	movs	r6, #0
 800db9c:	f012 fea2 	bl	80208e4 <ble_memset>
 800dba0:	f240 10bc 	movw	r0, #444	@ 0x1bc
 800dba4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800dba8:	212a      	movs	r1, #42	@ 0x2a
 800dbaa:	6001      	str	r1, [r0, #0]
 800dbac:	f646 4178 	movw	r1, #27768	@ 0x6c78
 800dbb0:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 800dbb4:	200e      	movs	r0, #14
 800dbb6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800dbba:	2214      	movs	r2, #20
 800dbbc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800dbc0:	e9c1 0000 	strd	r0, r0, [r1]
 800dbc4:	e9c1 2002 	strd	r2, r0, [r1, #8]
 800dbc8:	e9c1 0204 	strd	r0, r2, [r1, #16]
 800dbcc:	6828      	ldr	r0, [r5, #0]
 800dbce:	760e      	strb	r6, [r1, #24]
 800dbd0:	f04f 31ff 	mov.w	r1, #4294967295
 800dbd4:	f00d ff07 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800dbd8:	f009 fa61 	bl	801709e <evnt_schdlr_multi_role_instance>
 800dbdc:	2101      	movs	r1, #1
 800dbde:	6260      	str	r0, [r4, #36]	@ 0x24
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	bf18      	it	ne
 800dbe4:	2001      	movne	r0, #1
 800dbe6:	f00d fe9a 	bl	801b91e <bsp_assert>
 800dbea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dbec:	6800      	ldr	r0, [r0, #0]
 800dbee:	4780      	blx	r0
 800dbf0:	f64d 4249 	movw	r2, #56393	@ 0xdc49
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	f6c0 0200 	movt	r2, #2048	@ 0x800
 800dbfa:	2105      	movs	r1, #5
 800dbfc:	6026      	str	r6, [r4, #0]
 800dbfe:	f00f fd61 	bl	801d6c4 <emngr_handle_init>
 800dc02:	f24e 1265 	movw	r2, #57701	@ 0xe165
 800dc06:	2001      	movs	r0, #1
 800dc08:	f6c0 0200 	movt	r2, #2048	@ 0x800
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	f00f fd59 	bl	801d6c4 <emngr_handle_init>
 800dc12:	f240 10c0 	movw	r0, #448	@ 0x1c0
 800dc16:	f248 2100 	movw	r1, #33280	@ 0x8200
 800dc1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800dc1e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 800dc22:	6001      	str	r1, [r0, #0]
 800dc24:	f24e 2023 	movw	r0, #57891	@ 0xe223
 800dc28:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800dc2c:	f006 fad5 	bl	80141da <llhwc_rgstr_evnt_schdlr_cb>
 800dc30:	f24e 3059 	movw	r0, #58201	@ 0xe359
 800dc34:	f6c0 0000 	movt	r0, #2048	@ 0x800
 800dc38:	f012 fcb3 	bl	80205a2 <llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb>
 800dc3c:	6828      	ldr	r0, [r5, #0]
 800dc3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc42:	f00d bed6 	b.w	801b9f2 <os_rcrsv_mutex_release>
	...

0800dc48 <evnt_schdlr_hw_evnt_cmplt>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	4605      	mov	r5, r0
 800dc50:	2090      	movs	r0, #144	@ 0x90
 800dc52:	f00d feab 	bl	801b9ac <bsp_debug_gpio_set>
 800dc56:	f646 473c 	movw	r7, #27708	@ 0x6c3c
 800dc5a:	2d00      	cmp	r5, #0
 800dc5c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800dc60:	d04a      	beq.n	800dcf8 <evnt_schdlr_hw_evnt_cmplt+0xb0>
 800dc62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc64:	b340      	cbz	r0, 800dcb8 <evnt_schdlr_hw_evnt_cmplt+0x70>
 800dc66:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 800dc6a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800dc6e:	6830      	ldr	r0, [r6, #0]
 800dc70:	f04f 31ff 	mov.w	r1, #4294967295
 800dc74:	f00d feb7 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800dc78:	f8d5 a018 	ldr.w	sl, [r5, #24]
 800dc7c:	f89a 0098 	ldrb.w	r0, [sl, #152]	@ 0x98
 800dc80:	2804      	cmp	r0, #4
 800dc82:	d15e      	bne.n	800dd42 <evnt_schdlr_hw_evnt_cmplt+0xfa>
 800dc84:	f8da 0090 	ldr.w	r0, [sl, #144]	@ 0x90
 800dc88:	2130      	movs	r1, #48	@ 0x30
 800dc8a:	f6c7 01a0 	movt	r1, #30880	@ 0x78a0
 800dc8e:	4208      	tst	r0, r1
 800dc90:	d003      	beq.n	800dc9a <evnt_schdlr_hw_evnt_cmplt+0x52>
 800dc92:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800dc96:	2801      	cmp	r0, #1
 800dc98:	d11a      	bne.n	800dcd0 <evnt_schdlr_hw_evnt_cmplt+0x88>
 800dc9a:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 800dc9e:	2000      	movs	r0, #0
 800dca0:	f88a 008d 	strb.w	r0, [sl, #141]	@ 0x8d
 800dca4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dca6:	1e48      	subs	r0, r1, #1
 800dca8:	f887 0038 	strb.w	r0, [r7, #56]	@ 0x38
 800dcac:	e010      	b.n	800dcd0 <evnt_schdlr_hw_evnt_cmplt+0x88>
 800dcae:	bf00      	nop
 800dcb0:	6841      	ldr	r1, [r0, #4]
 800dcb2:	60a9      	str	r1, [r5, #8]
 800dcb4:	f00c fe1c 	bl	801a8f0 <free_buff_hdr>
 800dcb8:	68a8      	ldr	r0, [r5, #8]
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	d1f8      	bne.n	800dcb0 <evnt_schdlr_hw_evnt_cmplt+0x68>
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f00f fefc 	bl	801dabc <os_mem_pool_free>
 800dcc4:	e1fe      	b.n	800e0c4 <evnt_schdlr_hw_evnt_cmplt+0x47c>
 800dcc6:	bf00      	nop
 800dcc8:	6841      	ldr	r1, [r0, #4]
 800dcca:	60a9      	str	r1, [r5, #8]
 800dccc:	f00c fe10 	bl	801a8f0 <free_buff_hdr>
 800dcd0:	68a8      	ldr	r0, [r5, #8]
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d1f8      	bne.n	800dcc8 <evnt_schdlr_hw_evnt_cmplt+0x80>
 800dcd6:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800dcda:	b110      	cbz	r0, 800dce2 <evnt_schdlr_hw_evnt_cmplt+0x9a>
 800dcdc:	3801      	subs	r0, #1
 800dcde:	f887 0039 	strb.w	r0, [r7, #57]	@ 0x39
 800dce2:	6830      	ldr	r0, [r6, #0]
 800dce4:	f00d fe85 	bl	801b9f2 <os_rcrsv_mutex_release>
 800dce8:	4628      	mov	r0, r5
 800dcea:	f00f fee7 	bl	801dabc <os_mem_pool_free>
 800dcee:	f1ba 0f00 	cmp.w	sl, #0
 800dcf2:	f040 81e3 	bne.w	800e0bc <evnt_schdlr_hw_evnt_cmplt+0x474>
 800dcf6:	e1e5      	b.n	800e0c4 <evnt_schdlr_hw_evnt_cmplt+0x47c>
 800dcf8:	20c3      	movs	r0, #195	@ 0xc3
 800dcfa:	f00d fe5b 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800dcfe:	f8d7 a028 	ldr.w	sl, [r7, #40]	@ 0x28
 800dd02:	f1ba 0f00 	cmp.w	sl, #0
 800dd06:	f000 81dd 	beq.w	800e0c4 <evnt_schdlr_hw_evnt_cmplt+0x47c>
 800dd0a:	e9da 301b 	ldrd	r3, r0, [sl, #108]	@ 0x6c
 800dd0e:	2102      	movs	r1, #2
 800dd10:	2500      	movs	r5, #0
 800dd12:	f88a 1098 	strb.w	r1, [sl, #152]	@ 0x98
 800dd16:	2100      	movs	r1, #0
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f88a 508d 	strb.w	r5, [sl, #141]	@ 0x8d
 800dd1e:	62bd      	str	r5, [r7, #40]	@ 0x28
 800dd20:	4798      	blx	r3
 800dd22:	e9da 1024 	ldrd	r1, r0, [sl, #144]	@ 0x90
 800dd26:	f081 5280 	eor.w	r2, r1, #268435456	@ 0x10000000
 800dd2a:	4302      	orrs	r2, r0
 800dd2c:	bf1a      	itte	ne
 800dd2e:	f081 6100 	eorne.w	r1, r1, #134217728	@ 0x8000000
 800dd32:	ea50 0001 	orrsne.w	r0, r0, r1
 800dd36:	f8ca 5070 	streq.w	r5, [sl, #112]	@ 0x70
 800dd3a:	4650      	mov	r0, sl
 800dd3c:	f000 fd06 	bl	800e74c <evnt_schdlr_evnt_updtd>
 800dd40:	e1bc      	b.n	800e0bc <evnt_schdlr_hw_evnt_cmplt+0x474>
 800dd42:	f105 0022 	add.w	r0, r5, #34	@ 0x22
 800dd46:	f014 fd3d 	bl	80227c4 <db_calc_rssi_compensated_value>
 800dd4a:	f105 0023 	add.w	r0, r5, #35	@ 0x23
 800dd4e:	f014 fd39 	bl	80227c4 <db_calc_rssi_compensated_value>
 800dd52:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800dd56:	2801      	cmp	r0, #1
 800dd58:	d00f      	beq.n	800dd7a <evnt_schdlr_hw_evnt_cmplt+0x132>
 800dd5a:	f8da 1090 	ldr.w	r1, [sl, #144]	@ 0x90
 800dd5e:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 800dd62:	d10a      	bne.n	800dd7a <evnt_schdlr_hw_evnt_cmplt+0x132>
 800dd64:	f8da 2094 	ldr.w	r2, [sl, #148]	@ 0x94
 800dd68:	f481 2380 	eor.w	r3, r1, #262144	@ 0x40000
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	bf1c      	itt	ne
 800dd70:	f481 3100 	eorne.w	r1, r1, #131072	@ 0x20000
 800dd74:	ea51 0102 	orrsne.w	r1, r1, r2
 800dd78:	d125      	bne.n	800ddc6 <evnt_schdlr_hw_evnt_cmplt+0x17e>
 800dd7a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800dd7e:	2100      	movs	r1, #0
 800dd80:	f88a 108d 	strb.w	r1, [sl, #141]	@ 0x8d
 800dd84:	b902      	cbnz	r2, 800dd88 <evnt_schdlr_hw_evnt_cmplt+0x140>
 800dd86:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dd88:	f8da 1090 	ldr.w	r1, [sl, #144]	@ 0x90
 800dd8c:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 800dd90:	d019      	beq.n	800ddc6 <evnt_schdlr_hw_evnt_cmplt+0x17e>
 800dd92:	f8da 2094 	ldr.w	r2, [sl, #148]	@ 0x94
 800dd96:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 800dd9a:	4311      	orrs	r1, r2
 800dd9c:	d10b      	bne.n	800ddb6 <evnt_schdlr_hw_evnt_cmplt+0x16e>
 800dd9e:	f895 1020 	ldrb.w	r1, [r5, #32]
 800dda2:	b911      	cbnz	r1, 800ddaa <evnt_schdlr_hw_evnt_cmplt+0x162>
 800dda4:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800dda8:	b129      	cbz	r1, 800ddb6 <evnt_schdlr_hw_evnt_cmplt+0x16e>
 800ddaa:	f89a 108c 	ldrb.w	r1, [sl, #140]	@ 0x8c
 800ddae:	b911      	cbnz	r1, 800ddb6 <evnt_schdlr_hw_evnt_cmplt+0x16e>
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	f88a 108c 	strb.w	r1, [sl, #140]	@ 0x8c
 800ddb6:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ddba:	f8da 2074 	ldr.w	r2, [sl, #116]	@ 0x74
 800ddbe:	f882 1121 	strb.w	r1, [r2, #289]	@ 0x121
 800ddc2:	f882 0120 	strb.w	r0, [r2, #288]	@ 0x120
 800ddc6:	6830      	ldr	r0, [r6, #0]
 800ddc8:	f00d fe13 	bl	801b9f2 <os_rcrsv_mutex_release>
 800ddcc:	f8da 1090 	ldr.w	r1, [sl, #144]	@ 0x90
 800ddd0:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 800ddd4:	f000 80c1 	beq.w	800df5a <evnt_schdlr_hw_evnt_cmplt+0x312>
 800ddd8:	f895 0020 	ldrb.w	r0, [r5, #32]
 800dddc:	b938      	cbnz	r0, 800ddee <evnt_schdlr_hw_evnt_cmplt+0x1a6>
 800ddde:	f895 0021 	ldrb.w	r0, [r5, #33]	@ 0x21
 800dde2:	b920      	cbnz	r0, 800ddee <evnt_schdlr_hw_evnt_cmplt+0x1a6>
 800dde4:	f89a 009b 	ldrb.w	r0, [sl, #155]	@ 0x9b
 800dde8:	3001      	adds	r0, #1
 800ddea:	f88a 009b 	strb.w	r0, [sl, #155]	@ 0x9b
 800ddee:	f89a 0099 	ldrb.w	r0, [sl, #153]	@ 0x99
 800ddf2:	b110      	cbz	r0, 800ddfa <evnt_schdlr_hw_evnt_cmplt+0x1b2>
 800ddf4:	3801      	subs	r0, #1
 800ddf6:	f88a 0099 	strb.w	r0, [sl, #153]	@ 0x99
 800ddfa:	f895 801d 	ldrb.w	r8, [r5, #29]
 800ddfe:	2001      	movs	r0, #1
 800de00:	2101      	movs	r1, #1
 800de02:	f00d fd8c 	bl	801b91e <bsp_assert>
 800de06:	2000      	movs	r0, #0
 800de08:	f646 46e8 	movw	r6, #27880	@ 0x6ce8
 800de0c:	f240 14c0 	movw	r4, #448	@ 0x1c0
 800de10:	7768      	strb	r0, [r5, #29]
 800de12:	f1b8 0f00 	cmp.w	r8, #0
 800de16:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800de1a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800de1e:	f04f 0000 	mov.w	r0, #0
 800de22:	f8cd 8000 	str.w	r8, [sp]
 800de26:	f000 809e 	beq.w	800df66 <evnt_schdlr_hw_evnt_cmplt+0x31e>
 800de2a:	9001      	str	r0, [sp, #4]
 800de2c:	f10a 000c 	add.w	r0, sl, #12
 800de30:	9004      	str	r0, [sp, #16]
 800de32:	6830      	ldr	r0, [r6, #0]
 800de34:	f04f 0900 	mov.w	r9, #0
 800de38:	f04f 0b00 	mov.w	fp, #0
 800de3c:	2100      	movs	r1, #0
 800de3e:	9103      	str	r1, [sp, #12]
 800de40:	2800      	cmp	r0, #0
 800de42:	f000 8095 	beq.w	800df70 <evnt_schdlr_hw_evnt_cmplt+0x328>
 800de46:	9804      	ldr	r0, [sp, #16]
 800de48:	f000 fef1 	bl	800ec2e <packet_dequeue>
 800de4c:	42a0      	cmp	r0, r4
 800de4e:	f000 8068 	beq.w	800df22 <evnt_schdlr_hw_evnt_cmplt+0x2da>
 800de52:	4607      	mov	r7, r0
 800de54:	7b80      	ldrb	r0, [r0, #14]
 800de56:	0780      	lsls	r0, r0, #30
 800de58:	f140 8059 	bpl.w	800df0e <evnt_schdlr_hw_evnt_cmplt+0x2c6>
 800de5c:	6838      	ldr	r0, [r7, #0]
 800de5e:	8979      	ldrh	r1, [r7, #10]
 800de60:	89ba      	ldrh	r2, [r7, #12]
 800de62:	4408      	add	r0, r1
 800de64:	4410      	add	r0, r2
 800de66:	f8cd b008 	str.w	fp, [sp, #8]
 800de6a:	f890 b004 	ldrb.w	fp, [r0, #4]
 800de6e:	f1bb 0f29 	cmp.w	fp, #41	@ 0x29
 800de72:	f200 806d 	bhi.w	800df50 <evnt_schdlr_hw_evnt_cmplt+0x308>
 800de76:	e8df f00b 	tbb	[pc, fp]
 800de7a:	1515      	.short	0x1515
 800de7c:	15151e15 	.word	0x15151e15
 800de80:	1e1e1e15 	.word	0x1e1e1e15
 800de84:	1e1e151e 	.word	0x1e1e151e
 800de88:	1e1e1e1e 	.word	0x1e1e1e1e
 800de8c:	1e1e1e1e 	.word	0x1e1e1e1e
 800de90:	15151e1e 	.word	0x15151e1e
 800de94:	1e6b1e1e 	.word	0x1e6b1e1e
 800de98:	6b1e1e1e 	.word	0x6b1e1e1e
 800de9c:	6b1e1e6b 	.word	0x6b1e1e6b
 800dea0:	15156b1e 	.word	0x15156b1e
 800dea4:	9a03      	ldr	r2, [sp, #12]
 800dea6:	f8da 0074 	ldr.w	r0, [sl, #116]	@ 0x74
 800deaa:	b2d1      	uxtb	r1, r2
 800deac:	3201      	adds	r2, #1
 800deae:	4408      	add	r0, r1
 800deb0:	f880 b150 	strb.w	fp, [r0, #336]	@ 0x150
 800deb4:	9203      	str	r2, [sp, #12]
 800deb6:	9803      	ldr	r0, [sp, #12]
 800deb8:	2101      	movs	r1, #1
 800deba:	b2c0      	uxtb	r0, r0
 800debc:	2803      	cmp	r0, #3
 800debe:	f04f 0000 	mov.w	r0, #0
 800dec2:	bf38      	it	cc
 800dec4:	2001      	movcc	r0, #1
 800dec6:	f00d fd2a 	bl	801b91e <bsp_assert>
 800deca:	f89a 0019 	ldrb.w	r0, [sl, #25]
 800dece:	f1bb 0f02 	cmp.w	fp, #2
 800ded2:	f1a0 0001 	sub.w	r0, r0, #1
 800ded6:	f88a 0019 	strb.w	r0, [sl, #25]
 800deda:	f895 0027 	ldrb.w	r0, [r5, #39]	@ 0x27
 800dede:	f100 0001 	add.w	r0, r0, #1
 800dee2:	f885 0027 	strb.w	r0, [r5, #39]	@ 0x27
 800dee6:	d110      	bne.n	800df0a <evnt_schdlr_hw_evnt_cmplt+0x2c2>
 800dee8:	f8da 0074 	ldr.w	r0, [sl, #116]	@ 0x74
 800deec:	f890 1123 	ldrb.w	r1, [r0, #291]	@ 0x123
 800def0:	2905      	cmp	r1, #5
 800def2:	d00a      	beq.n	800df0a <evnt_schdlr_hw_evnt_cmplt+0x2c2>
 800def4:	220d      	movs	r2, #13
 800def6:	f100 0158 	add.w	r1, r0, #88	@ 0x58
 800defa:	6580      	str	r0, [r0, #88]	@ 0x58
 800defc:	f880 205c 	strb.w	r2, [r0, #92]	@ 0x5c
 800df00:	2002      	movs	r0, #2
 800df02:	f00f fc04 	bl	801d70e <emngr_post_event>
 800df06:	2001      	movs	r0, #1
 800df08:	9001      	str	r0, [sp, #4]
 800df0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800df0e:	4638      	mov	r0, r7
 800df10:	f00c fcee 	bl	801a8f0 <free_buff_hdr>
 800df14:	2800      	cmp	r0, #0
 800df16:	7f68      	ldrb	r0, [r5, #29]
 800df18:	bf18      	it	ne
 800df1a:	f10b 0b01 	addne.w	fp, fp, #1
 800df1e:	3001      	adds	r0, #1
 800df20:	7768      	strb	r0, [r5, #29]
 800df22:	f89a 0018 	ldrb.w	r0, [sl, #24]
 800df26:	eb06 0189 	add.w	r1, r6, r9, lsl #2
 800df2a:	3801      	subs	r0, #1
 800df2c:	f88a 0018 	strb.w	r0, [sl, #24]
 800df30:	6848      	ldr	r0, [r1, #4]
 800df32:	6821      	ldr	r1, [r4, #0]
 800df34:	4288      	cmp	r0, r1
 800df36:	d01b      	beq.n	800df70 <evnt_schdlr_hw_evnt_cmplt+0x328>
 800df38:	f1b9 0f06 	cmp.w	r9, #6
 800df3c:	d818      	bhi.n	800df70 <evnt_schdlr_hw_evnt_cmplt+0x328>
 800df3e:	f1a8 0801 	sub.w	r8, r8, #1
 800df42:	ea5f 6108 	movs.w	r1, r8, lsl #24
 800df46:	f109 0901 	add.w	r9, r9, #1
 800df4a:	f47f af79 	bne.w	800de40 <evnt_schdlr_hw_evnt_cmplt+0x1f8>
 800df4e:	e00f      	b.n	800df70 <evnt_schdlr_hw_evnt_cmplt+0x328>
 800df50:	2000      	movs	r0, #0
 800df52:	2101      	movs	r1, #1
 800df54:	f00d fce3 	bl	801b91e <bsp_assert>
 800df58:	e7a4      	b.n	800dea4 <evnt_schdlr_hw_evnt_cmplt+0x25c>
 800df5a:	f8da 0094 	ldr.w	r0, [sl, #148]	@ 0x94
 800df5e:	2600      	movs	r6, #0
 800df60:	f88a 6099 	strb.w	r6, [sl, #153]	@ 0x99
 800df64:	e02e      	b.n	800dfc4 <evnt_schdlr_hw_evnt_cmplt+0x37c>
 800df66:	9001      	str	r0, [sp, #4]
 800df68:	2000      	movs	r0, #0
 800df6a:	f04f 0b00 	mov.w	fp, #0
 800df6e:	9003      	str	r0, [sp, #12]
 800df70:	9f00      	ldr	r7, [sp, #0]
 800df72:	f10a 080c 	add.w	r8, sl, #12
 800df76:	f856 9027 	ldr.w	r9, [r6, r7, lsl #2]
 800df7a:	4640      	mov	r0, r8
 800df7c:	f001 fa91 	bl	800f4a2 <packet_get_frst_pkt>
 800df80:	6800      	ldr	r0, [r0, #0]
 800df82:	4581      	cmp	r9, r0
 800df84:	d007      	beq.n	800df96 <evnt_schdlr_hw_evnt_cmplt+0x34e>
 800df86:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 800df8a:	6821      	ldr	r1, [r4, #0]
 800df8c:	4288      	cmp	r0, r1
 800df8e:	bf04      	itt	eq
 800df90:	4640      	moveq	r0, r8
 800df92:	f001 fa73 	bleq	800f47c <packet_insert_empty_frst>
 800df96:	9803      	ldr	r0, [sp, #12]
 800df98:	f646 473c 	movw	r7, #27708	@ 0x6c3c
 800df9c:	b2c0      	uxtb	r0, r0
 800df9e:	2801      	cmp	r0, #1
 800dfa0:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800dfa4:	d809      	bhi.n	800dfba <evnt_schdlr_hw_evnt_cmplt+0x372>
 800dfa6:	212b      	movs	r1, #43	@ 0x2b
 800dfa8:	f8da 2074 	ldr.w	r2, [sl, #116]	@ 0x74
 800dfac:	2800      	cmp	r0, #0
 800dfae:	4402      	add	r2, r0
 800dfb0:	f04f 0001 	mov.w	r0, #1
 800dfb4:	f882 1150 	strb.w	r1, [r2, #336]	@ 0x150
 800dfb8:	d0f6      	beq.n	800dfa8 <evnt_schdlr_hw_evnt_cmplt+0x360>
 800dfba:	e9da 1024 	ldrd	r1, r0, [sl, #144]	@ 0x90
 800dfbe:	9e01      	ldr	r6, [sp, #4]
 800dfc0:	f885 b01c 	strb.w	fp, [r5, #28]
 800dfc4:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 800dfc8:	4302      	orrs	r2, r0
 800dfca:	d119      	bne.n	800e000 <evnt_schdlr_hw_evnt_cmplt+0x3b8>
 800dfcc:	f895 0020 	ldrb.w	r0, [r5, #32]
 800dfd0:	b920      	cbnz	r0, 800dfdc <evnt_schdlr_hw_evnt_cmplt+0x394>
 800dfd2:	f895 0021 	ldrb.w	r0, [r5, #33]	@ 0x21
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f000 808a 	beq.w	800e0f0 <evnt_schdlr_hw_evnt_cmplt+0x4a8>
 800dfdc:	f10a 0058 	add.w	r0, sl, #88	@ 0x58
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f00f fa1a 	bl	801d41a <ble_time_set>
 800dfe6:	f10a 0050 	add.w	r0, sl, #80	@ 0x50
 800dfea:	4629      	mov	r1, r5
 800dfec:	f00f fa15 	bl	801d41a <ble_time_set>
 800dff0:	2001      	movs	r0, #1
 800dff2:	f88a 008c 	strb.w	r0, [sl, #140]	@ 0x8c
 800dff6:	e9da 1024 	ldrd	r1, r0, [sl, #144]	@ 0x90
 800dffa:	2200      	movs	r2, #0
 800dffc:	f8ca 2000 	str.w	r2, [sl]
 800e000:	f081 0202 	eor.w	r2, r1, #2
 800e004:	4302      	orrs	r2, r0
 800e006:	d114      	bne.n	800e032 <evnt_schdlr_hw_evnt_cmplt+0x3ea>
 800e008:	f8da 0074 	ldr.w	r0, [sl, #116]	@ 0x74
 800e00c:	7e41      	ldrb	r1, [r0, #25]
 800e00e:	2901      	cmp	r1, #1
 800e010:	d10c      	bne.n	800e02c <evnt_schdlr_hw_evnt_cmplt+0x3e4>
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	f240 1255 	movw	r2, #341	@ 0x155
 800e018:	3101      	adds	r1, #1
 800e01a:	4291      	cmp	r1, r2
 800e01c:	6039      	str	r1, [r7, #0]
 800e01e:	d105      	bne.n	800e02c <evnt_schdlr_hw_evnt_cmplt+0x3e4>
 800e020:	f890 0036 	ldrb.w	r0, [r0, #54]	@ 0x36
 800e024:	b910      	cbnz	r0, 800e02c <evnt_schdlr_hw_evnt_cmplt+0x3e4>
 800e026:	2001      	movs	r0, #1
 800e028:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
 800e02c:	2000      	movs	r0, #0
 800e02e:	2102      	movs	r1, #2
 800e030:	e010      	b.n	800e054 <evnt_schdlr_hw_evnt_cmplt+0x40c>
 800e032:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 800e036:	d00d      	beq.n	800e054 <evnt_schdlr_hw_evnt_cmplt+0x40c>
 800e038:	f895 2020 	ldrb.w	r2, [r5, #32]
 800e03c:	b912      	cbnz	r2, 800e044 <evnt_schdlr_hw_evnt_cmplt+0x3fc>
 800e03e:	f895 2021 	ldrb.w	r2, [r5, #33]	@ 0x21
 800e042:	b13a      	cbz	r2, 800e054 <evnt_schdlr_hw_evnt_cmplt+0x40c>
 800e044:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e048:	b122      	cbz	r2, 800e054 <evnt_schdlr_hw_evnt_cmplt+0x40c>
 800e04a:	f8da 0070 	ldr.w	r0, [sl, #112]	@ 0x70
 800e04e:	68a9      	ldr	r1, [r5, #8]
 800e050:	4790      	blx	r2
 800e052:	e030      	b.n	800e0b6 <evnt_schdlr_hw_evnt_cmplt+0x46e>
 800e054:	f895 2020 	ldrb.w	r2, [r5, #32]
 800e058:	b912      	cbnz	r2, 800e060 <evnt_schdlr_hw_evnt_cmplt+0x418>
 800e05a:	f895 2021 	ldrb.w	r2, [r5, #33]	@ 0x21
 800e05e:	b3ba      	cbz	r2, 800e0d0 <evnt_schdlr_hw_evnt_cmplt+0x488>
 800e060:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 800e064:	4308      	orrs	r0, r1
 800e066:	d105      	bne.n	800e074 <evnt_schdlr_hw_evnt_cmplt+0x42c>
 800e068:	f10a 0058 	add.w	r0, sl, #88	@ 0x58
 800e06c:	f10a 0150 	add.w	r1, sl, #80	@ 0x50
 800e070:	f00f f9d3 	bl	801d41a <ble_time_set>
 800e074:	2000      	movs	r0, #0
 800e076:	f88a 009b 	strb.w	r0, [sl, #155]	@ 0x9b
 800e07a:	2002      	movs	r0, #2
 800e07c:	f8aa 0098 	strh.w	r0, [sl, #152]	@ 0x98
 800e080:	b13e      	cbz	r6, 800e092 <evnt_schdlr_hw_evnt_cmplt+0x44a>
 800e082:	bf00      	nop
 800e084:	68a8      	ldr	r0, [r5, #8]
 800e086:	b158      	cbz	r0, 800e0a0 <evnt_schdlr_hw_evnt_cmplt+0x458>
 800e088:	6841      	ldr	r1, [r0, #4]
 800e08a:	60a9      	str	r1, [r5, #8]
 800e08c:	f00c fc30 	bl	801a8f0 <free_buff_hdr>
 800e090:	e7f8      	b.n	800e084 <evnt_schdlr_hw_evnt_cmplt+0x43c>
 800e092:	f8da 3068 	ldr.w	r3, [sl, #104]	@ 0x68
 800e096:	f8da 0070 	ldr.w	r0, [sl, #112]	@ 0x70
 800e09a:	4629      	mov	r1, r5
 800e09c:	4652      	mov	r2, sl
 800e09e:	4798      	blx	r3
 800e0a0:	e9da 0124 	ldrd	r0, r1, [sl, #144]	@ 0x90
 800e0a4:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 800e0a8:	4308      	orrs	r0, r1
 800e0aa:	d104      	bne.n	800e0b6 <evnt_schdlr_hw_evnt_cmplt+0x46e>
 800e0ac:	f8da 0070 	ldr.w	r0, [sl, #112]	@ 0x70
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	f012 fee1 	bl	8020e78 <conn_mngr_update_ststic>
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	f00f fd00 	bl	801dabc <os_mem_pool_free>
 800e0bc:	e9da 0124 	ldrd	r0, r1, [sl, #144]	@ 0x90
 800e0c0:	f000 fcc3 	bl	800ea4a <evnt_schdlr_call_end_of_activity_callback>
 800e0c4:	2090      	movs	r0, #144	@ 0x90
 800e0c6:	b005      	add	sp, #20
 800e0c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	f00d bc70 	b.w	801b9b0 <bsp_debug_gpio_clear>
 800e0d0:	f8da 306c 	ldr.w	r3, [sl, #108]	@ 0x6c
 800e0d4:	b183      	cbz	r3, 800e0f8 <evnt_schdlr_hw_evnt_cmplt+0x4b0>
 800e0d6:	f895 202c 	ldrb.w	r2, [r5, #44]	@ 0x2c
 800e0da:	0792      	lsls	r2, r2, #30
 800e0dc:	d41a      	bmi.n	800e114 <evnt_schdlr_hw_evnt_cmplt+0x4cc>
 800e0de:	f411 7fc0 	tst.w	r1, #384	@ 0x180
 800e0e2:	d009      	beq.n	800e0f8 <evnt_schdlr_hw_evnt_cmplt+0x4b0>
 800e0e4:	2002      	movs	r0, #2
 800e0e6:	2e00      	cmp	r6, #0
 800e0e8:	f88a 0098 	strb.w	r0, [sl, #152]	@ 0x98
 800e0ec:	d1d8      	bne.n	800e0a0 <evnt_schdlr_hw_evnt_cmplt+0x458>
 800e0ee:	e7d2      	b.n	800e096 <evnt_schdlr_hw_evnt_cmplt+0x44e>
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e0f6:	e79f      	b.n	800e038 <evnt_schdlr_hw_evnt_cmplt+0x3f0>
 800e0f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e0fe:	4650      	mov	r0, sl
 800e100:	f88a 1098 	strb.w	r1, [sl, #152]	@ 0x98
 800e104:	4790      	blx	r2
 800e106:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 800e10a:	b340      	cbz	r0, 800e15e <evnt_schdlr_hw_evnt_cmplt+0x516>
 800e10c:	3801      	subs	r0, #1
 800e10e:	f887 0039 	strb.w	r0, [r7, #57]	@ 0x39
 800e112:	e7c5      	b.n	800e0a0 <evnt_schdlr_hw_evnt_cmplt+0x458>
 800e114:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 800e118:	4302      	orrs	r2, r0
 800e11a:	d111      	bne.n	800e140 <evnt_schdlr_hw_evnt_cmplt+0x4f8>
 800e11c:	f10a 0058 	add.w	r0, sl, #88	@ 0x58
 800e120:	4629      	mov	r1, r5
 800e122:	f00f f97a 	bl	801d41a <ble_time_set>
 800e126:	f10a 0050 	add.w	r0, sl, #80	@ 0x50
 800e12a:	4629      	mov	r1, r5
 800e12c:	f00f f975 	bl	801d41a <ble_time_set>
 800e130:	2001      	movs	r0, #1
 800e132:	f88a 008c 	strb.w	r0, [sl, #140]	@ 0x8c
 800e136:	e9da 1024 	ldrd	r1, r0, [sl, #144]	@ 0x90
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8ca 2000 	str.w	r2, [sl]
 800e140:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 800e144:	4308      	orrs	r0, r1
 800e146:	bf04      	itt	eq
 800e148:	2001      	moveq	r0, #1
 800e14a:	f88a 008c 	strbeq.w	r0, [sl, #140]	@ 0x8c
 800e14e:	2002      	movs	r0, #2
 800e150:	2e00      	cmp	r6, #0
 800e152:	f88a 0098 	strb.w	r0, [sl, #152]	@ 0x98
 800e156:	d1a3      	bne.n	800e0a0 <evnt_schdlr_hw_evnt_cmplt+0x458>
 800e158:	f8da 306c 	ldr.w	r3, [sl, #108]	@ 0x6c
 800e15c:	e79b      	b.n	800e096 <evnt_schdlr_hw_evnt_cmplt+0x44e>
 800e15e:	f7fe faaf 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e162:	e79d      	b.n	800e0a0 <evnt_schdlr_hw_evnt_cmplt+0x458>

0800e164 <evnt_schdlr_prdc_clbr_evnt_clbk>:
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	4604      	mov	r4, r0
 800e16a:	2000      	movs	r0, #0
 800e16c:	e9cd 0002 	strd	r0, r0, [sp, #8]
 800e170:	4620      	mov	r0, r4
 800e172:	2101      	movs	r1, #1
 800e174:	2c00      	cmp	r4, #0
 800e176:	bf18      	it	ne
 800e178:	2001      	movne	r0, #1
 800e17a:	f00d fbd0 	bl	801b91e <bsp_assert>
 800e17e:	f00d fc2e 	bl	801b9de <os_disable_isr>
 800e182:	f646 463c 	movw	r6, #27708	@ 0x6c3c
 800e186:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800e18a:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800e18c:	b118      	cbz	r0, 800e196 <evnt_schdlr_prdc_clbr_evnt_clbk+0x32>
 800e18e:	f00d fc28 	bl	801b9e2 <os_enable_isr>
 800e192:	b004      	add	sp, #16
 800e194:	bd70      	pop	{r4, r5, r6, pc}
 800e196:	f894 0045 	ldrb.w	r0, [r4, #69]	@ 0x45
 800e19a:	2801      	cmp	r0, #1
 800e19c:	d10b      	bne.n	800e1b6 <evnt_schdlr_prdc_clbr_evnt_clbk+0x52>
 800e19e:	2000      	movs	r0, #0
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	62b4      	str	r4, [r6, #40]	@ 0x28
 800e1a4:	f884 108d 	strb.w	r1, [r4, #141]	@ 0x8d
 800e1a8:	6420      	str	r0, [r4, #64]	@ 0x40
 800e1aa:	f00d fc1a 	bl	801b9e2 <os_enable_isr>
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 fc80 	bl	800eab4 <evnt_schdlr_prdc_clbr_exec>
 800e1b4:	e7ed      	b.n	800e192 <evnt_schdlr_prdc_clbr_evnt_clbk+0x2e>
 800e1b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e1b8:	6880      	ldr	r0, [r0, #8]
 800e1ba:	4780      	blx	r0
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d0e6      	beq.n	800e18e <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 800e1c0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 800e1c4:	ad02      	add	r5, sp, #8
 800e1c6:	9002      	str	r0, [sp, #8]
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	9103      	str	r1, [sp, #12]
 800e1cc:	f240 11bc 	movw	r1, #444	@ 0x1bc
 800e1d0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e1d4:	6809      	ldr	r1, [r1, #0]
 800e1d6:	2205      	movs	r2, #5
 800e1d8:	f00f f9e6 	bl	801d5a8 <ble_time_rmv_uint>
 800e1dc:	a801      	add	r0, sp, #4
 800e1de:	f010 f974 	bl	801e4ca <llhwc_slptmr_get>
 800e1e2:	9901      	ldr	r1, [sp, #4]
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f00f fa1d 	bl	801d624 <ble_time_cmp_raw_reading>
 800e1ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e1ee:	dcce      	bgt.n	800e18e <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 800e1f0:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800e1f4:	f00f fa3b 	bl	801d66e <ble_time_overflow_diff>
 800e1f8:	f646 4178 	movw	r1, #27768	@ 0x6c78
 800e1fc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e200:	6809      	ldr	r1, [r1, #0]
 800e202:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e204:	4408      	add	r0, r1
 800e206:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 800e20a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e20e:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 800e212:	fb02 f103 	mul.w	r1, r2, r3
 800e216:	4288      	cmp	r0, r1
 800e218:	d3b9      	bcc.n	800e18e <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 800e21a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e21c:	4288      	cmp	r0, r1
 800e21e:	d3b6      	bcc.n	800e18e <evnt_schdlr_prdc_clbr_evnt_clbk+0x2a>
 800e220:	e7be      	b.n	800e1a0 <evnt_schdlr_prdc_clbr_evnt_clbk+0x3c>

0800e222 <evnt_schdlr_hndl_near_evnts>:
 800e222:	b570      	push	{r4, r5, r6, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	f646 453c 	movw	r5, #27708	@ 0x6c3c
 800e22a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800e22e:	e9d5 1609 	ldrd	r1, r6, [r5, #36]	@ 0x24
 800e232:	2000      	movs	r0, #0
 800e234:	6889      	ldr	r1, [r1, #8]
 800e236:	9003      	str	r0, [sp, #12]
 800e238:	9001      	str	r0, [sp, #4]
 800e23a:	9000      	str	r0, [sp, #0]
 800e23c:	4788      	blx	r1
 800e23e:	4604      	mov	r4, r0
 800e240:	200b      	movs	r0, #11
 800e242:	f00d fbb3 	bl	801b9ac <bsp_debug_gpio_set>
 800e246:	b1dc      	cbz	r4, 800e280 <evnt_schdlr_hndl_near_evnts+0x5e>
 800e248:	e9d6 1024 	ldrd	r1, r0, [r6, #144]	@ 0x90
 800e24c:	f081 5200 	eor.w	r2, r1, #536870912	@ 0x20000000
 800e250:	4302      	orrs	r2, r0
 800e252:	d008      	beq.n	800e266 <evnt_schdlr_hndl_near_evnts+0x44>
 800e254:	f481 7180 	eor.w	r1, r1, #256	@ 0x100
 800e258:	4308      	orrs	r0, r1
 800e25a:	d111      	bne.n	800e280 <evnt_schdlr_hndl_near_evnts+0x5e>
 800e25c:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800e260:	f480 2080 	eor.w	r0, r0, #262144	@ 0x40000
 800e264:	e003      	b.n	800e26e <evnt_schdlr_hndl_near_evnts+0x4c>
 800e266:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800e26a:	f480 1080 	eor.w	r0, r0, #1048576	@ 0x100000
 800e26e:	4308      	orrs	r0, r1
 800e270:	d106      	bne.n	800e280 <evnt_schdlr_hndl_near_evnts+0x5e>
 800e272:	2008      	movs	r0, #8
 800e274:	f00d fb9e 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800e278:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 800e27c:	2804      	cmp	r0, #4
 800e27e:	d106      	bne.n	800e28e <evnt_schdlr_hndl_near_evnts+0x6c>
 800e280:	f007 f9e1 	bl	8015646 <llhwc_goto_sleep>
 800e284:	200b      	movs	r0, #11
 800e286:	f00d fb93 	bl	801b9b0 <bsp_debug_gpio_clear>
 800e28a:	b004      	add	sp, #16
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
 800e28e:	200a      	movs	r0, #10
 800e290:	f00d fb90 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800e294:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
 800e298:	e9cd 0100 	strd	r0, r1, [sp]
 800e29c:	a803      	add	r0, sp, #12
 800e29e:	f010 f914 	bl	801e4ca <llhwc_slptmr_get>
 800e2a2:	9903      	ldr	r1, [sp, #12]
 800e2a4:	4668      	mov	r0, sp
 800e2a6:	f00f f9bd 	bl	801d624 <ble_time_cmp_raw_reading>
 800e2aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e2ae:	dd01      	ble.n	800e2b4 <evnt_schdlr_hndl_near_evnts+0x92>
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e007      	b.n	800e2c4 <evnt_schdlr_hndl_near_evnts+0xa2>
 800e2b4:	9800      	ldr	r0, [sp, #0]
 800e2b6:	9903      	ldr	r1, [sp, #12]
 800e2b8:	f00f f9d9 	bl	801d66e <ble_time_overflow_diff>
 800e2bc:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 800e2c0:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 800e2c4:	283f      	cmp	r0, #63	@ 0x3f
 800e2c6:	d3db      	bcc.n	800e280 <evnt_schdlr_hndl_near_evnts+0x5e>
 800e2c8:	f240 11bc 	movw	r1, #444	@ 0x1bc
 800e2cc:	f646 4278 	movw	r2, #27768	@ 0x6c78
 800e2d0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e2d4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800e2d8:	6809      	ldr	r1, [r1, #0]
 800e2da:	6892      	ldr	r2, [r2, #8]
 800e2dc:	4411      	add	r1, r2
 800e2de:	3905      	subs	r1, #5
 800e2e0:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 800e2e4:	eb02 0191 	add.w	r1, r2, r1, lsr #2
 800e2e8:	4288      	cmp	r0, r1
 800e2ea:	d2c9      	bcs.n	800e280 <evnt_schdlr_hndl_near_evnts+0x5e>
 800e2ec:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800e2ee:	2101      	movs	r1, #1
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	bf18      	it	ne
 800e2f4:	2001      	movne	r0, #1
 800e2f6:	f00d fb12 	bl	801b91e <bsp_assert>
 800e2fa:	f895 1039 	ldrb.w	r1, [r5, #57]	@ 0x39
 800e2fe:	2000      	movs	r0, #0
 800e300:	62a8      	str	r0, [r5, #40]	@ 0x28
 800e302:	1c48      	adds	r0, r1, #1
 800e304:	f885 0039 	strb.w	r0, [r5, #57]	@ 0x39
 800e308:	2009      	movs	r0, #9
 800e30a:	f00d fb53 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800e30e:	f106 0150 	add.w	r1, r6, #80	@ 0x50
 800e312:	4668      	mov	r0, sp
 800e314:	f00f f861 	bl	801d3da <ble_time_ordered_diff_us>
 800e318:	f240 4644 	movw	r6, #1092	@ 0x444
 800e31c:	6328      	str	r0, [r5, #48]	@ 0x30
 800e31e:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 800e322:	6970      	ldr	r0, [r6, #20]
 800e324:	2100      	movs	r1, #0
 800e326:	f040 0002 	orr.w	r0, r0, #2
 800e32a:	6170      	str	r0, [r6, #20]
 800e32c:	6870      	ldr	r0, [r6, #4]
 800e32e:	f020 0010 	bic.w	r0, r0, #16
 800e332:	6070      	str	r0, [r6, #4]
 800e334:	6830      	ldr	r0, [r6, #0]
 800e336:	f040 0002 	orr.w	r0, r0, #2
 800e33a:	6030      	str	r0, [r6, #0]
 800e33c:	6830      	ldr	r0, [r6, #0]
 800e33e:	f020 0002 	bic.w	r0, r0, #2
 800e342:	6030      	str	r0, [r6, #0]
 800e344:	4620      	mov	r0, r4
 800e346:	f7fe fb83 	bl	800ca50 <evnt_schdlr_exec>
 800e34a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e34c:	61b0      	str	r0, [r6, #24]
 800e34e:	6970      	ldr	r0, [r6, #20]
 800e350:	f020 0002 	bic.w	r0, r0, #2
 800e354:	6170      	str	r0, [r6, #20]
 800e356:	e795      	b.n	800e284 <evnt_schdlr_hndl_near_evnts+0x62>

0800e358 <evnt_schdlr_config_schdling_time>:
 800e358:	b5b0      	push	{r4, r5, r7, lr}
 800e35a:	2003      	movs	r0, #3
 800e35c:	f00d fb3d 	bl	801b9da <disable_specific_irq>
 800e360:	f646 453c 	movw	r5, #27708	@ 0x6c3c
 800e364:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800e368:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800e36a:	f646 4078 	movw	r0, #27768	@ 0x6c78
 800e36e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800e372:	b119      	cbz	r1, 800e37c <evnt_schdlr_config_schdling_time+0x24>
 800e374:	f891 108d 	ldrb.w	r1, [r1, #141]	@ 0x8d
 800e378:	2901      	cmp	r1, #1
 800e37a:	d00f      	beq.n	800e39c <evnt_schdlr_config_schdling_time+0x44>
 800e37c:	7e01      	ldrb	r1, [r0, #24]
 800e37e:	2901      	cmp	r1, #1
 800e380:	d10c      	bne.n	800e39c <evnt_schdlr_config_schdling_time+0x44>
 800e382:	2100      	movs	r1, #0
 800e384:	f100 040c 	add.w	r4, r0, #12
 800e388:	7601      	strb	r1, [r0, #24]
 800e38a:	4620      	mov	r0, r4
 800e38c:	f00d fb21 	bl	801b9d2 <bsp_evnt_schldr_timing_update_not>
 800e390:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800e392:	6a01      	ldr	r1, [r0, #32]
 800e394:	4620      	mov	r0, r4
 800e396:	4788      	blx	r1
 800e398:	f7fe f992 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e39c:	2003      	movs	r0, #3
 800e39e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e3a2:	f00d bb18 	b.w	801b9d6 <enable_specific_irq>
	...

0800e3a8 <evnt_schdlr_reset>:
 800e3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3aa:	b081      	sub	sp, #4
 800e3ac:	f248 17e8 	movw	r7, #33256	@ 0x81e8
 800e3b0:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800e3b4:	6838      	ldr	r0, [r7, #0]
 800e3b6:	f04f 31ff 	mov.w	r1, #4294967295
 800e3ba:	f00d fb14 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800e3be:	f646 463c 	movw	r6, #27708	@ 0x6c3c
 800e3c2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800e3c6:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800e3c8:	b120      	cbz	r0, 800e3d4 <evnt_schdlr_reset+0x2c>
 800e3ca:	f00f fe73 	bl	801e0b4 <os_timer_stop>
 800e3ce:	b108      	cbz	r0, 800e3d4 <evnt_schdlr_reset+0x2c>
 800e3d0:	241f      	movs	r4, #31
 800e3d2:	e032      	b.n	800e43a <evnt_schdlr_reset+0x92>
 800e3d4:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e3d6:	6840      	ldr	r0, [r0, #4]
 800e3d8:	4780      	blx	r0
 800e3da:	2400      	movs	r4, #0
 800e3dc:	f886 4038 	strb.w	r4, [r6, #56]	@ 0x38
 800e3e0:	6034      	str	r4, [r6, #0]
 800e3e2:	bf00      	nop
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	f00f fa4c 	bl	801d882 <emngr_get_handle_events>
 800e3ea:	b168      	cbz	r0, 800e408 <evnt_schdlr_reset+0x60>
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	f00f f9f2 	bl	801d7d6 <emngr_get_event>
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	bf18      	it	ne
 800e3fa:	2001      	movne	r0, #1
 800e3fc:	f00d fa8f 	bl	801b91e <bsp_assert>
 800e400:	4628      	mov	r0, r5
 800e402:	f00f fb5b 	bl	801dabc <os_mem_pool_free>
 800e406:	e7ed      	b.n	800e3e4 <evnt_schdlr_reset+0x3c>
 800e408:	f240 10bc 	movw	r0, #444	@ 0x1bc
 800e40c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800e410:	212a      	movs	r1, #42	@ 0x2a
 800e412:	6001      	str	r1, [r0, #0]
 800e414:	f646 4178 	movw	r1, #27768	@ 0x6c78
 800e418:	200e      	movs	r0, #14
 800e41a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e41e:	2214      	movs	r2, #20
 800e420:	e9c1 0000 	strd	r0, r0, [r1]
 800e424:	e9c1 2002 	strd	r2, r0, [r1, #8]
 800e428:	e9c1 0204 	strd	r0, r2, [r1, #16]
 800e42c:	f646 4038 	movw	r0, #27704	@ 0x6c38
 800e430:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800e434:	62b4      	str	r4, [r6, #40]	@ 0x28
 800e436:	760c      	strb	r4, [r1, #24]
 800e438:	8004      	strh	r4, [r0, #0]
 800e43a:	6838      	ldr	r0, [r7, #0]
 800e43c:	f00d fad9 	bl	801b9f2 <os_rcrsv_mutex_release>
 800e440:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e442:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e444:	4780      	blx	r0
 800e446:	b918      	cbnz	r0, 800e450 <evnt_schdlr_reset+0xa8>
 800e448:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e44a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e44c:	4780      	blx	r0
 800e44e:	b120      	cbz	r0, 800e45a <evnt_schdlr_reset+0xb2>
 800e450:	f7fe f936 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e454:	4620      	mov	r0, r4
 800e456:	b001      	add	sp, #4
 800e458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e45a:	2001      	movs	r0, #1
 800e45c:	f011 ffa5 	bl	80203aa <llhwc_cmn_evnt_notify>
 800e460:	e7f8      	b.n	800e454 <evnt_schdlr_reset+0xac>

0800e462 <evnt_schdlr_set_end_of_activity_mask>:
 800e462:	f646 4138 	movw	r1, #27704	@ 0x6c38
 800e466:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e46a:	8008      	strh	r0, [r1, #0]
 800e46c:	4770      	bx	lr

0800e46e <evnt_schdlr_timer_callback>:
 800e46e:	b580      	push	{r7, lr}
 800e470:	205f      	movs	r0, #95	@ 0x5f
 800e472:	f00d fa9b 	bl	801b9ac <bsp_debug_gpio_set>
 800e476:	2001      	movs	r0, #1
 800e478:	f001 f8e7 	bl	800f64a <evnt_util_set_prdc_clbr_exce_state>
 800e47c:	f7fe f920 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e480:	2000      	movs	r0, #0
 800e482:	f001 f8e2 	bl	800f64a <evnt_util_set_prdc_clbr_exce_state>
 800e486:	205f      	movs	r0, #95	@ 0x5f
 800e488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e48c:	f00d ba90 	b.w	801b9b0 <bsp_debug_gpio_clear>

0800e490 <evnt_schdlr_unrgstr_evnt>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	4604      	mov	r4, r0
 800e494:	200f      	movs	r0, #15
 800e496:	f00d fa89 	bl	801b9ac <bsp_debug_gpio_set>
 800e49a:	4620      	mov	r0, r4
 800e49c:	2101      	movs	r1, #1
 800e49e:	2c00      	cmp	r4, #0
 800e4a0:	bf18      	it	ne
 800e4a2:	2001      	movne	r0, #1
 800e4a4:	f00d fa3b 	bl	801b91e <bsp_assert>
 800e4a8:	f646 463c 	movw	r6, #27708	@ 0x6c3c
 800e4ac:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800e4b0:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 800e4b2:	2104      	movs	r1, #4
 800e4b4:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
 800e4b8:	b120      	cbz	r0, 800e4c4 <evnt_schdlr_unrgstr_evnt+0x34>
 800e4ba:	f00f fdfb 	bl	801e0b4 <os_timer_stop>
 800e4be:	b108      	cbz	r0, 800e4c4 <evnt_schdlr_unrgstr_evnt+0x34>
 800e4c0:	251f      	movs	r5, #31
 800e4c2:	e058      	b.n	800e576 <evnt_schdlr_unrgstr_evnt+0xe6>
 800e4c4:	e9d4 5024 	ldrd	r5, r0, [r4, #144]	@ 0x90
 800e4c8:	f010 0f0a 	tst.w	r0, #10
 800e4cc:	d006      	beq.n	800e4dc <evnt_schdlr_unrgstr_evnt+0x4c>
 800e4ce:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800e4d0:	42a0      	cmp	r0, r4
 800e4d2:	d103      	bne.n	800e4dc <evnt_schdlr_unrgstr_evnt+0x4c>
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	62b0      	str	r0, [r6, #40]	@ 0x28
 800e4d8:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 800e4dc:	f00d fa7f 	bl	801b9de <os_disable_isr>
 800e4e0:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800e4e2:	42a0      	cmp	r0, r4
 800e4e4:	d11f      	bne.n	800e526 <evnt_schdlr_unrgstr_evnt+0x96>
 800e4e6:	f894 008d 	ldrb.w	r0, [r4, #141]	@ 0x8d
 800e4ea:	2801      	cmp	r0, #1
 800e4ec:	d11b      	bne.n	800e526 <evnt_schdlr_unrgstr_evnt+0x96>
 800e4ee:	f896 1038 	ldrb.w	r1, [r6, #56]	@ 0x38
 800e4f2:	2004      	movs	r0, #4
 800e4f4:	f884 0098 	strb.w	r0, [r4, #152]	@ 0x98
 800e4f8:	1c48      	adds	r0, r1, #1
 800e4fa:	f015 0f70 	tst.w	r5, #112	@ 0x70
 800e4fe:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 800e502:	bf18      	it	ne
 800e504:	f004 ff05 	blne	8013312 <llhwc_stop_scan>
 800e508:	f00d fa6b 	bl	801b9e2 <os_enable_isr>
 800e50c:	f894 008d 	ldrb.w	r0, [r4, #141]	@ 0x8d
 800e510:	2801      	cmp	r0, #1
 800e512:	d10a      	bne.n	800e52a <evnt_schdlr_unrgstr_evnt+0x9a>
 800e514:	2000      	movs	r0, #0
 800e516:	f00f f9b4 	bl	801d882 <emngr_get_handle_events>
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d0f6      	beq.n	800e50c <evnt_schdlr_unrgstr_evnt+0x7c>
 800e51e:	2000      	movs	r0, #0
 800e520:	f00f fa02 	bl	801d928 <emngr_handle_event>
 800e524:	e7f2      	b.n	800e50c <evnt_schdlr_unrgstr_evnt+0x7c>
 800e526:	f00d fa5c 	bl	801b9e2 <os_enable_isr>
 800e52a:	f00d fa58 	bl	801b9de <os_disable_isr>
 800e52e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e530:	69c1      	ldr	r1, [r0, #28]
 800e532:	4620      	mov	r0, r4
 800e534:	4788      	blx	r1
 800e536:	4605      	mov	r5, r0
 800e538:	b9e8      	cbnz	r0, 800e576 <evnt_schdlr_unrgstr_evnt+0xe6>
 800e53a:	4620      	mov	r0, r4
 800e53c:	f000 fb3c 	bl	800ebb8 <evnt_schdlr_free_evnt>
 800e540:	f00d fa4f 	bl	801b9e2 <os_enable_isr>
 800e544:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e546:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e548:	4780      	blx	r0
 800e54a:	b948      	cbnz	r0, 800e560 <evnt_schdlr_unrgstr_evnt+0xd0>
 800e54c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e54e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e550:	4780      	blx	r0
 800e552:	b928      	cbnz	r0, 800e560 <evnt_schdlr_unrgstr_evnt+0xd0>
 800e554:	f106 002c 	add.w	r0, r6, #44	@ 0x2c
 800e558:	f00f fe2a 	bl	801e1b0 <os_timer_stop_free>
 800e55c:	4605      	mov	r5, r0
 800e55e:	b950      	cbnz	r0, 800e576 <evnt_schdlr_unrgstr_evnt+0xe6>
 800e560:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e562:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e564:	4780      	blx	r0
 800e566:	2801      	cmp	r0, #1
 800e568:	d104      	bne.n	800e574 <evnt_schdlr_unrgstr_evnt+0xe4>
 800e56a:	2000      	movs	r0, #0
 800e56c:	2500      	movs	r5, #0
 800e56e:	f011 fcab 	bl	801fec8 <llhwc_cmn_set_controller_activity>
 800e572:	e000      	b.n	800e576 <evnt_schdlr_unrgstr_evnt+0xe6>
 800e574:	2500      	movs	r5, #0
 800e576:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e578:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e57a:	4780      	blx	r0
 800e57c:	b918      	cbnz	r0, 800e586 <evnt_schdlr_unrgstr_evnt+0xf6>
 800e57e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e580:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e582:	4780      	blx	r0
 800e584:	b108      	cbz	r0, 800e58a <evnt_schdlr_unrgstr_evnt+0xfa>
 800e586:	f7fe f89b 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e58a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800e58c:	b190      	cbz	r0, 800e5b4 <evnt_schdlr_unrgstr_evnt+0x124>
 800e58e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e590:	4780      	blx	r0
 800e592:	b978      	cbnz	r0, 800e5b4 <evnt_schdlr_unrgstr_evnt+0x124>
 800e594:	f646 4034 	movw	r0, #27700	@ 0x6c34
 800e598:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800e59c:	6802      	ldr	r2, [r0, #0]
 800e59e:	b14a      	cbz	r2, 800e5b4 <evnt_schdlr_unrgstr_evnt+0x124>
 800e5a0:	f646 4038 	movw	r0, #27704	@ 0x6c38
 800e5a4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800e5a8:	7800      	ldrb	r0, [r0, #0]
 800e5aa:	07c0      	lsls	r0, r0, #31
 800e5ac:	d002      	beq.n	800e5b4 <evnt_schdlr_unrgstr_evnt+0x124>
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	4790      	blx	r2
 800e5b4:	200f      	movs	r0, #15
 800e5b6:	f00d f9fb 	bl	801b9b0 <bsp_debug_gpio_clear>
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	bd70      	pop	{r4, r5, r6, pc}

0800e5be <evnt_schdlr_add_data_pkt>:
 800e5be:	b570      	push	{r4, r5, r6, lr}
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	bf18      	it	ne
 800e5ca:	2001      	movne	r0, #1
 800e5cc:	f00d f9a7 	bl	801b91e <bsp_assert>
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	2101      	movs	r1, #1
 800e5d4:	2c00      	cmp	r4, #0
 800e5d6:	bf18      	it	ne
 800e5d8:	2001      	movne	r0, #1
 800e5da:	f00d f9a0 	bl	801b91e <bsp_assert>
 800e5de:	f8b5 0090 	ldrh.w	r0, [r5, #144]	@ 0x90
 800e5e2:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 800e5e6:	bf04      	itt	eq
 800e5e8:	2011      	moveq	r0, #17
 800e5ea:	bd70      	popeq	{r4, r5, r6, pc}
 800e5ec:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 800e5f0:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800e5f4:	6830      	ldr	r0, [r6, #0]
 800e5f6:	f04f 31ff 	mov.w	r1, #4294967295
 800e5fa:	f00d f9f4 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800e5fe:	6f68      	ldr	r0, [r5, #116]	@ 0x74
 800e600:	f890 1123 	ldrb.w	r1, [r0, #291]	@ 0x123
 800e604:	2907      	cmp	r1, #7
 800e606:	d004      	beq.n	800e612 <evnt_schdlr_add_data_pkt+0x54>
 800e608:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 800e60c:	3807      	subs	r0, #7
 800e60e:	2801      	cmp	r0, #1
 800e610:	d802      	bhi.n	800e618 <evnt_schdlr_add_data_pkt+0x5a>
 800e612:	f105 007c 	add.w	r0, r5, #124	@ 0x7c
 800e616:	e001      	b.n	800e61c <evnt_schdlr_add_data_pkt+0x5e>
 800e618:	f105 000c 	add.w	r0, r5, #12
 800e61c:	7ba1      	ldrb	r1, [r4, #14]
 800e61e:	0789      	lsls	r1, r1, #30
 800e620:	d502      	bpl.n	800e628 <evnt_schdlr_add_data_pkt+0x6a>
 800e622:	7e69      	ldrb	r1, [r5, #25]
 800e624:	3101      	adds	r1, #1
 800e626:	7669      	strb	r1, [r5, #25]
 800e628:	4621      	mov	r1, r4
 800e62a:	f000 ff0c 	bl	800f446 <packet_enqueue>
 800e62e:	6830      	ldr	r0, [r6, #0]
 800e630:	f00d f9df 	bl	801b9f2 <os_rcrsv_mutex_release>
 800e634:	2000      	movs	r0, #0
 800e636:	bd70      	pop	{r4, r5, r6, pc}

0800e638 <evnt_schdlr_send_pndng_data_pkt>:
 800e638:	b5b0      	push	{r4, r5, r7, lr}
 800e63a:	2101      	movs	r1, #1
 800e63c:	4604      	mov	r4, r0
 800e63e:	2800      	cmp	r0, #0
 800e640:	bf18      	it	ne
 800e642:	2001      	movne	r0, #1
 800e644:	f00d f96b 	bl	801b91e <bsp_assert>
 800e648:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 800e64c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800e650:	6828      	ldr	r0, [r5, #0]
 800e652:	f04f 31ff 	mov.w	r1, #4294967295
 800e656:	f00d f9c6 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800e65a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800e65c:	b189      	cbz	r1, 800e682 <evnt_schdlr_send_pndng_data_pkt+0x4a>
 800e65e:	4620      	mov	r0, r4
 800e660:	f850 2f0c 	ldr.w	r2, [r0, #12]!
 800e664:	b912      	cbnz	r2, 800e66c <evnt_schdlr_send_pndng_data_pkt+0x34>
 800e666:	f894 2084 	ldrb.w	r2, [r4, #132]	@ 0x84
 800e66a:	7522      	strb	r2, [r4, #20]
 800e66c:	f000 feeb 	bl	800f446 <packet_enqueue>
 800e670:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800e674:	6120      	str	r0, [r4, #16]
 800e676:	2000      	movs	r0, #0
 800e678:	e9c4 001f 	strd	r0, r0, [r4, #124]	@ 0x7c
 800e67c:	2001      	movs	r0, #1
 800e67e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
 800e682:	6828      	ldr	r0, [r5, #0]
 800e684:	f00d f9b5 	bl	801b9f2 <os_rcrsv_mutex_release>
 800e688:	2000      	movs	r0, #0
 800e68a:	bdb0      	pop	{r4, r5, r7, pc}

0800e68c <evnt_schdlr_add_ctrl_pkt>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	460c      	mov	r4, r1
 800e690:	2101      	movs	r1, #1
 800e692:	4605      	mov	r5, r0
 800e694:	2800      	cmp	r0, #0
 800e696:	bf18      	it	ne
 800e698:	2001      	movne	r0, #1
 800e69a:	f00d f940 	bl	801b91e <bsp_assert>
 800e69e:	4620      	mov	r0, r4
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	2c00      	cmp	r4, #0
 800e6a4:	bf18      	it	ne
 800e6a6:	2001      	movne	r0, #1
 800e6a8:	f00d f939 	bl	801b91e <bsp_assert>
 800e6ac:	f8b5 0090 	ldrh.w	r0, [r5, #144]	@ 0x90
 800e6b0:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 800e6b4:	bf04      	itt	eq
 800e6b6:	2011      	moveq	r0, #17
 800e6b8:	bd70      	popeq	{r4, r5, r6, pc}
 800e6ba:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 800e6be:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800e6c2:	6830      	ldr	r0, [r6, #0]
 800e6c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e6c8:	f00d f98d 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800e6cc:	7ba0      	ldrb	r0, [r4, #14]
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	f040 0002 	orr.w	r0, r0, #2
 800e6d4:	73a0      	strb	r0, [r4, #14]
 800e6d6:	7e68      	ldrb	r0, [r5, #25]
 800e6d8:	3001      	adds	r0, #1
 800e6da:	7668      	strb	r0, [r5, #25]
 800e6dc:	f105 000c 	add.w	r0, r5, #12
 800e6e0:	f000 feb1 	bl	800f446 <packet_enqueue>
 800e6e4:	6830      	ldr	r0, [r6, #0]
 800e6e6:	f00d f984 	bl	801b9f2 <os_rcrsv_mutex_release>
 800e6ea:	2000      	movs	r0, #0
 800e6ec:	bd70      	pop	{r4, r5, r6, pc}

0800e6ee <evnt_schdlr_conn_params_updtd>:
 800e6ee:	b570      	push	{r4, r5, r6, lr}
 800e6f0:	460d      	mov	r5, r1
 800e6f2:	2101      	movs	r1, #1
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	bf18      	it	ne
 800e6fa:	2001      	movne	r0, #1
 800e6fc:	f00d f90f 	bl	801b91e <bsp_assert>
 800e700:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 800e702:	0728      	lsls	r0, r5, #28
 800e704:	d505      	bpl.n	800e712 <evnt_schdlr_conn_params_updtd+0x24>
 800e706:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e70a:	f106 0138 	add.w	r1, r6, #56	@ 0x38
 800e70e:	f00e fe84 	bl	801d41a <ble_time_set>
 800e712:	0768      	lsls	r0, r5, #29
 800e714:	d50a      	bpl.n	800e72c <evnt_schdlr_conn_params_updtd+0x3e>
 800e716:	f896 0020 	ldrb.w	r0, [r6, #32]
 800e71a:	b138      	cbz	r0, 800e72c <evnt_schdlr_conn_params_updtd+0x3e>
 800e71c:	8a31      	ldrh	r1, [r6, #16]
 800e71e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e722:	2203      	movs	r2, #3
 800e724:	f00e fe9e 	bl	801d464 <ble_time_add_uint>
 800e728:	f7fd ffca 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e72c:	2000      	movs	r0, #0
 800e72e:	bd70      	pop	{r4, r5, r6, pc}

0800e730 <evnt_schdlr_updt_conn_evnt_durn>:
 800e730:	e9d0 2324 	ldrd	r2, r3, [r0, #144]	@ 0x90
 800e734:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 800e738:	431a      	orrs	r2, r3
 800e73a:	bf18      	it	ne
 800e73c:	4770      	bxne	lr
 800e73e:	f646 423c 	movw	r2, #27708	@ 0x6c3c
 800e742:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800e746:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e74a:	4710      	bx	r2

0800e74c <evnt_schdlr_evnt_updtd>:
 800e74c:	b5b0      	push	{r4, r5, r7, lr}
 800e74e:	4604      	mov	r4, r0
 800e750:	2003      	movs	r0, #3
 800e752:	f00d f92b 	bl	801b9ac <bsp_debug_gpio_set>
 800e756:	4620      	mov	r0, r4
 800e758:	2101      	movs	r1, #1
 800e75a:	2c00      	cmp	r4, #0
 800e75c:	bf18      	it	ne
 800e75e:	2001      	movne	r0, #1
 800e760:	f00d f8dd 	bl	801b91e <bsp_assert>
 800e764:	f646 453c 	movw	r5, #27708	@ 0x6c3c
 800e768:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800e76c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800e76e:	2100      	movs	r1, #0
 800e770:	42a0      	cmp	r0, r4
 800e772:	f884 1098 	strb.w	r1, [r4, #152]	@ 0x98
 800e776:	d10a      	bne.n	800e78e <evnt_schdlr_evnt_updtd+0x42>
 800e778:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800e77c:	f081 0102 	eor.w	r1, r1, #2
 800e780:	4308      	orrs	r0, r1
 800e782:	d104      	bne.n	800e78e <evnt_schdlr_evnt_updtd+0x42>
 800e784:	2000      	movs	r0, #0
 800e786:	62a8      	str	r0, [r5, #40]	@ 0x28
 800e788:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 800e78c:	e003      	b.n	800e796 <evnt_schdlr_evnt_updtd+0x4a>
 800e78e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800e790:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800e792:	4620      	mov	r0, r4
 800e794:	4788      	blx	r1
 800e796:	f895 0039 	ldrb.w	r0, [r5, #57]	@ 0x39
 800e79a:	b118      	cbz	r0, 800e7a4 <evnt_schdlr_evnt_updtd+0x58>
 800e79c:	3801      	subs	r0, #1
 800e79e:	f885 0039 	strb.w	r0, [r5, #57]	@ 0x39
 800e7a2:	e001      	b.n	800e7a8 <evnt_schdlr_evnt_updtd+0x5c>
 800e7a4:	f7fd ff8c 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e7a8:	2003      	movs	r0, #3
 800e7aa:	f00d f901 	bl	801b9b0 <bsp_debug_gpio_clear>
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	bdb0      	pop	{r4, r5, r7, pc}

0800e7b2 <evnt_schdlr_rgstr_wait_for_evnt_cmplt>:
 800e7b2:	b5b0      	push	{r4, r5, r7, lr}
 800e7b4:	460c      	mov	r4, r1
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	4608      	mov	r0, r1
 800e7bc:	f04f 0101 	mov.w	r1, #1
 800e7c0:	bf18      	it	ne
 800e7c2:	2001      	movne	r0, #1
 800e7c4:	f00d f8ab 	bl	801b91e <bsp_assert>
 800e7c8:	60a5      	str	r5, [r4, #8]
 800e7ca:	bdb0      	pop	{r4, r5, r7, pc}

0800e7cc <evnt_schdlr_rgstr_error_cbk_evnt_cmplt>:
 800e7cc:	b5b0      	push	{r4, r5, r7, lr}
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	2900      	cmp	r1, #0
 800e7d4:	4608      	mov	r0, r1
 800e7d6:	f04f 0101 	mov.w	r1, #1
 800e7da:	bf18      	it	ne
 800e7dc:	2001      	movne	r0, #1
 800e7de:	f00d f89e 	bl	801b91e <bsp_assert>
 800e7e2:	66e5      	str	r5, [r4, #108]	@ 0x6c
 800e7e4:	bdb0      	pop	{r4, r5, r7, pc}

0800e7e6 <evnt_schdlr_rgstr_gnrc_evnt>:
 800e7e6:	b510      	push	{r4, lr}
 800e7e8:	b084      	sub	sp, #16
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	bf18      	it	ne
 800e7f2:	2001      	movne	r0, #1
 800e7f4:	f00d f893 	bl	801b91e <bsp_assert>
 800e7f8:	e9d4 2e02 	ldrd	r2, lr, [r4, #8]
 800e7fc:	2005      	movs	r0, #5
 800e7fe:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 800e802:	ea52 030e 	orrs.w	r3, r2, lr
 800e806:	bf1c      	itt	ne
 800e808:	e9d4 3004 	ldrdne	r3, r0, [r4, #16]
 800e80c:	ea53 0100 	orrsne.w	r1, r3, r0
 800e810:	d139      	bne.n	800e886 <evnt_schdlr_rgstr_gnrc_evnt+0xa0>
 800e812:	69a0      	ldr	r0, [r4, #24]
 800e814:	b3d8      	cbz	r0, 800e88e <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 800e816:	69e3      	ldr	r3, [r4, #28]
 800e818:	b10b      	cbz	r3, 800e81e <evnt_schdlr_rgstr_gnrc_evnt+0x38>
 800e81a:	4298      	cmp	r0, r3
 800e81c:	d837      	bhi.n	800e88e <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 800e81e:	e9d4 3c00 	ldrd	r3, ip, [r4]
 800e822:	ea53 010c 	orrs.w	r1, r3, ip
 800e826:	d006      	beq.n	800e836 <evnt_schdlr_rgstr_gnrc_evnt+0x50>
 800e828:	1811      	adds	r1, r2, r0
 800e82a:	f14e 0200 	adc.w	r2, lr, #0
 800e82e:	1a59      	subs	r1, r3, r1
 800e830:	eb7c 0102 	sbcs.w	r1, ip, r2
 800e834:	d32b      	bcc.n	800e88e <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 800e836:	6a21      	ldr	r1, [r4, #32]
 800e838:	b189      	cbz	r1, 800e85e <evnt_schdlr_rgstr_gnrc_evnt+0x78>
 800e83a:	f240 12bc 	movw	r2, #444	@ 0x1bc
 800e83e:	f646 4378 	movw	r3, #27768	@ 0x6c78
 800e842:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800e846:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800e84a:	6812      	ldr	r2, [r2, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	441a      	add	r2, r3
 800e850:	ebc2 1342 	rsb	r3, r2, r2, lsl #5
 800e854:	eb00 0092 	add.w	r0, r0, r2, lsr #2
 800e858:	4418      	add	r0, r3
 800e85a:	4281      	cmp	r1, r0
 800e85c:	d317      	bcc.n	800e88e <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 800e85e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800e860:	b1a8      	cbz	r0, 800e88e <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 800e862:	a803      	add	r0, sp, #12
 800e864:	f00f fe31 	bl	801e4ca <llhwc_slptmr_get>
 800e868:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800e86c:	ea50 0201 	orrs.w	r2, r0, r1
 800e870:	d010      	beq.n	800e894 <evnt_schdlr_rgstr_gnrc_evnt+0xae>
 800e872:	f011 fb10 	bl	801fe96 <US_TO_SLP_TMR_PROTECTED>
 800e876:	9903      	ldr	r1, [sp, #12]
 800e878:	3105      	adds	r1, #5
 800e87a:	4288      	cmp	r0, r1
 800e87c:	d20a      	bcs.n	800e894 <evnt_schdlr_rgstr_gnrc_evnt+0xae>
 800e87e:	2003      	movs	r0, #3
 800e880:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 800e884:	e003      	b.n	800e88e <evnt_schdlr_rgstr_gnrc_evnt+0xa8>
 800e886:	1a99      	subs	r1, r3, r2
 800e888:	eb70 000e 	sbcs.w	r0, r0, lr
 800e88c:	d2c1      	bcs.n	800e812 <evnt_schdlr_rgstr_gnrc_evnt+0x2c>
 800e88e:	2000      	movs	r0, #0
 800e890:	b004      	add	sp, #16
 800e892:	bd10      	pop	{r4, pc}
 800e894:	f04f 0c00 	mov.w	ip, #0
 800e898:	2000      	movs	r0, #0
 800e89a:	2108      	movs	r1, #8
 800e89c:	4622      	mov	r2, r4
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f8cd c008 	str.w	ip, [sp, #8]
 800e8a4:	f8cd c000 	str.w	ip, [sp]
 800e8a8:	f7fe fff7 	bl	800d89a <evnt_schdlr_rgstr_evnt>
 800e8ac:	e7f0      	b.n	800e890 <evnt_schdlr_rgstr_gnrc_evnt+0xaa>

0800e8ae <evnt_schdlr_gnrc_evnt_cmplt>:
 800e8ae:	b510      	push	{r4, lr}
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	bf18      	it	ne
 800e8b8:	2001      	movne	r0, #1
 800e8ba:	f00d f830 	bl	801b91e <bsp_assert>
 800e8be:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800e8c2:	f081 0208 	eor.w	r2, r1, #8
 800e8c6:	f081 0102 	eor.w	r1, r1, #2
 800e8ca:	4302      	orrs	r2, r0
 800e8cc:	4308      	orrs	r0, r1
 800e8ce:	fab2 f282 	clz	r2, r2
 800e8d2:	fab0 f080 	clz	r0, r0
 800e8d6:	0952      	lsrs	r2, r2, #5
 800e8d8:	0940      	lsrs	r0, r0, #5
 800e8da:	4310      	orrs	r0, r2
 800e8dc:	2101      	movs	r1, #1
 800e8de:	f00d f81e 	bl	801b91e <bsp_assert>
 800e8e2:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800e8e6:	f081 0108 	eor.w	r1, r1, #8
 800e8ea:	4308      	orrs	r0, r1
 800e8ec:	d101      	bne.n	800e8f2 <evnt_schdlr_gnrc_evnt_cmplt+0x44>
 800e8ee:	68a0      	ldr	r0, [r4, #8]
 800e8f0:	b120      	cbz	r0, 800e8fc <evnt_schdlr_gnrc_evnt_cmplt+0x4e>
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f7ff ff2a 	bl	800e74c <evnt_schdlr_evnt_updtd>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	bd10      	pop	{r4, pc}
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e902:	f7ff bdc5 	b.w	800e490 <evnt_schdlr_unrgstr_evnt>

0800e906 <evnt_schdlr_set_phy_clbr_params>:
 800e906:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800e90a:	fb00 f002 	mul.w	r0, r0, r2
 800e90e:	f646 4294 	movw	r2, #27796	@ 0x6c94
 800e912:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800e916:	e9c2 0100 	strd	r0, r1, [r2]
 800e91a:	6091      	str	r1, [r2, #8]
 800e91c:	b108      	cbz	r0, 800e922 <evnt_schdlr_set_phy_clbr_params+0x1c>
 800e91e:	f006 beaf 	b.w	8015680 <llhwc_prdc_clbr_init>
 800e922:	f006 bebc 	b.w	801569e <llhwc_prdc_clbr_deinit>

0800e926 <evnt_schdlr_set_dp_slp_mode>:
 800e926:	b5b0      	push	{r4, r5, r7, lr}
 800e928:	f646 453c 	movw	r5, #27708	@ 0x6c3c
 800e92c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800e930:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800e932:	4604      	mov	r4, r0
 800e934:	b141      	cbz	r1, 800e948 <evnt_schdlr_set_dp_slp_mode+0x22>
 800e936:	f891 008d 	ldrb.w	r0, [r1, #141]	@ 0x8d
 800e93a:	2801      	cmp	r0, #1
 800e93c:	d104      	bne.n	800e948 <evnt_schdlr_set_dp_slp_mode+0x22>
 800e93e:	2043      	movs	r0, #67	@ 0x43
 800e940:	f00d f838 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800e944:	240c      	movs	r4, #12
 800e946:	e018      	b.n	800e97a <evnt_schdlr_set_dp_slp_mode+0x54>
 800e948:	4620      	mov	r0, r4
 800e94a:	f00f ff6c 	bl	801e826 <llhwc_cmn_set_dp_slp_mode>
 800e94e:	2c00      	cmp	r4, #0
 800e950:	4604      	mov	r4, r0
 800e952:	bf08      	it	eq
 800e954:	2c00      	cmpeq	r4, #0
 800e956:	d110      	bne.n	800e97a <evnt_schdlr_set_dp_slp_mode+0x54>
 800e958:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800e95a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e95c:	4780      	blx	r0
 800e95e:	b918      	cbnz	r0, 800e968 <evnt_schdlr_set_dp_slp_mode+0x42>
 800e960:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800e962:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800e964:	4780      	blx	r0
 800e966:	b150      	cbz	r0, 800e97e <evnt_schdlr_set_dp_slp_mode+0x58>
 800e968:	2001      	movs	r0, #1
 800e96a:	f000 fe6e 	bl	800f64a <evnt_util_set_prdc_clbr_exce_state>
 800e96e:	f7fd fea7 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 800e972:	2000      	movs	r0, #0
 800e974:	2400      	movs	r4, #0
 800e976:	f000 fe68 	bl	800f64a <evnt_util_set_prdc_clbr_exce_state>
 800e97a:	4620      	mov	r0, r4
 800e97c:	bdb0      	pop	{r4, r5, r7, pc}
 800e97e:	2400      	movs	r4, #0
 800e980:	e7fb      	b.n	800e97a <evnt_schdlr_set_dp_slp_mode+0x54>

0800e982 <evnt_schdlr_select_tx_power_mode>:
 800e982:	b510      	push	{r4, lr}
 800e984:	f646 443c 	movw	r4, #27708	@ 0x6c3c
 800e988:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800e98c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e98e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800e990:	4780      	blx	r0
 800e992:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800e996:	4288      	cmp	r0, r1
 800e998:	bf04      	itt	eq
 800e99a:	2000      	moveq	r0, #0
 800e99c:	bd10      	popeq	{r4, pc}
 800e99e:	2043      	movs	r0, #67	@ 0x43
 800e9a0:	f00d f808 	bl	801b9b4 <bsp_debug_gpio_toggle>
 800e9a4:	200c      	movs	r0, #12
 800e9a6:	bd10      	pop	{r4, pc}

0800e9a8 <evnt_schdlr_set_pndg_evnts>:
 800e9a8:	f646 4130 	movw	r1, #27696	@ 0x6c30
 800e9ac:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e9b0:	7008      	strb	r0, [r1, #0]
 800e9b2:	4770      	bx	lr

0800e9b4 <evnt_schdlr_rgstr_end_of_activity_cbk>:
 800e9b4:	f646 4134 	movw	r1, #27700	@ 0x6c34
 800e9b8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800e9bc:	6008      	str	r0, [r1, #0]
 800e9be:	4770      	bx	lr

0800e9c0 <evnt_schdlr_get_end_of_activity_state>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	f646 4338 	movw	r3, #27704	@ 0x6c38
 800e9c6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800e9ca:	881e      	ldrh	r6, [r3, #0]
 800e9cc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800e9d0:	b396      	cbz	r6, 800ea38 <evnt_schdlr_get_end_of_activity_state+0x78>
 800e9d2:	1e44      	subs	r4, r0, #1
 800e9d4:	f161 0300 	sbc.w	r3, r1, #0
 800e9d8:	f1d4 051f 	rsbs	r5, r4, #31
 800e9dc:	f04f 0500 	mov.w	r5, #0
 800e9e0:	eb75 0303 	sbcs.w	r3, r5, r3
 800e9e4:	d314      	bcc.n	800ea10 <evnt_schdlr_get_end_of_activity_state+0x50>
 800e9e6:	f04f 0e01 	mov.w	lr, #1
 800e9ea:	fa0e f404 	lsl.w	r4, lr, r4
 800e9ee:	f014 0f8b 	tst.w	r4, #139	@ 0x8b
 800e9f2:	d006      	beq.n	800ea02 <evnt_schdlr_get_end_of_activity_state+0x42>
 800e9f4:	07b0      	lsls	r0, r6, #30
 800e9f6:	bf48      	it	mi
 800e9f8:	46f4      	movmi	ip, lr
 800e9fa:	2a00      	cmp	r2, #0
 800e9fc:	bf08      	it	eq
 800e9fe:	46f4      	moveq	ip, lr
 800ea00:	e01a      	b.n	800ea38 <evnt_schdlr_get_end_of_activity_state+0x78>
 800ea02:	f014 2f80 	tst.w	r4, #2147516416	@ 0x80008000
 800ea06:	d003      	beq.n	800ea10 <evnt_schdlr_get_end_of_activity_state+0x50>
 800ea08:	0730      	lsls	r0, r6, #28
 800ea0a:	f04f 0003 	mov.w	r0, #3
 800ea0e:	e00e      	b.n	800ea2e <evnt_schdlr_get_end_of_activity_state+0x6e>
 800ea10:	f080 0380 	eor.w	r3, r0, #128	@ 0x80
 800ea14:	430b      	orrs	r3, r1
 800ea16:	d007      	beq.n	800ea28 <evnt_schdlr_get_end_of_activity_state+0x68>
 800ea18:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 800ea1c:	4308      	orrs	r0, r1
 800ea1e:	d10e      	bne.n	800ea3e <evnt_schdlr_get_end_of_activity_state+0x7e>
 800ea20:	0770      	lsls	r0, r6, #29
 800ea22:	f04f 0002 	mov.w	r0, #2
 800ea26:	e002      	b.n	800ea2e <evnt_schdlr_get_end_of_activity_state+0x6e>
 800ea28:	06b0      	lsls	r0, r6, #26
 800ea2a:	f04f 0005 	mov.w	r0, #5
 800ea2e:	bf48      	it	mi
 800ea30:	4684      	movmi	ip, r0
 800ea32:	2a00      	cmp	r2, #0
 800ea34:	bf08      	it	eq
 800ea36:	4684      	moveq	ip, r0
 800ea38:	fa1f f08c 	uxth.w	r0, ip
 800ea3c:	bd70      	pop	{r4, r5, r6, pc}
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	bf18      	it	ne
 800ea42:	f04f 32ff 	movne.w	r2, #4294967295
 800ea46:	4694      	mov	ip, r2
 800ea48:	e7f6      	b.n	800ea38 <evnt_schdlr_get_end_of_activity_state+0x78>

0800ea4a <evnt_schdlr_call_end_of_activity_callback>:
 800ea4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea4e:	f646 4834 	movw	r8, #27700	@ 0x6c34
 800ea52:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800ea56:	f8d8 2000 	ldr.w	r2, [r8]
 800ea5a:	b34a      	cbz	r2, 800eab0 <evnt_schdlr_call_end_of_activity_callback+0x66>
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	f646 413c 	movw	r1, #27708	@ 0x6c3c
 800ea62:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800ea66:	4605      	mov	r5, r0
 800ea68:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 800ea6a:	b110      	cbz	r0, 800ea72 <evnt_schdlr_call_end_of_activity_callback+0x28>
 800ea6c:	e9d0 7624 	ldrd	r7, r6, [r0, #144]	@ 0x90
 800ea70:	e008      	b.n	800ea84 <evnt_schdlr_call_end_of_activity_callback+0x3a>
 800ea72:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800ea74:	b118      	cbz	r0, 800ea7e <evnt_schdlr_call_end_of_activity_callback+0x34>
 800ea76:	6880      	ldr	r0, [r0, #8]
 800ea78:	4780      	blx	r0
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d1f6      	bne.n	800ea6c <evnt_schdlr_call_end_of_activity_callback+0x22>
 800ea7e:	2600      	movs	r6, #0
 800ea80:	f04f 37ff 	mov.w	r7, #4294967295
 800ea84:	4628      	mov	r0, r5
 800ea86:	4621      	mov	r1, r4
 800ea88:	2201      	movs	r2, #1
 800ea8a:	f7ff ff99 	bl	800e9c0 <evnt_schdlr_get_end_of_activity_state>
 800ea8e:	4604      	mov	r4, r0
 800ea90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800ea94:	4284      	cmp	r4, r0
 800ea96:	d00b      	beq.n	800eab0 <evnt_schdlr_call_end_of_activity_callback+0x66>
 800ea98:	4638      	mov	r0, r7
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f7ff ff8f 	bl	800e9c0 <evnt_schdlr_get_end_of_activity_state>
 800eaa2:	f8d8 2000 	ldr.w	r2, [r8]
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaae:	4710      	bx	r2
 800eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eab4 <evnt_schdlr_prdc_clbr_exec>:
 800eab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eab6:	b081      	sub	sp, #4
 800eab8:	f646 473c 	movw	r7, #27708	@ 0x6c3c
 800eabc:	4604      	mov	r4, r0
 800eabe:	2000      	movs	r0, #0
 800eac0:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 800eac4:	9000      	str	r0, [sp, #0]
 800eac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eac8:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 800eaca:	f104 0548 	add.w	r5, r4, #72	@ 0x48
 800eace:	b108      	cbz	r0, 800ead4 <evnt_schdlr_prdc_clbr_exec+0x20>
 800ead0:	f00f faf0 	bl	801e0b4 <os_timer_stop>
 800ead4:	2032      	movs	r0, #50	@ 0x32
 800ead6:	f00c ff69 	bl	801b9ac <bsp_debug_gpio_set>
 800eada:	2000      	movs	r0, #0
 800eadc:	f011 fc65 	bl	80203aa <llhwc_cmn_evnt_notify>
 800eae0:	2002      	movs	r0, #2
 800eae2:	f00f fee1 	bl	801e8a8 <llhwc_pwr_switch>
 800eae6:	4668      	mov	r0, sp
 800eae8:	f00f fcef 	bl	801e4ca <llhwc_slptmr_get>
 800eaec:	7829      	ldrb	r1, [r5, #0]
 800eaee:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 800eaf2:	2901      	cmp	r1, #1
 800eaf4:	f04f 017d 	mov.w	r1, #125	@ 0x7d
 800eaf8:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800eafc:	9800      	ldr	r0, [sp, #0]
 800eafe:	bf08      	it	eq
 800eb00:	6378      	streq	r0, [r7, #52]	@ 0x34
 800eb02:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 800eb06:	fba1 1202 	umull	r1, r2, r1, r2
 800eb0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb0c:	eb00 01d2 	add.w	r1, r0, r2, lsr #3
 800eb10:	4628      	mov	r0, r5
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	bf08      	it	eq
 800eb16:	f04f 31ff 	moveq.w	r1, #4294967295
 800eb1a:	9100      	str	r1, [sp, #0]
 800eb1c:	f006 fda6 	bl	801566c <llhwc_prdc_clbr_exec>
 800eb20:	b001      	add	sp, #4
 800eb22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb24 <gnrc_evnt_durn_update>:
 800eb24:	b570      	push	{r4, r5, r6, lr}
 800eb26:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800eb2a:	6f81      	ldr	r1, [r0, #120]	@ 0x78
 800eb2c:	f240 1ebc 	movw	lr, #444	@ 0x1bc
 800eb30:	f646 4c78 	movw	ip, #27768	@ 0x6c78
 800eb34:	1a9a      	subs	r2, r3, r2
 800eb36:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 800eb3a:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800eb3e:	b191      	cbz	r1, 800eb66 <gnrc_evnt_durn_update+0x42>
 800eb40:	e9d1 3424 	ldrd	r3, r4, [r1, #144]	@ 0x90
 800eb44:	6d09      	ldr	r1, [r1, #80]	@ 0x50
 800eb46:	f084 0408 	eor.w	r4, r4, #8
 800eb4a:	4323      	orrs	r3, r4
 800eb4c:	4673      	mov	r3, lr
 800eb4e:	bf08      	it	eq
 800eb50:	4663      	moveq	r3, ip
 800eb52:	681c      	ldr	r4, [r3, #0]
 800eb54:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 800eb56:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800eb58:	1b0c      	subs	r4, r1, r4
 800eb5a:	1959      	adds	r1, r3, r5
 800eb5c:	188d      	adds	r5, r1, r2
 800eb5e:	42ac      	cmp	r4, r5
 800eb60:	d904      	bls.n	800eb6c <gnrc_evnt_durn_update+0x48>
 800eb62:	4413      	add	r3, r2
 800eb64:	e006      	b.n	800eb74 <gnrc_evnt_durn_update+0x50>
 800eb66:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 800eb68:	188b      	adds	r3, r1, r2
 800eb6a:	e003      	b.n	800eb74 <gnrc_evnt_durn_update+0x50>
 800eb6c:	428c      	cmp	r4, r1
 800eb6e:	d902      	bls.n	800eb76 <gnrc_evnt_durn_update+0x52>
 800eb70:	191a      	adds	r2, r3, r4
 800eb72:	1a53      	subs	r3, r2, r1
 800eb74:	6603      	str	r3, [r0, #96]	@ 0x60
 800eb76:	69c2      	ldr	r2, [r0, #28]
 800eb78:	b162      	cbz	r2, 800eb94 <gnrc_evnt_durn_update+0x70>
 800eb7a:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 800eb7c:	f8de 5000 	ldr.w	r5, [lr]
 800eb80:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800eb84:	1999      	adds	r1, r3, r6
 800eb86:	1963      	adds	r3, r4, r5
 800eb88:	1ac9      	subs	r1, r1, r3
 800eb8a:	4291      	cmp	r1, r2
 800eb8c:	bf82      	ittt	hi
 800eb8e:	1b91      	subhi	r1, r2, r6
 800eb90:	4419      	addhi	r1, r3
 800eb92:	6601      	strhi	r1, [r0, #96]	@ 0x60
 800eb94:	bd70      	pop	{r4, r5, r6, pc}

0800eb96 <evnt_schdlr_alloc_evnt>:
 800eb96:	b510      	push	{r4, lr}
 800eb98:	f248 3038 	movw	r0, #33592	@ 0x8338
 800eb9c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800eba0:	f00e ff8a 	bl	801dab8 <os_mem_pool_alloc>
 800eba4:	4604      	mov	r4, r0
 800eba6:	b120      	cbz	r0, 800ebb2 <evnt_schdlr_alloc_evnt+0x1c>
 800eba8:	4620      	mov	r0, r4
 800ebaa:	2100      	movs	r1, #0
 800ebac:	22a0      	movs	r2, #160	@ 0xa0
 800ebae:	f011 fe99 	bl	80208e4 <ble_memset>
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	bd10      	pop	{r4, pc}
	...

0800ebb8 <evnt_schdlr_free_evnt>:
 800ebb8:	b570      	push	{r4, r5, r6, lr}
 800ebba:	b390      	cbz	r0, 800ec22 <evnt_schdlr_free_evnt+0x6a>
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
 800ebc2:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 800ebc6:	d026      	beq.n	800ec16 <evnt_schdlr_free_evnt+0x5e>
 800ebc8:	4625      	mov	r5, r4
 800ebca:	f855 0f0c 	ldr.w	r0, [r5, #12]!
 800ebce:	b168      	cbz	r0, 800ebec <evnt_schdlr_free_evnt+0x34>
 800ebd0:	f240 16c0 	movw	r6, #448	@ 0x1c0
 800ebd4:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800ebd8:	4628      	mov	r0, r5
 800ebda:	f000 f828 	bl	800ec2e <packet_dequeue>
 800ebde:	42b0      	cmp	r0, r6
 800ebe0:	bf18      	it	ne
 800ebe2:	f00b fe85 	blne	801a8f0 <free_buff_hdr>
 800ebe6:	6828      	ldr	r0, [r5, #0]
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d1f5      	bne.n	800ebd8 <evnt_schdlr_free_evnt+0x20>
 800ebec:	4625      	mov	r5, r4
 800ebee:	f855 0f7c 	ldr.w	r0, [r5, #124]!
 800ebf2:	b168      	cbz	r0, 800ec10 <evnt_schdlr_free_evnt+0x58>
 800ebf4:	f240 16c0 	movw	r6, #448	@ 0x1c0
 800ebf8:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f000 f816 	bl	800ec2e <packet_dequeue>
 800ec02:	42b0      	cmp	r0, r6
 800ec04:	bf18      	it	ne
 800ec06:	f00b fe73 	blne	801a8f0 <free_buff_hdr>
 800ec0a:	6828      	ldr	r0, [r5, #0]
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d1f5      	bne.n	800ebfc <evnt_schdlr_free_evnt+0x44>
 800ec10:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800ec14:	e001      	b.n	800ec1a <evnt_schdlr_free_evnt+0x62>
 800ec16:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ec1a:	f480 5000 	eor.w	r0, r0, #8192	@ 0x2000
 800ec1e:	4308      	orrs	r0, r1
 800ec20:	d100      	bne.n	800ec24 <evnt_schdlr_free_evnt+0x6c>
 800ec22:	bd70      	pop	{r4, r5, r6, pc}
 800ec24:	4620      	mov	r0, r4
 800ec26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec2a:	f00e bf47 	b.w	801dabc <os_mem_pool_free>

0800ec2e <packet_dequeue>:
 800ec2e:	b570      	push	{r4, r5, r6, lr}
 800ec30:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 800ec34:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800ec38:	6831      	ldr	r1, [r6, #0]
 800ec3a:	4605      	mov	r5, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	f04f 31ff 	mov.w	r1, #4294967295
 800ec42:	f00c fed0 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800ec46:	7a28      	ldrb	r0, [r5, #8]
 800ec48:	682c      	ldr	r4, [r5, #0]
 800ec4a:	b158      	cbz	r0, 800ec64 <packet_dequeue+0x36>
 800ec4c:	b10c      	cbz	r4, 800ec52 <packet_dequeue+0x24>
 800ec4e:	2000      	movs	r0, #0
 800ec50:	7228      	strb	r0, [r5, #8]
 800ec52:	f240 14c0 	movw	r4, #448	@ 0x1c0
 800ec56:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800ec5a:	6830      	ldr	r0, [r6, #0]
 800ec5c:	f00c fec9 	bl	801b9f2 <os_rcrsv_mutex_release>
 800ec60:	4620      	mov	r0, r4
 800ec62:	bd70      	pop	{r4, r5, r6, pc}
 800ec64:	b13c      	cbz	r4, 800ec76 <packet_dequeue+0x48>
 800ec66:	6868      	ldr	r0, [r5, #4]
 800ec68:	4284      	cmp	r4, r0
 800ec6a:	d00a      	beq.n	800ec82 <packet_dequeue+0x54>
 800ec6c:	6860      	ldr	r0, [r4, #4]
 800ec6e:	6028      	str	r0, [r5, #0]
 800ec70:	2000      	movs	r0, #0
 800ec72:	6060      	str	r0, [r4, #4]
 800ec74:	e7f1      	b.n	800ec5a <packet_dequeue+0x2c>
 800ec76:	2000      	movs	r0, #0
 800ec78:	2101      	movs	r1, #1
 800ec7a:	2400      	movs	r4, #0
 800ec7c:	f00c fe4f 	bl	801b91e <bsp_assert>
 800ec80:	e7eb      	b.n	800ec5a <packet_dequeue+0x2c>
 800ec82:	2000      	movs	r0, #0
 800ec84:	e9c5 0000 	strd	r0, r0, [r5]
 800ec88:	2001      	movs	r0, #1
 800ec8a:	7228      	strb	r0, [r5, #8]
 800ec8c:	e7e5      	b.n	800ec5a <packet_dequeue+0x2c>

0800ec8e <get_pkt_data>:
 800ec8e:	b570      	push	{r4, r5, r6, lr}
 800ec90:	460e      	mov	r6, r1
 800ec92:	2101      	movs	r1, #1
 800ec94:	4614      	mov	r4, r2
 800ec96:	4605      	mov	r5, r0
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	bf18      	it	ne
 800ec9c:	2001      	movne	r0, #1
 800ec9e:	f00c fe3e 	bl	801b91e <bsp_assert>
 800eca2:	b11e      	cbz	r6, 800ecac <get_pkt_data+0x1e>
 800eca4:	6828      	ldr	r0, [r5, #0]
 800eca6:	8969      	ldrh	r1, [r5, #10]
 800eca8:	4408      	add	r0, r1
 800ecaa:	6030      	str	r0, [r6, #0]
 800ecac:	b10c      	cbz	r4, 800ecb2 <get_pkt_data+0x24>
 800ecae:	89a8      	ldrh	r0, [r5, #12]
 800ecb0:	8020      	strh	r0, [r4, #0]
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	bd70      	pop	{r4, r5, r6, pc}

0800ecb6 <get_sca_ppm>:
 800ecb6:	3801      	subs	r0, #1
 800ecb8:	b2c1      	uxtb	r1, r0
 800ecba:	2906      	cmp	r1, #6
 800ecbc:	bf84      	itt	hi
 800ecbe:	f44f 70fa 	movhi.w	r0, #500	@ 0x1f4
 800ecc2:	4770      	bxhi	lr
 800ecc4:	b240      	sxtb	r0, r0
 800ecc6:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 800ecca:	f6c0 0102 	movt	r1, #2050	@ 0x802
 800ecce:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 800ecd2:	4770      	bx	lr

0800ecd4 <evnt_schdlr_calc_wndw_widening>:
 800ecd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd6:	b081      	sub	sp, #4
 800ecd8:	460c      	mov	r4, r1
 800ecda:	9e06      	ldr	r6, [sp, #24]
 800ecdc:	4605      	mov	r5, r0
 800ecde:	f24a 1720 	movw	r7, #41248	@ 0xa120
 800ece2:	4618      	mov	r0, r3
 800ece4:	4611      	mov	r1, r2
 800ece6:	f2c0 0707 	movt	r7, #7
 800ecea:	f00e fb76 	bl	801d3da <ble_time_ordered_diff_us>
 800ecee:	f640 1101 	movw	r1, #2305	@ 0x901
 800ecf2:	f2c0 013d 	movt	r1, #61	@ 0x3d
 800ecf6:	4288      	cmp	r0, r1
 800ecf8:	eb04 0105 	add.w	r1, r4, r5
 800ecfc:	d30a      	bcc.n	800ed14 <evnt_schdlr_calc_wndw_widening+0x40>
 800ecfe:	f64d 6283 	movw	r2, #56963	@ 0xde83
 800ed02:	4438      	add	r0, r7
 800ed04:	f2c4 321b 	movt	r2, #17179	@ 0x431b
 800ed08:	fba0 0202 	umull	r0, r2, r0, r2
 800ed0c:	0c90      	lsrs	r0, r2, #18
 800ed0e:	fb00 f001 	mul.w	r0, r0, r1
 800ed12:	e008      	b.n	800ed26 <evnt_schdlr_calc_wndw_widening+0x52>
 800ed14:	fb00 7001 	mla	r0, r0, r1, r7
 800ed18:	f64d 6183 	movw	r1, #56963	@ 0xde83
 800ed1c:	f2c4 311b 	movt	r1, #17179	@ 0x431b
 800ed20:	fba0 0101 	umull	r0, r1, r0, r1
 800ed24:	0c88      	lsrs	r0, r1, #18
 800ed26:	eb00 1106 	add.w	r1, r0, r6, lsl #4
 800ed2a:	f247 3088 	movw	r0, #29576	@ 0x7388
 800ed2e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ed32:	7d02      	ldrb	r2, [r0, #20]
 800ed34:	f101 0012 	add.w	r0, r1, #18
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	bf08      	it	eq
 800ed3c:	f101 0010 	addeq.w	r0, r1, #16
 800ed40:	b001      	add	sp, #4
 800ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed44 <evnt_schdlr_set_slave_conn_timers>:
 800ed44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed48:	b081      	sub	sp, #4
 800ed4a:	2101      	movs	r1, #1
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	bf18      	it	ne
 800ed52:	2001      	movne	r0, #1
 800ed54:	f00c fde3 	bl	801b91e <bsp_assert>
 800ed58:	6f75      	ldr	r5, [r6, #116]	@ 0x74
 800ed5a:	4634      	mov	r4, r6
 800ed5c:	f895 0128 	ldrb.w	r0, [r5, #296]	@ 0x128
 800ed60:	4637      	mov	r7, r6
 800ed62:	1e41      	subs	r1, r0, #1
 800ed64:	b2c8      	uxtb	r0, r1
 800ed66:	2806      	cmp	r0, #6
 800ed68:	f24e 00fe 	movw	r0, #57598	@ 0xe0fe
 800ed6c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 800ed70:	bf9a      	itte	ls
 800ed72:	b249      	sxtbls	r1, r1
 800ed74:	f830 8011 	ldrhls.w	r8, [r0, r1, lsl #1]
 800ed78:	f44f 78fa 	movhi.w	r8, #500	@ 0x1f4
 800ed7c:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ed80:	3901      	subs	r1, #1
 800ed82:	b2ca      	uxtb	r2, r1
 800ed84:	2a06      	cmp	r2, #6
 800ed86:	bf9a      	itte	ls
 800ed88:	b249      	sxtbls	r1, r1
 800ed8a:	f830 9011 	ldrhls.w	r9, [r0, r1, lsl #1]
 800ed8e:	f44f 79fa 	movhi.w	r9, #500	@ 0x1f4
 800ed92:	8ae8      	ldrh	r0, [r5, #22]
 800ed94:	f240 2171 	movw	r1, #625	@ 0x271
 800ed98:	fb00 f001 	mul.w	r0, r0, r1
 800ed9c:	e9d5 210e 	ldrd	r2, r1, [r5, #56]	@ 0x38
 800eda0:	f1a0 0a96 	sub.w	sl, r0, #150	@ 0x96
 800eda4:	f844 2f58 	str.w	r2, [r4, #88]!
 800eda8:	f847 2f50 	str.w	r2, [r7, #80]!
 800edac:	65f1      	str	r1, [r6, #92]	@ 0x5c
 800edae:	6571      	str	r1, [r6, #84]	@ 0x54
 800edb0:	8a29      	ldrh	r1, [r5, #16]
 800edb2:	4638      	mov	r0, r7
 800edb4:	2203      	movs	r2, #3
 800edb6:	f00e fb55 	bl	801d464 <ble_time_add_uint>
 800edba:	f895 012e 	ldrb.w	r0, [r5, #302]	@ 0x12e
 800edbe:	f240 31ee 	movw	r1, #1006	@ 0x3ee
 800edc2:	2802      	cmp	r0, #2
 800edc4:	bf08      	it	eq
 800edc6:	21b4      	moveq	r1, #180	@ 0xb4
 800edc8:	2801      	cmp	r0, #1
 800edca:	bf08      	it	eq
 800edcc:	f44f 71b0 	moveq.w	r1, #352	@ 0x160
 800edd0:	4620      	mov	r0, r4
 800edd2:	2201      	movs	r2, #1
 800edd4:	f04f 0b01 	mov.w	fp, #1
 800edd8:	f00e fbe6 	bl	801d5a8 <ble_time_rmv_uint>
 800eddc:	4640      	mov	r0, r8
 800edde:	4649      	mov	r1, r9
 800ede0:	4622      	mov	r2, r4
 800ede2:	463b      	mov	r3, r7
 800ede4:	f8cd b000 	str.w	fp, [sp]
 800ede8:	f7ff ff74 	bl	800ecd4 <evnt_schdlr_calc_wndw_widening>
 800edec:	4550      	cmp	r0, sl
 800edee:	6030      	str	r0, [r6, #0]
 800edf0:	d904      	bls.n	800edfc <evnt_schdlr_set_slave_conn_timers+0xb8>
 800edf2:	2003      	movs	r0, #3
 800edf4:	f886 0098 	strb.w	r0, [r6, #152]	@ 0x98
 800edf8:	201f      	movs	r0, #31
 800edfa:	e030      	b.n	800ee5e <evnt_schdlr_set_slave_conn_timers+0x11a>
 800edfc:	4604      	mov	r4, r0
 800edfe:	f895 012f 	ldrb.w	r0, [r5, #303]	@ 0x12f
 800ee02:	2101      	movs	r1, #1
 800ee04:	f010 fbc8 	bl	801f598 <llhwc_get_hw_setup_time>
 800ee08:	1901      	adds	r1, r0, r4
 800ee0a:	4638      	mov	r0, r7
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f00e fbcb 	bl	801d5a8 <ble_time_rmv_uint>
 800ee12:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	@ 0xac
 800ee16:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	@ 0xa8
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f000 fa65 	bl	800f2ea <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 800ee20:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800ee24:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ee28:	f240 12bc 	movw	r2, #444	@ 0x1bc
 800ee2c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800ee30:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 800ee34:	f895 1020 	ldrb.w	r1, [r5, #32]
 800ee38:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 800ee3c:	6812      	ldr	r2, [r2, #0]
 800ee3e:	fba0 0303 	umull	r0, r3, r0, r3
 800ee42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ee46:	f646 4078 	movw	r0, #27768	@ 0x6c78
 800ee4a:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 800ee4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ee52:	6880      	ldr	r0, [r0, #8]
 800ee54:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800ee58:	4408      	add	r0, r1
 800ee5a:	6630      	str	r0, [r6, #96]	@ 0x60
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	b001      	add	sp, #4
 800ee60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee64 <evnt_schdlr_get_pckt_durn_on_air>:
 800ee64:	2902      	cmp	r1, #2
 800ee66:	f100 0002 	add.w	r0, r0, #2
 800ee6a:	d006      	beq.n	800ee7a <evnt_schdlr_get_pckt_durn_on_air+0x16>
 800ee6c:	2901      	cmp	r1, #1
 800ee6e:	d109      	bne.n	800ee84 <evnt_schdlr_get_pckt_durn_on_air+0x20>
 800ee70:	b280      	uxth	r0, r0
 800ee72:	2140      	movs	r1, #64	@ 0x40
 800ee74:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ee78:	4770      	bx	lr
 800ee7a:	b280      	uxth	r0, r0
 800ee7c:	2124      	movs	r1, #36	@ 0x24
 800ee7e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800ee82:	4770      	bx	lr
 800ee84:	2a02      	cmp	r2, #2
 800ee86:	d009      	beq.n	800ee9c <evnt_schdlr_get_pckt_durn_on_air+0x38>
 800ee88:	2a01      	cmp	r2, #1
 800ee8a:	bf1c      	itt	ne
 800ee8c:	2000      	movne	r0, #0
 800ee8e:	4770      	bxne	lr
 800ee90:	b280      	uxth	r0, r0
 800ee92:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 800ee96:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800ee9a:	4770      	bx	lr
 800ee9c:	b280      	uxth	r0, r0
 800ee9e:	f44f 7114 	mov.w	r1, #592	@ 0x250
 800eea2:	eb01 1080 	add.w	r0, r1, r0, lsl #6
 800eea6:	4770      	bx	lr

0800eea8 <evnt_schdlr_calc_conn_duration>:
 800eea8:	b570      	push	{r4, r5, r6, lr}
 800eeaa:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	@ 0xac
 800eeae:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	@ 0xa8
 800eeb2:	8b86      	ldrh	r6, [r0, #28]
 800eeb4:	460d      	mov	r5, r1
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4604      	mov	r4, r0
 800eeba:	f000 fa16 	bl	800f2ea <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 800eebe:	2d01      	cmp	r5, #1
 800eec0:	f100 0196 	add.w	r1, r0, #150	@ 0x96
 800eec4:	d110      	bne.n	800eee8 <evnt_schdlr_calc_conn_duration+0x40>
 800eec6:	f894 0020 	ldrb.w	r0, [r4, #32]
 800eeca:	227d      	movs	r2, #125	@ 0x7d
 800eecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800eed0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800eed4:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 800eed8:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 800eedc:	00c0      	lsls	r0, r0, #3
 800eede:	fba1 1202 	umull	r1, r2, r1, r2
 800eee2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800eee6:	bd70      	pop	{r4, r5, r6, pc}
 800eee8:	f240 2271 	movw	r2, #625	@ 0x271
 800eeec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800eef0:	fb06 f202 	mul.w	r2, r6, r2
 800eef4:	f200 709e 	addw	r0, r0, #1950	@ 0x79e
 800eef8:	4282      	cmp	r2, r0
 800eefa:	bf38      	it	cc
 800eefc:	4610      	movcc	r0, r2
 800eefe:	428a      	cmp	r2, r1
 800ef00:	8ae2      	ldrh	r2, [r4, #22]
 800ef02:	bf38      	it	cc
 800ef04:	4608      	movcc	r0, r1
 800ef06:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800ef0a:	fb02 f303 	mul.w	r3, r2, r3
 800ef0e:	4298      	cmp	r0, r3
 800ef10:	d90f      	bls.n	800ef32 <evnt_schdlr_calc_conn_duration+0x8a>
 800ef12:	f240 10bc 	movw	r0, #444	@ 0x1bc
 800ef16:	f646 4178 	movw	r1, #27768	@ 0x6c78
 800ef1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ef1e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800ef22:	6800      	ldr	r0, [r0, #0]
 800ef24:	6889      	ldr	r1, [r1, #8]
 800ef26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ef2a:	4408      	add	r0, r1
 800ef2c:	ebc0 00c2 	rsb	r0, r0, r2, lsl #3
 800ef30:	bd70      	pop	{r4, r5, r6, pc}
 800ef32:	217d      	movs	r1, #125	@ 0x7d
 800ef34:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800ef38:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 800ef3c:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 800ef40:	fba0 0101 	umull	r0, r1, r0, r1
 800ef44:	08c8      	lsrs	r0, r1, #3
 800ef46:	bd70      	pop	{r4, r5, r6, pc}

0800ef48 <evnt_schdlr_cal_conn_eff_rx_time>:
 800ef48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef4c:	b081      	sub	sp, #4
 800ef4e:	2101      	movs	r1, #1
 800ef50:	4604      	mov	r4, r0
 800ef52:	2800      	cmp	r0, #0
 800ef54:	bf18      	it	ne
 800ef56:	2001      	movne	r0, #1
 800ef58:	f00c fce1 	bl	801b91e <bsp_assert>
 800ef5c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ef5e:	f44f 7374 	mov.w	r3, #976	@ 0x3d0
 800ef62:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	@ 0xa8
 800ef66:	f8b0 10b6 	ldrh.w	r1, [r0, #182]	@ 0xb6
 800ef6a:	eb03 1582 	add.w	r5, r3, r2, lsl #6
 800ef6e:	f240 18bc 	movw	r8, #444	@ 0x1bc
 800ef72:	428d      	cmp	r5, r1
 800ef74:	bf28      	it	cs
 800ef76:	460d      	movcs	r5, r1
 800ef78:	f8b0 70ac 	ldrh.w	r7, [r0, #172]	@ 0xac
 800ef7c:	f646 4978 	movw	r9, #27768	@ 0x6c78
 800ef80:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 800ef84:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 800ef88:	eb03 1387 	add.w	r3, r3, r7, lsl #6
 800ef8c:	f8d8 7000 	ldr.w	r7, [r8]
 800ef90:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800ef94:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	@ 0xb2
 800ef98:	4437      	add	r7, r6
 800ef9a:	ebc7 1647 	rsb	r6, r7, r7, lsl #5
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	bf38      	it	cc
 800efa2:	461a      	movcc	r2, r3
 800efa4:	eb06 0397 	add.w	r3, r6, r7, lsr #2
 800efa8:	f8b0 608e 	ldrh.w	r6, [r0, #142]	@ 0x8e
 800efac:	1957      	adds	r7, r2, r5
 800efae:	f240 45e2 	movw	r5, #1250	@ 0x4e2
 800efb2:	441f      	add	r7, r3
 800efb4:	fb06 f505 	mul.w	r5, r6, r5
 800efb8:	3796      	adds	r7, #150	@ 0x96
 800efba:	42bd      	cmp	r5, r7
 800efbc:	d218      	bcs.n	800eff0 <evnt_schdlr_cal_conn_eff_rx_time+0xa8>
 800efbe:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 800efc2:	d915      	bls.n	800eff0 <evnt_schdlr_cal_conn_eff_rx_time+0xa8>
 800efc4:	18d1      	adds	r1, r2, r3
 800efc6:	f890 2127 	ldrb.w	r2, [r0, #295]	@ 0x127
 800efca:	1a69      	subs	r1, r5, r1
 800efcc:	3996      	subs	r1, #150	@ 0x96
 800efce:	f8a0 10b6 	strh.w	r1, [r0, #182]	@ 0xb6
 800efd2:	f8a0 10b4 	strh.w	r1, [r0, #180]	@ 0xb4
 800efd6:	f8a0 10aa 	strh.w	r1, [r0, #170]	@ 0xaa
 800efda:	b94a      	cbnz	r2, 800eff0 <evnt_schdlr_cal_conn_eff_rx_time+0xa8>
 800efdc:	2100      	movs	r1, #0
 800efde:	f7ff ff63 	bl	800eea8 <evnt_schdlr_calc_conn_duration>
 800efe2:	f8d8 1000 	ldr.w	r1, [r8]
 800efe6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800efea:	4408      	add	r0, r1
 800efec:	4410      	add	r0, r2
 800efee:	6620      	str	r0, [r4, #96]	@ 0x60
 800eff0:	b001      	add	sp, #4
 800eff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800eff6 <evnt_schdlr_update_slave_conn_timers>:
 800eff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800effa:	b081      	sub	sp, #4
 800effc:	460f      	mov	r7, r1
 800effe:	2101      	movs	r1, #1
 800f000:	4604      	mov	r4, r0
 800f002:	2800      	cmp	r0, #0
 800f004:	bf18      	it	ne
 800f006:	2001      	movne	r0, #1
 800f008:	f00c fc89 	bl	801b91e <bsp_assert>
 800f00c:	6826      	ldr	r6, [r4, #0]
 800f00e:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800f010:	b15e      	cbz	r6, 800f02a <evnt_schdlr_update_slave_conn_timers+0x34>
 800f012:	f895 012f 	ldrb.w	r0, [r5, #303]	@ 0x12f
 800f016:	2101      	movs	r1, #1
 800f018:	f104 0850 	add.w	r8, r4, #80	@ 0x50
 800f01c:	f010 fabc 	bl	801f598 <llhwc_get_hw_setup_time>
 800f020:	1981      	adds	r1, r0, r6
 800f022:	4640      	mov	r0, r8
 800f024:	2201      	movs	r2, #1
 800f026:	f00e fa1d 	bl	801d464 <ble_time_add_uint>
 800f02a:	f104 0b50 	add.w	fp, r4, #80	@ 0x50
 800f02e:	f104 0858 	add.w	r8, r4, #88	@ 0x58
 800f032:	4658      	mov	r0, fp
 800f034:	4641      	mov	r1, r8
 800f036:	f00e f9d0 	bl	801d3da <ble_time_ordered_diff_us>
 800f03a:	6821      	ldr	r1, [r4, #0]
 800f03c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f040:	eb00 0951 	add.w	r9, r0, r1, lsr #1
 800f044:	8ae8      	ldrh	r0, [r5, #22]
 800f046:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 800f04a:	fb00 fa01 	mul.w	sl, r0, r1
 800f04e:	f8b5 10dc 	ldrh.w	r1, [r5, #220]	@ 0xdc
 800f052:	4291      	cmp	r1, r2
 800f054:	463a      	mov	r2, r7
 800f056:	bf18      	it	ne
 800f058:	440a      	addne	r2, r1
 800f05a:	2f01      	cmp	r7, #1
 800f05c:	bf18      	it	ne
 800f05e:	463a      	movne	r2, r7
 800f060:	45ca      	cmp	sl, r9
 800f062:	bf98      	it	ls
 800f064:	463a      	movls	r2, r7
 800f066:	f8b5 10da 	ldrh.w	r1, [r5, #218]	@ 0xda
 800f06a:	f8b5 3070 	ldrh.w	r3, [r5, #112]	@ 0x70
 800f06e:	1857      	adds	r7, r2, r1
 800f070:	429f      	cmp	r7, r3
 800f072:	4617      	mov	r7, r2
 800f074:	bf88      	it	hi
 800f076:	1a5f      	subhi	r7, r3, r1
 800f078:	428b      	cmp	r3, r1
 800f07a:	bf98      	it	ls
 800f07c:	4617      	movls	r7, r2
 800f07e:	19ca      	adds	r2, r1, r7
 800f080:	fb07 f100 	mul.w	r1, r7, r0
 800f084:	f8a5 20da 	strh.w	r2, [r5, #218]	@ 0xda
 800f088:	4658      	mov	r0, fp
 800f08a:	2203      	movs	r2, #3
 800f08c:	f00e f9ea 	bl	801d464 <ble_time_add_uint>
 800f090:	f8b5 0070 	ldrh.w	r0, [r5, #112]	@ 0x70
 800f094:	f8b5 10da 	ldrh.w	r1, [r5, #218]	@ 0xda
 800f098:	4288      	cmp	r0, r1
 800f09a:	bf9c      	itt	ls
 800f09c:	1bc9      	subls	r1, r1, r7
 800f09e:	4281      	cmpls	r1, r0
 800f0a0:	d21f      	bcs.n	800f0e2 <evnt_schdlr_update_slave_conn_timers+0xec>
 800f0a2:	f895 005c 	ldrb.w	r0, [r5, #92]	@ 0x5c
 800f0a6:	2803      	cmp	r0, #3
 800f0a8:	d011      	beq.n	800f0ce <evnt_schdlr_update_slave_conn_timers+0xd8>
 800f0aa:	2802      	cmp	r0, #2
 800f0ac:	d116      	bne.n	800f0dc <evnt_schdlr_update_slave_conn_timers+0xe6>
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f7ff ff4a 	bl	800ef48 <evnt_schdlr_cal_conn_eff_rx_time>
 800f0b4:	f8b5 008e 	ldrh.w	r0, [r5, #142]	@ 0x8e
 800f0b8:	8aea      	ldrh	r2, [r5, #22]
 800f0ba:	f8b5 1088 	ldrh.w	r1, [r5, #136]	@ 0x88
 800f0be:	82e8      	strh	r0, [r5, #22]
 800f0c0:	f8a5 208e 	strh.w	r2, [r5, #142]	@ 0x8e
 800f0c4:	4658      	mov	r0, fp
 800f0c6:	2203      	movs	r2, #3
 800f0c8:	f00e f9cc 	bl	801d464 <ble_time_add_uint>
 800f0cc:	e006      	b.n	800f0dc <evnt_schdlr_update_slave_conn_timers+0xe6>
 800f0ce:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800f0d2:	f105 0176 	add.w	r1, r5, #118	@ 0x76
 800f0d6:	2205      	movs	r2, #5
 800f0d8:	f011 fbb4 	bl	8020844 <ble_memcpy>
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f8a5 0070 	strh.w	r0, [r5, #112]	@ 0x70
 800f0e2:	f895 012c 	ldrb.w	r0, [r5, #300]	@ 0x12c
 800f0e6:	b9d0      	cbnz	r0, 800f11e <evnt_schdlr_update_slave_conn_timers+0x128>
 800f0e8:	f895 6026 	ldrb.w	r6, [r5, #38]	@ 0x26
 800f0ec:	f249 114d 	movw	r1, #37197	@ 0x914d
 800f0f0:	fb07 f006 	mul.w	r0, r7, r6
 800f0f4:	f6cb 21cf 	movt	r1, #47823	@ 0xbacf
 800f0f8:	fba0 1201 	umull	r1, r2, r0, r1
 800f0fc:	1a81      	subs	r1, r0, r2
 800f0fe:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 800f102:	2225      	movs	r2, #37	@ 0x25
 800f104:	0949      	lsrs	r1, r1, #5
 800f106:	fb01 0112 	mls	r1, r1, r2, r0
 800f10a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800f10e:	f885 1026 	strb.w	r1, [r5, #38]	@ 0x26
 800f112:	f105 0128 	add.w	r1, r5, #40	@ 0x28
 800f116:	f004 fc97 	bl	8013a48 <llhwc_get_ch_idx>
 800f11a:	f885 6026 	strb.w	r6, [r5, #38]	@ 0x26
 800f11e:	f895 0128 	ldrb.w	r0, [r5, #296]	@ 0x128
 800f122:	fbb9 f7fa 	udiv	r7, r9, sl
 800f126:	3801      	subs	r0, #1
 800f128:	b2c1      	uxtb	r1, r0
 800f12a:	2906      	cmp	r1, #6
 800f12c:	d807      	bhi.n	800f13e <evnt_schdlr_update_slave_conn_timers+0x148>
 800f12e:	b240      	sxtb	r0, r0
 800f130:	f24e 01fe 	movw	r1, #57598	@ 0xe0fe
 800f134:	f6c0 0102 	movt	r1, #2050	@ 0x802
 800f138:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 800f13c:	e001      	b.n	800f142 <evnt_schdlr_update_slave_conn_timers+0x14c>
 800f13e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800f142:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f146:	3901      	subs	r1, #1
 800f148:	b2ca      	uxtb	r2, r1
 800f14a:	2a06      	cmp	r2, #6
 800f14c:	d807      	bhi.n	800f15e <evnt_schdlr_update_slave_conn_timers+0x168>
 800f14e:	b249      	sxtb	r1, r1
 800f150:	f24e 02fe 	movw	r2, #57598	@ 0xe0fe
 800f154:	f6c0 0202 	movt	r2, #2050	@ 0x802
 800f158:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800f15c:	e001      	b.n	800f162 <evnt_schdlr_update_slave_conn_timers+0x16c>
 800f15e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800f162:	4642      	mov	r2, r8
 800f164:	465b      	mov	r3, fp
 800f166:	9700      	str	r7, [sp, #0]
 800f168:	f7ff fdb4 	bl	800ecd4 <evnt_schdlr_calc_wndw_widening>
 800f16c:	4607      	mov	r7, r0
 800f16e:	f895 012f 	ldrb.w	r0, [r5, #303]	@ 0x12f
 800f172:	2101      	movs	r1, #1
 800f174:	6027      	str	r7, [r4, #0]
 800f176:	f010 fa0f 	bl	801f598 <llhwc_get_hw_setup_time>
 800f17a:	19c1      	adds	r1, r0, r7
 800f17c:	4658      	mov	r0, fp
 800f17e:	2201      	movs	r2, #1
 800f180:	f00e fa12 	bl	801d5a8 <ble_time_rmv_uint>
 800f184:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 800f188:	fab0 f080 	clz	r0, r0
 800f18c:	0941      	lsrs	r1, r0, #5
 800f18e:	4628      	mov	r0, r5
 800f190:	f7ff fe8a 	bl	800eea8 <evnt_schdlr_calc_conn_duration>
 800f194:	f240 11bc 	movw	r1, #444	@ 0x1bc
 800f198:	f646 4278 	movw	r2, #27768	@ 0x6c78
 800f19c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f1a0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f1a4:	6809      	ldr	r1, [r1, #0]
 800f1a6:	6892      	ldr	r2, [r2, #8]
 800f1a8:	4411      	add	r1, r2
 800f1aa:	f894 209e 	ldrb.w	r2, [r4, #158]	@ 0x9e
 800f1ae:	4401      	add	r1, r0
 800f1b0:	2a01      	cmp	r2, #1
 800f1b2:	6621      	str	r1, [r4, #96]	@ 0x60
 800f1b4:	bf04      	itt	eq
 800f1b6:	3007      	addeq	r0, #7
 800f1b8:	6620      	streq	r0, [r4, #96]	@ 0x60
 800f1ba:	2000      	movs	r0, #0
 800f1bc:	b001      	add	sp, #4
 800f1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1c2 <evnt_schdlr_update_master_conn_timers>:
 800f1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c4:	b081      	sub	sp, #4
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	2101      	movs	r1, #1
 800f1ca:	4605      	mov	r5, r0
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	bf18      	it	ne
 800f1d0:	2001      	movne	r0, #1
 800f1d2:	f00c fba4 	bl	801b91e <bsp_assert>
 800f1d6:	6f6f      	ldr	r7, [r5, #116]	@ 0x74
 800f1d8:	f105 0650 	add.w	r6, r5, #80	@ 0x50
 800f1dc:	f8b7 00da 	ldrh.w	r0, [r7, #218]	@ 0xda
 800f1e0:	8af9      	ldrh	r1, [r7, #22]
 800f1e2:	4420      	add	r0, r4
 800f1e4:	fb01 f104 	mul.w	r1, r1, r4
 800f1e8:	f8a7 00da 	strh.w	r0, [r7, #218]	@ 0xda
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	2203      	movs	r2, #3
 800f1f0:	f00e f938 	bl	801d464 <ble_time_add_uint>
 800f1f4:	f8b7 0070 	ldrh.w	r0, [r7, #112]	@ 0x70
 800f1f8:	f8b7 10da 	ldrh.w	r1, [r7, #218]	@ 0xda
 800f1fc:	4288      	cmp	r0, r1
 800f1fe:	bf9c      	itt	ls
 800f200:	1b09      	subls	r1, r1, r4
 800f202:	4281      	cmpls	r1, r0
 800f204:	d251      	bcs.n	800f2aa <evnt_schdlr_update_master_conn_timers+0xe8>
 800f206:	f897 005c 	ldrb.w	r0, [r7, #92]	@ 0x5c
 800f20a:	2803      	cmp	r0, #3
 800f20c:	d043      	beq.n	800f296 <evnt_schdlr_update_master_conn_timers+0xd4>
 800f20e:	2802      	cmp	r0, #2
 800f210:	d148      	bne.n	800f2a4 <evnt_schdlr_update_master_conn_timers+0xe2>
 800f212:	4628      	mov	r0, r5
 800f214:	f7ff fe98 	bl	800ef48 <evnt_schdlr_cal_conn_eff_rx_time>
 800f218:	f8b7 008e 	ldrh.w	r0, [r7, #142]	@ 0x8e
 800f21c:	8af9      	ldrh	r1, [r7, #22]
 800f21e:	82f8      	strh	r0, [r7, #22]
 800f220:	f8a7 108e 	strh.w	r1, [r7, #142]	@ 0x8e
 800f224:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 800f228:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800f22c:	f00e f8f5 	bl	801d41a <ble_time_set>
 800f230:	f897 0090 	ldrb.w	r0, [r7, #144]	@ 0x90
 800f234:	b128      	cbz	r0, 800f242 <evnt_schdlr_update_master_conn_timers+0x80>
 800f236:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 800f23a:	4630      	mov	r0, r6
 800f23c:	2203      	movs	r2, #3
 800f23e:	f00e f911 	bl	801d464 <ble_time_add_uint>
 800f242:	f646 403c 	movw	r0, #27708	@ 0x6c3c
 800f246:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f24a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800f24c:	8af9      	ldrh	r1, [r7, #22]
 800f24e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800f250:	4628      	mov	r0, r5
 800f252:	4790      	blx	r2
 800f254:	f646 6015 	movw	r0, #28181	@ 0x6e15
 800f258:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f25c:	7801      	ldrb	r1, [r0, #0]
 800f25e:	2902      	cmp	r1, #2
 800f260:	d114      	bne.n	800f28c <evnt_schdlr_update_master_conn_timers+0xca>
 800f262:	f895 109e 	ldrb.w	r1, [r5, #158]	@ 0x9e
 800f266:	b989      	cbnz	r1, 800f28c <evnt_schdlr_update_master_conn_timers+0xca>
 800f268:	f240 11bc 	movw	r1, #444	@ 0x1bc
 800f26c:	f646 4278 	movw	r2, #27768	@ 0x6c78
 800f270:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f274:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f278:	6809      	ldr	r1, [r1, #0]
 800f27a:	6892      	ldr	r2, [r2, #8]
 800f27c:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800f27e:	4411      	add	r1, r2
 800f280:	1a59      	subs	r1, r3, r1
 800f282:	3107      	adds	r1, #7
 800f284:	6629      	str	r1, [r5, #96]	@ 0x60
 800f286:	2101      	movs	r1, #1
 800f288:	f885 109e 	strb.w	r1, [r5, #158]	@ 0x9e
 800f28c:	2100      	movs	r1, #0
 800f28e:	7001      	strb	r1, [r0, #0]
 800f290:	f8a5 109c 	strh.w	r1, [r5, #156]	@ 0x9c
 800f294:	e006      	b.n	800f2a4 <evnt_schdlr_update_master_conn_timers+0xe2>
 800f296:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800f29a:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 800f29e:	2205      	movs	r2, #5
 800f2a0:	f011 fad0 	bl	8020844 <ble_memcpy>
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f8a7 0070 	strh.w	r0, [r7, #112]	@ 0x70
 800f2aa:	f897 012c 	ldrb.w	r0, [r7, #300]	@ 0x12c
 800f2ae:	b9d0      	cbnz	r0, 800f2e6 <evnt_schdlr_update_master_conn_timers+0x124>
 800f2b0:	f897 5026 	ldrb.w	r5, [r7, #38]	@ 0x26
 800f2b4:	f249 114d 	movw	r1, #37197	@ 0x914d
 800f2b8:	fb05 f004 	mul.w	r0, r5, r4
 800f2bc:	f6cb 21cf 	movt	r1, #47823	@ 0xbacf
 800f2c0:	fba0 1201 	umull	r1, r2, r0, r1
 800f2c4:	1a81      	subs	r1, r0, r2
 800f2c6:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 800f2ca:	2225      	movs	r2, #37	@ 0x25
 800f2cc:	0949      	lsrs	r1, r1, #5
 800f2ce:	fb01 0112 	mls	r1, r1, r2, r0
 800f2d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f2d6:	f887 1026 	strb.w	r1, [r7, #38]	@ 0x26
 800f2da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f2de:	f004 fbb3 	bl	8013a48 <llhwc_get_ch_idx>
 800f2e2:	f887 5026 	strb.w	r5, [r7, #38]	@ 0x26
 800f2e6:	b001      	add	sp, #4
 800f2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2ea <evnt_utils_calc_conn_tx_rx_durn_per_pkt>:
 800f2ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	f8b0 a0ae 	ldrh.w	sl, [r0, #174]	@ 0xae
 800f2f4:	f8b0 80aa 	ldrh.w	r8, [r0, #170]	@ 0xaa
 800f2f8:	f890 012e 	ldrb.w	r0, [r0, #302]	@ 0x12e
 800f2fc:	f895 6122 	ldrb.w	r6, [r5, #290]	@ 0x122
 800f300:	4614      	mov	r4, r2
 800f302:	2804      	cmp	r0, #4
 800f304:	f64f 79c0 	movw	r9, #65472	@ 0xffc0
 800f308:	d017      	beq.n	800f33a <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x50>
 800f30a:	2802      	cmp	r0, #2
 800f30c:	d00b      	beq.n	800f326 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x3c>
 800f30e:	2801      	cmp	r0, #1
 800f310:	d11f      	bne.n	800f352 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x68>
 800f312:	00c8      	lsls	r0, r1, #3
 800f314:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 800f318:	2e00      	cmp	r6, #0
 800f31a:	bf08      	it	eq
 800f31c:	f101 0020 	addeq.w	r0, r1, #32
 800f320:	f100 0770 	add.w	r7, r0, #112	@ 0x70
 800f324:	e024      	b.n	800f370 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x86>
 800f326:	0088      	lsls	r0, r1, #2
 800f328:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800f32c:	2e00      	cmp	r6, #0
 800f32e:	bf08      	it	eq
 800f330:	f101 0030 	addeq.w	r0, r1, #48	@ 0x30
 800f334:	f100 073c 	add.w	r7, r0, #60	@ 0x3c
 800f338:	e01a      	b.n	800f370 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x86>
 800f33a:	f8b5 0130 	ldrh.w	r0, [r5, #304]	@ 0x130
 800f33e:	2801      	cmp	r0, #1
 800f340:	d10d      	bne.n	800f35e <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x74>
 800f342:	0108      	lsls	r0, r1, #4
 800f344:	2e00      	cmp	r6, #0
 800f346:	bf08      	it	eq
 800f348:	eb09 1001 	addeq.w	r0, r9, r1, lsl #4
 800f34c:	f200 270e 	addw	r7, r0, #526	@ 0x20e
 800f350:	e00e      	b.n	800f370 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x86>
 800f352:	2000      	movs	r0, #0
 800f354:	2101      	movs	r1, #1
 800f356:	2700      	movs	r7, #0
 800f358:	f00c fae1 	bl	801b91e <bsp_assert>
 800f35c:	e008      	b.n	800f370 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0x86>
 800f35e:	0188      	lsls	r0, r1, #6
 800f360:	f06f 02ff 	mvn.w	r2, #255	@ 0xff
 800f364:	2e00      	cmp	r6, #0
 800f366:	bf08      	it	eq
 800f368:	eb02 1081 	addeq.w	r0, r2, r1, lsl #6
 800f36c:	f500 7774 	add.w	r7, r0, #976	@ 0x3d0
 800f370:	f895 012f 	ldrb.w	r0, [r5, #303]	@ 0x12f
 800f374:	2804      	cmp	r0, #4
 800f376:	d017      	beq.n	800f3a8 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xbe>
 800f378:	2802      	cmp	r0, #2
 800f37a:	d00b      	beq.n	800f394 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xaa>
 800f37c:	2801      	cmp	r0, #1
 800f37e:	d11d      	bne.n	800f3bc <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xd2>
 800f380:	00e0      	lsls	r0, r4, #3
 800f382:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
 800f386:	2e00      	cmp	r6, #0
 800f388:	bf08      	it	eq
 800f38a:	f101 0020 	addeq.w	r0, r1, #32
 800f38e:	f100 0470 	add.w	r4, r0, #112	@ 0x70
 800f392:	e018      	b.n	800f3c6 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xdc>
 800f394:	00a0      	lsls	r0, r4, #2
 800f396:	eb09 0184 	add.w	r1, r9, r4, lsl #2
 800f39a:	2e00      	cmp	r6, #0
 800f39c:	bf08      	it	eq
 800f39e:	f101 0030 	addeq.w	r0, r1, #48	@ 0x30
 800f3a2:	f100 043c 	add.w	r4, r0, #60	@ 0x3c
 800f3a6:	e00e      	b.n	800f3c6 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xdc>
 800f3a8:	01a0      	lsls	r0, r4, #6
 800f3aa:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 800f3ae:	2e00      	cmp	r6, #0
 800f3b0:	bf08      	it	eq
 800f3b2:	eb01 1084 	addeq.w	r0, r1, r4, lsl #6
 800f3b6:	f500 7474 	add.w	r4, r0, #976	@ 0x3d0
 800f3ba:	e004      	b.n	800f3c6 <evnt_utils_calc_conn_tx_rx_durn_per_pkt+0xdc>
 800f3bc:	2000      	movs	r0, #0
 800f3be:	2101      	movs	r1, #1
 800f3c0:	2400      	movs	r4, #0
 800f3c2:	f00c faac 	bl	801b91e <bsp_assert>
 800f3c6:	b2b8      	uxth	r0, r7
 800f3c8:	b2a1      	uxth	r1, r4
 800f3ca:	4582      	cmp	sl, r0
 800f3cc:	bf38      	it	cc
 800f3ce:	4650      	movcc	r0, sl
 800f3d0:	4588      	cmp	r8, r1
 800f3d2:	bf38      	it	cc
 800f3d4:	4641      	movcc	r1, r8
 800f3d6:	4408      	add	r0, r1
 800f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f3dc <evnt_count_adv_channels>:
 800f3dc:	f24e 01f6 	movw	r1, #57590	@ 0xe0f6
 800f3e0:	f000 000f 	and.w	r0, r0, #15
 800f3e4:	f6c0 0102 	movt	r1, #2050	@ 0x802
 800f3e8:	5c08      	ldrb	r0, [r1, r0]
 800f3ea:	4770      	bx	lr

0800f3ec <evnt_schdlr_calc_adv_max_dur>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	2805      	cmp	r0, #5
 800f3f0:	d207      	bcs.n	800f402 <evnt_schdlr_calc_adv_max_dur+0x16>
 800f3f2:	b240      	sxtb	r0, r0
 800f3f4:	f24e 110c 	movw	r1, #57612	@ 0xe10c
 800f3f8:	f6c0 0102 	movt	r1, #2050	@ 0x802
 800f3fc:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 800f400:	e004      	b.n	800f40c <evnt_schdlr_calc_adv_max_dur+0x20>
 800f402:	2000      	movs	r0, #0
 800f404:	2101      	movs	r1, #1
 800f406:	2400      	movs	r4, #0
 800f408:	f00c fa89 	bl	801b91e <bsp_assert>
 800f40c:	4620      	mov	r0, r4
 800f40e:	bd10      	pop	{r4, pc}

0800f410 <evnt_schdlr_calc_prim_adv_durn_on_air>:
 800f410:	b570      	push	{r4, r5, r6, lr}
 800f412:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 800f414:	4604      	mov	r4, r0
 800f416:	7e28      	ldrb	r0, [r5, #24]
 800f418:	f24e 01f6 	movw	r1, #57590	@ 0xe0f6
 800f41c:	f000 000f 	and.w	r0, r0, #15
 800f420:	f6c0 0102 	movt	r1, #2050	@ 0x802
 800f424:	5c0e      	ldrb	r6, [r1, r0]
 800f426:	f00d fdcb 	bl	801cfc0 <llhwc_phy_get_adv_chnls_switch_time>
 800f42a:	7e69      	ldrb	r1, [r5, #25]
 800f42c:	4605      	mov	r5, r0
 800f42e:	4608      	mov	r0, r1
 800f430:	f7ff ffdc 	bl	800f3ec <evnt_schdlr_calc_adv_max_dur>
 800f434:	1e71      	subs	r1, r6, #1
 800f436:	fb01 f105 	mul.w	r1, r1, r5
 800f43a:	1942      	adds	r2, r0, r5
 800f43c:	fb00 1106 	mla	r1, r0, r6, r1
 800f440:	8122      	strh	r2, [r4, #8]
 800f442:	4608      	mov	r0, r1
 800f444:	bd70      	pop	{r4, r5, r6, pc}

0800f446 <packet_enqueue>:
 800f446:	b570      	push	{r4, r5, r6, lr}
 800f448:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 800f44c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800f450:	460c      	mov	r4, r1
 800f452:	6831      	ldr	r1, [r6, #0]
 800f454:	4605      	mov	r5, r0
 800f456:	4608      	mov	r0, r1
 800f458:	f04f 31ff 	mov.w	r1, #4294967295
 800f45c:	f00c fac3 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800f460:	6828      	ldr	r0, [r5, #0]
 800f462:	b118      	cbz	r0, 800f46c <packet_enqueue+0x26>
 800f464:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f468:	6044      	str	r4, [r0, #4]
 800f46a:	e001      	b.n	800f470 <packet_enqueue+0x2a>
 800f46c:	f845 4b04 	str.w	r4, [r5], #4
 800f470:	6830      	ldr	r0, [r6, #0]
 800f472:	602c      	str	r4, [r5, #0]
 800f474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f478:	f00c babb 	b.w	801b9f2 <os_rcrsv_mutex_release>

0800f47c <packet_insert_empty_frst>:
 800f47c:	b5b0      	push	{r4, r5, r7, lr}
 800f47e:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 800f482:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800f486:	6829      	ldr	r1, [r5, #0]
 800f488:	4604      	mov	r4, r0
 800f48a:	4608      	mov	r0, r1
 800f48c:	f04f 31ff 	mov.w	r1, #4294967295
 800f490:	f00c faa9 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800f494:	6828      	ldr	r0, [r5, #0]
 800f496:	2101      	movs	r1, #1
 800f498:	7221      	strb	r1, [r4, #8]
 800f49a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800f49e:	f00c baa8 	b.w	801b9f2 <os_rcrsv_mutex_release>

0800f4a2 <packet_get_frst_pkt>:
 800f4a2:	b5b0      	push	{r4, r5, r7, lr}
 800f4a4:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 800f4a8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 800f4ac:	6829      	ldr	r1, [r5, #0]
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	4608      	mov	r0, r1
 800f4b2:	f04f 31ff 	mov.w	r1, #4294967295
 800f4b6:	f00c fa96 	bl	801b9e6 <os_rcrsv_mutex_wait>
 800f4ba:	7a20      	ldrb	r0, [r4, #8]
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	bf0e      	itee	eq
 800f4c0:	6824      	ldreq	r4, [r4, #0]
 800f4c2:	f240 14c0 	movwne	r4, #448	@ 0x1c0
 800f4c6:	f2c2 0400 	movtne	r4, #8192	@ 0x2000
 800f4ca:	6828      	ldr	r0, [r5, #0]
 800f4cc:	f00c fa91 	bl	801b9f2 <os_rcrsv_mutex_release>
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	bdb0      	pop	{r4, r5, r7, pc}

0800f4d4 <evnt_schdlr_backoff_prcdr>:
 800f4d4:	b5b0      	push	{r4, r5, r7, lr}
 800f4d6:	f646 433c 	movw	r3, #27708	@ 0x6c3c
 800f4da:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800f4de:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800f4e0:	2c00      	cmp	r4, #0
 800f4e2:	d06d      	beq.n	800f5c0 <evnt_schdlr_backoff_prcdr+0xec>
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	2900      	cmp	r1, #0
 800f4e8:	d06a      	beq.n	800f5c0 <evnt_schdlr_backoff_prcdr+0xec>
 800f4ea:	4684      	mov	ip, r0
 800f4ec:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 800f4f0:	f080 0010 	eor.w	r0, r0, #16
 800f4f4:	4308      	orrs	r0, r1
 800f4f6:	d163      	bne.n	800f5c0 <evnt_schdlr_backoff_prcdr+0xec>
 800f4f8:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800f4fa:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	@ 0x40
 800f4fe:	f080 0410 	eor.w	r4, r0, #16
 800f502:	430c      	orrs	r4, r1
 800f504:	d016      	beq.n	800f534 <evnt_schdlr_backoff_prcdr+0x60>
 800f506:	f080 0320 	eor.w	r3, r0, #32
 800f50a:	430b      	orrs	r3, r1
 800f50c:	bf18      	it	ne
 800f50e:	bdb0      	popne	{r4, r5, r7, pc}
 800f510:	2a01      	cmp	r2, #1
 800f512:	d005      	beq.n	800f520 <evnt_schdlr_backoff_prcdr+0x4c>
 800f514:	f1bc 0f06 	cmp.w	ip, #6
 800f518:	bf18      	it	ne
 800f51a:	f1bc 0f00 	cmpne.w	ip, #0
 800f51e:	d162      	bne.n	800f5e6 <evnt_schdlr_backoff_prcdr+0x112>
 800f520:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 800f524:	2100      	movs	r1, #0
 800f526:	3801      	subs	r0, #1
 800f528:	f885 0048 	strb.w	r0, [r5, #72]	@ 0x48
 800f52c:	0600      	lsls	r0, r0, #24
 800f52e:	d022      	beq.n	800f576 <evnt_schdlr_backoff_prcdr+0xa2>
 800f530:	2020      	movs	r0, #32
 800f532:	bdb0      	pop	{r4, r5, r7, pc}
 800f534:	2a01      	cmp	r2, #1
 800f536:	bf18      	it	ne
 800f538:	f1bc 0f06 	cmpne.w	ip, #6
 800f53c:	d155      	bne.n	800f5ea <evnt_schdlr_backoff_prcdr+0x116>
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d01d      	beq.n	800f57e <evnt_schdlr_backoff_prcdr+0xaa>
 800f542:	2b02      	cmp	r3, #2
 800f544:	d136      	bne.n	800f5b4 <evnt_schdlr_backoff_prcdr+0xe0>
 800f546:	f646 501c 	movw	r0, #27932	@ 0x6d1c
 800f54a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f54e:	7802      	ldrb	r2, [r0, #0]
 800f550:	f646 531d 	movw	r3, #27933	@ 0x6d1d
 800f554:	1c51      	adds	r1, r2, #1
 800f556:	7001      	strb	r1, [r0, #0]
 800f558:	2100      	movs	r1, #0
 800f55a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800f55e:	7019      	strb	r1, [r3, #0]
 800f560:	bb42      	cbnz	r2, 800f5b4 <evnt_schdlr_backoff_prcdr+0xe0>
 800f562:	7001      	strb	r1, [r0, #0]
 800f564:	f895 0049 	ldrb.w	r0, [r5, #73]	@ 0x49
 800f568:	2101      	movs	r1, #1
 800f56a:	2801      	cmp	r0, #1
 800f56c:	bf88      	it	hi
 800f56e:	0841      	lsrhi	r1, r0, #1
 800f570:	f885 1049 	strb.w	r1, [r5, #73]	@ 0x49
 800f574:	e01e      	b.n	800f5b4 <evnt_schdlr_backoff_prcdr+0xe0>
 800f576:	2010      	movs	r0, #16
 800f578:	e9c5 0110 	strd	r0, r1, [r5, #64]	@ 0x40
 800f57c:	bdb0      	pop	{r4, r5, r7, pc}
 800f57e:	f646 511d 	movw	r1, #27933	@ 0x6d1d
 800f582:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f586:	780b      	ldrb	r3, [r1, #0]
 800f588:	2000      	movs	r0, #0
 800f58a:	2220      	movs	r2, #32
 800f58c:	e9c5 2010 	strd	r2, r0, [r5, #64]	@ 0x40
 800f590:	1c5a      	adds	r2, r3, #1
 800f592:	700a      	strb	r2, [r1, #0]
 800f594:	f646 521c 	movw	r2, #27932	@ 0x6d1c
 800f598:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f59c:	7010      	strb	r0, [r2, #0]
 800f59e:	b94b      	cbnz	r3, 800f5b4 <evnt_schdlr_backoff_prcdr+0xe0>
 800f5a0:	f895 2049 	ldrb.w	r2, [r5, #73]	@ 0x49
 800f5a4:	7008      	strb	r0, [r1, #0]
 800f5a6:	0050      	lsls	r0, r2, #1
 800f5a8:	b2c0      	uxtb	r0, r0
 800f5aa:	2810      	cmp	r0, #16
 800f5ac:	bf28      	it	cs
 800f5ae:	2010      	movcs	r0, #16
 800f5b0:	f885 0049 	strb.w	r0, [r5, #73]	@ 0x49
 800f5b4:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	f004 fd14 	bl	8013fe6 <llhwc_gen_rnd_num>
 800f5be:	b110      	cbz	r0, 800f5c6 <evnt_schdlr_backoff_prcdr+0xf2>
 800f5c0:	2110      	movs	r1, #16
 800f5c2:	2000      	movs	r0, #0
 800f5c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c6:	f895 0049 	ldrb.w	r0, [r5, #73]	@ 0x49
 800f5ca:	f895 1048 	ldrb.w	r1, [r5, #72]	@ 0x48
 800f5ce:	3801      	subs	r0, #1
 800f5d0:	4008      	ands	r0, r1
 800f5d2:	3001      	adds	r0, #1
 800f5d4:	b2c2      	uxtb	r2, r0
 800f5d6:	4282      	cmp	r2, r0
 800f5d8:	bf18      	it	ne
 800f5da:	2201      	movne	r2, #1
 800f5dc:	e9d5 0110 	ldrd	r0, r1, [r5, #64]	@ 0x40
 800f5e0:	f885 2048 	strb.w	r2, [r5, #72]	@ 0x48
 800f5e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	e7a2      	b.n	800f530 <evnt_schdlr_backoff_prcdr+0x5c>
 800f5ea:	f1bc 0f00 	cmp.w	ip, #0
 800f5ee:	d0a6      	beq.n	800f53e <evnt_schdlr_backoff_prcdr+0x6a>
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	2010      	movs	r0, #16
 800f5f4:	bdb0      	pop	{r4, r5, r7, pc}

0800f5f6 <evnt_schdlr_optm_conn_param>:
 800f5f6:	f646 423c 	movw	r2, #27708	@ 0x6c3c
 800f5fa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f5fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f600:	b289      	uxth	r1, r1
 800f602:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f604:	4710      	bx	r2

0800f606 <evnt_schdlr_conn_parm_req>:
 800f606:	f646 413c 	movw	r1, #27708	@ 0x6c3c
 800f60a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f60e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800f610:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800f612:	4708      	bx	r1

0800f614 <evnt_schdlr_calc_win_offset>:
 800f614:	f646 423c 	movw	r2, #27708	@ 0x6c3c
 800f618:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f61c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f61e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800f620:	4710      	bx	r2

0800f622 <evnt_util_is_connect_setup>:
 800f622:	b510      	push	{r4, lr}
 800f624:	2101      	movs	r1, #1
 800f626:	4604      	mov	r4, r0
 800f628:	2800      	cmp	r0, #0
 800f62a:	bf18      	it	ne
 800f62c:	2001      	movne	r0, #1
 800f62e:	f00c f976 	bl	801b91e <bsp_assert>
 800f632:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 800f636:	bd10      	pop	{r4, pc}

0800f638 <evnt_utils_update_sleep_clock_accuracy>:
 800f638:	b510      	push	{r4, lr}
 800f63a:	4604      	mov	r4, r0
 800f63c:	f013 f915 	bl	802286a <db_set_slp_clk_accuracy>
 800f640:	4620      	mov	r0, r4
 800f642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f646:	f012 bc9d 	b.w	8021f84 <conn_mngr_update_sca_for_running_conn>

0800f64a <evnt_util_set_prdc_clbr_exce_state>:
 800f64a:	b5b0      	push	{r4, r5, r7, lr}
 800f64c:	4605      	mov	r5, r0
 800f64e:	f7fd f823 	bl	800c698 <evnt_schdlr_get_prdc_clbr_evnt_hndl>
 800f652:	4604      	mov	r4, r0
 800f654:	2000      	movs	r0, #0
 800f656:	2101      	movs	r1, #1
 800f658:	2d02      	cmp	r5, #2
 800f65a:	bf38      	it	cc
 800f65c:	2001      	movcc	r0, #1
 800f65e:	f00c f95e 	bl	801b91e <bsp_assert>
 800f662:	b14c      	cbz	r4, 800f678 <evnt_util_set_prdc_clbr_exce_state+0x2e>
 800f664:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f668:	b10d      	cbz	r5, 800f66e <evnt_util_set_prdc_clbr_exce_state+0x24>
 800f66a:	2101      	movs	r1, #1
 800f66c:	e001      	b.n	800f672 <evnt_util_set_prdc_clbr_exce_state+0x28>
 800f66e:	b118      	cbz	r0, 800f678 <evnt_util_set_prdc_clbr_exce_state+0x2e>
 800f670:	21ff      	movs	r1, #255	@ 0xff
 800f672:	4408      	add	r0, r1
 800f674:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 800f678:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f67c <evnt_utils_reset_sw_overflow>:
 800f67c:	b510      	push	{r4, lr}
 800f67e:	2101      	movs	r1, #1
 800f680:	4604      	mov	r4, r0
 800f682:	2800      	cmp	r0, #0
 800f684:	bf18      	it	ne
 800f686:	2001      	movne	r0, #1
 800f688:	f00c f949 	bl	801b91e <bsp_assert>
 800f68c:	b12c      	cbz	r4, 800f69a <evnt_utils_reset_sw_overflow+0x1e>
 800f68e:	2000      	movs	r0, #0
 800f690:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
 800f694:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 800f696:	2c00      	cmp	r4, #0
 800f698:	d1fa      	bne.n	800f690 <evnt_utils_reset_sw_overflow+0x14>
 800f69a:	bd10      	pop	{r4, pc}

0800f69c <hci_default_ll_queue_full>:
 800f69c:	2000      	movs	r0, #0
 800f69e:	2101      	movs	r1, #1
 800f6a0:	f00c b93d 	b.w	801b91e <bsp_assert>

0800f6a4 <ll_hci_init>:
 800f6a4:	b510      	push	{r4, lr}
 800f6a6:	b120      	cbz	r0, 800f6b2 <ll_hci_init+0xe>
 800f6a8:	f646 5124 	movw	r1, #27940	@ 0x6d24
 800f6ac:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f6b0:	6008      	str	r0, [r1, #0]
 800f6b2:	f646 5428 	movw	r4, #27944	@ 0x6d28
 800f6b6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	2100      	movs	r1, #0
 800f6be:	221c      	movs	r2, #28
 800f6c0:	f011 f910 	bl	80208e4 <ble_memset>
 800f6c4:	f641 70ff 	movw	r0, #8191	@ 0x1fff
 800f6c8:	f04f 31ff 	mov.w	r1, #4294967295
 800f6cc:	e9c4 0100 	strd	r0, r1, [r4]
 800f6d0:	211f      	movs	r1, #31
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	6121      	str	r1, [r4, #16]
 800f6d6:	bd10      	pop	{r4, pc}

0800f6d8 <hci_get_dis_tbl>:
 800f6d8:	f24e 1118 	movw	r1, #57624	@ 0xe118
 800f6dc:	f6c0 0102 	movt	r1, #2050	@ 0x802
 800f6e0:	6001      	str	r1, [r0, #0]
 800f6e2:	4770      	bx	lr

0800f6e4 <hci_end_of_activity_evnt>:
 800f6e4:	b5b0      	push	{r4, r5, r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	f646 5244 	movw	r2, #27972	@ 0x6d44
 800f6ec:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f6f0:	7812      	ldrb	r2, [r2, #0]
 800f6f2:	f8ad 0006 	strh.w	r0, [sp, #6]
 800f6f6:	06d0      	lsls	r0, r2, #27
 800f6f8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f6fc:	d522      	bpl.n	800f744 <hci_end_of_activity_evnt+0x60>
 800f6fe:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800f702:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f706:	f00e f9d7 	bl	801dab8 <os_mem_pool_alloc>
 800f70a:	b1d8      	cbz	r0, 800f744 <hci_end_of_activity_evnt+0x60>
 800f70c:	4604      	mov	r4, r0
 800f70e:	20ff      	movs	r0, #255	@ 0xff
 800f710:	7020      	strb	r0, [r4, #0]
 800f712:	2005      	movs	r0, #5
 800f714:	7060      	strb	r0, [r4, #1]
 800f716:	70a0      	strb	r0, [r4, #2]
 800f718:	1ce0      	adds	r0, r4, #3
 800f71a:	f10d 0106 	add.w	r1, sp, #6
 800f71e:	2202      	movs	r2, #2
 800f720:	f011 f890 	bl	8020844 <ble_memcpy>
 800f724:	1d60      	adds	r0, r4, #5
 800f726:	a901      	add	r1, sp, #4
 800f728:	2202      	movs	r2, #2
 800f72a:	f011 f88b 	bl	8020844 <ble_memcpy>
 800f72e:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800f732:	7861      	ldrb	r1, [r4, #1]
 800f734:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f738:	6805      	ldr	r5, [r0, #0]
 800f73a:	3102      	adds	r1, #2
 800f73c:	4620      	mov	r0, r4
 800f73e:	f000 f803 	bl	800f748 <hci_form_hdr>
 800f742:	47a8      	blx	r5
 800f744:	b002      	add	sp, #8
 800f746:	bdb0      	pop	{r4, r5, r7, pc}

0800f748 <hci_form_hdr>:
 800f748:	b570      	push	{r4, r5, r6, lr}
 800f74a:	4605      	mov	r5, r0
 800f74c:	f249 5014 	movw	r0, #38164	@ 0x9514
 800f750:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f754:	460c      	mov	r4, r1
 800f756:	f00e f9af 	bl	801dab8 <os_mem_pool_alloc>
 800f75a:	2101      	movs	r1, #1
 800f75c:	4606      	mov	r6, r0
 800f75e:	2800      	cmp	r0, #0
 800f760:	bf18      	it	ne
 800f762:	2001      	movne	r0, #1
 800f764:	f00c f8db 	bl	801b91e <bsp_assert>
 800f768:	2001      	movs	r0, #1
 800f76a:	2101      	movs	r1, #1
 800f76c:	6035      	str	r5, [r6, #0]
 800f76e:	81b4      	strh	r4, [r6, #12]
 800f770:	f00c f8d5 	bl	801b91e <bsp_assert>
 800f774:	2000      	movs	r0, #0
 800f776:	8170      	strh	r0, [r6, #10]
 800f778:	2108      	movs	r1, #8
 800f77a:	4630      	mov	r0, r6
 800f77c:	73b1      	strb	r1, [r6, #14]
 800f77e:	bd70      	pop	{r4, r5, r6, pc}

0800f780 <hci_event_get_queue_id>:
 800f780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f782:	b081      	sub	sp, #4
 800f784:	6806      	ldr	r6, [r0, #0]
 800f786:	460c      	mov	r4, r1
 800f788:	4605      	mov	r5, r0
 800f78a:	8947      	ldrh	r7, [r0, #10]
 800f78c:	4630      	mov	r0, r6
 800f78e:	2101      	movs	r1, #1
 800f790:	2e00      	cmp	r6, #0
 800f792:	bf18      	it	ne
 800f794:	2001      	movne	r0, #1
 800f796:	f00c f8c2 	bl	801b91e <bsp_assert>
 800f79a:	b10c      	cbz	r4, 800f7a0 <hci_event_get_queue_id+0x20>
 800f79c:	2004      	movs	r0, #4
 800f79e:	7020      	strb	r0, [r4, #0]
 800f7a0:	7ba8      	ldrb	r0, [r5, #14]
 800f7a2:	2808      	cmp	r0, #8
 800f7a4:	d006      	beq.n	800f7b4 <hci_event_get_queue_id+0x34>
 800f7a6:	2810      	cmp	r0, #16
 800f7a8:	d10b      	bne.n	800f7c2 <hci_event_get_queue_id+0x42>
 800f7aa:	f04f 0007 	mov.w	r0, #7
 800f7ae:	b17c      	cbz	r4, 800f7d0 <hci_event_get_queue_id+0x50>
 800f7b0:	2128      	movs	r1, #40	@ 0x28
 800f7b2:	e00a      	b.n	800f7ca <hci_event_get_queue_id+0x4a>
 800f7b4:	b12c      	cbz	r4, 800f7c2 <hci_event_get_queue_id+0x42>
 800f7b6:	5df0      	ldrb	r0, [r6, r7]
 800f7b8:	283e      	cmp	r0, #62	@ 0x3e
 800f7ba:	d102      	bne.n	800f7c2 <hci_event_get_queue_id+0x42>
 800f7bc:	2006      	movs	r0, #6
 800f7be:	2105      	movs	r1, #5
 800f7c0:	e003      	b.n	800f7ca <hci_event_get_queue_id+0x4a>
 800f7c2:	b124      	cbz	r4, 800f7ce <hci_event_get_queue_id+0x4e>
 800f7c4:	7820      	ldrb	r0, [r4, #0]
 800f7c6:	1c41      	adds	r1, r0, #1
 800f7c8:	2006      	movs	r0, #6
 800f7ca:	7021      	strb	r1, [r4, #0]
 800f7cc:	e000      	b.n	800f7d0 <hci_event_get_queue_id+0x50>
 800f7ce:	2006      	movs	r0, #6
 800f7d0:	b001      	add	sp, #4
 800f7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f7d4 <hci_queue_send_pckt>:
 800f7d4:	b5b0      	push	{r4, r5, r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	2101      	movs	r1, #1
 800f7da:	4604      	mov	r4, r0
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	bf18      	it	ne
 800f7e0:	2001      	movne	r0, #1
 800f7e2:	f00c f89c 	bl	801b91e <bsp_assert>
 800f7e6:	f10d 0107 	add.w	r1, sp, #7
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f7ff ffc8 	bl	800f780 <hci_event_get_queue_id>
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	f00e f846 	bl	801d882 <emngr_get_handle_events>
 800f7f6:	2d07      	cmp	r5, #7
 800f7f8:	d00f      	beq.n	800f81a <hci_queue_send_pckt+0x46>
 800f7fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f7fe:	3901      	subs	r1, #1
 800f800:	4288      	cmp	r0, r1
 800f802:	d10a      	bne.n	800f81a <hci_queue_send_pckt+0x46>
 800f804:	f240 10d0 	movw	r0, #464	@ 0x1d0
 800f808:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f80c:	6801      	ldr	r1, [r0, #0]
 800f80e:	4620      	mov	r0, r4
 800f810:	4788      	blx	r1
 800f812:	4620      	mov	r0, r4
 800f814:	f000 ff92 	bl	801073c <ll_intf_free_ll_pkt_hndlr>
 800f818:	e003      	b.n	800f822 <hci_queue_send_pckt+0x4e>
 800f81a:	4628      	mov	r0, r5
 800f81c:	4621      	mov	r1, r4
 800f81e:	f00d ff76 	bl	801d70e <emngr_post_event>
 800f822:	2001      	movs	r0, #1
 800f824:	b002      	add	sp, #8
 800f826:	bdb0      	pop	{r4, r5, r7, pc}

0800f828 <hci_init_events_queues>:
 800f828:	b510      	push	{r4, lr}
 800f82a:	f64f 0455 	movw	r4, #63573	@ 0xf855
 800f82e:	f6c0 0400 	movt	r4, #2048	@ 0x800
 800f832:	2006      	movs	r0, #6
 800f834:	2105      	movs	r1, #5
 800f836:	4622      	mov	r2, r4
 800f838:	f00d ff44 	bl	801d6c4 <emngr_handle_init>
 800f83c:	2008      	movs	r0, #8
 800f83e:	2111      	movs	r1, #17
 800f840:	4622      	mov	r2, r4
 800f842:	f00d ff3f 	bl	801d6c4 <emngr_handle_init>
 800f846:	2007      	movs	r0, #7
 800f848:	2128      	movs	r1, #40	@ 0x28
 800f84a:	4622      	mov	r2, r4
 800f84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f850:	f00d bf38 	b.w	801d6c4 <emngr_handle_init>

0800f854 <hci_post_event_cbk>:
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	2100      	movs	r1, #0
 800f858:	4604      	mov	r4, r0
 800f85a:	f7ff ff91 	bl	800f780 <hci_event_get_queue_id>
 800f85e:	f646 5620 	movw	r6, #27936	@ 0x6d20
 800f862:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 800f866:	6831      	ldr	r1, [r6, #0]
 800f868:	4605      	mov	r5, r0
 800f86a:	2900      	cmp	r1, #0
 800f86c:	bf18      	it	ne
 800f86e:	2101      	movne	r1, #1
 800f870:	4608      	mov	r0, r1
 800f872:	2101      	movs	r1, #1
 800f874:	f00c f853 	bl	801b91e <bsp_assert>
 800f878:	6831      	ldr	r1, [r6, #0]
 800f87a:	4620      	mov	r0, r4
 800f87c:	4788      	blx	r1
 800f87e:	b100      	cbz	r0, 800f882 <hci_post_event_cbk+0x2e>
 800f880:	bd70      	pop	{r4, r5, r6, pc}
 800f882:	4628      	mov	r0, r5
 800f884:	4621      	mov	r1, r4
 800f886:	f00d ff74 	bl	801d772 <emngr_post_event_first>
 800f88a:	f00c f8a8 	bl	801b9de <os_disable_isr>
 800f88e:	4628      	mov	r0, r5
 800f890:	2101      	movs	r1, #1
 800f892:	f00e f800 	bl	801d896 <emngr_set_event_handle_busy>
 800f896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f89a:	f00c b8a2 	b.w	801b9e2 <os_enable_isr>

0800f89e <hci_rgstr_hst_cbk>:
 800f89e:	f646 5120 	movw	r1, #27936	@ 0x6d20
 800f8a2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f8a6:	6008      	str	r0, [r1, #0]
 800f8a8:	4770      	bx	lr

0800f8aa <hci_rgstr_hst_cbk_ll_queue_full>:
 800f8aa:	f240 11d0 	movw	r1, #464	@ 0x1d0
 800f8ae:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f8b2:	6008      	str	r0, [r1, #0]
 800f8b4:	4770      	bx	lr

0800f8b6 <hci_ll_set_le_event_mask>:
 800f8b6:	7801      	ldrb	r1, [r0, #0]
 800f8b8:	7842      	ldrb	r2, [r0, #1]
 800f8ba:	7883      	ldrb	r3, [r0, #2]
 800f8bc:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800f8c0:	78c2      	ldrb	r2, [r0, #3]
 800f8c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f8c6:	f646 5c28 	movw	ip, #27944	@ 0x6d28
 800f8ca:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 800f8ce:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800f8d2:	f8cc 1010 	str.w	r1, [ip, #16]
 800f8d6:	7901      	ldrb	r1, [r0, #4]
 800f8d8:	7943      	ldrb	r3, [r0, #5]
 800f8da:	7982      	ldrb	r2, [r0, #6]
 800f8dc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800f8e0:	79c0      	ldrb	r0, [r0, #7]
 800f8e2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f8e6:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 800f8ea:	f8cc 0014 	str.w	r0, [ip, #20]
 800f8ee:	4770      	bx	lr

0800f8f0 <hci_ll_set_event_mask>:
 800f8f0:	7801      	ldrb	r1, [r0, #0]
 800f8f2:	7842      	ldrb	r2, [r0, #1]
 800f8f4:	7883      	ldrb	r3, [r0, #2]
 800f8f6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800f8fa:	78c2      	ldrb	r2, [r0, #3]
 800f8fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f900:	f646 5c28 	movw	ip, #27944	@ 0x6d28
 800f904:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 800f908:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800f90c:	f8cc 1004 	str.w	r1, [ip, #4]
 800f910:	7901      	ldrb	r1, [r0, #4]
 800f912:	7943      	ldrb	r3, [r0, #5]
 800f914:	7982      	ldrb	r2, [r0, #6]
 800f916:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800f91a:	79c0      	ldrb	r0, [r0, #7]
 800f91c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f920:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800f924:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f928:	ea02 6000 	and.w	r0, r2, r0, lsl #24
 800f92c:	f8cc 1000 	str.w	r1, [ip]
 800f930:	f8cc 0018 	str.w	r0, [ip, #24]
 800f934:	4770      	bx	lr

0800f936 <hci_ll_set_event_mask_page2>:
 800f936:	7801      	ldrb	r1, [r0, #0]
 800f938:	7842      	ldrb	r2, [r0, #1]
 800f93a:	7883      	ldrb	r3, [r0, #2]
 800f93c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800f940:	78c2      	ldrb	r2, [r0, #3]
 800f942:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800f946:	f646 5c28 	movw	ip, #27944	@ 0x6d28
 800f94a:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 800f94e:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 800f952:	f8cc 100c 	str.w	r1, [ip, #12]
 800f956:	7901      	ldrb	r1, [r0, #4]
 800f958:	7943      	ldrb	r3, [r0, #5]
 800f95a:	7982      	ldrb	r2, [r0, #6]
 800f95c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800f960:	79c0      	ldrb	r0, [r0, #7]
 800f962:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f966:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 800f96a:	f8cc 0008 	str.w	r0, [ip, #8]
 800f96e:	4770      	bx	lr

0800f970 <hci_ll_set_custom_event_mask>:
 800f970:	f646 5144 	movw	r1, #27972	@ 0x6d44
 800f974:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f978:	7008      	strb	r0, [r1, #0]
 800f97a:	4770      	bx	lr

0800f97c <hci_construct_hw_err_evnt>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	f646 5128 	movw	r1, #27944	@ 0x6d28
 800f982:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f986:	7949      	ldrb	r1, [r1, #5]
 800f988:	0609      	lsls	r1, r1, #24
 800f98a:	bf58      	it	pl
 800f98c:	bd10      	poppl	{r4, pc}
 800f98e:	4604      	mov	r4, r0
 800f990:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800f994:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f998:	f00e f88e 	bl	801dab8 <os_mem_pool_alloc>
 800f99c:	b180      	cbz	r0, 800f9c0 <hci_construct_hw_err_evnt+0x44>
 800f99e:	2110      	movs	r1, #16
 800f9a0:	7001      	strb	r1, [r0, #0]
 800f9a2:	2101      	movs	r1, #1
 800f9a4:	7041      	strb	r1, [r0, #1]
 800f9a6:	f646 5124 	movw	r1, #27940	@ 0x6d24
 800f9aa:	7084      	strb	r4, [r0, #2]
 800f9ac:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800f9b0:	680c      	ldr	r4, [r1, #0]
 800f9b2:	2103      	movs	r1, #3
 800f9b4:	f7ff fec8 	bl	800f748 <hci_form_hdr>
 800f9b8:	4621      	mov	r1, r4
 800f9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9be:	4708      	bx	r1
 800f9c0:	bd10      	pop	{r4, pc}

0800f9c2 <hci_le_req_peer_sca_cpmlt_evnt>:
 800f9c2:	b570      	push	{r4, r5, r6, lr}
 800f9c4:	4614      	mov	r4, r2
 800f9c6:	f646 5228 	movw	r2, #27944	@ 0x6d28
 800f9ca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800f9ce:	6993      	ldr	r3, [r2, #24]
 800f9d0:	b313      	cbz	r3, 800fa18 <hci_le_req_peer_sca_cpmlt_evnt+0x56>
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	7cd0      	ldrb	r0, [r2, #19]
 800f9d6:	0640      	lsls	r0, r0, #25
 800f9d8:	d51e      	bpl.n	800fa18 <hci_le_req_peer_sca_cpmlt_evnt+0x56>
 800f9da:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800f9de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	f00e f868 	bl	801dab8 <os_mem_pool_alloc>
 800f9e8:	b1b0      	cbz	r0, 800fa18 <hci_le_req_peer_sca_cpmlt_evnt+0x56>
 800f9ea:	213e      	movs	r1, #62	@ 0x3e
 800f9ec:	7001      	strb	r1, [r0, #0]
 800f9ee:	2105      	movs	r1, #5
 800f9f0:	7041      	strb	r1, [r0, #1]
 800f9f2:	211f      	movs	r1, #31
 800f9f4:	7081      	strb	r1, [r0, #2]
 800f9f6:	0a29      	lsrs	r1, r5, #8
 800f9f8:	7141      	strb	r1, [r0, #5]
 800f9fa:	f646 5124 	movw	r1, #27940	@ 0x6d24
 800f9fe:	70c6      	strb	r6, [r0, #3]
 800fa00:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fa04:	7105      	strb	r5, [r0, #4]
 800fa06:	680d      	ldr	r5, [r1, #0]
 800fa08:	2107      	movs	r1, #7
 800fa0a:	7184      	strb	r4, [r0, #6]
 800fa0c:	f7ff fe9c 	bl	800f748 <hci_form_hdr>
 800fa10:	4629      	mov	r1, r5
 800fa12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa16:	4708      	bx	r1
 800fa18:	bd70      	pop	{r4, r5, r6, pc}

0800fa1a <hci_disconn_cmplt_evnt>:
 800fa1a:	b570      	push	{r4, r5, r6, lr}
 800fa1c:	4614      	mov	r4, r2
 800fa1e:	f646 5228 	movw	r2, #27944	@ 0x6d28
 800fa22:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800fa26:	7912      	ldrb	r2, [r2, #4]
 800fa28:	460d      	mov	r5, r1
 800fa2a:	06d1      	lsls	r1, r2, #27
 800fa2c:	bf58      	it	pl
 800fa2e:	bd70      	poppl	{r4, r5, r6, pc}
 800fa30:	4606      	mov	r6, r0
 800fa32:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800fa36:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fa3a:	f00e f83d 	bl	801dab8 <os_mem_pool_alloc>
 800fa3e:	b1a0      	cbz	r0, 800fa6a <hci_disconn_cmplt_evnt+0x50>
 800fa40:	2105      	movs	r1, #5
 800fa42:	7001      	strb	r1, [r0, #0]
 800fa44:	2104      	movs	r1, #4
 800fa46:	7041      	strb	r1, [r0, #1]
 800fa48:	0a29      	lsrs	r1, r5, #8
 800fa4a:	7101      	strb	r1, [r0, #4]
 800fa4c:	f646 5124 	movw	r1, #27940	@ 0x6d24
 800fa50:	7086      	strb	r6, [r0, #2]
 800fa52:	70c5      	strb	r5, [r0, #3]
 800fa54:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fa58:	680d      	ldr	r5, [r1, #0]
 800fa5a:	2106      	movs	r1, #6
 800fa5c:	7144      	strb	r4, [r0, #5]
 800fa5e:	f7ff fe73 	bl	800f748 <hci_form_hdr>
 800fa62:	4629      	mov	r1, r5
 800fa64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa68:	4708      	bx	r1
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}

0800fa6c <hci_le_enhanced_conn_cmplt_evnt>:
 800fa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa70:	b083      	sub	sp, #12
 800fa72:	f646 5128 	movw	r1, #27944	@ 0x6d28
 800fa76:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fa7a:	698a      	ldr	r2, [r1, #24]
 800fa7c:	2a00      	cmp	r2, #0
 800fa7e:	d058      	beq.n	800fb32 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 800fa80:	4604      	mov	r4, r0
 800fa82:	6908      	ldr	r0, [r1, #16]
 800fa84:	0581      	lsls	r1, r0, #22
 800fa86:	d42f      	bmi.n	800fae8 <hci_le_enhanced_conn_cmplt_evnt+0x7c>
 800fa88:	07c0      	lsls	r0, r0, #31
 800fa8a:	d052      	beq.n	800fb32 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 800fa8c:	8b20      	ldrh	r0, [r4, #24]
 800fa8e:	e9d4 8500 	ldrd	r8, r5, [r4]
 800fa92:	9001      	str	r0, [sp, #4]
 800fa94:	7ee0      	ldrb	r0, [r4, #27]
 800fa96:	f8b4 9012 	ldrh.w	r9, [r4, #18]
 800fa9a:	9002      	str	r0, [sp, #8]
 800fa9c:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800faa0:	7c26      	ldrb	r6, [r4, #16]
 800faa2:	7ea7      	ldrb	r7, [r4, #26]
 800faa4:	f8b4 b014 	ldrh.w	fp, [r4, #20]
 800faa8:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 800faac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fab0:	f00e f802 	bl	801dab8 <os_mem_pool_alloc>
 800fab4:	b3e8      	cbz	r0, 800fb32 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 800fab6:	4604      	mov	r4, r0
 800fab8:	203e      	movs	r0, #62	@ 0x3e
 800faba:	7020      	strb	r0, [r4, #0]
 800fabc:	2013      	movs	r0, #19
 800fabe:	7060      	strb	r0, [r4, #1]
 800fac0:	2001      	movs	r0, #1
 800fac2:	70a0      	strb	r0, [r4, #2]
 800fac4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 800fac8:	7160      	strb	r0, [r4, #5]
 800faca:	2d00      	cmp	r5, #0
 800facc:	f104 0008 	add.w	r0, r4, #8
 800fad0:	f884 8003 	strb.w	r8, [r4, #3]
 800fad4:	f884 9004 	strb.w	r9, [r4, #4]
 800fad8:	71a6      	strb	r6, [r4, #6]
 800fada:	71e7      	strb	r7, [r4, #7]
 800fadc:	d058      	beq.n	800fb90 <hci_le_enhanced_conn_cmplt_evnt+0x124>
 800fade:	4629      	mov	r1, r5
 800fae0:	2206      	movs	r2, #6
 800fae2:	f010 feaf 	bl	8020844 <ble_memcpy>
 800fae6:	e057      	b.n	800fb98 <hci_le_enhanced_conn_cmplt_evnt+0x12c>
 800fae8:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800faec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800faf0:	f00d ffe2 	bl	801dab8 <os_mem_pool_alloc>
 800faf4:	b1e8      	cbz	r0, 800fb32 <hci_le_enhanced_conn_cmplt_evnt+0xc6>
 800faf6:	4605      	mov	r5, r0
 800faf8:	203e      	movs	r0, #62	@ 0x3e
 800fafa:	7028      	strb	r0, [r5, #0]
 800fafc:	200a      	movs	r0, #10
 800fafe:	70a8      	strb	r0, [r5, #2]
 800fb00:	6820      	ldr	r0, [r4, #0]
 800fb02:	70e8      	strb	r0, [r5, #3]
 800fb04:	7ca0      	ldrb	r0, [r4, #18]
 800fb06:	7128      	strb	r0, [r5, #4]
 800fb08:	7ce0      	ldrb	r0, [r4, #19]
 800fb0a:	7168      	strb	r0, [r5, #5]
 800fb0c:	7c20      	ldrb	r0, [r4, #16]
 800fb0e:	71a8      	strb	r0, [r5, #6]
 800fb10:	7ea0      	ldrb	r0, [r4, #26]
 800fb12:	71e8      	strb	r0, [r5, #7]
 800fb14:	6861      	ldr	r1, [r4, #4]
 800fb16:	b121      	cbz	r1, 800fb22 <hci_le_enhanced_conn_cmplt_evnt+0xb6>
 800fb18:	f105 0008 	add.w	r0, r5, #8
 800fb1c:	2206      	movs	r2, #6
 800fb1e:	f010 fe91 	bl	8020844 <ble_memcpy>
 800fb22:	68a1      	ldr	r1, [r4, #8]
 800fb24:	f105 000e 	add.w	r0, r5, #14
 800fb28:	b131      	cbz	r1, 800fb38 <hci_le_enhanced_conn_cmplt_evnt+0xcc>
 800fb2a:	2206      	movs	r2, #6
 800fb2c:	f010 fe8a 	bl	8020844 <ble_memcpy>
 800fb30:	e006      	b.n	800fb40 <hci_le_enhanced_conn_cmplt_evnt+0xd4>
 800fb32:	b003      	add	sp, #12
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	2100      	movs	r1, #0
 800fb3a:	2206      	movs	r2, #6
 800fb3c:	f010 fed2 	bl	80208e4 <ble_memset>
 800fb40:	68e1      	ldr	r1, [r4, #12]
 800fb42:	f105 0014 	add.w	r0, r5, #20
 800fb46:	b119      	cbz	r1, 800fb50 <hci_le_enhanced_conn_cmplt_evnt+0xe4>
 800fb48:	2206      	movs	r2, #6
 800fb4a:	f010 fe7b 	bl	8020844 <ble_memcpy>
 800fb4e:	e003      	b.n	800fb58 <hci_le_enhanced_conn_cmplt_evnt+0xec>
 800fb50:	2100      	movs	r1, #0
 800fb52:	2206      	movs	r2, #6
 800fb54:	f010 fec6 	bl	80208e4 <ble_memset>
 800fb58:	7d20      	ldrb	r0, [r4, #20]
 800fb5a:	211f      	movs	r1, #31
 800fb5c:	76a8      	strb	r0, [r5, #26]
 800fb5e:	7d60      	ldrb	r0, [r4, #21]
 800fb60:	76e8      	strb	r0, [r5, #27]
 800fb62:	7da0      	ldrb	r0, [r4, #22]
 800fb64:	7728      	strb	r0, [r5, #28]
 800fb66:	7de0      	ldrb	r0, [r4, #23]
 800fb68:	7768      	strb	r0, [r5, #29]
 800fb6a:	7e20      	ldrb	r0, [r4, #24]
 800fb6c:	77a8      	strb	r0, [r5, #30]
 800fb6e:	7e60      	ldrb	r0, [r4, #25]
 800fb70:	77e8      	strb	r0, [r5, #31]
 800fb72:	7ee0      	ldrb	r0, [r4, #27]
 800fb74:	7069      	strb	r1, [r5, #1]
 800fb76:	f646 5124 	movw	r1, #27940	@ 0x6d24
 800fb7a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fb7e:	680c      	ldr	r4, [r1, #0]
 800fb80:	f885 0020 	strb.w	r0, [r5, #32]
 800fb84:	4628      	mov	r0, r5
 800fb86:	2121      	movs	r1, #33	@ 0x21
 800fb88:	f7ff fdde 	bl	800f748 <hci_form_hdr>
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	e01e      	b.n	800fbce <hci_le_enhanced_conn_cmplt_evnt+0x162>
 800fb90:	2100      	movs	r1, #0
 800fb92:	2206      	movs	r2, #6
 800fb94:	f010 fea6 	bl	80208e4 <ble_memset>
 800fb98:	ea4f 201b 	mov.w	r0, fp, lsr #8
 800fb9c:	73e0      	strb	r0, [r4, #15]
 800fb9e:	ea4f 201a 	mov.w	r0, sl, lsr #8
 800fba2:	7460      	strb	r0, [r4, #17]
 800fba4:	9801      	ldr	r0, [sp, #4]
 800fba6:	7861      	ldrb	r1, [r4, #1]
 800fba8:	74a0      	strb	r0, [r4, #18]
 800fbaa:	0a00      	lsrs	r0, r0, #8
 800fbac:	74e0      	strb	r0, [r4, #19]
 800fbae:	9802      	ldr	r0, [sp, #8]
 800fbb0:	3102      	adds	r1, #2
 800fbb2:	7520      	strb	r0, [r4, #20]
 800fbb4:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800fbb8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fbbc:	6805      	ldr	r5, [r0, #0]
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f884 b00e 	strb.w	fp, [r4, #14]
 800fbc4:	f884 a010 	strb.w	sl, [r4, #16]
 800fbc8:	f7ff fdbe 	bl	800f748 <hci_form_hdr>
 800fbcc:	4629      	mov	r1, r5
 800fbce:	b003      	add	sp, #12
 800fbd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd4:	4708      	bx	r1

0800fbd6 <hci_read_rmt_ver_info_cmplt_evnt>:
 800fbd6:	b5b0      	push	{r4, r5, r7, lr}
 800fbd8:	b084      	sub	sp, #16
 800fbda:	9003      	str	r0, [sp, #12]
 800fbdc:	f646 5028 	movw	r0, #27944	@ 0x6d28
 800fbe0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fbe4:	7940      	ldrb	r0, [r0, #5]
 800fbe6:	460d      	mov	r5, r1
 800fbe8:	9908      	ldr	r1, [sp, #32]
 800fbea:	0700      	lsls	r0, r0, #28
 800fbec:	f88d 200b 	strb.w	r2, [sp, #11]
 800fbf0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800fbf4:	f8ad 1006 	strh.w	r1, [sp, #6]
 800fbf8:	d530      	bpl.n	800fc5c <hci_read_rmt_ver_info_cmplt_evnt+0x86>
 800fbfa:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800fbfe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fc02:	f00d ff59 	bl	801dab8 <os_mem_pool_alloc>
 800fc06:	b348      	cbz	r0, 800fc5c <hci_read_rmt_ver_info_cmplt_evnt+0x86>
 800fc08:	4604      	mov	r4, r0
 800fc0a:	200c      	movs	r0, #12
 800fc0c:	7020      	strb	r0, [r4, #0]
 800fc0e:	2008      	movs	r0, #8
 800fc10:	7060      	strb	r0, [r4, #1]
 800fc12:	1ca0      	adds	r0, r4, #2
 800fc14:	a903      	add	r1, sp, #12
 800fc16:	2201      	movs	r2, #1
 800fc18:	f010 fe14 	bl	8020844 <ble_memcpy>
 800fc1c:	0a28      	lsrs	r0, r5, #8
 800fc1e:	7120      	strb	r0, [r4, #4]
 800fc20:	1d60      	adds	r0, r4, #5
 800fc22:	f10d 010b 	add.w	r1, sp, #11
 800fc26:	2201      	movs	r2, #1
 800fc28:	70e5      	strb	r5, [r4, #3]
 800fc2a:	f010 fe0b 	bl	8020844 <ble_memcpy>
 800fc2e:	1da0      	adds	r0, r4, #6
 800fc30:	a902      	add	r1, sp, #8
 800fc32:	2202      	movs	r2, #2
 800fc34:	f010 fe06 	bl	8020844 <ble_memcpy>
 800fc38:	f104 0008 	add.w	r0, r4, #8
 800fc3c:	f10d 0106 	add.w	r1, sp, #6
 800fc40:	2202      	movs	r2, #2
 800fc42:	f010 fdff 	bl	8020844 <ble_memcpy>
 800fc46:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800fc4a:	7861      	ldrb	r1, [r4, #1]
 800fc4c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fc50:	6805      	ldr	r5, [r0, #0]
 800fc52:	3102      	adds	r1, #2
 800fc54:	4620      	mov	r0, r4
 800fc56:	f7ff fd77 	bl	800f748 <hci_form_hdr>
 800fc5a:	47a8      	blx	r5
 800fc5c:	b004      	add	sp, #16
 800fc5e:	bdb0      	pop	{r4, r5, r7, pc}

0800fc60 <hci_le_read_rmt_used_features_cmplt_evnt>:
 800fc60:	b570      	push	{r4, r5, r6, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	460d      	mov	r5, r1
 800fc66:	f646 5128 	movw	r1, #27944	@ 0x6d28
 800fc6a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fc6e:	4614      	mov	r4, r2
 800fc70:	698a      	ldr	r2, [r1, #24]
 800fc72:	9001      	str	r0, [sp, #4]
 800fc74:	f04f 0004 	mov.w	r0, #4
 800fc78:	f88d 0003 	strb.w	r0, [sp, #3]
 800fc7c:	b362      	cbz	r2, 800fcd8 <hci_le_read_rmt_used_features_cmplt_evnt+0x78>
 800fc7e:	7c08      	ldrb	r0, [r1, #16]
 800fc80:	0700      	lsls	r0, r0, #28
 800fc82:	d529      	bpl.n	800fcd8 <hci_le_read_rmt_used_features_cmplt_evnt+0x78>
 800fc84:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800fc88:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fc8c:	f00d ff14 	bl	801dab8 <os_mem_pool_alloc>
 800fc90:	b310      	cbz	r0, 800fcd8 <hci_le_read_rmt_used_features_cmplt_evnt+0x78>
 800fc92:	4606      	mov	r6, r0
 800fc94:	203e      	movs	r0, #62	@ 0x3e
 800fc96:	7030      	strb	r0, [r6, #0]
 800fc98:	200c      	movs	r0, #12
 800fc9a:	7070      	strb	r0, [r6, #1]
 800fc9c:	1cb0      	adds	r0, r6, #2
 800fc9e:	f10d 0103 	add.w	r1, sp, #3
 800fca2:	2201      	movs	r2, #1
 800fca4:	f010 fdce 	bl	8020844 <ble_memcpy>
 800fca8:	1cf0      	adds	r0, r6, #3
 800fcaa:	a901      	add	r1, sp, #4
 800fcac:	2201      	movs	r2, #1
 800fcae:	f010 fdc9 	bl	8020844 <ble_memcpy>
 800fcb2:	0a28      	lsrs	r0, r5, #8
 800fcb4:	7170      	strb	r0, [r6, #5]
 800fcb6:	1db0      	adds	r0, r6, #6
 800fcb8:	4621      	mov	r1, r4
 800fcba:	2208      	movs	r2, #8
 800fcbc:	7135      	strb	r5, [r6, #4]
 800fcbe:	f010 fdc1 	bl	8020844 <ble_memcpy>
 800fcc2:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800fcc6:	7871      	ldrb	r1, [r6, #1]
 800fcc8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fccc:	6804      	ldr	r4, [r0, #0]
 800fcce:	3102      	adds	r1, #2
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	f7ff fd39 	bl	800f748 <hci_form_hdr>
 800fcd6:	47a0      	blx	r4
 800fcd8:	b002      	add	sp, #8
 800fcda:	bd70      	pop	{r4, r5, r6, pc}

0800fcdc <hci_le_data_buff_ovrflw_event>:
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	f646 5128 	movw	r1, #27944	@ 0x6d28
 800fce2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fce6:	79c9      	ldrb	r1, [r1, #7]
 800fce8:	0789      	lsls	r1, r1, #30
 800fcea:	bf58      	it	pl
 800fcec:	bd10      	poppl	{r4, pc}
 800fcee:	4604      	mov	r4, r0
 800fcf0:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800fcf4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fcf8:	f00d fede 	bl	801dab8 <os_mem_pool_alloc>
 800fcfc:	b180      	cbz	r0, 800fd20 <hci_le_data_buff_ovrflw_event+0x44>
 800fcfe:	211a      	movs	r1, #26
 800fd00:	7001      	strb	r1, [r0, #0]
 800fd02:	2101      	movs	r1, #1
 800fd04:	7041      	strb	r1, [r0, #1]
 800fd06:	f646 5124 	movw	r1, #27940	@ 0x6d24
 800fd0a:	7084      	strb	r4, [r0, #2]
 800fd0c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800fd10:	680c      	ldr	r4, [r1, #0]
 800fd12:	2103      	movs	r1, #3
 800fd14:	f7ff fd18 	bl	800f748 <hci_form_hdr>
 800fd18:	4621      	mov	r1, r4
 800fd1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd1e:	4708      	bx	r1
 800fd20:	bd10      	pop	{r4, pc}

0800fd22 <hci_send_acl_data_from_cntrlr_to_host>:
 800fd22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd24:	b081      	sub	sp, #4
 800fd26:	4605      	mov	r5, r0
 800fd28:	7b88      	ldrb	r0, [r1, #14]
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	07c0      	lsls	r0, r0, #31
 800fd2e:	8948      	ldrh	r0, [r1, #10]
 800fd30:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 800fd34:	fab0 f080 	clz	r0, r0
 800fd38:	bf08      	it	eq
 800fd3a:	f44f 5780 	moveq.w	r7, #4096	@ 0x1000
 800fd3e:	0940      	lsrs	r0, r0, #5
 800fd40:	2101      	movs	r1, #1
 800fd42:	f405 6670 	and.w	r6, r5, #3840	@ 0xf00
 800fd46:	f00b fdea 	bl	801b91e <bsp_assert>
 800fd4a:	6820      	ldr	r0, [r4, #0]
 800fd4c:	8961      	ldrh	r1, [r4, #10]
 800fd4e:	19ba      	adds	r2, r7, r6
 800fd50:	5445      	strb	r5, [r0, r1]
 800fd52:	6820      	ldr	r0, [r4, #0]
 800fd54:	8961      	ldrh	r1, [r4, #10]
 800fd56:	0a12      	lsrs	r2, r2, #8
 800fd58:	4408      	add	r0, r1
 800fd5a:	7042      	strb	r2, [r0, #1]
 800fd5c:	7b20      	ldrb	r0, [r4, #12]
 800fd5e:	6821      	ldr	r1, [r4, #0]
 800fd60:	8962      	ldrh	r2, [r4, #10]
 800fd62:	3804      	subs	r0, #4
 800fd64:	4411      	add	r1, r2
 800fd66:	7088      	strb	r0, [r1, #2]
 800fd68:	89a0      	ldrh	r0, [r4, #12]
 800fd6a:	6821      	ldr	r1, [r4, #0]
 800fd6c:	8962      	ldrh	r2, [r4, #10]
 800fd6e:	3804      	subs	r0, #4
 800fd70:	0a00      	lsrs	r0, r0, #8
 800fd72:	4411      	add	r1, r2
 800fd74:	70c8      	strb	r0, [r1, #3]
 800fd76:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800fd7a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fd7e:	2110      	movs	r1, #16
 800fd80:	6802      	ldr	r2, [r0, #0]
 800fd82:	4620      	mov	r0, r4
 800fd84:	73a1      	strb	r1, [r4, #14]
 800fd86:	b001      	add	sp, #4
 800fd88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd8c:	4710      	bx	r2
	...

0800fd90 <hci_num_of_cmpltd_pckts_cmplt_evnt>:
 800fd90:	b570      	push	{r4, r5, r6, lr}
 800fd92:	4606      	mov	r6, r0
 800fd94:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800fd98:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fd9c:	4614      	mov	r4, r2
 800fd9e:	460d      	mov	r5, r1
 800fda0:	f00d fe8a 	bl	801dab8 <os_mem_pool_alloc>
 800fda4:	b380      	cbz	r0, 800fe08 <hci_num_of_cmpltd_pckts_cmplt_evnt+0x78>
 800fda6:	2113      	movs	r1, #19
 800fda8:	7001      	strb	r1, [r0, #0]
 800fdaa:	00b1      	lsls	r1, r6, #2
 800fdac:	3101      	adds	r1, #1
 800fdae:	7041      	strb	r1, [r0, #1]
 800fdb0:	7086      	strb	r6, [r0, #2]
 800fdb2:	b1e6      	cbz	r6, 800fdee <hci_num_of_cmpltd_pckts_cmplt_evnt+0x5e>
 800fdb4:	2102      	movs	r1, #2
 800fdb6:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 800fdba:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 800fdbe:	b2c9      	uxtb	r1, r1
 800fdc0:	eb00 0c01 	add.w	ip, r0, r1
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	bf00      	nop
 800fdc8:	5ce9      	ldrb	r1, [r5, r3]
 800fdca:	18c2      	adds	r2, r0, r3
 800fdcc:	18ee      	adds	r6, r5, r3
 800fdce:	70d1      	strb	r1, [r2, #3]
 800fdd0:	7871      	ldrb	r1, [r6, #1]
 800fdd2:	eb0c 0603 	add.w	r6, ip, r3
 800fdd6:	f001 010f 	and.w	r1, r1, #15
 800fdda:	7111      	strb	r1, [r2, #4]
 800fddc:	5ce2      	ldrb	r2, [r4, r3]
 800fdde:	18e1      	adds	r1, r4, r3
 800fde0:	7072      	strb	r2, [r6, #1]
 800fde2:	7849      	ldrb	r1, [r1, #1]
 800fde4:	3302      	adds	r3, #2
 800fde6:	459e      	cmp	lr, r3
 800fde8:	70b1      	strb	r1, [r6, #2]
 800fdea:	d1ed      	bne.n	800fdc8 <hci_num_of_cmpltd_pckts_cmplt_evnt+0x38>
 800fdec:	7841      	ldrb	r1, [r0, #1]
 800fdee:	f646 5224 	movw	r2, #27940	@ 0x6d24
 800fdf2:	b2c9      	uxtb	r1, r1
 800fdf4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800fdf8:	6814      	ldr	r4, [r2, #0]
 800fdfa:	3102      	adds	r1, #2
 800fdfc:	f7ff fca4 	bl	800f748 <hci_form_hdr>
 800fe00:	4621      	mov	r1, r4
 800fe02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe06:	4708      	bx	r1
 800fe08:	bd70      	pop	{r4, r5, r6, pc}

0800fe0a <hci_send_le_adv_report_pkt>:
 800fe0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe0e:	b081      	sub	sp, #4
 800fe10:	f646 5228 	movw	r2, #27944	@ 0x6d28
 800fe14:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 800fe18:	6993      	ldr	r3, [r2, #24]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d06b      	beq.n	800fef6 <hci_send_le_adv_report_pkt+0xec>
 800fe1e:	4604      	mov	r4, r0
 800fe20:	7c10      	ldrb	r0, [r2, #16]
 800fe22:	0780      	lsls	r0, r0, #30
 800fe24:	d567      	bpl.n	800fef6 <hci_send_le_adv_report_pkt+0xec>
 800fe26:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800fe2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fe2e:	460e      	mov	r6, r1
 800fe30:	f00d fe42 	bl	801dab8 <os_mem_pool_alloc>
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d05e      	beq.n	800fef6 <hci_send_le_adv_report_pkt+0xec>
 800fe38:	f8b4 9014 	ldrh.w	r9, [r4, #20]
 800fe3c:	4605      	mov	r5, r0
 800fe3e:	223e      	movs	r2, #62	@ 0x3e
 800fe40:	68a0      	ldr	r0, [r4, #8]
 800fe42:	8a61      	ldrh	r1, [r4, #18]
 800fe44:	702a      	strb	r2, [r5, #0]
 800fe46:	f109 020c 	add.w	r2, r9, #12
 800fe4a:	706a      	strb	r2, [r5, #1]
 800fe4c:	2202      	movs	r2, #2
 800fe4e:	70aa      	strb	r2, [r5, #2]
 800fe50:	70ee      	strb	r6, [r5, #3]
 800fe52:	7e62      	ldrb	r2, [r4, #25]
 800fe54:	eb00 0801 	add.w	r8, r0, r1
 800fe58:	712a      	strb	r2, [r5, #4]
 800fe5a:	7ea0      	ldrb	r0, [r4, #26]
 800fe5c:	4621      	mov	r1, r4
 800fe5e:	7168      	strb	r0, [r5, #5]
 800fe60:	1da8      	adds	r0, r5, #6
 800fe62:	2206      	movs	r2, #6
 800fe64:	fa5f f789 	uxtb.w	r7, r9
 800fe68:	f010 fcec 	bl	8020844 <ble_memcpy>
 800fe6c:	f105 000d 	add.w	r0, r5, #13
 800fe70:	4641      	mov	r1, r8
 800fe72:	463a      	mov	r2, r7
 800fe74:	f885 900c 	strb.w	r9, [r5, #12]
 800fe78:	f010 fce4 	bl	8020844 <ble_memcpy>
 800fe7c:	7e21      	ldrb	r1, [r4, #24]
 800fe7e:	1978      	adds	r0, r7, r5
 800fe80:	2e02      	cmp	r6, #2
 800fe82:	7341      	strb	r1, [r0, #13]
 800fe84:	d128      	bne.n	800fed8 <hci_send_le_adv_report_pkt+0xce>
 800fe86:	f109 0110 	add.w	r1, r9, #16
 800fe8a:	b2ca      	uxtb	r2, r1
 800fe8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fe8e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800fe90:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800fe92:	eb01 0803 	add.w	r8, r1, r3
 800fe96:	eb09 0107 	add.w	r1, r9, r7
 800fe9a:	3116      	adds	r1, #22
 800fe9c:	7069      	strb	r1, [r5, #1]
 800fe9e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800fea2:	18ae      	adds	r6, r5, r2
 800fea4:	7383      	strb	r3, [r0, #14]
 800fea6:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800feaa:	f104 011c 	add.w	r1, r4, #28
 800feae:	73c3      	strb	r3, [r0, #15]
 800feb0:	4630      	mov	r0, r6
 800feb2:	2206      	movs	r2, #6
 800feb4:	b2ff      	uxtb	r7, r7
 800feb6:	f010 fcc5 	bl	8020844 <ble_memcpy>
 800feba:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 800febe:	4641      	mov	r1, r8
 800fec0:	71b0      	strb	r0, [r6, #6]
 800fec2:	f109 0017 	add.w	r0, r9, #23
 800fec6:	b2c6      	uxtb	r6, r0
 800fec8:	19a8      	adds	r0, r5, r6
 800feca:	463a      	mov	r2, r7
 800fecc:	f010 fcba 	bl	8020844 <ble_memcpy>
 800fed0:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 800fed4:	19b9      	adds	r1, r7, r6
 800fed6:	5468      	strb	r0, [r5, r1]
 800fed8:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800fedc:	7869      	ldrb	r1, [r5, #1]
 800fede:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fee2:	6804      	ldr	r4, [r0, #0]
 800fee4:	3102      	adds	r1, #2
 800fee6:	4628      	mov	r0, r5
 800fee8:	f7ff fc2e 	bl	800f748 <hci_form_hdr>
 800feec:	4621      	mov	r1, r4
 800feee:	b001      	add	sp, #4
 800fef0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fef4:	4708      	bx	r1
 800fef6:	b001      	add	sp, #4
 800fef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fefc <hci_send_le_dir_adv_report_pkt>:
 800fefc:	b5b0      	push	{r4, r5, r7, lr}
 800fefe:	f646 5128 	movw	r1, #27944	@ 0x6d28
 800ff02:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 800ff06:	698a      	ldr	r2, [r1, #24]
 800ff08:	b3aa      	cbz	r2, 800ff76 <hci_send_le_dir_adv_report_pkt+0x7a>
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	7c48      	ldrb	r0, [r1, #17]
 800ff0e:	0740      	lsls	r0, r0, #29
 800ff10:	d531      	bpl.n	800ff76 <hci_send_le_dir_adv_report_pkt+0x7a>
 800ff12:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800ff16:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ff1a:	f00d fdcd 	bl	801dab8 <os_mem_pool_alloc>
 800ff1e:	b350      	cbz	r0, 800ff76 <hci_send_le_dir_adv_report_pkt+0x7a>
 800ff20:	4605      	mov	r5, r0
 800ff22:	203e      	movs	r0, #62	@ 0x3e
 800ff24:	7028      	strb	r0, [r5, #0]
 800ff26:	2012      	movs	r0, #18
 800ff28:	7068      	strb	r0, [r5, #1]
 800ff2a:	200b      	movs	r0, #11
 800ff2c:	70a8      	strb	r0, [r5, #2]
 800ff2e:	2001      	movs	r0, #1
 800ff30:	70e8      	strb	r0, [r5, #3]
 800ff32:	7c60      	ldrb	r0, [r4, #17]
 800ff34:	4621      	mov	r1, r4
 800ff36:	7128      	strb	r0, [r5, #4]
 800ff38:	7ca0      	ldrb	r0, [r4, #18]
 800ff3a:	2206      	movs	r2, #6
 800ff3c:	7168      	strb	r0, [r5, #5]
 800ff3e:	1da8      	adds	r0, r5, #6
 800ff40:	f010 fc80 	bl	8020844 <ble_memcpy>
 800ff44:	7ce0      	ldrb	r0, [r4, #19]
 800ff46:	f104 0108 	add.w	r1, r4, #8
 800ff4a:	7328      	strb	r0, [r5, #12]
 800ff4c:	f105 000d 	add.w	r0, r5, #13
 800ff50:	2206      	movs	r2, #6
 800ff52:	f010 fc77 	bl	8020844 <ble_memcpy>
 800ff56:	7c20      	ldrb	r0, [r4, #16]
 800ff58:	7869      	ldrb	r1, [r5, #1]
 800ff5a:	74e8      	strb	r0, [r5, #19]
 800ff5c:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800ff60:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ff64:	6804      	ldr	r4, [r0, #0]
 800ff66:	3102      	adds	r1, #2
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f7ff fbed 	bl	800f748 <hci_form_hdr>
 800ff6e:	4621      	mov	r1, r4
 800ff70:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ff74:	4708      	bx	r1
 800ff76:	bdb0      	pop	{r4, r5, r7, pc}

0800ff78 <hci_le_conn_update_cmplt_event>:
 800ff78:	b5b0      	push	{r4, r5, r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	9003      	str	r0, [sp, #12]
 800ff7e:	2003      	movs	r0, #3
 800ff80:	460d      	mov	r5, r1
 800ff82:	9908      	ldr	r1, [sp, #32]
 800ff84:	f88d 0005 	strb.w	r0, [sp, #5]
 800ff88:	f647 3078 	movw	r0, #31608	@ 0x7b78
 800ff8c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800ff90:	f8ad 200a 	strh.w	r2, [sp, #10]
 800ff94:	f8ad 3008 	strh.w	r3, [sp, #8]
 800ff98:	f8ad 1006 	strh.w	r1, [sp, #6]
 800ff9c:	f00d fd8c 	bl	801dab8 <os_mem_pool_alloc>
 800ffa0:	b380      	cbz	r0, 8010004 <hci_le_conn_update_cmplt_event+0x8c>
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	203e      	movs	r0, #62	@ 0x3e
 800ffa6:	7020      	strb	r0, [r4, #0]
 800ffa8:	200a      	movs	r0, #10
 800ffaa:	7060      	strb	r0, [r4, #1]
 800ffac:	1ca0      	adds	r0, r4, #2
 800ffae:	f10d 0105 	add.w	r1, sp, #5
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f010 fc46 	bl	8020844 <ble_memcpy>
 800ffb8:	1ce0      	adds	r0, r4, #3
 800ffba:	a903      	add	r1, sp, #12
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	f010 fc41 	bl	8020844 <ble_memcpy>
 800ffc2:	0a28      	lsrs	r0, r5, #8
 800ffc4:	7160      	strb	r0, [r4, #5]
 800ffc6:	1da0      	adds	r0, r4, #6
 800ffc8:	f10d 010a 	add.w	r1, sp, #10
 800ffcc:	2202      	movs	r2, #2
 800ffce:	7125      	strb	r5, [r4, #4]
 800ffd0:	f010 fc38 	bl	8020844 <ble_memcpy>
 800ffd4:	f104 0008 	add.w	r0, r4, #8
 800ffd8:	a902      	add	r1, sp, #8
 800ffda:	2202      	movs	r2, #2
 800ffdc:	f010 fc32 	bl	8020844 <ble_memcpy>
 800ffe0:	f104 000a 	add.w	r0, r4, #10
 800ffe4:	f10d 0106 	add.w	r1, sp, #6
 800ffe8:	2202      	movs	r2, #2
 800ffea:	f010 fc2b 	bl	8020844 <ble_memcpy>
 800ffee:	f646 5024 	movw	r0, #27940	@ 0x6d24
 800fff2:	7861      	ldrb	r1, [r4, #1]
 800fff4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 800fff8:	6805      	ldr	r5, [r0, #0]
 800fffa:	3102      	adds	r1, #2
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7ff fba3 	bl	800f748 <hci_form_hdr>
 8010002:	47a8      	blx	r5
 8010004:	b004      	add	sp, #16
 8010006:	bdb0      	pop	{r4, r5, r7, pc}

08010008 <hci_le_rem_conn_param_req_event>:
 8010008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000a:	b081      	sub	sp, #4
 801000c:	4615      	mov	r5, r2
 801000e:	f646 5228 	movw	r2, #27944	@ 0x6d28
 8010012:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8010016:	461c      	mov	r4, r3
 8010018:	6993      	ldr	r3, [r2, #24]
 801001a:	b11b      	cbz	r3, 8010024 <hci_le_rem_conn_param_req_event+0x1c>
 801001c:	4607      	mov	r7, r0
 801001e:	7c10      	ldrb	r0, [r2, #16]
 8010020:	0680      	lsls	r0, r0, #26
 8010022:	d401      	bmi.n	8010028 <hci_le_rem_conn_param_req_event+0x20>
 8010024:	201a      	movs	r0, #26
 8010026:	e02c      	b.n	8010082 <hci_le_rem_conn_param_req_event+0x7a>
 8010028:	f647 3078 	movw	r0, #31608	@ 0x7b78
 801002c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010030:	460e      	mov	r6, r1
 8010032:	f00d fd41 	bl	801dab8 <os_mem_pool_alloc>
 8010036:	b300      	cbz	r0, 801007a <hci_le_rem_conn_param_req_event+0x72>
 8010038:	223e      	movs	r2, #62	@ 0x3e
 801003a:	7002      	strb	r2, [r0, #0]
 801003c:	220b      	movs	r2, #11
 801003e:	7042      	strb	r2, [r0, #1]
 8010040:	2206      	movs	r2, #6
 8010042:	7082      	strb	r2, [r0, #2]
 8010044:	0a3a      	lsrs	r2, r7, #8
 8010046:	7102      	strb	r2, [r0, #4]
 8010048:	0a32      	lsrs	r2, r6, #8
 801004a:	7182      	strb	r2, [r0, #6]
 801004c:	0a2a      	lsrs	r2, r5, #8
 801004e:	9906      	ldr	r1, [sp, #24]
 8010050:	7202      	strb	r2, [r0, #8]
 8010052:	0a22      	lsrs	r2, r4, #8
 8010054:	7282      	strb	r2, [r0, #10]
 8010056:	f646 5224 	movw	r2, #27940	@ 0x6d24
 801005a:	70c7      	strb	r7, [r0, #3]
 801005c:	72c1      	strb	r1, [r0, #11]
 801005e:	0a09      	lsrs	r1, r1, #8
 8010060:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8010064:	7244      	strb	r4, [r0, #9]
 8010066:	6814      	ldr	r4, [r2, #0]
 8010068:	7301      	strb	r1, [r0, #12]
 801006a:	210d      	movs	r1, #13
 801006c:	7146      	strb	r6, [r0, #5]
 801006e:	71c5      	strb	r5, [r0, #7]
 8010070:	f7ff fb6a 	bl	800f748 <hci_form_hdr>
 8010074:	47a0      	blx	r4
 8010076:	2000      	movs	r0, #0
 8010078:	e003      	b.n	8010082 <hci_le_rem_conn_param_req_event+0x7a>
 801007a:	2042      	movs	r0, #66	@ 0x42
 801007c:	f00b fc9a 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8010080:	2007      	movs	r0, #7
 8010082:	b001      	add	sp, #4
 8010084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010086 <hci_le_data_length_chg_event>:
 8010086:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801008a:	b081      	sub	sp, #4
 801008c:	460e      	mov	r6, r1
 801008e:	f646 5128 	movw	r1, #27944	@ 0x6d28
 8010092:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8010096:	4615      	mov	r5, r2
 8010098:	698a      	ldr	r2, [r1, #24]
 801009a:	4604      	mov	r4, r0
 801009c:	f04f 0007 	mov.w	r0, #7
 80100a0:	f88d 0003 	strb.w	r0, [sp, #3]
 80100a4:	b3b2      	cbz	r2, 8010114 <hci_le_data_length_chg_event+0x8e>
 80100a6:	6908      	ldr	r0, [r1, #16]
 80100a8:	f010 0040 	ands.w	r0, r0, #64	@ 0x40
 80100ac:	d032      	beq.n	8010114 <hci_le_data_length_chg_event+0x8e>
 80100ae:	f647 3078 	movw	r0, #31608	@ 0x7b78
 80100b2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80100b6:	4698      	mov	r8, r3
 80100b8:	f00d fcfe 	bl	801dab8 <os_mem_pool_alloc>
 80100bc:	b350      	cbz	r0, 8010114 <hci_le_data_length_chg_event+0x8e>
 80100be:	4607      	mov	r7, r0
 80100c0:	203e      	movs	r0, #62	@ 0x3e
 80100c2:	7038      	strb	r0, [r7, #0]
 80100c4:	200b      	movs	r0, #11
 80100c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80100ca:	7078      	strb	r0, [r7, #1]
 80100cc:	1cb8      	adds	r0, r7, #2
 80100ce:	f10d 0103 	add.w	r1, sp, #3
 80100d2:	2201      	movs	r2, #1
 80100d4:	f010 fbb6 	bl	8020844 <ble_memcpy>
 80100d8:	0a20      	lsrs	r0, r4, #8
 80100da:	7138      	strb	r0, [r7, #4]
 80100dc:	0a30      	lsrs	r0, r6, #8
 80100de:	71b8      	strb	r0, [r7, #6]
 80100e0:	0a28      	lsrs	r0, r5, #8
 80100e2:	7238      	strb	r0, [r7, #8]
 80100e4:	ea4f 2018 	mov.w	r0, r8, lsr #8
 80100e8:	72b8      	strb	r0, [r7, #10]
 80100ea:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80100ee:	7338      	strb	r0, [r7, #12]
 80100f0:	f646 5024 	movw	r0, #27940	@ 0x6d24
 80100f4:	7879      	ldrb	r1, [r7, #1]
 80100f6:	70fc      	strb	r4, [r7, #3]
 80100f8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80100fc:	6804      	ldr	r4, [r0, #0]
 80100fe:	3102      	adds	r1, #2
 8010100:	4638      	mov	r0, r7
 8010102:	717e      	strb	r6, [r7, #5]
 8010104:	71fd      	strb	r5, [r7, #7]
 8010106:	f887 8009 	strb.w	r8, [r7, #9]
 801010a:	f887 900b 	strb.w	r9, [r7, #11]
 801010e:	f7ff fb1b 	bl	800f748 <hci_form_hdr>
 8010112:	47a0      	blx	r4
 8010114:	b001      	add	sp, #4
 8010116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801011a <hci_le_phy_update_complete_event>:
 801011a:	b5b0      	push	{r4, r5, r7, lr}
 801011c:	b082      	sub	sp, #8
 801011e:	9001      	str	r0, [sp, #4]
 8010120:	f646 5028 	movw	r0, #27944	@ 0x6d28
 8010124:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010128:	460d      	mov	r5, r1
 801012a:	6981      	ldr	r1, [r0, #24]
 801012c:	f88d 2003 	strb.w	r2, [sp, #3]
 8010130:	220c      	movs	r2, #12
 8010132:	f88d 3002 	strb.w	r3, [sp, #2]
 8010136:	f88d 2001 	strb.w	r2, [sp, #1]
 801013a:	b3a1      	cbz	r1, 80101a6 <hci_le_phy_update_complete_event+0x8c>
 801013c:	6900      	ldr	r0, [r0, #16]
 801013e:	f410 6000 	ands.w	r0, r0, #2048	@ 0x800
 8010142:	d030      	beq.n	80101a6 <hci_le_phy_update_complete_event+0x8c>
 8010144:	f647 3078 	movw	r0, #31608	@ 0x7b78
 8010148:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801014c:	f00d fcb4 	bl	801dab8 <os_mem_pool_alloc>
 8010150:	b348      	cbz	r0, 80101a6 <hci_le_phy_update_complete_event+0x8c>
 8010152:	4604      	mov	r4, r0
 8010154:	203e      	movs	r0, #62	@ 0x3e
 8010156:	7020      	strb	r0, [r4, #0]
 8010158:	2006      	movs	r0, #6
 801015a:	7060      	strb	r0, [r4, #1]
 801015c:	1ca0      	adds	r0, r4, #2
 801015e:	f10d 0101 	add.w	r1, sp, #1
 8010162:	2201      	movs	r2, #1
 8010164:	f010 fb6e 	bl	8020844 <ble_memcpy>
 8010168:	1ce0      	adds	r0, r4, #3
 801016a:	a901      	add	r1, sp, #4
 801016c:	2201      	movs	r2, #1
 801016e:	f010 fb69 	bl	8020844 <ble_memcpy>
 8010172:	0a28      	lsrs	r0, r5, #8
 8010174:	7160      	strb	r0, [r4, #5]
 8010176:	1da0      	adds	r0, r4, #6
 8010178:	f10d 0103 	add.w	r1, sp, #3
 801017c:	2201      	movs	r2, #1
 801017e:	7125      	strb	r5, [r4, #4]
 8010180:	f010 fb60 	bl	8020844 <ble_memcpy>
 8010184:	1de0      	adds	r0, r4, #7
 8010186:	f10d 0102 	add.w	r1, sp, #2
 801018a:	2201      	movs	r2, #1
 801018c:	f010 fb5a 	bl	8020844 <ble_memcpy>
 8010190:	f646 5024 	movw	r0, #27940	@ 0x6d24
 8010194:	7861      	ldrb	r1, [r4, #1]
 8010196:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801019a:	6805      	ldr	r5, [r0, #0]
 801019c:	3102      	adds	r1, #2
 801019e:	4620      	mov	r0, r4
 80101a0:	f7ff fad2 	bl	800f748 <hci_form_hdr>
 80101a4:	47a8      	blx	r5
 80101a6:	b002      	add	sp, #8
 80101a8:	bdb0      	pop	{r4, r5, r7, pc}

080101aa <hci_encrpt_chng_evnt>:
 80101aa:	b570      	push	{r4, r5, r6, lr}
 80101ac:	4614      	mov	r4, r2
 80101ae:	f646 5228 	movw	r2, #27944	@ 0x6d28
 80101b2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80101b6:	7912      	ldrb	r2, [r2, #4]
 80101b8:	460d      	mov	r5, r1
 80101ba:	0611      	lsls	r1, r2, #24
 80101bc:	bf58      	it	pl
 80101be:	bd70      	poppl	{r4, r5, r6, pc}
 80101c0:	4606      	mov	r6, r0
 80101c2:	f647 3078 	movw	r0, #31608	@ 0x7b78
 80101c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80101ca:	f00d fc75 	bl	801dab8 <os_mem_pool_alloc>
 80101ce:	b1a0      	cbz	r0, 80101fa <hci_encrpt_chng_evnt+0x50>
 80101d0:	2108      	movs	r1, #8
 80101d2:	7001      	strb	r1, [r0, #0]
 80101d4:	2104      	movs	r1, #4
 80101d6:	7041      	strb	r1, [r0, #1]
 80101d8:	0a29      	lsrs	r1, r5, #8
 80101da:	7101      	strb	r1, [r0, #4]
 80101dc:	f646 5124 	movw	r1, #27940	@ 0x6d24
 80101e0:	7086      	strb	r6, [r0, #2]
 80101e2:	70c5      	strb	r5, [r0, #3]
 80101e4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80101e8:	680d      	ldr	r5, [r1, #0]
 80101ea:	2106      	movs	r1, #6
 80101ec:	7144      	strb	r4, [r0, #5]
 80101ee:	f7ff faab 	bl	800f748 <hci_form_hdr>
 80101f2:	4629      	mov	r1, r5
 80101f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101f8:	4708      	bx	r1
 80101fa:	bd70      	pop	{r4, r5, r6, pc}

080101fc <hci_encrpt_key_rfrsh_cmplt_evnt>:
 80101fc:	b5b0      	push	{r4, r5, r7, lr}
 80101fe:	f646 5228 	movw	r2, #27944	@ 0x6d28
 8010202:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8010206:	7952      	ldrb	r2, [r2, #5]
 8010208:	460c      	mov	r4, r1
 801020a:	0611      	lsls	r1, r2, #24
 801020c:	bf58      	it	pl
 801020e:	bdb0      	poppl	{r4, r5, r7, pc}
 8010210:	4605      	mov	r5, r0
 8010212:	f647 3078 	movw	r0, #31608	@ 0x7b78
 8010216:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801021a:	f00d fc4d 	bl	801dab8 <os_mem_pool_alloc>
 801021e:	b198      	cbz	r0, 8010248 <hci_encrpt_key_rfrsh_cmplt_evnt+0x4c>
 8010220:	2130      	movs	r1, #48	@ 0x30
 8010222:	7001      	strb	r1, [r0, #0]
 8010224:	2103      	movs	r1, #3
 8010226:	f646 5224 	movw	r2, #27940	@ 0x6d24
 801022a:	7041      	strb	r1, [r0, #1]
 801022c:	7085      	strb	r5, [r0, #2]
 801022e:	70c4      	strb	r4, [r0, #3]
 8010230:	0a21      	lsrs	r1, r4, #8
 8010232:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8010236:	6814      	ldr	r4, [r2, #0]
 8010238:	7101      	strb	r1, [r0, #4]
 801023a:	2105      	movs	r1, #5
 801023c:	f7ff fa84 	bl	800f748 <hci_form_hdr>
 8010240:	4621      	mov	r1, r4
 8010242:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8010246:	4708      	bx	r1
 8010248:	bdb0      	pop	{r4, r5, r7, pc}

0801024a <hci_authn_pyld_tout_exprd_evnt>:
 801024a:	b510      	push	{r4, lr}
 801024c:	f646 5128 	movw	r1, #27944	@ 0x6d28
 8010250:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8010254:	7b89      	ldrb	r1, [r1, #14]
 8010256:	0609      	lsls	r1, r1, #24
 8010258:	bf58      	it	pl
 801025a:	bd10      	poppl	{r4, pc}
 801025c:	4604      	mov	r4, r0
 801025e:	f647 3078 	movw	r0, #31608	@ 0x7b78
 8010262:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010266:	f00d fc27 	bl	801dab8 <os_mem_pool_alloc>
 801026a:	b190      	cbz	r0, 8010292 <hci_authn_pyld_tout_exprd_evnt+0x48>
 801026c:	2157      	movs	r1, #87	@ 0x57
 801026e:	7001      	strb	r1, [r0, #0]
 8010270:	2102      	movs	r1, #2
 8010272:	7041      	strb	r1, [r0, #1]
 8010274:	0a21      	lsrs	r1, r4, #8
 8010276:	70c1      	strb	r1, [r0, #3]
 8010278:	f646 5124 	movw	r1, #27940	@ 0x6d24
 801027c:	7084      	strb	r4, [r0, #2]
 801027e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8010282:	680c      	ldr	r4, [r1, #0]
 8010284:	2104      	movs	r1, #4
 8010286:	f7ff fa5f 	bl	800f748 <hci_form_hdr>
 801028a:	4621      	mov	r1, r4
 801028c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010290:	4708      	bx	r1
 8010292:	bd10      	pop	{r4, pc}

08010294 <hci_le_long_trm_key_rqst_evnt>:
 8010294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010296:	b081      	sub	sp, #4
 8010298:	4614      	mov	r4, r2
 801029a:	f646 5228 	movw	r2, #27944	@ 0x6d28
 801029e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80102a2:	6993      	ldr	r3, [r2, #24]
 80102a4:	b353      	cbz	r3, 80102fc <hci_le_long_trm_key_rqst_evnt+0x68>
 80102a6:	4607      	mov	r7, r0
 80102a8:	7c10      	ldrb	r0, [r2, #16]
 80102aa:	06c0      	lsls	r0, r0, #27
 80102ac:	d401      	bmi.n	80102b2 <hci_le_long_trm_key_rqst_evnt+0x1e>
 80102ae:	201a      	movs	r0, #26
 80102b0:	e025      	b.n	80102fe <hci_le_long_trm_key_rqst_evnt+0x6a>
 80102b2:	f647 3078 	movw	r0, #31608	@ 0x7b78
 80102b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80102ba:	460d      	mov	r5, r1
 80102bc:	f00d fbfc 	bl	801dab8 <os_mem_pool_alloc>
 80102c0:	b1f8      	cbz	r0, 8010302 <hci_le_long_trm_key_rqst_evnt+0x6e>
 80102c2:	4606      	mov	r6, r0
 80102c4:	203e      	movs	r0, #62	@ 0x3e
 80102c6:	7030      	strb	r0, [r6, #0]
 80102c8:	200d      	movs	r0, #13
 80102ca:	7070      	strb	r0, [r6, #1]
 80102cc:	2005      	movs	r0, #5
 80102ce:	70b0      	strb	r0, [r6, #2]
 80102d0:	0a38      	lsrs	r0, r7, #8
 80102d2:	7130      	strb	r0, [r6, #4]
 80102d4:	1d70      	adds	r0, r6, #5
 80102d6:	4629      	mov	r1, r5
 80102d8:	2208      	movs	r2, #8
 80102da:	70f7      	strb	r7, [r6, #3]
 80102dc:	f010 fab2 	bl	8020844 <ble_memcpy>
 80102e0:	0a20      	lsrs	r0, r4, #8
 80102e2:	73b0      	strb	r0, [r6, #14]
 80102e4:	f646 5024 	movw	r0, #27940	@ 0x6d24
 80102e8:	7871      	ldrb	r1, [r6, #1]
 80102ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80102ee:	7374      	strb	r4, [r6, #13]
 80102f0:	6804      	ldr	r4, [r0, #0]
 80102f2:	3102      	adds	r1, #2
 80102f4:	4630      	mov	r0, r6
 80102f6:	f7ff fa27 	bl	800f748 <hci_form_hdr>
 80102fa:	47a0      	blx	r4
 80102fc:	2000      	movs	r0, #0
 80102fe:	b001      	add	sp, #4
 8010300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010302:	2042      	movs	r0, #66	@ 0x42
 8010304:	f00b fb56 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8010308:	2007      	movs	r0, #7
 801030a:	e7f8      	b.n	80102fe <hci_le_long_trm_key_rqst_evnt+0x6a>

0801030c <hci_le_chnl_sel_algo_evnt>:
 801030c:	b5b0      	push	{r4, r5, r7, lr}
 801030e:	f646 5228 	movw	r2, #27944	@ 0x6d28
 8010312:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8010316:	6993      	ldr	r3, [r2, #24]
 8010318:	b30b      	cbz	r3, 801035e <hci_le_chnl_sel_algo_evnt+0x52>
 801031a:	4605      	mov	r5, r0
 801031c:	7c90      	ldrb	r0, [r2, #18]
 801031e:	0700      	lsls	r0, r0, #28
 8010320:	d51d      	bpl.n	801035e <hci_le_chnl_sel_algo_evnt+0x52>
 8010322:	f647 3078 	movw	r0, #31608	@ 0x7b78
 8010326:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801032a:	460c      	mov	r4, r1
 801032c:	f00d fbc4 	bl	801dab8 <os_mem_pool_alloc>
 8010330:	b1a8      	cbz	r0, 801035e <hci_le_chnl_sel_algo_evnt+0x52>
 8010332:	213e      	movs	r1, #62	@ 0x3e
 8010334:	7001      	strb	r1, [r0, #0]
 8010336:	2104      	movs	r1, #4
 8010338:	7041      	strb	r1, [r0, #1]
 801033a:	2114      	movs	r1, #20
 801033c:	7081      	strb	r1, [r0, #2]
 801033e:	0a29      	lsrs	r1, r5, #8
 8010340:	7101      	strb	r1, [r0, #4]
 8010342:	f646 5124 	movw	r1, #27940	@ 0x6d24
 8010346:	70c5      	strb	r5, [r0, #3]
 8010348:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801034c:	680d      	ldr	r5, [r1, #0]
 801034e:	2106      	movs	r1, #6
 8010350:	7144      	strb	r4, [r0, #5]
 8010352:	f7ff f9f9 	bl	800f748 <hci_form_hdr>
 8010356:	4629      	mov	r1, r5
 8010358:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801035c:	4708      	bx	r1
 801035e:	bdb0      	pop	{r4, r5, r7, pc}

08010360 <hci_le_update_clock_accuracy_cmp_evnt>:
 8010360:	b5b0      	push	{r4, r5, r7, lr}
 8010362:	f646 5244 	movw	r2, #27972	@ 0x6d44
 8010366:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801036a:	7812      	ldrb	r2, [r2, #0]
 801036c:	460c      	mov	r4, r1
 801036e:	0791      	lsls	r1, r2, #30
 8010370:	bf58      	it	pl
 8010372:	bdb0      	poppl	{r4, r5, r7, pc}
 8010374:	4605      	mov	r5, r0
 8010376:	f647 3078 	movw	r0, #31608	@ 0x7b78
 801037a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801037e:	f00d fb9b 	bl	801dab8 <os_mem_pool_alloc>
 8010382:	b198      	cbz	r0, 80103ac <hci_le_update_clock_accuracy_cmp_evnt+0x4c>
 8010384:	21ff      	movs	r1, #255	@ 0xff
 8010386:	7001      	strb	r1, [r0, #0]
 8010388:	2103      	movs	r1, #3
 801038a:	7041      	strb	r1, [r0, #1]
 801038c:	2102      	movs	r1, #2
 801038e:	7081      	strb	r1, [r0, #2]
 8010390:	f646 5124 	movw	r1, #27940	@ 0x6d24
 8010394:	70c5      	strb	r5, [r0, #3]
 8010396:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801039a:	680d      	ldr	r5, [r1, #0]
 801039c:	2105      	movs	r1, #5
 801039e:	7104      	strb	r4, [r0, #4]
 80103a0:	f7ff f9d2 	bl	800f748 <hci_form_hdr>
 80103a4:	4629      	mov	r1, r5
 80103a6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80103aa:	4708      	bx	r1
 80103ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080103b0 <hci_le_energy_dctn_cmplt_evnt>:
 80103b0:	b5b0      	push	{r4, r5, r7, lr}
 80103b2:	f646 5244 	movw	r2, #27972	@ 0x6d44
 80103b6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80103ba:	7812      	ldrb	r2, [r2, #0]
 80103bc:	460c      	mov	r4, r1
 80103be:	0711      	lsls	r1, r2, #28
 80103c0:	d400      	bmi.n	80103c4 <hci_le_energy_dctn_cmplt_evnt+0x14>
 80103c2:	bdb0      	pop	{r4, r5, r7, pc}
 80103c4:	4605      	mov	r5, r0
 80103c6:	f647 3078 	movw	r0, #31608	@ 0x7b78
 80103ca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80103ce:	f00d fb73 	bl	801dab8 <os_mem_pool_alloc>
 80103d2:	2800      	cmp	r0, #0
 80103d4:	bf08      	it	eq
 80103d6:	bdb0      	popeq	{r4, r5, r7, pc}
 80103d8:	21ff      	movs	r1, #255	@ 0xff
 80103da:	7001      	strb	r1, [r0, #0]
 80103dc:	0061      	lsls	r1, r4, #1
 80103de:	3101      	adds	r1, #1
 80103e0:	7041      	strb	r1, [r0, #1]
 80103e2:	b2c9      	uxtb	r1, r1
 80103e4:	3102      	adds	r1, #2
 80103e6:	2204      	movs	r2, #4
 80103e8:	7082      	strb	r2, [r0, #2]
 80103ea:	b15c      	cbz	r4, 8010404 <hci_le_energy_dctn_cmplt_evnt+0x54>
 80103ec:	1d02      	adds	r2, r0, #4
 80103ee:	bf00      	nop
 80103f0:	f815 3b02 	ldrb.w	r3, [r5], #2
 80103f4:	3c01      	subs	r4, #1
 80103f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80103fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80103fe:	f802 3b02 	strb.w	r3, [r2], #2
 8010402:	d1f5      	bne.n	80103f0 <hci_le_energy_dctn_cmplt_evnt+0x40>
 8010404:	f646 5224 	movw	r2, #27940	@ 0x6d24
 8010408:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801040c:	6814      	ldr	r4, [r2, #0]
 801040e:	f7ff f99b 	bl	800f748 <hci_form_hdr>
 8010412:	4621      	mov	r1, r4
 8010414:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8010418:	4708      	bx	r1

0801041a <ll_intf_init>:
 801041a:	b5b0      	push	{r4, r5, r7, lr}
 801041c:	4604      	mov	r4, r0
 801041e:	202a      	movs	r0, #42	@ 0x2a
 8010420:	f00b fac8 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8010424:	f010 fc46 	bl	8020cb4 <sys_shared_init>
 8010428:	f7ff f9fe 	bl	800f828 <hci_init_events_queues>
 801042c:	f24f 70d5 	movw	r0, #63445	@ 0xf7d5
 8010430:	f6c0 0000 	movt	r0, #2048	@ 0x800
 8010434:	f7ff f936 	bl	800f6a4 <ll_hci_init>
 8010438:	b354      	cbz	r4, 8010490 <ll_intf_init+0x76>
 801043a:	f646 5548 	movw	r5, #27976	@ 0x6d48
 801043e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8010442:	602c      	str	r4, [r5, #0]
 8010444:	f010 fc5b 	bl	8020cfe <ble_mem_init>
 8010448:	f010 fca4 	bl	8020d94 <ble_mem_shared_reset>
 801044c:	f012 f8e0 	bl	8022610 <db_reset>
 8010450:	f008 fb4a 	bl	8018ae8 <non_conn_mngr_reset>
 8010454:	f00a fa6c 	bl	801a930 <prvcy_mngr_reset>
 8010458:	fab0 f080 	clz	r0, r0
 801045c:	0940      	lsrs	r0, r0, #5
 801045e:	2101      	movs	r1, #1
 8010460:	f00b fa5d 	bl	801b91e <bsp_assert>
 8010464:	f003 fe02 	bl	801406c <llhwc_init>
 8010468:	4604      	mov	r4, r0
 801046a:	fab0 f080 	clz	r0, r0
 801046e:	0940      	lsrs	r0, r0, #5
 8010470:	2101      	movs	r1, #1
 8010472:	f00b fa54 	bl	801b91e <bsp_assert>
 8010476:	f010 fdbd 	bl	8020ff4 <conn_mngr_init>
 801047a:	f7fd fb86 	bl	800db8a <evnt_schdlr_init>
 801047e:	6828      	ldr	r0, [r5, #0]
 8010480:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8010482:	f7fe fa97 	bl	800e9b4 <evnt_schdlr_rgstr_end_of_activity_cbk>
 8010486:	200a      	movs	r0, #10
 8010488:	2100      	movs	r1, #0
 801048a:	f7fe fa3c 	bl	800e906 <evnt_schdlr_set_phy_clbr_params>
 801048e:	e000      	b.n	8010492 <ll_intf_init+0x78>
 8010490:	241e      	movs	r4, #30
 8010492:	4620      	mov	r0, r4
 8010494:	bdb0      	pop	{r4, r5, r7, pc}

08010496 <ll_intf_write_bd_addr>:
 8010496:	b120      	cbz	r0, 80104a2 <ll_intf_write_bd_addr+0xc>
 8010498:	b580      	push	{r7, lr}
 801049a:	f012 fa3d 	bl	8022918 <db_set_bd_address>
 801049e:	b2c0      	uxtb	r0, r0
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	2012      	movs	r0, #18
 80104a4:	4770      	bx	lr

080104a6 <ll_intf_le_set_adv_enable>:
 80104a6:	2801      	cmp	r0, #1
 80104a8:	bf84      	itt	hi
 80104aa:	2012      	movhi	r0, #18
 80104ac:	4770      	bxhi	lr
 80104ae:	fab0 f080 	clz	r0, r0
 80104b2:	0940      	lsrs	r0, r0, #5
 80104b4:	f009 b85a 	b.w	801956c <non_conn_mngr_adv_enable>

080104b8 <ll_intf_le_set_adv_data>:
 80104b8:	281f      	cmp	r0, #31
 80104ba:	d805      	bhi.n	80104c8 <ll_intf_le_set_adv_data+0x10>
 80104bc:	b121      	cbz	r1, 80104c8 <ll_intf_le_set_adv_data+0x10>
 80104be:	4602      	mov	r2, r0
 80104c0:	4608      	mov	r0, r1
 80104c2:	4611      	mov	r1, r2
 80104c4:	f008 bfea 	b.w	801949c <non_conn_mngr_set_adv_data>
 80104c8:	2012      	movs	r0, #18
 80104ca:	4770      	bx	lr

080104cc <ll_intf_le_set_adv_params>:
 80104cc:	b5b0      	push	{r4, r5, r7, lr}
 80104ce:	b088      	sub	sp, #32
 80104d0:	f890 c004 	ldrb.w	ip, [r0, #4]
 80104d4:	4604      	mov	r4, r0
 80104d6:	f1bc 0f01 	cmp.w	ip, #1
 80104da:	d101      	bne.n	80104e0 <ll_intf_le_set_adv_params+0x14>
 80104dc:	2201      	movs	r2, #1
 80104de:	e023      	b.n	8010528 <ll_intf_le_set_adv_params+0x5c>
 80104e0:	8821      	ldrh	r1, [r4, #0]
 80104e2:	8863      	ldrh	r3, [r4, #2]
 80104e4:	f1a1 0220 	sub.w	r2, r1, #32
 80104e8:	f643 7ee1 	movw	lr, #16353	@ 0x3fe1
 80104ec:	4572      	cmp	r2, lr
 80104ee:	f04f 0200 	mov.w	r2, #0
 80104f2:	f1a3 0520 	sub.w	r5, r3, #32
 80104f6:	bf38      	it	cc
 80104f8:	2201      	movcc	r2, #1
 80104fa:	4575      	cmp	r5, lr
 80104fc:	f04f 0500 	mov.w	r5, #0
 8010500:	bf38      	it	cc
 8010502:	2501      	movcc	r5, #1
 8010504:	402a      	ands	r2, r5
 8010506:	4299      	cmp	r1, r3
 8010508:	f04f 0100 	mov.w	r1, #0
 801050c:	f04f 0000 	mov.w	r0, #0
 8010510:	bf98      	it	ls
 8010512:	2101      	movls	r1, #1
 8010514:	f1bc 0f04 	cmp.w	ip, #4
 8010518:	ea02 0201 	and.w	r2, r2, r1
 801051c:	d004      	beq.n	8010528 <ll_intf_le_set_adv_params+0x5c>
 801051e:	7ba1      	ldrb	r1, [r4, #14]
 8010520:	2904      	cmp	r1, #4
 8010522:	bf38      	it	cc
 8010524:	2001      	movcc	r0, #1
 8010526:	4002      	ands	r2, r0
 8010528:	f1bc 0f04 	cmp.w	ip, #4
 801052c:	f04f 0012 	mov.w	r0, #18
 8010530:	d82b      	bhi.n	801058a <ll_intf_le_set_adv_params+0xbe>
 8010532:	b352      	cbz	r2, 801058a <ll_intf_le_set_adv_params+0xbe>
 8010534:	7962      	ldrb	r2, [r4, #5]
 8010536:	2a03      	cmp	r2, #3
 8010538:	d827      	bhi.n	801058a <ll_intf_le_set_adv_params+0xbe>
 801053a:	79a3      	ldrb	r3, [r4, #6]
 801053c:	2b01      	cmp	r3, #1
 801053e:	d824      	bhi.n	801058a <ll_intf_le_set_adv_params+0xbe>
 8010540:	7b61      	ldrb	r1, [r4, #13]
 8010542:	1e4d      	subs	r5, r1, #1
 8010544:	2d06      	cmp	r5, #6
 8010546:	d820      	bhi.n	801058a <ll_intf_le_set_adv_params+0xbe>
 8010548:	8820      	ldrh	r0, [r4, #0]
 801054a:	8865      	ldrh	r5, [r4, #2]
 801054c:	f88d 201b 	strb.w	r2, [sp, #27]
 8010550:	e9cd 0502 	strd	r0, r5, [sp, #8]
 8010554:	4668      	mov	r0, sp
 8010556:	3013      	adds	r0, #19
 8010558:	f88d 1010 	strb.w	r1, [sp, #16]
 801055c:	1de1      	adds	r1, r4, #7
 801055e:	2206      	movs	r2, #6
 8010560:	f88d c011 	strb.w	ip, [sp, #17]
 8010564:	f88d 3012 	strb.w	r3, [sp, #18]
 8010568:	f010 f96c 	bl	8020844 <ble_memcpy>
 801056c:	7ba0      	ldrb	r0, [r4, #14]
 801056e:	2803      	cmp	r0, #3
 8010570:	d808      	bhi.n	8010584 <ll_intf_le_set_adv_params+0xb8>
 8010572:	f240 2100 	movw	r1, #512	@ 0x200
 8010576:	00c0      	lsls	r0, r0, #3
 8010578:	f2c0 1103 	movt	r1, #259	@ 0x103
 801057c:	fa21 f000 	lsr.w	r0, r1, r0
 8010580:	f88d 001c 	strb.w	r0, [sp, #28]
 8010584:	4668      	mov	r0, sp
 8010586:	f008 ff59 	bl	801943c <non_conn_mngr_set_adv_params>
 801058a:	b008      	add	sp, #32
 801058c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08010590 <ll_intf_reset>:
 8010590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010592:	b081      	sub	sp, #4
 8010594:	2000      	movs	r0, #0
 8010596:	f8ad 0002 	strh.w	r0, [sp, #2]
 801059a:	f00e f9b1 	bl	801e900 <llhwc_cmn_is_dp_slp_enabled>
 801059e:	b110      	cbz	r0, 80105a6 <ll_intf_reset+0x16>
 80105a0:	2000      	movs	r0, #0
 80105a2:	f00e f940 	bl	801e826 <llhwc_cmn_set_dp_slp_mode>
 80105a6:	f010 ff31 	bl	802140c <conn_mngr_reset>
 80105aa:	f012 f831 	bl	8022610 <db_reset>
 80105ae:	f008 fa9b 	bl	8018ae8 <non_conn_mngr_reset>
 80105b2:	2000      	movs	r0, #0
 80105b4:	2100      	movs	r1, #0
 80105b6:	f7fe f9a6 	bl	800e906 <evnt_schdlr_set_phy_clbr_params>
 80105ba:	f7fd fef5 	bl	800e3a8 <evnt_schdlr_reset>
 80105be:	f00b f8a3 	bl	801b708 <state_mngr_reset>
 80105c2:	f003 fe40 	bl	8014246 <llhwc_is_dtm_enabled>
 80105c6:	b118      	cbz	r0, 80105d0 <ll_intf_reset+0x40>
 80105c8:	f10d 0002 	add.w	r0, sp, #2
 80105cc:	f003 fe45 	bl	801425a <llhwc_stp_dtm>
 80105d0:	f00a f9ae 	bl	801a930 <prvcy_mngr_reset>
 80105d4:	2600      	movs	r6, #0
 80105d6:	f003 f8e5 	bl	80137a4 <llhwc_reset>
 80105da:	4604      	mov	r4, r0
 80105dc:	a712      	add	r7, pc, #72	@ (adr r7, 8010628 <ll_intf_reset+0x98>)
 80105de:	bf00      	nop
 80105e0:	5dbd      	ldrb	r5, [r7, r6]
 80105e2:	bf00      	nop
 80105e4:	4628      	mov	r0, r5
 80105e6:	f00d f94c 	bl	801d882 <emngr_get_handle_events>
 80105ea:	b138      	cbz	r0, 80105fc <ll_intf_reset+0x6c>
 80105ec:	4628      	mov	r0, r5
 80105ee:	f00d f8f2 	bl	801d7d6 <emngr_get_event>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d0f6      	beq.n	80105e4 <ll_intf_reset+0x54>
 80105f6:	f000 f8a1 	bl	801073c <ll_intf_free_ll_pkt_hndlr>
 80105fa:	e7f3      	b.n	80105e4 <ll_intf_reset+0x54>
 80105fc:	3601      	adds	r6, #1
 80105fe:	2e03      	cmp	r6, #3
 8010600:	d1ee      	bne.n	80105e0 <ll_intf_reset+0x50>
 8010602:	f010 fbc7 	bl	8020d94 <ble_mem_shared_reset>
 8010606:	2002      	movs	r0, #2
 8010608:	f00f fc5e 	bl	801fec8 <llhwc_cmn_set_controller_activity>
 801060c:	f005 f888 	bl	8015720 <llhwc_is_in_augmented_mode>
 8010610:	2801      	cmp	r0, #1
 8010612:	bf08      	it	eq
 8010614:	f005 f87d 	bleq	8015712 <llhwc_stop_augmented_mode>
 8010618:	200a      	movs	r0, #10
 801061a:	2100      	movs	r1, #0
 801061c:	f7fe f973 	bl	800e906 <evnt_schdlr_set_phy_clbr_params>
 8010620:	4620      	mov	r0, r4
 8010622:	b001      	add	sp, #4
 8010624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010626:	bf00      	nop
 8010628:	00080706 	.word	0x00080706

0801062c <ll_intf_rcvd_long_trm_key>:
 801062c:	0a02      	lsrs	r2, r0, #8
 801062e:	2a0e      	cmp	r2, #14
 8010630:	bf84      	itt	hi
 8010632:	2012      	movhi	r0, #18
 8010634:	4770      	bxhi	lr
 8010636:	f002 ba91 	b.w	8012b5c <llcp_start_encryption>

0801063a <ll_intf_le_strt_encrpt>:
 801063a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801063e:	f1bc 0f0e 	cmp.w	ip, #14
 8010642:	d803      	bhi.n	801064c <ll_intf_le_strt_encrpt+0x12>
 8010644:	b111      	cbz	r1, 801064c <ll_intf_le_strt_encrpt+0x12>
 8010646:	b10b      	cbz	r3, 801064c <ll_intf_le_strt_encrpt+0x12>
 8010648:	f000 bc62 	b.w	8010f10 <llcp_encryption_req>
 801064c:	2012      	movs	r0, #18
 801064e:	4770      	bx	lr

08010650 <ll_intf_le_set_addr_rsln_enble>:
 8010650:	2801      	cmp	r0, #1
 8010652:	bf84      	itt	hi
 8010654:	2012      	movhi	r0, #18
 8010656:	4770      	bxhi	lr
 8010658:	f00a bf7b 	b.w	801b552 <prvcy_mngr_set_addr_rsln_enble>

0801065c <ll_intf_le_read_adv_channel_tx_power>:
 801065c:	b5b0      	push	{r4, r5, r7, lr}
 801065e:	b180      	cbz	r0, 8010682 <ll_intf_le_read_adv_channel_tx_power+0x26>
 8010660:	4605      	mov	r5, r0
 8010662:	f012 f883 	bl	802276c <db_get_advertising_channel_tx_power>
 8010666:	f995 1000 	ldrsb.w	r1, [r5]
 801066a:	4604      	mov	r4, r0
 801066c:	4608      	mov	r0, r1
 801066e:	4629      	mov	r1, r5
 8010670:	f012 f8c5 	bl	80227fe <db_get_radiative_tx_pwr>
 8010674:	f995 0000 	ldrsb.w	r0, [r5]
 8010678:	2815      	cmp	r0, #21
 801067a:	bfa4      	itt	ge
 801067c:	2014      	movge	r0, #20
 801067e:	7028      	strbge	r0, [r5, #0]
 8010680:	e000      	b.n	8010684 <ll_intf_le_read_adv_channel_tx_power+0x28>
 8010682:	2412      	movs	r4, #18
 8010684:	4620      	mov	r0, r4
 8010686:	bdb0      	pop	{r4, r5, r7, pc}

08010688 <ll_intf_le_set_scan_enable>:
 8010688:	2801      	cmp	r0, #1
 801068a:	d805      	bhi.n	8010698 <ll_intf_le_set_scan_enable+0x10>
 801068c:	b130      	cbz	r0, 801069c <ll_intf_le_set_scan_enable+0x14>
 801068e:	2901      	cmp	r1, #1
 8010690:	bf9c      	itt	ls
 8010692:	2000      	movls	r0, #0
 8010694:	f008 bbb4 	bls.w	8018e00 <non_conn_mngr_scan_enable>
 8010698:	2012      	movs	r0, #18
 801069a:	4770      	bx	lr
 801069c:	2001      	movs	r0, #1
 801069e:	f008 bbaf 	b.w	8018e00 <non_conn_mngr_scan_enable>

080106a2 <ll_intf_le_add_device_white_list>:
 80106a2:	4602      	mov	r2, r0
 80106a4:	28ff      	cmp	r0, #255	@ 0xff
 80106a6:	d002      	beq.n	80106ae <ll_intf_le_add_device_white_list+0xc>
 80106a8:	2a01      	cmp	r2, #1
 80106aa:	d805      	bhi.n	80106b8 <ll_intf_le_add_device_white_list+0x16>
 80106ac:	b121      	cbz	r1, 80106b8 <ll_intf_le_add_device_white_list+0x16>
 80106ae:	4608      	mov	r0, r1
 80106b0:	4611      	mov	r1, r2
 80106b2:	2200      	movs	r2, #0
 80106b4:	f008 ba71 	b.w	8018b9a <non_conn_mngr_add_rmv_clr_device_white_list>
 80106b8:	2012      	movs	r0, #18
 80106ba:	4770      	bx	lr

080106bc <ll_intf_le_clear_white_list>:
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	f10d 0002 	add.w	r0, sp, #2
 80106c4:	2100      	movs	r1, #0
 80106c6:	2202      	movs	r2, #2
 80106c8:	f008 fa67 	bl	8018b9a <non_conn_mngr_add_rmv_clr_device_white_list>
 80106cc:	b002      	add	sp, #8
 80106ce:	bd80      	pop	{r7, pc}

080106d0 <ll_intf_le_set_random_addr>:
 80106d0:	2800      	cmp	r0, #0
 80106d2:	bf04      	itt	eq
 80106d4:	2012      	moveq	r0, #18
 80106d6:	4770      	bxeq	lr
 80106d8:	f009 ba69 	b.w	8019bae <non_conn_mngr_set_random_address>

080106dc <ll_intf_le_set_default_phy_cmd>:
 80106dc:	ea42 0301 	orr.w	r3, r2, r1
 80106e0:	2b07      	cmp	r3, #7
 80106e2:	d80d      	bhi.n	8010700 <ll_intf_le_set_default_phy_cmd+0x24>
 80106e4:	2803      	cmp	r0, #3
 80106e6:	d80d      	bhi.n	8010704 <ll_intf_le_set_default_phy_cmd+0x28>
 80106e8:	b918      	cbnz	r0, 80106f2 <ll_intf_le_set_default_phy_cmd+0x16>
 80106ea:	f04f 0311 	mov.w	r3, #17
 80106ee:	b151      	cbz	r1, 8010706 <ll_intf_le_set_default_phy_cmd+0x2a>
 80106f0:	b14a      	cbz	r2, 8010706 <ll_intf_le_set_default_phy_cmd+0x2a>
 80106f2:	b580      	push	{r7, lr}
 80106f4:	f012 f93a 	bl	802296c <db_le_set_default_phy_cmd>
 80106f8:	b2c3      	uxtb	r3, r0
 80106fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80106fe:	e002      	b.n	8010706 <ll_intf_le_set_default_phy_cmd+0x2a>
 8010700:	2311      	movs	r3, #17
 8010702:	e000      	b.n	8010706 <ll_intf_le_set_default_phy_cmd+0x2a>
 8010704:	2312      	movs	r3, #18
 8010706:	4618      	mov	r0, r3
 8010708:	4770      	bx	lr

0801070a <ll_intf_acl_data_from_host_to_cntrlr>:
 801070a:	b5b0      	push	{r4, r5, r7, lr}
 801070c:	4605      	mov	r5, r0
 801070e:	202b      	movs	r0, #43	@ 0x2b
 8010710:	460c      	mov	r4, r1
 8010712:	f00b f94b 	bl	801b9ac <bsp_debug_gpio_set>
 8010716:	b17c      	cbz	r4, 8010738 <ll_intf_acl_data_from_host_to_cntrlr+0x2e>
 8010718:	f5b5 6f70 	cmp.w	r5, #3840	@ 0xf00
 801071c:	d209      	bcs.n	8010732 <ll_intf_acl_data_from_host_to_cntrlr+0x28>
 801071e:	4628      	mov	r0, r5
 8010720:	4621      	mov	r1, r4
 8010722:	f011 f8c5 	bl	80218b0 <conn_mngr_send_pkt>
 8010726:	4604      	mov	r4, r0
 8010728:	202b      	movs	r0, #43	@ 0x2b
 801072a:	f00b f941 	bl	801b9b0 <bsp_debug_gpio_clear>
 801072e:	b2e0      	uxtb	r0, r4
 8010730:	bdb0      	pop	{r4, r5, r7, pc}
 8010732:	4620      	mov	r0, r4
 8010734:	f000 f802 	bl	801073c <ll_intf_free_ll_pkt_hndlr>
 8010738:	2012      	movs	r0, #18
 801073a:	bdb0      	pop	{r4, r5, r7, pc}

0801073c <ll_intf_free_ll_pkt_hndlr>:
 801073c:	b510      	push	{r4, lr}
 801073e:	4604      	mov	r4, r0
 8010740:	202c      	movs	r0, #44	@ 0x2c
 8010742:	f00b f933 	bl	801b9ac <bsp_debug_gpio_set>
 8010746:	6820      	ldr	r0, [r4, #0]
 8010748:	f00b f8ee 	bl	801b928 <bsp_is_ptr_in_ble_mem>
 801074c:	6821      	ldr	r1, [r4, #0]
 801074e:	2800      	cmp	r0, #0
 8010750:	bf18      	it	ne
 8010752:	3904      	subne	r1, #4
 8010754:	4608      	mov	r0, r1
 8010756:	f00d f9b1 	bl	801dabc <os_mem_pool_free>
 801075a:	4620      	mov	r0, r4
 801075c:	f00d f9ae 	bl	801dabc <os_mem_pool_free>
 8010760:	202c      	movs	r0, #44	@ 0x2c
 8010762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010766:	f00b b923 	b.w	801b9b0 <bsp_debug_gpio_clear>

0801076a <ll_intf_set_conn_tx_power_level>:
 801076a:	b5b0      	push	{r4, r5, r7, lr}
 801076c:	4605      	mov	r5, r0
 801076e:	8800      	ldrh	r0, [r0, #0]
 8010770:	0a02      	lsrs	r2, r0, #8
 8010772:	2a0e      	cmp	r2, #14
 8010774:	bf84      	itt	hi
 8010776:	2030      	movhi	r0, #48	@ 0x30
 8010778:	bdb0      	pophi	{r4, r5, r7, pc}
 801077a:	2807      	cmp	r0, #7
 801077c:	bf84      	itt	hi
 801077e:	2002      	movhi	r0, #2
 8010780:	bdb0      	pophi	{r4, r5, r7, pc}
 8010782:	f991 0000 	ldrsb.w	r0, [r1]
 8010786:	460c      	mov	r4, r1
 8010788:	f012 f854 	bl	8022834 <db_get_phy_conf_tx_pwr>
 801078c:	4628      	mov	r0, r5
 801078e:	4621      	mov	r1, r4
 8010790:	f011 fc2b 	bl	8021fea <conn_mngr_set_conn_tx_power_level>
 8010794:	f994 1000 	ldrsb.w	r1, [r4]
 8010798:	4605      	mov	r5, r0
 801079a:	4608      	mov	r0, r1
 801079c:	4621      	mov	r1, r4
 801079e:	f012 f82e 	bl	80227fe <db_get_radiative_tx_pwr>
 80107a2:	4628      	mov	r0, r5
 80107a4:	bdb0      	pop	{r4, r5, r7, pc}

080107a6 <ll_intf_le_write_tx_pwr>:
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b082      	sub	sp, #8
 80107aa:	2100      	movs	r1, #0
 80107ac:	f88d 1006 	strb.w	r1, [sp, #6]
 80107b0:	f88d 1005 	strb.w	r1, [sp, #5]
 80107b4:	f10d 0107 	add.w	r1, sp, #7
 80107b8:	f88d 0007 	strb.w	r0, [sp, #7]
 80107bc:	f012 f83a 	bl	8022834 <db_get_phy_conf_tx_pwr>
 80107c0:	f10d 0006 	add.w	r0, sp, #6
 80107c4:	f10d 0105 	add.w	r1, sp, #5
 80107c8:	f00d fdb1 	bl	801e32e <ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels>
 80107cc:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80107d0:	f99d 1006 	ldrsb.w	r1, [sp, #6]
 80107d4:	4288      	cmp	r0, r1
 80107d6:	f04f 0111 	mov.w	r1, #17
 80107da:	db13      	blt.n	8010804 <ll_intf_le_write_tx_pwr+0x5e>
 80107dc:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 80107e0:	4290      	cmp	r0, r2
 80107e2:	dc0f      	bgt.n	8010804 <ll_intf_le_write_tx_pwr+0x5e>
 80107e4:	2101      	movs	r1, #1
 80107e6:	2201      	movs	r2, #1
 80107e8:	f00d fdb4 	bl	801e354 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 80107ec:	f247 3104 	movw	r1, #29444	@ 0x7304
 80107f0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80107f4:	6809      	ldr	r1, [r1, #0]
 80107f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80107fa:	f990 0003 	ldrsb.w	r0, [r0, #3]
 80107fe:	f011 ffd9 	bl	80227b4 <db_set_tx_power_value>
 8010802:	4601      	mov	r1, r0
 8010804:	4608      	mov	r0, r1
 8010806:	b002      	add	sp, #8
 8010808:	bd80      	pop	{r7, pc}

0801080a <ll_intf_le_set_sleep_clock_accuracy>:
 801080a:	b510      	push	{r4, lr}
 801080c:	b082      	sub	sp, #8
 801080e:	4604      	mov	r4, r0
 8010810:	f011 fa1c 	bl	8021c4c <conn_mngr_get_run_conn_no>
 8010814:	b188      	cbz	r0, 801083a <ll_intf_le_set_sleep_clock_accuracy+0x30>
 8010816:	f10d 0007 	add.w	r0, sp, #7
 801081a:	f012 f82e 	bl	802287a <db_get_slp_clk_accuracy>
 801081e:	b980      	cbnz	r0, 8010842 <ll_intf_le_set_sleep_clock_accuracy+0x38>
 8010820:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010824:	42a1      	cmp	r1, r4
 8010826:	d204      	bcs.n	8010832 <ll_intf_le_set_sleep_clock_accuracy+0x28>
 8010828:	4620      	mov	r0, r4
 801082a:	f7fe ff05 	bl	800f638 <evnt_utils_update_sleep_clock_accuracy>
 801082e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010832:	4620      	mov	r0, r4
 8010834:	f011 fb52 	bl	8021edc <conn_mngr_trigger_sleep_clock_accuracy_update>
 8010838:	e003      	b.n	8010842 <ll_intf_le_set_sleep_clock_accuracy+0x38>
 801083a:	4620      	mov	r0, r4
 801083c:	f7fe fefc 	bl	800f638 <evnt_utils_update_sleep_clock_accuracy>
 8010840:	2000      	movs	r0, #0
 8010842:	b002      	add	sp, #8
 8010844:	bd10      	pop	{r4, pc}

08010846 <ll_intf_le_set_dp_slp_mode>:
 8010846:	2801      	cmp	r0, #1
 8010848:	bf84      	itt	hi
 801084a:	2012      	movhi	r0, #18
 801084c:	4770      	bxhi	lr
 801084e:	f7fe b86a 	b.w	800e926 <evnt_schdlr_set_dp_slp_mode>

08010852 <ll_intf_select_tx_power_table>:
 8010852:	b510      	push	{r4, lr}
 8010854:	4604      	mov	r4, r0
 8010856:	f7fe f894 	bl	800e982 <evnt_schdlr_select_tx_power_mode>
 801085a:	0601      	lsls	r1, r0, #24
 801085c:	d105      	bne.n	801086a <ll_intf_select_tx_power_table+0x18>
 801085e:	4620      	mov	r0, r4
 8010860:	f00d fd0e 	bl	801e280 <ll_tx_pwr_if_select_tx_power_mode>
 8010864:	2800      	cmp	r0, #0
 8010866:	bf18      	it	ne
 8010868:	2012      	movne	r0, #18
 801086a:	b2c0      	uxtb	r0, r0
 801086c:	bd10      	pop	{r4, pc}

0801086e <ll_intf_alloc_ll_pkt>:
 801086e:	f649 60f8 	movw	r0, #40696	@ 0x9ef8
 8010872:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010876:	f00d b923 	b.w	801dac0 <os_shrd_mem_alloc>

0801087a <ll_intf_set_end_of_activity_mask>:
 801087a:	b580      	push	{r7, lr}
 801087c:	f7fd fdf1 	bl	800e462 <evnt_schdlr_set_end_of_activity_mask>
 8010880:	2000      	movs	r0, #0
 8010882:	bd80      	pop	{r7, pc}

08010884 <ll_intf_get_link_status>:
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	4604      	mov	r4, r0
 801088a:	2000      	movs	r0, #0
 801088c:	460d      	mov	r5, r1
 801088e:	f88d 0007 	strb.w	r0, [sp, #7]
 8010892:	4620      	mov	r0, r4
 8010894:	2100      	movs	r1, #0
 8010896:	220a      	movs	r2, #10
 8010898:	f010 f824 	bl	80208e4 <ble_memset>
 801089c:	4628      	mov	r0, r5
 801089e:	21ff      	movs	r1, #255	@ 0xff
 80108a0:	2214      	movs	r2, #20
 80108a2:	f010 f81f 	bl	80208e4 <ble_memset>
 80108a6:	f10d 0006 	add.w	r0, sp, #6
 80108aa:	f004 ff3f 	bl	801572c <llhwc_get_dtm_curr_mode>
 80108ae:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80108b2:	f1a0 0109 	sub.w	r1, r0, #9
 80108b6:	2901      	cmp	r1, #1
 80108b8:	d805      	bhi.n	80108c6 <ll_intf_get_link_status+0x42>
 80108ba:	2107      	movs	r1, #7
 80108bc:	2809      	cmp	r0, #9
 80108be:	bf08      	it	eq
 80108c0:	2106      	moveq	r1, #6
 80108c2:	7021      	strb	r1, [r4, #0]
 80108c4:	e00b      	b.n	80108de <ll_intf_get_link_status+0x5a>
 80108c6:	f10d 0607 	add.w	r6, sp, #7
 80108ca:	4620      	mov	r0, r4
 80108cc:	4629      	mov	r1, r5
 80108ce:	4632      	mov	r2, r6
 80108d0:	f011 fbf0 	bl	80220b4 <conn_mngr_get_link_status>
 80108d4:	4620      	mov	r0, r4
 80108d6:	4629      	mov	r1, r5
 80108d8:	4632      	mov	r2, r6
 80108da:	f009 f987 	bl	8019bec <non_conn_mngr_get_link_status>
 80108de:	2000      	movs	r0, #0
 80108e0:	b002      	add	sp, #8
 80108e2:	bd70      	pop	{r4, r5, r6, pc}

080108e4 <ll_intf_get_aligned_us_now>:
 80108e4:	f00f be32 	b.w	802054c <llhwc_cmn_get_aligned_us_now>

080108e8 <ll_intf_rgstr_hst_cbk>:
 80108e8:	b510      	push	{r4, lr}
 80108ea:	2101      	movs	r1, #1
 80108ec:	4604      	mov	r4, r0
 80108ee:	2800      	cmp	r0, #0
 80108f0:	bf18      	it	ne
 80108f2:	2001      	movne	r0, #1
 80108f4:	f00b f813 	bl	801b91e <bsp_assert>
 80108f8:	4620      	mov	r0, r4
 80108fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108fe:	f7fe bfce 	b.w	800f89e <hci_rgstr_hst_cbk>

08010902 <ll_intf_rgstr_hst_cbk_ll_queue_full>:
 8010902:	b510      	push	{r4, lr}
 8010904:	2101      	movs	r1, #1
 8010906:	4604      	mov	r4, r0
 8010908:	2800      	cmp	r0, #0
 801090a:	bf18      	it	ne
 801090c:	2001      	movne	r0, #1
 801090e:	f00b f806 	bl	801b91e <bsp_assert>
 8010912:	4620      	mov	r0, r4
 8010914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010918:	f7fe bfc7 	b.w	800f8aa <hci_rgstr_hst_cbk_ll_queue_full>

0801091c <ll_intf_chng_evnt_hndlr_state>:
 801091c:	b510      	push	{r4, lr}
 801091e:	4604      	mov	r4, r0
 8010920:	0780      	lsls	r0, r0, #30
 8010922:	d503      	bpl.n	801092c <ll_intf_chng_evnt_hndlr_state+0x10>
 8010924:	2007      	movs	r0, #7
 8010926:	2100      	movs	r1, #0
 8010928:	f00c ffb5 	bl	801d896 <emngr_set_event_handle_busy>
 801092c:	0720      	lsls	r0, r4, #28
 801092e:	d503      	bpl.n	8010938 <ll_intf_chng_evnt_hndlr_state+0x1c>
 8010930:	2008      	movs	r0, #8
 8010932:	2100      	movs	r1, #0
 8010934:	f00c ffaf 	bl	801d896 <emngr_set_event_handle_busy>
 8010938:	07e0      	lsls	r0, r4, #31
 801093a:	bf08      	it	eq
 801093c:	bd10      	popeq	{r4, pc}
 801093e:	2006      	movs	r0, #6
 8010940:	2100      	movs	r1, #0
 8010942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010946:	f00c bfa6 	b.w	801d896 <emngr_set_event_handle_busy>

0801094a <ll_intf_set_event_mask>:
 801094a:	f7fe bfd1 	b.w	800f8f0 <hci_ll_set_event_mask>

0801094e <ll_intf_set_event_mask_page2>:
 801094e:	f7fe bff2 	b.w	800f936 <hci_ll_set_event_mask_page2>

08010952 <ll_intf_set_le_event_mask>:
 8010952:	f7fe bfb0 	b.w	800f8b6 <hci_ll_set_le_event_mask>

08010956 <ll_intf_clear_event>:
 8010956:	b580      	push	{r7, lr}
 8010958:	b082      	sub	sp, #8
 801095a:	2100      	movs	r1, #0
 801095c:	2807      	cmp	r0, #7
 801095e:	f88d 1004 	strb.w	r1, [sp, #4]
 8010962:	f8ad 0006 	strh.w	r0, [sp, #6]
 8010966:	d809      	bhi.n	801097c <ll_intf_clear_event+0x26>
 8010968:	f249 33ef 	movw	r3, #37871	@ 0x93ef
 801096c:	aa01      	add	r2, sp, #4
 801096e:	2007      	movs	r0, #7
 8010970:	2100      	movs	r1, #0
 8010972:	f6c0 0301 	movt	r3, #2049	@ 0x801
 8010976:	f00d f849 	bl	801da0c <emngr_remove_conditional_event>
 801097a:	e000      	b.n	801097e <ll_intf_clear_event+0x28>
 801097c:	2002      	movs	r0, #2
 801097e:	b002      	add	sp, #8
 8010980:	bd80      	pop	{r7, pc}

08010982 <ll_intf_set_custom_event_mask>:
 8010982:	f7fe bff5 	b.w	800f970 <hci_ll_set_custom_event_mask>
	...

08010988 <llcp_set_req_chnls_in_min_chnls_prcdr>:
 8010988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801098a:	b081      	sub	sp, #4
 801098c:	460c      	mov	r4, r1
 801098e:	2101      	movs	r1, #1
 8010990:	4605      	mov	r5, r0
 8010992:	2800      	cmp	r0, #0
 8010994:	bf18      	it	ne
 8010996:	2001      	movne	r0, #1
 8010998:	2601      	movs	r6, #1
 801099a:	f00a ffc0 	bl	801b91e <bsp_assert>
 801099e:	4620      	mov	r0, r4
 80109a0:	f011 f91c 	bl	8021bdc <conn_mngr_calc_num_of_used_data_chnls>
 80109a4:	f895 1138 	ldrb.w	r1, [r5, #312]	@ 0x138
 80109a8:	4281      	cmp	r1, r0
 80109aa:	d934      	bls.n	8010a16 <llcp_set_req_chnls_in_min_chnls_prcdr+0x8e>
 80109ac:	1a09      	subs	r1, r1, r0
 80109ae:	f04f 0e00 	mov.w	lr, #0
 80109b2:	f20f 0c70 	addw	ip, pc, #112	@ 0x70
 80109b6:	f1be 0f09 	cmp.w	lr, #9
 80109ba:	d217      	bcs.n	80109ec <llcp_set_req_chnls_in_min_chnls_prcdr+0x64>
 80109bc:	2204      	movs	r2, #4
 80109be:	f1be 0f05 	cmp.w	lr, #5
 80109c2:	bf38      	it	cc
 80109c4:	2202      	movcc	r2, #2
 80109c6:	f81c 500e 	ldrb.w	r5, [ip, lr]
 80109ca:	f1be 0f02 	cmp.w	lr, #2
 80109ce:	bf38      	it	cc
 80109d0:	2201      	movcc	r2, #1
 80109d2:	5ca3      	ldrb	r3, [r4, r2]
 80109d4:	fa06 f505 	lsl.w	r5, r6, r5
 80109d8:	421d      	tst	r5, r3
 80109da:	d102      	bne.n	80109e2 <llcp_set_req_chnls_in_min_chnls_prcdr+0x5a>
 80109dc:	432b      	orrs	r3, r5
 80109de:	3901      	subs	r1, #1
 80109e0:	54a3      	strb	r3, [r4, r2]
 80109e2:	f10e 0e01 	add.w	lr, lr, #1
 80109e6:	060a      	lsls	r2, r1, #24
 80109e8:	d1e5      	bne.n	80109b6 <llcp_set_req_chnls_in_min_chnls_prcdr+0x2e>
 80109ea:	e014      	b.n	8010a16 <llcp_set_req_chnls_in_min_chnls_prcdr+0x8e>
 80109ec:	2500      	movs	r5, #0
 80109ee:	5d63      	ldrb	r3, [r4, r5]
 80109f0:	2200      	movs	r2, #0
 80109f2:	bf00      	nop
 80109f4:	fa06 f702 	lsl.w	r7, r6, r2
 80109f8:	421f      	tst	r7, r3
 80109fa:	d105      	bne.n	8010a08 <llcp_set_req_chnls_in_min_chnls_prcdr+0x80>
 80109fc:	b2ff      	uxtb	r7, r7
 80109fe:	3901      	subs	r1, #1
 8010a00:	433b      	orrs	r3, r7
 8010a02:	060f      	lsls	r7, r1, #24
 8010a04:	5563      	strb	r3, [r4, r5]
 8010a06:	d006      	beq.n	8010a16 <llcp_set_req_chnls_in_min_chnls_prcdr+0x8e>
 8010a08:	3201      	adds	r2, #1
 8010a0a:	2a08      	cmp	r2, #8
 8010a0c:	d1f2      	bne.n	80109f4 <llcp_set_req_chnls_in_min_chnls_prcdr+0x6c>
 8010a0e:	3501      	adds	r5, #1
 8010a10:	2d02      	cmp	r5, #2
 8010a12:	d1ec      	bne.n	80109ee <llcp_set_req_chnls_in_min_chnls_prcdr+0x66>
 8010a14:	e7e7      	b.n	80109e6 <llcp_set_req_chnls_in_min_chnls_prcdr+0x5e>
 8010a16:	2100      	movs	r1, #0
 8010a18:	2802      	cmp	r0, #2
 8010a1a:	bf38      	it	cc
 8010a1c:	211e      	movcc	r1, #30
 8010a1e:	4608      	mov	r0, r1
 8010a20:	b001      	add	sp, #4
 8010a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a24 <low_interefernce_chnls_loc>:
 8010a24:	06050201 	.word	0x06050201
 8010a28:	03020107 	.word	0x03020107
 8010a2c:	00000004 	.word	0x00000004

08010a30 <llcp_le_set_phy_cmd>:
 8010a30:	b5b0      	push	{r4, r5, r7, lr}
 8010a32:	b08c      	sub	sp, #48	@ 0x30
 8010a34:	2807      	cmp	r0, #7
 8010a36:	d81c      	bhi.n	8010a72 <llcp_le_set_phy_cmd+0x42>
 8010a38:	f649 7518 	movw	r5, #40728	@ 0x9f18
 8010a3c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8010a40:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8010a44:	b1ac      	cbz	r4, 8010a72 <llcp_le_set_phy_cmd+0x42>
 8010a46:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010a48:	f894 5123 	ldrb.w	r5, [r4, #291]	@ 0x123
 8010a4c:	2802      	cmp	r0, #2
 8010a4e:	bf18      	it	ne
 8010a50:	2001      	movne	r0, #1
 8010a52:	f8a4 0130 	strh.w	r0, [r4, #304]	@ 0x130
 8010a56:	b955      	cbnz	r5, 8010a6e <llcp_le_set_phy_cmd+0x3e>
 8010a58:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8010a5c:	280c      	cmp	r0, #12
 8010a5e:	d80c      	bhi.n	8010a7a <llcp_le_set_phy_cmd+0x4a>
 8010a60:	2501      	movs	r5, #1
 8010a62:	fa05 f000 	lsl.w	r0, r5, r0
 8010a66:	f241 4506 	movw	r5, #5126	@ 0x1406
 8010a6a:	4228      	tst	r0, r5
 8010a6c:	d005      	beq.n	8010a7a <llcp_le_set_phy_cmd+0x4a>
 8010a6e:	253a      	movs	r5, #58	@ 0x3a
 8010a70:	e000      	b.n	8010a74 <llcp_le_set_phy_cmd+0x44>
 8010a72:	2502      	movs	r5, #2
 8010a74:	4628      	mov	r0, r5
 8010a76:	b00c      	add	sp, #48	@ 0x30
 8010a78:	bdb0      	pop	{r4, r5, r7, pc}
 8010a7a:	2001      	movs	r0, #1
 8010a7c:	2903      	cmp	r1, #3
 8010a7e:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
 8010a82:	d10c      	bne.n	8010a9e <llcp_le_set_phy_cmd+0x6e>
 8010a84:	2009      	movs	r0, #9
 8010a86:	2500      	movs	r5, #0
 8010a88:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8010a8c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8010a90:	2002      	movs	r0, #2
 8010a92:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8010a96:	65a4      	str	r4, [r4, #88]	@ 0x58
 8010a98:	f00c fe39 	bl	801d70e <emngr_post_event>
 8010a9c:	e7ea      	b.n	8010a74 <llcp_le_set_phy_cmd+0x44>
 8010a9e:	f894 512e 	ldrb.w	r5, [r4, #302]	@ 0x12e
 8010aa2:	f894 e12f 	ldrb.w	lr, [r4, #303]	@ 0x12f
 8010aa6:	07c8      	lsls	r0, r1, #31
 8010aa8:	f884 5074 	strb.w	r5, [r4, #116]	@ 0x74
 8010aac:	f884 e075 	strb.w	lr, [r4, #117]	@ 0x75
 8010ab0:	d10a      	bne.n	8010ac8 <llcp_le_set_phy_cmd+0x98>
 8010ab2:	4295      	cmp	r5, r2
 8010ab4:	f884 2132 	strb.w	r2, [r4, #306]	@ 0x132
 8010ab8:	bf0e      	itee	eq
 8010aba:	f04f 0c00 	moveq.w	ip, #0
 8010abe:	f884 2074 	strbne.w	r2, [r4, #116]	@ 0x74
 8010ac2:	f04f 0c01 	movne.w	ip, #1
 8010ac6:	e004      	b.n	8010ad2 <llcp_le_set_phy_cmd+0xa2>
 8010ac8:	f04f 0c00 	mov.w	ip, #0
 8010acc:	462a      	mov	r2, r5
 8010ace:	f884 c132 	strb.w	ip, [r4, #306]	@ 0x132
 8010ad2:	0788      	lsls	r0, r1, #30
 8010ad4:	d406      	bmi.n	8010ae4 <llcp_le_set_phy_cmd+0xb4>
 8010ad6:	459e      	cmp	lr, r3
 8010ad8:	f884 3133 	strb.w	r3, [r4, #307]	@ 0x133
 8010adc:	d005      	beq.n	8010aea <llcp_le_set_phy_cmd+0xba>
 8010ade:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
 8010ae2:	e006      	b.n	8010af2 <llcp_le_set_phy_cmd+0xc2>
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	f884 0133 	strb.w	r0, [r4, #307]	@ 0x133
 8010aea:	f1bc 0f00 	cmp.w	ip, #0
 8010aee:	4673      	mov	r3, lr
 8010af0:	d011      	beq.n	8010b16 <llcp_le_set_phy_cmd+0xe6>
 8010af2:	200c      	movs	r0, #12
 8010af4:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8010af8:	f88d 2004 	strb.w	r2, [sp, #4]
 8010afc:	f88d 3005 	strb.w	r3, [sp, #5]
 8010b00:	a801      	add	r0, sp, #4
 8010b02:	4621      	mov	r1, r4
 8010b04:	2216      	movs	r2, #22
 8010b06:	2301      	movs	r3, #1
 8010b08:	f000 f810 	bl	8010b2c <llcp_cntrl_pkt_init>
 8010b0c:	4605      	mov	r5, r0
 8010b0e:	2002      	movs	r0, #2
 8010b10:	f884 0136 	strb.w	r0, [r4, #310]	@ 0x136
 8010b14:	e7ae      	b.n	8010a74 <llcp_le_set_phy_cmd+0x44>
 8010b16:	2009      	movs	r0, #9
 8010b18:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8010b1c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8010b20:	2002      	movs	r0, #2
 8010b22:	65a4      	str	r4, [r4, #88]	@ 0x58
 8010b24:	f00c fdf3 	bl	801d70e <emngr_post_event>
 8010b28:	2500      	movs	r5, #0
 8010b2a:	e7a3      	b.n	8010a74 <llcp_le_set_phy_cmd+0x44>

08010b2c <llcp_cntrl_pkt_init>:
 8010b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b30:	460c      	mov	r4, r1
 8010b32:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8010b36:	4681      	mov	r9, r0
 8010b38:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	461f      	mov	r7, r3
 8010b40:	4692      	mov	sl, r2
 8010b42:	2500      	movs	r5, #0
 8010b44:	f009 fea6 	bl	801a894 <allocate_data_packet>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d070      	beq.n	8010c2e <llcp_cntrl_pkt_init+0x102>
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	f1ba 0f02 	cmp.w	sl, #2
 8010b52:	d105      	bne.n	8010b60 <llcp_cntrl_pkt_init+0x34>
 8010b54:	8b60      	ldrh	r0, [r4, #26]
 8010b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010b5a:	ea4f 1880 	mov.w	r8, r0, lsl #6
 8010b5e:	e00c      	b.n	8010b7a <llcp_cntrl_pkt_init+0x4e>
 8010b60:	f648 0800 	movw	r8, #34816	@ 0x8800
 8010b64:	f2c0 0813 	movt	r8, #19
 8010b68:	b337      	cbz	r7, 8010bb8 <llcp_cntrl_pkt_init+0x8c>
 8010b6a:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 8010b6e:	2101      	movs	r1, #1
 8010b70:	fab0 f080 	clz	r0, r0
 8010b74:	0940      	lsrs	r0, r0, #5
 8010b76:	f00a fed2 	bl	801b91e <bsp_assert>
 8010b7a:	2001      	movs	r0, #1
 8010b7c:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
 8010b80:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 8010b84:	2122      	movs	r1, #34	@ 0x22
 8010b86:	6624      	str	r4, [r4, #96]	@ 0x60
 8010b88:	f884 112a 	strb.w	r1, [r4, #298]	@ 0x12a
 8010b8c:	b108      	cbz	r0, 8010b92 <llcp_cntrl_pkt_init+0x66>
 8010b8e:	2700      	movs	r7, #0
 8010b90:	e013      	b.n	8010bba <llcp_cntrl_pkt_init+0x8e>
 8010b92:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8010b96:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 8010b9a:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8010b9e:	2100      	movs	r1, #0
 8010ba0:	2700      	movs	r7, #0
 8010ba2:	f00d f951 	bl	801de48 <os_timer_create>
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
 8010bac:	2800      	cmp	r0, #0
 8010bae:	bf18      	it	ne
 8010bb0:	2001      	movne	r0, #1
 8010bb2:	f00a feb4 	bl	801b91e <bsp_assert>
 8010bb6:	e000      	b.n	8010bba <llcp_cntrl_pkt_init+0x8e>
 8010bb8:	2701      	movs	r7, #1
 8010bba:	4650      	mov	r0, sl
 8010bbc:	4649      	mov	r1, r9
 8010bbe:	4632      	mov	r2, r6
 8010bc0:	f009 fa92 	bl	801a0e8 <pdu_trnsprt_hndlr_form_cntrl_pdu>
 8010bc4:	f1ba 0f1b 	cmp.w	sl, #27
 8010bc8:	d81f      	bhi.n	8010c0a <llcp_cntrl_pkt_init+0xde>
 8010bca:	2001      	movs	r0, #1
 8010bcc:	f248 0100 	movw	r1, #32768	@ 0x8000
 8010bd0:	fa00 f00a 	lsl.w	r0, r0, sl
 8010bd4:	f6c0 4181 	movt	r1, #3201	@ 0xc81
 8010bd8:	4208      	tst	r0, r1
 8010bda:	d009      	beq.n	8010bf0 <llcp_cntrl_pkt_init+0xc4>
 8010bdc:	7bb0      	ldrb	r0, [r6, #14]
 8010bde:	f040 0102 	orr.w	r1, r0, #2
 8010be2:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8010be6:	73b1      	strb	r1, [r6, #14]
 8010be8:	4631      	mov	r1, r6
 8010bea:	f7fd fce8 	bl	800e5be <evnt_schdlr_add_data_pkt>
 8010bee:	e011      	b.n	8010c14 <llcp_cntrl_pkt_init+0xe8>
 8010bf0:	f410 3f08 	tst.w	r0, #139264	@ 0x22000
 8010bf4:	d009      	beq.n	8010c0a <llcp_cntrl_pkt_init+0xde>
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8010bfc:	b109      	cbz	r1, 8010c02 <llcp_cntrl_pkt_init+0xd6>
 8010bfe:	f00d fad7 	bl	801e1b0 <os_timer_stop_free>
 8010c02:	f1aa 000f 	sub.w	r0, sl, #15
 8010c06:	2801      	cmp	r0, #1
 8010c08:	d9e8      	bls.n	8010bdc <llcp_cntrl_pkt_init+0xb0>
 8010c0a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8010c0e:	4631      	mov	r1, r6
 8010c10:	f7fd fd3c 	bl	800e68c <evnt_schdlr_add_ctrl_pkt>
 8010c14:	4605      	mov	r5, r0
 8010c16:	fab0 f080 	clz	r0, r0
 8010c1a:	0940      	lsrs	r0, r0, #5
 8010c1c:	2101      	movs	r1, #1
 8010c1e:	f00a fe7e 	bl	801b91e <bsp_assert>
 8010c22:	b927      	cbnz	r7, 8010c2e <llcp_cntrl_pkt_init+0x102>
 8010c24:	f8d4 00c8 	ldr.w	r0, [r4, #200]	@ 0xc8
 8010c28:	4641      	mov	r1, r8
 8010c2a:	f00d f986 	bl	801df3a <os_timer_start>
 8010c2e:	4628      	mov	r0, r5
 8010c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010c34 <llcp_data_length_update>:
 8010c34:	b510      	push	{r4, lr}
 8010c36:	b08c      	sub	sp, #48	@ 0x30
 8010c38:	2807      	cmp	r0, #7
 8010c3a:	d80d      	bhi.n	8010c58 <llcp_data_length_update+0x24>
 8010c3c:	468c      	mov	ip, r1
 8010c3e:	f649 7118 	movw	r1, #40728	@ 0x9f18
 8010c42:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8010c46:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010c4a:	b129      	cbz	r1, 8010c58 <llcp_data_length_update+0x24>
 8010c4c:	f891 0046 	ldrb.w	r0, [r1, #70]	@ 0x46
 8010c50:	0680      	lsls	r0, r0, #26
 8010c52:	d404      	bmi.n	8010c5e <llcp_data_length_update+0x2a>
 8010c54:	201a      	movs	r0, #26
 8010c56:	e000      	b.n	8010c5a <llcp_data_length_update+0x26>
 8010c58:	2002      	movs	r0, #2
 8010c5a:	b00c      	add	sp, #48	@ 0x30
 8010c5c:	bd10      	pop	{r4, pc}
 8010c5e:	f891 0123 	ldrb.w	r0, [r1, #291]	@ 0x123
 8010c62:	b108      	cbz	r0, 8010c68 <llcp_data_length_update+0x34>
 8010c64:	203a      	movs	r0, #58	@ 0x3a
 8010c66:	e7f8      	b.n	8010c5a <llcp_data_length_update+0x26>
 8010c68:	2009      	movs	r0, #9
 8010c6a:	f881 0123 	strb.w	r0, [r1, #291]	@ 0x123
 8010c6e:	b143      	cbz	r3, 8010c82 <llcp_data_length_update+0x4e>
 8010c70:	f8b1 00a0 	ldrh.w	r0, [r1, #160]	@ 0xa0
 8010c74:	f8b1 30a2 	ldrh.w	r3, [r1, #162]	@ 0xa2
 8010c78:	f8b1 c0a4 	ldrh.w	ip, [r1, #164]	@ 0xa4
 8010c7c:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	@ 0xa6
 8010c80:	e02b      	b.n	8010cda <llcp_data_length_update+0xa6>
 8010c82:	f891 304e 	ldrb.w	r3, [r1, #78]	@ 0x4e
 8010c86:	20fb      	movs	r0, #251	@ 0xfb
 8010c88:	f8a1 00a0 	strh.w	r0, [r1, #160]	@ 0xa0
 8010c8c:	b11b      	cbz	r3, 8010c96 <llcp_data_length_update+0x62>
 8010c8e:	f891 3047 	ldrb.w	r3, [r1, #71]	@ 0x47
 8010c92:	071b      	lsls	r3, r3, #28
 8010c94:	d404      	bmi.n	8010ca0 <llcp_data_length_update+0x6c>
 8010c96:	f640 0348 	movw	r3, #2120	@ 0x848
 8010c9a:	f640 0e48 	movw	lr, #2120	@ 0x848
 8010c9e:	e005      	b.n	8010cac <llcp_data_length_update+0x78>
 8010ca0:	f44f 7374 	mov.w	r3, #976	@ 0x3d0
 8010ca4:	eb03 1e8c 	add.w	lr, r3, ip, lsl #6
 8010ca8:	f244 2390 	movw	r3, #17040	@ 0x4290
 8010cac:	4596      	cmp	lr, r2
 8010cae:	bf38      	it	cc
 8010cb0:	4672      	movcc	r2, lr
 8010cb2:	fa1f fe82 	uxth.w	lr, r2
 8010cb6:	f06f 040e 	mvn.w	r4, #14
 8010cba:	eb04 049e 	add.w	r4, r4, lr, lsr #2
 8010cbe:	f8a1 30a2 	strh.w	r3, [r1, #162]	@ 0xa2
 8010cc2:	b2a4      	uxth	r4, r4
 8010cc4:	f8a1 20a6 	strh.w	r2, [r1, #166]	@ 0xa6
 8010cc8:	4564      	cmp	r4, ip
 8010cca:	bf38      	it	cc
 8010ccc:	46a4      	movcc	ip, r4
 8010cce:	f1bc 0ffb 	cmp.w	ip, #251	@ 0xfb
 8010cd2:	bf28      	it	cs
 8010cd4:	4684      	movcs	ip, r0
 8010cd6:	f8a1 c0a4 	strh.w	ip, [r1, #164]	@ 0xa4
 8010cda:	f8ad 0004 	strh.w	r0, [sp, #4]
 8010cde:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010ce2:	f8ad 200a 	strh.w	r2, [sp, #10]
 8010ce6:	a801      	add	r0, sp, #4
 8010ce8:	2214      	movs	r2, #20
 8010cea:	2301      	movs	r3, #1
 8010cec:	f8ad c008 	strh.w	ip, [sp, #8]
 8010cf0:	f7ff ff1c 	bl	8010b2c <llcp_cntrl_pkt_init>
 8010cf4:	e7b1      	b.n	8010c5a <llcp_data_length_update+0x26>

08010cf6 <llcp_data_length_update_received>:
 8010cf6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cfa:	b08f      	sub	sp, #60	@ 0x3c
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	f890 004e 	ldrb.w	r0, [r0, #78]	@ 0x4e
 8010d02:	4690      	mov	r8, r2
 8010d04:	880b      	ldrh	r3, [r1, #0]
 8010d06:	884a      	ldrh	r2, [r1, #2]
 8010d08:	888d      	ldrh	r5, [r1, #4]
 8010d0a:	88cf      	ldrh	r7, [r1, #6]
 8010d0c:	f104 09a8 	add.w	r9, r4, #168	@ 0xa8
 8010d10:	b140      	cbz	r0, 8010d24 <llcp_data_length_update_received+0x2e>
 8010d12:	f894 0047 	ldrb.w	r0, [r4, #71]	@ 0x47
 8010d16:	0700      	lsls	r0, r0, #28
 8010d18:	f244 2090 	movw	r0, #17040	@ 0x4290
 8010d1c:	bf58      	it	pl
 8010d1e:	f640 0048 	movwpl	r0, #2120	@ 0x848
 8010d22:	e001      	b.n	8010d28 <llcp_data_length_update_received+0x32>
 8010d24:	f640 0048 	movw	r0, #2120	@ 0x848
 8010d28:	2dfb      	cmp	r5, #251	@ 0xfb
 8010d2a:	f04f 0bfb 	mov.w	fp, #251	@ 0xfb
 8010d2e:	bf28      	it	cs
 8010d30:	465d      	movcs	r5, fp
 8010d32:	2d1b      	cmp	r5, #27
 8010d34:	f04f 061b 	mov.w	r6, #27
 8010d38:	bf98      	it	ls
 8010d3a:	4635      	movls	r5, r6
 8010d3c:	42b8      	cmp	r0, r7
 8010d3e:	4639      	mov	r1, r7
 8010d40:	bf38      	it	cc
 8010d42:	4601      	movcc	r1, r0
 8010d44:	f5b7 7fa4 	cmp.w	r7, #328	@ 0x148
 8010d48:	bf38      	it	cc
 8010d4a:	f44f 71a4 	movcc.w	r1, #328	@ 0x148
 8010d4e:	2bfb      	cmp	r3, #251	@ 0xfb
 8010d50:	bf38      	it	cc
 8010d52:	469b      	movcc	fp, r3
 8010d54:	f1bb 0f1b 	cmp.w	fp, #27
 8010d58:	bf98      	it	ls
 8010d5a:	46b3      	movls	fp, r6
 8010d5c:	4290      	cmp	r0, r2
 8010d5e:	bf28      	it	cs
 8010d60:	4610      	movcs	r0, r2
 8010d62:	f5b2 7fa4 	cmp.w	r2, #328	@ 0x148
 8010d66:	f894 2123 	ldrb.w	r2, [r4, #291]	@ 0x123
 8010d6a:	bf38      	it	cc
 8010d6c:	f44f 70a4 	movcc.w	r0, #328	@ 0x148
 8010d70:	2a09      	cmp	r2, #9
 8010d72:	d002      	beq.n	8010d7a <llcp_data_length_update_received+0x84>
 8010d74:	f894 2126 	ldrb.w	r2, [r4, #294]	@ 0x126
 8010d78:	b14a      	cbz	r2, 8010d8e <llcp_data_length_update_received+0x98>
 8010d7a:	f894 2125 	ldrb.w	r2, [r4, #293]	@ 0x125
 8010d7e:	4607      	mov	r7, r0
 8010d80:	460e      	mov	r6, r1
 8010d82:	2a01      	cmp	r2, #1
 8010d84:	bf04      	itt	eq
 8010d86:	2200      	moveq	r2, #0
 8010d88:	f884 2125 	strbeq.w	r2, [r4, #293]	@ 0x125
 8010d8c:	e025      	b.n	8010dda <llcp_data_length_update_received+0xe4>
 8010d8e:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8010d92:	eb02 1385 	add.w	r3, r2, r5, lsl #6
 8010d96:	eb02 128b 	add.w	r2, r2, fp, lsl #6
 8010d9a:	b29e      	uxth	r6, r3
 8010d9c:	b297      	uxth	r7, r2
 8010d9e:	42b1      	cmp	r1, r6
 8010da0:	bf38      	it	cc
 8010da2:	460e      	movcc	r6, r1
 8010da4:	42b8      	cmp	r0, r7
 8010da6:	bf38      	it	cc
 8010da8:	4607      	movcc	r7, r0
 8010daa:	f06f 000e 	mvn.w	r0, #14
 8010dae:	eb00 0196 	add.w	r1, r0, r6, lsr #2
 8010db2:	eb00 0097 	add.w	r0, r0, r7, lsr #2
 8010db6:	29fc      	cmp	r1, #252	@ 0xfc
 8010db8:	f8a4 60a2 	strh.w	r6, [r4, #162]	@ 0xa2
 8010dbc:	f8a4 70a6 	strh.w	r7, [r4, #166]	@ 0xa6
 8010dc0:	f8a4 10a0 	strh.w	r1, [r4, #160]	@ 0xa0
 8010dc4:	f8a4 00a4 	strh.w	r0, [r4, #164]	@ 0xa4
 8010dc8:	bf24      	itt	cs
 8010dca:	21fb      	movcs	r1, #251	@ 0xfb
 8010dcc:	f8a4 10a0 	strhcs.w	r1, [r4, #160]	@ 0xa0
 8010dd0:	28fc      	cmp	r0, #252	@ 0xfc
 8010dd2:	bf24      	itt	cs
 8010dd4:	20fb      	movcs	r0, #251	@ 0xfb
 8010dd6:	f8a4 00a4 	strhcs.w	r0, [r4, #164]	@ 0xa4
 8010dda:	f10d 0a08 	add.w	sl, sp, #8
 8010dde:	4650      	mov	r0, sl
 8010de0:	4649      	mov	r1, r9
 8010de2:	2208      	movs	r2, #8
 8010de4:	f00f fd2e 	bl	8020844 <ble_memcpy>
 8010de8:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	@ 0xa6
 8010dec:	f44f 6129 	mov.w	r1, #2704	@ 0xa90
 8010df0:	42b8      	cmp	r0, r7
 8010df2:	bf38      	it	cc
 8010df4:	4607      	movcc	r7, r0
 8010df6:	f8b4 00a2 	ldrh.w	r0, [r4, #162]	@ 0xa2
 8010dfa:	f8a4 70b0 	strh.w	r7, [r4, #176]	@ 0xb0
 8010dfe:	42b0      	cmp	r0, r6
 8010e00:	bf38      	it	cc
 8010e02:	4606      	movcc	r6, r0
 8010e04:	f8a4 60b4 	strh.w	r6, [r4, #180]	@ 0xb4
 8010e08:	f5b6 6f29 	cmp.w	r6, #2704	@ 0xa90
 8010e0c:	bf88      	it	hi
 8010e0e:	4631      	movhi	r1, r6
 8010e10:	f894 212f 	ldrb.w	r2, [r4, #303]	@ 0x12f
 8010e14:	f8a4 10b6 	strh.w	r1, [r4, #182]	@ 0xb6
 8010e18:	2a04      	cmp	r2, #4
 8010e1a:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	@ 0xa0
 8010e1e:	bf18      	it	ne
 8010e20:	4631      	movne	r1, r6
 8010e22:	f240 46e2 	movw	r6, #1250	@ 0x4e2
 8010e26:	42aa      	cmp	r2, r5
 8010e28:	bf38      	it	cc
 8010e2a:	4615      	movcc	r5, r2
 8010e2c:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 8010e30:	eb02 1285 	add.w	r2, r2, r5, lsl #6
 8010e34:	f894 312e 	ldrb.w	r3, [r4, #302]	@ 0x12e
 8010e38:	b292      	uxth	r2, r2
 8010e3a:	f8a4 10aa 	strh.w	r1, [r4, #170]	@ 0xaa
 8010e3e:	428a      	cmp	r2, r1
 8010e40:	bf38      	it	cc
 8010e42:	4611      	movcc	r1, r2
 8010e44:	8ae2      	ldrh	r2, [r4, #22]
 8010e46:	f501 7196 	add.w	r1, r1, #300	@ 0x12c
 8010e4a:	b289      	uxth	r1, r1
 8010e4c:	fb02 f206 	mul.w	r2, r2, r6
 8010e50:	f8a4 50a8 	strh.w	r5, [r4, #168]	@ 0xa8
 8010e54:	1a51      	subs	r1, r2, r1
 8010e56:	bf38      	it	cc
 8010e58:	2100      	movcc	r1, #0
 8010e5a:	42b9      	cmp	r1, r7
 8010e5c:	bf28      	it	cs
 8010e5e:	4639      	movcs	r1, r7
 8010e60:	f44f 6029 	mov.w	r0, #2704	@ 0xa90
 8010e64:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 8010e68:	bf98      	it	ls
 8010e6a:	4601      	movls	r1, r0
 8010e6c:	f8a4 10b2 	strh.w	r1, [r4, #178]	@ 0xb2
 8010e70:	f8a4 10b8 	strh.w	r1, [r4, #184]	@ 0xb8
 8010e74:	2b04      	cmp	r3, #4
 8010e76:	bf18      	it	ne
 8010e78:	4639      	movne	r1, r7
 8010e7a:	f8b4 00a4 	ldrh.w	r0, [r4, #164]	@ 0xa4
 8010e7e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8010e82:	4558      	cmp	r0, fp
 8010e84:	bf38      	it	cc
 8010e86:	4683      	movcc	fp, r0
 8010e88:	4650      	mov	r0, sl
 8010e8a:	4649      	mov	r1, r9
 8010e8c:	2208      	movs	r2, #8
 8010e8e:	f8a4 b0ac 	strh.w	fp, [r4, #172]	@ 0xac
 8010e92:	f00f fd5f 	bl	8020954 <ble_memcmp>
 8010e96:	f1b8 0f14 	cmp.w	r8, #20
 8010e9a:	4605      	mov	r5, r0
 8010e9c:	d00d      	beq.n	8010eba <llcp_data_length_update_received+0x1c4>
 8010e9e:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8010ea2:	2809      	cmp	r0, #9
 8010ea4:	d109      	bne.n	8010eba <llcp_data_length_update_received+0x1c4>
 8010ea6:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8010eaa:	f00d f981 	bl	801e1b0 <os_timer_stop_free>
 8010eae:	2000      	movs	r0, #0
 8010eb0:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8010eb4:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 8010eb8:	e009      	b.n	8010ece <llcp_data_length_update_received+0x1d8>
 8010eba:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	@ 0xa0
 8010ebe:	2215      	movs	r2, #21
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ec6:	a804      	add	r0, sp, #16
 8010ec8:	4621      	mov	r1, r4
 8010eca:	f7ff fe2f 	bl	8010b2c <llcp_cntrl_pkt_init>
 8010ece:	b1dd      	cbz	r5, 8010f08 <llcp_data_length_update_received+0x212>
 8010ed0:	f8b4 10ae 	ldrh.w	r1, [r4, #174]	@ 0xae
 8010ed4:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	@ 0xaa
 8010ed8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8010edc:	4411      	add	r1, r2
 8010ede:	f7fd fc27 	bl	800e730 <evnt_schdlr_updt_conn_evnt_durn>
 8010ee2:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8010ee6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010eea:	6800      	ldr	r0, [r0, #0]
 8010eec:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8010eee:	b15f      	cbz	r7, 8010f08 <llcp_data_length_update_received+0x212>
 8010ef0:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8010ef4:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	@ 0xac
 8010ef8:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 8010efc:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8010f00:	f8b4 60aa 	ldrh.w	r6, [r4, #170]	@ 0xaa
 8010f04:	9600      	str	r6, [sp, #0]
 8010f06:	47b8      	blx	r7
 8010f08:	2000      	movs	r0, #0
 8010f0a:	b00f      	add	sp, #60	@ 0x3c
 8010f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f10 <llcp_encryption_req>:
 8010f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f14:	b08e      	sub	sp, #56	@ 0x38
 8010f16:	2808      	cmp	r0, #8
 8010f18:	d20c      	bcs.n	8010f34 <llcp_encryption_req+0x24>
 8010f1a:	4605      	mov	r5, r0
 8010f1c:	f649 7018 	movw	r0, #40728	@ 0x9f18
 8010f20:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8010f24:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
 8010f28:	b124      	cbz	r4, 8010f34 <llcp_encryption_req+0x24>
 8010f2a:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8010f2e:	b130      	cbz	r0, 8010f3e <llcp_encryption_req+0x2e>
 8010f30:	2412      	movs	r4, #18
 8010f32:	e000      	b.n	8010f36 <llcp_encryption_req+0x26>
 8010f34:	2402      	movs	r4, #2
 8010f36:	4620      	mov	r0, r4
 8010f38:	b00e      	add	sp, #56	@ 0x38
 8010f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f3e:	a801      	add	r0, sp, #4
 8010f40:	461f      	mov	r7, r3
 8010f42:	4690      	mov	r8, r2
 8010f44:	460e      	mov	r6, r1
 8010f46:	f011 fcbb 	bl	80228c0 <db_get_le_feature_info>
 8010f4a:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8010f4e:	07c0      	lsls	r0, r0, #31
 8010f50:	d101      	bne.n	8010f56 <llcp_encryption_req+0x46>
 8010f52:	241a      	movs	r4, #26
 8010f54:	e7ef      	b.n	8010f36 <llcp_encryption_req+0x26>
 8010f56:	f011 fcd6 	bl	8022906 <db_check_encryption>
 8010f5a:	b360      	cbz	r0, 8010fb6 <llcp_encryption_req+0xa6>
 8010f5c:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8010f60:	2807      	cmp	r0, #7
 8010f62:	d007      	beq.n	8010f74 <llcp_encryption_req+0x64>
 8010f64:	bb48      	cbnz	r0, 8010fba <llcp_encryption_req+0xaa>
 8010f66:	2001      	movs	r0, #1
 8010f68:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	2107      	movs	r1, #7
 8010f70:	f000 f864 	bl	801103c <llcp_cntrl_init>
 8010f74:	f894 0122 	ldrb.w	r0, [r4, #290]	@ 0x122
 8010f78:	b3a0      	cbz	r0, 8010fe4 <llcp_encryption_req+0xd4>
 8010f7a:	2008      	movs	r0, #8
 8010f7c:	f884 011e 	strb.w	r0, [r4, #286]	@ 0x11e
 8010f80:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 8010f84:	4639      	mov	r1, r7
 8010f86:	2210      	movs	r2, #16
 8010f88:	f00f fc5c 	bl	8020844 <ble_memcpy>
 8010f8c:	f504 708b 	add.w	r0, r4, #278	@ 0x116
 8010f90:	4631      	mov	r1, r6
 8010f92:	2208      	movs	r2, #8
 8010f94:	f00f fc56 	bl	8020844 <ble_memcpy>
 8010f98:	2000      	movs	r0, #0
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	220a      	movs	r2, #10
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	f8a4 8104 	strh.w	r8, [r4, #260]	@ 0x104
 8010fa4:	f7ff fdc2 	bl	8010b2c <llcp_cntrl_pkt_init>
 8010fa8:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
 8010fac:	4604      	mov	r4, r0
 8010fae:	4608      	mov	r0, r1
 8010fb0:	f00d f880 	bl	801e0b4 <os_timer_stop>
 8010fb4:	e7bf      	b.n	8010f36 <llcp_encryption_req+0x26>
 8010fb6:	2411      	movs	r4, #17
 8010fb8:	e7bd      	b.n	8010f36 <llcp_encryption_req+0x26>
 8010fba:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 8010fbe:	4639      	mov	r1, r7
 8010fc0:	2210      	movs	r2, #16
 8010fc2:	f00f fc3f 	bl	8020844 <ble_memcpy>
 8010fc6:	f504 708b 	add.w	r0, r4, #278	@ 0x116
 8010fca:	4631      	mov	r1, r6
 8010fcc:	2208      	movs	r2, #8
 8010fce:	f00f fc39 	bl	8020844 <ble_memcpy>
 8010fd2:	2006      	movs	r0, #6
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f8a4 8104 	strh.w	r8, [r4, #260]	@ 0x104
 8010fdc:	f000 f862 	bl	80110a4 <llcp_enqueue_host_control>
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	e7a8      	b.n	8010f36 <llcp_encryption_req+0x26>
 8010fe4:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 8010fe8:	4639      	mov	r1, r7
 8010fea:	2210      	movs	r2, #16
 8010fec:	f00f fc2a 	bl	8020844 <ble_memcpy>
 8010ff0:	ad03      	add	r5, sp, #12
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	2208      	movs	r2, #8
 8010ff8:	f00f fc24 	bl	8020844 <ble_memcpy>
 8010ffc:	f105 0010 	add.w	r0, r5, #16
 8011000:	2104      	movs	r1, #4
 8011002:	f8ad 8020 	strh.w	r8, [sp, #32]
 8011006:	f002 ffee 	bl	8013fe6 <llhwc_gen_rnd_num>
 801100a:	b928      	cbnz	r0, 8011018 <llcp_encryption_req+0x108>
 801100c:	3508      	adds	r5, #8
 801100e:	4628      	mov	r0, r5
 8011010:	2108      	movs	r1, #8
 8011012:	f002 ffe8 	bl	8013fe6 <llhwc_gen_rnd_num>
 8011016:	b108      	cbz	r0, 801101c <llcp_encryption_req+0x10c>
 8011018:	243a      	movs	r4, #58	@ 0x3a
 801101a:	e78c      	b.n	8010f36 <llcp_encryption_req+0x26>
 801101c:	9807      	ldr	r0, [sp, #28]
 801101e:	4629      	mov	r1, r5
 8011020:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0
 8011024:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8011028:	2208      	movs	r2, #8
 801102a:	f00f fc0b 	bl	8020844 <ble_memcpy>
 801102e:	a803      	add	r0, sp, #12
 8011030:	4621      	mov	r1, r4
 8011032:	2203      	movs	r2, #3
 8011034:	2300      	movs	r3, #0
 8011036:	f7ff fd79 	bl	8010b2c <llcp_cntrl_pkt_init>
 801103a:	e7d1      	b.n	8010fe0 <llcp_encryption_req+0xd0>

0801103c <llcp_cntrl_init>:
 801103c:	b5b0      	push	{r4, r5, r7, lr}
 801103e:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8011042:	f100 0458 	add.w	r4, r0, #88	@ 0x58
 8011046:	2a01      	cmp	r2, #1
 8011048:	f04f 0222 	mov.w	r2, #34	@ 0x22
 801104c:	6580      	str	r0, [r0, #88]	@ 0x58
 801104e:	f880 212a 	strb.w	r2, [r0, #298]	@ 0x12a
 8011052:	d104      	bne.n	801105e <llcp_cntrl_init+0x22>
 8011054:	f880 1123 	strb.w	r1, [r0, #291]	@ 0x123
 8011058:	f100 05c8 	add.w	r5, r0, #200	@ 0xc8
 801105c:	e003      	b.n	8011066 <llcp_cntrl_init+0x2a>
 801105e:	f100 05d0 	add.w	r5, r0, #208	@ 0xd0
 8011062:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
 8011066:	6828      	ldr	r0, [r5, #0]
 8011068:	2101      	movs	r1, #1
 801106a:	fab0 f080 	clz	r0, r0
 801106e:	0940      	lsrs	r0, r0, #5
 8011070:	f00a fc55 	bl	801b91e <bsp_assert>
 8011074:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8011078:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801107c:	2100      	movs	r1, #0
 801107e:	4622      	mov	r2, r4
 8011080:	f00c fee2 	bl	801de48 <os_timer_create>
 8011084:	2101      	movs	r1, #1
 8011086:	6028      	str	r0, [r5, #0]
 8011088:	2800      	cmp	r0, #0
 801108a:	bf18      	it	ne
 801108c:	2001      	movne	r0, #1
 801108e:	f00a fc46 	bl	801b91e <bsp_assert>
 8011092:	6828      	ldr	r0, [r5, #0]
 8011094:	f648 0100 	movw	r1, #34816	@ 0x8800
 8011098:	f2c0 0113 	movt	r1, #19
 801109c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80110a0:	f00c bf4b 	b.w	801df3a <os_timer_start>

080110a4 <llcp_enqueue_host_control>:
 80110a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110a6:	b081      	sub	sp, #4
 80110a8:	4605      	mov	r5, r0
 80110aa:	f649 60b8 	movw	r0, #40632	@ 0x9eb8
 80110ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80110b2:	4617      	mov	r7, r2
 80110b4:	460e      	mov	r6, r1
 80110b6:	f00c fcff 	bl	801dab8 <os_mem_pool_alloc>
 80110ba:	b1f0      	cbz	r0, 80110fa <llcp_enqueue_host_control+0x56>
 80110bc:	4604      	mov	r4, r0
 80110be:	b127      	cbz	r7, 80110ca <llcp_enqueue_host_control+0x26>
 80110c0:	1d20      	adds	r0, r4, #4
 80110c2:	4639      	mov	r1, r7
 80110c4:	2210      	movs	r2, #16
 80110c6:	f00f fbbd 	bl	8020844 <ble_memcpy>
 80110ca:	2000      	movs	r0, #0
 80110cc:	6160      	str	r0, [r4, #20]
 80110ce:	2003      	movs	r0, #3
 80110d0:	8066      	strh	r6, [r4, #2]
 80110d2:	7025      	strb	r5, [r4, #0]
 80110d4:	f00a fc81 	bl	801b9da <disable_specific_irq>
 80110d8:	f649 703c 	movw	r0, #40764	@ 0x9f3c
 80110dc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80110e0:	6801      	ldr	r1, [r0, #0]
 80110e2:	b121      	cbz	r1, 80110ee <llcp_enqueue_host_control+0x4a>
 80110e4:	4608      	mov	r0, r1
 80110e6:	6949      	ldr	r1, [r1, #20]
 80110e8:	2900      	cmp	r1, #0
 80110ea:	d1fb      	bne.n	80110e4 <llcp_enqueue_host_control+0x40>
 80110ec:	3014      	adds	r0, #20
 80110ee:	6004      	str	r4, [r0, #0]
 80110f0:	2003      	movs	r0, #3
 80110f2:	f00a fc70 	bl	801b9d6 <enable_specific_irq>
 80110f6:	2000      	movs	r0, #0
 80110f8:	e000      	b.n	80110fc <llcp_enqueue_host_control+0x58>
 80110fa:	203a      	movs	r0, #58	@ 0x3a
 80110fc:	b001      	add	sp, #4
 80110fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011100 <llcp_enc_rsp_received>:
 8011100:	b5b0      	push	{r4, r5, r7, lr}
 8011102:	4604      	mov	r4, r0
 8011104:	f890 0123 	ldrb.w	r0, [r0, #291]	@ 0x123
 8011108:	2807      	cmp	r0, #7
 801110a:	d11b      	bne.n	8011144 <llcp_enc_rsp_received+0x44>
 801110c:	20aa      	movs	r0, #170	@ 0xaa
 801110e:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 8011112:	f851 0b04 	ldr.w	r0, [r1], #4
 8011116:	2208      	movs	r2, #8
 8011118:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
 801111c:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 8011120:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 8011124:	f00f fb8e 	bl	8020844 <ble_memcpy>
 8011128:	f504 7183 	add.w	r1, r4, #262	@ 0x106
 801112c:	4628      	mov	r0, r5
 801112e:	462a      	mov	r2, r5
 8011130:	f003 f859 	bl	80141e6 <llhwc_128_encrypt>
 8011134:	4604      	mov	r4, r0
 8011136:	fab0 f080 	clz	r0, r0
 801113a:	0940      	lsrs	r0, r0, #5
 801113c:	2101      	movs	r1, #1
 801113e:	f00a fbee 	bl	801b91e <bsp_assert>
 8011142:	e000      	b.n	8011146 <llcp_enc_rsp_received+0x46>
 8011144:	2400      	movs	r4, #0
 8011146:	4620      	mov	r0, r4
 8011148:	bdb0      	pop	{r4, r5, r7, pc}

0801114a <llcp_enc_req_received>:
 801114a:	b570      	push	{r4, r5, r6, lr}
 801114c:	b08c      	sub	sp, #48	@ 0x30
 801114e:	460d      	mov	r5, r1
 8011150:	4604      	mov	r4, r0
 8011152:	f011 fbd8 	bl	8022906 <db_check_encryption>
 8011156:	2800      	cmp	r0, #0
 8011158:	d040      	beq.n	80111dc <llcp_enc_req_received+0x92>
 801115a:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 801115e:	2801      	cmp	r0, #1
 8011160:	d145      	bne.n	80111ee <llcp_enc_req_received+0xa4>
 8011162:	20aa      	movs	r0, #170	@ 0xaa
 8011164:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 8011168:	2007      	movs	r0, #7
 801116a:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 801116e:	4620      	mov	r0, r4
 8011170:	2107      	movs	r1, #7
 8011172:	f7ff ff63 	bl	801103c <llcp_cntrl_init>
 8011176:	6928      	ldr	r0, [r5, #16]
 8011178:	f105 0108 	add.w	r1, r5, #8
 801117c:	f8c4 00e0 	str.w	r0, [r4, #224]	@ 0xe0
 8011180:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8011184:	2208      	movs	r2, #8
 8011186:	f00f fb5d 	bl	8020844 <ble_memcpy>
 801118a:	f504 7083 	add.w	r0, r4, #262	@ 0x106
 801118e:	4629      	mov	r1, r5
 8011190:	2208      	movs	r2, #8
 8011192:	f00f fb57 	bl	8020844 <ble_memcpy>
 8011196:	7d28      	ldrb	r0, [r5, #20]
 8011198:	2104      	movs	r1, #4
 801119a:	f884 010e 	strb.w	r0, [r4, #270]	@ 0x10e
 801119e:	7d68      	ldrb	r0, [r5, #21]
 80111a0:	ad01      	add	r5, sp, #4
 80111a2:	f884 010f 	strb.w	r0, [r4, #271]	@ 0x10f
 80111a6:	4628      	mov	r0, r5
 80111a8:	f002 ff1d 	bl	8013fe6 <llhwc_gen_rnd_num>
 80111ac:	4606      	mov	r6, r0
 80111ae:	b9f8      	cbnz	r0, 80111f0 <llcp_enc_req_received+0xa6>
 80111b0:	3504      	adds	r5, #4
 80111b2:	4628      	mov	r0, r5
 80111b4:	2108      	movs	r1, #8
 80111b6:	f002 ff16 	bl	8013fe6 <llhwc_gen_rnd_num>
 80111ba:	4606      	mov	r6, r0
 80111bc:	b9c0      	cbnz	r0, 80111f0 <llcp_enc_req_received+0xa6>
 80111be:	9801      	ldr	r0, [sp, #4]
 80111c0:	4629      	mov	r1, r5
 80111c2:	f8c4 00e4 	str.w	r0, [r4, #228]	@ 0xe4
 80111c6:	f104 00f8 	add.w	r0, r4, #248	@ 0xf8
 80111ca:	2208      	movs	r2, #8
 80111cc:	f00f fb3a 	bl	8020844 <ble_memcpy>
 80111d0:	a801      	add	r0, sp, #4
 80111d2:	4621      	mov	r1, r4
 80111d4:	2204      	movs	r2, #4
 80111d6:	2300      	movs	r3, #0
 80111d8:	2600      	movs	r6, #0
 80111da:	e005      	b.n	80111e8 <llcp_enc_req_received+0x9e>
 80111dc:	261a      	movs	r6, #26
 80111de:	4628      	mov	r0, r5
 80111e0:	4621      	mov	r1, r4
 80111e2:	220d      	movs	r2, #13
 80111e4:	2300      	movs	r3, #0
 80111e6:	702e      	strb	r6, [r5, #0]
 80111e8:	f7ff fca0 	bl	8010b2c <llcp_cntrl_pkt_init>
 80111ec:	e000      	b.n	80111f0 <llcp_enc_req_received+0xa6>
 80111ee:	2600      	movs	r6, #0
 80111f0:	4630      	mov	r0, r6
 80111f2:	b00c      	add	sp, #48	@ 0x30
 80111f4:	bd70      	pop	{r4, r5, r6, pc}

080111f6 <llcp_pause_enc_req_received>:
 80111f6:	b5b0      	push	{r4, r5, r7, lr}
 80111f8:	4604      	mov	r4, r0
 80111fa:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 80111fe:	b9b8      	cbnz	r0, 8011230 <llcp_pause_enc_req_received+0x3a>
 8011200:	f894 0122 	ldrb.w	r0, [r4, #290]	@ 0x122
 8011204:	2801      	cmp	r0, #1
 8011206:	d113      	bne.n	8011230 <llcp_pause_enc_req_received+0x3a>
 8011208:	20aa      	movs	r0, #170	@ 0xaa
 801120a:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 801120e:	2000      	movs	r0, #0
 8011210:	4621      	mov	r1, r4
 8011212:	220b      	movs	r2, #11
 8011214:	2300      	movs	r3, #0
 8011216:	2500      	movs	r5, #0
 8011218:	f7ff fc88 	bl	8010b2c <llcp_cntrl_pkt_init>
 801121c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8011220:	2108      	movs	r1, #8
 8011222:	f884 111e 	strb.w	r1, [r4, #286]	@ 0x11e
 8011226:	f884 1124 	strb.w	r1, [r4, #292]	@ 0x124
 801122a:	f00c ff43 	bl	801e0b4 <os_timer_stop>
 801122e:	e000      	b.n	8011232 <llcp_pause_enc_req_received+0x3c>
 8011230:	251a      	movs	r5, #26
 8011232:	4628      	mov	r0, r5
 8011234:	bdb0      	pop	{r4, r5, r7, pc}

08011236 <llcp_req_lng_trm_key>:
 8011236:	b510      	push	{r4, lr}
 8011238:	b08c      	sub	sp, #48	@ 0x30
 801123a:	4604      	mov	r4, r0
 801123c:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 8011240:	2807      	cmp	r0, #7
 8011242:	d114      	bne.n	801126e <llcp_req_lng_trm_key+0x38>
 8011244:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8011248:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801124c:	6800      	ldr	r0, [r0, #0]
 801124e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8011250:	b123      	cbz	r3, 801125c <llcp_req_lng_trm_key+0x26>
 8011252:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8011256:	4798      	blx	r3
 8011258:	b908      	cbnz	r0, 801125e <llcp_req_lng_trm_key+0x28>
 801125a:	e008      	b.n	801126e <llcp_req_lng_trm_key+0x38>
 801125c:	2006      	movs	r0, #6
 801125e:	f88d 0004 	strb.w	r0, [sp, #4]
 8011262:	a801      	add	r0, sp, #4
 8011264:	4621      	mov	r1, r4
 8011266:	220d      	movs	r2, #13
 8011268:	2300      	movs	r3, #0
 801126a:	f7ff fc5f 	bl	8010b2c <llcp_cntrl_pkt_init>
 801126e:	2000      	movs	r0, #0
 8011270:	b00c      	add	sp, #48	@ 0x30
 8011272:	bd10      	pop	{r4, pc}

08011274 <llcp_ping_req>:
 8011274:	4601      	mov	r1, r0
 8011276:	f890 0122 	ldrb.w	r0, [r0, #290]	@ 0x122
 801127a:	2801      	cmp	r0, #1
 801127c:	d102      	bne.n	8011284 <llcp_ping_req+0x10>
 801127e:	f891 0123 	ldrb.w	r0, [r1, #291]	@ 0x123
 8011282:	b108      	cbz	r0, 8011288 <llcp_ping_req+0x14>
 8011284:	203a      	movs	r0, #58	@ 0x3a
 8011286:	4770      	bx	lr
 8011288:	f04f 0c06 	mov.w	ip, #6
 801128c:	2000      	movs	r0, #0
 801128e:	2212      	movs	r2, #18
 8011290:	2301      	movs	r3, #1
 8011292:	f881 c123 	strb.w	ip, [r1, #291]	@ 0x123
 8011296:	f7ff bc49 	b.w	8010b2c <llcp_cntrl_pkt_init>

0801129a <llcp_ping_received>:
 801129a:	b5b0      	push	{r4, r5, r7, lr}
 801129c:	b082      	sub	sp, #8
 801129e:	2912      	cmp	r1, #18
 80112a0:	4604      	mov	r4, r0
 80112a2:	d01e      	beq.n	80112e2 <llcp_ping_received+0x48>
 80112a4:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 80112a8:	2806      	cmp	r0, #6
 80112aa:	d11a      	bne.n	80112e2 <llcp_ping_received+0x48>
 80112ac:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 80112b0:	f00c ff7e 	bl	801e1b0 <os_timer_stop_free>
 80112b4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 80112b8:	2500      	movs	r5, #0
 80112ba:	f884 512a 	strb.w	r5, [r4, #298]	@ 0x12a
 80112be:	f00c fef9 	bl	801e0b4 <os_timer_stop>
 80112c2:	a901      	add	r1, sp, #4
 80112c4:	4620      	mov	r0, r4
 80112c6:	f010 fcc7 	bl	8021c58 <conn_mngr_get_ping_timeout_value>
 80112ca:	9901      	ldr	r1, [sp, #4]
 80112cc:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 80112d0:	0149      	lsls	r1, r1, #5
 80112d2:	f00c fe32 	bl	801df3a <os_timer_start>
 80112d6:	200a      	movs	r0, #10
 80112d8:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 80112dc:	f884 5123 	strb.w	r5, [r4, #291]	@ 0x123
 80112e0:	e005      	b.n	80112ee <llcp_ping_received+0x54>
 80112e2:	2000      	movs	r0, #0
 80112e4:	4621      	mov	r1, r4
 80112e6:	2213      	movs	r2, #19
 80112e8:	2300      	movs	r3, #0
 80112ea:	f7ff fc1f 	bl	8010b2c <llcp_cntrl_pkt_init>
 80112ee:	2000      	movs	r0, #0
 80112f0:	b002      	add	sp, #8
 80112f2:	bdb0      	pop	{r4, r5, r7, pc}

080112f4 <llcp_read_remote_version>:
 80112f4:	b580      	push	{r7, lr}
 80112f6:	2807      	cmp	r0, #7
 80112f8:	d81c      	bhi.n	8011334 <llcp_read_remote_version+0x40>
 80112fa:	f649 7118 	movw	r1, #40728	@ 0x9f18
 80112fe:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011302:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8011306:	b1a8      	cbz	r0, 8011334 <llcp_read_remote_version+0x40>
 8011308:	f890 2044 	ldrb.w	r2, [r0, #68]	@ 0x44
 801130c:	f890 1123 	ldrb.w	r1, [r0, #291]	@ 0x123
 8011310:	b19a      	cbz	r2, 801133a <llcp_read_remote_version+0x46>
 8011312:	b1a9      	cbz	r1, 8011340 <llcp_read_remote_version+0x4c>
 8011314:	2300      	movs	r3, #0
 8011316:	2201      	movs	r2, #1
 8011318:	18c1      	adds	r1, r0, r3
 801131a:	f891 3146 	ldrb.w	r3, [r1, #326]	@ 0x146
 801131e:	2bff      	cmp	r3, #255	@ 0xff
 8011320:	d01b      	beq.n	801135a <llcp_read_remote_version+0x66>
 8011322:	07d2      	lsls	r2, r2, #31
 8011324:	f04f 0100 	mov.w	r1, #0
 8011328:	f04f 0301 	mov.w	r3, #1
 801132c:	f04f 0200 	mov.w	r2, #0
 8011330:	d1f2      	bne.n	8011318 <llcp_read_remote_version+0x24>
 8011332:	e000      	b.n	8011336 <llcp_read_remote_version+0x42>
 8011334:	2102      	movs	r1, #2
 8011336:	4608      	mov	r0, r1
 8011338:	bd80      	pop	{r7, pc}
 801133a:	b1a1      	cbz	r1, 8011366 <llcp_read_remote_version+0x72>
 801133c:	213a      	movs	r1, #58	@ 0x3a
 801133e:	e7fa      	b.n	8011336 <llcp_read_remote_version+0x42>
 8011340:	2103      	movs	r1, #3
 8011342:	2204      	movs	r2, #4
 8011344:	f880 1123 	strb.w	r1, [r0, #291]	@ 0x123
 8011348:	f100 0160 	add.w	r1, r0, #96	@ 0x60
 801134c:	6600      	str	r0, [r0, #96]	@ 0x60
 801134e:	f880 2064 	strb.w	r2, [r0, #100]	@ 0x64
 8011352:	2002      	movs	r0, #2
 8011354:	f00c f9db 	bl	801d70e <emngr_post_event>
 8011358:	e003      	b.n	8011362 <llcp_read_remote_version+0x6e>
 801135a:	f501 70a3 	add.w	r0, r1, #326	@ 0x146
 801135e:	2103      	movs	r1, #3
 8011360:	7001      	strb	r1, [r0, #0]
 8011362:	2100      	movs	r1, #0
 8011364:	e7e7      	b.n	8011336 <llcp_read_remote_version+0x42>
 8011366:	2203      	movs	r2, #3
 8011368:	2101      	movs	r1, #1
 801136a:	f880 2123 	strb.w	r2, [r0, #291]	@ 0x123
 801136e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011372:	f000 b800 	b.w	8011376 <llcp_version_exchange_init>

08011376 <llcp_version_exchange_init>:
 8011376:	b5b0      	push	{r4, r5, r7, lr}
 8011378:	b08e      	sub	sp, #56	@ 0x38
 801137a:	4605      	mov	r5, r0
 801137c:	a80c      	add	r0, sp, #48	@ 0x30
 801137e:	460c      	mov	r4, r1
 8011380:	f011 fa8b 	bl	802289a <db_get_local_vrsn_info>
 8011384:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011386:	f89d 1036 	ldrb.w	r1, [sp, #54]	@ 0x36
 801138a:	ea4f 4030 	mov.w	r0, r0, ror #16
 801138e:	9001      	str	r0, [sp, #4]
 8011390:	f88d 1008 	strb.w	r1, [sp, #8]
 8011394:	a801      	add	r0, sp, #4
 8011396:	4629      	mov	r1, r5
 8011398:	220c      	movs	r2, #12
 801139a:	4623      	mov	r3, r4
 801139c:	f7ff fbc6 	bl	8010b2c <llcp_cntrl_pkt_init>
 80113a0:	b00e      	add	sp, #56	@ 0x38
 80113a2:	bdb0      	pop	{r4, r5, r7, pc}

080113a4 <llcp_read_remote_version_received>:
 80113a4:	b5b0      	push	{r4, r5, r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	4604      	mov	r4, r0
 80113aa:	f890 0123 	ldrb.w	r0, [r0, #291]	@ 0x123
 80113ae:	460d      	mov	r5, r1
 80113b0:	2803      	cmp	r0, #3
 80113b2:	d11d      	bne.n	80113f0 <llcp_read_remote_version_received+0x4c>
 80113b4:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 80113b8:	f00c fefa 	bl	801e1b0 <os_timer_stop_free>
 80113bc:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80113c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80113c4:	6800      	ldr	r0, [r0, #0]
 80113c6:	2100      	movs	r1, #0
 80113c8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80113cc:	f884 1123 	strb.w	r1, [r4, #291]	@ 0x123
 80113d0:	f1bc 0f00 	cmp.w	ip, #0
 80113d4:	f884 112a 	strb.w	r1, [r4, #298]	@ 0x12a
 80113d8:	d011      	beq.n	80113fe <llcp_read_remote_version_received+0x5a>
 80113da:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80113de:	792a      	ldrb	r2, [r5, #4]
 80113e0:	882b      	ldrh	r3, [r5, #0]
 80113e2:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 80113e6:	2000      	movs	r0, #0
 80113e8:	f8cd e000 	str.w	lr, [sp]
 80113ec:	47e0      	blx	ip
 80113ee:	e006      	b.n	80113fe <llcp_read_remote_version_received+0x5a>
 80113f0:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80113f4:	b918      	cbnz	r0, 80113fe <llcp_read_remote_version_received+0x5a>
 80113f6:	4620      	mov	r0, r4
 80113f8:	2100      	movs	r1, #0
 80113fa:	f7ff ffbc 	bl	8011376 <llcp_version_exchange_init>
 80113fe:	7928      	ldrb	r0, [r5, #4]
 8011400:	f884 0044 	strb.w	r0, [r4, #68]	@ 0x44
 8011404:	8828      	ldrh	r0, [r5, #0]
 8011406:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
 801140a:	8869      	ldrh	r1, [r5, #2]
 801140c:	2000      	movs	r0, #0
 801140e:	f8a4 1042 	strh.w	r1, [r4, #66]	@ 0x42
 8011412:	b002      	add	sp, #8
 8011414:	bdb0      	pop	{r4, r5, r7, pc}

08011416 <llcp_read_remote_features>:
 8011416:	b5b0      	push	{r4, r5, r7, lr}
 8011418:	b08c      	sub	sp, #48	@ 0x30
 801141a:	2808      	cmp	r0, #8
 801141c:	d21e      	bcs.n	801145c <llcp_read_remote_features+0x46>
 801141e:	460d      	mov	r5, r1
 8011420:	f649 7118 	movw	r1, #40728	@ 0x9f18
 8011424:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011428:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801142c:	b1b4      	cbz	r4, 801145c <llcp_read_remote_features+0x46>
 801142e:	a801      	add	r0, sp, #4
 8011430:	2100      	movs	r1, #0
 8011432:	2208      	movs	r2, #8
 8011434:	f00f fa56 	bl	80208e4 <ble_memset>
 8011438:	f894 004e 	ldrb.w	r0, [r4, #78]	@ 0x4e
 801143c:	b180      	cbz	r0, 8011460 <llcp_read_remote_features+0x4a>
 801143e:	b995      	cbnz	r5, 8011466 <llcp_read_remote_features+0x50>
 8011440:	2004      	movs	r0, #4
 8011442:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8011446:	2005      	movs	r0, #5
 8011448:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 801144c:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
 8011450:	2002      	movs	r0, #2
 8011452:	6624      	str	r4, [r4, #96]	@ 0x60
 8011454:	f00c f95b 	bl	801d70e <emngr_post_event>
 8011458:	2000      	movs	r0, #0
 801145a:	e005      	b.n	8011468 <llcp_read_remote_features+0x52>
 801145c:	2002      	movs	r0, #2
 801145e:	e003      	b.n	8011468 <llcp_read_remote_features+0x52>
 8011460:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8011464:	b110      	cbz	r0, 801146c <llcp_read_remote_features+0x56>
 8011466:	203a      	movs	r0, #58	@ 0x3a
 8011468:	b00c      	add	sp, #48	@ 0x30
 801146a:	bdb0      	pop	{r4, r5, r7, pc}
 801146c:	2004      	movs	r0, #4
 801146e:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8011472:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8011476:	210e      	movs	r1, #14
 8011478:	2800      	cmp	r0, #0
 801147a:	bf08      	it	eq
 801147c:	2108      	moveq	r1, #8
 801147e:	4620      	mov	r0, r4
 8011480:	2201      	movs	r2, #1
 8011482:	f000 f803 	bl	801148c <llcp_feature_exchange_init>
 8011486:	f884 504f 	strb.w	r5, [r4, #79]	@ 0x4f
 801148a:	e7ed      	b.n	8011468 <llcp_read_remote_features+0x52>

0801148c <llcp_feature_exchange_init>:
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	b08c      	sub	sp, #48	@ 0x30
 8011490:	4606      	mov	r6, r0
 8011492:	a801      	add	r0, sp, #4
 8011494:	4614      	mov	r4, r2
 8011496:	460d      	mov	r5, r1
 8011498:	f011 fa12 	bl	80228c0 <db_get_le_feature_info>
 801149c:	2d09      	cmp	r5, #9
 801149e:	d106      	bne.n	80114ae <llcp_feature_exchange_init+0x22>
 80114a0:	f896 0046 	ldrb.w	r0, [r6, #70]	@ 0x46
 80114a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80114a8:	4008      	ands	r0, r1
 80114aa:	f88d 0004 	strb.w	r0, [sp, #4]
 80114ae:	a801      	add	r0, sp, #4
 80114b0:	4631      	mov	r1, r6
 80114b2:	462a      	mov	r2, r5
 80114b4:	4623      	mov	r3, r4
 80114b6:	f7ff fb39 	bl	8010b2c <llcp_cntrl_pkt_init>
 80114ba:	b00c      	add	sp, #48	@ 0x30
 80114bc:	bd70      	pop	{r4, r5, r6, pc}

080114be <llcp_read_remote_features_received>:
 80114be:	b5b0      	push	{r4, r5, r7, lr}
 80114c0:	b08c      	sub	sp, #48	@ 0x30
 80114c2:	2a0e      	cmp	r2, #14
 80114c4:	4604      	mov	r4, r0
 80114c6:	d008      	beq.n	80114da <llcp_read_remote_features_received+0x1c>
 80114c8:	2a09      	cmp	r2, #9
 80114ca:	d023      	beq.n	8011514 <llcp_read_remote_features_received+0x56>
 80114cc:	2a08      	cmp	r2, #8
 80114ce:	d142      	bne.n	8011556 <llcp_read_remote_features_received+0x98>
 80114d0:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 80114d4:	2801      	cmp	r0, #1
 80114d6:	d003      	beq.n	80114e0 <llcp_read_remote_features_received+0x22>
 80114d8:	e03d      	b.n	8011556 <llcp_read_remote_features_received+0x98>
 80114da:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 80114de:	bbd0      	cbnz	r0, 8011556 <llcp_read_remote_features_received+0x98>
 80114e0:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 80114e4:	2208      	movs	r2, #8
 80114e6:	f00f f9ad 	bl	8020844 <ble_memcpy>
 80114ea:	2001      	movs	r0, #1
 80114ec:	ad01      	add	r5, sp, #4
 80114ee:	f884 004e 	strb.w	r0, [r4, #78]	@ 0x4e
 80114f2:	4628      	mov	r0, r5
 80114f4:	f011 f9e4 	bl	80228c0 <db_get_le_feature_info>
 80114f8:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 80114fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011500:	2209      	movs	r2, #9
 8011502:	4008      	ands	r0, r1
 8011504:	f88d 0004 	strb.w	r0, [sp, #4]
 8011508:	4628      	mov	r0, r5
 801150a:	4621      	mov	r1, r4
 801150c:	2300      	movs	r3, #0
 801150e:	f7ff fb0d 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011512:	e020      	b.n	8011556 <llcp_read_remote_features_received+0x98>
 8011514:	2001      	movs	r0, #1
 8011516:	f884 004e 	strb.w	r0, [r4, #78]	@ 0x4e
 801151a:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 801151e:	2208      	movs	r2, #8
 8011520:	f00f f990 	bl	8020844 <ble_memcpy>
 8011524:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8011528:	f00c fe42 	bl	801e1b0 <os_timer_stop_free>
 801152c:	f894 104f 	ldrb.w	r1, [r4, #79]	@ 0x4f
 8011530:	2000      	movs	r0, #0
 8011532:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 8011536:	b111      	cbz	r1, 801153e <llcp_read_remote_features_received+0x80>
 8011538:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 801153c:	e00b      	b.n	8011556 <llcp_read_remote_features_received+0x98>
 801153e:	2004      	movs	r0, #4
 8011540:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8011544:	2005      	movs	r0, #5
 8011546:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 801154a:	f884 0064 	strb.w	r0, [r4, #100]	@ 0x64
 801154e:	2002      	movs	r0, #2
 8011550:	6624      	str	r4, [r4, #96]	@ 0x60
 8011552:	f00c f8dc 	bl	801d70e <emngr_post_event>
 8011556:	2000      	movs	r0, #0
 8011558:	b00c      	add	sp, #48	@ 0x30
 801155a:	bdb0      	pop	{r4, r5, r7, pc}

0801155c <llcp_disconnect_received>:
 801155c:	4602      	mov	r2, r0
 801155e:	f890 0127 	ldrb.w	r0, [r0, #295]	@ 0x127
 8011562:	2305      	movs	r3, #5
 8011564:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124
 8011568:	b910      	cbnz	r0, 8011570 <llcp_disconnect_received+0x14>
 801156a:	f892 0152 	ldrb.w	r0, [r2, #338]	@ 0x152
 801156e:	b118      	cbz	r0, 8011578 <llcp_disconnect_received+0x1c>
 8011570:	7809      	ldrb	r1, [r1, #0]
 8011572:	4610      	mov	r0, r2
 8011574:	f010 bba6 	b.w	8021cc4 <conn_mngr_disconnect>
 8011578:	780b      	ldrb	r3, [r1, #0]
 801157a:	f8d2 10c0 	ldr.w	r1, [r2, #192]	@ 0xc0
 801157e:	f241 5091 	movw	r0, #5521	@ 0x1591
 8011582:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011586:	f882 312a 	strb.w	r3, [r2, #298]	@ 0x12a
 801158a:	f7fd b912 	b.w	800e7b2 <evnt_schdlr_rgstr_wait_for_evnt_cmplt>
	...

08011590 <llcp_mngr_termination_recevied_clbk>:
 8011590:	b5b0      	push	{r4, r5, r7, lr}
 8011592:	4605      	mov	r5, r0
 8011594:	b131      	cbz	r1, 80115a4 <llcp_mngr_termination_recevied_clbk+0x14>
 8011596:	460c      	mov	r4, r1
 8011598:	4620      	mov	r0, r4
 801159a:	f009 f9a9 	bl	801a8f0 <free_buff_hdr>
 801159e:	6864      	ldr	r4, [r4, #4]
 80115a0:	2c00      	cmp	r4, #0
 80115a2:	d1f9      	bne.n	8011598 <llcp_mngr_termination_recevied_clbk+0x8>
 80115a4:	f895 112a 	ldrb.w	r1, [r5, #298]	@ 0x12a
 80115a8:	4628      	mov	r0, r5
 80115aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80115ae:	f010 bb89 	b.w	8021cc4 <conn_mngr_disconnect>
	...

080115b4 <llcp_check_update_prcdur>:
 80115b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115b8:	b08b      	sub	sp, #44	@ 0x2c
 80115ba:	f890 308a 	ldrb.w	r3, [r0, #138]	@ 0x8a
 80115be:	4604      	mov	r4, r0
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d008      	beq.n	80115d6 <llcp_check_update_prcdur+0x22>
 80115c4:	f894 007b 	ldrb.w	r0, [r4, #123]	@ 0x7b
 80115c8:	2802      	cmp	r0, #2
 80115ca:	d004      	beq.n	80115d6 <llcp_check_update_prcdur+0x22>
 80115cc:	f8b4 0076 	ldrh.w	r0, [r4, #118]	@ 0x76
 80115d0:	2802      	cmp	r0, #2
 80115d2:	f040 80cf 	bne.w	8011774 <llcp_check_update_prcdur+0x1c0>
 80115d6:	8b22      	ldrh	r2, [r4, #24]
 80115d8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 80115dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80115e0:	68c7      	ldr	r7, [r0, #12]
 80115e2:	260a      	movs	r6, #10
 80115e4:	eb06 0242 	add.w	r2, r6, r2, lsl #1
 80115e8:	f104 0974 	add.w	r9, r4, #116	@ 0x74
 80115ec:	b197      	cbz	r7, 8011614 <llcp_check_update_prcdur+0x60>
 80115ee:	6906      	ldr	r6, [r0, #16]
 80115f0:	42b7      	cmp	r7, r6
 80115f2:	d008      	beq.n	8011606 <llcp_check_update_prcdur+0x52>
 80115f4:	2501      	movs	r5, #1
 80115f6:	bf00      	nop
 80115f8:	687f      	ldr	r7, [r7, #4]
 80115fa:	3501      	adds	r5, #1
 80115fc:	42b7      	cmp	r7, r6
 80115fe:	d1fb      	bne.n	80115f8 <llcp_check_update_prcdur+0x44>
 8011600:	b2af      	uxth	r7, r5
 8011602:	007f      	lsls	r7, r7, #1
 8011604:	e000      	b.n	8011608 <llcp_check_update_prcdur+0x54>
 8011606:	2702      	movs	r7, #2
 8011608:	2900      	cmp	r1, #0
 801160a:	bf08      	it	eq
 801160c:	2101      	moveq	r1, #1
 801160e:	fbb7 f1f1 	udiv	r1, r7, r1
 8011612:	440a      	add	r2, r1
 8011614:	2b01      	cmp	r3, #1
 8011616:	d129      	bne.n	801166c <llcp_check_update_prcdur+0xb8>
 8011618:	f8b4 10da 	ldrh.w	r1, [r4, #218]	@ 0xda
 801161c:	b292      	uxth	r2, r2
 801161e:	188e      	adds	r6, r1, r2
 8011620:	4631      	mov	r1, r6
 8011622:	f7fd ffe8 	bl	800f5f6 <evnt_schdlr_optm_conn_param>
 8011626:	f8b4 00da 	ldrh.w	r0, [r4, #218]	@ 0xda
 801162a:	8ae1      	ldrh	r1, [r4, #22]
 801162c:	1a30      	subs	r0, r6, r0
 801162e:	fb00 f001 	mul.w	r0, r0, r1
 8011632:	0849      	lsrs	r1, r1, #1
 8011634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011638:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801163c:	f8a4 608c 	strh.w	r6, [r4, #140]	@ 0x8c
 8011640:	0880      	lsrs	r0, r0, #2
 8011642:	f8a4 6070 	strh.w	r6, [r4, #112]	@ 0x70
 8011646:	466e      	mov	r6, sp
 8011648:	eba0 0791 	sub.w	r7, r0, r1, lsr #2
 801164c:	4630      	mov	r0, r6
 801164e:	4649      	mov	r1, r9
 8011650:	222c      	movs	r2, #44	@ 0x2c
 8011652:	f00f f8f7 	bl	8020844 <ble_memcpy>
 8011656:	4630      	mov	r0, r6
 8011658:	4621      	mov	r1, r4
 801165a:	2200      	movs	r2, #0
 801165c:	2300      	movs	r3, #0
 801165e:	2600      	movs	r6, #0
 8011660:	f7ff fa64 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011664:	4605      	mov	r5, r0
 8011666:	f884 608a 	strb.w	r6, [r4, #138]	@ 0x8a
 801166a:	e088      	b.n	801177e <llcp_check_update_prcdur+0x1ca>
 801166c:	f894 007b 	ldrb.w	r0, [r4, #123]	@ 0x7b
 8011670:	2802      	cmp	r0, #2
 8011672:	d14e      	bne.n	8011712 <llcp_check_update_prcdur+0x15e>
 8011674:	b290      	uxth	r0, r2
 8011676:	8ae1      	ldrh	r1, [r4, #22]
 8011678:	f8b4 30da 	ldrh.w	r3, [r4, #218]	@ 0xda
 801167c:	fb00 f001 	mul.w	r0, r0, r1
 8011680:	f104 0676 	add.w	r6, r4, #118	@ 0x76
 8011684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011688:	441a      	add	r2, r3
 801168a:	ea4f 0890 	mov.w	r8, r0, lsr #2
 801168e:	0848      	lsrs	r0, r1, #1
 8011690:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 8011694:	4630      	mov	r0, r6
 8011696:	f8a4 2074 	strh.w	r2, [r4, #116]	@ 0x74
 801169a:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
 801169e:	f011 f853 	bl	8022748 <db_get_local_chnl_classification>
 80116a2:	f894 0139 	ldrb.w	r0, [r4, #313]	@ 0x139
 80116a6:	2801      	cmp	r0, #1
 80116a8:	d110      	bne.n	80116cc <llcp_check_update_prcdur+0x118>
 80116aa:	f894 012f 	ldrb.w	r0, [r4, #303]	@ 0x12f
 80116ae:	f894 1137 	ldrb.w	r1, [r4, #311]	@ 0x137
 80116b2:	4201      	tst	r1, r0
 80116b4:	d00a      	beq.n	80116cc <llcp_check_update_prcdur+0x118>
 80116b6:	4630      	mov	r0, r6
 80116b8:	f010 fa90 	bl	8021bdc <conn_mngr_calc_num_of_used_data_chnls>
 80116bc:	f894 1138 	ldrb.w	r1, [r4, #312]	@ 0x138
 80116c0:	4288      	cmp	r0, r1
 80116c2:	d203      	bcs.n	80116cc <llcp_check_update_prcdur+0x118>
 80116c4:	4620      	mov	r0, r4
 80116c6:	4631      	mov	r1, r6
 80116c8:	f7ff f95e 	bl	8010988 <llcp_set_req_chnls_in_min_chnls_prcdr>
 80116cc:	466e      	mov	r6, sp
 80116ce:	4630      	mov	r0, r6
 80116d0:	4649      	mov	r1, r9
 80116d2:	2208      	movs	r2, #8
 80116d4:	eba8 0797 	sub.w	r7, r8, r7, lsr #2
 80116d8:	f00f f8b4 	bl	8020844 <ble_memcpy>
 80116dc:	4630      	mov	r0, r6
 80116de:	4621      	mov	r1, r4
 80116e0:	2201      	movs	r2, #1
 80116e2:	2300      	movs	r3, #0
 80116e4:	2600      	movs	r6, #0
 80116e6:	f7ff fa21 	bl	8010b2c <llcp_cntrl_pkt_init>
 80116ea:	f894 1124 	ldrb.w	r1, [r4, #292]	@ 0x124
 80116ee:	290a      	cmp	r1, #10
 80116f0:	d142      	bne.n	8011778 <llcp_check_update_prcdur+0x1c4>
 80116f2:	f642 200f 	movw	r0, #10767	@ 0x2a0f
 80116f6:	f8ad 0000 	strh.w	r0, [sp]
 80116fa:	4668      	mov	r0, sp
 80116fc:	4621      	mov	r1, r4
 80116fe:	2211      	movs	r2, #17
 8011700:	2300      	movs	r3, #0
 8011702:	f7ff fa13 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011706:	4605      	mov	r5, r0
 8011708:	f884 6124 	strb.w	r6, [r4, #292]	@ 0x124
 801170c:	f884 612a 	strb.w	r6, [r4, #298]	@ 0x12a
 8011710:	e033      	b.n	801177a <llcp_check_update_prcdur+0x1c6>
 8011712:	f8b4 0076 	ldrh.w	r0, [r4, #118]	@ 0x76
 8011716:	2802      	cmp	r0, #2
 8011718:	d129      	bne.n	801176e <llcp_check_update_prcdur+0x1ba>
 801171a:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 801171e:	280c      	cmp	r0, #12
 8011720:	d003      	beq.n	801172a <llcp_check_update_prcdur+0x176>
 8011722:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8011726:	280c      	cmp	r0, #12
 8011728:	d121      	bne.n	801176e <llcp_check_update_prcdur+0x1ba>
 801172a:	b290      	uxth	r0, r2
 801172c:	8ae1      	ldrh	r1, [r4, #22]
 801172e:	f8b4 30da 	ldrh.w	r3, [r4, #218]	@ 0xda
 8011732:	fb00 f001 	mul.w	r0, r0, r1
 8011736:	0849      	lsrs	r1, r1, #1
 8011738:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801173c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011740:	441a      	add	r2, r3
 8011742:	0880      	lsrs	r0, r0, #2
 8011744:	466e      	mov	r6, sp
 8011746:	eba0 0791 	sub.w	r7, r0, r1, lsr #2
 801174a:	f8a4 2076 	strh.w	r2, [r4, #118]	@ 0x76
 801174e:	4630      	mov	r0, r6
 8011750:	4649      	mov	r1, r9
 8011752:	2206      	movs	r2, #6
 8011754:	f00f f876 	bl	8020844 <ble_memcpy>
 8011758:	4630      	mov	r0, r6
 801175a:	4621      	mov	r1, r4
 801175c:	2218      	movs	r2, #24
 801175e:	2300      	movs	r3, #0
 8011760:	2600      	movs	r6, #0
 8011762:	f7ff f9e3 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011766:	4605      	mov	r5, r0
 8011768:	f884 612a 	strb.w	r6, [r4, #298]	@ 0x12a
 801176c:	e007      	b.n	801177e <llcp_check_update_prcdur+0x1ca>
 801176e:	2530      	movs	r5, #48	@ 0x30
 8011770:	2700      	movs	r7, #0
 8011772:	e004      	b.n	801177e <llcp_check_update_prcdur+0x1ca>
 8011774:	2530      	movs	r5, #48	@ 0x30
 8011776:	e007      	b.n	8011788 <llcp_check_update_prcdur+0x1d4>
 8011778:	4605      	mov	r5, r0
 801177a:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 801177e:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011782:	0179      	lsls	r1, r7, #5
 8011784:	f00c fbd9 	bl	801df3a <os_timer_start>
 8011788:	4628      	mov	r0, r5
 801178a:	b00b      	add	sp, #44	@ 0x2c
 801178c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011790 <llcp_update_conn_param>:
 8011790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011792:	b08b      	sub	sp, #44	@ 0x2c
 8011794:	2808      	cmp	r0, #8
 8011796:	d20f      	bcs.n	80117b8 <llcp_update_conn_param+0x28>
 8011798:	460d      	mov	r5, r1
 801179a:	f649 7118 	movw	r1, #40728	@ 0x9f18
 801179e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80117a2:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 80117a6:	b13c      	cbz	r4, 80117b8 <llcp_update_conn_param+0x28>
 80117a8:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 80117ac:	b140      	cbz	r0, 80117c0 <llcp_update_conn_param+0x30>
 80117ae:	263a      	movs	r6, #58	@ 0x3a
 80117b0:	2801      	cmp	r0, #1
 80117b2:	bf08      	it	eq
 80117b4:	2611      	moveq	r6, #17
 80117b6:	e000      	b.n	80117ba <llcp_update_conn_param+0x2a>
 80117b8:	2602      	movs	r6, #2
 80117ba:	4630      	mov	r0, r6
 80117bc:	b00b      	add	sp, #44	@ 0x2c
 80117be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117c0:	f894 1123 	ldrb.w	r1, [r4, #291]	@ 0x123
 80117c4:	b129      	cbz	r1, 80117d2 <llcp_update_conn_param+0x42>
 80117c6:	290a      	cmp	r1, #10
 80117c8:	d003      	beq.n	80117d2 <llcp_update_conn_param+0x42>
 80117ca:	f894 1124 	ldrb.w	r1, [r4, #292]	@ 0x124
 80117ce:	2901      	cmp	r1, #1
 80117d0:	d1ed      	bne.n	80117ae <llcp_update_conn_param+0x1e>
 80117d2:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 80117d6:	4629      	mov	r1, r5
 80117d8:	2210      	movs	r2, #16
 80117da:	65a4      	str	r4, [r4, #88]	@ 0x58
 80117dc:	f00f f832 	bl	8020844 <ble_memcpy>
 80117e0:	f894 012e 	ldrb.w	r0, [r4, #302]	@ 0x12e
 80117e4:	2804      	cmp	r0, #4
 80117e6:	d003      	beq.n	80117f0 <llcp_update_conn_param+0x60>
 80117e8:	f894 012f 	ldrb.w	r0, [r4, #303]	@ 0x12f
 80117ec:	2804      	cmp	r0, #4
 80117ee:	d120      	bne.n	8011832 <llcp_update_conn_param+0xa2>
 80117f0:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	@ 0xa8
 80117f4:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 80117f8:	f8b4 00b6 	ldrh.w	r0, [r4, #182]	@ 0xb6
 80117fc:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8011800:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8011804:	4281      	cmp	r1, r0
 8011806:	bf38      	it	cc
 8011808:	4608      	movcc	r0, r1
 801180a:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 801180e:	f600 30bc 	addw	r0, r0, #3004	@ 0xbbc
 8011812:	fb01 f202 	mul.w	r2, r1, r2
 8011816:	4282      	cmp	r2, r0
 8011818:	d20d      	bcs.n	8011836 <llcp_update_conn_param+0xa6>
 801181a:	f241 7159 	movw	r1, #5977	@ 0x1759
 801181e:	f2cd 11b7 	movt	r1, #53687	@ 0xd1b7
 8011822:	fba0 0101 	umull	r0, r1, r0, r1
 8011826:	0a89      	lsrs	r1, r1, #10
 8011828:	f8a4 107e 	strh.w	r1, [r4, #126]	@ 0x7e
 801182c:	f8a4 107c 	strh.w	r1, [r4, #124]	@ 0x7c
 8011830:	e001      	b.n	8011836 <llcp_update_conn_param+0xa6>
 8011832:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8011836:	4620      	mov	r0, r4
 8011838:	f000 f875 	bl	8011926 <llcp_update_eff_max_tx_time>
 801183c:	4606      	mov	r6, r0
 801183e:	2800      	cmp	r0, #0
 8011840:	d1bb      	bne.n	80117ba <llcp_update_conn_param+0x2a>
 8011842:	2005      	movs	r0, #5
 8011844:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
 8011848:	7ba8      	ldrb	r0, [r5, #14]
 801184a:	280b      	cmp	r0, #11
 801184c:	d13f      	bne.n	80118ce <llcp_update_conn_param+0x13e>
 801184e:	f8b4 007e 	ldrh.w	r0, [r4, #126]	@ 0x7e
 8011852:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011856:	f8a4 008e 	strh.w	r0, [r4, #142]	@ 0x8e
 801185a:	89a8      	ldrh	r0, [r5, #12]
 801185c:	4288      	cmp	r0, r1
 801185e:	d033      	beq.n	80118c8 <llcp_update_conn_param+0x138>
 8011860:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8011864:	f8b4 108c 	ldrh.w	r1, [r4, #140]	@ 0x8c
 8011868:	f7fd fec5 	bl	800f5f6 <evnt_schdlr_optm_conn_param>
 801186c:	8ae1      	ldrh	r1, [r4, #22]
 801186e:	f8b4 208e 	ldrh.w	r2, [r4, #142]	@ 0x8e
 8011872:	4291      	cmp	r1, r2
 8011874:	d12b      	bne.n	80118ce <llcp_update_conn_param+0x13e>
 8011876:	4606      	mov	r6, r0
 8011878:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 801187c:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 8011880:	4288      	cmp	r0, r1
 8011882:	d124      	bne.n	80118ce <llcp_update_conn_param+0x13e>
 8011884:	8b60      	ldrh	r0, [r4, #26]
 8011886:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 801188a:	4288      	cmp	r0, r1
 801188c:	d11f      	bne.n	80118ce <llcp_update_conn_param+0x13e>
 801188e:	b1f6      	cbz	r6, 80118ce <llcp_update_conn_param+0x13e>
 8011890:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8011894:	280a      	cmp	r0, #10
 8011896:	d10d      	bne.n	80118b4 <llcp_update_conn_param+0x124>
 8011898:	4668      	mov	r0, sp
 801189a:	4621      	mov	r1, r4
 801189c:	220d      	movs	r2, #13
 801189e:	2300      	movs	r3, #0
 80118a0:	f88d 6000 	strb.w	r6, [sp]
 80118a4:	f7ff f942 	bl	8010b2c <llcp_cntrl_pkt_init>
 80118a8:	4620      	mov	r0, r4
 80118aa:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 80118ae:	b109      	cbz	r1, 80118b4 <llcp_update_conn_param+0x124>
 80118b0:	f00c fc7e 	bl	801e1b0 <os_timer_stop_free>
 80118b4:	2000      	movs	r0, #0
 80118b6:	f884 008a 	strb.w	r0, [r4, #138]	@ 0x8a
 80118ba:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 80118be:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 80118c2:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 80118c6:	e778      	b.n	80117ba <llcp_update_conn_param+0x2a>
 80118c8:	2000      	movs	r0, #0
 80118ca:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 80118ce:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 80118d2:	2102      	movs	r1, #2
 80118d4:	2801      	cmp	r0, #1
 80118d6:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
 80118da:	bf1c      	itt	ne
 80118dc:	2001      	movne	r0, #1
 80118de:	f884 0123 	strbne.w	r0, [r4, #291]	@ 0x123
 80118e2:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 80118e6:	2028      	movs	r0, #40	@ 0x28
 80118e8:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 80118ec:	fab1 f081 	clz	r0, r1
 80118f0:	0940      	lsrs	r0, r0, #5
 80118f2:	2101      	movs	r1, #1
 80118f4:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 80118f8:	2701      	movs	r7, #1
 80118fa:	f00a f810 	bl	801b91e <bsp_assert>
 80118fe:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8011902:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011906:	2100      	movs	r1, #0
 8011908:	462a      	mov	r2, r5
 801190a:	2600      	movs	r6, #0
 801190c:	f00c fa9c 	bl	801de48 <os_timer_create>
 8011910:	2101      	movs	r1, #1
 8011912:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8011916:	2800      	cmp	r0, #0
 8011918:	bf18      	it	ne
 801191a:	2001      	movne	r0, #1
 801191c:	f009 ffff 	bl	801b91e <bsp_assert>
 8011920:	f884 708a 	strb.w	r7, [r4, #138]	@ 0x8a
 8011924:	e749      	b.n	80117ba <llcp_update_conn_param+0x2a>

08011926 <llcp_update_eff_max_tx_time>:
 8011926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011928:	2800      	cmp	r0, #0
 801192a:	d05d      	beq.n	80119e8 <llcp_update_eff_max_tx_time+0xc2>
 801192c:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	@ 0xa8
 8011930:	f44f 7c74 	mov.w	ip, #976	@ 0x3d0
 8011934:	f8b0 30b6 	ldrh.w	r3, [r0, #182]	@ 0xb6
 8011938:	eb0c 1282 	add.w	r2, ip, r2, lsl #6
 801193c:	f8b0 40b2 	ldrh.w	r4, [r0, #178]	@ 0xb2
 8011940:	f240 15bc 	movw	r5, #444	@ 0x1bc
 8011944:	f646 4678 	movw	r6, #27768	@ 0x6c78
 8011948:	429a      	cmp	r2, r3
 801194a:	bf38      	it	cc
 801194c:	4613      	movcc	r3, r2
 801194e:	2200      	movs	r2, #0
 8011950:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8011954:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8011958:	f5b4 6f29 	cmp.w	r4, #2704	@ 0xa90
 801195c:	bf98      	it	ls
 801195e:	2201      	movls	r2, #1
 8011960:	682f      	ldr	r7, [r5, #0]
 8011962:	68b6      	ldr	r6, [r6, #8]
 8011964:	f8b0 e0ac 	ldrh.w	lr, [r0, #172]	@ 0xac
 8011968:	4437      	add	r7, r6
 801196a:	ebc7 1647 	rsb	r6, r7, r7, lsl #5
 801196e:	eb0c 158e 	add.w	r5, ip, lr, lsl #6
 8011972:	eb06 0797 	add.w	r7, r6, r7, lsr #2
 8011976:	42a5      	cmp	r5, r4
 8011978:	bf28      	it	cs
 801197a:	4625      	movcs	r5, r4
 801197c:	eb07 0c03 	add.w	ip, r7, r3
 8011980:	f240 47e2 	movw	r7, #1250	@ 0x4e2
 8011984:	eb0c 0305 	add.w	r3, ip, r5
 8011988:	fb01 fe07 	mul.w	lr, r1, r7
 801198c:	f103 0196 	add.w	r1, r3, #150	@ 0x96
 8011990:	458e      	cmp	lr, r1
 8011992:	f04f 0100 	mov.w	r1, #0
 8011996:	bf28      	it	cs
 8011998:	2101      	movcs	r1, #1
 801199a:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	@ 0xb8
 801199e:	4311      	orrs	r1, r2
 80119a0:	2901      	cmp	r1, #1
 80119a2:	f04f 0100 	mov.w	r1, #0
 80119a6:	bf08      	it	eq
 80119a8:	42a3      	cmpeq	r3, r4
 80119aa:	d01e      	beq.n	80119ea <llcp_update_eff_max_tx_time+0xc4>
 80119ac:	ebae 010c 	sub.w	r1, lr, ip
 80119b0:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 80119b4:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 80119b8:	f44f 6229 	mov.w	r2, #2704	@ 0xa90
 80119bc:	bf98      	it	ls
 80119be:	4611      	movls	r1, r2
 80119c0:	4299      	cmp	r1, r3
 80119c2:	bf28      	it	cs
 80119c4:	4619      	movcs	r1, r3
 80119c6:	f8a0 10b0 	strh.w	r1, [r0, #176]	@ 0xb0
 80119ca:	f5b1 6f29 	cmp.w	r1, #2704	@ 0xa90
 80119ce:	bf88      	it	hi
 80119d0:	460a      	movhi	r2, r1
 80119d2:	f890 312e 	ldrb.w	r3, [r0, #302]	@ 0x12e
 80119d6:	f8a0 20b2 	strh.w	r2, [r0, #178]	@ 0xb2
 80119da:	2b04      	cmp	r3, #4
 80119dc:	bf18      	it	ne
 80119de:	460a      	movne	r2, r1
 80119e0:	2100      	movs	r1, #0
 80119e2:	f8a0 20ae 	strh.w	r2, [r0, #174]	@ 0xae
 80119e6:	e000      	b.n	80119ea <llcp_update_eff_max_tx_time+0xc4>
 80119e8:	2102      	movs	r1, #2
 80119ea:	4608      	mov	r0, r1
 80119ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119ee <llcp_post_timer_evnt_clbk>:
 80119ee:	b510      	push	{r4, lr}
 80119f0:	4604      	mov	r4, r0
 80119f2:	2061      	movs	r0, #97	@ 0x61
 80119f4:	f009 ffda 	bl	801b9ac <bsp_debug_gpio_set>
 80119f8:	2002      	movs	r0, #2
 80119fa:	4621      	mov	r1, r4
 80119fc:	f00b fe87 	bl	801d70e <emngr_post_event>
 8011a00:	2061      	movs	r0, #97	@ 0x61
 8011a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a06:	f009 bfd3 	b.w	801b9b0 <bsp_debug_gpio_clear>

08011a0a <llcp_update_conn_param_received>:
 8011a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a0e:	8b0e      	ldrh	r6, [r1, #24]
 8011a10:	f8b0 70da 	ldrh.w	r7, [r0, #218]	@ 0xda
 8011a14:	4604      	mov	r4, r0
 8011a16:	42b7      	cmp	r7, r6
 8011a18:	bf88      	it	hi
 8011a1a:	f506 3680 	addhi.w	r6, r6, #65536	@ 0x10000
 8011a1e:	f890 0124 	ldrb.w	r0, [r0, #292]	@ 0x124
 8011a22:	f8b4 8016 	ldrh.w	r8, [r4, #22]
 8011a26:	460d      	mov	r5, r1
 8011a28:	280a      	cmp	r0, #10
 8011a2a:	f8a4 6070 	strh.w	r6, [r4, #112]	@ 0x70
 8011a2e:	d105      	bne.n	8011a3c <llcp_update_conn_param_received+0x32>
 8011a30:	4620      	mov	r0, r4
 8011a32:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8011a36:	b109      	cbz	r1, 8011a3c <llcp_update_conn_param_received+0x32>
 8011a38:	f00c fbba 	bl	801e1b0 <os_timer_stop_free>
 8011a3c:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8011a40:	280a      	cmp	r0, #10
 8011a42:	bf04      	itt	eq
 8011a44:	f104 00c8 	addeq.w	r0, r4, #200	@ 0xc8
 8011a48:	f00c fbb2 	bleq	801e1b0 <os_timer_stop_free>
 8011a4c:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8011a50:	2801      	cmp	r0, #1
 8011a52:	d156      	bne.n	8011b02 <llcp_update_conn_param_received+0xf8>
 8011a54:	f8b4 00da 	ldrh.w	r0, [r4, #218]	@ 0xda
 8011a58:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8011a5c:	1a30      	subs	r0, r6, r0
 8011a5e:	1a40      	subs	r0, r0, r1
 8011a60:	b280      	uxth	r0, r0
 8011a62:	f248 0103 	movw	r1, #32771	@ 0x8003
 8011a66:	4288      	cmp	r0, r1
 8011a68:	d34d      	bcc.n	8011b06 <llcp_update_conn_param_received+0xfc>
 8011a6a:	1bf0      	subs	r0, r6, r7
 8011a6c:	fb08 f000 	mul.w	r0, r8, r0
 8011a70:	ea4f 0158 	mov.w	r1, r8, lsr #1
 8011a74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011a78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011a7c:	0880      	lsrs	r0, r0, #2
 8011a7e:	eba0 0791 	sub.w	r7, r0, r1, lsr #2
 8011a82:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8011a86:	65a4      	str	r4, [r4, #88]	@ 0x58
 8011a88:	280a      	cmp	r0, #10
 8011a8a:	f04f 0002 	mov.w	r0, #2
 8011a8e:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8011a92:	f04f 0001 	mov.w	r0, #1
 8011a96:	bf14      	ite	ne
 8011a98:	f884 0124 	strbne.w	r0, [r4, #292]	@ 0x124
 8011a9c:	f884 0123 	strbeq.w	r0, [r4, #291]	@ 0x123
 8011aa0:	f104 0074 	add.w	r0, r4, #116	@ 0x74
 8011aa4:	4629      	mov	r1, r5
 8011aa6:	222c      	movs	r2, #44	@ 0x2c
 8011aa8:	f104 0658 	add.w	r6, r4, #88	@ 0x58
 8011aac:	f00e feca 	bl	8020844 <ble_memcpy>
 8011ab0:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011ab4:	2500      	movs	r5, #0
 8011ab6:	fab0 f080 	clz	r0, r0
 8011aba:	0940      	lsrs	r0, r0, #5
 8011abc:	2101      	movs	r1, #1
 8011abe:	f884 512a 	strb.w	r5, [r4, #298]	@ 0x12a
 8011ac2:	f009 ff2c 	bl	801b91e <bsp_assert>
 8011ac6:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8011aca:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011ace:	2100      	movs	r1, #0
 8011ad0:	4632      	mov	r2, r6
 8011ad2:	f00c f9b9 	bl	801de48 <os_timer_create>
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8011adc:	2800      	cmp	r0, #0
 8011ade:	bf18      	it	ne
 8011ae0:	2001      	movne	r0, #1
 8011ae2:	f009 ff1c 	bl	801b91e <bsp_assert>
 8011ae6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011aea:	0179      	lsls	r1, r7, #5
 8011aec:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8011af0:	f00c fa23 	bl	801df3a <os_timer_start>
 8011af4:	f8b4 108e 	ldrh.w	r1, [r4, #142]	@ 0x8e
 8011af8:	4620      	mov	r0, r4
 8011afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011afe:	f7ff bf12 	b.w	8011926 <llcp_update_eff_max_tx_time>
 8011b02:	2400      	movs	r4, #0
 8011b04:	e004      	b.n	8011b10 <llcp_update_conn_param_received+0x106>
 8011b06:	4620      	mov	r0, r4
 8011b08:	2128      	movs	r1, #40	@ 0x28
 8011b0a:	2428      	movs	r4, #40	@ 0x28
 8011b0c:	f010 f8da 	bl	8021cc4 <conn_mngr_disconnect>
 8011b10:	4620      	mov	r0, r4
 8011b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b16 <llcp_update_param_req>:
 8011b16:	b570      	push	{r4, r5, r6, lr}
 8011b18:	b08c      	sub	sp, #48	@ 0x30
 8011b1a:	2808      	cmp	r0, #8
 8011b1c:	d21b      	bcs.n	8011b56 <llcp_update_param_req+0x40>
 8011b1e:	460e      	mov	r6, r1
 8011b20:	f649 7118 	movw	r1, #40728	@ 0x9f18
 8011b24:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011b28:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8011b2c:	b19c      	cbz	r4, 8011b56 <llcp_update_param_req+0x40>
 8011b2e:	88b2      	ldrh	r2, [r6, #4]
 8011b30:	8873      	ldrh	r3, [r6, #2]
 8011b32:	88f1      	ldrh	r1, [r6, #6]
 8011b34:	3201      	adds	r2, #1
 8011b36:	fb03 f202 	mul.w	r2, r3, r2
 8011b3a:	00c9      	lsls	r1, r1, #3
 8011b3c:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8011b40:	d90d      	bls.n	8011b5e <llcp_update_param_req+0x48>
 8011b42:	f894 1046 	ldrb.w	r1, [r4, #70]	@ 0x46
 8011b46:	0789      	lsls	r1, r1, #30
 8011b48:	d40b      	bmi.n	8011b62 <llcp_update_param_req+0x4c>
 8011b4a:	f894 1127 	ldrb.w	r1, [r4, #295]	@ 0x127
 8011b4e:	2901      	cmp	r1, #1
 8011b50:	d10f      	bne.n	8011b72 <llcp_update_param_req+0x5c>
 8011b52:	251a      	movs	r5, #26
 8011b54:	e000      	b.n	8011b58 <llcp_update_param_req+0x42>
 8011b56:	2502      	movs	r5, #2
 8011b58:	4628      	mov	r0, r5
 8011b5a:	b00c      	add	sp, #48	@ 0x30
 8011b5c:	bd70      	pop	{r4, r5, r6, pc}
 8011b5e:	2512      	movs	r5, #18
 8011b60:	e7fa      	b.n	8011b58 <llcp_update_param_req+0x42>
 8011b62:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8011b66:	b910      	cbnz	r0, 8011b6e <llcp_update_param_req+0x58>
 8011b68:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011b6c:	b138      	cbz	r0, 8011b7e <llcp_update_param_req+0x68>
 8011b6e:	253a      	movs	r5, #58	@ 0x3a
 8011b70:	e7f2      	b.n	8011b58 <llcp_update_param_req+0x42>
 8011b72:	4631      	mov	r1, r6
 8011b74:	b00c      	add	sp, #48	@ 0x30
 8011b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b7a:	f7ff be09 	b.w	8011790 <llcp_update_conn_param>
 8011b7e:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8011b82:	4631      	mov	r1, r6
 8011b84:	2210      	movs	r2, #16
 8011b86:	f104 0574 	add.w	r5, r4, #116	@ 0x74
 8011b8a:	f00e fe5b 	bl	8020844 <ble_memcpy>
 8011b8e:	f8b4 00da 	ldrh.w	r0, [r4, #218]	@ 0xda
 8011b92:	300a      	adds	r0, #10
 8011b94:	f8a4 008c 	strh.w	r0, [r4, #140]	@ 0x8c
 8011b98:	7bb0      	ldrb	r0, [r6, #14]
 8011b9a:	2811      	cmp	r0, #17
 8011b9c:	d019      	beq.n	8011bd2 <llcp_update_param_req+0xbc>
 8011b9e:	280b      	cmp	r0, #11
 8011ba0:	d11c      	bne.n	8011bdc <llcp_update_param_req+0xc6>
 8011ba2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8011ba6:	2600      	movs	r6, #0
 8011ba8:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 8011bac:	f104 0092 	add.w	r0, r4, #146	@ 0x92
 8011bb0:	210a      	movs	r1, #10
 8011bb2:	22ff      	movs	r2, #255	@ 0xff
 8011bb4:	f884 6090 	strb.w	r6, [r4, #144]	@ 0x90
 8011bb8:	f7ee faf2 	bl	80001a0 <__aeabi_memset>
 8011bbc:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8011bc0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8011bc4:	f884 609c 	strb.w	r6, [r4, #156]	@ 0x9c
 8011bc8:	f8a4 108e 	strh.w	r1, [r4, #142]	@ 0x8e
 8011bcc:	f7fd fd1b 	bl	800f606 <evnt_schdlr_conn_parm_req>
 8011bd0:	e004      	b.n	8011bdc <llcp_update_param_req+0xc6>
 8011bd2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8011bd4:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8011bd8:	f7fd fd1c 	bl	800f614 <evnt_schdlr_calc_win_offset>
 8011bdc:	2001      	movs	r0, #1
 8011bde:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8011be2:	4620      	mov	r0, r4
 8011be4:	210a      	movs	r1, #10
 8011be6:	f7ff fa29 	bl	801103c <llcp_cntrl_init>
 8011bea:	ae01      	add	r6, sp, #4
 8011bec:	4630      	mov	r0, r6
 8011bee:	4629      	mov	r1, r5
 8011bf0:	222c      	movs	r2, #44	@ 0x2c
 8011bf2:	f00e fe27 	bl	8020844 <ble_memcpy>
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	4621      	mov	r1, r4
 8011bfa:	220f      	movs	r2, #15
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	f7fe ff95 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011c02:	f894 1127 	ldrb.w	r1, [r4, #295]	@ 0x127
 8011c06:	2901      	cmp	r1, #1
 8011c08:	d01a      	beq.n	8011c40 <llcp_update_param_req+0x12a>
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	d1a3      	bne.n	8011b58 <llcp_update_param_req+0x42>
 8011c10:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8011c14:	280a      	cmp	r0, #10
 8011c16:	bf18      	it	ne
 8011c18:	2801      	cmpne	r0, #1
 8011c1a:	d19d      	bne.n	8011b58 <llcp_update_param_req+0x42>
 8011c1c:	f242 300f 	movw	r0, #8975	@ 0x230f
 8011c20:	f8ad 0004 	strh.w	r0, [sp, #4]
 8011c24:	a801      	add	r0, sp, #4
 8011c26:	4621      	mov	r1, r4
 8011c28:	2211      	movs	r2, #17
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	2600      	movs	r6, #0
 8011c2e:	f7fe ff7d 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011c32:	f884 608a 	strb.w	r6, [r4, #138]	@ 0x8a
 8011c36:	f884 6124 	strb.w	r6, [r4, #292]	@ 0x124
 8011c3a:	f884 612a 	strb.w	r6, [r4, #298]	@ 0x12a
 8011c3e:	e78b      	b.n	8011b58 <llcp_update_param_req+0x42>
 8011c40:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
 8011c44:	4620      	mov	r0, r4
 8011c46:	f7ff fe6e 	bl	8011926 <llcp_update_eff_max_tx_time>
 8011c4a:	4605      	mov	r5, r0
 8011c4c:	e784      	b.n	8011b58 <llcp_update_param_req+0x42>

08011c4e <llcp_update_param_req_received>:
 8011c4e:	b570      	push	{r4, r5, r6, lr}
 8011c50:	b082      	sub	sp, #8
 8011c52:	4604      	mov	r4, r0
 8011c54:	3074      	adds	r0, #116	@ 0x74
 8011c56:	222c      	movs	r2, #44	@ 0x2c
 8011c58:	460d      	mov	r5, r1
 8011c5a:	f00e fdf3 	bl	8020844 <ble_memcpy>
 8011c5e:	8ae0      	ldrh	r0, [r4, #22]
 8011c60:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8011c64:	4288      	cmp	r0, r1
 8011c66:	d10d      	bne.n	8011c84 <llcp_update_param_req_received+0x36>
 8011c68:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 8011c6c:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 8011c70:	4288      	cmp	r0, r1
 8011c72:	d107      	bne.n	8011c84 <llcp_update_param_req_received+0x36>
 8011c74:	8b60      	ldrh	r0, [r4, #26]
 8011c76:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 8011c7a:	4288      	cmp	r0, r1
 8011c7c:	d102      	bne.n	8011c84 <llcp_update_param_req_received+0x36>
 8011c7e:	f894 009c 	ldrb.w	r0, [r4, #156]	@ 0x9c
 8011c82:	b3d8      	cbz	r0, 8011cfc <llcp_update_param_req_received+0xae>
 8011c84:	2007      	movs	r0, #7
 8011c86:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	210a      	movs	r1, #10
 8011c8e:	f7ff f9d5 	bl	801103c <llcp_cntrl_init>
 8011c92:	8929      	ldrh	r1, [r5, #8]
 8011c94:	8968      	ldrh	r0, [r5, #10]
 8011c96:	261e      	movs	r6, #30
 8011c98:	4281      	cmp	r1, r0
 8011c9a:	d827      	bhi.n	8011cec <llcp_update_param_req_received+0x9e>
 8011c9c:	89aa      	ldrh	r2, [r5, #12]
 8011c9e:	0892      	lsrs	r2, r2, #2
 8011ca0:	2a7c      	cmp	r2, #124	@ 0x7c
 8011ca2:	d823      	bhi.n	8011cec <llcp_update_param_req_received+0x9e>
 8011ca4:	1f8a      	subs	r2, r1, #6
 8011ca6:	f640 417a 	movw	r1, #3194	@ 0xc7a
 8011caa:	428a      	cmp	r2, r1
 8011cac:	d81e      	bhi.n	8011cec <llcp_update_param_req_received+0x9e>
 8011cae:	3806      	subs	r0, #6
 8011cb0:	4288      	cmp	r0, r1
 8011cb2:	d81b      	bhi.n	8011cec <llcp_update_param_req_received+0x9e>
 8011cb4:	89e8      	ldrh	r0, [r5, #14]
 8011cb6:	f640 4176 	movw	r1, #3190	@ 0xc76
 8011cba:	380a      	subs	r0, #10
 8011cbc:	4288      	cmp	r0, r1
 8011cbe:	d815      	bhi.n	8011cec <llcp_update_param_req_received+0x9e>
 8011cc0:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8011cc4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8011cc8:	6800      	ldr	r0, [r0, #0]
 8011cca:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011ccc:	b16e      	cbz	r6, 8011cea <llcp_update_param_req_received+0x9c>
 8011cce:	200a      	movs	r0, #10
 8011cd0:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8011cd4:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8011cd8:	8929      	ldrh	r1, [r5, #8]
 8011cda:	896a      	ldrh	r2, [r5, #10]
 8011cdc:	89ab      	ldrh	r3, [r5, #12]
 8011cde:	89ed      	ldrh	r5, [r5, #14]
 8011ce0:	9500      	str	r5, [sp, #0]
 8011ce2:	47b0      	blx	r6
 8011ce4:	4606      	mov	r6, r0
 8011ce6:	b908      	cbnz	r0, 8011cec <llcp_update_param_req_received+0x9e>
 8011ce8:	e011      	b.n	8011d0e <llcp_update_param_req_received+0xc0>
 8011cea:	261a      	movs	r6, #26
 8011cec:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8011cf0:	b2f1      	uxtb	r1, r6
 8011cf2:	f000 f80e 	bl	8011d12 <llcp_pram_ngtv_rply>
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	b002      	add	sp, #8
 8011cfa:	bd70      	pop	{r4, r5, r6, pc}
 8011cfc:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8011d00:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
 8011d04:	220a      	movs	r2, #10
 8011d06:	f884 2124 	strb.w	r2, [r4, #292]	@ 0x124
 8011d0a:	f000 f82a 	bl	8011d62 <llcp_pram_pstv_rply>
 8011d0e:	2600      	movs	r6, #0
 8011d10:	e7f1      	b.n	8011cf6 <llcp_update_param_req_received+0xa8>

08011d12 <llcp_pram_ngtv_rply>:
 8011d12:	b5b0      	push	{r4, r5, r7, lr}
 8011d14:	b08c      	sub	sp, #48	@ 0x30
 8011d16:	2808      	cmp	r0, #8
 8011d18:	d21f      	bcs.n	8011d5a <llcp_pram_ngtv_rply+0x48>
 8011d1a:	f649 7218 	movw	r2, #40728	@ 0x9f18
 8011d1e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8011d22:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8011d26:	200f      	movs	r0, #15
 8011d28:	f88d 1005 	strb.w	r1, [sp, #5]
 8011d2c:	f88d 0004 	strb.w	r0, [sp, #4]
 8011d30:	b19c      	cbz	r4, 8011d5a <llcp_pram_ngtv_rply+0x48>
 8011d32:	a801      	add	r0, sp, #4
 8011d34:	4621      	mov	r1, r4
 8011d36:	2211      	movs	r2, #17
 8011d38:	2300      	movs	r3, #0
 8011d3a:	2500      	movs	r5, #0
 8011d3c:	f7fe fef6 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011d40:	4620      	mov	r0, r4
 8011d42:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8011d46:	b109      	cbz	r1, 8011d4c <llcp_pram_ngtv_rply+0x3a>
 8011d48:	f00c fa32 	bl	801e1b0 <os_timer_stop_free>
 8011d4c:	f884 508a 	strb.w	r5, [r4, #138]	@ 0x8a
 8011d50:	f884 5124 	strb.w	r5, [r4, #292]	@ 0x124
 8011d54:	f884 512a 	strb.w	r5, [r4, #298]	@ 0x12a
 8011d58:	e000      	b.n	8011d5c <llcp_pram_ngtv_rply+0x4a>
 8011d5a:	2502      	movs	r5, #2
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	b00c      	add	sp, #48	@ 0x30
 8011d60:	bdb0      	pop	{r4, r5, r7, pc}

08011d62 <llcp_pram_pstv_rply>:
 8011d62:	b5b0      	push	{r4, r5, r7, lr}
 8011d64:	b08c      	sub	sp, #48	@ 0x30
 8011d66:	2808      	cmp	r0, #8
 8011d68:	d238      	bcs.n	8011ddc <llcp_pram_pstv_rply+0x7a>
 8011d6a:	460d      	mov	r5, r1
 8011d6c:	f649 7118 	movw	r1, #40728	@ 0x9f18
 8011d70:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8011d74:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8011d78:	b384      	cbz	r4, 8011ddc <llcp_pram_pstv_rply+0x7a>
 8011d7a:	88e8      	ldrh	r0, [r5, #6]
 8011d7c:	88a9      	ldrh	r1, [r5, #4]
 8011d7e:	886a      	ldrh	r2, [r5, #2]
 8011d80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011d84:	3101      	adds	r1, #1
 8011d86:	fb02 f101 	mul.w	r1, r2, r1
 8011d8a:	0040      	lsls	r0, r0, #1
 8011d8c:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8011d90:	d927      	bls.n	8011de2 <llcp_pram_pstv_rply+0x80>
 8011d92:	4620      	mov	r0, r4
 8011d94:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8011d98:	b109      	cbz	r1, 8011d9e <llcp_pram_pstv_rply+0x3c>
 8011d9a:	f00c fa09 	bl	801e1b0 <os_timer_stop_free>
 8011d9e:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8011da2:	b300      	cbz	r0, 8011de6 <llcp_pram_pstv_rply+0x84>
 8011da4:	2000      	movs	r0, #0
 8011da6:	f884 0090 	strb.w	r0, [r4, #144]	@ 0x90
 8011daa:	8868      	ldrh	r0, [r5, #2]
 8011dac:	f104 0174 	add.w	r1, r4, #116	@ 0x74
 8011db0:	f8a4 007e 	strh.w	r0, [r4, #126]	@ 0x7e
 8011db4:	8828      	ldrh	r0, [r5, #0]
 8011db6:	ad01      	add	r5, sp, #4
 8011db8:	f8a4 007c 	strh.w	r0, [r4, #124]	@ 0x7c
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	222c      	movs	r2, #44	@ 0x2c
 8011dc0:	f00e fd40 	bl	8020844 <ble_memcpy>
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	4621      	mov	r1, r4
 8011dc8:	2210      	movs	r2, #16
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f7fe feae 	bl	8010b2c <llcp_cntrl_pkt_init>
 8011dd0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	@ 0x7c
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f7ff fda6 	bl	8011926 <llcp_update_eff_max_tx_time>
 8011dda:	e000      	b.n	8011dde <llcp_pram_pstv_rply+0x7c>
 8011ddc:	2002      	movs	r0, #2
 8011dde:	b00c      	add	sp, #48	@ 0x30
 8011de0:	bdb0      	pop	{r4, r5, r7, pc}
 8011de2:	2012      	movs	r0, #18
 8011de4:	e7fb      	b.n	8011dde <llcp_pram_pstv_rply+0x7c>
 8011de6:	200b      	movs	r0, #11
 8011de8:	73a8      	strb	r0, [r5, #14]
 8011dea:	f8b4 0088 	ldrh.w	r0, [r4, #136]	@ 0x88
 8011dee:	4629      	mov	r1, r5
 8011df0:	81a8      	strh	r0, [r5, #12]
 8011df2:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8011df6:	b00c      	add	sp, #48	@ 0x30
 8011df8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8011dfc:	f7ff bcc8 	b.w	8011790 <llcp_update_conn_param>

08011e00 <llcp_update_chnl_map_per_connection>:
 8011e00:	b5b0      	push	{r4, r5, r7, lr}
 8011e02:	4604      	mov	r4, r0
 8011e04:	f890 0127 	ldrb.w	r0, [r0, #295]	@ 0x127
 8011e08:	2801      	cmp	r0, #1
 8011e0a:	d012      	beq.n	8011e32 <llcp_update_chnl_map_per_connection+0x32>
 8011e0c:	b978      	cbnz	r0, 8011e2e <llcp_update_chnl_map_per_connection+0x2e>
 8011e0e:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8011e12:	b180      	cbz	r0, 8011e36 <llcp_update_chnl_map_per_connection+0x36>
 8011e14:	2100      	movs	r1, #0
 8011e16:	2001      	movs	r0, #1
 8011e18:	4421      	add	r1, r4
 8011e1a:	f891 2146 	ldrb.w	r2, [r1, #326]	@ 0x146
 8011e1e:	2aff      	cmp	r2, #255	@ 0xff
 8011e20:	d031      	beq.n	8011e86 <llcp_update_chnl_map_per_connection+0x86>
 8011e22:	07c0      	lsls	r0, r0, #31
 8011e24:	f04f 0101 	mov.w	r1, #1
 8011e28:	f04f 0000 	mov.w	r0, #0
 8011e2c:	d1f4      	bne.n	8011e18 <llcp_update_chnl_map_per_connection+0x18>
 8011e2e:	253a      	movs	r5, #58	@ 0x3a
 8011e30:	e02e      	b.n	8011e90 <llcp_update_chnl_map_per_connection+0x90>
 8011e32:	2511      	movs	r5, #17
 8011e34:	e02c      	b.n	8011e90 <llcp_update_chnl_map_per_connection+0x90>
 8011e36:	2003      	movs	r0, #3
 8011e38:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8011e3c:	2002      	movs	r0, #2
 8011e3e:	f884 007b 	strb.w	r0, [r4, #123]	@ 0x7b
 8011e42:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8011e46:	2028      	movs	r0, #40	@ 0x28
 8011e48:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 8011e4c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011e50:	2101      	movs	r1, #1
 8011e52:	fab0 f080 	clz	r0, r0
 8011e56:	0940      	lsrs	r0, r0, #5
 8011e58:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 8011e5c:	65a4      	str	r4, [r4, #88]	@ 0x58
 8011e5e:	f009 fd5e 	bl	801b91e <bsp_assert>
 8011e62:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8011e66:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	462a      	mov	r2, r5
 8011e6e:	2500      	movs	r5, #0
 8011e70:	f00b ffea 	bl	801de48 <os_timer_create>
 8011e74:	2101      	movs	r1, #1
 8011e76:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	bf18      	it	ne
 8011e7e:	2001      	movne	r0, #1
 8011e80:	f009 fd4d 	bl	801b91e <bsp_assert>
 8011e84:	e004      	b.n	8011e90 <llcp_update_chnl_map_per_connection+0x90>
 8011e86:	f501 70a3 	add.w	r0, r1, #326	@ 0x146
 8011e8a:	2102      	movs	r1, #2
 8011e8c:	7001      	strb	r1, [r0, #0]
 8011e8e:	2500      	movs	r5, #0
 8011e90:	4628      	mov	r0, r5
 8011e92:	bdb0      	pop	{r4, r5, r7, pc}

08011e94 <llcp_update_chnl_map>:
 8011e94:	b5b0      	push	{r4, r5, r7, lr}
 8011e96:	f649 7518 	movw	r5, #40728	@ 0x9f18
 8011e9a:	2400      	movs	r4, #0
 8011e9c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8011ea0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8011ea4:	b108      	cbz	r0, 8011eaa <llcp_update_chnl_map+0x16>
 8011ea6:	f7ff ffab 	bl	8011e00 <llcp_update_chnl_map_per_connection>
 8011eaa:	3401      	adds	r4, #1
 8011eac:	2c08      	cmp	r4, #8
 8011eae:	bf04      	itt	eq
 8011eb0:	2028      	moveq	r0, #40	@ 0x28
 8011eb2:	bdb0      	popeq	{r4, r5, r7, pc}
 8011eb4:	e7f4      	b.n	8011ea0 <llcp_update_chnl_map+0xc>

08011eb6 <llcp_update_chnl_map_received>:
 8011eb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011eba:	b081      	sub	sp, #4
 8011ebc:	880f      	ldrh	r7, [r1, #0]
 8011ebe:	f8b0 50da 	ldrh.w	r5, [r0, #218]	@ 0xda
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	42bd      	cmp	r5, r7
 8011ec6:	bf88      	it	hi
 8011ec8:	f507 3780 	addhi.w	r7, r7, #65536	@ 0x10000
 8011ecc:	f890 0127 	ldrb.w	r0, [r0, #295]	@ 0x127
 8011ed0:	f8b4 9016 	ldrh.w	r9, [r4, #22]
 8011ed4:	2801      	cmp	r0, #1
 8011ed6:	f8a4 7070 	strh.w	r7, [r4, #112]	@ 0x70
 8011eda:	d12d      	bne.n	8011f38 <llcp_update_chnl_map_received+0x82>
 8011edc:	460e      	mov	r6, r1
 8011ede:	8808      	ldrh	r0, [r1, #0]
 8011ee0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8011ee4:	f6cf 71ff 	movt	r1, #65535	@ 0xffff
 8011ee8:	1b49      	subs	r1, r1, r5
 8011eea:	4408      	add	r0, r1
 8011eec:	b280      	uxth	r0, r0
 8011eee:	f248 0103 	movw	r1, #32771	@ 0x8003
 8011ef2:	4288      	cmp	r0, r1
 8011ef4:	d323      	bcc.n	8011f3e <llcp_update_chnl_map_received+0x88>
 8011ef6:	2003      	movs	r0, #3
 8011ef8:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8011efc:	2002      	movs	r0, #2
 8011efe:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8011f02:	f894 0139 	ldrb.w	r0, [r4, #313]	@ 0x139
 8011f06:	f04f 0800 	mov.w	r8, #0
 8011f0a:	2801      	cmp	r0, #1
 8011f0c:	65a4      	str	r4, [r4, #88]	@ 0x58
 8011f0e:	f884 812a 	strb.w	r8, [r4, #298]	@ 0x12a
 8011f12:	d11b      	bne.n	8011f4c <llcp_update_chnl_map_received+0x96>
 8011f14:	f894 012e 	ldrb.w	r0, [r4, #302]	@ 0x12e
 8011f18:	f894 1137 	ldrb.w	r1, [r4, #311]	@ 0x137
 8011f1c:	4201      	tst	r1, r0
 8011f1e:	d015      	beq.n	8011f4c <llcp_update_chnl_map_received+0x96>
 8011f20:	1cb0      	adds	r0, r6, #2
 8011f22:	f00f fe5b 	bl	8021bdc <conn_mngr_calc_num_of_used_data_chnls>
 8011f26:	f894 1138 	ldrb.w	r1, [r4, #312]	@ 0x138
 8011f2a:	4288      	cmp	r0, r1
 8011f2c:	d20e      	bcs.n	8011f4c <llcp_update_chnl_map_received+0x96>
 8011f2e:	4620      	mov	r0, r4
 8011f30:	211a      	movs	r1, #26
 8011f32:	f04f 081a 	mov.w	r8, #26
 8011f36:	e006      	b.n	8011f46 <llcp_update_chnl_map_received+0x90>
 8011f38:	f04f 0800 	mov.w	r8, #0
 8011f3c:	e039      	b.n	8011fb2 <llcp_update_chnl_map_received+0xfc>
 8011f3e:	4620      	mov	r0, r4
 8011f40:	2128      	movs	r1, #40	@ 0x28
 8011f42:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8011f46:	f00f febd 	bl	8021cc4 <conn_mngr_disconnect>
 8011f4a:	e032      	b.n	8011fb2 <llcp_update_chnl_map_received+0xfc>
 8011f4c:	1b78      	subs	r0, r7, r5
 8011f4e:	fb09 f000 	mul.w	r0, r9, r0
 8011f52:	ea4f 0159 	mov.w	r1, r9, lsr #1
 8011f56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011f5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011f5e:	0880      	lsrs	r0, r0, #2
 8011f60:	eba0 0591 	sub.w	r5, r0, r1, lsr #2
 8011f64:	f104 0074 	add.w	r0, r4, #116	@ 0x74
 8011f68:	4631      	mov	r1, r6
 8011f6a:	2208      	movs	r2, #8
 8011f6c:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8011f70:	f00e fc68 	bl	8020844 <ble_memcpy>
 8011f74:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011f78:	2101      	movs	r1, #1
 8011f7a:	fab0 f080 	clz	r0, r0
 8011f7e:	0940      	lsrs	r0, r0, #5
 8011f80:	f009 fccd 	bl	801b91e <bsp_assert>
 8011f84:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8011f88:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	463a      	mov	r2, r7
 8011f90:	f00b ff5a 	bl	801de48 <os_timer_create>
 8011f94:	2101      	movs	r1, #1
 8011f96:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	bf18      	it	ne
 8011f9e:	2001      	movne	r0, #1
 8011fa0:	f009 fcbd 	bl	801b91e <bsp_assert>
 8011fa4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8011fa8:	0169      	lsls	r1, r5, #5
 8011faa:	f8a4 80dc 	strh.w	r8, [r4, #220]	@ 0xdc
 8011fae:	f00b ffc4 	bl	801df3a <os_timer_start>
 8011fb2:	4640      	mov	r0, r8
 8011fb4:	b001      	add	sp, #4
 8011fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011fba <llcp_process_pkt>:
 8011fba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fbe:	b081      	sub	sp, #4
 8011fc0:	460d      	mov	r5, r1
 8011fc2:	f8b0 90de 	ldrh.w	r9, [r0, #222]	@ 0xde
 8011fc6:	2101      	movs	r1, #1
 8011fc8:	4698      	mov	r8, r3
 8011fca:	4617      	mov	r7, r2
 8011fcc:	4606      	mov	r6, r0
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	bf18      	it	ne
 8011fd2:	2001      	movne	r0, #1
 8011fd4:	2401      	movs	r4, #1
 8011fd6:	f009 fca2 	bl	801b91e <bsp_assert>
 8011fda:	b935      	cbnz	r5, 8011fea <llcp_process_pkt+0x30>
 8011fdc:	b127      	cbz	r7, 8011fe8 <llcp_process_pkt+0x2e>
 8011fde:	783c      	ldrb	r4, [r7, #0]
 8011fe0:	2c00      	cmp	r4, #0
 8011fe2:	bf18      	it	ne
 8011fe4:	2401      	movne	r4, #1
 8011fe6:	e000      	b.n	8011fea <llcp_process_pkt+0x30>
 8011fe8:	2400      	movs	r4, #0
 8011fea:	4620      	mov	r0, r4
 8011fec:	2101      	movs	r1, #1
 8011fee:	f009 fc96 	bl	801b91e <bsp_assert>
 8011ff2:	7838      	ldrb	r0, [r7, #0]
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	f000 8102 	beq.w	80121fe <llcp_process_pkt+0x244>
 8011ffa:	f896 0123 	ldrb.w	r0, [r6, #291]	@ 0x123
 8011ffe:	2801      	cmp	r0, #1
 8012000:	d010      	beq.n	8012024 <llcp_process_pkt+0x6a>
 8012002:	f896 1124 	ldrb.w	r1, [r6, #292]	@ 0x124
 8012006:	2901      	cmp	r1, #1
 8012008:	d00c      	beq.n	8012024 <llcp_process_pkt+0x6a>
 801200a:	2802      	cmp	r0, #2
 801200c:	bf18      	it	ne
 801200e:	2805      	cmpne	r0, #5
 8012010:	d008      	beq.n	8012024 <llcp_process_pkt+0x6a>
 8012012:	2907      	cmp	r1, #7
 8012014:	bf18      	it	ne
 8012016:	2807      	cmpne	r0, #7
 8012018:	d004      	beq.n	8012024 <llcp_process_pkt+0x6a>
 801201a:	280c      	cmp	r0, #12
 801201c:	bf18      	it	ne
 801201e:	2908      	cmpne	r1, #8
 8012020:	f040 8094 	bne.w	801214c <llcp_process_pkt+0x192>
 8012024:	f896 2150 	ldrb.w	r2, [r6, #336]	@ 0x150
 8012028:	2a2b      	cmp	r2, #43	@ 0x2b
 801202a:	d104      	bne.n	8012036 <llcp_process_pkt+0x7c>
 801202c:	f896 1151 	ldrb.w	r1, [r6, #337]	@ 0x151
 8012030:	292b      	cmp	r1, #43	@ 0x2b
 8012032:	f000 80e2 	beq.w	80121fa <llcp_process_pkt+0x240>
 8012036:	2801      	cmp	r0, #1
 8012038:	f506 71a8 	add.w	r1, r6, #336	@ 0x150
 801203c:	d003      	beq.n	8012046 <llcp_process_pkt+0x8c>
 801203e:	f896 3124 	ldrb.w	r3, [r6, #292]	@ 0x124
 8012042:	2b01      	cmp	r3, #1
 8012044:	d103      	bne.n	801204e <llcp_process_pkt+0x94>
 8012046:	b152      	cbz	r2, 801205e <llcp_process_pkt+0xa4>
 8012048:	f896 3151 	ldrb.w	r3, [r6, #337]	@ 0x151
 801204c:	b16b      	cbz	r3, 801206a <llcp_process_pkt+0xb0>
 801204e:	2805      	cmp	r0, #5
 8012050:	d007      	beq.n	8012062 <llcp_process_pkt+0xa8>
 8012052:	2802      	cmp	r0, #2
 8012054:	d132      	bne.n	80120bc <llcp_process_pkt+0x102>
 8012056:	2a01      	cmp	r2, #1
 8012058:	d116      	bne.n	8012088 <llcp_process_pkt+0xce>
 801205a:	2000      	movs	r0, #0
 801205c:	e019      	b.n	8012092 <llcp_process_pkt+0xd8>
 801205e:	2200      	movs	r2, #0
 8012060:	e004      	b.n	801206c <llcp_process_pkt+0xb2>
 8012062:	2a02      	cmp	r2, #2
 8012064:	d11b      	bne.n	801209e <llcp_process_pkt+0xe4>
 8012066:	2000      	movs	r0, #0
 8012068:	e01e      	b.n	80120a8 <llcp_process_pkt+0xee>
 801206a:	2201      	movs	r2, #1
 801206c:	4630      	mov	r0, r6
 801206e:	f850 4fc8 	ldr.w	r4, [r0, #200]!
 8012072:	232b      	movs	r3, #43	@ 0x2b
 8012074:	548b      	strb	r3, [r1, r2]
 8012076:	2196      	movs	r1, #150	@ 0x96
 8012078:	2c00      	cmp	r4, #0
 801207a:	f880 1062 	strb.w	r1, [r0, #98]	@ 0x62
 801207e:	f000 80bc 	beq.w	80121fa <llcp_process_pkt+0x240>
 8012082:	f00c f895 	bl	801e1b0 <os_timer_stop_free>
 8012086:	e0b8      	b.n	80121fa <llcp_process_pkt+0x240>
 8012088:	f896 3151 	ldrb.w	r3, [r6, #337]	@ 0x151
 801208c:	2b01      	cmp	r3, #1
 801208e:	d115      	bne.n	80120bc <llcp_process_pkt+0x102>
 8012090:	2001      	movs	r0, #1
 8012092:	222b      	movs	r2, #43	@ 0x2b
 8012094:	540a      	strb	r2, [r1, r0]
 8012096:	2096      	movs	r0, #150	@ 0x96
 8012098:	f886 012a 	strb.w	r0, [r6, #298]	@ 0x12a
 801209c:	e0ad      	b.n	80121fa <llcp_process_pkt+0x240>
 801209e:	f896 3151 	ldrb.w	r3, [r6, #337]	@ 0x151
 80120a2:	2b02      	cmp	r3, #2
 80120a4:	d10a      	bne.n	80120bc <llcp_process_pkt+0x102>
 80120a6:	2001      	movs	r0, #1
 80120a8:	222b      	movs	r2, #43	@ 0x2b
 80120aa:	540a      	strb	r2, [r1, r0]
 80120ac:	2016      	movs	r0, #22
 80120ae:	f886 012a 	strb.w	r0, [r6, #298]	@ 0x12a
 80120b2:	4630      	mov	r0, r6
 80120b4:	2116      	movs	r1, #22
 80120b6:	f00f fe05 	bl	8021cc4 <conn_mngr_disconnect>
 80120ba:	e09e      	b.n	80121fa <llcp_process_pkt+0x240>
 80120bc:	f896 3124 	ldrb.w	r3, [r6, #292]	@ 0x124
 80120c0:	2b08      	cmp	r3, #8
 80120c2:	d00e      	beq.n	80120e2 <llcp_process_pkt+0x128>
 80120c4:	2b07      	cmp	r3, #7
 80120c6:	d11e      	bne.n	8012106 <llcp_process_pkt+0x14c>
 80120c8:	f896 0122 	ldrb.w	r0, [r6, #290]	@ 0x122
 80120cc:	2802      	cmp	r0, #2
 80120ce:	d04d      	beq.n	801216c <llcp_process_pkt+0x1b2>
 80120d0:	2801      	cmp	r0, #1
 80120d2:	d04f      	beq.n	8012174 <llcp_process_pkt+0x1ba>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f040 8090 	bne.w	80121fa <llcp_process_pkt+0x240>
 80120da:	2a04      	cmp	r2, #4
 80120dc:	d174      	bne.n	80121c8 <llcp_process_pkt+0x20e>
 80120de:	2000      	movs	r0, #0
 80120e0:	e077      	b.n	80121d2 <llcp_process_pkt+0x218>
 80120e2:	2300      	movs	r3, #0
 80120e4:	2a0b      	cmp	r2, #11
 80120e6:	f04f 0400 	mov.w	r4, #0
 80120ea:	d004      	beq.n	80120f6 <llcp_process_pkt+0x13c>
 80120ec:	f896 4151 	ldrb.w	r4, [r6, #337]	@ 0x151
 80120f0:	2c0b      	cmp	r4, #11
 80120f2:	d108      	bne.n	8012106 <llcp_process_pkt+0x14c>
 80120f4:	2401      	movs	r4, #1
 80120f6:	202b      	movs	r0, #43	@ 0x2b
 80120f8:	5508      	strb	r0, [r1, r4]
 80120fa:	2007      	movs	r0, #7
 80120fc:	f886 0124 	strb.w	r0, [r6, #292]	@ 0x124
 8012100:	f886 3122 	strb.w	r3, [r6, #290]	@ 0x122
 8012104:	e079      	b.n	80121fa <llcp_process_pkt+0x240>
 8012106:	280d      	cmp	r0, #13
 8012108:	d023      	beq.n	8012152 <llcp_process_pkt+0x198>
 801210a:	280c      	cmp	r0, #12
 801210c:	d025      	beq.n	801215a <llcp_process_pkt+0x1a0>
 801210e:	2807      	cmp	r0, #7
 8012110:	d155      	bne.n	80121be <llcp_process_pkt+0x204>
 8012112:	f896 0122 	ldrb.w	r0, [r6, #290]	@ 0x122
 8012116:	2803      	cmp	r0, #3
 8012118:	d16f      	bne.n	80121fa <llcp_process_pkt+0x240>
 801211a:	2000      	movs	r0, #0
 801211c:	2a0b      	cmp	r2, #11
 801211e:	f04f 0200 	mov.w	r2, #0
 8012122:	d004      	beq.n	801212e <llcp_process_pkt+0x174>
 8012124:	f896 2151 	ldrb.w	r2, [r6, #337]	@ 0x151
 8012128:	2a0b      	cmp	r2, #11
 801212a:	d166      	bne.n	80121fa <llcp_process_pkt+0x240>
 801212c:	2201      	movs	r2, #1
 801212e:	232b      	movs	r3, #43	@ 0x2b
 8012130:	548b      	strb	r3, [r1, r2]
 8012132:	f886 0122 	strb.w	r0, [r6, #290]	@ 0x122
 8012136:	f8b6 00de 	ldrh.w	r0, [r6, #222]	@ 0xde
 801213a:	f8b6 2104 	ldrh.w	r2, [r6, #260]	@ 0x104
 801213e:	f506 718b 	add.w	r1, r6, #278	@ 0x116
 8012142:	f506 7383 	add.w	r3, r6, #262	@ 0x106
 8012146:	f7fe fee3 	bl	8010f10 <llcp_encryption_req>
 801214a:	e056      	b.n	80121fa <llcp_process_pkt+0x240>
 801214c:	280d      	cmp	r0, #13
 801214e:	d154      	bne.n	80121fa <llcp_process_pkt+0x240>
 8012150:	e768      	b.n	8012024 <llcp_process_pkt+0x6a>
 8012152:	2a19      	cmp	r2, #25
 8012154:	d121      	bne.n	801219a <llcp_process_pkt+0x1e0>
 8012156:	2200      	movs	r2, #0
 8012158:	e024      	b.n	80121a4 <llcp_process_pkt+0x1ea>
 801215a:	2a18      	cmp	r2, #24
 801215c:	f43f af7d 	beq.w	801205a <llcp_process_pkt+0xa0>
 8012160:	f896 0151 	ldrb.w	r0, [r6, #337]	@ 0x151
 8012164:	2818      	cmp	r0, #24
 8012166:	f43f af93 	beq.w	8012090 <llcp_process_pkt+0xd6>
 801216a:	e028      	b.n	80121be <llcp_process_pkt+0x204>
 801216c:	2a05      	cmp	r2, #5
 801216e:	d13a      	bne.n	80121e6 <llcp_process_pkt+0x22c>
 8012170:	2000      	movs	r0, #0
 8012172:	e03d      	b.n	80121f0 <llcp_process_pkt+0x236>
 8012174:	2400      	movs	r4, #0
 8012176:	2a06      	cmp	r2, #6
 8012178:	f04f 0200 	mov.w	r2, #0
 801217c:	d004      	beq.n	8012188 <llcp_process_pkt+0x1ce>
 801217e:	f896 0151 	ldrb.w	r0, [r6, #337]	@ 0x151
 8012182:	2806      	cmp	r0, #6
 8012184:	d139      	bne.n	80121fa <llcp_process_pkt+0x240>
 8012186:	2201      	movs	r2, #1
 8012188:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 801218c:	232b      	movs	r3, #43	@ 0x2b
 801218e:	548b      	strb	r3, [r1, r2]
 8012190:	f7fc fa52 	bl	800e638 <evnt_schdlr_send_pndng_data_pkt>
 8012194:	f886 4124 	strb.w	r4, [r6, #292]	@ 0x124
 8012198:	e02f      	b.n	80121fa <llcp_process_pkt+0x240>
 801219a:	f896 0151 	ldrb.w	r0, [r6, #337]	@ 0x151
 801219e:	2819      	cmp	r0, #25
 80121a0:	d10d      	bne.n	80121be <llcp_process_pkt+0x204>
 80121a2:	2201      	movs	r2, #1
 80121a4:	4630      	mov	r0, r6
 80121a6:	f850 4fc8 	ldr.w	r4, [r0, #200]!
 80121aa:	232b      	movs	r3, #43	@ 0x2b
 80121ac:	548b      	strb	r3, [r1, r2]
 80121ae:	2196      	movs	r1, #150	@ 0x96
 80121b0:	f880 1062 	strb.w	r1, [r0, #98]	@ 0x62
 80121b4:	b30c      	cbz	r4, 80121fa <llcp_process_pkt+0x240>
 80121b6:	2100      	movs	r1, #0
 80121b8:	f886 1123 	strb.w	r1, [r6, #291]	@ 0x123
 80121bc:	e761      	b.n	8012082 <llcp_process_pkt+0xc8>
 80121be:	2000      	movs	r0, #0
 80121c0:	2101      	movs	r1, #1
 80121c2:	f009 fbac 	bl	801b91e <bsp_assert>
 80121c6:	e018      	b.n	80121fa <llcp_process_pkt+0x240>
 80121c8:	f896 0151 	ldrb.w	r0, [r6, #337]	@ 0x151
 80121cc:	2804      	cmp	r0, #4
 80121ce:	d114      	bne.n	80121fa <llcp_process_pkt+0x240>
 80121d0:	2001      	movs	r0, #1
 80121d2:	222b      	movs	r2, #43	@ 0x2b
 80121d4:	540a      	strb	r2, [r1, r0]
 80121d6:	f8b6 210e 	ldrh.w	r2, [r6, #270]	@ 0x10e
 80121da:	f506 7183 	add.w	r1, r6, #262	@ 0x106
 80121de:	4630      	mov	r0, r6
 80121e0:	f7ff f829 	bl	8011236 <llcp_req_lng_trm_key>
 80121e4:	e009      	b.n	80121fa <llcp_process_pkt+0x240>
 80121e6:	f896 0151 	ldrb.w	r0, [r6, #337]	@ 0x151
 80121ea:	2805      	cmp	r0, #5
 80121ec:	d105      	bne.n	80121fa <llcp_process_pkt+0x240>
 80121ee:	2001      	movs	r0, #1
 80121f0:	222b      	movs	r2, #43	@ 0x2b
 80121f2:	540a      	strb	r2, [r1, r0]
 80121f4:	2001      	movs	r0, #1
 80121f6:	f886 0122 	strb.w	r0, [r6, #290]	@ 0x122
 80121fa:	2000      	movs	r0, #0
 80121fc:	7038      	strb	r0, [r7, #0]
 80121fe:	b185      	cbz	r5, 8012222 <llcp_process_pkt+0x268>
 8012200:	f649 7018 	movw	r0, #40728	@ 0x9f18
 8012204:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012208:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801220c:	42b0      	cmp	r0, r6
 801220e:	d003      	beq.n	8012218 <llcp_process_pkt+0x25e>
 8012210:	4628      	mov	r0, r5
 8012212:	f008 fb6d 	bl	801a8f0 <free_buff_hdr>
 8012216:	e004      	b.n	8012222 <llcp_process_pkt+0x268>
 8012218:	4630      	mov	r0, r6
 801221a:	4629      	mov	r1, r5
 801221c:	4642      	mov	r2, r8
 801221e:	f000 f805 	bl	801222c <llcp_pkt_received>
 8012222:	2000      	movs	r0, #0
 8012224:	b001      	add	sp, #4
 8012226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801222c <llcp_pkt_received>:
 801222c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012230:	b08f      	sub	sp, #60	@ 0x3c
 8012232:	4605      	mov	r5, r0
 8012234:	2000      	movs	r0, #0
 8012236:	900d      	str	r0, [sp, #52]	@ 0x34
 8012238:	2003      	movs	r0, #3
 801223a:	4616      	mov	r6, r2
 801223c:	460c      	mov	r4, r1
 801223e:	f88d 0007 	strb.w	r0, [sp, #7]
 8012242:	a802      	add	r0, sp, #8
 8012244:	2100      	movs	r1, #0
 8012246:	222c      	movs	r2, #44	@ 0x2c
 8012248:	f00e fb4c 	bl	80208e4 <ble_memset>
 801224c:	6820      	ldr	r0, [r4, #0]
 801224e:	8961      	ldrh	r1, [r4, #10]
 8012250:	4401      	add	r1, r0
 8012252:	7908      	ldrb	r0, [r1, #4]
 8012254:	2811      	cmp	r0, #17
 8012256:	f88d 003b 	strb.w	r0, [sp, #59]	@ 0x3b
 801225a:	d103      	bne.n	8012264 <llcp_pkt_received+0x38>
 801225c:	f891 9005 	ldrb.w	r9, [r1, #5]
 8012260:	2111      	movs	r1, #17
 8012262:	e005      	b.n	8012270 <llcp_pkt_received+0x44>
 8012264:	282a      	cmp	r0, #42	@ 0x2a
 8012266:	f200 805f 	bhi.w	8012328 <llcp_pkt_received+0xfc>
 801226a:	f04f 0900 	mov.w	r9, #0
 801226e:	4601      	mov	r1, r0
 8012270:	89a2      	ldrh	r2, [r4, #12]
 8012272:	f60f 03bc 	addw	r3, pc, #2236	@ 0x8bc
 8012276:	5c59      	ldrb	r1, [r3, r1]
 8012278:	3a04      	subs	r2, #4
 801227a:	428a      	cmp	r2, r1
 801227c:	d154      	bne.n	8012328 <llcp_pkt_received+0xfc>
 801227e:	f10d 0007 	add.w	r0, sp, #7
 8012282:	f10d 013b 	add.w	r1, sp, #59	@ 0x3b
 8012286:	aa02      	add	r2, sp, #8
 8012288:	4623      	mov	r3, r4
 801228a:	f008 f8f7 	bl	801a47c <pdu_trnsprt_hndlr_parse_data_cntrl>
 801228e:	f895 1123 	ldrb.w	r1, [r5, #291]	@ 0x123
 8012292:	2907      	cmp	r1, #7
 8012294:	d004      	beq.n	80122a0 <llcp_pkt_received+0x74>
 8012296:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 801229a:	3a07      	subs	r2, #7
 801229c:	2a01      	cmp	r2, #1
 801229e:	d80e      	bhi.n	80122be <llcp_pkt_received+0x92>
 80122a0:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
 80122a4:	2a11      	cmp	r2, #17
 80122a6:	f200 80a7 	bhi.w	80123f8 <llcp_pkt_received+0x1cc>
 80122aa:	2301      	movs	r3, #1
 80122ac:	fa03 f202 	lsl.w	r2, r3, r2
 80122b0:	f642 437c 	movw	r3, #11388	@ 0x2c7c
 80122b4:	f2c0 0302 	movt	r3, #2
 80122b8:	421a      	tst	r2, r3
 80122ba:	f000 809d 	beq.w	80123f8 <llcp_pkt_received+0x1cc>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d03e      	beq.n	8012340 <llcp_pkt_received+0x114>
 80122c2:	f895 3124 	ldrb.w	r3, [r5, #292]	@ 0x124
 80122c6:	b123      	cbz	r3, 80122d2 <llcp_pkt_received+0xa6>
 80122c8:	2909      	cmp	r1, #9
 80122ca:	bf18      	it	ne
 80122cc:	2910      	cmpne	r1, #16
 80122ce:	f040 8070 	bne.w	80123b2 <llcp_pkt_received+0x186>
 80122d2:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
 80122d6:	2a1e      	cmp	r2, #30
 80122d8:	f200 8177 	bhi.w	80125ca <llcp_pkt_received+0x39e>
 80122dc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80122e0:	00ad00a8 	.word	0x00ad00a8
 80122e4:	00b20178 	.word	0x00b20178
 80122e8:	017d00b7 	.word	0x017d00b7
 80122ec:	00e100bc 	.word	0x00e100bc
 80122f0:	001f001f 	.word	0x001f001f
 80122f4:	01940190 	.word	0x01940190
 80122f8:	010f01a1 	.word	0x010f01a1
 80122fc:	0131001f 	.word	0x0131001f
 8012300:	013601a6 	.word	0x013601a6
 8012304:	00950095 	.word	0x00950095
 8012308:	009a009a 	.word	0x009a009a
 801230c:	01bb0166 	.word	0x01bb0166
 8012310:	0170016b 	.word	0x0170016b
 8012314:	01750175 	.word	0x01750175
 8012318:	01c80175 	.word	0x01c80175
 801231c:	01cd      	.short	0x01cd
 801231e:	a902      	add	r1, sp, #8
 8012320:	4628      	mov	r0, r5
 8012322:	f7ff f8cc 	bl	80114be <llcp_read_remote_features_received>
 8012326:	e0ce      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012328:	f88d 0008 	strb.w	r0, [sp, #8]
 801232c:	a802      	add	r0, sp, #8
 801232e:	4629      	mov	r1, r5
 8012330:	2207      	movs	r2, #7
 8012332:	2300      	movs	r3, #0
 8012334:	f7fe fbfa 	bl	8010b2c <llcp_cntrl_pkt_init>
 8012338:	e0c5      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801233a:	b00f      	add	sp, #60	@ 0x3c
 801233c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012340:	f89d 803b 	ldrb.w	r8, [sp, #59]	@ 0x3b
 8012344:	f1b8 0f1e 	cmp.w	r8, #30
 8012348:	d8bb      	bhi.n	80122c2 <llcp_pkt_received+0x96>
 801234a:	e8df f018 	tbh	[pc, r8, lsl #1]
 801234e:	019c      	.short	0x019c
 8012350:	001f01a7 	.word	0x001f01a7
 8012354:	01c801af 	.word	0x01c801af
 8012358:	001f006b 	.word	0x001f006b
 801235c:	01f701d1 	.word	0x01f701d1
 8012360:	020601fd 	.word	0x020601fd
 8012364:	0218020c 	.word	0x0218020c
 8012368:	021c001f 	.word	0x021c001f
 801236c:	02360222 	.word	0x02360222
 8012370:	0020001f 	.word	0x0020001f
 8012374:	002001eb 	.word	0x002001eb
 8012378:	023f01ef 	.word	0x023f01ef
 801237c:	0252024a 	.word	0x0252024a
 8012380:	001f006b 	.word	0x001f006b
 8012384:	001f001f 	.word	0x001f001f
 8012388:	01f30020 	.word	0x01f30020
 801238c:	e799      	b.n	80122c2 <llcp_pkt_received+0x96>
 801238e:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8012392:	2a00      	cmp	r2, #0
 8012394:	f43f af95 	beq.w	80122c2 <llcp_pkt_received+0x96>
 8012398:	2000      	movs	r0, #0
 801239a:	2100      	movs	r1, #0
 801239c:	f009 fabf 	bl	801b91e <bsp_assert>
 80123a0:	f88d 8008 	strb.w	r8, [sp, #8]
 80123a4:	2023      	movs	r0, #35	@ 0x23
 80123a6:	f88d 0009 	strb.w	r0, [sp, #9]
 80123aa:	a802      	add	r0, sp, #8
 80123ac:	4629      	mov	r1, r5
 80123ae:	2211      	movs	r2, #17
 80123b0:	e7bf      	b.n	8012332 <llcp_pkt_received+0x106>
 80123b2:	2b0a      	cmp	r3, #10
 80123b4:	d806      	bhi.n	80123c4 <llcp_pkt_received+0x198>
 80123b6:	2201      	movs	r2, #1
 80123b8:	409a      	lsls	r2, r3
 80123ba:	f240 4782 	movw	r7, #1154	@ 0x482
 80123be:	423a      	tst	r2, r7
 80123c0:	f47f af87 	bne.w	80122d2 <llcp_pkt_received+0xa6>
 80123c4:	2b0c      	cmp	r3, #12
 80123c6:	f43f af84 	beq.w	80122d2 <llcp_pkt_received+0xa6>
 80123ca:	f89d 203b 	ldrb.w	r2, [sp, #59]	@ 0x3b
 80123ce:	2a11      	cmp	r2, #17
 80123d0:	f43f af7f 	beq.w	80122d2 <llcp_pkt_received+0xa6>
 80123d4:	2a07      	cmp	r2, #7
 80123d6:	bf18      	it	ne
 80123d8:	2a02      	cmpne	r2, #2
 80123da:	f43f af7a 	beq.w	80122d2 <llcp_pkt_received+0xa6>
 80123de:	290f      	cmp	r1, #15
 80123e0:	f43f af77 	beq.w	80122d2 <llcp_pkt_received+0xa6>
 80123e4:	f082 030f 	eor.w	r3, r2, #15
 80123e8:	f081 0101 	eor.w	r1, r1, #1
 80123ec:	f88d 2008 	strb.w	r2, [sp, #8]
 80123f0:	4319      	orrs	r1, r3
 80123f2:	bf08      	it	eq
 80123f4:	2023      	moveq	r0, #35	@ 0x23
 80123f6:	e7d6      	b.n	80123a6 <llcp_pkt_received+0x17a>
 80123f8:	f895 011f 	ldrb.w	r0, [r5, #287]	@ 0x11f
 80123fc:	28aa      	cmp	r0, #170	@ 0xaa
 80123fe:	d10e      	bne.n	801241e <llcp_pkt_received+0x1f2>
 8012400:	4628      	mov	r0, r5
 8012402:	213d      	movs	r1, #61	@ 0x3d
 8012404:	f00f fc5e 	bl	8021cc4 <conn_mngr_disconnect>
 8012408:	e05d      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801240a:	4628      	mov	r0, r5
 801240c:	4611      	mov	r1, r2
 801240e:	f7fe ff44 	bl	801129a <llcp_ping_received>
 8012412:	e058      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012414:	a902      	add	r1, sp, #8
 8012416:	4628      	mov	r0, r5
 8012418:	f7fe fc6d 	bl	8010cf6 <llcp_data_length_update_received>
 801241c:	e053      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801241e:	f8c5 4100 	str.w	r4, [r5, #256]	@ 0x100
 8012422:	e78a      	b.n	801233a <llcp_pkt_received+0x10e>
 8012424:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 8012428:	2a01      	cmp	r2, #1
 801242a:	f47f af4a 	bne.w	80122c2 <llcp_pkt_received+0x96>
 801242e:	e259      	b.n	80128e4 <llcp_pkt_received+0x6b8>
 8012430:	a902      	add	r1, sp, #8
 8012432:	4628      	mov	r0, r5
 8012434:	f7ff fae9 	bl	8011a0a <llcp_update_conn_param_received>
 8012438:	e045      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801243a:	a902      	add	r1, sp, #8
 801243c:	4628      	mov	r0, r5
 801243e:	f7ff fd3a 	bl	8011eb6 <llcp_update_chnl_map_received>
 8012442:	e040      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012444:	a902      	add	r1, sp, #8
 8012446:	4628      	mov	r0, r5
 8012448:	f7fe fe7f 	bl	801114a <llcp_enc_req_received>
 801244c:	e03b      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801244e:	a902      	add	r1, sp, #8
 8012450:	4628      	mov	r0, r5
 8012452:	f7fe fe55 	bl	8011100 <llcp_enc_rsp_received>
 8012456:	e036      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012458:	2b07      	cmp	r3, #7
 801245a:	f040 81d8 	bne.w	801280e <llcp_pkt_received+0x5e2>
 801245e:	4628      	mov	r0, r5
 8012460:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8012464:	b109      	cbz	r1, 801246a <llcp_pkt_received+0x23e>
 8012466:	f00b fea3 	bl	801e1b0 <os_timer_stop_free>
 801246a:	2000      	movs	r0, #0
 801246c:	e9c5 063a 	strd	r0, r6, [r5, #232]	@ 0xe8
 8012470:	2000      	movs	r0, #0
 8012472:	4629      	mov	r1, r5
 8012474:	2206      	movs	r2, #6
 8012476:	2300      	movs	r3, #0
 8012478:	f7fe fb58 	bl	8010b2c <llcp_cntrl_pkt_init>
 801247c:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8012480:	f895 111e 	ldrb.w	r1, [r5, #286]	@ 0x11e
 8012484:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012488:	6800      	ldr	r0, [r0, #0]
 801248a:	2908      	cmp	r1, #8
 801248c:	f040 81f9 	bne.w	8012882 <llcp_pkt_received+0x656>
 8012490:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8012492:	2a00      	cmp	r2, #0
 8012494:	f000 8218 	beq.w	80128c8 <llcp_pkt_received+0x69c>
 8012498:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 801249c:	2000      	movs	r0, #0
 801249e:	4790      	blx	r2
 80124a0:	e212      	b.n	80128c8 <llcp_pkt_received+0x69c>
 80124a2:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80124a6:	f1a1 000e 	sub.w	r0, r1, #14
 80124aa:	2808      	cmp	r0, #8
 80124ac:	f200 8210 	bhi.w	80128d0 <llcp_pkt_received+0x6a4>
 80124b0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80124b4:	0277000d 	.word	0x0277000d
 80124b8:	00090009 	.word	0x00090009
 80124bc:	000902aa 	.word	0x000902aa
 80124c0:	000902ad 	.word	0x000902ad
 80124c4:	02bd      	.short	0x02bd
 80124c6:	4620      	mov	r0, r4
 80124c8:	f008 fa12 	bl	801a8f0 <free_buff_hdr>
 80124cc:	e735      	b.n	801233a <llcp_pkt_received+0x10e>
 80124ce:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 80124d2:	f00b fe6d 	bl	801e1b0 <os_timer_stop_free>
 80124d6:	f646 5148 	movw	r1, #27976	@ 0x6d48
 80124da:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80124de:	2000      	movs	r0, #0
 80124e0:	6809      	ldr	r1, [r1, #0]
 80124e2:	f885 012a 	strb.w	r0, [r5, #298]	@ 0x12a
 80124e6:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 80124ea:	694b      	ldr	r3, [r1, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d0ea      	beq.n	80124c6 <llcp_pkt_received+0x29a>
 80124f0:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 80124f4:	f105 0246 	add.w	r2, r5, #70	@ 0x46
 80124f8:	201a      	movs	r0, #26
 80124fa:	4798      	blx	r3
 80124fc:	e7e3      	b.n	80124c6 <llcp_pkt_received+0x29a>
 80124fe:	2909      	cmp	r1, #9
 8012500:	bf18      	it	ne
 8012502:	2907      	cmpne	r1, #7
 8012504:	d1df      	bne.n	80124c6 <llcp_pkt_received+0x29a>
 8012506:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 801250a:	f00b fe51 	bl	801e1b0 <os_timer_stop_free>
 801250e:	f895 0123 	ldrb.w	r0, [r5, #291]	@ 0x123
 8012512:	2600      	movs	r6, #0
 8012514:	2807      	cmp	r0, #7
 8012516:	f885 612a 	strb.w	r6, [r5, #298]	@ 0x12a
 801251a:	d10f      	bne.n	801253c <llcp_pkt_received+0x310>
 801251c:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8012520:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012524:	6800      	ldr	r0, [r0, #0]
 8012526:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012528:	b12b      	cbz	r3, 8012536 <llcp_pkt_received+0x30a>
 801252a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 801252e:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8012532:	2200      	movs	r2, #0
 8012534:	4798      	blx	r3
 8012536:	20bb      	movs	r0, #187	@ 0xbb
 8012538:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 801253c:	f885 6123 	strb.w	r6, [r5, #291]	@ 0x123
 8012540:	e7c1      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012542:	a902      	add	r1, sp, #8
 8012544:	4628      	mov	r0, r5
 8012546:	f7ff fb82 	bl	8011c4e <llcp_update_param_req_received>
 801254a:	e7bc      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801254c:	f1b9 0f0f 	cmp.w	r9, #15
 8012550:	f300 817d 	bgt.w	801284e <llcp_pkt_received+0x622>
 8012554:	f1b9 0f03 	cmp.w	r9, #3
 8012558:	f000 81c7 	beq.w	80128ea <llcp_pkt_received+0x6be>
 801255c:	f1b9 0f0f 	cmp.w	r9, #15
 8012560:	bf08      	it	eq
 8012562:	290a      	cmpeq	r1, #10
 8012564:	d1af      	bne.n	80124c6 <llcp_pkt_received+0x29a>
 8012566:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 801256a:	f00b fe21 	bl	801e1b0 <os_timer_stop_free>
 801256e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8012572:	f895 1127 	ldrb.w	r1, [r5, #295]	@ 0x127
 8012576:	2200      	movs	r2, #0
 8012578:	281a      	cmp	r0, #26
 801257a:	f885 212a 	strb.w	r2, [r5, #298]	@ 0x12a
 801257e:	f885 2123 	strb.w	r2, [r5, #291]	@ 0x123
 8012582:	bf08      	it	eq
 8012584:	2900      	cmpeq	r1, #0
 8012586:	f000 82af 	beq.w	8012ae8 <llcp_pkt_received+0x8bc>
 801258a:	2901      	cmp	r1, #1
 801258c:	f040 81e2 	bne.w	8012954 <llcp_pkt_received+0x728>
 8012590:	f8b5 20b2 	ldrh.w	r2, [r5, #178]	@ 0xb2
 8012594:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	@ 0xb8
 8012598:	428a      	cmp	r2, r1
 801259a:	f000 81db 	beq.w	8012954 <llcp_pkt_received+0x728>
 801259e:	f8a5 10b2 	strh.w	r1, [r5, #178]	@ 0xb2
 80125a2:	f8a5 10b0 	strh.w	r1, [r5, #176]	@ 0xb0
 80125a6:	f8a5 10ae 	strh.w	r1, [r5, #174]	@ 0xae
 80125aa:	e1d3      	b.n	8012954 <llcp_pkt_received+0x728>
 80125ac:	a902      	add	r1, sp, #8
 80125ae:	4628      	mov	r0, r5
 80125b0:	f000 fc1d 	bl	8012dee <llcp_ll_phy_req_received>
 80125b4:	e787      	b.n	80124c6 <llcp_pkt_received+0x29a>
 80125b6:	a902      	add	r1, sp, #8
 80125b8:	4628      	mov	r0, r5
 80125ba:	f000 fd1b 	bl	8012ff4 <llcp_ll_phy_update_ind_received>
 80125be:	e782      	b.n	80124c6 <llcp_pkt_received+0x29a>
 80125c0:	a902      	add	r1, sp, #8
 80125c2:	4628      	mov	r0, r5
 80125c4:	f000 fdb6 	bl	8013134 <llcp_min_used_chnls_prcdr_received>
 80125c8:	e77d      	b.n	80124c6 <llcp_pkt_received+0x29a>
 80125ca:	f88d 2008 	strb.w	r2, [sp, #8]
 80125ce:	e6ad      	b.n	801232c <llcp_pkt_received+0x100>
 80125d0:	a902      	add	r1, sp, #8
 80125d2:	4628      	mov	r0, r5
 80125d4:	f7fe ffc2 	bl	801155c <llcp_disconnect_received>
 80125d8:	e775      	b.n	80124c6 <llcp_pkt_received+0x29a>
 80125da:	2907      	cmp	r1, #7
 80125dc:	f47f af73 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 80125e0:	20bb      	movs	r0, #187	@ 0xbb
 80125e2:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 80125e6:	2001      	movs	r0, #1
 80125e8:	f885 0122 	strb.w	r0, [r5, #290]	@ 0x122
 80125ec:	2000      	movs	r0, #0
 80125ee:	4629      	mov	r1, r5
 80125f0:	2206      	movs	r2, #6
 80125f2:	2300      	movs	r3, #0
 80125f4:	2600      	movs	r6, #0
 80125f6:	f7fe fa99 	bl	8010b2c <llcp_cntrl_pkt_init>
 80125fa:	e9c5 663a 	strd	r6, r6, [r5, #232]	@ 0xe8
 80125fe:	e762      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012600:	4628      	mov	r0, r5
 8012602:	f7fe fdf8 	bl	80111f6 <llcp_pause_enc_req_received>
 8012606:	e75e      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012608:	2907      	cmp	r1, #7
 801260a:	f47f af5c 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 801260e:	20aa      	movs	r0, #170	@ 0xaa
 8012610:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 8012614:	2003      	movs	r0, #3
 8012616:	f885 0122 	strb.w	r0, [r5, #290]	@ 0x122
 801261a:	2000      	movs	r0, #0
 801261c:	4629      	mov	r1, r5
 801261e:	220b      	movs	r2, #11
 8012620:	e687      	b.n	8012332 <llcp_pkt_received+0x106>
 8012622:	a902      	add	r1, sp, #8
 8012624:	4628      	mov	r0, r5
 8012626:	f7fe febd 	bl	80113a4 <llcp_read_remote_version_received>
 801262a:	e74c      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801262c:	f895 0127 	ldrb.w	r0, [r5, #295]	@ 0x127
 8012630:	2800      	cmp	r0, #0
 8012632:	f47f af48 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 8012636:	290a      	cmp	r1, #10
 8012638:	d106      	bne.n	8012648 <llcp_pkt_received+0x41c>
 801263a:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 801263e:	f00b fdb7 	bl	801e1b0 <os_timer_stop_free>
 8012642:	2000      	movs	r0, #0
 8012644:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8012648:	f8b5 00de 	ldrh.w	r0, [r5, #222]	@ 0xde
 801264c:	f105 017c 	add.w	r1, r5, #124	@ 0x7c
 8012650:	f7ff fb87 	bl	8011d62 <llcp_pram_pstv_rply>
 8012654:	e737      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012656:	f895 0127 	ldrb.w	r0, [r5, #295]	@ 0x127
 801265a:	2800      	cmp	r0, #0
 801265c:	f47f af33 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 8012660:	9902      	ldr	r1, [sp, #8]
 8012662:	4628      	mov	r0, r5
 8012664:	f000 fc1b 	bl	8012e9e <llcp_phy_selection>
 8012668:	4628      	mov	r0, r5
 801266a:	f000 fc59 	bl	8012f20 <llcp_ll_phy_update_ind>
 801266e:	e72a      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012670:	a902      	add	r1, sp, #8
 8012672:	4628      	mov	r0, r5
 8012674:	f000 fd93 	bl	801319e <llcp_clk_acc_req_recieved>
 8012678:	e725      	b.n	80124c6 <llcp_pkt_received+0x29a>
 801267a:	aa02      	add	r2, sp, #8
 801267c:	4628      	mov	r0, r5
 801267e:	2100      	movs	r1, #0
 8012680:	f000 fb75 	bl	8012d6e <llcp_clk_acc_rsp_recieved>
 8012684:	e71f      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012686:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 801268a:	2a00      	cmp	r2, #0
 801268c:	f000 8127 	beq.w	80128de <llcp_pkt_received+0x6b2>
 8012690:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8012694:	2a0a      	cmp	r2, #10
 8012696:	f040 80b4 	bne.w	8012802 <llcp_pkt_received+0x5d6>
 801269a:	e0b5      	b.n	8012808 <llcp_pkt_received+0x5dc>
 801269c:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80126a0:	2a00      	cmp	r2, #0
 80126a2:	f000 811f 	beq.w	80128e4 <llcp_pkt_received+0x6b8>
 80126a6:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80126aa:	e0aa      	b.n	8012802 <llcp_pkt_received+0x5d6>
 80126ac:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80126b0:	2a07      	cmp	r2, #7
 80126b2:	d104      	bne.n	80126be <llcp_pkt_received+0x492>
 80126b4:	f895 311e 	ldrb.w	r3, [r5, #286]	@ 0x11e
 80126b8:	2b08      	cmp	r3, #8
 80126ba:	f040 808f 	bne.w	80127dc <llcp_pkt_received+0x5b0>
 80126be:	2a00      	cmp	r2, #0
 80126c0:	4613      	mov	r3, r2
 80126c2:	bf18      	it	ne
 80126c4:	2301      	movne	r3, #1
 80126c6:	3a07      	subs	r2, #7
 80126c8:	bf18      	it	ne
 80126ca:	2201      	movne	r2, #1
 80126cc:	4213      	tst	r3, r2
 80126ce:	f47f ae63 	bne.w	8012398 <llcp_pkt_received+0x16c>
 80126d2:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80126d6:	2a00      	cmp	r2, #0
 80126d8:	f47f adf3 	bne.w	80122c2 <llcp_pkt_received+0x96>
 80126dc:	e65c      	b.n	8012398 <llcp_pkt_received+0x16c>
 80126de:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80126e2:	2a01      	cmp	r2, #1
 80126e4:	f000 80fe 	beq.w	80128e4 <llcp_pkt_received+0x6b8>
 80126e8:	2907      	cmp	r1, #7
 80126ea:	f43f adea 	beq.w	80122c2 <llcp_pkt_received+0x96>
 80126ee:	e653      	b.n	8012398 <llcp_pkt_received+0x16c>
 80126f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80126f4:	f1a3 020e 	sub.w	r2, r3, #14
 80126f8:	2a0f      	cmp	r2, #15
 80126fa:	f200 81fc 	bhi.w	8012af6 <llcp_pkt_received+0x8ca>
 80126fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012702:	0028      	.short	0x0028
 8012704:	00100061 	.word	0x00100061
 8012708:	00110010 	.word	0x00110010
 801270c:	00150010 	.word	0x00150010
 8012710:	00740010 	.word	0x00740010
 8012714:	00100010 	.word	0x00100010
 8012718:	02040010 	.word	0x02040010
 801271c:	00100010 	.word	0x00100010
 8012720:	0019      	.short	0x0019
 8012722:	e5ce      	b.n	80122c2 <llcp_pkt_received+0x96>
 8012724:	2906      	cmp	r1, #6
 8012726:	f43f adcc 	beq.w	80122c2 <llcp_pkt_received+0x96>
 801272a:	e635      	b.n	8012398 <llcp_pkt_received+0x16c>
 801272c:	2909      	cmp	r1, #9
 801272e:	f43f adc8 	beq.w	80122c2 <llcp_pkt_received+0x96>
 8012732:	e631      	b.n	8012398 <llcp_pkt_received+0x16c>
 8012734:	2910      	cmp	r1, #16
 8012736:	f43f adc4 	beq.w	80122c2 <llcp_pkt_received+0x96>
 801273a:	e62d      	b.n	8012398 <llcp_pkt_received+0x16c>
 801273c:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 8012740:	2a00      	cmp	r2, #0
 8012742:	f47f ae24 	bne.w	801238e <llcp_pkt_received+0x162>
 8012746:	e0cd      	b.n	80128e4 <llcp_pkt_received+0x6b8>
 8012748:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 801274c:	2a00      	cmp	r2, #0
 801274e:	f47f ae23 	bne.w	8012398 <llcp_pkt_received+0x16c>
 8012752:	2904      	cmp	r1, #4
 8012754:	f43f adb5 	beq.w	80122c2 <llcp_pkt_received+0x96>
 8012758:	e61e      	b.n	8012398 <llcp_pkt_received+0x16c>
 801275a:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 801275e:	2a00      	cmp	r2, #0
 8012760:	f47f adaf 	bne.w	80122c2 <llcp_pkt_received+0x96>
 8012764:	e0be      	b.n	80128e4 <llcp_pkt_received+0x6b8>
 8012766:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 801276a:	2a01      	cmp	r2, #1
 801276c:	f000 8102 	beq.w	8012974 <llcp_pkt_received+0x748>
 8012770:	2a00      	cmp	r2, #0
 8012772:	f47f ada6 	bne.w	80122c2 <llcp_pkt_received+0x96>
 8012776:	2907      	cmp	r1, #7
 8012778:	f43f ada3 	beq.w	80122c2 <llcp_pkt_received+0x96>
 801277c:	e610      	b.n	80123a0 <llcp_pkt_received+0x174>
 801277e:	2903      	cmp	r1, #3
 8012780:	f43f ad9f 	beq.w	80122c2 <llcp_pkt_received+0x96>
 8012784:	e603      	b.n	801238e <llcp_pkt_received+0x162>
 8012786:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 801278a:	2a01      	cmp	r2, #1
 801278c:	f47f adff 	bne.w	801238e <llcp_pkt_received+0x162>
 8012790:	e0a8      	b.n	80128e4 <llcp_pkt_received+0x6b8>
 8012792:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8012796:	2a00      	cmp	r2, #0
 8012798:	f47f adfe 	bne.w	8012398 <llcp_pkt_received+0x16c>
 801279c:	2901      	cmp	r1, #1
 801279e:	f000 81b2 	beq.w	8012b06 <llcp_pkt_received+0x8da>
 80127a2:	2902      	cmp	r1, #2
 80127a4:	f000 81be 	beq.w	8012b24 <llcp_pkt_received+0x8f8>
 80127a8:	290a      	cmp	r1, #10
 80127aa:	f040 81b3 	bne.w	8012b14 <llcp_pkt_received+0x8e8>
 80127ae:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80127b2:	2a00      	cmp	r2, #0
 80127b4:	f47f ad85 	bne.w	80122c2 <llcp_pkt_received+0x96>
 80127b8:	e1a5      	b.n	8012b06 <llcp_pkt_received+0x8da>
 80127ba:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80127be:	2a01      	cmp	r2, #1
 80127c0:	f000 8090 	beq.w	80128e4 <llcp_pkt_received+0x6b8>
 80127c4:	290a      	cmp	r1, #10
 80127c6:	f43f ad7c 	beq.w	80122c2 <llcp_pkt_received+0x96>
 80127ca:	e5e5      	b.n	8012398 <llcp_pkt_received+0x16c>
 80127cc:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80127d0:	2a00      	cmp	r2, #0
 80127d2:	f000 80d5 	beq.w	8012980 <llcp_pkt_received+0x754>
 80127d6:	2a0c      	cmp	r2, #12
 80127d8:	f47f adde 	bne.w	8012398 <llcp_pkt_received+0x16c>
 80127dc:	4628      	mov	r0, r5
 80127de:	2124      	movs	r1, #36	@ 0x24
 80127e0:	e610      	b.n	8012404 <llcp_pkt_received+0x1d8>
 80127e2:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80127e6:	2a01      	cmp	r2, #1
 80127e8:	d07c      	beq.n	80128e4 <llcp_pkt_received+0x6b8>
 80127ea:	290c      	cmp	r1, #12
 80127ec:	f43f ad69 	beq.w	80122c2 <llcp_pkt_received+0x96>
 80127f0:	e5d2      	b.n	8012398 <llcp_pkt_received+0x16c>
 80127f2:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 80127f6:	2a00      	cmp	r2, #0
 80127f8:	d074      	beq.n	80128e4 <llcp_pkt_received+0x6b8>
 80127fa:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 80127fe:	2a0c      	cmp	r2, #12
 8012800:	d002      	beq.n	8012808 <llcp_pkt_received+0x5dc>
 8012802:	2a00      	cmp	r2, #0
 8012804:	f47f adc8 	bne.w	8012398 <llcp_pkt_received+0x16c>
 8012808:	f8d5 20cc 	ldr.w	r2, [r5, #204]	@ 0xcc
 801280c:	e5c1      	b.n	8012392 <llcp_pkt_received+0x166>
 801280e:	2907      	cmp	r1, #7
 8012810:	f040 815b 	bne.w	8012aca <llcp_pkt_received+0x89e>
 8012814:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8012818:	f00b fcca 	bl	801e1b0 <os_timer_stop_free>
 801281c:	2001      	movs	r0, #1
 801281e:	e9c5 063a 	strd	r0, r6, [r5, #232]	@ 0xe8
 8012822:	f895 011e 	ldrb.w	r0, [r5, #286]	@ 0x11e
 8012826:	2100      	movs	r1, #0
 8012828:	2808      	cmp	r0, #8
 801282a:	f646 5048 	movw	r0, #27976	@ 0x6d48
 801282e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012832:	6800      	ldr	r0, [r0, #0]
 8012834:	f885 112a 	strb.w	r1, [r5, #298]	@ 0x12a
 8012838:	f040 8111 	bne.w	8012a5e <llcp_pkt_received+0x832>
 801283c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 801283e:	2a00      	cmp	r2, #0
 8012840:	f000 8130 	beq.w	8012aa4 <llcp_pkt_received+0x878>
 8012844:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8012848:	2000      	movs	r0, #0
 801284a:	4790      	blx	r2
 801284c:	e12a      	b.n	8012aa4 <llcp_pkt_received+0x878>
 801284e:	f1b9 0f10 	cmp.w	r9, #16
 8012852:	d067      	beq.n	8012924 <llcp_pkt_received+0x6f8>
 8012854:	f1b9 0f16 	cmp.w	r9, #22
 8012858:	bf08      	it	eq
 801285a:	290c      	cmpeq	r1, #12
 801285c:	f47f ae33 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 8012860:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8012864:	f00b fca4 	bl	801e1b0 <os_timer_stop_free>
 8012868:	2000      	movs	r0, #0
 801286a:	f895 112e 	ldrb.w	r1, [r5, #302]	@ 0x12e
 801286e:	f895 212f 	ldrb.w	r2, [r5, #303]	@ 0x12f
 8012872:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012876:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 801287a:	4628      	mov	r0, r5
 801287c:	f00f fb98 	bl	8021fb0 <conn_mngr_send_le_phy_update_complete_event>
 8012880:	e621      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012882:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012884:	b123      	cbz	r3, 8012890 <llcp_pkt_received+0x664>
 8012886:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 801288a:	2000      	movs	r0, #0
 801288c:	2201      	movs	r2, #1
 801288e:	4798      	blx	r3
 8012890:	f8d5 10d4 	ldr.w	r1, [r5, #212]	@ 0xd4
 8012894:	2005      	movs	r0, #5
 8012896:	f885 012a 	strb.w	r0, [r5, #298]	@ 0x12a
 801289a:	fab1 f081 	clz	r0, r1
 801289e:	0940      	lsrs	r0, r0, #5
 80128a0:	2101      	movs	r1, #1
 80128a2:	f009 f83c 	bl	801b91e <bsp_assert>
 80128a6:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 80128aa:	f105 0268 	add.w	r2, r5, #104	@ 0x68
 80128ae:	f6c0 0001 	movt	r0, #2049	@ 0x801
 80128b2:	2100      	movs	r1, #0
 80128b4:	f00b fac8 	bl	801de48 <os_timer_create>
 80128b8:	2101      	movs	r1, #1
 80128ba:	f8c5 00d4 	str.w	r0, [r5, #212]	@ 0xd4
 80128be:	2800      	cmp	r0, #0
 80128c0:	bf18      	it	ne
 80128c2:	2001      	movne	r0, #1
 80128c4:	f009 f82b 	bl	801b91e <bsp_assert>
 80128c8:	2007      	movs	r0, #7
 80128ca:	f885 011e 	strb.w	r0, [r5, #286]	@ 0x11e
 80128ce:	e0fc      	b.n	8012aca <llcp_pkt_received+0x89e>
 80128d0:	291d      	cmp	r1, #29
 80128d2:	f47f adf8 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 80128d6:	4628      	mov	r0, r5
 80128d8:	211a      	movs	r1, #26
 80128da:	2200      	movs	r2, #0
 80128dc:	e6d0      	b.n	8012680 <llcp_pkt_received+0x454>
 80128de:	2000      	movs	r0, #0
 80128e0:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 80128e4:	f88d 8008 	strb.w	r8, [sp, #8]
 80128e8:	e520      	b.n	801232c <llcp_pkt_received+0x100>
 80128ea:	2907      	cmp	r1, #7
 80128ec:	f47f adeb 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 80128f0:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 80128f4:	f00b fc5c 	bl	801e1b0 <os_timer_stop_free>
 80128f8:	f646 5148 	movw	r1, #27976	@ 0x6d48
 80128fc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012900:	2000      	movs	r0, #0
 8012902:	6809      	ldr	r1, [r1, #0]
 8012904:	f885 012a 	strb.w	r0, [r5, #298]	@ 0x12a
 8012908:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 801290c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801290e:	b12b      	cbz	r3, 801291c <llcp_pkt_received+0x6f0>
 8012910:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8012914:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8012918:	2200      	movs	r2, #0
 801291a:	4798      	blx	r3
 801291c:	20bb      	movs	r0, #187	@ 0xbb
 801291e:	f885 011f 	strb.w	r0, [r5, #287]	@ 0x11f
 8012922:	e5d0      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012924:	2b0a      	cmp	r3, #10
 8012926:	f47f adce 	bne.w	80124c6 <llcp_pkt_received+0x29a>
 801292a:	290c      	cmp	r1, #12
 801292c:	f43f adcb 	beq.w	80124c6 <llcp_pkt_received+0x29a>
 8012930:	f105 00d0 	add.w	r0, r5, #208	@ 0xd0
 8012934:	f00b fc3c 	bl	801e1b0 <os_timer_stop_free>
 8012938:	f89d 0009 	ldrb.w	r0, [sp, #9]
 801293c:	2100      	movs	r1, #0
 801293e:	281a      	cmp	r0, #26
 8012940:	f885 112a 	strb.w	r1, [r5, #298]	@ 0x12a
 8012944:	f885 1124 	strb.w	r1, [r5, #292]	@ 0x124
 8012948:	d104      	bne.n	8012954 <llcp_pkt_received+0x728>
 801294a:	f895 1127 	ldrb.w	r1, [r5, #295]	@ 0x127
 801294e:	2900      	cmp	r1, #0
 8012950:	f000 80ca 	beq.w	8012ae8 <llcp_pkt_received+0x8bc>
 8012954:	f646 5148 	movw	r1, #27976	@ 0x6d48
 8012958:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801295c:	6809      	ldr	r1, [r1, #0]
 801295e:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
 8012960:	2f00      	cmp	r7, #0
 8012962:	f43f adb0 	beq.w	80124c6 <llcp_pkt_received+0x29a>
 8012966:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 801296a:	8aea      	ldrh	r2, [r5, #22]
 801296c:	f8b5 30dc 	ldrh.w	r3, [r5, #220]	@ 0xdc
 8012970:	8b6e      	ldrh	r6, [r5, #26]
 8012972:	e046      	b.n	8012a02 <llcp_pkt_received+0x7d6>
 8012974:	f895 2124 	ldrb.w	r2, [r5, #292]	@ 0x124
 8012978:	2a07      	cmp	r2, #7
 801297a:	f43f aca2 	beq.w	80122c2 <llcp_pkt_received+0x96>
 801297e:	e50f      	b.n	80123a0 <llcp_pkt_received+0x174>
 8012980:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 8012984:	2a00      	cmp	r2, #0
 8012986:	f47f ac9c 	bne.w	80122c2 <llcp_pkt_received+0x96>
 801298a:	1e4a      	subs	r2, r1, #1
 801298c:	2a02      	cmp	r2, #2
 801298e:	f0c0 80c9 	bcc.w	8012b24 <llcp_pkt_received+0x8f8>
 8012992:	290c      	cmp	r1, #12
 8012994:	f000 80b7 	beq.w	8012b06 <llcp_pkt_received+0x8da>
 8012998:	290a      	cmp	r1, #10
 801299a:	f000 80c3 	beq.w	8012b24 <llcp_pkt_received+0x8f8>
 801299e:	f7ff bc90 	b.w	80122c2 <llcp_pkt_received+0x96>
 80129a2:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 80129a6:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 80129aa:	f885 0046 	strb.w	r0, [r5, #70]	@ 0x46
 80129ae:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 80129b2:	f00b fbfd 	bl	801e1b0 <os_timer_stop_free>
 80129b6:	f895 1127 	ldrb.w	r1, [r5, #295]	@ 0x127
 80129ba:	2000      	movs	r0, #0
 80129bc:	2900      	cmp	r1, #0
 80129be:	f885 012a 	strb.w	r0, [r5, #298]	@ 0x12a
 80129c2:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 80129c6:	f000 808f 	beq.w	8012ae8 <llcp_pkt_received+0x8bc>
 80129ca:	f8b5 10b2 	ldrh.w	r1, [r5, #178]	@ 0xb2
 80129ce:	f8b5 00b8 	ldrh.w	r0, [r5, #184]	@ 0xb8
 80129d2:	4281      	cmp	r1, r0
 80129d4:	d005      	beq.n	80129e2 <llcp_pkt_received+0x7b6>
 80129d6:	f8a5 00b2 	strh.w	r0, [r5, #178]	@ 0xb2
 80129da:	f8a5 00b0 	strh.w	r0, [r5, #176]	@ 0xb0
 80129de:	f8a5 00ae 	strh.w	r0, [r5, #174]	@ 0xae
 80129e2:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80129e6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80129ea:	6800      	ldr	r0, [r0, #0]
 80129ec:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80129ee:	2f00      	cmp	r7, #0
 80129f0:	f43f ad69 	beq.w	80124c6 <llcp_pkt_received+0x29a>
 80129f4:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 80129f8:	8aea      	ldrh	r2, [r5, #22]
 80129fa:	f8b5 30dc 	ldrh.w	r3, [r5, #220]	@ 0xdc
 80129fe:	8b6e      	ldrh	r6, [r5, #26]
 8012a00:	201a      	movs	r0, #26
 8012a02:	9600      	str	r6, [sp, #0]
 8012a04:	47b8      	blx	r7
 8012a06:	e55e      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012a08:	4628      	mov	r0, r5
 8012a0a:	2107      	movs	r1, #7
 8012a0c:	e4ff      	b.n	801240e <llcp_pkt_received+0x1e2>
 8012a0e:	f895 0046 	ldrb.w	r0, [r5, #70]	@ 0x46
 8012a12:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012a16:	f885 0046 	strb.w	r0, [r5, #70]	@ 0x46
 8012a1a:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8012a1e:	f00b fbc7 	bl	801e1b0 <os_timer_stop_free>
 8012a22:	2000      	movs	r0, #0
 8012a24:	f885 012a 	strb.w	r0, [r5, #298]	@ 0x12a
 8012a28:	f885 0123 	strb.w	r0, [r5, #291]	@ 0x123
 8012a2c:	e54b      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012a2e:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8012a32:	f00b fbbd 	bl	801e1b0 <os_timer_stop_free>
 8012a36:	f895 0078 	ldrb.w	r0, [r5, #120]	@ 0x78
 8012a3a:	2600      	movs	r6, #0
 8012a3c:	2801      	cmp	r0, #1
 8012a3e:	f885 6123 	strb.w	r6, [r5, #291]	@ 0x123
 8012a42:	d109      	bne.n	8012a58 <llcp_pkt_received+0x82c>
 8012a44:	f895 112e 	ldrb.w	r1, [r5, #302]	@ 0x12e
 8012a48:	f895 212f 	ldrb.w	r2, [r5, #303]	@ 0x12f
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	2300      	movs	r3, #0
 8012a50:	f00f faae 	bl	8021fb0 <conn_mngr_send_le_phy_update_complete_event>
 8012a54:	f885 6078 	strb.w	r6, [r5, #120]	@ 0x78
 8012a58:	f885 6136 	strb.w	r6, [r5, #310]	@ 0x136
 8012a5c:	e533      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012a5e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8012a60:	b123      	cbz	r3, 8012a6c <llcp_pkt_received+0x840>
 8012a62:	f8b5 10de 	ldrh.w	r1, [r5, #222]	@ 0xde
 8012a66:	2000      	movs	r0, #0
 8012a68:	2201      	movs	r2, #1
 8012a6a:	4798      	blx	r3
 8012a6c:	f8d5 10d4 	ldr.w	r1, [r5, #212]	@ 0xd4
 8012a70:	2005      	movs	r0, #5
 8012a72:	f885 012a 	strb.w	r0, [r5, #298]	@ 0x12a
 8012a76:	fab1 f081 	clz	r0, r1
 8012a7a:	0940      	lsrs	r0, r0, #5
 8012a7c:	2101      	movs	r1, #1
 8012a7e:	f008 ff4e 	bl	801b91e <bsp_assert>
 8012a82:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8012a86:	f105 0268 	add.w	r2, r5, #104	@ 0x68
 8012a8a:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8012a8e:	2100      	movs	r1, #0
 8012a90:	f00b f9da 	bl	801de48 <os_timer_create>
 8012a94:	2101      	movs	r1, #1
 8012a96:	f8c5 00d4 	str.w	r0, [r5, #212]	@ 0xd4
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	bf18      	it	ne
 8012a9e:	2001      	movne	r0, #1
 8012aa0:	f008 ff3d 	bl	801b91e <bsp_assert>
 8012aa4:	2007      	movs	r0, #7
 8012aa6:	f885 011e 	strb.w	r0, [r5, #286]	@ 0x11e
 8012aaa:	f8d5 00c0 	ldr.w	r0, [r5, #192]	@ 0xc0
 8012aae:	2700      	movs	r7, #0
 8012ab0:	f885 7123 	strb.w	r7, [r5, #291]	@ 0x123
 8012ab4:	f7fb fdc0 	bl	800e638 <evnt_schdlr_send_pndng_data_pkt>
 8012ab8:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
 8012abc:	b129      	cbz	r1, 8012aca <llcp_pkt_received+0x89e>
 8012abe:	4628      	mov	r0, r5
 8012ac0:	4632      	mov	r2, r6
 8012ac2:	f7ff fbb3 	bl	801222c <llcp_pkt_received>
 8012ac6:	f8c5 7100 	str.w	r7, [r5, #256]	@ 0x100
 8012aca:	f8d5 00d4 	ldr.w	r0, [r5, #212]	@ 0xd4
 8012ace:	f00b faf1 	bl	801e0b4 <os_timer_stop>
 8012ad2:	a90d      	add	r1, sp, #52	@ 0x34
 8012ad4:	4628      	mov	r0, r5
 8012ad6:	f00f f8bf 	bl	8021c58 <conn_mngr_get_ping_timeout_value>
 8012ada:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012adc:	f8d5 00d4 	ldr.w	r0, [r5, #212]	@ 0xd4
 8012ae0:	0149      	lsls	r1, r1, #5
 8012ae2:	f00b fa2a 	bl	801df3a <os_timer_start>
 8012ae6:	e4ee      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012ae8:	f8b5 00de 	ldrh.w	r0, [r5, #222]	@ 0xde
 8012aec:	f105 017c 	add.w	r1, r5, #124	@ 0x7c
 8012af0:	f7fe fe4e 	bl	8011790 <llcp_update_conn_param>
 8012af4:	e4e7      	b.n	80124c6 <llcp_pkt_received+0x29a>
 8012af6:	2b23      	cmp	r3, #35	@ 0x23
 8012af8:	f47f abe3 	bne.w	80122c2 <llcp_pkt_received+0x96>
 8012afc:	2915      	cmp	r1, #21
 8012afe:	f43f abe0 	beq.w	80122c2 <llcp_pkt_received+0x96>
 8012b02:	f7ff bc49 	b.w	8012398 <llcp_pkt_received+0x16c>
 8012b06:	2023      	movs	r0, #35	@ 0x23
 8012b08:	e00d      	b.n	8012b26 <llcp_pkt_received+0x8fa>
 8012b0a:	290f      	cmp	r1, #15
 8012b0c:	f43f abd9 	beq.w	80122c2 <llcp_pkt_received+0x96>
 8012b10:	f7ff bc42 	b.w	8012398 <llcp_pkt_received+0x16c>
 8012b14:	f895 2127 	ldrb.w	r2, [r5, #295]	@ 0x127
 8012b18:	2a00      	cmp	r2, #0
 8012b1a:	f47f abd2 	bne.w	80122c2 <llcp_pkt_received+0x96>
 8012b1e:	290c      	cmp	r1, #12
 8012b20:	f47f abcf 	bne.w	80122c2 <llcp_pkt_received+0x96>
 8012b24:	202a      	movs	r0, #42	@ 0x2a
 8012b26:	f88d 8008 	strb.w	r8, [sp, #8]
 8012b2a:	f7ff bc3c 	b.w	80123a6 <llcp_pkt_received+0x17a>
 8012b2e:	bf00      	nop

08012b30 <g_ll_cntrl_pdus_len>:
 8012b30:	1702080c 	.word	0x1702080c
 8012b34:	0201010d 	.word	0x0201010d
 8012b38:	01010909 	.word	0x01010909
 8012b3c:	18090206 	.word	0x18090206
 8012b40:	01010318 	.word	0x01010318
 8012b44:	03030909 	.word	0x03030909
 8012b48:	01020305 	.word	0x01020305
 8012b4c:	24020223 	.word	0x24020223
 8012b50:	04041009 	.word	0x04041009
 8012b54:	0b0b0505 	.word	0x0b0b0505
 8012b58:	002b0b04 	.word	0x002b0b04

08012b5c <llcp_start_encryption>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	b08c      	sub	sp, #48	@ 0x30
 8012b60:	2807      	cmp	r0, #7
 8012b62:	d81f      	bhi.n	8012ba4 <llcp_start_encryption+0x48>
 8012b64:	f649 7218 	movw	r2, #40728	@ 0x9f18
 8012b68:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8012b6c:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8012b70:	b1c4      	cbz	r4, 8012ba4 <llcp_start_encryption+0x48>
 8012b72:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8012b76:	2807      	cmp	r0, #7
 8012b78:	d114      	bne.n	8012ba4 <llcp_start_encryption+0x48>
 8012b7a:	b1b1      	cbz	r1, 8012baa <llcp_start_encryption+0x4e>
 8012b7c:	f504 7583 	add.w	r5, r4, #262	@ 0x106
 8012b80:	4628      	mov	r0, r5
 8012b82:	2210      	movs	r2, #16
 8012b84:	f00d fe5e 	bl	8020844 <ble_memcpy>
 8012b88:	f104 00f0 	add.w	r0, r4, #240	@ 0xf0
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	4602      	mov	r2, r0
 8012b90:	f001 fb29 	bl	80141e6 <llhwc_128_encrypt>
 8012b94:	2100      	movs	r1, #0
 8012b96:	fab0 f080 	clz	r0, r0
 8012b9a:	e9c4 113a 	strd	r1, r1, [r4, #232]	@ 0xe8
 8012b9e:	0946      	lsrs	r6, r0, #5
 8012ba0:	2505      	movs	r5, #5
 8012ba2:	e017      	b.n	8012bd4 <llcp_start_encryption+0x78>
 8012ba4:	2002      	movs	r0, #2
 8012ba6:	b00c      	add	sp, #48	@ 0x30
 8012ba8:	bd70      	pop	{r4, r5, r6, pc}
 8012baa:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8012bae:	2600      	movs	r6, #0
 8012bb0:	0740      	lsls	r0, r0, #29
 8012bb2:	f04f 0006 	mov.w	r0, #6
 8012bb6:	bf51      	iteee	pl
 8012bb8:	250d      	movpl	r5, #13
 8012bba:	f88d 0005 	strbmi.w	r0, [sp, #5]
 8012bbe:	2511      	movmi	r5, #17
 8012bc0:	2003      	movmi	r0, #3
 8012bc2:	f88d 0004 	strb.w	r0, [sp, #4]
 8012bc6:	2007      	movs	r0, #7
 8012bc8:	f884 6122 	strb.w	r6, [r4, #290]	@ 0x122
 8012bcc:	f884 011e 	strb.w	r0, [r4, #286]	@ 0x11e
 8012bd0:	f884 6124 	strb.w	r6, [r4, #292]	@ 0x124
 8012bd4:	f008 ff03 	bl	801b9de <os_disable_isr>
 8012bd8:	a801      	add	r0, sp, #4
 8012bda:	4621      	mov	r1, r4
 8012bdc:	462a      	mov	r2, r5
 8012bde:	2300      	movs	r3, #0
 8012be0:	f7fd ffa4 	bl	8010b2c <llcp_cntrl_pkt_init>
 8012be4:	b116      	cbz	r6, 8012bec <llcp_start_encryption+0x90>
 8012be6:	2002      	movs	r0, #2
 8012be8:	f884 0122 	strb.w	r0, [r4, #290]	@ 0x122
 8012bec:	20bb      	movs	r0, #187	@ 0xbb
 8012bee:	2d0d      	cmp	r5, #13
 8012bf0:	f884 011f 	strb.w	r0, [r4, #287]	@ 0x11f
 8012bf4:	d103      	bne.n	8012bfe <llcp_start_encryption+0xa2>
 8012bf6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8012bfa:	f7fb fd1d 	bl	800e638 <evnt_schdlr_send_pndng_data_pkt>
 8012bfe:	f008 fef0 	bl	801b9e2 <os_enable_isr>
 8012c02:	2000      	movs	r0, #0
 8012c04:	e7cf      	b.n	8012ba6 <llcp_start_encryption+0x4a>

08012c06 <llcp_clock_accuracy_req>:
 8012c06:	b5b0      	push	{r4, r5, r7, lr}
 8012c08:	b08c      	sub	sp, #48	@ 0x30
 8012c0a:	2808      	cmp	r0, #8
 8012c0c:	d20f      	bcs.n	8012c2e <llcp_clock_accuracy_req+0x28>
 8012c0e:	460d      	mov	r5, r1
 8012c10:	f649 7118 	movw	r1, #40728	@ 0x9f18
 8012c14:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012c18:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8012c1c:	2000      	movs	r0, #0
 8012c1e:	9000      	str	r0, [sp, #0]
 8012c20:	b12c      	cbz	r4, 8012c2e <llcp_clock_accuracy_req+0x28>
 8012c22:	f894 0049 	ldrb.w	r0, [r4, #73]	@ 0x49
 8012c26:	0740      	lsls	r0, r0, #29
 8012c28:	d404      	bmi.n	8012c34 <llcp_clock_accuracy_req+0x2e>
 8012c2a:	201a      	movs	r0, #26
 8012c2c:	e000      	b.n	8012c30 <llcp_clock_accuracy_req+0x2a>
 8012c2e:	2002      	movs	r0, #2
 8012c30:	b00c      	add	sp, #48	@ 0x30
 8012c32:	bdb0      	pop	{r4, r5, r7, pc}
 8012c34:	4668      	mov	r0, sp
 8012c36:	f00b fc48 	bl	801e4ca <llhwc_slptmr_get>
 8012c3a:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
 8012c3e:	b189      	cbz	r1, 8012c64 <llcp_clock_accuracy_req+0x5e>
 8012c40:	9800      	ldr	r0, [sp, #0]
 8012c42:	f00a fd14 	bl	801d66e <ble_time_overflow_diff>
 8012c46:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8012c4a:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8012c4e:	f244 213f 	movw	r1, #16959	@ 0x423f
 8012c52:	f2c0 010f 	movt	r1, #15
 8012c56:	4288      	cmp	r0, r1
 8012c58:	d804      	bhi.n	8012c64 <llcp_clock_accuracy_req+0x5e>
 8012c5a:	2043      	movs	r0, #67	@ 0x43
 8012c5c:	f008 feaa 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8012c60:	200c      	movs	r0, #12
 8012c62:	e7e5      	b.n	8012c30 <llcp_clock_accuracy_req+0x2a>
 8012c64:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8012c68:	b108      	cbz	r0, 8012c6e <llcp_clock_accuracy_req+0x68>
 8012c6a:	203a      	movs	r0, #58	@ 0x3a
 8012c6c:	e7e0      	b.n	8012c30 <llcp_clock_accuracy_req+0x2a>
 8012c6e:	f649 7138 	movw	r1, #40760	@ 0x9f38
 8012c72:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8012c76:	780a      	ldrb	r2, [r1, #0]
 8012c78:	2010      	movs	r0, #16
 8012c7a:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8012c7e:	f504 709e 	add.w	r0, r4, #316	@ 0x13c
 8012c82:	3201      	adds	r2, #1
 8012c84:	f88d 5004 	strb.w	r5, [sp, #4]
 8012c88:	700a      	strb	r2, [r1, #0]
 8012c8a:	f00b fc1e 	bl	801e4ca <llhwc_slptmr_get>
 8012c8e:	2000      	movs	r0, #0
 8012c90:	f8a4 0140 	strh.w	r0, [r4, #320]	@ 0x140
 8012c94:	a801      	add	r0, sp, #4
 8012c96:	4621      	mov	r1, r4
 8012c98:	221d      	movs	r2, #29
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	f7fd ff46 	bl	8010b2c <llcp_cntrl_pkt_init>
 8012ca0:	e7c6      	b.n	8012c30 <llcp_clock_accuracy_req+0x2a>
	...

08012ca4 <llcp_re_exec_host_control>:
 8012ca4:	b5b0      	push	{r4, r5, r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	4604      	mov	r4, r0
 8012caa:	8840      	ldrh	r0, [r0, #2]
 8012cac:	2807      	cmp	r0, #7
 8012cae:	bf8f      	iteee	hi
 8012cb0:	2500      	movhi	r5, #0
 8012cb2:	f649 7118 	movwls	r1, #40728	@ 0x9f18
 8012cb6:	f2c2 0100 	movtls	r1, #8192	@ 0x2000
 8012cba:	f851 5020 	ldrls.w	r5, [r1, r0, lsl #2]
 8012cbe:	4628      	mov	r0, r5
 8012cc0:	2101      	movs	r1, #1
 8012cc2:	2d00      	cmp	r5, #0
 8012cc4:	bf18      	it	ne
 8012cc6:	2001      	movne	r0, #1
 8012cc8:	f008 fe29 	bl	801b91e <bsp_assert>
 8012ccc:	7820      	ldrb	r0, [r4, #0]
 8012cce:	2808      	cmp	r0, #8
 8012cd0:	d813      	bhi.n	8012cfa <llcp_re_exec_host_control+0x56>
 8012cd2:	e8df f000 	tbb	[pc, r0]
 8012cd6:	0b05      	.short	0x0b05
 8012cd8:	28211812 	.word	0x28211812
 8012cdc:	00453e32 	.word	0x00453e32
 8012ce0:	8860      	ldrh	r0, [r4, #2]
 8012ce2:	b002      	add	sp, #8
 8012ce4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012ce8:	f7fe bb04 	b.w	80112f4 <llcp_read_remote_version>
 8012cec:	8860      	ldrh	r0, [r4, #2]
 8012cee:	2100      	movs	r1, #0
 8012cf0:	b002      	add	sp, #8
 8012cf2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012cf6:	f7fe bb8e 	b.w	8011416 <llcp_read_remote_features>
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	2101      	movs	r1, #1
 8012cfe:	f008 fe0e 	bl	801b91e <bsp_assert>
 8012d02:	2000      	movs	r0, #0
 8012d04:	e017      	b.n	8012d36 <llcp_re_exec_host_control+0x92>
 8012d06:	8860      	ldrh	r0, [r4, #2]
 8012d08:	88a1      	ldrh	r1, [r4, #4]
 8012d0a:	88e2      	ldrh	r2, [r4, #6]
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	b002      	add	sp, #8
 8012d10:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012d14:	f7fd bf8e 	b.w	8010c34 <llcp_data_length_update>
 8012d18:	8860      	ldrh	r0, [r4, #2]
 8012d1a:	7921      	ldrb	r1, [r4, #4]
 8012d1c:	b002      	add	sp, #8
 8012d1e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012d22:	f7ff bf70 	b.w	8012c06 <llcp_clock_accuracy_req>
 8012d26:	8860      	ldrh	r0, [r4, #2]
 8012d28:	7921      	ldrb	r1, [r4, #4]
 8012d2a:	7962      	ldrb	r2, [r4, #5]
 8012d2c:	79a3      	ldrb	r3, [r4, #6]
 8012d2e:	79e5      	ldrb	r5, [r4, #7]
 8012d30:	9500      	str	r5, [sp, #0]
 8012d32:	f7fd fe7d 	bl	8010a30 <llcp_le_set_phy_cmd>
 8012d36:	b002      	add	sp, #8
 8012d38:	bdb0      	pop	{r4, r5, r7, pc}
 8012d3a:	8860      	ldrh	r0, [r4, #2]
 8012d3c:	f8b5 2104 	ldrh.w	r2, [r5, #260]	@ 0x104
 8012d40:	f505 718b 	add.w	r1, r5, #278	@ 0x116
 8012d44:	f505 7383 	add.w	r3, r5, #262	@ 0x106
 8012d48:	b002      	add	sp, #8
 8012d4a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012d4e:	f7fe b8df 	b.w	8010f10 <llcp_encryption_req>
 8012d52:	8860      	ldrh	r0, [r4, #2]
 8012d54:	1d21      	adds	r1, r4, #4
 8012d56:	b002      	add	sp, #8
 8012d58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012d5c:	f7ff b801 	b.w	8011d62 <llcp_pram_pstv_rply>
 8012d60:	8860      	ldrh	r0, [r4, #2]
 8012d62:	1d21      	adds	r1, r4, #4
 8012d64:	b002      	add	sp, #8
 8012d66:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8012d6a:	f7fe bed4 	b.w	8011b16 <llcp_update_param_req>

08012d6e <llcp_clk_acc_rsp_recieved>:
 8012d6e:	b570      	push	{r4, r5, r6, lr}
 8012d70:	4604      	mov	r4, r0
 8012d72:	30c8      	adds	r0, #200	@ 0xc8
 8012d74:	4616      	mov	r6, r2
 8012d76:	460d      	mov	r5, r1
 8012d78:	f00b fa1a 	bl	801e1b0 <os_timer_stop_free>
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	2d1a      	cmp	r5, #26
 8012d80:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8012d84:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 8012d88:	d01d      	beq.n	8012dc6 <llcp_clk_acc_rsp_recieved+0x58>
 8012d8a:	b9bd      	cbnz	r5, 8012dbc <llcp_clk_acc_rsp_recieved+0x4e>
 8012d8c:	f894 1127 	ldrb.w	r1, [r4, #295]	@ 0x127
 8012d90:	f44f 7094 	mov.w	r0, #296	@ 0x128
 8012d94:	2901      	cmp	r1, #1
 8012d96:	bf08      	it	eq
 8012d98:	2021      	moveq	r0, #33	@ 0x21
 8012d9a:	5c22      	ldrb	r2, [r4, r0]
 8012d9c:	7831      	ldrb	r1, [r6, #0]
 8012d9e:	428a      	cmp	r2, r1
 8012da0:	bf18      	it	ne
 8012da2:	5421      	strbne	r1, [r4, r0]
 8012da4:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8012da8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012dac:	6800      	ldr	r0, [r0, #0]
 8012dae:	6843      	ldr	r3, [r0, #4]
 8012db0:	b123      	cbz	r3, 8012dbc <llcp_clk_acc_rsp_recieved+0x4e>
 8012db2:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8012db6:	7832      	ldrb	r2, [r6, #0]
 8012db8:	2000      	movs	r0, #0
 8012dba:	4798      	blx	r3
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	f00f f85d 	bl	8021e7c <conn_mngr_update_local_clk_acc>
 8012dc2:	2000      	movs	r0, #0
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
 8012dc6:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8012dca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8012dce:	6800      	ldr	r0, [r0, #0]
 8012dd0:	6843      	ldr	r3, [r0, #4]
 8012dd2:	b123      	cbz	r3, 8012dde <llcp_clk_acc_rsp_recieved+0x70>
 8012dd4:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8012dd8:	2011      	movs	r0, #17
 8012dda:	2200      	movs	r2, #0
 8012ddc:	4798      	blx	r3
 8012dde:	f894 0049 	ldrb.w	r0, [r4, #73]	@ 0x49
 8012de2:	f000 00fb 	and.w	r0, r0, #251	@ 0xfb
 8012de6:	f884 0049 	strb.w	r0, [r4, #73]	@ 0x49
 8012dea:	201a      	movs	r0, #26
 8012dec:	bd70      	pop	{r4, r5, r6, pc}

08012dee <llcp_ll_phy_req_received>:
 8012dee:	b5b0      	push	{r4, r5, r7, lr}
 8012df0:	b08c      	sub	sp, #48	@ 0x30
 8012df2:	4604      	mov	r4, r0
 8012df4:	f890 0132 	ldrb.w	r0, [r0, #306]	@ 0x132
 8012df8:	460d      	mov	r5, r1
 8012dfa:	210c      	movs	r1, #12
 8012dfc:	f884 1124 	strb.w	r1, [r4, #292]	@ 0x124
 8012e00:	b110      	cbz	r0, 8012e08 <llcp_ll_phy_req_received+0x1a>
 8012e02:	f894 1133 	ldrb.w	r1, [r4, #307]	@ 0x133
 8012e06:	b951      	cbnz	r1, 8012e1e <llcp_ll_phy_req_received+0x30>
 8012e08:	f10d 0003 	add.w	r0, sp, #3
 8012e0c:	f10d 0102 	add.w	r1, sp, #2
 8012e10:	f10d 0201 	add.w	r2, sp, #1
 8012e14:	f00f fdc0 	bl	8022998 <db_le_get_default_phy_cmd>
 8012e18:	f894 0132 	ldrb.w	r0, [r4, #306]	@ 0x132
 8012e1c:	b108      	cbz	r0, 8012e22 <llcp_ll_phy_req_received+0x34>
 8012e1e:	f88d 0002 	strb.w	r0, [sp, #2]
 8012e22:	f894 0133 	ldrb.w	r0, [r4, #307]	@ 0x133
 8012e26:	b108      	cbz	r0, 8012e2c <llcp_ll_phy_req_received+0x3e>
 8012e28:	f88d 0001 	strb.w	r0, [sp, #1]
 8012e2c:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8012e30:	b980      	cbnz	r0, 8012e54 <llcp_ll_phy_req_received+0x66>
 8012e32:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8012e36:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012e3a:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 8012e3e:	f884 1075 	strb.w	r1, [r4, #117]	@ 0x75
 8012e42:	6829      	ldr	r1, [r5, #0]
 8012e44:	4620      	mov	r0, r4
 8012e46:	f000 f82a 	bl	8012e9e <llcp_phy_selection>
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f000 f868 	bl	8012f20 <llcp_ll_phy_update_ind>
 8012e50:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8012e54:	2801      	cmp	r0, #1
 8012e56:	d11e      	bne.n	8012e96 <llcp_ll_phy_req_received+0xa8>
 8012e58:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8012e5c:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012e60:	f884 0075 	strb.w	r0, [r4, #117]	@ 0x75
 8012e64:	f88d 0004 	strb.w	r0, [sp, #4]
 8012e68:	7868      	ldrb	r0, [r5, #1]
 8012e6a:	f88d 1005 	strb.w	r1, [sp, #5]
 8012e6e:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 8012e72:	a801      	add	r0, sp, #4
 8012e74:	4621      	mov	r1, r4
 8012e76:	2217      	movs	r2, #23
 8012e78:	2300      	movs	r3, #0
 8012e7a:	f7fd fe57 	bl	8010b2c <llcp_cntrl_pkt_init>
 8012e7e:	4605      	mov	r5, r0
 8012e80:	2007      	movs	r0, #7
 8012e82:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8012e86:	4620      	mov	r0, r4
 8012e88:	210c      	movs	r1, #12
 8012e8a:	f7fe f8d7 	bl	801103c <llcp_cntrl_init>
 8012e8e:	2003      	movs	r0, #3
 8012e90:	f884 0136 	strb.w	r0, [r4, #310]	@ 0x136
 8012e94:	e000      	b.n	8012e98 <llcp_ll_phy_req_received+0xaa>
 8012e96:	2500      	movs	r5, #0
 8012e98:	4628      	mov	r0, r5
 8012e9a:	b00c      	add	sp, #48	@ 0x30
 8012e9c:	bdb0      	pop	{r4, r5, r7, pc}

08012e9e <llcp_phy_selection>:
 8012e9e:	b580      	push	{r7, lr}
 8012ea0:	ea81 2311 	eor.w	r3, r1, r1, lsr #8
 8012ea4:	f890 c074 	ldrb.w	ip, [r0, #116]	@ 0x74
 8012ea8:	f890 e075 	ldrb.w	lr, [r0, #117]	@ 0x75
 8012eac:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8012eb0:	061b      	lsls	r3, r3, #24
 8012eb2:	d108      	bne.n	8012ec6 <llcp_phy_selection+0x28>
 8012eb4:	2a04      	cmp	r2, #4
 8012eb6:	d806      	bhi.n	8012ec6 <llcp_phy_selection+0x28>
 8012eb8:	2301      	movs	r3, #1
 8012eba:	4093      	lsls	r3, r2
 8012ebc:	f013 0f16 	tst.w	r3, #22
 8012ec0:	bf18      	it	ne
 8012ec2:	45f4      	cmpne	ip, lr
 8012ec4:	d126      	bne.n	8012f14 <llcp_phy_selection+0x76>
 8012ec6:	ea12 020c 	ands.w	r2, r2, ip
 8012eca:	ea01 010e 	and.w	r1, r1, lr
 8012ece:	d00d      	beq.n	8012eec <llcp_phy_selection+0x4e>
 8012ed0:	07d3      	lsls	r3, r2, #31
 8012ed2:	f04f 0301 	mov.w	r3, #1
 8012ed6:	bf08      	it	eq
 8012ed8:	2304      	moveq	r3, #4
 8012eda:	0792      	lsls	r2, r2, #30
 8012edc:	f890 212e 	ldrb.w	r2, [r0, #302]	@ 0x12e
 8012ee0:	bf48      	it	mi
 8012ee2:	2302      	movmi	r3, #2
 8012ee4:	1a9a      	subs	r2, r3, r2
 8012ee6:	bf18      	it	ne
 8012ee8:	461a      	movne	r2, r3
 8012eea:	e000      	b.n	8012eee <llcp_phy_selection+0x50>
 8012eec:	2200      	movs	r2, #0
 8012eee:	f880 2074 	strb.w	r2, [r0, #116]	@ 0x74
 8012ef2:	b169      	cbz	r1, 8012f10 <llcp_phy_selection+0x72>
 8012ef4:	07ca      	lsls	r2, r1, #31
 8012ef6:	f04f 0201 	mov.w	r2, #1
 8012efa:	bf08      	it	eq
 8012efc:	2204      	moveq	r2, #4
 8012efe:	0789      	lsls	r1, r1, #30
 8012f00:	f890 112f 	ldrb.w	r1, [r0, #303]	@ 0x12f
 8012f04:	bf48      	it	mi
 8012f06:	2202      	movmi	r2, #2
 8012f08:	1a51      	subs	r1, r2, r1
 8012f0a:	bf18      	it	ne
 8012f0c:	4611      	movne	r1, r2
 8012f0e:	e004      	b.n	8012f1a <llcp_phy_selection+0x7c>
 8012f10:	2100      	movs	r1, #0
 8012f12:	e002      	b.n	8012f1a <llcp_phy_selection+0x7c>
 8012f14:	2100      	movs	r1, #0
 8012f16:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
 8012f1a:	f880 1075 	strb.w	r1, [r0, #117]	@ 0x75
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <llcp_ll_phy_update_ind>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	b08c      	sub	sp, #48	@ 0x30
 8012f24:	4604      	mov	r4, r0
 8012f26:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 8012f2a:	b109      	cbz	r1, 8012f30 <llcp_ll_phy_update_ind+0x10>
 8012f2c:	f00b f940 	bl	801e1b0 <os_timer_stop_free>
 8012f30:	4621      	mov	r1, r4
 8012f32:	f811 0f74 	ldrb.w	r0, [r1, #116]!
 8012f36:	b910      	cbnz	r0, 8012f3e <llcp_ll_phy_update_ind+0x1e>
 8012f38:	f894 0075 	ldrb.w	r0, [r4, #117]	@ 0x75
 8012f3c:	b348      	cbz	r0, 8012f92 <llcp_ll_phy_update_ind+0x72>
 8012f3e:	2002      	movs	r0, #2
 8012f40:	f8a4 0076 	strh.w	r0, [r4, #118]	@ 0x76
 8012f44:	2008      	movs	r0, #8
 8012f46:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8012f4a:	2001      	movs	r0, #1
 8012f4c:	f884 0136 	strb.w	r0, [r4, #310]	@ 0x136
 8012f50:	2028      	movs	r0, #40	@ 0x28
 8012f52:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 8012f56:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8012f5a:	2101      	movs	r1, #1
 8012f5c:	fab0 f080 	clz	r0, r0
 8012f60:	0940      	lsrs	r0, r0, #5
 8012f62:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 8012f66:	65a4      	str	r4, [r4, #88]	@ 0x58
 8012f68:	f008 fcd9 	bl	801b91e <bsp_assert>
 8012f6c:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 8012f70:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8012f74:	2100      	movs	r1, #0
 8012f76:	462a      	mov	r2, r5
 8012f78:	f00a ff66 	bl	801de48 <os_timer_create>
 8012f7c:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8012f80:	2800      	cmp	r0, #0
 8012f82:	bf18      	it	ne
 8012f84:	2001      	movne	r0, #1
 8012f86:	2101      	movs	r1, #1
 8012f88:	b00c      	add	sp, #48	@ 0x30
 8012f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f8e:	f008 bcc6 	b.w	801b91e <bsp_assert>
 8012f92:	ad01      	add	r5, sp, #4
 8012f94:	2600      	movs	r6, #0
 8012f96:	4628      	mov	r0, r5
 8012f98:	2206      	movs	r2, #6
 8012f9a:	f8a4 6076 	strh.w	r6, [r4, #118]	@ 0x76
 8012f9e:	f884 6136 	strb.w	r6, [r4, #310]	@ 0x136
 8012fa2:	f00d fc4f 	bl	8020844 <ble_memcpy>
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	4621      	mov	r1, r4
 8012faa:	2218      	movs	r2, #24
 8012fac:	2300      	movs	r3, #0
 8012fae:	f7fd fdbd 	bl	8010b2c <llcp_cntrl_pkt_init>
 8012fb2:	f894 0078 	ldrb.w	r0, [r4, #120]	@ 0x78
 8012fb6:	2801      	cmp	r0, #1
 8012fb8:	d109      	bne.n	8012fce <llcp_ll_phy_update_ind+0xae>
 8012fba:	f894 112e 	ldrb.w	r1, [r4, #302]	@ 0x12e
 8012fbe:	f894 212f 	ldrb.w	r2, [r4, #303]	@ 0x12f
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f00e fff3 	bl	8021fb0 <conn_mngr_send_le_phy_update_complete_event>
 8012fca:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8012fce:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8012fd2:	280c      	cmp	r0, #12
 8012fd4:	bf04      	itt	eq
 8012fd6:	2000      	moveq	r0, #0
 8012fd8:	f884 0123 	strbeq.w	r0, [r4, #291]	@ 0x123
 8012fdc:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8012fe0:	280c      	cmp	r0, #12
 8012fe2:	bf04      	itt	eq
 8012fe4:	2000      	moveq	r0, #0
 8012fe6:	f884 0124 	strbeq.w	r0, [r4, #292]	@ 0x124
 8012fea:	2000      	movs	r0, #0
 8012fec:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 8012ff0:	b00c      	add	sp, #48	@ 0x30
 8012ff2:	bd70      	pop	{r4, r5, r6, pc}

08012ff4 <llcp_ll_phy_update_ind_received>:
 8012ff4:	b570      	push	{r4, r5, r6, lr}
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	f890 0127 	ldrb.w	r0, [r0, #295]	@ 0x127
 8012ffc:	2801      	cmp	r0, #1
 8012ffe:	d115      	bne.n	801302c <llcp_ll_phy_update_ind_received+0x38>
 8013000:	4620      	mov	r0, r4
 8013002:	460d      	mov	r5, r1
 8013004:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 8013008:	b109      	cbz	r1, 801300e <llcp_ll_phy_update_ind_received+0x1a>
 801300a:	f00b f8d1 	bl	801e1b0 <os_timer_stop_free>
 801300e:	4620      	mov	r0, r4
 8013010:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 8013014:	b109      	cbz	r1, 801301a <llcp_ll_phy_update_ind_received+0x26>
 8013016:	f00b f8cb 	bl	801e1b0 <os_timer_stop_free>
 801301a:	7828      	ldrb	r0, [r5, #0]
 801301c:	2803      	cmp	r0, #3
 801301e:	d108      	bne.n	8013032 <llcp_ll_phy_update_ind_received+0x3e>
 8013020:	4620      	mov	r0, r4
 8013022:	211e      	movs	r1, #30
 8013024:	251e      	movs	r5, #30
 8013026:	f00e fe4d 	bl	8021cc4 <conn_mngr_disconnect>
 801302a:	e000      	b.n	801302e <llcp_ll_phy_update_ind_received+0x3a>
 801302c:	2500      	movs	r5, #0
 801302e:	4628      	mov	r0, r5
 8013030:	bd70      	pop	{r4, r5, r6, pc}
 8013032:	7869      	ldrb	r1, [r5, #1]
 8013034:	2904      	cmp	r1, #4
 8013036:	d8f3      	bhi.n	8013020 <llcp_ll_phy_update_ind_received+0x2c>
 8013038:	2903      	cmp	r1, #3
 801303a:	d0f1      	beq.n	8013020 <llcp_ll_phy_update_ind_received+0x2c>
 801303c:	2805      	cmp	r0, #5
 801303e:	d2ef      	bcs.n	8013020 <llcp_ll_phy_update_ind_received+0x2c>
 8013040:	4308      	orrs	r0, r1
 8013042:	d120      	bne.n	8013086 <llcp_ll_phy_update_ind_received+0x92>
 8013044:	f894 0078 	ldrb.w	r0, [r4, #120]	@ 0x78
 8013048:	2801      	cmp	r0, #1
 801304a:	d10a      	bne.n	8013062 <llcp_ll_phy_update_ind_received+0x6e>
 801304c:	f894 112e 	ldrb.w	r1, [r4, #302]	@ 0x12e
 8013050:	f894 212f 	ldrb.w	r2, [r4, #303]	@ 0x12f
 8013054:	4620      	mov	r0, r4
 8013056:	2300      	movs	r3, #0
 8013058:	2500      	movs	r5, #0
 801305a:	f00e ffa9 	bl	8021fb0 <conn_mngr_send_le_phy_update_complete_event>
 801305e:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 8013062:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8013066:	2500      	movs	r5, #0
 8013068:	280c      	cmp	r0, #12
 801306a:	bf04      	itt	eq
 801306c:	2000      	moveq	r0, #0
 801306e:	f884 0123 	strbeq.w	r0, [r4, #291]	@ 0x123
 8013072:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 8013076:	280c      	cmp	r0, #12
 8013078:	bf04      	itt	eq
 801307a:	2000      	moveq	r0, #0
 801307c:	f884 0124 	strbeq.w	r0, [r4, #292]	@ 0x124
 8013080:	f884 5136 	strb.w	r5, [r4, #310]	@ 0x136
 8013084:	e7d3      	b.n	801302e <llcp_ll_phy_update_ind_received+0x3a>
 8013086:	f8b4 10da 	ldrh.w	r1, [r4, #218]	@ 0xda
 801308a:	f248 0201 	movw	r2, #32769	@ 0x8001
 801308e:	8868      	ldrh	r0, [r5, #2]
 8013090:	f6cf 72ff 	movt	r2, #65535	@ 0xffff
 8013094:	1a52      	subs	r2, r2, r1
 8013096:	4281      	cmp	r1, r0
 8013098:	bf88      	it	hi
 801309a:	f500 3080 	addhi.w	r0, r0, #65536	@ 0x10000
 801309e:	4402      	add	r2, r0
 80130a0:	b292      	uxth	r2, r2
 80130a2:	f248 0303 	movw	r3, #32771	@ 0x8003
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d340      	bcc.n	801312c <llcp_ll_phy_update_ind_received+0x138>
 80130aa:	8ae2      	ldrh	r2, [r4, #22]
 80130ac:	2308      	movs	r3, #8
 80130ae:	1a41      	subs	r1, r0, r1
 80130b0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80130b4:	230c      	movs	r3, #12
 80130b6:	fb01 f102 	mul.w	r1, r1, r2
 80130ba:	65a4      	str	r4, [r4, #88]	@ 0x58
 80130bc:	f884 3124 	strb.w	r3, [r4, #292]	@ 0x124
 80130c0:	f8a4 0076 	strh.w	r0, [r4, #118]	@ 0x76
 80130c4:	7868      	ldrb	r0, [r5, #1]
 80130c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80130ca:	0852      	lsrs	r2, r2, #1
 80130cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80130d0:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 80130d4:	0889      	lsrs	r1, r1, #2
 80130d6:	7828      	ldrb	r0, [r5, #0]
 80130d8:	eba1 0692 	sub.w	r6, r1, r2, lsr #2
 80130dc:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 80130e0:	f884 0075 	strb.w	r0, [r4, #117]	@ 0x75
 80130e4:	2001      	movs	r0, #1
 80130e6:	f884 0136 	strb.w	r0, [r4, #310]	@ 0x136
 80130ea:	fab1 f081 	clz	r0, r1
 80130ee:	0940      	lsrs	r0, r0, #5
 80130f0:	2101      	movs	r1, #1
 80130f2:	f104 0558 	add.w	r5, r4, #88	@ 0x58
 80130f6:	f008 fc12 	bl	801b91e <bsp_assert>
 80130fa:	f641 10ef 	movw	r0, #6639	@ 0x19ef
 80130fe:	f6c0 0001 	movt	r0, #2049	@ 0x801
 8013102:	2100      	movs	r1, #0
 8013104:	462a      	mov	r2, r5
 8013106:	2500      	movs	r5, #0
 8013108:	f00a fe9e 	bl	801de48 <os_timer_create>
 801310c:	2101      	movs	r1, #1
 801310e:	f8c4 00cc 	str.w	r0, [r4, #204]	@ 0xcc
 8013112:	2800      	cmp	r0, #0
 8013114:	bf18      	it	ne
 8013116:	2001      	movne	r0, #1
 8013118:	f008 fc01 	bl	801b91e <bsp_assert>
 801311c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	@ 0xcc
 8013120:	0171      	lsls	r1, r6, #5
 8013122:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8013126:	f00a ff08 	bl	801df3a <os_timer_start>
 801312a:	e780      	b.n	801302e <llcp_ll_phy_update_ind_received+0x3a>
 801312c:	4620      	mov	r0, r4
 801312e:	2128      	movs	r1, #40	@ 0x28
 8013130:	2528      	movs	r5, #40	@ 0x28
 8013132:	e778      	b.n	8013026 <llcp_ll_phy_update_ind_received+0x32>

08013134 <llcp_min_used_chnls_prcdr_received>:
 8013134:	b5b0      	push	{r4, r5, r7, lr}
 8013136:	4604      	mov	r4, r0
 8013138:	f890 0127 	ldrb.w	r0, [r0, #295]	@ 0x127
 801313c:	2800      	cmp	r0, #0
 801313e:	f04f 0000 	mov.w	r0, #0
 8013142:	bf18      	it	ne
 8013144:	bdb0      	popne	{r4, r5, r7, pc}
 8013146:	f884 012a 	strb.w	r0, [r4, #298]	@ 0x12a
 801314a:	7848      	ldrb	r0, [r1, #1]
 801314c:	460d      	mov	r5, r1
 801314e:	3826      	subs	r0, #38	@ 0x26
 8013150:	f110 0f24 	cmn.w	r0, #36	@ 0x24
 8013154:	d304      	bcc.n	8013160 <llcp_min_used_chnls_prcdr_received+0x2c>
 8013156:	7828      	ldrb	r0, [r5, #0]
 8013158:	3808      	subs	r0, #8
 801315a:	f110 0f07 	cmn.w	r0, #7
 801315e:	d201      	bcs.n	8013164 <llcp_min_used_chnls_prcdr_received+0x30>
 8013160:	2030      	movs	r0, #48	@ 0x30
 8013162:	bdb0      	pop	{r4, r5, r7, pc}
 8013164:	2000      	movs	r0, #0
 8013166:	f884 008a 	strb.w	r0, [r4, #138]	@ 0x8a
 801316a:	8829      	ldrh	r1, [r5, #0]
 801316c:	0a0a      	lsrs	r2, r1, #8
 801316e:	f884 2138 	strb.w	r2, [r4, #312]	@ 0x138
 8013172:	f894 212f 	ldrb.w	r2, [r4, #303]	@ 0x12f
 8013176:	f884 1137 	strb.w	r1, [r4, #311]	@ 0x137
 801317a:	4011      	ands	r1, r2
 801317c:	2201      	movs	r2, #1
 801317e:	0609      	lsls	r1, r1, #24
 8013180:	f884 2139 	strb.w	r2, [r4, #313]	@ 0x139
 8013184:	d00a      	beq.n	801319c <llcp_min_used_chnls_prcdr_received+0x68>
 8013186:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801318a:	f00e fd27 	bl	8021bdc <conn_mngr_calc_num_of_used_data_chnls>
 801318e:	7869      	ldrb	r1, [r5, #1]
 8013190:	4288      	cmp	r0, r1
 8013192:	bf3c      	itt	cc
 8013194:	4620      	movcc	r0, r4
 8013196:	f7fe fe33 	blcc	8011e00 <llcp_update_chnl_map_per_connection>
 801319a:	2000      	movs	r0, #0
 801319c:	bdb0      	pop	{r4, r5, r7, pc}

0801319e <llcp_clk_acc_req_recieved>:
 801319e:	b338      	cbz	r0, 80131f0 <llcp_clk_acc_req_recieved+0x52>
 80131a0:	b5b0      	push	{r4, r5, r7, lr}
 80131a2:	b08c      	sub	sp, #48	@ 0x30
 80131a4:	f890 2127 	ldrb.w	r2, [r0, #295]	@ 0x127
 80131a8:	4604      	mov	r4, r0
 80131aa:	f44f 7094 	mov.w	r0, #296	@ 0x128
 80131ae:	2a01      	cmp	r2, #1
 80131b0:	bf08      	it	eq
 80131b2:	2021      	moveq	r0, #33	@ 0x21
 80131b4:	5c23      	ldrb	r3, [r4, r0]
 80131b6:	780a      	ldrb	r2, [r1, #0]
 80131b8:	4293      	cmp	r3, r2
 80131ba:	bf18      	it	ne
 80131bc:	5422      	strbne	r2, [r4, r0]
 80131be:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80131c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80131c6:	6800      	ldr	r0, [r0, #0]
 80131c8:	6845      	ldr	r5, [r0, #4]
 80131ca:	b12d      	cbz	r5, 80131d8 <llcp_clk_acc_req_recieved+0x3a>
 80131cc:	f8b4 30de 	ldrh.w	r3, [r4, #222]	@ 0xde
 80131d0:	780a      	ldrb	r2, [r1, #0]
 80131d2:	2000      	movs	r0, #0
 80131d4:	4619      	mov	r1, r3
 80131d6:	47a8      	blx	r5
 80131d8:	ad01      	add	r5, sp, #4
 80131da:	4628      	mov	r0, r5
 80131dc:	f00f fb4d 	bl	802287a <db_get_slp_clk_accuracy>
 80131e0:	4628      	mov	r0, r5
 80131e2:	4621      	mov	r1, r4
 80131e4:	221e      	movs	r2, #30
 80131e6:	2300      	movs	r3, #0
 80131e8:	f7fd fca0 	bl	8010b2c <llcp_cntrl_pkt_init>
 80131ec:	b00c      	add	sp, #48	@ 0x30
 80131ee:	bdb0      	pop	{r4, r5, r7, pc}
 80131f0:	2002      	movs	r0, #2
 80131f2:	4770      	bx	lr

080131f4 <llhwc_ble_wait_for_evnt_on_air>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	2600      	movs	r6, #0
 80131fa:	f240 4404 	movw	r4, #1028	@ 0x404
 80131fe:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8013202:	f88d 6007 	strb.w	r6, [sp, #7]
 8013206:	f8d4 0478 	ldr.w	r0, [r4, #1144]	@ 0x478
 801320a:	f646 5558 	movw	r5, #27992	@ 0x6d58
 801320e:	f040 0008 	orr.w	r0, r0, #8
 8013212:	f8c4 0478 	str.w	r0, [r4, #1144]	@ 0x478
 8013216:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801321a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801321e:	f080 0010 	eor.w	r0, r0, #16
 8013222:	4308      	orrs	r0, r1
 8013224:	bf1e      	ittt	ne
 8013226:	e9d5 0108 	ldrdne	r0, r1, [r5, #32]
 801322a:	f080 0020 	eorne.w	r0, r0, #32
 801322e:	ea50 0001 	orrsne.w	r0, r0, r1
 8013232:	d14b      	bne.n	80132cc <llhwc_ble_wait_for_evnt_on_air+0xd8>
 8013234:	201c      	movs	r0, #28
 8013236:	f008 fbb9 	bl	801b9ac <bsp_debug_gpio_set>
 801323a:	616e      	str	r6, [r5, #20]
 801323c:	f885 6030 	strb.w	r6, [r5, #48]	@ 0x30
 8013240:	6820      	ldr	r0, [r4, #0]
 8013242:	f040 0001 	orr.w	r0, r0, #1
 8013246:	6020      	str	r0, [r4, #0]
 8013248:	201c      	movs	r0, #28
 801324a:	f008 fbb1 	bl	801b9b0 <bsp_debug_gpio_clear>
 801324e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8013252:	2600      	movs	r6, #0
 8013254:	f081 0110 	eor.w	r1, r1, #16
 8013258:	4308      	orrs	r0, r1
 801325a:	f04f 0000 	mov.w	r0, #0
 801325e:	d04e      	beq.n	80132fe <llhwc_ble_wait_for_evnt_on_air+0x10a>
 8013260:	2001      	movs	r0, #1
 8013262:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8013266:	f44f 30e0 	mov.w	r0, #114688	@ 0x1c000
 801326a:	f640 0174 	movw	r1, #2164	@ 0x874
 801326e:	2208      	movs	r2, #8
 8013270:	2303      	movs	r3, #3
 8013272:	f885 6030 	strb.w	r6, [r5, #48]	@ 0x30
 8013276:	9600      	str	r6, [sp, #0]
 8013278:	f00b fd84 	bl	801ed84 <llhwc_polling>
 801327c:	2800      	cmp	r0, #0
 801327e:	d13e      	bne.n	80132fe <llhwc_ble_wait_for_evnt_on_air+0x10a>
 8013280:	f008 fde8 	bl	801be54 <llhwc_phy_is_phy_driver_busy>
 8013284:	2801      	cmp	r0, #1
 8013286:	d116      	bne.n	80132b6 <llhwc_ble_wait_for_evnt_on_air+0xc2>
 8013288:	f04f 0c00 	mov.w	ip, #0
 801328c:	f44f 30e0 	mov.w	r0, #114688	@ 0x1c000
 8013290:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8013294:	2201      	movs	r2, #1
 8013296:	2300      	movs	r3, #0
 8013298:	f8cd c000 	str.w	ip, [sp]
 801329c:	f00b fd72 	bl	801ed84 <llhwc_polling>
 80132a0:	bb68      	cbnz	r0, 80132fe <llhwc_ble_wait_for_evnt_on_air+0x10a>
 80132a2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80132a4:	f040 0001 	orr.w	r0, r0, #1
 80132a8:	6420      	str	r0, [r4, #64]	@ 0x40
 80132aa:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80132ac:	f020 0001 	bic.w	r0, r0, #1
 80132b0:	6420      	str	r0, [r4, #64]	@ 0x40
 80132b2:	f008 fe8c 	bl	801bfce <llhwc_phy_phy_driver_stop>
 80132b6:	f00b ffca 	bl	801f24e <ll_cmn_clr_isr>
 80132ba:	f895 0031 	ldrb.w	r0, [r5, #49]	@ 0x31
 80132be:	2802      	cmp	r0, #2
 80132c0:	d018      	beq.n	80132f4 <llhwc_ble_wait_for_evnt_on_air+0x100>
 80132c2:	2801      	cmp	r0, #1
 80132c4:	d11a      	bne.n	80132fc <llhwc_ble_wait_for_evnt_on_air+0x108>
 80132c6:	f000 f83d 	bl	8013344 <llhwc_hg_isr>
 80132ca:	e017      	b.n	80132fc <llhwc_ble_wait_for_evnt_on_air+0x108>
 80132cc:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80132d0:	f080 0040 	eor.w	r0, r0, #64	@ 0x40
 80132d4:	4308      	orrs	r0, r1
 80132d6:	bf1e      	ittt	ne
 80132d8:	e9d5 0108 	ldrdne	r0, r1, [r5, #32]
 80132dc:	f480 3000 	eorne.w	r0, r0, #131072	@ 0x20000
 80132e0:	ea50 0001 	orrsne.w	r0, r0, r1
 80132e4:	d0a6      	beq.n	8013234 <llhwc_ble_wait_for_evnt_on_air+0x40>
 80132e6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80132ea:	f480 2080 	eor.w	r0, r0, #262144	@ 0x40000
 80132ee:	4308      	orrs	r0, r1
 80132f0:	d0a0      	beq.n	8013234 <llhwc_ble_wait_for_evnt_on_air+0x40>
 80132f2:	e7ac      	b.n	801324e <llhwc_ble_wait_for_evnt_on_air+0x5a>
 80132f4:	f10d 0007 	add.w	r0, sp, #7
 80132f8:	f000 f980 	bl	80135fc <llhwc_lw_isr>
 80132fc:	2000      	movs	r0, #0
 80132fe:	f8d4 1478 	ldr.w	r1, [r4, #1144]	@ 0x478
 8013302:	f021 0108 	bic.w	r1, r1, #8
 8013306:	f8c4 1478 	str.w	r1, [r4, #1144]	@ 0x478
 801330a:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
 801330e:	b002      	add	sp, #8
 8013310:	bd70      	pop	{r4, r5, r6, pc}

08013312 <llhwc_stop_scan>:
 8013312:	b580      	push	{r7, lr}
 8013314:	201c      	movs	r0, #28
 8013316:	f008 fb49 	bl	801b9ac <bsp_debug_gpio_set>
 801331a:	f646 5058 	movw	r0, #27992	@ 0x6d58
 801331e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013322:	2100      	movs	r1, #0
 8013324:	6141      	str	r1, [r0, #20]
 8013326:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 801332a:	f240 4104 	movw	r1, #1028	@ 0x404
 801332e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8013332:	6808      	ldr	r0, [r1, #0]
 8013334:	f040 0201 	orr.w	r2, r0, #1
 8013338:	201c      	movs	r0, #28
 801333a:	600a      	str	r2, [r1, #0]
 801333c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013340:	f008 bb36 	b.w	801b9b0 <bsp_debug_gpio_clear>

08013344 <llhwc_hg_isr>:
 8013344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013348:	b089      	sub	sp, #36	@ 0x24
 801334a:	f640 0728 	movw	r7, #2088	@ 0x828
 801334e:	f240 4604 	movw	r6, #1028	@ 0x404
 8013352:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8013356:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801335a:	f008 fb40 	bl	801b9de <os_disable_isr>
 801335e:	f646 5958 	movw	r9, #27992	@ 0x6d58
 8013362:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8013366:	f8d6 0408 	ldr.w	r0, [r6, #1032]	@ 0x408
 801336a:	f899 1031 	ldrb.w	r1, [r9, #49]	@ 0x31
 801336e:	f000 041f 	and.w	r4, r0, #31
 8013372:	2901      	cmp	r1, #1
 8013374:	d111      	bne.n	801339a <llhwc_hg_isr+0x56>
 8013376:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8013378:	0700      	lsls	r0, r0, #28
 801337a:	d50e      	bpl.n	801339a <llhwc_hg_isr+0x56>
 801337c:	f247 3018 	movw	r0, #29464	@ 0x7318
 8013380:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013384:	2100      	movs	r1, #0
 8013386:	7001      	strb	r1, [r0, #0]
 8013388:	4620      	mov	r0, r4
 801338a:	f002 f9df 	bl	801574c <llhwc_sm_done_isr>
 801338e:	f247 30a4 	movw	r0, #29604	@ 0x73a4
 8013392:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013396:	2102      	movs	r1, #2
 8013398:	7081      	strb	r1, [r0, #2]
 801339a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801339c:	0740      	lsls	r0, r0, #29
 801339e:	f140 8127 	bpl.w	80135f0 <llhwc_hg_isr+0x2ac>
 80133a2:	f247 3018 	movw	r0, #29464	@ 0x7318
 80133a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80133aa:	2100      	movs	r1, #0
 80133ac:	7001      	strb	r1, [r0, #0]
 80133ae:	6830      	ldr	r0, [r6, #0]
 80133b0:	2c0c      	cmp	r4, #12
 80133b2:	f020 0001 	bic.w	r0, r0, #1
 80133b6:	6030      	str	r0, [r6, #0]
 80133b8:	dc61      	bgt.n	801347e <llhwc_hg_isr+0x13a>
 80133ba:	2c04      	cmp	r4, #4
 80133bc:	d067      	beq.n	801348e <llhwc_hg_isr+0x14a>
 80133be:	2c06      	cmp	r4, #6
 80133c0:	f040 810e 	bne.w	80135e0 <llhwc_hg_isr+0x29c>
 80133c4:	f247 3b30 	movw	fp, #29488	@ 0x7330
 80133c8:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 80133cc:	f89b 503b 	ldrb.w	r5, [fp, #59]	@ 0x3b
 80133d0:	2100      	movs	r1, #0
 80133d2:	2d04      	cmp	r5, #4
 80133d4:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80133d8:	d10a      	bne.n	80133f0 <llhwc_hg_isr+0xac>
 80133da:	f247 30e8 	movw	r0, #29672	@ 0x73e8
 80133de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80133e2:	8bc0      	ldrh	r0, [r0, #30]
 80133e4:	2504      	movs	r5, #4
 80133e6:	4308      	orrs	r0, r1
 80133e8:	78c0      	ldrb	r0, [r0, #3]
 80133ea:	0700      	lsls	r0, r0, #28
 80133ec:	bf58      	it	pl
 80133ee:	2503      	movpl	r5, #3
 80133f0:	2002      	movs	r0, #2
 80133f2:	f008 fa84 	bl	801b8fe <bsp_delay_us>
 80133f6:	f24e 137a 	movw	r3, #57722	@ 0xe17a
 80133fa:	f6c0 0302 	movt	r3, #2050	@ 0x802
 80133fe:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8013400:	f8bb 1018 	ldrh.w	r1, [fp, #24]
 8013404:	f8bb 2010 	ldrh.w	r2, [fp, #16]
 8013408:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801340c:	4410      	add	r0, r2
 801340e:	4419      	add	r1, r3
 8013410:	1a41      	subs	r1, r0, r1
 8013412:	e9db 2003 	ldrd	r2, r0, [fp, #12]
 8013416:	f10d 0818 	add.w	r8, sp, #24
 801341a:	f04f 0a00 	mov.w	sl, #0
 801341e:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8013422:	4640      	mov	r0, r8
 8013424:	2201      	movs	r2, #1
 8013426:	f8ad a01c 	strh.w	sl, [sp, #28]
 801342a:	f00a f81b 	bl	801d464 <ble_time_add_uint>
 801342e:	f646 6100 	movw	r1, #28160	@ 0x6e00
 8013432:	f899 002d 	ldrb.w	r0, [r9, #45]	@ 0x2d
 8013436:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801343a:	f89b 303a 	ldrb.w	r3, [fp, #58]	@ 0x3a
 801343e:	f8d1 c000 	ldr.w	ip, [r1]
 8013442:	9000      	str	r0, [sp, #0]
 8013444:	a904      	add	r1, sp, #16
 8013446:	4640      	mov	r0, r8
 8013448:	462a      	mov	r2, r5
 801344a:	f8cd c004 	str.w	ip, [sp, #4]
 801344e:	f003 fe2b 	bl	80170a8 <evnt_schdlr_update_master_conn_params>
 8013452:	f646 6004 	movw	r0, #28164	@ 0x6e04
 8013456:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801345a:	6800      	ldr	r0, [r0, #0]
 801345c:	2100      	movs	r1, #0
 801345e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8013462:	4408      	add	r0, r1
 8013464:	68c1      	ldr	r1, [r0, #12]
 8013466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801346a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801346e:	4391      	bics	r1, r2
 8013470:	4419      	add	r1, r3
 8013472:	60c1      	str	r1, [r0, #12]
 8013474:	f899 001a 	ldrb.w	r0, [r9, #26]
 8013478:	2801      	cmp	r0, #1
 801347a:	d00a      	beq.n	8013492 <llhwc_hg_isr+0x14e>
 801347c:	e0b0      	b.n	80135e0 <llhwc_hg_isr+0x29c>
 801347e:	2c0d      	cmp	r4, #13
 8013480:	bf18      	it	ne
 8013482:	2c17      	cmpne	r4, #23
 8013484:	f040 80ac 	bne.w	80135e0 <llhwc_hg_isr+0x29c>
 8013488:	f04f 0a00 	mov.w	sl, #0
 801348c:	e001      	b.n	8013492 <llhwc_hg_isr+0x14e>
 801348e:	f04f 0a01 	mov.w	sl, #1
 8013492:	f247 38e8 	movw	r8, #29672	@ 0x73e8
 8013496:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801349a:	2500      	movs	r5, #0
 801349c:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 80134a0:	f8b8 201e 	ldrh.w	r2, [r8, #30]
 80134a4:	1d29      	adds	r1, r5, #4
 80134a6:	5850      	ldr	r0, [r2, r1]
 80134a8:	f000 030f 	and.w	r3, r0, #15
 80134ac:	5850      	ldr	r0, [r2, r1]
 80134ae:	2b02      	cmp	r3, #2
 80134b0:	b2c0      	uxtb	r0, r0
 80134b2:	d304      	bcc.n	80134be <llhwc_hg_isr+0x17a>
 80134b4:	2b05      	cmp	r3, #5
 80134b6:	d047      	beq.n	8013548 <llhwc_hg_isr+0x204>
 80134b8:	2b06      	cmp	r3, #6
 80134ba:	f040 8091 	bne.w	80135e0 <llhwc_hg_isr+0x29c>
 80134be:	18a9      	adds	r1, r5, r2
 80134c0:	688a      	ldr	r2, [r1, #8]
 80134c2:	9206      	str	r2, [sp, #24]
 80134c4:	68c9      	ldr	r1, [r1, #12]
 80134c6:	f899 201a 	ldrb.w	r2, [r9, #26]
 80134ca:	b289      	uxth	r1, r1
 80134cc:	2a00      	cmp	r2, #0
 80134ce:	9107      	str	r1, [sp, #28]
 80134d0:	f000 8086 	beq.w	80135e0 <llhwc_hg_isr+0x29c>
 80134d4:	2101      	movs	r1, #1
 80134d6:	f3c0 1380 	ubfx	r3, r0, #6, #1
 80134da:	fa01 f004 	lsl.w	r0, r1, r4
 80134de:	a904      	add	r1, sp, #16
 80134e0:	f10d 040f 	add.w	r4, sp, #15
 80134e4:	9100      	str	r1, [sp, #0]
 80134e6:	aa06      	add	r2, sp, #24
 80134e8:	2100      	movs	r1, #0
 80134ea:	9401      	str	r4, [sp, #4]
 80134ec:	f005 fc07 	bl	8018cfe <non_conn_mngr_interrupt>
 80134f0:	1e41      	subs	r1, r0, #1
 80134f2:	bf18      	it	ne
 80134f4:	2101      	movne	r1, #1
 80134f6:	f08a 0201 	eor.w	r2, sl, #1
 80134fa:	4311      	orrs	r1, r2
 80134fc:	f889 0019 	strb.w	r0, [r9, #25]
 8013500:	d106      	bne.n	8013510 <llhwc_hg_isr+0x1cc>
 8013502:	f898 0012 	ldrb.w	r0, [r8, #18]
 8013506:	f3c0 0081 	ubfx	r0, r0, #2, #2
 801350a:	3001      	adds	r0, #1
 801350c:	f009 fe46 	bl	801d19c <llhwc_phy_deactivate_scan_req>
 8013510:	9804      	ldr	r0, [sp, #16]
 8013512:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013516:	6038      	str	r0, [r7, #0]
 8013518:	f8d6 0420 	ldr.w	r0, [r6, #1056]	@ 0x420
 801351c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013520:	4388      	bics	r0, r1
 8013522:	4410      	add	r0, r2
 8013524:	f8c6 0420 	str.w	r0, [r6, #1056]	@ 0x420
 8013528:	e9d9 0108 	ldrd	r0, r1, [r9, #32]
 801352c:	f080 0020 	eor.w	r0, r0, #32
 8013530:	4308      	orrs	r0, r1
 8013532:	d055      	beq.n	80135e0 <llhwc_hg_isr+0x29c>
 8013534:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 8013538:	4428      	add	r0, r5
 801353a:	6841      	ldr	r1, [r0, #4]
 801353c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013540:	f362 1186 	bfi	r1, r2, #6, #1
 8013544:	6041      	str	r1, [r0, #4]
 8013546:	e04b      	b.n	80135e0 <llhwc_hg_isr+0x29c>
 8013548:	f105 0908 	add.w	r9, r5, #8
 801354c:	f852 c001 	ldr.w	ip, [r2, r1]
 8013550:	f852 1009 	ldr.w	r1, [r2, r9]
 8013554:	f105 0e10 	add.w	lr, r5, #16
 8013558:	9106      	str	r1, [sp, #24]
 801355a:	f105 010c 	add.w	r1, r5, #12
 801355e:	5856      	ldr	r6, [r2, r1]
 8013560:	ea4f 13dc 	mov.w	r3, ip, lsr #7
 8013564:	b2b6      	uxth	r6, r6
 8013566:	0980      	lsrs	r0, r0, #6
 8013568:	9607      	str	r6, [sp, #28]
 801356a:	5856      	ldr	r6, [r2, r1]
 801356c:	f000 0001 	and.w	r0, r0, #1
 8013570:	0c36      	lsrs	r6, r6, #16
 8013572:	9604      	str	r6, [sp, #16]
 8013574:	f852 200e 	ldr.w	r2, [r2, lr]
 8013578:	f8b8 601c 	ldrh.w	r6, [r8, #28]
 801357c:	0c14      	lsrs	r4, r2, #16
 801357e:	9205      	str	r2, [sp, #20]
 8013580:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013584:	f8ad 4014 	strh.w	r4, [sp, #20]
 8013588:	ea46 0405 	orr.w	r4, r6, r5
 801358c:	6824      	ldr	r4, [r4, #0]
 801358e:	b2a4      	uxth	r4, r4
 8013590:	4425      	add	r5, r4
 8013592:	686e      	ldr	r6, [r5, #4]
 8013594:	f363 1686 	bfi	r6, r3, #6, #1
 8013598:	606e      	str	r6, [r5, #4]
 801359a:	686b      	ldr	r3, [r5, #4]
 801359c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80135a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80135a4:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80135a8:	6068      	str	r0, [r5, #4]
 80135aa:	f854 0009 	ldr.w	r0, [r4, r9]
 80135ae:	9b04      	ldr	r3, [sp, #16]
 80135b0:	b280      	uxth	r0, r0
 80135b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80135b6:	f844 0009 	str.w	r0, [r4, r9]
 80135ba:	5860      	ldr	r0, [r4, r1]
 80135bc:	43b0      	bics	r0, r6
 80135be:	ea40 4013 	orr.w	r0, r0, r3, lsr #16
 80135c2:	5060      	str	r0, [r4, r1]
 80135c4:	5860      	ldr	r0, [r4, r1]
 80135c6:	f360 020f 	bfi	r2, r0, #0, #16
 80135ca:	5062      	str	r2, [r4, r1]
 80135cc:	9806      	ldr	r0, [sp, #24]
 80135ce:	f844 000e 	str.w	r0, [r4, lr]
 80135d2:	6968      	ldr	r0, [r5, #20]
 80135d4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80135d8:	f36f 000f 	bfc	r0, #0, #16
 80135dc:	4408      	add	r0, r1
 80135de:	6168      	str	r0, [r5, #20]
 80135e0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80135e2:	f040 0004 	orr.w	r0, r0, #4
 80135e6:	6538      	str	r0, [r7, #80]	@ 0x50
 80135e8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80135ea:	f020 0004 	bic.w	r0, r0, #4
 80135ee:	6538      	str	r0, [r7, #80]	@ 0x50
 80135f0:	f008 f9f7 	bl	801b9e2 <os_enable_isr>
 80135f4:	b009      	add	sp, #36	@ 0x24
 80135f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080135fc <llhwc_lw_isr>:
 80135fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013600:	b082      	sub	sp, #8
 8013602:	2100      	movs	r1, #0
 8013604:	270c      	movs	r7, #12
 8013606:	f646 6a14 	movw	sl, #28180	@ 0x6e14
 801360a:	9101      	str	r1, [sp, #4]
 801360c:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8013610:	9100      	str	r1, [sp, #0]
 8013612:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8013616:	f8d7 8800 	ldr.w	r8, [r7, #2048]	@ 0x800
 801361a:	f89a 1000 	ldrb.w	r1, [sl]
 801361e:	f640 0924 	movw	r9, #2084	@ 0x824
 8013622:	2901      	cmp	r1, #1
 8013624:	4605      	mov	r5, r0
 8013626:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 801362a:	d12e      	bne.n	801368a <llhwc_lw_isr+0x8e>
 801362c:	f247 30e8 	movw	r0, #29672	@ 0x73e8
 8013630:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013634:	7c80      	ldrb	r0, [r0, #18]
 8013636:	2118      	movs	r1, #24
 8013638:	f010 0f0c 	tst.w	r0, #12
 801363c:	f646 6010 	movw	r0, #28176	@ 0x6e10
 8013640:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013644:	6800      	ldr	r0, [r0, #0]
 8013646:	bf08      	it	eq
 8013648:	210b      	moveq	r1, #11
 801364a:	466c      	mov	r4, sp
 801364c:	9000      	str	r0, [sp, #0]
 801364e:	4620      	mov	r0, r4
 8013650:	2205      	movs	r2, #5
 8013652:	f009 ff07 	bl	801d464 <ble_time_add_uint>
 8013656:	f646 660c 	movw	r6, #28172	@ 0x6e0c
 801365a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801365e:	bf00      	nop
 8013660:	4630      	mov	r0, r6
 8013662:	f00a ff32 	bl	801e4ca <llhwc_slptmr_get>
 8013666:	6831      	ldr	r1, [r6, #0]
 8013668:	4620      	mov	r0, r4
 801366a:	f009 ffdb 	bl	801d624 <ble_time_cmp_raw_reading>
 801366e:	2800      	cmp	r0, #0
 8013670:	d4f6      	bmi.n	8013660 <llhwc_lw_isr+0x64>
 8013672:	2000      	movs	r0, #0
 8013674:	f8c9 0004 	str.w	r0, [r9, #4]
 8013678:	f8d9 1000 	ldr.w	r1, [r9]
 801367c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013680:	4391      	bics	r1, r2
 8013682:	f8c9 1000 	str.w	r1, [r9]
 8013686:	f88a 0000 	strb.w	r0, [sl]
 801368a:	7828      	ldrb	r0, [r5, #0]
 801368c:	f008 041f 	and.w	r4, r8, #31
 8013690:	f646 5658 	movw	r6, #27992	@ 0x6d58
 8013694:	f247 3819 	movw	r8, #29465	@ 0x7319
 8013698:	2800      	cmp	r0, #0
 801369a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801369e:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80136a2:	d03f      	beq.n	8013724 <llhwc_lw_isr+0x128>
 80136a4:	6838      	ldr	r0, [r7, #0]
 80136a6:	f020 0001 	bic.w	r0, r0, #1
 80136aa:	6038      	str	r0, [r7, #0]
 80136ac:	6838      	ldr	r0, [r7, #0]
 80136ae:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80136b2:	6038      	str	r0, [r7, #0]
 80136b4:	6838      	ldr	r0, [r7, #0]
 80136b6:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80136ba:	6038      	str	r0, [r7, #0]
 80136bc:	201b      	movs	r0, #27
 80136be:	f008 f979 	bl	801b9b4 <bsp_debug_gpio_toggle>
 80136c2:	2700      	movs	r7, #0
 80136c4:	2010      	movs	r0, #16
 80136c6:	f888 7000 	strb.w	r7, [r8]
 80136ca:	702f      	strb	r7, [r5, #0]
 80136cc:	e9c6 7008 	strd	r7, r0, [r6, #32]
 80136d0:	2000      	movs	r0, #0
 80136d2:	2101      	movs	r1, #1
 80136d4:	2c18      	cmp	r4, #24
 80136d6:	bf38      	it	cc
 80136d8:	2001      	movcc	r0, #1
 80136da:	f008 f920 	bl	801b91e <bsp_assert>
 80136de:	f24e 1084 	movw	r0, #57732	@ 0xe184
 80136e2:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80136e6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80136ea:	f886 7030 	strb.w	r7, [r6, #48]	@ 0x30
 80136ee:	4780      	blx	r0
 80136f0:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80136f4:	f081 0110 	eor.w	r1, r1, #16
 80136f8:	4308      	orrs	r0, r1
 80136fa:	d103      	bne.n	8013704 <llhwc_lw_isr+0x108>
 80136fc:	2001      	movs	r0, #1
 80136fe:	2100      	movs	r1, #0
 8013700:	f008 fe72 	bl	801c3e8 <llhwc_phy_strt_stp>
 8013704:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 8013708:	f081 0110 	eor.w	r1, r1, #16
 801370c:	4308      	orrs	r0, r1
 801370e:	d103      	bne.n	8013718 <llhwc_lw_isr+0x11c>
 8013710:	2000      	movs	r0, #0
 8013712:	2100      	movs	r1, #0
 8013714:	f00c fab6 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013718:	f8d9 0058 	ldr.w	r0, [r9, #88]	@ 0x58
 801371c:	f020 0008 	bic.w	r0, r0, #8
 8013720:	f8c9 0058 	str.w	r0, [r9, #88]	@ 0x58
 8013724:	f896 0031 	ldrb.w	r0, [r6, #49]	@ 0x31
 8013728:	f247 35a4 	movw	r5, #29604	@ 0x73a4
 801372c:	2802      	cmp	r0, #2
 801372e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8013732:	d10a      	bne.n	801374a <llhwc_lw_isr+0x14e>
 8013734:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8013738:	0700      	lsls	r0, r0, #28
 801373a:	d508      	bpl.n	801374e <llhwc_lw_isr+0x152>
 801373c:	2000      	movs	r0, #0
 801373e:	f888 0000 	strb.w	r0, [r8]
 8013742:	4620      	mov	r0, r4
 8013744:	f002 f802 	bl	801574c <llhwc_sm_done_isr>
 8013748:	e001      	b.n	801374e <llhwc_lw_isr+0x152>
 801374a:	2000      	movs	r0, #0
 801374c:	70a8      	strb	r0, [r5, #2]
 801374e:	f898 0000 	ldrb.w	r0, [r8]
 8013752:	7868      	ldrb	r0, [r5, #1]
 8013754:	2801      	cmp	r0, #1
 8013756:	d110      	bne.n	801377a <llhwc_lw_isr+0x17e>
 8013758:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 801375c:	b968      	cbnz	r0, 801377a <llhwc_lw_isr+0x17e>
 801375e:	2001      	movs	r0, #1
 8013760:	f7fb ff73 	bl	800f64a <evnt_util_set_prdc_clbr_exce_state>
 8013764:	2000      	movs	r0, #0
 8013766:	f00a f88c 	bl	801d882 <emngr_get_handle_events>
 801376a:	b118      	cbz	r0, 8013774 <llhwc_lw_isr+0x178>
 801376c:	2000      	movs	r0, #0
 801376e:	f00a f8db 	bl	801d928 <emngr_handle_event>
 8013772:	e7f7      	b.n	8013764 <llhwc_lw_isr+0x168>
 8013774:	2000      	movs	r0, #0
 8013776:	f7fb ff68 	bl	800f64a <evnt_util_set_prdc_clbr_exce_state>
 801377a:	b002      	add	sp, #8
 801377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013780 <llhwc_addr_rsln_en>:
 8013780:	f646 5158 	movw	r1, #27992	@ 0x6d58
 8013784:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013788:	7688      	strb	r0, [r1, #26]
 801378a:	f640 0140 	movw	r1, #2112	@ 0x840
 801378e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8013792:	680a      	ldr	r2, [r1, #0]
 8013794:	2801      	cmp	r0, #1
 8013796:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801379a:	bf18      	it	ne
 801379c:	f502 4200 	addne.w	r2, r2, #32768	@ 0x8000
 80137a0:	600a      	str	r2, [r1, #0]
 80137a2:	4770      	bx	lr

080137a4 <llhwc_reset>:
 80137a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137a8:	f646 5558 	movw	r5, #27992	@ 0x6d58
 80137ac:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80137b0:	692f      	ldr	r7, [r5, #16]
 80137b2:	f640 087c 	movw	r8, #2172	@ 0x87c
 80137b6:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 80137ba:	f008 f910 	bl	801b9de <os_disable_isr>
 80137be:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80137c0:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80137c2:	b148      	cbz	r0, 80137d8 <llhwc_reset+0x34>
 80137c4:	2000      	movs	r0, #0
 80137c6:	8768      	strh	r0, [r5, #58]	@ 0x3a
 80137c8:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 80137cc:	f00a fcf0 	bl	801e1b0 <os_timer_stop_free>
 80137d0:	4604      	mov	r4, r0
 80137d2:	2800      	cmp	r0, #0
 80137d4:	f040 809b 	bne.w	801390e <llhwc_reset+0x16a>
 80137d8:	4628      	mov	r0, r5
 80137da:	2100      	movs	r1, #0
 80137dc:	2240      	movs	r2, #64	@ 0x40
 80137de:	2400      	movs	r4, #0
 80137e0:	f00d f880 	bl	80208e4 <ble_memset>
 80137e4:	2010      	movs	r0, #16
 80137e6:	636e      	str	r6, [r5, #52]	@ 0x34
 80137e8:	e9c5 4008 	strd	r4, r0, [r5, #32]
 80137ec:	200c      	movs	r0, #12
 80137ee:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
 80137f2:	f247 3030 	movw	r0, #29488	@ 0x7330
 80137f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80137fa:	f885 402e 	strb.w	r4, [r5, #46]	@ 0x2e
 80137fe:	76ac      	strb	r4, [r5, #26]
 8013800:	62ac      	str	r4, [r5, #40]	@ 0x28
 8013802:	f885 4030 	strb.w	r4, [r5, #48]	@ 0x30
 8013806:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
 801380a:	f646 5498 	movw	r4, #28056	@ 0x6d98
 801380e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8013812:	4620      	mov	r0, r4
 8013814:	2100      	movs	r1, #0
 8013816:	2208      	movs	r2, #8
 8013818:	612f      	str	r7, [r5, #16]
 801381a:	f00d f863 	bl	80208e4 <ble_memset>
 801381e:	f646 50a0 	movw	r0, #28064	@ 0x6da0
 8013822:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013826:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013828:	227f      	movs	r2, #127	@ 0x7f
 801382a:	7122      	strb	r2, [r4, #4]
 801382c:	b129      	cbz	r1, 801383a <llhwc_reset+0x96>
 801382e:	3058      	adds	r0, #88	@ 0x58
 8013830:	f00a fcbe 	bl	801e1b0 <os_timer_stop_free>
 8013834:	2000      	movs	r0, #0
 8013836:	f009 fada 	bl	801cdee <llhwc_phy_read_and_stop_ed>
 801383a:	f640 050c 	movw	r5, #2060	@ 0x80c
 801383e:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8013842:	f008 fd87 	bl	801c354 <llhwc_phy_set_cfg_time>
 8013846:	f04f 30ff 	mov.w	r0, #4294967295
 801384a:	f8c8 0000 	str.w	r0, [r8]
 801384e:	f8d8 0000 	ldr.w	r0, [r8]
 8013852:	f64f 475c 	movw	r7, #64604	@ 0xfc5c
 8013856:	f040 0001 	orr.w	r0, r0, #1
 801385a:	f8c8 0000 	str.w	r0, [r8]
 801385e:	f8d8 0000 	ldr.w	r0, [r8]
 8013862:	f6cf 77ff 	movt	r7, #65535	@ 0xffff
 8013866:	f040 0002 	orr.w	r0, r0, #2
 801386a:	f8c8 0000 	str.w	r0, [r8]
 801386e:	f8d8 0000 	ldr.w	r0, [r8]
 8013872:	f020 0004 	bic.w	r0, r0, #4
 8013876:	f8c8 0000 	str.w	r0, [r8]
 801387a:	f8d8 0000 	ldr.w	r0, [r8]
 801387e:	f020 0008 	bic.w	r0, r0, #8
 8013882:	f8c8 0000 	str.w	r0, [r8]
 8013886:	f64f 403c 	movw	r0, #64572	@ 0xfc3c
 801388a:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 801388e:	5829      	ldr	r1, [r5, r0]
 8013890:	f021 0110 	bic.w	r1, r1, #16
 8013894:	5029      	str	r1, [r5, r0]
 8013896:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8013898:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 801389c:	6368      	str	r0, [r5, #52]	@ 0x34
 801389e:	6828      	ldr	r0, [r5, #0]
 80138a0:	f020 5080 	bic.w	r0, r0, #268435456	@ 0x10000000
 80138a4:	6028      	str	r0, [r5, #0]
 80138a6:	6968      	ldr	r0, [r5, #20]
 80138a8:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 80138ac:	6168      	str	r0, [r5, #20]
 80138ae:	59e8      	ldr	r0, [r5, r7]
 80138b0:	f020 0018 	bic.w	r0, r0, #24
 80138b4:	51e8      	str	r0, [r5, r7]
 80138b6:	f000 f835 	bl	8013924 <llhwc_updt_lst_ofsts>
 80138ba:	4604      	mov	r4, r0
 80138bc:	bb38      	cbnz	r0, 801390e <llhwc_reset+0x16a>
 80138be:	2000      	movs	r0, #0
 80138c0:	2400      	movs	r4, #0
 80138c2:	f000 f891 	bl	80139e8 <llhwc_lst_clr>
 80138c6:	2001      	movs	r0, #1
 80138c8:	f000 f88e 	bl	80139e8 <llhwc_lst_clr>
 80138cc:	2002      	movs	r0, #2
 80138ce:	f000 f88b 	bl	80139e8 <llhwc_lst_clr>
 80138d2:	2003      	movs	r0, #3
 80138d4:	f000 f888 	bl	80139e8 <llhwc_lst_clr>
 80138d8:	2004      	movs	r0, #4
 80138da:	f000 f885 	bl	80139e8 <llhwc_lst_clr>
 80138de:	2005      	movs	r0, #5
 80138e0:	f000 f882 	bl	80139e8 <llhwc_lst_clr>
 80138e4:	59e8      	ldr	r0, [r5, r7]
 80138e6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80138ea:	f020 0001 	bic.w	r0, r0, #1
 80138ee:	51e8      	str	r0, [r5, r7]
 80138f0:	f646 504c 	movw	r0, #27980	@ 0x6d4c
 80138f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80138f8:	6004      	str	r4, [r0, #0]
 80138fa:	f646 5054 	movw	r0, #27988	@ 0x6d54
 80138fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8013902:	8004      	strh	r4, [r0, #0]
 8013904:	f240 10d4 	movw	r0, #468	@ 0x1d4
 8013908:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801390c:	6001      	str	r1, [r0, #0]
 801390e:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8013912:	f020 4080 	bic.w	r0, r0, #1073741824	@ 0x40000000
 8013916:	f8c8 0018 	str.w	r0, [r8, #24]
 801391a:	f008 f862 	bl	801b9e2 <os_enable_isr>
 801391e:	4620      	mov	r0, r4
 8013920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013924 <llhwc_updt_lst_ofsts>:
 8013924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013926:	b087      	sub	sp, #28
 8013928:	f00a ffea 	bl	801e900 <llhwc_cmn_is_dp_slp_enabled>
 801392c:	b120      	cbz	r0, 8013938 <llhwc_updt_lst_ofsts+0x14>
 801392e:	2043      	movs	r0, #67	@ 0x43
 8013930:	f008 f840 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8013934:	240c      	movs	r4, #12
 8013936:	e054      	b.n	80139e2 <llhwc_updt_lst_ofsts+0xbe>
 8013938:	201e      	movs	r0, #30
 801393a:	f8ad 0008 	strh.w	r0, [sp, #8]
 801393e:	2028      	movs	r0, #40	@ 0x28
 8013940:	f8ad 000a 	strh.w	r0, [sp, #10]
 8013944:	2046      	movs	r0, #70	@ 0x46
 8013946:	f8ad 000c 	strh.w	r0, [sp, #12]
 801394a:	205a      	movs	r0, #90	@ 0x5a
 801394c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013950:	2064      	movs	r0, #100	@ 0x64
 8013952:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013956:	206e      	movs	r0, #110	@ 0x6e
 8013958:	f8ad 0012 	strh.w	r0, [sp, #18]
 801395c:	2001      	movs	r0, #1
 801395e:	f88d 0016 	strb.w	r0, [sp, #22]
 8013962:	2002      	movs	r0, #2
 8013964:	f88d 0017 	strb.w	r0, [sp, #23]
 8013968:	2003      	movs	r0, #3
 801396a:	f88d 0018 	strb.w	r0, [sp, #24]
 801396e:	2004      	movs	r0, #4
 8013970:	f88d 0019 	strb.w	r0, [sp, #25]
 8013974:	2005      	movs	r0, #5
 8013976:	f88d 001a 	strb.w	r0, [sp, #26]
 801397a:	2006      	movs	r0, #6
 801397c:	2400      	movs	r4, #0
 801397e:	f88d 001b 	strb.w	r0, [sp, #27]
 8013982:	2001      	movs	r0, #1
 8013984:	2103      	movs	r1, #3
 8013986:	f8ad 4006 	strh.w	r4, [sp, #6]
 801398a:	f88d 4015 	strb.w	r4, [sp, #21]
 801398e:	f00c f979 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013992:	f24e 11e4 	movw	r1, #57828	@ 0xe1e4
 8013996:	2200      	movs	r2, #0
 8013998:	f10d 0c15 	add.w	ip, sp, #21
 801399c:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80139a0:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 80139a4:	f10d 0e06 	add.w	lr, sp, #6
 80139a8:	f81c 0004 	ldrb.w	r0, [ip, r4]
 80139ac:	3401      	adds	r4, #1
 80139ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80139b2:	2c07      	cmp	r4, #7
 80139b4:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80139b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80139bc:	58ae      	ldr	r6, [r5, r2]
 80139be:	e9d3 7301 	ldrd	r7, r3, [r3, #4]
 80139c2:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
 80139c6:	ea26 0607 	bic.w	r6, r6, r7
 80139ca:	fa00 f003 	lsl.w	r0, r0, r3
 80139ce:	ea00 0007 	and.w	r0, r0, r7
 80139d2:	4430      	add	r0, r6
 80139d4:	50a8      	str	r0, [r5, r2]
 80139d6:	d1e7      	bne.n	80139a8 <llhwc_updt_lst_ofsts+0x84>
 80139d8:	2000      	movs	r0, #0
 80139da:	2103      	movs	r1, #3
 80139dc:	2400      	movs	r4, #0
 80139de:	f00c f951 	bl	801fc84 <llhwc_cmn_control_aclk>
 80139e2:	4620      	mov	r0, r4
 80139e4:	b007      	add	sp, #28
 80139e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080139e8 <llhwc_lst_clr>:
 80139e8:	b580      	push	{r7, lr}
 80139ea:	f24e 2138 	movw	r1, #57912	@ 0xe238
 80139ee:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80139f2:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80139f6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80139fa:	6851      	ldr	r1, [r2, #4]
 80139fc:	0840      	lsrs	r0, r0, #1
 80139fe:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
 8013a02:	bf28      	it	cs
 8013a04:	bd80      	popcs	{r7, pc}
 8013a06:	f248 1ef8 	movw	lr, #33272	@ 0x81f8
 8013a0a:	0849      	lsrs	r1, r1, #1
 8013a0c:	f6c4 0e02 	movt	lr, #18434	@ 0x4802
 8013a10:	f04f 0c01 	mov.w	ip, #1
 8013a14:	281f      	cmp	r0, #31
 8013a16:	d809      	bhi.n	8013a2c <llhwc_lst_clr+0x44>
 8013a18:	f8de 3000 	ldr.w	r3, [lr]
 8013a1c:	fa0c f200 	lsl.w	r2, ip, r0
 8013a20:	ea23 0202 	bic.w	r2, r3, r2
 8013a24:	f8ce 2000 	str.w	r2, [lr]
 8013a28:	e009      	b.n	8013a3e <llhwc_lst_clr+0x56>
 8013a2a:	bf00      	nop
 8013a2c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8013a30:	f1a0 0320 	sub.w	r3, r0, #32
 8013a34:	fa0c f303 	lsl.w	r3, ip, r3
 8013a38:	439a      	bics	r2, r3
 8013a3a:	f8ce 2004 	str.w	r2, [lr, #4]
 8013a3e:	3001      	adds	r0, #1
 8013a40:	4281      	cmp	r1, r0
 8013a42:	d1e7      	bne.n	8013a14 <llhwc_lst_clr+0x2c>
 8013a44:	bd80      	pop	{r7, pc}
	...

08013a48 <llhwc_get_ch_idx>:
 8013a48:	b5b0      	push	{r4, r5, r7, lr}
 8013a4a:	f04f 0c00 	mov.w	ip, #0
 8013a4e:	2200      	movs	r2, #0
 8013a50:	eb01 030c 	add.w	r3, r1, ip
 8013a54:	f893 e008 	ldrb.w	lr, [r3, #8]
 8013a58:	2300      	movs	r3, #0
 8013a5a:	bf00      	nop
 8013a5c:	fa2e f403 	lsr.w	r4, lr, r3
 8013a60:	07e4      	lsls	r4, r4, #31
 8013a62:	bf18      	it	ne
 8013a64:	3201      	addne	r2, #1
 8013a66:	3301      	adds	r3, #1
 8013a68:	2b08      	cmp	r3, #8
 8013a6a:	d1f7      	bne.n	8013a5c <llhwc_get_ch_idx+0x14>
 8013a6c:	f10c 0c01 	add.w	ip, ip, #1
 8013a70:	f1bc 0f05 	cmp.w	ip, #5
 8013a74:	d1ec      	bne.n	8013a50 <llhwc_get_ch_idx+0x8>
 8013a76:	7803      	ldrb	r3, [r0, #0]
 8013a78:	7884      	ldrb	r4, [r0, #2]
 8013a7a:	4423      	add	r3, r4
 8013a7c:	f641 34ad 	movw	r4, #7085	@ 0x1bad
 8013a80:	fb03 f404 	mul.w	r4, r3, r4
 8013a84:	ea4f 4c94 	mov.w	ip, r4, lsr #18
 8013a88:	2425      	movs	r4, #37	@ 0x25
 8013a8a:	fb0c 3314 	mls	r3, ip, r4, r3
 8013a8e:	b29c      	uxth	r4, r3
 8013a90:	7003      	strb	r3, [r0, #0]
 8013a92:	eb01 04d4 	add.w	r4, r1, r4, lsr #3
 8013a96:	7043      	strb	r3, [r0, #1]
 8013a98:	f894 c008 	ldrb.w	ip, [r4, #8]
 8013a9c:	f003 0407 	and.w	r4, r3, #7
 8013aa0:	fa2c f404 	lsr.w	r4, ip, r4
 8013aa4:	07e4      	lsls	r4, r4, #31
 8013aa6:	d12b      	bne.n	8013b00 <llhwc_get_ch_idx+0xb8>
 8013aa8:	b2db      	uxtb	r3, r3
 8013aaa:	b2d2      	uxtb	r2, r2
 8013aac:	fbb3 f4f2 	udiv	r4, r3, r2
 8013ab0:	f04f 0c00 	mov.w	ip, #0
 8013ab4:	fb04 3212 	mls	r2, r4, r2, r3
 8013ab8:	2300      	movs	r3, #0
 8013aba:	7042      	strb	r2, [r0, #1]
 8013abc:	3201      	adds	r2, #1
 8013abe:	fa5f fe82 	uxtb.w	lr, r2
 8013ac2:	eb01 020c 	add.w	r2, r1, ip
 8013ac6:	7a14      	ldrb	r4, [r2, #8]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	bf00      	nop
 8013acc:	fa24 f502 	lsr.w	r5, r4, r2
 8013ad0:	07ed      	lsls	r5, r5, #31
 8013ad2:	bf18      	it	ne
 8013ad4:	3301      	addne	r3, #1
 8013ad6:	b2dd      	uxtb	r5, r3
 8013ad8:	45ae      	cmp	lr, r5
 8013ada:	d00a      	beq.n	8013af2 <llhwc_get_ch_idx+0xaa>
 8013adc:	3201      	adds	r2, #1
 8013ade:	2a08      	cmp	r2, #8
 8013ae0:	d1f4      	bne.n	8013acc <llhwc_get_ch_idx+0x84>
 8013ae2:	f10c 0401 	add.w	r4, ip, #1
 8013ae6:	f1bc 0f04 	cmp.w	ip, #4
 8013aea:	46a4      	mov	ip, r4
 8013aec:	d3e9      	bcc.n	8013ac2 <llhwc_get_ch_idx+0x7a>
 8013aee:	2208      	movs	r2, #8
 8013af0:	e001      	b.n	8013af6 <llhwc_get_ch_idx+0xae>
 8013af2:	f10c 0401 	add.w	r4, ip, #1
 8013af6:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 8013afa:	f1a1 0308 	sub.w	r3, r1, #8
 8013afe:	7043      	strb	r3, [r0, #1]
 8013b00:	b2d8      	uxtb	r0, r3
 8013b02:	bdb0      	pop	{r4, r5, r7, pc}

08013b04 <llhwc_get_ch_idx_algo_2>:
 8013b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b08:	b084      	sub	sp, #16
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	f640 0754 	movw	r7, #2132	@ 0x854
 8013b10:	20a8      	movs	r0, #168	@ 0xa8
 8013b12:	4690      	mov	r8, r2
 8013b14:	460d      	mov	r5, r1
 8013b16:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8013b1a:	f007 ff47 	bl	801b9ac <bsp_debug_gpio_set>
 8013b1e:	2001      	movs	r0, #1
 8013b20:	2104      	movs	r1, #4
 8013b22:	2401      	movs	r4, #1
 8013b24:	f00c f8ae 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013b28:	f64f 402c 	movw	r0, #64556	@ 0xfc2c
 8013b2c:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8013b30:	5839      	ldr	r1, [r7, r0]
 8013b32:	2205      	movs	r2, #5
 8013b34:	f364 0102 	bfi	r1, r4, #0, #3
 8013b38:	5039      	str	r1, [r7, r0]
 8013b3a:	f106 0108 	add.w	r1, r6, #8
 8013b3e:	a802      	add	r0, sp, #8
 8013b40:	f00c fe80 	bl	8020844 <ble_memcpy>
 8013b44:	9802      	ldr	r0, [sp, #8]
 8013b46:	2202      	movs	r2, #2
 8013b48:	60f8      	str	r0, [r7, #12]
 8013b4a:	68b8      	ldr	r0, [r7, #8]
 8013b4c:	9903      	ldr	r1, [sp, #12]
 8013b4e:	0940      	lsrs	r0, r0, #5
 8013b50:	f360 115f 	bfi	r1, r0, #5, #27
 8013b54:	60b9      	str	r1, [r7, #8]
 8013b56:	6870      	ldr	r0, [r6, #4]
 8013b58:	2600      	movs	r6, #0
 8013b5a:	6038      	str	r0, [r7, #0]
 8013b5c:	68b8      	ldr	r0, [r7, #8]
 8013b5e:	f640 0174 	movw	r1, #2164	@ 0x874
 8013b62:	f36f 1054 	bfc	r0, #5, #16
 8013b66:	ea40 1045 	orr.w	r0, r0, r5, lsl #5
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	60b8      	str	r0, [r7, #8]
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8013b74:	6078      	str	r0, [r7, #4]
 8013b76:	69b8      	ldr	r0, [r7, #24]
 8013b78:	f040 0001 	orr.w	r0, r0, #1
 8013b7c:	61b8      	str	r0, [r7, #24]
 8013b7e:	20c8      	movs	r0, #200	@ 0xc8
 8013b80:	9600      	str	r6, [sp, #0]
 8013b82:	f00b f8ff 	bl	801ed84 <llhwc_polling>
 8013b86:	4605      	mov	r5, r0
 8013b88:	b980      	cbnz	r0, 8013bac <llhwc_get_ch_idx_algo_2+0xa8>
 8013b8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b8c:	f040 0002 	orr.w	r0, r0, #2
 8013b90:	6278      	str	r0, [r7, #36]	@ 0x24
 8013b92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b94:	f020 0002 	bic.w	r0, r0, #2
 8013b98:	6278      	str	r0, [r7, #36]	@ 0x24
 8013b9a:	69b8      	ldr	r0, [r7, #24]
 8013b9c:	f020 0001 	bic.w	r0, r0, #1
 8013ba0:	61b8      	str	r0, [r7, #24]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f3c0 20c5 	ubfx	r0, r0, #11, #6
 8013ba8:	f888 0000 	strb.w	r0, [r8]
 8013bac:	2000      	movs	r0, #0
 8013bae:	2104      	movs	r1, #4
 8013bb0:	f00c f868 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013bb4:	20a8      	movs	r0, #168	@ 0xa8
 8013bb6:	f007 fefb 	bl	801b9b0 <bsp_debug_gpio_clear>
 8013bba:	4628      	mov	r0, r5
 8013bbc:	b004      	add	sp, #16
 8013bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bc2 <llhwc_lst_search>:
 8013bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc6:	b087      	sub	sp, #28
 8013bc8:	f247 3530 	movw	r5, #29488	@ 0x7330
 8013bcc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8013bd0:	8fac      	ldrh	r4, [r5, #60]	@ 0x3c
 8013bd2:	8f6e      	ldrh	r6, [r5, #58]	@ 0x3a
 8013bd4:	4699      	mov	r9, r3
 8013bd6:	4617      	mov	r7, r2
 8013bd8:	468b      	mov	fp, r1
 8013bda:	4682      	mov	sl, r0
 8013bdc:	f007 feff 	bl	801b9de <os_disable_isr>
 8013be0:	f00a fe8e 	bl	801e900 <llhwc_cmn_is_dp_slp_enabled>
 8013be4:	b120      	cbz	r0, 8013bf0 <llhwc_lst_search+0x2e>
 8013be6:	2043      	movs	r0, #67	@ 0x43
 8013be8:	f007 fee4 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8013bec:	240c      	movs	r4, #12
 8013bee:	e084      	b.n	8013cfa <llhwc_lst_search+0x138>
 8013bf0:	f00b fc9b 	bl	801f52a <get_pwr_domain>
 8013bf4:	4680      	mov	r8, r0
 8013bf6:	2805      	cmp	r0, #5
 8013bf8:	d107      	bne.n	8013c0a <llhwc_lst_search+0x48>
 8013bfa:	f00b fd12 	bl	801f622 <llhwc_wait_for_evnt_on_air>
 8013bfe:	fab0 f080 	clz	r0, r0
 8013c02:	0940      	lsrs	r0, r0, #5
 8013c04:	2101      	movs	r1, #1
 8013c06:	f007 fe8a 	bl	801b91e <bsp_assert>
 8013c0a:	f895 0038 	ldrb.w	r0, [r5, #56]	@ 0x38
 8013c0e:	2804      	cmp	r0, #4
 8013c10:	d117      	bne.n	8013c42 <llhwc_lst_search+0x80>
 8013c12:	ea46 4004 	orr.w	r0, r6, r4, lsl #16
 8013c16:	ae02      	add	r6, sp, #8
 8013c18:	f10d 021b 	add.w	r2, sp, #27
 8013c1c:	f10d 031a 	add.w	r3, sp, #26
 8013c20:	2101      	movs	r1, #1
 8013c22:	9600      	str	r6, [sp, #0]
 8013c24:	f00b fc99 	bl	801f55a <llhwc_cmn_set_phy>
 8013c28:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8013c2c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8013c30:	f000 000f 	and.w	r0, r0, #15
 8013c34:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8013c38:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 8013c3c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013c40:	7448      	strb	r0, [r1, #17]
 8013c42:	2002      	movs	r0, #2
 8013c44:	f00a fe30 	bl	801e8a8 <llhwc_pwr_switch>
 8013c48:	4604      	mov	r4, r0
 8013c4a:	2800      	cmp	r0, #0
 8013c4c:	d155      	bne.n	8013cfa <llhwc_lst_search+0x138>
 8013c4e:	f7ff fe69 	bl	8013924 <llhwc_updt_lst_ofsts>
 8013c52:	4604      	mov	r4, r0
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d150      	bne.n	8013cfa <llhwc_lst_search+0x138>
 8013c58:	f640 0540 	movw	r5, #2112	@ 0x840
 8013c5c:	2001      	movs	r0, #1
 8013c5e:	2103      	movs	r1, #3
 8013c60:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8013c64:	f00c f80e 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013c68:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8013c6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013c70:	f36a 0002 	bfi	r0, sl, #0, #3
 8013c74:	f845 0c08 	str.w	r0, [r5, #-8]
 8013c78:	68e8      	ldr	r0, [r5, #12]
 8013c7a:	797a      	ldrb	r2, [r7, #5]
 8013c7c:	4388      	bics	r0, r1
 8013c7e:	7939      	ldrb	r1, [r7, #4]
 8013c80:	2300      	movs	r3, #0
 8013c82:	4408      	add	r0, r1
 8013c84:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8013c88:	60e8      	str	r0, [r5, #12]
 8013c8a:	7838      	ldrb	r0, [r7, #0]
 8013c8c:	7879      	ldrb	r1, [r7, #1]
 8013c8e:	78ba      	ldrb	r2, [r7, #2]
 8013c90:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8013c94:	78f9      	ldrb	r1, [r7, #3]
 8013c96:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8013c9a:	2700      	movs	r7, #0
 8013c9c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8013ca0:	f640 0174 	movw	r1, #2164	@ 0x874
 8013ca4:	6128      	str	r0, [r5, #16]
 8013ca6:	68e8      	ldr	r0, [r5, #12]
 8013ca8:	2201      	movs	r2, #1
 8013caa:	f36b 4010 	bfi	r0, fp, #16, #1
 8013cae:	60e8      	str	r0, [r5, #12]
 8013cb0:	6828      	ldr	r0, [r5, #0]
 8013cb2:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8013cb6:	6028      	str	r0, [r5, #0]
 8013cb8:	20c8      	movs	r0, #200	@ 0xc8
 8013cba:	9700      	str	r7, [sp, #0]
 8013cbc:	f00b f862 	bl	801ed84 <llhwc_polling>
 8013cc0:	b9b0      	cbnz	r0, 8013cf0 <llhwc_lst_search+0x12e>
 8013cc2:	f1b9 0f00 	cmp.w	r9, #0
 8013cc6:	d004      	beq.n	8013cd2 <llhwc_lst_search+0x110>
 8013cc8:	6828      	ldr	r0, [r5, #0]
 8013cca:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8013cce:	f889 0000 	strb.w	r0, [r9]
 8013cd2:	6828      	ldr	r0, [r5, #0]
 8013cd4:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8013cd8:	6028      	str	r0, [r5, #0]
 8013cda:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013cdc:	f040 0001 	orr.w	r0, r0, #1
 8013ce0:	63a8      	str	r0, [r5, #56]	@ 0x38
 8013ce2:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013ce4:	f020 0001 	bic.w	r0, r0, #1
 8013ce8:	63a8      	str	r0, [r5, #56]	@ 0x38
 8013cea:	4640      	mov	r0, r8
 8013cec:	f00a fddc 	bl	801e8a8 <llhwc_pwr_switch>
 8013cf0:	4604      	mov	r4, r0
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	2103      	movs	r1, #3
 8013cf6:	f00b ffc5 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013cfa:	f007 fe72 	bl	801b9e2 <os_enable_isr>
 8013cfe:	4620      	mov	r0, r4
 8013d00:	b007      	add	sp, #28
 8013d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013d08 <llhwc_lst_add_rmv_dev>:
 8013d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d0c:	b087      	sub	sp, #28
 8013d0e:	469a      	mov	sl, r3
 8013d10:	4693      	mov	fp, r2
 8013d12:	460e      	mov	r6, r1
 8013d14:	b1b8      	cbz	r0, 8013d46 <llhwc_lst_add_rmv_dev+0x3e>
 8013d16:	f248 19e8 	movw	r9, #33256	@ 0x81e8
 8013d1a:	f247 3530 	movw	r5, #29488	@ 0x7330
 8013d1e:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8013d22:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8013d26:	f8d9 0000 	ldr.w	r0, [r9]
 8013d2a:	8faf      	ldrh	r7, [r5, #60]	@ 0x3c
 8013d2c:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
 8013d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8013d32:	f007 fe58 	bl	801b9e6 <os_rcrsv_mutex_wait>
 8013d36:	f00a fde3 	bl	801e900 <llhwc_cmn_is_dp_slp_enabled>
 8013d3a:	b370      	cbz	r0, 8013d9a <llhwc_lst_add_rmv_dev+0x92>
 8013d3c:	2043      	movs	r0, #67	@ 0x43
 8013d3e:	f007 fe39 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8013d42:	270c      	movs	r7, #12
 8013d44:	e0b2      	b.n	8013eac <llhwc_lst_add_rmv_dev+0x1a4>
 8013d46:	f24e 2138 	movw	r1, #57912	@ 0xe238
 8013d4a:	f6c0 0102 	movt	r1, #2050	@ 0x802
 8013d4e:	eb01 0286 	add.w	r2, r1, r6, lsl #2
 8013d52:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8013d56:	f248 0c00 	movw	ip, #32768	@ 0x8000
 8013d5a:	6852      	ldr	r2, [r2, #4]
 8013d5c:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 8013d60:	0849      	lsrs	r1, r1, #1
 8013d62:	f8dc 31f8 	ldr.w	r3, [ip, #504]	@ 0x1f8
 8013d66:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
 8013d6a:	f8dc 01fc 	ldr.w	r0, [ip, #508]	@ 0x1fc
 8013d6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013d72:	f080 80ab 	bcs.w	8013ecc <llhwc_lst_add_rmv_dev+0x1c4>
 8013d76:	2501      	movs	r5, #1
 8013d78:	f1b1 0420 	subs.w	r4, r1, #32
 8013d7c:	4607      	mov	r7, r0
 8013d7e:	bf3c      	itt	cc
 8013d80:	461f      	movcc	r7, r3
 8013d82:	460c      	movcc	r4, r1
 8013d84:	fa05 f404 	lsl.w	r4, r5, r4
 8013d88:	ea67 0704 	orn	r7, r7, r4
 8013d8c:	3701      	adds	r7, #1
 8013d8e:	f040 8092 	bne.w	8013eb6 <llhwc_lst_add_rmv_dev+0x1ae>
 8013d92:	3101      	adds	r1, #1
 8013d94:	428a      	cmp	r2, r1
 8013d96:	d1ef      	bne.n	8013d78 <llhwc_lst_add_rmv_dev+0x70>
 8013d98:	e09a      	b.n	8013ed0 <llhwc_lst_add_rmv_dev+0x1c8>
 8013d9a:	f00b fc42 	bl	801f622 <llhwc_wait_for_evnt_on_air>
 8013d9e:	fab0 f080 	clz	r0, r0
 8013da2:	0940      	lsrs	r0, r0, #5
 8013da4:	2101      	movs	r1, #1
 8013da6:	f007 fdba 	bl	801b91e <bsp_assert>
 8013daa:	f00b fbbe 	bl	801f52a <get_pwr_domain>
 8013dae:	4680      	mov	r8, r0
 8013db0:	2805      	cmp	r0, #5
 8013db2:	d107      	bne.n	8013dc4 <llhwc_lst_add_rmv_dev+0xbc>
 8013db4:	f00b fc35 	bl	801f622 <llhwc_wait_for_evnt_on_air>
 8013db8:	fab0 f080 	clz	r0, r0
 8013dbc:	0940      	lsrs	r0, r0, #5
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	f007 fdad 	bl	801b91e <bsp_assert>
 8013dc4:	f895 0038 	ldrb.w	r0, [r5, #56]	@ 0x38
 8013dc8:	2804      	cmp	r0, #4
 8013dca:	d117      	bne.n	8013dfc <llhwc_lst_add_rmv_dev+0xf4>
 8013dcc:	ea44 4007 	orr.w	r0, r4, r7, lsl #16
 8013dd0:	af02      	add	r7, sp, #8
 8013dd2:	f10d 021b 	add.w	r2, sp, #27
 8013dd6:	f10d 031a 	add.w	r3, sp, #26
 8013dda:	2101      	movs	r1, #1
 8013ddc:	9700      	str	r7, [sp, #0]
 8013dde:	f00b fbbc 	bl	801f55a <llhwc_cmn_set_phy>
 8013de2:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8013de6:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8013dea:	f000 000f 	and.w	r0, r0, #15
 8013dee:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8013df2:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 8013df6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8013dfa:	7448      	strb	r0, [r1, #17]
 8013dfc:	2002      	movs	r0, #2
 8013dfe:	f00a fd53 	bl	801e8a8 <llhwc_pwr_switch>
 8013e02:	4607      	mov	r7, r0
 8013e04:	2800      	cmp	r0, #0
 8013e06:	d151      	bne.n	8013eac <llhwc_lst_add_rmv_dev+0x1a4>
 8013e08:	f7ff fd8c 	bl	8013924 <llhwc_updt_lst_ofsts>
 8013e0c:	4607      	mov	r7, r0
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d14c      	bne.n	8013eac <llhwc_lst_add_rmv_dev+0x1a4>
 8013e12:	f640 0438 	movw	r4, #2104	@ 0x838
 8013e16:	2001      	movs	r0, #1
 8013e18:	2103      	movs	r1, #3
 8013e1a:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8013e1e:	f00b ff31 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013e22:	6820      	ldr	r0, [r4, #0]
 8013e24:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013e28:	f366 0002 	bfi	r0, r6, #0, #3
 8013e2c:	6020      	str	r0, [r4, #0]
 8013e2e:	6960      	ldr	r0, [r4, #20]
 8013e30:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8013e34:	4388      	bics	r0, r1
 8013e36:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8013e3a:	2700      	movs	r7, #0
 8013e3c:	4408      	add	r0, r1
 8013e3e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8013e42:	2300      	movs	r3, #0
 8013e44:	6160      	str	r0, [r4, #20]
 8013e46:	f89a 0000 	ldrb.w	r0, [sl]
 8013e4a:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8013e4e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8013e52:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8013e56:	f89a 1003 	ldrb.w	r1, [sl, #3]
 8013e5a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8013e5e:	2201      	movs	r2, #1
 8013e60:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8013e64:	f640 0174 	movw	r1, #2164	@ 0x874
 8013e68:	61a0      	str	r0, [r4, #24]
 8013e6a:	6960      	ldr	r0, [r4, #20]
 8013e6c:	f36b 4010 	bfi	r0, fp, #16, #1
 8013e70:	6160      	str	r0, [r4, #20]
 8013e72:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013e74:	f040 0002 	orr.w	r0, r0, #2
 8013e78:	6360      	str	r0, [r4, #52]	@ 0x34
 8013e7a:	20c8      	movs	r0, #200	@ 0xc8
 8013e7c:	9700      	str	r7, [sp, #0]
 8013e7e:	f00a ff81 	bl	801ed84 <llhwc_polling>
 8013e82:	b970      	cbnz	r0, 8013ea2 <llhwc_lst_add_rmv_dev+0x19a>
 8013e84:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013e86:	f040 0001 	orr.w	r0, r0, #1
 8013e8a:	6420      	str	r0, [r4, #64]	@ 0x40
 8013e8c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8013e8e:	f020 0001 	bic.w	r0, r0, #1
 8013e92:	6420      	str	r0, [r4, #64]	@ 0x40
 8013e94:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8013e96:	f020 0002 	bic.w	r0, r0, #2
 8013e9a:	6360      	str	r0, [r4, #52]	@ 0x34
 8013e9c:	4640      	mov	r0, r8
 8013e9e:	f00a fd03 	bl	801e8a8 <llhwc_pwr_switch>
 8013ea2:	4607      	mov	r7, r0
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	2103      	movs	r1, #3
 8013ea8:	f00b feec 	bl	801fc84 <llhwc_cmn_control_aclk>
 8013eac:	f8d9 0000 	ldr.w	r0, [r9]
 8013eb0:	f007 fd9f 	bl	801b9f2 <os_rcrsv_mutex_release>
 8013eb4:	e03b      	b.n	8013f2e <llhwc_lst_add_rmv_dev+0x226>
 8013eb6:	f44f 70fe 	mov.w	r0, #508	@ 0x1fc
 8013eba:	2920      	cmp	r1, #32
 8013ebc:	bf38      	it	cc
 8013ebe:	f44f 70fc 	movcc.w	r0, #504	@ 0x1f8
 8013ec2:	f85c 3000 	ldr.w	r3, [ip, r0]
 8013ec6:	4323      	orrs	r3, r4
 8013ec8:	f84c 3000 	str.w	r3, [ip, r0]
 8013ecc:	4291      	cmp	r1, r2
 8013ece:	d104      	bne.n	8013eda <llhwc_lst_add_rmv_dev+0x1d2>
 8013ed0:	2042      	movs	r0, #66	@ 0x42
 8013ed2:	f007 fd6f 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8013ed6:	2707      	movs	r7, #7
 8013ed8:	e029      	b.n	8013f2e <llhwc_lst_add_rmv_dev+0x226>
 8013eda:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013edc:	2e06      	cmp	r6, #6
 8013ede:	d100      	bne.n	8013ee2 <llhwc_lst_add_rmv_dev+0x1da>
 8013ee0:	b91a      	cbnz	r2, 8013eea <llhwc_lst_add_rmv_dev+0x1e2>
 8013ee2:	1ef0      	subs	r0, r6, #3
 8013ee4:	2801      	cmp	r0, #1
 8013ee6:	d802      	bhi.n	8013eee <llhwc_lst_add_rmv_dev+0x1e6>
 8013ee8:	b10a      	cbz	r2, 8013eee <llhwc_lst_add_rmv_dev+0x1e6>
 8013eea:	0048      	lsls	r0, r1, #1
 8013eec:	7010      	strb	r0, [r2, #0]
 8013eee:	f89a 0000 	ldrb.w	r0, [sl]
 8013ef2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013ef6:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8013efa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8013efe:	f89a 2003 	ldrb.w	r2, [sl, #3]
 8013f02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8013f06:	f1bb 0f01 	cmp.w	fp, #1
 8013f0a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8013f0e:	f04f 0700 	mov.w	r7, #0
 8013f12:	f84c 0031 	str.w	r0, [ip, r1, lsl #3]
 8013f16:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8013f1a:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8013f1e:	eb0c 01c1 	add.w	r1, ip, r1, lsl #3
 8013f22:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8013f26:	bf08      	it	eq
 8013f28:	f500 3080 	addeq.w	r0, r0, #65536	@ 0x10000
 8013f2c:	6048      	str	r0, [r1, #4]
 8013f2e:	4638      	mov	r0, r7
 8013f30:	b007      	add	sp, #28
 8013f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f36 <llhwc_lst_rmv_rand_add>:
 8013f36:	b570      	push	{r4, r5, r6, lr}
 8013f38:	b082      	sub	sp, #8
 8013f3a:	460e      	mov	r6, r1
 8013f3c:	4605      	mov	r5, r0
 8013f3e:	a801      	add	r0, sp, #4
 8013f40:	2101      	movs	r1, #1
 8013f42:	f007 fd0a 	bl	801b95a <gen_rnd_num>
 8013f46:	2d02      	cmp	r5, #2
 8013f48:	d011      	beq.n	8013f6e <llhwc_lst_rmv_rand_add+0x38>
 8013f4a:	2d03      	cmp	r5, #3
 8013f4c:	d01e      	beq.n	8013f8c <llhwc_lst_rmv_rand_add+0x56>
 8013f4e:	2d04      	cmp	r5, #4
 8013f50:	d12c      	bne.n	8013fac <llhwc_lst_rmv_rand_add+0x76>
 8013f52:	9801      	ldr	r0, [sp, #4]
 8013f54:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 8013f58:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8013f5c:	fba0 1201 	umull	r1, r2, r0, r1
 8013f60:	0891      	lsrs	r1, r2, #2
 8013f62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013f66:	1a40      	subs	r0, r0, r1
 8013f68:	f100 012d 	add.w	r1, r0, #45	@ 0x2d
 8013f6c:	e01c      	b.n	8013fa8 <llhwc_lst_rmv_rand_add+0x72>
 8013f6e:	9801      	ldr	r0, [sp, #4]
 8013f70:	f648 0189 	movw	r1, #34953	@ 0x8889
 8013f74:	f6c8 0188 	movt	r1, #34952	@ 0x8888
 8013f78:	fba0 1201 	umull	r1, r2, r0, r1
 8013f7c:	08d1      	lsrs	r1, r2, #3
 8013f7e:	0109      	lsls	r1, r1, #4
 8013f80:	eba1 01d2 	sub.w	r1, r1, r2, lsr #3
 8013f84:	1a40      	subs	r0, r0, r1
 8013f86:	f100 0114 	add.w	r1, r0, #20
 8013f8a:	e00d      	b.n	8013fa8 <llhwc_lst_rmv_rand_add+0x72>
 8013f8c:	9801      	ldr	r0, [sp, #4]
 8013f8e:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 8013f92:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8013f96:	fba0 1201 	umull	r1, r2, r0, r1
 8013f9a:	08d1      	lsrs	r1, r2, #3
 8013f9c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8013fa0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8013fa4:	f100 0123 	add.w	r1, r0, #35	@ 0x23
 8013fa8:	2000      	movs	r0, #0
 8013faa:	e001      	b.n	8013fb0 <llhwc_lst_rmv_rand_add+0x7a>
 8013fac:	9901      	ldr	r1, [sp, #4]
 8013fae:	201f      	movs	r0, #31
 8013fb0:	f248 13f8 	movw	r3, #33272	@ 0x81f8
 8013fb4:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 8013fb8:	f011 02e0 	ands.w	r2, r1, #224	@ 0xe0
 8013fbc:	f103 0304 	add.w	r3, r3, #4
 8013fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8013fc4:	bf12      	itee	ne
 8013fc6:	31e0      	addne	r1, #224	@ 0xe0
 8013fc8:	f248 13f8 	movweq	r3, #33272	@ 0x81f8
 8013fcc:	f6c4 0302 	movteq	r3, #18434	@ 0x4802
 8013fd0:	681d      	ldr	r5, [r3, #0]
 8013fd2:	b2c9      	uxtb	r1, r1
 8013fd4:	2401      	movs	r4, #1
 8013fd6:	fa04 f101 	lsl.w	r1, r4, r1
 8013fda:	ea25 0101 	bic.w	r1, r5, r1
 8013fde:	6019      	str	r1, [r3, #0]
 8013fe0:	6032      	str	r2, [r6, #0]
 8013fe2:	b002      	add	sp, #8
 8013fe4:	bd70      	pop	{r4, r5, r6, pc}

08013fe6 <llhwc_gen_rnd_num>:
 8013fe6:	b580      	push	{r7, lr}
 8013fe8:	f007 fcb7 	bl	801b95a <gen_rnd_num>
 8013fec:	2000      	movs	r0, #0
 8013fee:	bd80      	pop	{r7, pc}

08013ff0 <llhwc_lst_rmv_by_loc>:
 8013ff0:	f248 12f8 	movw	r2, #33272	@ 0x81f8
 8013ff4:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 8013ff8:	f1b0 0120 	subs.w	r1, r0, #32
 8013ffc:	f102 0204 	add.w	r2, r2, #4
 8014000:	bf3e      	ittt	cc
 8014002:	4601      	movcc	r1, r0
 8014004:	f248 12f8 	movwcc	r2, #33272	@ 0x81f8
 8014008:	f6c4 0202 	movtcc	r2, #18434	@ 0x4802
 801400c:	6810      	ldr	r0, [r2, #0]
 801400e:	b2c9      	uxtb	r1, r1
 8014010:	2301      	movs	r3, #1
 8014012:	fa03 f101 	lsl.w	r1, r3, r1
 8014016:	4388      	bics	r0, r1
 8014018:	6010      	str	r0, [r2, #0]
 801401a:	4770      	bx	lr

0801401c <llhwc_lst_read_indicators>:
 801401c:	f248 0104 	movw	r1, #32772	@ 0x8004
 8014020:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8014024:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8014028:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801402c:	4770      	bx	lr

0801402e <llhwc_lst_edit_indicators>:
 801402e:	b5b0      	push	{r4, r5, r7, lr}
 8014030:	f248 0c04 	movw	ip, #32772	@ 0x8004
 8014034:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 8014038:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
 801403c:	f1c0 0313 	rsb	r3, r0, #19
 8014040:	2401      	movs	r4, #1
 8014042:	fa04 f503 	lsl.w	r5, r4, r3
 8014046:	4394      	bics	r4, r2
 8014048:	ea2e 0505 	bic.w	r5, lr, r5
 801404c:	fa04 f303 	lsl.w	r3, r4, r3
 8014050:	432b      	orrs	r3, r5
 8014052:	2806      	cmp	r0, #6
 8014054:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
 8014058:	bf18      	it	ne
 801405a:	bdb0      	popne	{r4, r5, r7, pc}
 801405c:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 8014060:	43d2      	mvns	r2, r2
 8014062:	f362 5014 	bfi	r0, r2, #20, #1
 8014066:	f84c 0021 	str.w	r0, [ip, r1, lsl #2]
 801406a:	bdb0      	pop	{r4, r5, r7, pc}

0801406c <llhwc_init>:
 801406c:	b5b0      	push	{r4, r5, r7, lr}
 801406e:	f243 3145 	movw	r1, #13125	@ 0x3345
 8014072:	f6c0 0101 	movt	r1, #2049	@ 0x801
 8014076:	2001      	movs	r0, #1
 8014078:	2501      	movs	r5, #1
 801407a:	f00b fa5d 	bl	801f538 <llhwc_cmn_reg_isr>
 801407e:	f243 51fd 	movw	r1, #13821	@ 0x35fd
 8014082:	f6c0 0101 	movt	r1, #2049	@ 0x801
 8014086:	2002      	movs	r0, #2
 8014088:	f00b fa56 	bl	801f538 <llhwc_cmn_reg_isr>
 801408c:	f646 5058 	movw	r0, #27992	@ 0x6d58
 8014090:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014094:	2100      	movs	r1, #0
 8014096:	6341      	str	r1, [r0, #52]	@ 0x34
 8014098:	8741      	strh	r1, [r0, #58]	@ 0x3a
 801409a:	63c1      	str	r1, [r0, #60]	@ 0x3c
 801409c:	f7ff fb82 	bl	80137a4 <llhwc_reset>
 80140a0:	f243 11f5 	movw	r1, #12789	@ 0x31f5
 80140a4:	4604      	mov	r4, r0
 80140a6:	f6c0 0101 	movt	r1, #2049	@ 0x801
 80140aa:	2000      	movs	r0, #0
 80140ac:	f00b faaa 	bl	801f604 <llhwc_rgstr_func>
 80140b0:	f244 01d7 	movw	r1, #16599	@ 0x40d7
 80140b4:	f6c0 0101 	movt	r1, #2049	@ 0x801
 80140b8:	2003      	movs	r0, #3
 80140ba:	f00b faa3 	bl	801f604 <llhwc_rgstr_func>
 80140be:	f240 4080 	movw	r0, #1152	@ 0x480
 80140c2:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80140c6:	6801      	ldr	r1, [r0, #0]
 80140c8:	f365 0102 	bfi	r1, r5, #0, #3
 80140cc:	6001      	str	r1, [r0, #0]
 80140ce:	f000 f855 	bl	801417c <llhwc_init_empty_pkts>
 80140d2:	4620      	mov	r0, r4
 80140d4:	bdb0      	pop	{r4, r5, r7, pc}

080140d6 <llhwc_recover_from_dp_slp>:
 80140d6:	b5b0      	push	{r4, r5, r7, lr}
 80140d8:	f640 040c 	movw	r4, #2060	@ 0x80c
 80140dc:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 80140e0:	f007 fc7d 	bl	801b9de <os_disable_isr>
 80140e4:	f008 f936 	bl	801c354 <llhwc_phy_set_cfg_time>
 80140e8:	f640 007c 	movw	r0, #2172	@ 0x87c
 80140ec:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80140f0:	f04f 31ff 	mov.w	r1, #4294967295
 80140f4:	6001      	str	r1, [r0, #0]
 80140f6:	6801      	ldr	r1, [r0, #0]
 80140f8:	f64f 455c 	movw	r5, #64604	@ 0xfc5c
 80140fc:	f041 0101 	orr.w	r1, r1, #1
 8014100:	6001      	str	r1, [r0, #0]
 8014102:	6801      	ldr	r1, [r0, #0]
 8014104:	f6cf 75ff 	movt	r5, #65535	@ 0xffff
 8014108:	f041 0102 	orr.w	r1, r1, #2
 801410c:	6001      	str	r1, [r0, #0]
 801410e:	6801      	ldr	r1, [r0, #0]
 8014110:	f021 0104 	bic.w	r1, r1, #4
 8014114:	6001      	str	r1, [r0, #0]
 8014116:	6801      	ldr	r1, [r0, #0]
 8014118:	f021 0108 	bic.w	r1, r1, #8
 801411c:	6001      	str	r1, [r0, #0]
 801411e:	f64f 403c 	movw	r0, #64572	@ 0xfc3c
 8014122:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8014126:	5821      	ldr	r1, [r4, r0]
 8014128:	f021 0110 	bic.w	r1, r1, #16
 801412c:	5021      	str	r1, [r4, r0]
 801412e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8014130:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8014134:	6360      	str	r0, [r4, #52]	@ 0x34
 8014136:	6820      	ldr	r0, [r4, #0]
 8014138:	f020 5080 	bic.w	r0, r0, #268435456	@ 0x10000000
 801413c:	6020      	str	r0, [r4, #0]
 801413e:	6960      	ldr	r0, [r4, #20]
 8014140:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8014144:	6160      	str	r0, [r4, #20]
 8014146:	5960      	ldr	r0, [r4, r5]
 8014148:	f020 0018 	bic.w	r0, r0, #24
 801414c:	5160      	str	r0, [r4, r5]
 801414e:	f7ff fbe9 	bl	8013924 <llhwc_updt_lst_ofsts>
 8014152:	b918      	cbnz	r0, 801415c <llhwc_recover_from_dp_slp+0x86>
 8014154:	5960      	ldr	r0, [r4, r5]
 8014156:	f020 0001 	bic.w	r0, r0, #1
 801415a:	5160      	str	r0, [r4, r5]
 801415c:	f007 fc41 	bl	801b9e2 <os_enable_isr>
 8014160:	f646 5058 	movw	r0, #27992	@ 0x6d58
 8014164:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014168:	7e80      	ldrb	r0, [r0, #26]
 801416a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801416c:	2801      	cmp	r0, #1
 801416e:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 8014172:	bf18      	it	ne
 8014174:	f501 4100 	addne.w	r1, r1, #32768	@ 0x8000
 8014178:	6361      	str	r1, [r4, #52]	@ 0x34
 801417a:	bdb0      	pop	{r4, r5, r7, pc}

0801417c <llhwc_init_empty_pkts>:
 801417c:	b5b0      	push	{r4, r5, r7, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	f248 2400 	movw	r4, #33280	@ 0x8200
 8014184:	2001      	movs	r0, #1
 8014186:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 801418a:	9001      	str	r0, [sp, #4]
 801418c:	4620      	mov	r0, r4
 801418e:	2100      	movs	r1, #0
 8014190:	2204      	movs	r2, #4
 8014192:	f00c fba7 	bl	80208e4 <ble_memset>
 8014196:	f248 2008 	movw	r0, #33288	@ 0x8208
 801419a:	8020      	strh	r0, [r4, #0]
 801419c:	78e0      	ldrb	r0, [r4, #3]
 801419e:	ad01      	add	r5, sp, #4
 80141a0:	f040 0004 	orr.w	r0, r0, #4
 80141a4:	70e0      	strb	r0, [r4, #3]
 80141a6:	1d20      	adds	r0, r4, #4
 80141a8:	4629      	mov	r1, r5
 80141aa:	2204      	movs	r2, #4
 80141ac:	f00c fb4a 	bl	8020844 <ble_memcpy>
 80141b0:	f104 0008 	add.w	r0, r4, #8
 80141b4:	2100      	movs	r1, #0
 80141b6:	2204      	movs	r2, #4
 80141b8:	f00c fb94 	bl	80208e4 <ble_memset>
 80141bc:	f44f 4002 	mov.w	r0, #33280	@ 0x8200
 80141c0:	8120      	strh	r0, [r4, #8]
 80141c2:	7ae0      	ldrb	r0, [r4, #11]
 80141c4:	4629      	mov	r1, r5
 80141c6:	f040 0014 	orr.w	r0, r0, #20
 80141ca:	72e0      	strb	r0, [r4, #11]
 80141cc:	f104 000c 	add.w	r0, r4, #12
 80141d0:	2204      	movs	r2, #4
 80141d2:	f00c fb37 	bl	8020844 <ble_memcpy>
 80141d6:	b002      	add	sp, #8
 80141d8:	bdb0      	pop	{r4, r5, r7, pc}

080141da <llhwc_rgstr_evnt_schdlr_cb>:
 80141da:	f646 5158 	movw	r1, #27992	@ 0x6d58
 80141de:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80141e2:	6108      	str	r0, [r1, #16]
 80141e4:	4770      	bx	lr

080141e6 <llhwc_128_encrypt>:
 80141e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141e8:	b087      	sub	sp, #28
 80141ea:	4614      	mov	r4, r2
 80141ec:	460d      	mov	r5, r1
 80141ee:	4601      	mov	r1, r0
 80141f0:	4610      	mov	r0, r2
 80141f2:	2210      	movs	r2, #16
 80141f4:	2710      	movs	r7, #16
 80141f6:	f00c fb25 	bl	8020844 <ble_memcpy>
 80141fa:	2002      	movs	r0, #2
 80141fc:	2100      	movs	r1, #0
 80141fe:	2601      	movs	r6, #1
 8014200:	e9cd 1700 	strd	r1, r7, [sp]
 8014204:	9004      	str	r0, [sp, #16]
 8014206:	4620      	mov	r0, r4
 8014208:	4629      	mov	r1, r5
 801420a:	2200      	movs	r2, #0
 801420c:	2300      	movs	r3, #0
 801420e:	e9cd 6602 	strd	r6, r6, [sp, #8]
 8014212:	9605      	str	r6, [sp, #20]
 8014214:	f00b fa5e 	bl	801f6d4 <llhwc_cmn_crypto>
 8014218:	b007      	add	sp, #28
 801421a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801421c <llhwc_128_encrypt_arbitrator>:
 801421c:	b5b0      	push	{r4, r5, r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	4614      	mov	r4, r2
 8014222:	460d      	mov	r5, r1
 8014224:	4601      	mov	r1, r0
 8014226:	4610      	mov	r0, r2
 8014228:	2210      	movs	r2, #16
 801422a:	f00c fb0b 	bl	8020844 <ble_memcpy>
 801422e:	f04f 0c01 	mov.w	ip, #1
 8014232:	4620      	mov	r0, r4
 8014234:	4629      	mov	r1, r5
 8014236:	2201      	movs	r2, #1
 8014238:	2301      	movs	r3, #1
 801423a:	f8cd c000 	str.w	ip, [sp]
 801423e:	f00b fda1 	bl	801fd84 <llhwc_cmn_crypto_blk_mod>
 8014242:	b002      	add	sp, #8
 8014244:	bdb0      	pop	{r4, r5, r7, pc}

08014246 <llhwc_is_dtm_enabled>:
 8014246:	f646 5058 	movw	r0, #27992	@ 0x6d58
 801424a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801424e:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8014252:	380c      	subs	r0, #12
 8014254:	bf18      	it	ne
 8014256:	2001      	movne	r0, #1
 8014258:	4770      	bx	lr

0801425a <llhwc_stp_dtm>:
 801425a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	f646 5558 	movw	r5, #27992	@ 0x6d58
 8014264:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8014268:	4604      	mov	r4, r0
 801426a:	4628      	mov	r0, r5
 801426c:	f00c f9a0 	bl	80205b0 <llhwc_cmn_get_desc>
 8014270:	4606      	mov	r6, r0
 8014272:	2000      	movs	r0, #0
 8014274:	9003      	str	r0, [sp, #12]
 8014276:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801427a:	4630      	mov	r0, r6
 801427c:	2101      	movs	r1, #1
 801427e:	2e00      	cmp	r6, #0
 8014280:	bf18      	it	ne
 8014282:	2001      	movne	r0, #1
 8014284:	f007 fb4b 	bl	801b91e <bsp_assert>
 8014288:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 801428c:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8014290:	f8d8 0000 	ldr.w	r0, [r8]
 8014294:	f04f 31ff 	mov.w	r1, #4294967295
 8014298:	f007 fba5 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801429c:	f895 002c 	ldrb.w	r0, [r5, #44]	@ 0x2c
 80142a0:	280c      	cmp	r0, #12
 80142a2:	d104      	bne.n	80142ae <llhwc_stp_dtm+0x54>
 80142a4:	2043      	movs	r0, #67	@ 0x43
 80142a6:	f007 fb85 	bl	801b9b4 <bsp_debug_gpio_toggle>
 80142aa:	270c      	movs	r7, #12
 80142ac:	e050      	b.n	8014350 <llhwc_stp_dtm+0xf6>
 80142ae:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
 80142b0:	b128      	cbz	r0, 80142be <llhwc_stp_dtm+0x64>
 80142b2:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80142b4:	f009 fefe 	bl	801e0b4 <os_timer_stop>
 80142b8:	4607      	mov	r7, r0
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d148      	bne.n	8014350 <llhwc_stp_dtm+0xf6>
 80142be:	f240 4004 	movw	r0, #1028	@ 0x404
 80142c2:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80142c6:	6801      	ldr	r1, [r0, #0]
 80142c8:	2700      	movs	r7, #0
 80142ca:	f041 0101 	orr.w	r1, r1, #1
 80142ce:	6001      	str	r1, [r0, #0]
 80142d0:	f44f 30e0 	mov.w	r0, #114688	@ 0x1c000
 80142d4:	f640 0174 	movw	r1, #2164	@ 0x874
 80142d8:	2208      	movs	r2, #8
 80142da:	2303      	movs	r3, #3
 80142dc:	9700      	str	r7, [sp, #0]
 80142de:	f00a fd51 	bl	801ed84 <llhwc_polling>
 80142e2:	4607      	mov	r7, r0
 80142e4:	bba0      	cbnz	r0, 8014350 <llhwc_stp_dtm+0xf6>
 80142e6:	f895 002c 	ldrb.w	r0, [r5, #44]	@ 0x2c
 80142ea:	8bf1      	ldrh	r1, [r6, #30]
 80142ec:	3809      	subs	r0, #9
 80142ee:	bf18      	it	ne
 80142f0:	4608      	movne	r0, r1
 80142f2:	8020      	strh	r0, [r4, #0]
 80142f4:	f008 ff1f 	bl	801d136 <llhwc_phy_read_rssi>
 80142f8:	f646 5450 	movw	r4, #27984	@ 0x6d50
 80142fc:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8014300:	6821      	ldr	r1, [r4, #0]
 8014302:	f646 5254 	movw	r2, #27988	@ 0x6d54
 8014306:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801430a:	8010      	strh	r0, [r2, #0]
 801430c:	b1e9      	cbz	r1, 801434a <llhwc_stp_dtm+0xf0>
 801430e:	a801      	add	r0, sp, #4
 8014310:	f00a f8db 	bl	801e4ca <llhwc_slptmr_get>
 8014314:	f646 554c 	movw	r5, #27980	@ 0x6d4c
 8014318:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801431c:	6828      	ldr	r0, [r5, #0]
 801431e:	9901      	ldr	r1, [sp, #4]
 8014320:	9002      	str	r0, [sp, #8]
 8014322:	a802      	add	r0, sp, #8
 8014324:	f009 f97e 	bl	801d624 <ble_time_cmp_raw_reading>
 8014328:	2801      	cmp	r0, #1
 801432a:	db02      	blt.n	8014332 <llhwc_stp_dtm+0xd8>
 801432c:	9801      	ldr	r0, [sp, #4]
 801432e:	6829      	ldr	r1, [r5, #0]
 8014330:	e001      	b.n	8014336 <llhwc_stp_dtm+0xdc>
 8014332:	6828      	ldr	r0, [r5, #0]
 8014334:	9901      	ldr	r1, [sp, #4]
 8014336:	f009 f99a 	bl	801d66e <ble_time_overflow_diff>
 801433a:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801433e:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8014342:	6821      	ldr	r1, [r4, #0]
 8014344:	fbb0 f0f1 	udiv	r0, r0, r1
 8014348:	6028      	str	r0, [r5, #0]
 801434a:	f7ff ff17 	bl	801417c <llhwc_init_empty_pkts>
 801434e:	2700      	movs	r7, #0
 8014350:	f008 fee3 	bl	801d11a <llhwc_phy_reset_freq_correction_reg>
 8014354:	2001      	movs	r0, #1
 8014356:	f00c f828 	bl	80203aa <llhwc_cmn_evnt_notify>
 801435a:	f8d8 0000 	ldr.w	r0, [r8]
 801435e:	f007 fb48 	bl	801b9f2 <os_rcrsv_mutex_release>
 8014362:	4638      	mov	r0, r7
 8014364:	b004      	add	sp, #16
 8014366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801436a <llhwc_switch_rate>:
 801436a:	b510      	push	{r4, lr}
 801436c:	b086      	sub	sp, #24
 801436e:	f247 34e8 	movw	r4, #29672	@ 0x73e8
 8014372:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8014376:	230c      	movs	r3, #12
 8014378:	7ca1      	ldrb	r1, [r4, #18]
 801437a:	f3c0 0241 	ubfx	r2, r0, #1, #2
 801437e:	ea03 13d0 	and.w	r3, r3, r0, lsr #7
 8014382:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8014386:	441a      	add	r2, r3
 8014388:	4411      	add	r1, r2
 801438a:	74a1      	strb	r1, [r4, #18]
 801438c:	f10d 0c04 	add.w	ip, sp, #4
 8014390:	f10d 0217 	add.w	r2, sp, #23
 8014394:	f10d 0316 	add.w	r3, sp, #22
 8014398:	2101      	movs	r1, #1
 801439a:	f8cd c000 	str.w	ip, [sp]
 801439e:	f00b f8dc 	bl	801f55a <llhwc_cmn_set_phy>
 80143a2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80143a6:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80143aa:	f000 000f 	and.w	r0, r0, #15
 80143ae:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80143b2:	ab01      	add	r3, sp, #4
 80143b4:	7460      	strb	r0, [r4, #17]
 80143b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143b8:	7661      	strb	r1, [r4, #25]
 80143ba:	7620      	strb	r0, [r4, #24]
 80143bc:	76a2      	strb	r2, [r4, #26]
 80143be:	76e3      	strb	r3, [r4, #27]
 80143c0:	b006      	add	sp, #24
 80143c2:	bd10      	pop	{r4, pc}

080143c4 <llhwc_set_adv_param>:
 80143c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c8:	b083      	sub	sp, #12
 80143ca:	460e      	mov	r6, r1
 80143cc:	e9d1 210a 	ldrd	r2, r1, [r1, #40]	@ 0x28
 80143d0:	4682      	mov	sl, r0
 80143d2:	4610      	mov	r0, r2
 80143d4:	f000 f99e 	bl	8014714 <llhwc_get_sm_mode_from_event_type>
 80143d8:	f646 5858 	movw	r8, #27992	@ 0x6d58
 80143dc:	4681      	mov	r9, r0
 80143de:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80143e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80143e6:	f247 37e8 	movw	r7, #29672	@ 0x73e8
 80143ea:	f8a8 0030 	strh.w	r0, [r8, #48]	@ 0x30
 80143ee:	20ff      	movs	r0, #255	@ 0xff
 80143f0:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80143f4:	f888 002d 	strb.w	r0, [r8, #45]	@ 0x2d
 80143f8:	4638      	mov	r0, r7
 80143fa:	2100      	movs	r1, #0
 80143fc:	2224      	movs	r2, #36	@ 0x24
 80143fe:	2400      	movs	r4, #0
 8014400:	f00c fa70 	bl	80208e4 <ble_memset>
 8014404:	f89a 000a 	ldrb.w	r0, [sl, #10]
 8014408:	f04f 31ff 	mov.w	r1, #4294967295
 801440c:	8039      	strh	r1, [r7, #0]
 801440e:	b338      	cbz	r0, 8014460 <llhwc_set_adv_param+0x9c>
 8014410:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8014414:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014418:	2000      	movs	r0, #0
 801441a:	2400      	movs	r4, #0
 801441c:	f006 fa3a 	bl	801a894 <allocate_data_packet>
 8014420:	f646 51fc 	movw	r1, #28156	@ 0x6dfc
 8014424:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014428:	2800      	cmp	r0, #0
 801442a:	6008      	str	r0, [r1, #0]
 801442c:	f000 814b 	beq.w	80146c6 <llhwc_set_adv_param+0x302>
 8014430:	6805      	ldr	r5, [r0, #0]
 8014432:	8144      	strh	r4, [r0, #10]
 8014434:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 8014438:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 801443c:	182c      	adds	r4, r5, r0
 801443e:	b2a0      	uxth	r0, r4
 8014440:	2100      	movs	r1, #0
 8014442:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8014446:	4308      	orrs	r0, r1
 8014448:	2100      	movs	r1, #0
 801444a:	2204      	movs	r2, #4
 801444c:	83fc      	strh	r4, [r7, #30]
 801444e:	f00c fa49 	bl	80208e4 <ble_memset>
 8014452:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8014456:	f364 000f 	bfi	r0, r4, #0, #16
 801445a:	f845 0c04 	str.w	r0, [r5, #-4]
 801445e:	e007      	b.n	8014470 <llhwc_set_adv_param+0xac>
 8014460:	f646 51fc 	movw	r1, #28156	@ 0x6dfc
 8014464:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8014468:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801446c:	600c      	str	r4, [r1, #0]
 801446e:	83f8      	strh	r0, [r7, #30]
 8014470:	e9d6 120a 	ldrd	r1, r2, [r6, #40]	@ 0x28
 8014474:	88b0      	ldrh	r0, [r6, #4]
 8014476:	3804      	subs	r0, #4
 8014478:	83b8      	strh	r0, [r7, #28]
 801447a:	e9c8 1208 	strd	r1, r2, [r8, #32]
 801447e:	f896 8034 	ldrb.w	r8, [r6, #52]	@ 0x34
 8014482:	f1b8 0f03 	cmp.w	r8, #3
 8014486:	bf04      	itt	eq
 8014488:	f04f 0804 	moveq.w	r8, #4
 801448c:	f886 8034 	strbeq.w	r8, [r6, #52]	@ 0x34
 8014490:	eb08 2008 	add.w	r0, r8, r8, lsl #8
 8014494:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 8014498:	f7ff ff67 	bl	801436a <llhwc_switch_rate>
 801449c:	f896 0034 	ldrb.w	r0, [r6, #52]	@ 0x34
 80144a0:	2804      	cmp	r0, #4
 80144a2:	d105      	bne.n	80144b0 <llhwc_set_adv_param+0xec>
 80144a4:	68b8      	ldr	r0, [r7, #8]
 80144a6:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
 80144aa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80144ae:	e00c      	b.n	80144ca <llhwc_set_adv_param+0x106>
 80144b0:	f24e 117a 	movw	r1, #57722	@ 0xe17a
 80144b4:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80144b8:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 80144bc:	68b9      	ldr	r1, [r7, #8]
 80144be:	f04f 52d8 	mov.w	r2, #452984832	@ 0x1b000000
 80144c2:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 80144c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80144ca:	e9d6 230a 	ldrd	r2, r3, [r6, #40]	@ 0x28
 80144ce:	4308      	orrs	r0, r1
 80144d0:	3a01      	subs	r2, #1
 80144d2:	60b8      	str	r0, [r7, #8]
 80144d4:	f163 0300 	sbc.w	r3, r3, #0
 80144d8:	f1d2 0507 	rsbs	r5, r2, #7
 80144dc:	f04f 0500 	mov.w	r5, #0
 80144e0:	eb75 0303 	sbcs.w	r3, r5, r3
 80144e4:	f8cd 9008 	str.w	r9, [sp, #8]
 80144e8:	d306      	bcc.n	80144f8 <llhwc_set_adv_param+0x134>
 80144ea:	a07a      	add	r0, pc, #488	@ (adr r0, 80146d4 <llhwc_set_adv_param+0x310>)
 80144ec:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 80144f0:	a080      	add	r0, pc, #512	@ (adr r0, 80146f4 <llhwc_set_adv_param+0x330>)
 80144f2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80144f6:	e006      	b.n	8014506 <llhwc_set_adv_param+0x142>
 80144f8:	f247 11a8 	movw	r1, #29096	@ 0x71a8
 80144fc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014500:	f101 000c 	add.w	r0, r1, #12
 8014504:	3108      	adds	r1, #8
 8014506:	6809      	ldr	r1, [r1, #0]
 8014508:	f640 040c 	movw	r4, #2060	@ 0x80c
 801450c:	74f9      	strb	r1, [r7, #19]
 801450e:	6800      	ldr	r0, [r0, #0]
 8014510:	f996 1040 	ldrsb.w	r1, [r6, #64]	@ 0x40
 8014514:	70b8      	strb	r0, [r7, #2]
 8014516:	2501      	movs	r5, #1
 8014518:	2001      	movs	r0, #1
 801451a:	2201      	movs	r2, #1
 801451c:	2301      	movs	r3, #1
 801451e:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8014522:	9500      	str	r5, [sp, #0]
 8014524:	f009 ff79 	bl	801e41a <ll_tx_pwr_if_tx_pwr_params_config>
 8014528:	68b8      	ldr	r0, [r7, #8]
 801452a:	f245 5155 	movw	r1, #21845	@ 0x5555
 801452e:	f2c0 0155 	movt	r1, #85	@ 0x55
 8014532:	f361 0017 	bfi	r0, r1, #0, #24
 8014536:	f646 5198 	movw	r1, #28056	@ 0x6d98
 801453a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801453e:	794a      	ldrb	r2, [r1, #5]
 8014540:	f64b 63d6 	movw	r3, #48854	@ 0xbed6
 8014544:	f6c8 6389 	movt	r3, #36489	@ 0x8e89
 8014548:	6809      	ldr	r1, [r1, #0]
 801454a:	2a01      	cmp	r2, #1
 801454c:	bf08      	it	eq
 801454e:	460b      	moveq	r3, r1
 8014550:	e9c7 3001 	strd	r3, r0, [r7, #4]
 8014554:	69a1      	ldr	r1, [r4, #24]
 8014556:	6832      	ldr	r2, [r6, #0]
 8014558:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801455c:	7913      	ldrb	r3, [r2, #4]
 801455e:	4381      	bics	r1, r0
 8014560:	7955      	ldrb	r5, [r2, #5]
 8014562:	4419      	add	r1, r3
 8014564:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8014568:	61a1      	str	r1, [r4, #24]
 801456a:	7811      	ldrb	r1, [r2, #0]
 801456c:	7853      	ldrb	r3, [r2, #1]
 801456e:	7895      	ldrb	r5, [r2, #2]
 8014570:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8014574:	78d2      	ldrb	r2, [r2, #3]
 8014576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 801457a:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
 801457e:	61e1      	str	r1, [r4, #28]
 8014580:	69a1      	ldr	r1, [r4, #24]
 8014582:	f89a 2008 	ldrb.w	r2, [sl, #8]
 8014586:	f362 4110 	bfi	r1, r2, #16, #1
 801458a:	61a1      	str	r1, [r4, #24]
 801458c:	e9d6 120a 	ldrd	r1, r2, [r6, #40]	@ 0x28
 8014590:	f081 0102 	eor.w	r1, r1, #2
 8014594:	4311      	orrs	r1, r2
 8014596:	d119      	bne.n	80145cc <llhwc_set_adv_param+0x208>
 8014598:	6a21      	ldr	r1, [r4, #32]
 801459a:	f89a 2005 	ldrb.w	r2, [sl, #5]
 801459e:	ea21 0000 	bic.w	r0, r1, r0
 80145a2:	f89a 1004 	ldrb.w	r1, [sl, #4]
 80145a6:	4408      	add	r0, r1
 80145a8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80145ac:	6220      	str	r0, [r4, #32]
 80145ae:	f89a 0000 	ldrb.w	r0, [sl]
 80145b2:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80145b6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80145ba:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80145be:	f89a 1003 	ldrb.w	r1, [sl, #3]
 80145c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80145c6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80145ca:	6260      	str	r0, [r4, #36]	@ 0x24
 80145cc:	6870      	ldr	r0, [r6, #4]
 80145ce:	f8cd a004 	str.w	sl, [sp, #4]
 80145d2:	2800      	cmp	r0, #0
 80145d4:	d040      	beq.n	8014658 <llhwc_set_adv_param+0x294>
 80145d6:	f247 30e8 	movw	r0, #29672	@ 0x73e8
 80145da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80145de:	8b80      	ldrh	r0, [r0, #28]
 80145e0:	f64f 79fc 	movw	r9, #65532	@ 0xfffc
 80145e4:	f106 0a08 	add.w	sl, r6, #8
 80145e8:	f04f 0b00 	mov.w	fp, #0
 80145ec:	f2cb 79fd 	movt	r9, #47101	@ 0xb7fd
 80145f0:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80145f4:	2100      	movs	r1, #0
 80145f6:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80145fa:	1845      	adds	r5, r0, r1
 80145fc:	4628      	mov	r0, r5
 80145fe:	2100      	movs	r1, #0
 8014600:	2204      	movs	r2, #4
 8014602:	f00c f96f 	bl	80208e4 <ble_memset>
 8014606:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 801460a:	4608      	mov	r0, r1
 801460c:	b901      	cbnz	r1, 8014610 <llhwc_set_adv_param+0x24c>
 801460e:	6870      	ldr	r0, [r6, #4]
 8014610:	4448      	add	r0, r9
 8014612:	682a      	ldr	r2, [r5, #0]
 8014614:	b283      	uxth	r3, r0
 8014616:	43a2      	bics	r2, r4
 8014618:	441a      	add	r2, r3
 801461a:	f1b8 0f04 	cmp.w	r8, #4
 801461e:	602a      	str	r2, [r5, #0]
 8014620:	d103      	bne.n	801462a <llhwc_set_adv_param+0x266>
 8014622:	682a      	ldr	r2, [r5, #0]
 8014624:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8014628:	602a      	str	r2, [r5, #0]
 801462a:	e9d6 320a 	ldrd	r3, r2, [r6, #40]	@ 0x28
 801462e:	f483 4700 	eor.w	r7, r3, #32768	@ 0x8000
 8014632:	4317      	orrs	r7, r2
 8014634:	bf1c      	itt	ne
 8014636:	f483 5300 	eorne.w	r3, r3, #8192	@ 0x2000
 801463a:	ea52 0203 	orrsne.w	r2, r2, r3
 801463e:	d105      	bne.n	801464c <llhwc_set_adv_param+0x288>
 8014640:	682a      	ldr	r2, [r5, #0]
 8014642:	f896 3032 	ldrb.w	r3, [r6, #50]	@ 0x32
 8014646:	f363 4215 	bfi	r2, r3, #16, #6
 801464a:	602a      	str	r2, [r5, #0]
 801464c:	b121      	cbz	r1, 8014658 <llhwc_set_adv_param+0x294>
 801464e:	f1bb 0f06 	cmp.w	fp, #6
 8014652:	f10b 0b01 	add.w	fp, fp, #1
 8014656:	d3cd      	bcc.n	80145f4 <llhwc_set_adv_param+0x230>
 8014658:	f640 050c 	movw	r5, #2060	@ 0x80c
 801465c:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8014660:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014662:	9901      	ldr	r1, [sp, #4]
 8014664:	7a49      	ldrb	r1, [r1, #9]
 8014666:	f361 0002 	bfi	r0, r1, #0, #3
 801466a:	6328      	str	r0, [r5, #48]	@ 0x30
 801466c:	6869      	ldr	r1, [r5, #4]
 801466e:	f896 2032 	ldrb.w	r2, [r6, #50]	@ 0x32
 8014672:	f896 0033 	ldrb.w	r0, [r6, #51]	@ 0x33
 8014676:	f362 0105 	bfi	r1, r2, #0, #6
 801467a:	6069      	str	r1, [r5, #4]
 801467c:	f008 fb95 	bl	801cdaa <llhwc_phy_set_ch_config_adv>
 8014680:	f247 34e8 	movw	r4, #29672	@ 0x73e8
 8014684:	2028      	movs	r0, #40	@ 0x28
 8014686:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801468a:	73e0      	strb	r0, [r4, #15]
 801468c:	6828      	ldr	r0, [r5, #0]
 801468e:	9902      	ldr	r1, [sp, #8]
 8014690:	f361 0004 	bfi	r0, r1, #0, #5
 8014694:	6028      	str	r0, [r5, #0]
 8014696:	f646 5058 	movw	r0, #27992	@ 0x6d58
 801469a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801469e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80146a0:	2101      	movs	r1, #1
 80146a2:	f00b fa87 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 80146a6:	4621      	mov	r1, r4
 80146a8:	2230      	movs	r2, #48	@ 0x30
 80146aa:	4605      	mov	r5, r0
 80146ac:	f00c f8ca 	bl	8020844 <ble_memcpy>
 80146b0:	2100      	movs	r1, #0
 80146b2:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80146b6:	f8d1 0408 	ldr.w	r0, [r1, #1032]	@ 0x408
 80146ba:	f365 000f 	bfi	r0, r5, #0, #16
 80146be:	f8c1 0408 	str.w	r0, [r1, #1032]	@ 0x408
 80146c2:	2000      	movs	r0, #0
 80146c4:	e003      	b.n	80146ce <llhwc_set_adv_param+0x30a>
 80146c6:	2042      	movs	r0, #66	@ 0x42
 80146c8:	f007 f974 	bl	801b9b4 <bsp_debug_gpio_toggle>
 80146cc:	2007      	movs	r0, #7
 80146ce:	b003      	add	sp, #12
 80146d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d4:	200071a8 	.word	0x200071a8
 80146d8:	200071a8 	.word	0x200071a8
 80146dc:	200071b0 	.word	0x200071b0
 80146e0:	200071a8 	.word	0x200071a8
 80146e4:	200071b0 	.word	0x200071b0
 80146e8:	200071b0 	.word	0x200071b0
 80146ec:	200071b0 	.word	0x200071b0
 80146f0:	200071a8 	.word	0x200071a8
 80146f4:	200071ac 	.word	0x200071ac
 80146f8:	200071ac 	.word	0x200071ac
 80146fc:	200071b4 	.word	0x200071b4
 8014700:	200071ac 	.word	0x200071ac
 8014704:	200071b4 	.word	0x200071b4
 8014708:	200071b4 	.word	0x200071b4
 801470c:	200071b4 	.word	0x200071b4
 8014710:	200071ac 	.word	0x200071ac

08014714 <llhwc_get_sm_mode_from_event_type>:
 8014714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014716:	b081      	sub	sp, #4
 8014718:	4605      	mov	r5, r0
 801471a:	f1b0 7080 	subs.w	r0, r0, #16777216	@ 0x1000000
 801471e:	f171 0000 	sbcs.w	r0, r1, #0
 8014722:	460c      	mov	r4, r1
 8014724:	f04f 0000 	mov.w	r0, #0
 8014728:	f04f 0101 	mov.w	r1, #1
 801472c:	bf38      	it	cc
 801472e:	2001      	movcc	r0, #1
 8014730:	2600      	movs	r6, #0
 8014732:	2701      	movs	r7, #1
 8014734:	f007 f8f3 	bl	801b91e <bsp_assert>
 8014738:	fa07 f006 	lsl.w	r0, r7, r6
 801473c:	4068      	eors	r0, r5
 801473e:	4320      	orrs	r0, r4
 8014740:	d003      	beq.n	801474a <llhwc_get_sm_mode_from_event_type+0x36>
 8014742:	3601      	adds	r6, #1
 8014744:	2e18      	cmp	r6, #24
 8014746:	d1f7      	bne.n	8014738 <llhwc_get_sm_mode_from_event_type+0x24>
 8014748:	2600      	movs	r6, #0
 801474a:	b2f0      	uxtb	r0, r6
 801474c:	b001      	add	sp, #4
 801474e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014750 <llhwc_get_access_adrs_time>:
 8014750:	b580      	push	{r7, lr}
 8014752:	f24e 127a 	movw	r2, #57722	@ 0xe17a
 8014756:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801475a:	f832 e010 	ldrh.w	lr, [r2, r0, lsl #1]
 801475e:	f04f 0c0b 	mov.w	ip, #11
 8014762:	fb01 f30c 	mul.w	r3, r1, ip
 8014766:	222b      	movs	r2, #43	@ 0x2b
 8014768:	fb01 f202 	mul.w	r2, r1, r2
 801476c:	2804      	cmp	r0, #4
 801476e:	bf08      	it	eq
 8014770:	fb01 230c 	mlaeq	r3, r1, ip, r2
 8014774:	eb03 000e 	add.w	r0, r3, lr
 8014778:	bd80      	pop	{r7, pc}

0801477a <llhwc_set_scan_param>:
 801477a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477e:	b085      	sub	sp, #20
 8014780:	4617      	mov	r7, r2
 8014782:	9104      	str	r1, [sp, #16]
 8014784:	e9d2 2104 	ldrd	r2, r1, [r2, #16]
 8014788:	4683      	mov	fp, r0
 801478a:	f640 080c 	movw	r8, #2060	@ 0x80c
 801478e:	4610      	mov	r0, r2
 8014790:	9303      	str	r3, [sp, #12]
 8014792:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 8014796:	f7ff ffbd 	bl	8014714 <llhwc_get_sm_mode_from_event_type>
 801479a:	f646 5558 	movw	r5, #27992	@ 0x6d58
 801479e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80147a2:	6929      	ldr	r1, [r5, #16]
 80147a4:	f247 34e8 	movw	r4, #29672	@ 0x73e8
 80147a8:	9002      	str	r0, [sp, #8]
 80147aa:	2900      	cmp	r1, #0
 80147ac:	bf18      	it	ne
 80147ae:	2101      	movne	r1, #1
 80147b0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80147b4:	f885 1030 	strb.w	r1, [r5, #48]	@ 0x30
 80147b8:	2601      	movs	r6, #1
 80147ba:	4620      	mov	r0, r4
 80147bc:	2100      	movs	r1, #0
 80147be:	2224      	movs	r2, #36	@ 0x24
 80147c0:	f885 6031 	strb.w	r6, [r5, #49]	@ 0x31
 80147c4:	f00c f88e 	bl	80208e4 <ble_memset>
 80147c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80147cc:	f04f 32ff 	mov.w	r2, #4294967295
 80147d0:	f080 0010 	eor.w	r0, r0, #16
 80147d4:	8022      	strh	r2, [r4, #0]
 80147d6:	4308      	orrs	r0, r1
 80147d8:	fab0 f080 	clz	r0, r0
 80147dc:	f997 1009 	ldrsb.w	r1, [r7, #9]
 80147e0:	0940      	lsrs	r0, r0, #5
 80147e2:	2200      	movs	r2, #0
 80147e4:	2301      	movs	r3, #1
 80147e6:	9600      	str	r6, [sp, #0]
 80147e8:	f009 fe17 	bl	801e41a <ll_tx_pwr_if_tx_pwr_params_config>
 80147ec:	7e39      	ldrb	r1, [r7, #24]
 80147ee:	f24e 1074 	movw	r0, #57716	@ 0xe174
 80147f2:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80147f6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80147fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80147fe:	f810 0c4a 	ldrb.w	r0, [r0, #-74]
 8014802:	f361 0205 	bfi	r2, r1, #0, #6
 8014806:	f8c8 2004 	str.w	r2, [r8, #4]
 801480a:	2101      	movs	r1, #1
 801480c:	2201      	movs	r2, #1
 801480e:	f008 fa54 	bl	801ccba <llhwc_phy_set_ch_config>
 8014812:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8014816:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801481a:	2000      	movs	r0, #0
 801481c:	f006 f83a 	bl	801a894 <allocate_data_packet>
 8014820:	f646 6600 	movw	r6, #28160	@ 0x6e00
 8014824:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8014828:	2800      	cmp	r0, #0
 801482a:	6030      	str	r0, [r6, #0]
 801482c:	d060      	beq.n	80148f0 <llhwc_set_scan_param+0x176>
 801482e:	8802      	ldrh	r2, [r0, #0]
 8014830:	2118      	movs	r1, #24
 8014832:	8141      	strh	r1, [r0, #10]
 8014834:	f102 0014 	add.w	r0, r2, #20
 8014838:	83e0      	strh	r0, [r4, #30]
 801483a:	f240 0900 	movw	r9, #0
 801483e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8014842:	2100      	movs	r1, #0
 8014844:	2204      	movs	r2, #4
 8014846:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 801484a:	f00c f84b 	bl	80208e4 <ble_memset>
 801484e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014852:	f080 0010 	eor.w	r0, r0, #16
 8014856:	4308      	orrs	r0, r1
 8014858:	d14e      	bne.n	80148f8 <llhwc_set_scan_param+0x17e>
 801485a:	6830      	ldr	r0, [r6, #0]
 801485c:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8014860:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014864:	f006 f816 	bl	801a894 <allocate_data_packet>
 8014868:	2800      	cmp	r0, #0
 801486a:	f000 8132 	beq.w	8014ad2 <llhwc_set_scan_param+0x358>
 801486e:	f8d0 9000 	ldr.w	r9, [r0]
 8014872:	2118      	movs	r1, #24
 8014874:	f109 0614 	add.w	r6, r9, #20
 8014878:	8141      	strh	r1, [r0, #10]
 801487a:	4630      	mov	r0, r6
 801487c:	2100      	movs	r1, #0
 801487e:	2204      	movs	r2, #4
 8014880:	f8cd b004 	str.w	fp, [sp, #4]
 8014884:	f00c f82e 	bl	80208e4 <ble_memset>
 8014888:	8be0      	ldrh	r0, [r4, #30]
 801488a:	f240 0a00 	movw	sl, #0
 801488e:	f6c4 0a02 	movt	sl, #18434	@ 0x4802
 8014892:	ea40 000a 	orr.w	r0, r0, sl
 8014896:	6801      	ldr	r1, [r0, #0]
 8014898:	2204      	movs	r2, #4
 801489a:	f366 010f 	bfi	r1, r6, #0, #16
 801489e:	6001      	str	r1, [r0, #0]
 80148a0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80148a4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80148a8:	4330      	orrs	r0, r6
 80148aa:	f8c9 0014 	str.w	r0, [r9, #20]
 80148ae:	8838      	ldrh	r0, [r7, #0]
 80148b0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80148b4:	3804      	subs	r0, #4
 80148b6:	b281      	uxth	r1, r0
 80148b8:	83a0      	strh	r0, [r4, #28]
 80148ba:	ea41 000a 	orr.w	r0, r1, sl
 80148be:	2100      	movs	r1, #0
 80148c0:	f00c f810 	bl	80208e4 <ble_memset>
 80148c4:	8ba0      	ldrh	r0, [r4, #28]
 80148c6:	2206      	movs	r2, #6
 80148c8:	ea40 000a 	orr.w	r0, r0, sl
 80148cc:	6801      	ldr	r1, [r0, #0]
 80148ce:	4331      	orrs	r1, r6
 80148d0:	6001      	str	r1, [r0, #0]
 80148d2:	68f9      	ldr	r1, [r7, #12]
 80148d4:	4628      	mov	r0, r5
 80148d6:	f00b ffb5 	bl	8020844 <ble_memcpy>
 80148da:	6838      	ldr	r0, [r7, #0]
 80148dc:	78e1      	ldrb	r1, [r4, #3]
 80148de:	7800      	ldrb	r0, [r0, #0]
 80148e0:	f3c0 1080 	ubfx	r0, r0, #6, #1
 80148e4:	60a8      	str	r0, [r5, #8]
 80148e6:	f001 00e0 	and.w	r0, r1, #224	@ 0xe0
 80148ea:	3002      	adds	r0, #2
 80148ec:	70e0      	strb	r0, [r4, #3]
 80148ee:	e013      	b.n	8014918 <llhwc_set_scan_param+0x19e>
 80148f0:	2042      	movs	r0, #66	@ 0x42
 80148f2:	f007 f85f 	bl	801b9b4 <bsp_debug_gpio_toggle>
 80148f6:	e0f2      	b.n	8014ade <llhwc_set_scan_param+0x364>
 80148f8:	8be0      	ldrh	r0, [r4, #30]
 80148fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80148fe:	ea40 0009 	orr.w	r0, r0, r9
 8014902:	6801      	ldr	r1, [r0, #0]
 8014904:	4311      	orrs	r1, r2
 8014906:	6001      	str	r1, [r0, #0]
 8014908:	78e0      	ldrb	r0, [r4, #3]
 801490a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801490e:	f000 00e0 	and.w	r0, r0, #224	@ 0xe0
 8014912:	3001      	adds	r0, #1
 8014914:	70e0      	strb	r0, [r4, #3]
 8014916:	83a1      	strh	r1, [r4, #28]
 8014918:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
 801491c:	e9c5 1008 	strd	r1, r0, [r5, #32]
 8014920:	7e7e      	ldrb	r6, [r7, #25]
 8014922:	7a38      	ldrb	r0, [r7, #8]
 8014924:	ea46 2106 	orr.w	r1, r6, r6, lsl #8
 8014928:	f885 002e 	strb.w	r0, [r5, #46]	@ 0x2e
 801492c:	f501 3080 	add.w	r0, r1, #65536	@ 0x10000
 8014930:	f7ff fd1b 	bl	801436a <llhwc_switch_rate>
 8014934:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014938:	f080 0010 	eor.w	r0, r0, #16
 801493c:	4308      	orrs	r0, r1
 801493e:	bf08      	it	eq
 8014940:	2e04      	cmpeq	r6, #4
 8014942:	d108      	bne.n	8014956 <llhwc_set_scan_param+0x1dc>
 8014944:	8ba0      	ldrh	r0, [r4, #28]
 8014946:	2100      	movs	r1, #0
 8014948:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801494c:	4308      	orrs	r0, r1
 801494e:	6801      	ldr	r1, [r0, #0]
 8014950:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8014954:	6001      	str	r1, [r0, #0]
 8014956:	7e78      	ldrb	r0, [r7, #25]
 8014958:	9e04      	ldr	r6, [sp, #16]
 801495a:	2804      	cmp	r0, #4
 801495c:	d105      	bne.n	801496a <llhwc_set_scan_param+0x1f0>
 801495e:	68a0      	ldr	r0, [r4, #8]
 8014960:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
 8014964:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8014968:	e00c      	b.n	8014984 <llhwc_set_scan_param+0x20a>
 801496a:	f24e 117a 	movw	r1, #57722	@ 0xe17a
 801496e:	f6c0 0102 	movt	r1, #2050	@ 0x802
 8014972:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8014976:	68a1      	ldr	r1, [r4, #8]
 8014978:	f04f 52d8 	mov.w	r2, #452984832	@ 0x1b000000
 801497c:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8014980:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8014984:	4308      	orrs	r0, r1
 8014986:	60a0      	str	r0, [r4, #8]
 8014988:	f89b 0000 	ldrb.w	r0, [fp]
 801498c:	2801      	cmp	r0, #1
 801498e:	d809      	bhi.n	80149a4 <llhwc_set_scan_param+0x22a>
 8014990:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8014994:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014998:	7628      	strb	r0, [r5, #24]
 801499a:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 801499e:	f040 0004 	orr.w	r0, r0, #4
 80149a2:	e00a      	b.n	80149ba <llhwc_set_scan_param+0x240>
 80149a4:	2803      	cmp	r0, #3
 80149a6:	d80a      	bhi.n	80149be <llhwc_set_scan_param+0x244>
 80149a8:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80149ac:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80149b0:	7628      	strb	r0, [r5, #24]
 80149b2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80149b6:	f020 0004 	bic.w	r0, r0, #4
 80149ba:	f8c8 0070 	str.w	r0, [r8, #112]	@ 0x70
 80149be:	f247 11a8 	movw	r1, #29096	@ 0x71a8
 80149c2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80149c6:	6888      	ldr	r0, [r1, #8]
 80149c8:	68c9      	ldr	r1, [r1, #12]
 80149ca:	74e0      	strb	r0, [r4, #19]
 80149cc:	68f8      	ldr	r0, [r7, #12]
 80149ce:	70a1      	strb	r1, [r4, #2]
 80149d0:	b1f8      	cbz	r0, 8014a12 <llhwc_set_scan_param+0x298>
 80149d2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80149d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80149da:	4391      	bics	r1, r2
 80149dc:	7902      	ldrb	r2, [r0, #4]
 80149de:	7943      	ldrb	r3, [r0, #5]
 80149e0:	4411      	add	r1, r2
 80149e2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80149e6:	f8c8 1018 	str.w	r1, [r8, #24]
 80149ea:	7801      	ldrb	r1, [r0, #0]
 80149ec:	7842      	ldrb	r2, [r0, #1]
 80149ee:	7883      	ldrb	r3, [r0, #2]
 80149f0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80149f4:	78c0      	ldrb	r0, [r0, #3]
 80149f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80149fa:	ea41 6000 	orr.w	r0, r1, r0, lsl #24
 80149fe:	f8c8 001c 	str.w	r0, [r8, #28]
 8014a02:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8014a06:	f89b 1000 	ldrb.w	r1, [fp]
 8014a0a:	f361 4010 	bfi	r0, r1, #16, #1
 8014a0e:	f8c8 0018 	str.w	r0, [r8, #24]
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8014a18:	6160      	str	r0, [r4, #20]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8014a20:	0080      	lsls	r0, r0, #2
 8014a22:	fba0 0101 	umull	r0, r1, r0, r1
 8014a26:	08c8      	lsrs	r0, r1, #3
 8014a28:	6831      	ldr	r1, [r6, #0]
 8014a2a:	6168      	str	r0, [r5, #20]
 8014a2c:	f247 3030 	movw	r0, #29488	@ 0x7330
 8014a30:	2900      	cmp	r1, #0
 8014a32:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014a36:	f04f 0100 	mov.w	r1, #0
 8014a3a:	6281      	str	r1, [r0, #40]	@ 0x28
 8014a3c:	d006      	beq.n	8014a4c <llhwc_set_scan_param+0x2d2>
 8014a3e:	6870      	ldr	r0, [r6, #4]
 8014a40:	b120      	cbz	r0, 8014a4c <llhwc_set_scan_param+0x2d2>
 8014a42:	6060      	str	r0, [r4, #4]
 8014a44:	6830      	ldr	r0, [r6, #0]
 8014a46:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8014a4a:	e011      	b.n	8014a70 <llhwc_set_scan_param+0x2f6>
 8014a4c:	f646 5098 	movw	r0, #28056	@ 0x6d98
 8014a50:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014a54:	7941      	ldrb	r1, [r0, #5]
 8014a56:	f64b 62d6 	movw	r2, #48854	@ 0xbed6
 8014a5a:	6800      	ldr	r0, [r0, #0]
 8014a5c:	f6c8 6289 	movt	r2, #36489	@ 0x8e89
 8014a60:	2901      	cmp	r1, #1
 8014a62:	bf08      	it	eq
 8014a64:	4602      	moveq	r2, r0
 8014a66:	f245 5055 	movw	r0, #21845	@ 0x5555
 8014a6a:	f2c0 0055 	movt	r0, #85	@ 0x55
 8014a6e:	6062      	str	r2, [r4, #4]
 8014a70:	7ae1      	ldrb	r1, [r4, #11]
 8014a72:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8014a76:	60a0      	str	r0, [r4, #8]
 8014a78:	f8d8 0030 	ldr.w	r0, [r8, #48]	@ 0x30
 8014a7c:	f89b 1001 	ldrb.w	r1, [fp, #1]
 8014a80:	f361 0002 	bfi	r0, r1, #0, #3
 8014a84:	f8c8 0030 	str.w	r0, [r8, #48]	@ 0x30
 8014a88:	f8d8 0000 	ldr.w	r0, [r8]
 8014a8c:	9902      	ldr	r1, [sp, #8]
 8014a8e:	f361 0004 	bfi	r0, r1, #0, #5
 8014a92:	f8c8 0000 	str.w	r0, [r8]
 8014a96:	9a03      	ldr	r2, [sp, #12]
 8014a98:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014a9a:	2128      	movs	r1, #40	@ 0x28
 8014a9c:	73e1      	strb	r1, [r4, #15]
 8014a9e:	b112      	cbz	r2, 8014aa6 <llhwc_set_scan_param+0x32c>
 8014aa0:	f00b fd86 	bl	80205b0 <llhwc_cmn_get_desc>
 8014aa4:	e002      	b.n	8014aac <llhwc_set_scan_param+0x332>
 8014aa6:	2101      	movs	r1, #1
 8014aa8:	f00b f884 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 8014aac:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 8014ab0:	2500      	movs	r5, #0
 8014ab2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014ab6:	2230      	movs	r2, #48	@ 0x30
 8014ab8:	4604      	mov	r4, r0
 8014aba:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8014abe:	f00b fec1 	bl	8020844 <ble_memcpy>
 8014ac2:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 8014ac6:	f364 000f 	bfi	r0, r4, #0, #16
 8014aca:	f8c5 0408 	str.w	r0, [r5, #1032]	@ 0x408
 8014ace:	2000      	movs	r0, #0
 8014ad0:	e006      	b.n	8014ae0 <llhwc_set_scan_param+0x366>
 8014ad2:	2042      	movs	r0, #66	@ 0x42
 8014ad4:	f006 ff6e 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8014ad8:	6830      	ldr	r0, [r6, #0]
 8014ada:	f005 ff09 	bl	801a8f0 <free_buff_hdr>
 8014ade:	2007      	movs	r0, #7
 8014ae0:	b005      	add	sp, #20
 8014ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ae6 <llhwc_set_init_param>:
 8014ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aea:	b083      	sub	sp, #12
 8014aec:	460f      	mov	r7, r1
 8014aee:	4680      	mov	r8, r0
 8014af0:	f640 0b0c 	movw	fp, #2060	@ 0x80c
 8014af4:	2001      	movs	r0, #1
 8014af6:	2101      	movs	r1, #1
 8014af8:	9201      	str	r2, [sp, #4]
 8014afa:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 8014afe:	2601      	movs	r6, #1
 8014b00:	f006 ff0d 	bl	801b91e <bsp_assert>
 8014b04:	2000      	movs	r0, #0
 8014b06:	f646 5958 	movw	r9, #27992	@ 0x6d58
 8014b0a:	f247 35e8 	movw	r5, #29672	@ 0x73e8
 8014b0e:	f88d 000b 	strb.w	r0, [sp, #11]
 8014b12:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8014b16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014b1a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8014b1e:	7b7c      	ldrb	r4, [r7, #13]
 8014b20:	f8a9 0030 	strh.w	r0, [r9, #48]	@ 0x30
 8014b24:	4628      	mov	r0, r5
 8014b26:	2100      	movs	r1, #0
 8014b28:	2224      	movs	r2, #36	@ 0x24
 8014b2a:	f00b fedb 	bl	80208e4 <ble_memset>
 8014b2e:	7b39      	ldrb	r1, [r7, #12]
 8014b30:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8014b34:	f24e 1074 	movw	r0, #57716	@ 0xe174
 8014b38:	f8a5 a000 	strh.w	sl, [r5]
 8014b3c:	f889 102d 	strb.w	r1, [r9, #45]	@ 0x2d
 8014b40:	f6c0 0002 	movt	r0, #2050	@ 0x802
 8014b44:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8014b48:	f8db 2004 	ldr.w	r2, [fp, #4]
 8014b4c:	f810 0c4a 	ldrb.w	r0, [r0, #-74]
 8014b50:	f361 0205 	bfi	r2, r1, #0, #6
 8014b54:	f8cb 2004 	str.w	r2, [fp, #4]
 8014b58:	2101      	movs	r1, #1
 8014b5a:	2201      	movs	r2, #1
 8014b5c:	f008 f8ad 	bl	801ccba <llhwc_phy_set_ch_config>
 8014b60:	f10d 000b 	add.w	r0, sp, #11
 8014b64:	f00d fe1d 	bl	80227a2 <db_get_tx_power_value>
 8014b68:	f99d 100b 	ldrsb.w	r1, [sp, #11]
 8014b6c:	2001      	movs	r0, #1
 8014b6e:	2200      	movs	r2, #0
 8014b70:	2301      	movs	r3, #1
 8014b72:	9600      	str	r6, [sp, #0]
 8014b74:	f009 fc51 	bl	801e41a <ll_tx_pwr_if_tx_pwr_params_config>
 8014b78:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8014b7c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014b80:	2000      	movs	r0, #0
 8014b82:	f005 fe87 	bl	801a894 <allocate_data_packet>
 8014b86:	f646 6100 	movw	r1, #28160	@ 0x6e00
 8014b8a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014b8e:	6008      	str	r0, [r1, #0]
 8014b90:	b370      	cbz	r0, 8014bf0 <llhwc_set_init_param+0x10a>
 8014b92:	8801      	ldrh	r1, [r0, #0]
 8014b94:	8940      	ldrh	r0, [r0, #10]
 8014b96:	2600      	movs	r6, #0
 8014b98:	4408      	add	r0, r1
 8014b9a:	3804      	subs	r0, #4
 8014b9c:	83e8      	strh	r0, [r5, #30]
 8014b9e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8014ba2:	2100      	movs	r1, #0
 8014ba4:	2204      	movs	r2, #4
 8014ba6:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8014baa:	f00b fe9b 	bl	80208e4 <ble_memset>
 8014bae:	78e8      	ldrb	r0, [r5, #3]
 8014bb0:	8be9      	ldrh	r1, [r5, #30]
 8014bb2:	f000 00e0 	and.w	r0, r0, #224	@ 0xe0
 8014bb6:	3001      	adds	r0, #1
 8014bb8:	70e8      	strb	r0, [r5, #3]
 8014bba:	5988      	ldr	r0, [r1, r6]
 8014bbc:	ea40 000a 	orr.w	r0, r0, sl
 8014bc0:	5188      	str	r0, [r1, r6]
 8014bc2:	2040      	movs	r0, #64	@ 0x40
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	e9c9 0108 	strd	r0, r1, [r9, #32]
 8014bca:	7bb8      	ldrb	r0, [r7, #14]
 8014bcc:	ea44 2104 	orr.w	r1, r4, r4, lsl #8
 8014bd0:	f889 002e 	strb.w	r0, [r9, #46]	@ 0x2e
 8014bd4:	f501 3080 	add.w	r0, r1, #65536	@ 0x10000
 8014bd8:	46b2      	mov	sl, r6
 8014bda:	f7ff fbc6 	bl	801436a <llhwc_switch_rate>
 8014bde:	7b78      	ldrb	r0, [r7, #13]
 8014be0:	2804      	cmp	r0, #4
 8014be2:	d10a      	bne.n	8014bfa <llhwc_set_init_param+0x114>
 8014be4:	68a8      	ldr	r0, [r5, #8]
 8014be6:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
 8014bea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8014bee:	e011      	b.n	8014c14 <llhwc_set_init_param+0x12e>
 8014bf0:	2042      	movs	r0, #66	@ 0x42
 8014bf2:	f006 fedf 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8014bf6:	2007      	movs	r0, #7
 8014bf8:	e0f9      	b.n	8014dee <llhwc_set_init_param+0x308>
 8014bfa:	f24e 117a 	movw	r1, #57722	@ 0xe17a
 8014bfe:	f6c0 0102 	movt	r1, #2050	@ 0x802
 8014c02:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8014c06:	68a9      	ldr	r1, [r5, #8]
 8014c08:	f04f 52d8 	mov.w	r2, #452984832	@ 0x1b000000
 8014c0c:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8014c10:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8014c14:	4308      	orrs	r0, r1
 8014c16:	60a8      	str	r0, [r5, #8]
 8014c18:	88b8      	ldrh	r0, [r7, #4]
 8014c1a:	9e01      	ldr	r6, [sp, #4]
 8014c1c:	3804      	subs	r0, #4
 8014c1e:	b281      	uxth	r1, r0
 8014c20:	83a8      	strh	r0, [r5, #28]
 8014c22:	ea41 000a 	orr.w	r0, r1, sl
 8014c26:	2100      	movs	r1, #0
 8014c28:	2204      	movs	r2, #4
 8014c2a:	f00b fe5b 	bl	80208e4 <ble_memset>
 8014c2e:	8ba8      	ldrh	r0, [r5, #28]
 8014c30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c34:	ea40 000a 	orr.w	r0, r0, sl
 8014c38:	6801      	ldr	r1, [r0, #0]
 8014c3a:	2c04      	cmp	r4, #4
 8014c3c:	ea41 0102 	orr.w	r1, r1, r2
 8014c40:	6001      	str	r1, [r0, #0]
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f646 6104 	movw	r1, #28164	@ 0x6e04
 8014c48:	f100 4036 	add.w	r0, r0, #3053453312	@ 0xb6000000
 8014c4c:	f100 70ff 	add.w	r0, r0, #33423360	@ 0x1fe0000
 8014c50:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014c54:	6008      	str	r0, [r1, #0]
 8014c56:	d106      	bne.n	8014c66 <llhwc_set_init_param+0x180>
 8014c58:	8ba8      	ldrh	r0, [r5, #28]
 8014c5a:	ea40 000a 	orr.w	r0, r0, sl
 8014c5e:	6801      	ldr	r1, [r0, #0]
 8014c60:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 8014c64:	6001      	str	r1, [r0, #0]
 8014c66:	f898 0009 	ldrb.w	r0, [r8, #9]
 8014c6a:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8014c6e:	2802      	cmp	r0, #2
 8014c70:	d10b      	bne.n	8014c8a <llhwc_set_init_param+0x1a4>
 8014c72:	f8db 0070 	ldr.w	r0, [fp, #112]	@ 0x70
 8014c76:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014c7a:	f889 0018 	strb.w	r0, [r9, #24]
 8014c7e:	f8db 0070 	ldr.w	r0, [fp, #112]	@ 0x70
 8014c82:	f020 0004 	bic.w	r0, r0, #4
 8014c86:	f8cb 0070 	str.w	r0, [fp, #112]	@ 0x70
 8014c8a:	f247 10a8 	movw	r0, #29096	@ 0x71a8
 8014c8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014c92:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
 8014c96:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8014c9a:	74e9      	strb	r1, [r5, #19]
 8014c9c:	70a8      	strb	r0, [r5, #2]
 8014c9e:	f8db 1018 	ldr.w	r1, [fp, #24]
 8014ca2:	683a      	ldr	r2, [r7, #0]
 8014ca4:	ea21 010c 	bic.w	r1, r1, ip
 8014ca8:	7913      	ldrb	r3, [r2, #4]
 8014caa:	7950      	ldrb	r0, [r2, #5]
 8014cac:	4419      	add	r1, r3
 8014cae:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8014cb2:	f8cb 0018 	str.w	r0, [fp, #24]
 8014cb6:	7810      	ldrb	r0, [r2, #0]
 8014cb8:	7851      	ldrb	r1, [r2, #1]
 8014cba:	7893      	ldrb	r3, [r2, #2]
 8014cbc:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8014cc0:	78d1      	ldrb	r1, [r2, #3]
 8014cc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8014cc6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8014cca:	f8cb 001c 	str.w	r0, [fp, #28]
 8014cce:	f8db 0018 	ldr.w	r0, [fp, #24]
 8014cd2:	f898 1009 	ldrb.w	r1, [r8, #9]
 8014cd6:	f898 2008 	ldrb.w	r2, [r8, #8]
 8014cda:	f361 4010 	bfi	r0, r1, #16, #1
 8014cde:	2a05      	cmp	r2, #5
 8014ce0:	f8cb 0018 	str.w	r0, [fp, #24]
 8014ce4:	d124      	bne.n	8014d30 <llhwc_set_init_param+0x24a>
 8014ce6:	f8db 0038 	ldr.w	r0, [fp, #56]	@ 0x38
 8014cea:	f898 1004 	ldrb.w	r1, [r8, #4]
 8014cee:	ea20 000c 	bic.w	r0, r0, ip
 8014cf2:	f898 2005 	ldrb.w	r2, [r8, #5]
 8014cf6:	4408      	add	r0, r1
 8014cf8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8014cfc:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8014d00:	f898 0000 	ldrb.w	r0, [r8]
 8014d04:	f898 1001 	ldrb.w	r1, [r8, #1]
 8014d08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8014d0c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8014d10:	f898 1003 	ldrb.w	r1, [r8, #3]
 8014d14:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8014d18:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8014d1c:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8014d20:	f8db 0038 	ldr.w	r0, [fp, #56]	@ 0x38
 8014d24:	f898 100a 	ldrb.w	r1, [r8, #10]
 8014d28:	f361 4010 	bfi	r0, r1, #16, #1
 8014d2c:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 8014d30:	68b8      	ldr	r0, [r7, #8]
 8014d32:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8014d36:	6168      	str	r0, [r5, #20]
 8014d38:	68b8      	ldr	r0, [r7, #8]
 8014d3a:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8014d3e:	0080      	lsls	r0, r0, #2
 8014d40:	fba0 0101 	umull	r0, r1, r0, r1
 8014d44:	08c8      	lsrs	r0, r1, #3
 8014d46:	f8c9 0014 	str.w	r0, [r9, #20]
 8014d4a:	f247 3030 	movw	r0, #29488	@ 0x7330
 8014d4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014d52:	2100      	movs	r1, #0
 8014d54:	6281      	str	r1, [r0, #40]	@ 0x28
 8014d56:	f646 5098 	movw	r0, #28056	@ 0x6d98
 8014d5a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014d5e:	7941      	ldrb	r1, [r0, #5]
 8014d60:	f64b 62d6 	movw	r2, #48854	@ 0xbed6
 8014d64:	6800      	ldr	r0, [r0, #0]
 8014d66:	f6c8 6289 	movt	r2, #36489	@ 0x8e89
 8014d6a:	2901      	cmp	r1, #1
 8014d6c:	bf08      	it	eq
 8014d6e:	4602      	moveq	r2, r0
 8014d70:	68a8      	ldr	r0, [r5, #8]
 8014d72:	f245 5155 	movw	r1, #21845	@ 0x5555
 8014d76:	f2c0 0155 	movt	r1, #85	@ 0x55
 8014d7a:	f361 0017 	bfi	r0, r1, #0, #24
 8014d7e:	606a      	str	r2, [r5, #4]
 8014d80:	60a8      	str	r0, [r5, #8]
 8014d82:	f8db 0030 	ldr.w	r0, [fp, #48]	@ 0x30
 8014d86:	f898 1008 	ldrb.w	r1, [r8, #8]
 8014d8a:	f361 0002 	bfi	r0, r1, #0, #3
 8014d8e:	f8cb 0030 	str.w	r0, [fp, #48]	@ 0x30
 8014d92:	f8db 0000 	ldr.w	r0, [fp]
 8014d96:	2106      	movs	r1, #6
 8014d98:	f361 0004 	bfi	r0, r1, #0, #5
 8014d9c:	f8cb 0000 	str.w	r0, [fp]
 8014da0:	f646 7064 	movw	r0, #28516	@ 0x6f64
 8014da4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014da8:	7800      	ldrb	r0, [r0, #0]
 8014daa:	2801      	cmp	r0, #1
 8014dac:	d105      	bne.n	8014dba <llhwc_set_init_param+0x2d4>
 8014dae:	f8db 0034 	ldr.w	r0, [fp, #52]	@ 0x34
 8014db2:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8014db6:	f8cb 0034 	str.w	r0, [fp, #52]	@ 0x34
 8014dba:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 8014dbe:	2128      	movs	r1, #40	@ 0x28
 8014dc0:	73e9      	strb	r1, [r5, #15]
 8014dc2:	b116      	cbz	r6, 8014dca <llhwc_set_init_param+0x2e4>
 8014dc4:	f00b fbf4 	bl	80205b0 <llhwc_cmn_get_desc>
 8014dc8:	e002      	b.n	8014dd0 <llhwc_set_init_param+0x2ea>
 8014dca:	2101      	movs	r1, #1
 8014dcc:	f00a fef2 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 8014dd0:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 8014dd4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014dd8:	2230      	movs	r2, #48	@ 0x30
 8014dda:	4604      	mov	r4, r0
 8014ddc:	f00b fd32 	bl	8020844 <ble_memcpy>
 8014de0:	f8da 0408 	ldr.w	r0, [sl, #1032]	@ 0x408
 8014de4:	f364 000f 	bfi	r0, r4, #0, #16
 8014de8:	f8ca 0408 	str.w	r0, [sl, #1032]	@ 0x408
 8014dec:	2000      	movs	r0, #0
 8014dee:	b003      	add	sp, #12
 8014df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014df4 <llhwc_set_conn_evnt_param>:
 8014df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df8:	b089      	sub	sp, #36	@ 0x24
 8014dfa:	460f      	mov	r7, r1
 8014dfc:	4682      	mov	sl, r0
 8014dfe:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8014e02:	f248 2500 	movw	r5, #33280	@ 0x8200
 8014e06:	9207      	str	r2, [sp, #28]
 8014e08:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8014e0c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014e10:	f7ff fc80 	bl	8014714 <llhwc_get_sm_mode_from_event_type>
 8014e14:	4681      	mov	r9, r0
 8014e16:	f240 10d4 	movw	r0, #468	@ 0x1d4
 8014e1a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8014e1e:	6006      	str	r6, [r0, #0]
 8014e20:	201e      	movs	r0, #30
 8014e22:	f006 fdc3 	bl	801b9ac <bsp_debug_gpio_set>
 8014e26:	f247 36e8 	movw	r6, #29672	@ 0x73e8
 8014e2a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8014e2e:	4630      	mov	r0, r6
 8014e30:	2100      	movs	r1, #0
 8014e32:	2224      	movs	r2, #36	@ 0x24
 8014e34:	f00b fd56 	bl	80208e4 <ble_memset>
 8014e38:	f105 0010 	add.w	r0, r5, #16
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	2214      	movs	r2, #20
 8014e40:	f00b fd50 	bl	80208e4 <ble_memset>
 8014e44:	f04f 30ff 	mov.w	r0, #4294967295
 8014e48:	8030      	strh	r0, [r6, #0]
 8014e4a:	f248 2008 	movw	r0, #33288	@ 0x8208
 8014e4e:	8028      	strh	r0, [r5, #0]
 8014e50:	f44f 4002 	mov.w	r0, #33280	@ 0x8200
 8014e54:	f646 5858 	movw	r8, #27992	@ 0x6d58
 8014e58:	8128      	strh	r0, [r5, #8]
 8014e5a:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8014e5e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014e62:	b110      	cbz	r0, 8014e6a <llhwc_set_conn_evnt_param+0x76>
 8014e64:	2001      	movs	r0, #1
 8014e66:	f888 0030 	strb.w	r0, [r8, #48]	@ 0x30
 8014e6a:	78b8      	ldrb	r0, [r7, #2]
 8014e6c:	2102      	movs	r1, #2
 8014e6e:	1e42      	subs	r2, r0, #1
 8014e70:	f8d8 0028 	ldr.w	r0, [r8, #40]	@ 0x28
 8014e74:	2a01      	cmp	r2, #1
 8014e76:	f888 1031 	strb.w	r1, [r8, #49]	@ 0x31
 8014e7a:	d80a      	bhi.n	8014e92 <llhwc_set_conn_evnt_param+0x9e>
 8014e7c:	2102      	movs	r1, #2
 8014e7e:	f00a fe99 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 8014e82:	9002      	str	r0, [sp, #8]
 8014e84:	3030      	adds	r0, #48	@ 0x30
 8014e86:	2100      	movs	r1, #0
 8014e88:	2230      	movs	r2, #48	@ 0x30
 8014e8a:	8030      	strh	r0, [r6, #0]
 8014e8c:	f00b fd2a 	bl	80208e4 <ble_memset>
 8014e90:	e003      	b.n	8014e9a <llhwc_set_conn_evnt_param+0xa6>
 8014e92:	2101      	movs	r1, #1
 8014e94:	f00a fe8e 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 8014e98:	9002      	str	r0, [sp, #8]
 8014e9a:	7838      	ldrb	r0, [r7, #0]
 8014e9c:	6a31      	ldr	r1, [r6, #32]
 8014e9e:	f000 0001 	and.w	r0, r0, #1
 8014ea2:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8014ea6:	ea41 6040 	orr.w	r0, r1, r0, lsl #25
 8014eaa:	6230      	str	r0, [r6, #32]
 8014eac:	7879      	ldrb	r1, [r7, #1]
 8014eae:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8014eb2:	f001 0101 	and.w	r1, r1, #1
 8014eb6:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8014eba:	6230      	str	r0, [r6, #32]
 8014ebc:	9807      	ldr	r0, [sp, #28]
 8014ebe:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
 8014ec2:	2804      	cmp	r0, #4
 8014ec4:	d105      	bne.n	8014ed2 <llhwc_set_conn_evnt_param+0xde>
 8014ec6:	68b0      	ldr	r0, [r6, #8]
 8014ec8:	f04f 4161 	mov.w	r1, #3774873600	@ 0xe1000000
 8014ecc:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8014ed0:	e00c      	b.n	8014eec <llhwc_set_conn_evnt_param+0xf8>
 8014ed2:	f24e 117a 	movw	r1, #57722	@ 0xe17a
 8014ed6:	f6c0 0102 	movt	r1, #2050	@ 0x802
 8014eda:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
 8014ede:	68b1      	ldr	r1, [r6, #8]
 8014ee0:	f04f 52e8 	mov.w	r2, #486539264	@ 0x1d000000
 8014ee4:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8014ee8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8014eec:	4308      	orrs	r0, r1
 8014eee:	f247 11a8 	movw	r1, #29096	@ 0x71a8
 8014ef2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014ef6:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8014efa:	9c07      	ldr	r4, [sp, #28]
 8014efc:	74f2      	strb	r2, [r6, #19]
 8014efe:	6922      	ldr	r2, [r4, #16]
 8014f00:	70b1      	strb	r1, [r6, #2]
 8014f02:	1d91      	adds	r1, r2, #6
 8014f04:	60b0      	str	r0, [r6, #8]
 8014f06:	6171      	str	r1, [r6, #20]
 8014f08:	f8da 1000 	ldr.w	r1, [sl]
 8014f0c:	0e00      	lsrs	r0, r0, #24
 8014f0e:	f360 611f 	bfi	r1, r0, #24, #8
 8014f12:	60b1      	str	r1, [r6, #8]
 8014f14:	f8da 0004 	ldr.w	r0, [sl, #4]
 8014f18:	f640 010c 	movw	r1, #2060	@ 0x80c
 8014f1c:	6070      	str	r0, [r6, #4]
 8014f1e:	20fb      	movs	r0, #251	@ 0xfb
 8014f20:	73f0      	strb	r0, [r6, #15]
 8014f22:	7820      	ldrb	r0, [r4, #0]
 8014f24:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8014f28:	f888 002d 	strb.w	r0, [r8, #45]	@ 0x2d
 8014f2c:	680a      	ldr	r2, [r1, #0]
 8014f2e:	280a      	cmp	r0, #10
 8014f30:	f369 0204 	bfi	r2, r9, #0, #5
 8014f34:	600a      	str	r2, [r1, #0]
 8014f36:	684a      	ldr	r2, [r1, #4]
 8014f38:	f240 0b00 	movw	fp, #0
 8014f3c:	f360 0205 	bfi	r2, r0, #0, #6
 8014f40:	604a      	str	r2, [r1, #4]
 8014f42:	f04f 0101 	mov.w	r1, #1
 8014f46:	bf88      	it	hi
 8014f48:	2102      	movhi	r1, #2
 8014f4a:	4408      	add	r0, r1
 8014f4c:	b2c0      	uxtb	r0, r0
 8014f4e:	2101      	movs	r1, #1
 8014f50:	2201      	movs	r2, #1
 8014f52:	2501      	movs	r5, #1
 8014f54:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 8014f58:	f007 feaf 	bl	801ccba <llhwc_phy_set_ch_config>
 8014f5c:	6a20      	ldr	r0, [r4, #32]
 8014f5e:	f7ff fa04 	bl	801436a <llhwc_switch_rate>
 8014f62:	f10d 0023 	add.w	r0, sp, #35	@ 0x23
 8014f66:	f00d fc1c 	bl	80227a2 <db_get_tx_power_value>
 8014f6a:	f99d 1023 	ldrsb.w	r1, [sp, #35]	@ 0x23
 8014f6e:	2001      	movs	r0, #1
 8014f70:	2200      	movs	r2, #0
 8014f72:	2301      	movs	r3, #1
 8014f74:	9500      	str	r5, [sp, #0]
 8014f76:	f009 fa50 	bl	801e41a <ll_tx_pwr_if_tx_pwr_params_config>
 8014f7a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8014f7e:	7d22      	ldrb	r2, [r4, #20]
 8014f80:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 8014f84:	2300      	movs	r3, #0
 8014f86:	4308      	orrs	r0, r1
 8014f88:	bf08      	it	eq
 8014f8a:	f04f 33ff 	moveq.w	r3, #4294967295
 8014f8e:	fab0 f180 	clz	r1, r0
 8014f92:	0949      	lsrs	r1, r1, #5
 8014f94:	428a      	cmp	r2, r1
 8014f96:	9304      	str	r3, [sp, #16]
 8014f98:	d10c      	bne.n	8014fb4 <llhwc_set_conn_evnt_param+0x1c0>
 8014f9a:	f04f 0900 	mov.w	r9, #0
 8014f9e:	2800      	cmp	r0, #0
 8014fa0:	f04f 0a00 	mov.w	sl, #0
 8014fa4:	f04f 0000 	mov.w	r0, #0
 8014fa8:	f04f 0500 	mov.w	r5, #0
 8014fac:	9005      	str	r0, [sp, #20]
 8014fae:	f000 8181 	beq.w	80152b4 <llhwc_set_conn_evnt_param+0x4c0>
 8014fb2:	e1ef      	b.n	8015394 <llhwc_set_conn_evnt_param+0x5a0>
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014fba:	9006      	str	r0, [sp, #24]
 8014fbc:	2500      	movs	r5, #0
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	f04f 0a00 	mov.w	sl, #0
 8014fc4:	f04f 0900 	mov.w	r9, #0
 8014fc8:	2400      	movs	r4, #0
 8014fca:	9005      	str	r0, [sp, #20]
 8014fcc:	9703      	str	r7, [sp, #12]
 8014fce:	bf00      	nop
 8014fd0:	9806      	ldr	r0, [sp, #24]
 8014fd2:	b138      	cbz	r0, 8014fe4 <llhwc_set_conn_evnt_param+0x1f0>
 8014fd4:	f1b9 0f00 	cmp.w	r9, #0
 8014fd8:	d00e      	beq.n	8014ff8 <llhwc_set_conn_evnt_param+0x204>
 8014fda:	f04f 0b00 	mov.w	fp, #0
 8014fde:	2001      	movs	r0, #1
 8014fe0:	e02a      	b.n	8015038 <llhwc_set_conn_evnt_param+0x244>
 8014fe2:	bf00      	nop
 8014fe4:	b1a4      	cbz	r4, 8015010 <llhwc_set_conn_evnt_param+0x21c>
 8014fe6:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8014fea:	4620      	mov	r0, r4
 8014fec:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8014ff0:	f005 fc50 	bl	801a894 <allocate_data_packet>
 8014ff4:	4604      	mov	r4, r0
 8014ff6:	e018      	b.n	801502a <llhwc_set_conn_evnt_param+0x236>
 8014ff8:	f646 6100 	movw	r1, #28160	@ 0x6e00
 8014ffc:	2000      	movs	r0, #0
 8014ffe:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015002:	6008      	str	r0, [r1, #0]
 8015004:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8015008:	83f0      	strh	r0, [r6, #30]
 801500a:	2001      	movs	r0, #1
 801500c:	9006      	str	r0, [sp, #24]
 801500e:	e062      	b.n	80150d6 <llhwc_set_conn_evnt_param+0x2e2>
 8015010:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8015014:	2000      	movs	r0, #0
 8015016:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801501a:	f005 fc3b 	bl	801a894 <allocate_data_packet>
 801501e:	4604      	mov	r4, r0
 8015020:	f646 6000 	movw	r0, #28160	@ 0x6e00
 8015024:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015028:	6004      	str	r4, [r0, #0]
 801502a:	b374      	cbz	r4, 801508a <llhwc_set_conn_evnt_param+0x296>
 801502c:	f1b9 0f00 	cmp.w	r9, #0
 8015030:	d043      	beq.n	80150ba <llhwc_set_conn_evnt_param+0x2c6>
 8015032:	f04f 0b01 	mov.w	fp, #1
 8015036:	2000      	movs	r0, #0
 8015038:	9006      	str	r0, [sp, #24]
 801503a:	b2e8      	uxtb	r0, r5
 801503c:	2801      	cmp	r0, #1
 801503e:	d821      	bhi.n	8015084 <llhwc_set_conn_evnt_param+0x290>
 8015040:	9807      	ldr	r0, [sp, #28]
 8015042:	6980      	ldr	r0, [r0, #24]
 8015044:	f850 6029 	ldr.w	r6, [r0, r9, lsl #2]
 8015048:	f248 2000 	movw	r0, #33280	@ 0x8200
 801504c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8015050:	4286      	cmp	r6, r0
 8015052:	d01c      	beq.n	801508e <llhwc_set_conn_evnt_param+0x29a>
 8015054:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 8015058:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 801505c:	46a8      	mov	r8, r5
 801505e:	1835      	adds	r5, r6, r0
 8015060:	4627      	mov	r7, r4
 8015062:	f856 4d04 	ldr.w	r4, [r6, #-4]!
 8015066:	2100      	movs	r1, #0
 8015068:	2204      	movs	r2, #4
 801506a:	4630      	mov	r0, r6
 801506c:	f00b fc3a 	bl	80208e4 <ble_memset>
 8015070:	6830      	ldr	r0, [r6, #0]
 8015072:	0ea1      	lsrs	r1, r4, #26
 8015074:	f361 609a 	bfi	r0, r1, #26, #1
 8015078:	6030      	str	r0, [r6, #0]
 801507a:	4646      	mov	r6, r8
 801507c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015080:	463c      	mov	r4, r7
 8015082:	e07e      	b.n	8015182 <llhwc_set_conn_evnt_param+0x38e>
 8015084:	462e      	mov	r6, r5
 8015086:	4655      	mov	r5, sl
 8015088:	e09e      	b.n	80151c8 <llhwc_set_conn_evnt_param+0x3d4>
 801508a:	2400      	movs	r4, #0
 801508c:	e7a2      	b.n	8014fd4 <llhwc_set_conn_evnt_param+0x1e0>
 801508e:	0628      	lsls	r0, r5, #24
 8015090:	4628      	mov	r0, r5
 8015092:	f248 2508 	movw	r5, #33288	@ 0x8208
 8015096:	bf08      	it	eq
 8015098:	f44f 4502 	moveq.w	r5, #33280	@ 0x8200
 801509c:	f5ba 4f02 	cmp.w	sl, #33280	@ 0x8200
 80150a0:	f100 0601 	add.w	r6, r0, #1
 80150a4:	d06d      	beq.n	8015182 <llhwc_set_conn_evnt_param+0x38e>
 80150a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80150aa:	4582      	cmp	sl, r0
 80150ac:	d15a      	bne.n	8015164 <llhwc_set_conn_evnt_param+0x370>
 80150ae:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80150b2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80150b6:	6800      	ldr	r0, [r0, #0]
 80150b8:	e05b      	b.n	8015172 <llhwc_set_conn_evnt_param+0x37e>
 80150ba:	8820      	ldrh	r0, [r4, #0]
 80150bc:	2204      	movs	r2, #4
 80150be:	3804      	subs	r0, #4
 80150c0:	83f0      	strh	r0, [r6, #30]
 80150c2:	b280      	uxth	r0, r0
 80150c4:	8961      	ldrh	r1, [r4, #10]
 80150c6:	2300      	movs	r3, #0
 80150c8:	4408      	add	r0, r1
 80150ca:	ea40 000b 	orr.w	r0, r0, fp
 80150ce:	2100      	movs	r1, #0
 80150d0:	9306      	str	r3, [sp, #24]
 80150d2:	f00b fc07 	bl	80208e4 <ble_memset>
 80150d6:	9807      	ldr	r0, [sp, #28]
 80150d8:	f248 2100 	movw	r1, #33280	@ 0x8200
 80150dc:	6980      	ldr	r0, [r0, #24]
 80150de:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80150e2:	6800      	ldr	r0, [r0, #0]
 80150e4:	46a0      	mov	r8, r4
 80150e6:	4288      	cmp	r0, r1
 80150e8:	d018      	beq.n	801511c <llhwc_set_conn_evnt_param+0x328>
 80150ea:	3804      	subs	r0, #4
 80150ec:	b281      	uxth	r1, r0
 80150ee:	83b0      	strh	r0, [r6, #28]
 80150f0:	ea41 000b 	orr.w	r0, r1, fp
 80150f4:	463c      	mov	r4, r7
 80150f6:	462f      	mov	r7, r5
 80150f8:	6805      	ldr	r5, [r0, #0]
 80150fa:	2100      	movs	r1, #0
 80150fc:	2204      	movs	r2, #4
 80150fe:	f00b fbf1 	bl	80208e4 <ble_memset>
 8015102:	8bb0      	ldrh	r0, [r6, #28]
 8015104:	0eaa      	lsrs	r2, r5, #26
 8015106:	ea40 000b 	orr.w	r0, r0, fp
 801510a:	6801      	ldr	r1, [r0, #0]
 801510c:	463d      	mov	r5, r7
 801510e:	f362 619a 	bfi	r1, r2, #26, #1
 8015112:	6001      	str	r1, [r0, #0]
 8015114:	f8b6 a01c 	ldrh.w	sl, [r6, #28]
 8015118:	4627      	mov	r7, r4
 801511a:	e004      	b.n	8015126 <llhwc_set_conn_evnt_param+0x332>
 801511c:	f44f 4a02 	mov.w	sl, #33280	@ 0x8200
 8015120:	3501      	adds	r5, #1
 8015122:	f8a6 a01c 	strh.w	sl, [r6, #28]
 8015126:	9807      	ldr	r0, [sp, #28]
 8015128:	8bf1      	ldrh	r1, [r6, #30]
 801512a:	f890 0020 	ldrb.w	r0, [r0, #32]
 801512e:	9105      	str	r1, [sp, #20]
 8015130:	2804      	cmp	r0, #4
 8015132:	d10c      	bne.n	801514e <llhwc_set_conn_evnt_param+0x35a>
 8015134:	9807      	ldr	r0, [sp, #28]
 8015136:	4644      	mov	r4, r8
 8015138:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801513a:	2801      	cmp	r0, #1
 801513c:	d009      	beq.n	8015152 <llhwc_set_conn_evnt_param+0x35e>
 801513e:	2802      	cmp	r0, #2
 8015140:	d10d      	bne.n	801515e <llhwc_set_conn_evnt_param+0x36a>
 8015142:	ea4a 000b 	orr.w	r0, sl, fp
 8015146:	6801      	ldr	r1, [r0, #0]
 8015148:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 801514c:	e006      	b.n	801515c <llhwc_set_conn_evnt_param+0x368>
 801514e:	4644      	mov	r4, r8
 8015150:	e005      	b.n	801515e <llhwc_set_conn_evnt_param+0x36a>
 8015152:	ea4a 000b 	orr.w	r0, sl, fp
 8015156:	6801      	ldr	r1, [r0, #0]
 8015158:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 801515c:	6001      	str	r1, [r0, #0]
 801515e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015162:	e060      	b.n	8015226 <llhwc_set_conn_evnt_param+0x432>
 8015164:	f240 10d4 	movw	r0, #468	@ 0x1d4
 8015168:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801516c:	f8c0 a000 	str.w	sl, [r0]
 8015170:	4650      	mov	r0, sl
 8015172:	2100      	movs	r1, #0
 8015174:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8015178:	4408      	add	r0, r1
 801517a:	7901      	ldrb	r1, [r0, #4]
 801517c:	f001 01ef 	and.w	r1, r1, #239	@ 0xef
 8015180:	7101      	strb	r1, [r0, #4]
 8015182:	2100      	movs	r1, #0
 8015184:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8015188:	f85a 0001 	ldr.w	r0, [sl, r1]
 801518c:	f365 000f 	bfi	r0, r5, #0, #16
 8015190:	f84a 0001 	str.w	r0, [sl, r1]
 8015194:	9807      	ldr	r0, [sp, #28]
 8015196:	f890 0020 	ldrb.w	r0, [r0, #32]
 801519a:	2804      	cmp	r0, #4
 801519c:	d114      	bne.n	80151c8 <llhwc_set_conn_evnt_param+0x3d4>
 801519e:	9807      	ldr	r0, [sp, #28]
 80151a0:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80151a2:	2801      	cmp	r0, #1
 80151a4:	d008      	beq.n	80151b8 <llhwc_set_conn_evnt_param+0x3c4>
 80151a6:	2802      	cmp	r0, #2
 80151a8:	d10e      	bne.n	80151c8 <llhwc_set_conn_evnt_param+0x3d4>
 80151aa:	2100      	movs	r1, #0
 80151ac:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80151b0:	5868      	ldr	r0, [r5, r1]
 80151b2:	f020 6000 	bic.w	r0, r0, #134217728	@ 0x8000000
 80151b6:	e005      	b.n	80151c4 <llhwc_set_conn_evnt_param+0x3d0>
 80151b8:	2100      	movs	r1, #0
 80151ba:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80151be:	5868      	ldr	r0, [r5, r1]
 80151c0:	f040 6000 	orr.w	r0, r0, #134217728	@ 0x8000000
 80151c4:	5068      	str	r0, [r5, r1]
 80151c6:	bf00      	nop
 80151c8:	f1bb 0f00 	cmp.w	fp, #0
 80151cc:	d020      	beq.n	8015210 <llhwc_set_conn_evnt_param+0x41c>
 80151ce:	6820      	ldr	r0, [r4, #0]
 80151d0:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80151d4:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 80151d8:	4627      	mov	r7, r4
 80151da:	1844      	adds	r4, r0, r1
 80151dc:	3804      	subs	r0, #4
 80151de:	2100      	movs	r1, #0
 80151e0:	2204      	movs	r2, #4
 80151e2:	f00b fb7f 	bl	80208e4 <ble_memset>
 80151e6:	f240 0b00 	movw	fp, #0
 80151ea:	9905      	ldr	r1, [sp, #20]
 80151ec:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 80151f0:	f851 000b 	ldr.w	r0, [r1, fp]
 80151f4:	46aa      	mov	sl, r5
 80151f6:	f364 000f 	bfi	r0, r4, #0, #16
 80151fa:	f841 000b 	str.w	r0, [r1, fp]
 80151fe:	9405      	str	r4, [sp, #20]
 8015200:	463c      	mov	r4, r7
 8015202:	4635      	mov	r5, r6
 8015204:	f247 36e8 	movw	r6, #29672	@ 0x73e8
 8015208:	9f03      	ldr	r7, [sp, #12]
 801520a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801520e:	e00a      	b.n	8015226 <llhwc_set_conn_evnt_param+0x432>
 8015210:	46aa      	mov	sl, r5
 8015212:	4635      	mov	r5, r6
 8015214:	f247 36e8 	movw	r6, #29672	@ 0x73e8
 8015218:	9f03      	ldr	r7, [sp, #12]
 801521a:	f240 0b00 	movw	fp, #0
 801521e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8015222:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 8015226:	9807      	ldr	r0, [sp, #28]
 8015228:	6980      	ldr	r0, [r0, #24]
 801522a:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 801522e:	7801      	ldrb	r1, [r0, #0]
 8015230:	f001 0103 	and.w	r1, r1, #3
 8015234:	2903      	cmp	r1, #3
 8015236:	d10e      	bne.n	8015256 <llhwc_set_conn_evnt_param+0x462>
 8015238:	7901      	ldrb	r1, [r0, #4]
 801523a:	f041 0120 	orr.w	r1, r1, #32
 801523e:	2922      	cmp	r1, #34	@ 0x22
 8015240:	d109      	bne.n	8015256 <llhwc_set_conn_evnt_param+0x462>
 8015242:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 8015246:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 801524a:	4408      	add	r0, r1
 801524c:	f646 6104 	movw	r1, #28164	@ 0x6e04
 8015250:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015254:	6008      	str	r0, [r1, #0]
 8015256:	78b8      	ldrb	r0, [r7, #2]
 8015258:	2801      	cmp	r0, #1
 801525a:	d115      	bne.n	8015288 <llhwc_set_conn_evnt_param+0x494>
 801525c:	f10b 0004 	add.w	r0, fp, #4
 8015260:	f85a 1000 	ldr.w	r1, [sl, r0]
 8015264:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015268:	b171      	cbz	r1, 8015288 <llhwc_set_conn_evnt_param+0x494>
 801526a:	f85a 200b 	ldr.w	r2, [sl, fp]
 801526e:	0152      	lsls	r2, r2, #5
 8015270:	d40a      	bmi.n	8015288 <llhwc_set_conn_evnt_param+0x494>
 8015272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015276:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 801527a:	f85a 2000 	ldr.w	r2, [sl, r0]
 801527e:	0a09      	lsrs	r1, r1, #8
 8015280:	f361 220f 	bfi	r2, r1, #8, #8
 8015284:	f84a 2000 	str.w	r2, [sl, r0]
 8015288:	9807      	ldr	r0, [sp, #28]
 801528a:	f109 0901 	add.w	r9, r9, #1
 801528e:	7d00      	ldrb	r0, [r0, #20]
 8015290:	4440      	add	r0, r8
 8015292:	4581      	cmp	r9, r0
 8015294:	f4ff ae9c 	bcc.w	8014fd0 <llhwc_set_conn_evnt_param+0x1dc>
 8015298:	9807      	ldr	r0, [sp, #28]
 801529a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
 801529e:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 80152a2:	4308      	orrs	r0, r1
 80152a4:	d116      	bne.n	80152d4 <llhwc_set_conn_evnt_param+0x4e0>
 80152a6:	b2e8      	uxtb	r0, r5
 80152a8:	f646 5858 	movw	r8, #27992	@ 0x6d58
 80152ac:	2801      	cmp	r0, #1
 80152ae:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80152b2:	d84e      	bhi.n	8015352 <llhwc_set_conn_evnt_param+0x55e>
 80152b4:	9807      	ldr	r0, [sp, #28]
 80152b6:	f248 2100 	movw	r1, #33280	@ 0x8200
 80152ba:	6980      	ldr	r0, [r0, #24]
 80152bc:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80152c0:	f850 0029 	ldr.w	r0, [r0, r9, lsl #2]
 80152c4:	4288      	cmp	r0, r1
 80152c6:	d00a      	beq.n	80152de <llhwc_set_conn_evnt_param+0x4ea>
 80152c8:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 80152cc:	f2cb 71fd 	movt	r1, #47101	@ 0xb7fd
 80152d0:	4408      	add	r0, r1
 80152d2:	e021      	b.n	8015318 <llhwc_set_conn_evnt_param+0x524>
 80152d4:	f646 5858 	movw	r8, #27992	@ 0x6d58
 80152d8:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80152dc:	e052      	b.n	8015384 <llhwc_set_conn_evnt_param+0x590>
 80152de:	f5ba 4f02 	cmp.w	sl, #33280	@ 0x8200
 80152e2:	f105 0501 	add.w	r5, r5, #1
 80152e6:	d015      	beq.n	8015314 <llhwc_set_conn_evnt_param+0x520>
 80152e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80152ec:	4582      	cmp	sl, r0
 80152ee:	d105      	bne.n	80152fc <llhwc_set_conn_evnt_param+0x508>
 80152f0:	f240 10d4 	movw	r0, #468	@ 0x1d4
 80152f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80152f8:	6800      	ldr	r0, [r0, #0]
 80152fa:	e006      	b.n	801530a <llhwc_set_conn_evnt_param+0x516>
 80152fc:	f240 10d4 	movw	r0, #468	@ 0x1d4
 8015300:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015304:	f8c0 a000 	str.w	sl, [r0]
 8015308:	4650      	mov	r0, sl
 801530a:	4458      	add	r0, fp
 801530c:	7901      	ldrb	r1, [r0, #4]
 801530e:	f001 01ef 	and.w	r1, r1, #239	@ 0xef
 8015312:	7101      	strb	r1, [r0, #4]
 8015314:	f248 2008 	movw	r0, #33288	@ 0x8208
 8015318:	f85a 100b 	ldr.w	r1, [sl, fp]
 801531c:	f360 010f 	bfi	r1, r0, #0, #16
 8015320:	f84a 100b 	str.w	r1, [sl, fp]
 8015324:	9907      	ldr	r1, [sp, #28]
 8015326:	f891 1020 	ldrb.w	r1, [r1, #32]
 801532a:	2904      	cmp	r1, #4
 801532c:	d110      	bne.n	8015350 <llhwc_set_conn_evnt_param+0x55c>
 801532e:	9907      	ldr	r1, [sp, #28]
 8015330:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8015332:	2901      	cmp	r1, #1
 8015334:	d006      	beq.n	8015344 <llhwc_set_conn_evnt_param+0x550>
 8015336:	2902      	cmp	r1, #2
 8015338:	d10a      	bne.n	8015350 <llhwc_set_conn_evnt_param+0x55c>
 801533a:	f850 100b 	ldr.w	r1, [r0, fp]
 801533e:	f021 6100 	bic.w	r1, r1, #134217728	@ 0x8000000
 8015342:	e003      	b.n	801534c <llhwc_set_conn_evnt_param+0x558>
 8015344:	f850 100b 	ldr.w	r1, [r0, fp]
 8015348:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 801534c:	f840 100b 	str.w	r1, [r0, fp]
 8015350:	4682      	mov	sl, r0
 8015352:	78b8      	ldrb	r0, [r7, #2]
 8015354:	2801      	cmp	r0, #1
 8015356:	d115      	bne.n	8015384 <llhwc_set_conn_evnt_param+0x590>
 8015358:	f10b 0004 	add.w	r0, fp, #4
 801535c:	f85a 1000 	ldr.w	r1, [sl, r0]
 8015360:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015364:	b171      	cbz	r1, 8015384 <llhwc_set_conn_evnt_param+0x590>
 8015366:	f85a 200b 	ldr.w	r2, [sl, fp]
 801536a:	0152      	lsls	r2, r2, #5
 801536c:	d40a      	bmi.n	8015384 <llhwc_set_conn_evnt_param+0x590>
 801536e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015372:	eb02 2101 	add.w	r1, r2, r1, lsl #8
 8015376:	f85a 2000 	ldr.w	r2, [sl, r0]
 801537a:	0a09      	lsrs	r1, r1, #8
 801537c:	f361 220f 	bfi	r2, r1, #8, #8
 8015380:	f84a 2000 	str.w	r2, [sl, r0]
 8015384:	0628      	lsls	r0, r5, #24
 8015386:	d005      	beq.n	8015394 <llhwc_set_conn_evnt_param+0x5a0>
 8015388:	b2e8      	uxtb	r0, r5
 801538a:	2801      	cmp	r0, #1
 801538c:	d109      	bne.n	80153a2 <llhwc_set_conn_evnt_param+0x5ae>
 801538e:	f1b9 0f00 	cmp.w	r9, #0
 8015392:	d006      	beq.n	80153a2 <llhwc_set_conn_evnt_param+0x5ae>
 8015394:	f85a 000b 	ldr.w	r0, [sl, fp]
 8015398:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801539c:	4308      	orrs	r0, r1
 801539e:	f84a 000b 	str.w	r0, [sl, fp]
 80153a2:	78b8      	ldrb	r0, [r7, #2]
 80153a4:	2801      	cmp	r0, #1
 80153a6:	d106      	bne.n	80153b6 <llhwc_set_conn_evnt_param+0x5c2>
 80153a8:	7bf0      	ldrb	r0, [r6, #15]
 80153aa:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80153ae:	eb01 6000 	add.w	r0, r1, r0, lsl #24
 80153b2:	0e00      	lsrs	r0, r0, #24
 80153b4:	73f0      	strb	r0, [r6, #15]
 80153b6:	9a05      	ldr	r2, [sp, #20]
 80153b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80153bc:	4282      	cmp	r2, r0
 80153be:	d004      	beq.n	80153ca <llhwc_set_conn_evnt_param+0x5d6>
 80153c0:	f852 100b 	ldr.w	r1, [r2, fp]
 80153c4:	4308      	orrs	r0, r1
 80153c6:	f842 000b 	str.w	r0, [r2, fp]
 80153ca:	9a07      	ldr	r2, [sp, #28]
 80153cc:	78f0      	ldrb	r0, [r6, #3]
 80153ce:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80153d2:	f009 011f 	and.w	r1, r9, #31
 80153d6:	f000 00e0 	and.w	r0, r0, #224	@ 0xe0
 80153da:	4408      	add	r0, r1
 80153dc:	70f0      	strb	r0, [r6, #3]
 80153de:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80153e2:	8bb0      	ldrh	r0, [r6, #28]
 80153e4:	9c02      	ldr	r4, [sp, #8]
 80153e6:	ea40 000b 	orr.w	r0, r0, fp
 80153ea:	78c1      	ldrb	r1, [r0, #3]
 80153ec:	2230      	movs	r2, #48	@ 0x30
 80153ee:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80153f2:	70c1      	strb	r1, [r0, #3]
 80153f4:	4620      	mov	r0, r4
 80153f6:	4631      	mov	r1, r6
 80153f8:	f00b fa24 	bl	8020844 <ble_memcpy>
 80153fc:	f8db 0408 	ldr.w	r0, [fp, #1032]	@ 0x408
 8015400:	f364 000f 	bfi	r0, r4, #0, #16
 8015404:	f8cb 0408 	str.w	r0, [fp, #1032]	@ 0x408
 8015408:	201e      	movs	r0, #30
 801540a:	f006 fad1 	bl	801b9b0 <bsp_debug_gpio_clear>
 801540e:	2000      	movs	r0, #0
 8015410:	b009      	add	sp, #36	@ 0x24
 8015412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015416 <llhwc_conn_evnt_en_encry>:
 8015416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801541a:	b081      	sub	sp, #4
 801541c:	468b      	mov	fp, r1
 801541e:	f646 5158 	movw	r1, #27992	@ 0x6d58
 8015422:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015426:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8015428:	4680      	mov	r8, r0
 801542a:	4608      	mov	r0, r1
 801542c:	f00b f8f0 	bl	8020610 <llhwc_cmn_get_enc_desc>
 8015430:	4604      	mov	r4, r0
 8015432:	e9db 0202 	ldrd	r0, r2, [fp, #8]
 8015436:	f89b 501e 	ldrb.w	r5, [fp, #30]
 801543a:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 801543e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8015442:	4310      	orrs	r0, r2
 8015444:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015448:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801544c:	d128      	bne.n	80154a0 <llhwc_conn_evnt_en_encry+0x8a>
 801544e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8015452:	f884 2020 	strb.w	r2, [r4, #32]
 8015456:	4602      	mov	r2, r0
 8015458:	f812 3f08 	ldrb.w	r3, [r2, #8]!
 801545c:	7a47      	ldrb	r7, [r0, #9]
 801545e:	7941      	ldrb	r1, [r0, #5]
 8015460:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8015464:	7892      	ldrb	r2, [r2, #2]
 8015466:	f890 e000 	ldrb.w	lr, [r0]
 801546a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801546e:	4603      	mov	r3, r0
 8015470:	f813 7f04 	ldrb.w	r7, [r3, #4]!
 8015474:	f890 9002 	ldrb.w	r9, [r0, #2]
 8015478:	ea47 2101 	orr.w	r1, r7, r1, lsl #8
 801547c:	f890 a003 	ldrb.w	sl, [r0, #3]
 8015480:	789f      	ldrb	r7, [r3, #2]
 8015482:	78db      	ldrb	r3, [r3, #3]
 8015484:	7846      	ldrb	r6, [r0, #1]
 8015486:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
 801548a:	ea49 290a 	orr.w	r9, r9, sl, lsl #8
 801548e:	ea4e 2706 	orr.w	r7, lr, r6, lsl #8
 8015492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8015496:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 801549a:	f021 0380 	bic.w	r3, r1, #128	@ 0x80
 801549e:	e026      	b.n	80154ee <llhwc_conn_evnt_en_encry+0xd8>
 80154a0:	f002 017f 	and.w	r1, r2, #127	@ 0x7f
 80154a4:	f884 1020 	strb.w	r1, [r4, #32]
 80154a8:	4601      	mov	r1, r0
 80154aa:	f811 2f08 	ldrb.w	r2, [r1, #8]!
 80154ae:	7a43      	ldrb	r3, [r0, #9]
 80154b0:	4606      	mov	r6, r0
 80154b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80154b6:	7889      	ldrb	r1, [r1, #2]
 80154b8:	7943      	ldrb	r3, [r0, #5]
 80154ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80154be:	f816 1f04 	ldrb.w	r1, [r6, #4]!
 80154c2:	f890 9002 	ldrb.w	r9, [r0, #2]
 80154c6:	78c7      	ldrb	r7, [r0, #3]
 80154c8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80154cc:	78b3      	ldrb	r3, [r6, #2]
 80154ce:	78f6      	ldrb	r6, [r6, #3]
 80154d0:	f890 e000 	ldrb.w	lr, [r0]
 80154d4:	ea49 2907 	orr.w	r9, r9, r7, lsl #8
 80154d8:	7847      	ldrb	r7, [r0, #1]
 80154da:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80154de:	ea4e 2707 	orr.w	r7, lr, r7, lsl #8
 80154e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80154e6:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 80154ea:	f041 0380 	orr.w	r3, r1, #128	@ 0x80
 80154ee:	0e39      	lsrs	r1, r7, #24
 80154f0:	70c1      	strb	r1, [r0, #3]
 80154f2:	0c39      	lsrs	r1, r7, #16
 80154f4:	7081      	strb	r1, [r0, #2]
 80154f6:	0a39      	lsrs	r1, r7, #8
 80154f8:	7041      	strb	r1, [r0, #1]
 80154fa:	4601      	mov	r1, r0
 80154fc:	f801 3f04 	strb.w	r3, [r1, #4]!
 8015500:	7007      	strb	r7, [r0, #0]
 8015502:	0e1f      	lsrs	r7, r3, #24
 8015504:	70cf      	strb	r7, [r1, #3]
 8015506:	0c1f      	lsrs	r7, r3, #16
 8015508:	708f      	strb	r7, [r1, #2]
 801550a:	0a19      	lsrs	r1, r3, #8
 801550c:	7141      	strb	r1, [r0, #5]
 801550e:	0a11      	lsrs	r1, r2, #8
 8015510:	7241      	strb	r1, [r0, #9]
 8015512:	f800 2f08 	strb.w	r2, [r0, #8]!
 8015516:	0c11      	lsrs	r1, r2, #16
 8015518:	7081      	strb	r1, [r0, #2]
 801551a:	1d20      	adds	r0, r4, #4
 801551c:	f108 0110 	add.w	r1, r8, #16
 8015520:	2210      	movs	r2, #16
 8015522:	ea4f 691c 	mov.w	r9, ip, lsr #24
 8015526:	f00b f98d 	bl	8020844 <ble_memcpy>
 801552a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801552e:	f89b 101c 	ldrb.w	r1, [fp, #28]
 8015532:	f894 2020 	ldrb.w	r2, [r4, #32]
 8015536:	4408      	add	r0, r1
 8015538:	61e0      	str	r0, [r4, #28]
 801553a:	f89b 001d 	ldrb.w	r0, [fp, #29]
 801553e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8015542:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8015546:	4620      	mov	r0, r4
 8015548:	f810 6f25 	ldrb.w	r6, [r0, #37]!
 801554c:	4411      	add	r1, r2
 801554e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8015552:	f884 1020 	strb.w	r1, [r4, #32]
 8015556:	7881      	ldrb	r1, [r0, #2]
 8015558:	78c2      	ldrb	r2, [r0, #3]
 801555a:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
 801555e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8015562:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8015566:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801556a:	4671      	mov	r1, lr
 801556c:	4623      	mov	r3, r4
 801556e:	f369 611f 	bfi	r1, r9, #24, #8
 8015572:	f803 ef21 	strb.w	lr, [r3, #33]!
 8015576:	f365 0206 	bfi	r2, r5, #0, #7
 801557a:	0c0d      	lsrs	r5, r1, #16
 801557c:	0a09      	lsrs	r1, r1, #8
 801557e:	7002      	strb	r2, [r0, #0]
 8015580:	f883 9003 	strb.w	r9, [r3, #3]
 8015584:	709d      	strb	r5, [r3, #2]
 8015586:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 801558a:	f8d8 7000 	ldr.w	r7, [r8]
 801558e:	f247 3ce8 	movw	ip, #29672	@ 0x73e8
 8015592:	6167      	str	r7, [r4, #20]
 8015594:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015598:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801559c:	61a7      	str	r7, [r4, #24]
 801559e:	f8bc 701c 	ldrh.w	r7, [ip, #28]
 80155a2:	f894 602b 	ldrb.w	r6, [r4, #43]	@ 0x2b
 80155a6:	8067      	strh	r7, [r4, #2]
 80155a8:	f8bc 701e 	ldrh.w	r7, [ip, #30]
 80155ac:	f248 08ff 	movw	r8, #33023	@ 0x80ff
 80155b0:	8027      	strh	r7, [r4, #0]
 80155b2:	f44f 0760 	mov.w	r7, #14680064	@ 0xe00000
 80155b6:	f2c0 0880 	movt	r8, #128	@ 0x80
 80155ba:	ea4f 4c06 	mov.w	ip, r6, lsl #16
 80155be:	ea07 4606 	and.w	r6, r7, r6, lsl #16
 80155c2:	ea02 0708 	and.w	r7, r2, r8
 80155c6:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 80155ca:	0c39      	lsrs	r1, r7, #16
 80155cc:	f506 2880 	add.w	r8, r6, #262144	@ 0x40000
 80155d0:	f507 7680 	add.w	r6, r7, #256	@ 0x100
 80155d4:	7081      	strb	r1, [r0, #2]
 80155d6:	2100      	movs	r1, #0
 80155d8:	70c1      	strb	r1, [r0, #3]
 80155da:	0a31      	lsrs	r1, r6, #8
 80155dc:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
 80155e0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80155e4:	7002      	strb	r2, [r0, #0]
 80155e6:	2001      	movs	r0, #1
 80155e8:	f884 102b 	strb.w	r1, [r4, #43]	@ 0x2b
 80155ec:	f240 4168 	movw	r1, #1128	@ 0x468
 80155f0:	709d      	strb	r5, [r3, #2]
 80155f2:	f883 9003 	strb.w	r9, [r3, #3]
 80155f6:	f883 e000 	strb.w	lr, [r3]
 80155fa:	f884 c029 	strb.w	ip, [r4, #41]	@ 0x29
 80155fe:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
 8015602:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8015606:	680a      	ldr	r2, [r1, #0]
 8015608:	f022 0201 	bic.w	r2, r2, #1
 801560c:	600a      	str	r2, [r1, #0]
 801560e:	698a      	ldr	r2, [r1, #24]
 8015610:	f360 0202 	bfi	r2, r0, #0, #3
 8015614:	618a      	str	r2, [r1, #24]
 8015616:	680a      	ldr	r2, [r1, #0]
 8015618:	f022 0218 	bic.w	r2, r2, #24
 801561c:	600a      	str	r2, [r1, #0]
 801561e:	f8d1 23a0 	ldr.w	r2, [r1, #928]	@ 0x3a0
 8015622:	f360 0245 	bfi	r2, r0, #1, #5
 8015626:	2003      	movs	r0, #3
 8015628:	f8c1 23a0 	str.w	r2, [r1, #928]	@ 0x3a0
 801562c:	f00a f81c 	bl	801f668 <llhwc_cmn_crypto_aes_start>
 8015630:	f640 007c 	movw	r0, #2172	@ 0x87c
 8015634:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8015638:	6801      	ldr	r1, [r0, #0]
 801563a:	f041 0108 	orr.w	r1, r1, #8
 801563e:	6001      	str	r1, [r0, #0]
 8015640:	b001      	add	sp, #4
 8015642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015646 <llhwc_goto_sleep>:
 8015646:	f240 4144 	movw	r1, #1092	@ 0x444
 801564a:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801564e:	6808      	ldr	r0, [r1, #0]
 8015650:	f040 0002 	orr.w	r0, r0, #2
 8015654:	6008      	str	r0, [r1, #0]
 8015656:	6808      	ldr	r0, [r1, #0]
 8015658:	f020 0202 	bic.w	r2, r0, #2
 801565c:	2001      	movs	r0, #1
 801565e:	600a      	str	r2, [r1, #0]
 8015660:	f009 b922 	b.w	801e8a8 <llhwc_pwr_switch>

08015664 <llhwc_get_prdc_clbr_evnt_cfg_time>:
 8015664:	f006 bdd3 	b.w	801c20e <llhwc_phy_get_prdc_clbr_cfg_time>

08015668 <llhwc_get_num_of_prdc_clbr_chnls>:
 8015668:	f006 b9ff 	b.w	801ba6a <llhwc_phy_get_num_of_prdc_clbr_chnls>

0801566c <llhwc_prdc_clbr_exec>:
 801566c:	f646 52a0 	movw	r2, #28064	@ 0x6da0
 8015670:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8015674:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8015676:	2a00      	cmp	r2, #0
 8015678:	bf18      	it	ne
 801567a:	4770      	bxne	lr
 801567c:	f007 ba38 	b.w	801caf0 <llhwc_phy_hndl_runtime_clbr>

08015680 <llhwc_prdc_clbr_init>:
 8015680:	b510      	push	{r4, lr}
 8015682:	f646 5458 	movw	r4, #27992	@ 0x6d58
 8015686:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801568a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801568c:	b100      	cbz	r0, 8015690 <llhwc_prdc_clbr_init+0x10>
 801568e:	bd10      	pop	{r4, pc}
 8015690:	2000      	movs	r0, #0
 8015692:	f006 f9f9 	bl	801ba88 <llhwc_phy_set_phy_clbr_state>
 8015696:	f7f7 ff7c 	bl	800d592 <evnt_schdlr_rgstr_prdc_clbr_evnt>
 801569a:	6360      	str	r0, [r4, #52]	@ 0x34
 801569c:	bd10      	pop	{r4, pc}

0801569e <llhwc_prdc_clbr_deinit>:
 801569e:	b5b0      	push	{r4, r5, r7, lr}
 80156a0:	f646 5458 	movw	r4, #27992	@ 0x6d58
 80156a4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80156a8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80156aa:	b168      	cbz	r0, 80156c8 <llhwc_prdc_clbr_deinit+0x2a>
 80156ac:	2000      	movs	r0, #0
 80156ae:	2500      	movs	r5, #0
 80156b0:	f006 f9ea 	bl	801ba88 <llhwc_phy_set_phy_clbr_state>
 80156b4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80156b6:	f7f8 feeb 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 80156ba:	fab0 f080 	clz	r0, r0
 80156be:	0940      	lsrs	r0, r0, #5
 80156c0:	2101      	movs	r1, #1
 80156c2:	f006 f92c 	bl	801b91e <bsp_assert>
 80156c6:	6365      	str	r5, [r4, #52]	@ 0x34
 80156c8:	bdb0      	pop	{r4, r5, r7, pc}

080156ca <llhwc_set_evnt_hndl>:
 80156ca:	f646 5158 	movw	r1, #27992	@ 0x6d58
 80156ce:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80156d2:	6288      	str	r0, [r1, #40]	@ 0x28
 80156d4:	4770      	bx	lr

080156d6 <llhwc_reset_evnt_hndl>:
 80156d6:	f646 5058 	movw	r0, #27992	@ 0x6d58
 80156da:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80156de:	2100      	movs	r1, #0
 80156e0:	6281      	str	r1, [r0, #40]	@ 0x28
 80156e2:	4770      	bx	lr

080156e4 <llhwc_enable_augment_event>:
 80156e4:	f640 0120 	movw	r1, #2080	@ 0x820
 80156e8:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80156ec:	680a      	ldr	r2, [r1, #0]
 80156ee:	2801      	cmp	r0, #1
 80156f0:	d10b      	bne.n	801570a <llhwc_enable_augment_event+0x26>
 80156f2:	f646 5098 	movw	r0, #28056	@ 0x6d98
 80156f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80156fa:	7900      	ldrb	r0, [r0, #4]
 80156fc:	f360 4298 	bfi	r2, r0, #18, #7
 8015700:	600a      	str	r2, [r1, #0]
 8015702:	6808      	ldr	r0, [r1, #0]
 8015704:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8015708:	e001      	b.n	801570e <llhwc_enable_augment_event+0x2a>
 801570a:	f022 7000 	bic.w	r0, r2, #33554432	@ 0x2000000
 801570e:	6008      	str	r0, [r1, #0]
 8015710:	4770      	bx	lr

08015712 <llhwc_stop_augmented_mode>:
 8015712:	f646 5098 	movw	r0, #28056	@ 0x6d98
 8015716:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801571a:	2100      	movs	r1, #0
 801571c:	7141      	strb	r1, [r0, #5]
 801571e:	4770      	bx	lr

08015720 <llhwc_is_in_augmented_mode>:
 8015720:	f646 5098 	movw	r0, #28056	@ 0x6d98
 8015724:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015728:	7940      	ldrb	r0, [r0, #5]
 801572a:	4770      	bx	lr

0801572c <llhwc_get_dtm_curr_mode>:
 801572c:	b510      	push	{r4, lr}
 801572e:	2101      	movs	r1, #1
 8015730:	4604      	mov	r4, r0
 8015732:	2800      	cmp	r0, #0
 8015734:	bf18      	it	ne
 8015736:	2001      	movne	r0, #1
 8015738:	f006 f8f1 	bl	801b91e <bsp_assert>
 801573c:	f646 5058 	movw	r0, #27992	@ 0x6d58
 8015740:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015744:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8015748:	7020      	strb	r0, [r4, #0]
 801574a:	bd10      	pop	{r4, pc}

0801574c <llhwc_sm_done_isr>:
 801574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015750:	270c      	movs	r7, #12
 8015752:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 8015756:	6839      	ldr	r1, [r7, #0]
 8015758:	4604      	mov	r4, r0
 801575a:	f021 0001 	bic.w	r0, r1, #1
 801575e:	6038      	str	r0, [r7, #0]
 8015760:	2000      	movs	r0, #0
 8015762:	f240 4540 	movw	r5, #1088	@ 0x440
 8015766:	2101      	movs	r1, #1
 8015768:	f04f 0800 	mov.w	r8, #0
 801576c:	2c18      	cmp	r4, #24
 801576e:	bf38      	it	cc
 8015770:	2001      	movcc	r0, #1
 8015772:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 8015776:	f006 f8d2 	bl	801b91e <bsp_assert>
 801577a:	f646 5658 	movw	r6, #27992	@ 0x6d58
 801577e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8015782:	2010      	movs	r0, #16
 8015784:	e9c6 8008 	strd	r8, r0, [r6, #32]
 8015788:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801578a:	07c0      	lsls	r0, r0, #31
 801578c:	d003      	beq.n	8015796 <llhwc_sm_done_isr+0x4a>
 801578e:	bf00      	nop
 8015790:	6828      	ldr	r0, [r5, #0]
 8015792:	0740      	lsls	r0, r0, #29
 8015794:	d5fc      	bpl.n	8015790 <llhwc_sm_done_isr+0x44>
 8015796:	f00b fa2e 	bl	8020bf6 <pta_ble_event_complete>
 801579a:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 801579e:	f24e 1184 	movw	r1, #57732	@ 0xe184
 80157a2:	f040 0008 	orr.w	r0, r0, #8
 80157a6:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 80157aa:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 80157ae:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80157b2:	f020 0008 	bic.w	r0, r0, #8
 80157b6:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 80157ba:	f8d7 03f8 	ldr.w	r0, [r7, #1016]	@ 0x3f8
 80157be:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80157c2:	f020 0001 	bic.w	r0, r0, #1
 80157c6:	f8c7 03f8 	str.w	r0, [r7, #1016]	@ 0x3f8
 80157ca:	4788      	blx	r1
 80157cc:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80157d0:	f081 0110 	eor.w	r1, r1, #16
 80157d4:	4308      	orrs	r0, r1
 80157d6:	d106      	bne.n	80157e6 <llhwc_sm_done_isr+0x9a>
 80157d8:	6930      	ldr	r0, [r6, #16]
 80157da:	b120      	cbz	r0, 80157e6 <llhwc_sm_done_isr+0x9a>
 80157dc:	f896 1030 	ldrb.w	r1, [r6, #48]	@ 0x30
 80157e0:	2901      	cmp	r1, #1
 80157e2:	bf08      	it	eq
 80157e4:	4780      	blxeq	r0
 80157e6:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80157ea:	f081 0110 	eor.w	r1, r1, #16
 80157ee:	4308      	orrs	r0, r1
 80157f0:	d103      	bne.n	80157fa <llhwc_sm_done_isr+0xae>
 80157f2:	2001      	movs	r0, #1
 80157f4:	2100      	movs	r1, #0
 80157f6:	f006 fdf7 	bl	801c3e8 <llhwc_phy_strt_stp>
 80157fa:	e9d6 0108 	ldrd	r0, r1, [r6, #32]
 80157fe:	f081 0110 	eor.w	r1, r1, #16
 8015802:	4308      	orrs	r0, r1
 8015804:	d103      	bne.n	801580e <llhwc_sm_done_isr+0xc2>
 8015806:	2000      	movs	r0, #0
 8015808:	2100      	movs	r1, #0
 801580a:	f00a fa3b 	bl	801fc84 <llhwc_cmn_control_aclk>
 801580e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015810:	07c0      	lsls	r0, r0, #31
 8015812:	d107      	bne.n	8015824 <llhwc_sm_done_isr+0xd8>
 8015814:	f640 007c 	movw	r0, #2172	@ 0x87c
 8015818:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801581c:	6801      	ldr	r1, [r0, #0]
 801581e:	f021 0108 	bic.w	r1, r1, #8
 8015822:	6001      	str	r1, [r0, #0]
 8015824:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 8015828:	f040 0004 	orr.w	r0, r0, #4
 801582c:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 8015830:	f8d5 0438 	ldr.w	r0, [r5, #1080]	@ 0x438
 8015834:	f020 0004 	bic.w	r0, r0, #4
 8015838:	f8c5 0438 	str.w	r0, [r5, #1080]	@ 0x438
 801583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015840 <llhwc_adv_done>:
 8015840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015844:	b081      	sub	sp, #4
 8015846:	f646 5958 	movw	r9, #27992	@ 0x6d58
 801584a:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801584e:	f8d9 8028 	ldr.w	r8, [r9, #40]	@ 0x28
 8015852:	204d      	movs	r0, #77	@ 0x4d
 8015854:	f006 f8aa 	bl	801b9ac <bsp_debug_gpio_set>
 8015858:	f247 30e8 	movw	r0, #29672	@ 0x73e8
 801585c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015860:	8bc0      	ldrh	r0, [r0, #30]
 8015862:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015866:	4288      	cmp	r0, r1
 8015868:	d012      	beq.n	8015890 <llhwc_adv_done+0x50>
 801586a:	f040 4090 	orr.w	r0, r0, #1207959552	@ 0x48000000
 801586e:	f440 3100 	orr.w	r1, r0, #131072	@ 0x20000
 8015872:	6848      	ldr	r0, [r1, #4]
 8015874:	78c9      	ldrb	r1, [r1, #3]
 8015876:	f001 0103 	and.w	r1, r1, #3
 801587a:	2902      	cmp	r1, #2
 801587c:	d108      	bne.n	8015890 <llhwc_adv_done+0x50>
 801587e:	f000 000f 	and.w	r0, r0, #15
 8015882:	3803      	subs	r0, #3
 8015884:	f020 0002 	bic.w	r0, r0, #2
 8015888:	fab0 f080 	clz	r0, r0
 801588c:	0944      	lsrs	r4, r0, #5
 801588e:	e000      	b.n	8015892 <llhwc_adv_done+0x52>
 8015890:	2400      	movs	r4, #0
 8015892:	f248 202c 	movw	r0, #33324	@ 0x822c
 8015896:	f640 070c 	movw	r7, #2060	@ 0x80c
 801589a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801589e:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 80158a2:	f008 f909 	bl	801dab8 <os_mem_pool_alloc>
 80158a6:	b348      	cbz	r0, 80158fc <llhwc_adv_done+0xbc>
 80158a8:	4605      	mov	r5, r0
 80158aa:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 80158ae:	2201      	movs	r2, #1
 80158b0:	61a8      	str	r0, [r5, #24]
 80158b2:	2000      	movs	r0, #0
 80158b4:	f8c9 0028 	str.w	r0, [r9, #40]	@ 0x28
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
 80158be:	f001 011f 	and.w	r1, r1, #31
 80158c2:	fa02 f101 	lsl.w	r1, r2, r1
 80158c6:	e9c5 1004 	strd	r1, r0, [r5, #16]
 80158ca:	60a8      	str	r0, [r5, #8]
 80158cc:	f247 3630 	movw	r6, #29488	@ 0x7330
 80158d0:	f646 50fc 	movw	r0, #28156	@ 0x6dfc
 80158d4:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80158d8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80158dc:	f896 103a 	ldrb.w	r1, [r6, #58]	@ 0x3a
 80158e0:	6800      	ldr	r0, [r0, #0]
 80158e2:	f885 4020 	strb.w	r4, [r5, #32]
 80158e6:	f885 2024 	strb.w	r2, [r5, #36]	@ 0x24
 80158ea:	f885 102d 	strb.w	r1, [r5, #45]	@ 0x2d
 80158ee:	b14c      	cbz	r4, 8015904 <llhwc_adv_done+0xc4>
 80158f0:	f646 6100 	movw	r1, #28160	@ 0x6e00
 80158f4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80158f8:	6008      	str	r0, [r1, #0]
 80158fa:	e006      	b.n	801590a <llhwc_adv_done+0xca>
 80158fc:	2000      	movs	r0, #0
 80158fe:	f889 0030 	strb.w	r0, [r9, #48]	@ 0x30
 8015902:	e034      	b.n	801596e <llhwc_adv_done+0x12e>
 8015904:	b108      	cbz	r0, 801590a <llhwc_adv_done+0xca>
 8015906:	f004 fff3 	bl	801a8f0 <free_buff_hdr>
 801590a:	68f8      	ldr	r0, [r7, #12]
 801590c:	f3c0 0142 	ubfx	r1, r0, #1, #3
 8015910:	f64f 4054 	movw	r0, #64596	@ 0xfc54
 8015914:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8015918:	5838      	ldr	r0, [r7, r0]
 801591a:	8b32      	ldrh	r2, [r6, #24]
 801591c:	8a33      	ldrh	r3, [r6, #16]
 801591e:	1a80      	subs	r0, r0, r2
 8015920:	18c2      	adds	r2, r0, r3
 8015922:	4628      	mov	r0, r5
 8015924:	f000 fdbc 	bl	80164a0 <llhwc_evnt_done>
 8015928:	f64f 4038 	movw	r0, #64568	@ 0xfc38
 801592c:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8015930:	5839      	ldr	r1, [r7, r0]
 8015932:	f041 0102 	orr.w	r1, r1, #2
 8015936:	5039      	str	r1, [r7, r0]
 8015938:	5839      	ldr	r1, [r7, r0]
 801593a:	f021 0102 	bic.w	r1, r1, #2
 801593e:	5039      	str	r1, [r7, r0]
 8015940:	2000      	movs	r0, #0
 8015942:	4629      	mov	r1, r5
 8015944:	f007 fee3 	bl	801d70e <emngr_post_event>
 8015948:	b2c0      	uxtb	r0, r0
 801594a:	284d      	cmp	r0, #77	@ 0x4d
 801594c:	d106      	bne.n	801595c <llhwc_adv_done+0x11c>
 801594e:	2000      	movs	r0, #0
 8015950:	2101      	movs	r1, #1
 8015952:	f005 ffe4 	bl	801b91e <bsp_assert>
 8015956:	4628      	mov	r0, r5
 8015958:	f008 f8b0 	bl	801dabc <os_mem_pool_free>
 801595c:	2001      	movs	r0, #1
 801595e:	f008 ffa3 	bl	801e8a8 <llhwc_pwr_switch>
 8015962:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8015964:	f899 1018 	ldrb.w	r1, [r9, #24]
 8015968:	f361 0082 	bfi	r0, r1, #2, #1
 801596c:	6738      	str	r0, [r7, #112]	@ 0x70
 801596e:	4640      	mov	r0, r8
 8015970:	f00a f9ba 	bl	801fce8 <llhwc_cmn_free_desc>
 8015974:	204d      	movs	r0, #77	@ 0x4d
 8015976:	f006 f81b 	bl	801b9b0 <bsp_debug_gpio_clear>
 801597a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 801597e:	f020 4080 	bic.w	r0, r0, #1073741824	@ 0x40000000
 8015982:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8015986:	b001      	add	sp, #4
 8015988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801598c <llhwc_scan_done>:
 801598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015990:	b093      	sub	sp, #76	@ 0x4c
 8015992:	f247 3430 	movw	r4, #29488	@ 0x7330
 8015996:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801599a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801599c:	f646 5758 	movw	r7, #27992	@ 0x6d58
 80159a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80159a2:	f646 6000 	movw	r0, #28160	@ 0x6e00
 80159a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80159aa:	6800      	ldr	r0, [r0, #0]
 80159ac:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80159b0:	900c      	str	r0, [sp, #48]	@ 0x30
 80159b2:	f894 003a 	ldrb.w	r0, [r4, #58]	@ 0x3a
 80159b6:	2100      	movs	r1, #0
 80159b8:	9005      	str	r0, [sp, #20]
 80159ba:	7e38      	ldrb	r0, [r7, #24]
 80159bc:	f640 0a0c 	movw	sl, #2060	@ 0x80c
 80159c0:	9007      	str	r0, [sp, #28]
 80159c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159c4:	f240 0900 	movw	r9, #0
 80159c8:	e9cd 1110 	strd	r1, r1, [sp, #64]	@ 0x40
 80159cc:	f6c4 0a02 	movt	sl, #18434	@ 0x4802
 80159d0:	f88d 1036 	strb.w	r1, [sp, #54]	@ 0x36
 80159d4:	f6c4 0902 	movt	r9, #18434	@ 0x4802
 80159d8:	f00a fdea 	bl	80205b0 <llhwc_cmn_get_desc>
 80159dc:	4605      	mov	r5, r0
 80159de:	f007 fc60 	bl	801d2a2 <llhwc_phy_activate_scan_req>
 80159e2:	204e      	movs	r0, #78	@ 0x4e
 80159e4:	f005 ffe2 	bl	801b9ac <bsp_debug_gpio_set>
 80159e8:	f248 202c 	movw	r0, #33324	@ 0x822c
 80159ec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80159f0:	f008 f862 	bl	801dab8 <os_mem_pool_alloc>
 80159f4:	8bea      	ldrh	r2, [r5, #30]
 80159f6:	4680      	mov	r8, r0
 80159f8:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 80159fc:	4610      	mov	r0, r2
 80159fe:	4642      	mov	r2, r8
 8015a00:	9509      	str	r5, [sp, #36]	@ 0x24
 8015a02:	f000 fde7 	bl	80165d4 <llhwc_calc_num_rx_pkts>
 8015a06:	4606      	mov	r6, r0
 8015a08:	f64f 4054 	movw	r0, #64596	@ 0xfc54
 8015a0c:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8015a10:	f8da e00c 	ldr.w	lr, [sl, #12]
 8015a14:	f85a 0000 	ldr.w	r0, [sl, r0]
 8015a18:	f247 35e8 	movw	r5, #29672	@ 0x73e8
 8015a1c:	9004      	str	r0, [sp, #16]
 8015a1e:	0630      	lsls	r0, r6, #24
 8015a20:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8015a24:	d021      	beq.n	8015a6a <llhwc_scan_done+0xde>
 8015a26:	f646 6008 	movw	r0, #28168	@ 0x6e08
 8015a2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015a2e:	6801      	ldr	r1, [r0, #0]
 8015a30:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015a34:	3101      	adds	r1, #1
 8015a36:	2b24      	cmp	r3, #36	@ 0x24
 8015a38:	bf88      	it	hi
 8015a3a:	2100      	movhi	r1, #0
 8015a3c:	6001      	str	r1, [r0, #0]
 8015a3e:	8b20      	ldrh	r0, [r4, #24]
 8015a40:	8a23      	ldrh	r3, [r4, #16]
 8015a42:	8be9      	ldrh	r1, [r5, #30]
 8015a44:	1a1a      	subs	r2, r3, r0
 8015a46:	eb09 0001 	add.w	r0, r9, r1
 8015a4a:	6840      	ldr	r0, [r0, #4]
 8015a4c:	b2f3      	uxtb	r3, r6
 8015a4e:	2b01      	cmp	r3, #1
 8015a50:	f000 000f 	and.w	r0, r0, #15
 8015a54:	9203      	str	r2, [sp, #12]
 8015a56:	d00d      	beq.n	8015a74 <llhwc_scan_done+0xe8>
 8015a58:	ea41 0109 	orr.w	r1, r1, r9
 8015a5c:	6809      	ldr	r1, [r1, #0]
 8015a5e:	b289      	uxth	r1, r1
 8015a60:	4449      	add	r1, r9
 8015a62:	6849      	ldr	r1, [r1, #4]
 8015a64:	f001 020f 	and.w	r2, r1, #15
 8015a68:	e005      	b.n	8015a76 <llhwc_scan_done+0xea>
 8015a6a:	8b20      	ldrh	r0, [r4, #24]
 8015a6c:	8a21      	ldrh	r1, [r4, #16]
 8015a6e:	1a08      	subs	r0, r1, r0
 8015a70:	9003      	str	r0, [sp, #12]
 8015a72:	2000      	movs	r0, #0
 8015a74:	2200      	movs	r2, #0
 8015a76:	f8da 1000 	ldr.w	r1, [sl]
 8015a7a:	f646 5358 	movw	r3, #27992	@ 0x6d58
 8015a7e:	f001 071f 	and.w	r7, r1, #31
 8015a82:	f8da 1068 	ldr.w	r1, [sl, #104]	@ 0x68
 8015a86:	f04f 0c01 	mov.w	ip, #1
 8015a8a:	9102      	str	r1, [sp, #8]
 8015a8c:	f8da 1068 	ldr.w	r1, [sl, #104]	@ 0x68
 8015a90:	f1b8 0f00 	cmp.w	r8, #0
 8015a94:	9101      	str	r1, [sp, #4]
 8015a96:	f8da 100c 	ldr.w	r1, [sl, #12]
 8015a9a:	f04f 0500 	mov.w	r5, #0
 8015a9e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8015aa2:	9100      	str	r1, [sp, #0]
 8015aa4:	d00e      	beq.n	8015ac4 <llhwc_scan_done+0x138>
 8015aa6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8015aa8:	2807      	cmp	r0, #7
 8015aaa:	f8c8 1018 	str.w	r1, [r8, #24]
 8015aae:	4631      	mov	r1, r6
 8015ab0:	bf18      	it	ne
 8015ab2:	2100      	movne	r1, #0
 8015ab4:	b2f4      	uxtb	r4, r6
 8015ab6:	2a07      	cmp	r2, #7
 8015ab8:	bf18      	it	ne
 8015aba:	4631      	movne	r1, r6
 8015abc:	2c01      	cmp	r4, #1
 8015abe:	bf98      	it	ls
 8015ac0:	4631      	movls	r1, r6
 8015ac2:	e002      	b.n	8015aca <llhwc_scan_done+0x13e>
 8015ac4:	f883 5030 	strb.w	r5, [r3, #48]	@ 0x30
 8015ac8:	2100      	movs	r1, #0
 8015aca:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8015ace:	f1b0 0907 	subs.w	r9, r0, #7
 8015ad2:	7e9e      	ldrb	r6, [r3, #26]
 8015ad4:	bf18      	it	ne
 8015ad6:	4689      	movne	r9, r1
 8015ad8:	060c      	lsls	r4, r1, #24
 8015ada:	bf08      	it	eq
 8015adc:	4689      	moveq	r9, r1
 8015ade:	f3ce 0b42 	ubfx	fp, lr, #1, #3
 8015ae2:	2a00      	cmp	r2, #0
 8015ae4:	bf18      	it	ne
 8015ae6:	4689      	movne	r9, r1
 8015ae8:	2e00      	cmp	r6, #0
 8015aea:	fa0c f607 	lsl.w	r6, ip, r7
 8015aee:	9706      	str	r7, [sp, #24]
 8015af0:	d10f      	bne.n	8015b12 <llhwc_scan_done+0x186>
 8015af2:	f1ab 0101 	sub.w	r1, fp, #1
 8015af6:	fab1 f181 	clz	r1, r1
 8015afa:	fa5f f389 	uxtb.w	r3, r9
 8015afe:	0949      	lsrs	r1, r1, #5
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	bf18      	it	ne
 8015b04:	2301      	movne	r3, #1
 8015b06:	4019      	ands	r1, r3
 8015b08:	bf1c      	itt	ne
 8015b0a:	f04f 0b00 	movne.w	fp, #0
 8015b0e:	f04f 0900 	movne.w	r9, #0
 8015b12:	f1bb 0f00 	cmp.w	fp, #0
 8015b16:	d11e      	bne.n	8015b56 <llhwc_scan_done+0x1ca>
 8015b18:	ea5f 6109 	movs.w	r1, r9, lsl #24
 8015b1c:	4634      	mov	r4, r6
 8015b1e:	d01b      	beq.n	8015b58 <llhwc_scan_done+0x1cc>
 8015b20:	f646 5158 	movw	r1, #27992	@ 0x6d58
 8015b24:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015b28:	2a00      	cmp	r2, #0
 8015b2a:	bf18      	it	ne
 8015b2c:	2201      	movne	r2, #1
 8015b2e:	f891 102d 	ldrb.w	r1, [r1, #45]	@ 0x2d
 8015b32:	2300      	movs	r3, #0
 8015b34:	2925      	cmp	r1, #37	@ 0x25
 8015b36:	bf38      	it	cc
 8015b38:	2301      	movcc	r3, #1
 8015b3a:	401a      	ands	r2, r3
 8015b3c:	fa5f f189 	uxtb.w	r1, r9
 8015b40:	f7f9 fcc8 	bl	800f4d4 <evnt_schdlr_backoff_prcdr>
 8015b44:	4604      	mov	r4, r0
 8015b46:	f081 0010 	eor.w	r0, r1, #16
 8015b4a:	ea54 0500 	orrs.w	r5, r4, r0
 8015b4e:	bf0c      	ite	eq
 8015b50:	4634      	moveq	r4, r6
 8015b52:	460d      	movne	r5, r1
 8015b54:	e000      	b.n	8015b58 <llhwc_scan_done+0x1cc>
 8015b56:	4634      	mov	r4, r6
 8015b58:	950b      	str	r5, [sp, #44]	@ 0x2c
 8015b5a:	f646 5558 	movw	r5, #27992	@ 0x6d58
 8015b5e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8015b62:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8015b66:	f080 0010 	eor.w	r0, r0, #16
 8015b6a:	4308      	orrs	r0, r1
 8015b6c:	d11c      	bne.n	8015ba8 <llhwc_scan_done+0x21c>
 8015b6e:	6828      	ldr	r0, [r5, #0]
 8015b70:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 8015b74:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015b78:	8b89      	ldrh	r1, [r1, #28]
 8015b7a:	f8ca 001c 	str.w	r0, [sl, #28]
 8015b7e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8015b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b86:	4390      	bics	r0, r2
 8015b88:	792a      	ldrb	r2, [r5, #4]
 8015b8a:	796b      	ldrb	r3, [r5, #5]
 8015b8c:	4410      	add	r0, r2
 8015b8e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8015b92:	f8ca 0018 	str.w	r0, [sl, #24]
 8015b96:	2000      	movs	r0, #0
 8015b98:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8015b9c:	4408      	add	r0, r1
 8015b9e:	6841      	ldr	r1, [r0, #4]
 8015ba0:	68aa      	ldr	r2, [r5, #8]
 8015ba2:	f362 1186 	bfi	r1, r2, #6, #1
 8015ba6:	6041      	str	r1, [r0, #4]
 8015ba8:	ea5f 6709 	movs.w	r7, r9, lsl #24
 8015bac:	9408      	str	r4, [sp, #32]
 8015bae:	d02c      	beq.n	8015c0a <llhwc_scan_done+0x27e>
 8015bb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015bb2:	f016 0f30 	tst.w	r6, #48	@ 0x30
 8015bb6:	6808      	ldr	r0, [r1, #0]
 8015bb8:	8949      	ldrh	r1, [r1, #10]
 8015bba:	eb01 0200 	add.w	r2, r1, r0
 8015bbe:	5809      	ldr	r1, [r1, r0]
 8015bc0:	6850      	ldr	r0, [r2, #4]
 8015bc2:	900e      	str	r0, [sp, #56]	@ 0x38
 8015bc4:	6890      	ldr	r0, [r2, #8]
 8015bc6:	b282      	uxth	r2, r0
 8015bc8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015bca:	d01e      	beq.n	8015c0a <llhwc_scan_done+0x27e>
 8015bcc:	fa5f f289 	uxtb.w	r2, r9
 8015bd0:	2a01      	cmp	r2, #1
 8015bd2:	d11a      	bne.n	8015c0a <llhwc_scan_done+0x27e>
 8015bd4:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8015bd8:	b1b9      	cbz	r1, 8015c0a <llhwc_scan_done+0x27e>
 8015bda:	f400 4040 	and.w	r0, r0, #49152	@ 0xc000
 8015bde:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8015be2:	d112      	bne.n	8015c0a <llhwc_scan_done+0x27e>
 8015be4:	aa0e      	add	r2, sp, #56	@ 0x38
 8015be6:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8015bea:	2003      	movs	r0, #3
 8015bec:	f7fd ffe9 	bl	8013bc2 <llhwc_lst_search>
 8015bf0:	b128      	cbz	r0, 8015bfe <llhwc_scan_done+0x272>
 8015bf2:	f640 060c 	movw	r6, #2060	@ 0x80c
 8015bf6:	2700      	movs	r7, #0
 8015bf8:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8015bfc:	e10b      	b.n	8015e16 <llhwc_scan_done+0x48a>
 8015bfe:	f89d 0037 	ldrb.w	r0, [sp, #55]	@ 0x37
 8015c02:	07c0      	lsls	r0, r0, #31
 8015c04:	bf1c      	itt	ne
 8015c06:	2001      	movne	r0, #1
 8015c08:	7668      	strbne	r0, [r5, #25]
 8015c0a:	46b2      	mov	sl, r6
 8015c0c:	ae10      	add	r6, sp, #64	@ 0x40
 8015c0e:	4630      	mov	r0, r6
 8015c10:	f008 fc5b 	bl	801e4ca <llhwc_slptmr_get>
 8015c14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015c16:	4630      	mov	r0, r6
 8015c18:	4621      	mov	r1, r4
 8015c1a:	f007 fd03 	bl	801d624 <ble_time_cmp_raw_reading>
 8015c1e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015c20:	463e      	mov	r6, r7
 8015c22:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015c26:	bfce      	itee	gt
 8015c28:	4620      	movgt	r0, r4
 8015c2a:	4608      	movle	r0, r1
 8015c2c:	4621      	movle	r1, r4
 8015c2e:	f007 fd1e 	bl	801d66e <ble_time_overflow_diff>
 8015c32:	6969      	ldr	r1, [r5, #20]
 8015c34:	3012      	adds	r0, #18
 8015c36:	1a0f      	subs	r7, r1, r0
 8015c38:	bf28      	it	cs
 8015c3a:	2f12      	cmpcs	r7, #18
 8015c3c:	d26f      	bcs.n	8015d1e <llhwc_scan_done+0x392>
 8015c3e:	f247 3130 	movw	r1, #29488	@ 0x7330
 8015c42:	2000      	movs	r0, #0
 8015c44:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015c48:	970a      	str	r7, [sp, #40]	@ 0x28
 8015c4a:	7668      	strb	r0, [r5, #25]
 8015c4c:	6288      	str	r0, [r1, #40]	@ 0x28
 8015c4e:	2701      	movs	r7, #1
 8015c50:	f1b8 0f00 	cmp.w	r8, #0
 8015c54:	d028      	beq.n	8015ca8 <llhwc_scan_done+0x31c>
 8015c56:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015c5a:	9b01      	ldr	r3, [sp, #4]
 8015c5c:	2600      	movs	r6, #0
 8015c5e:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8015c62:	180a      	adds	r2, r1, r0
 8015c64:	9800      	ldr	r0, [sp, #0]
 8015c66:	f888 7024 	strb.w	r7, [r8, #36]	@ 0x24
 8015c6a:	f3c0 0142 	ubfx	r1, r0, #1, #3
 8015c6e:	9802      	ldr	r0, [sp, #8]
 8015c70:	f888 6025 	strb.w	r6, [r8, #37]	@ 0x25
 8015c74:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8015c78:	f888 3026 	strb.w	r3, [r8, #38]	@ 0x26
 8015c7c:	f888 0029 	strb.w	r0, [r8, #41]	@ 0x29
 8015c80:	fa5f f089 	uxtb.w	r0, r9
 8015c84:	e9c8 a604 	strd	sl, r6, [r8, #16]
 8015c88:	f888 9020 	strb.w	r9, [r8, #32]
 8015c8c:	f888 6021 	strb.w	r6, [r8, #33]	@ 0x21
 8015c90:	2800      	cmp	r0, #0
 8015c92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015c94:	bf18      	it	ne
 8015c96:	4618      	movne	r0, r3
 8015c98:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c9c:	9805      	ldr	r0, [sp, #20]
 8015c9e:	f888 002d 	strb.w	r0, [r8, #45]	@ 0x2d
 8015ca2:	4640      	mov	r0, r8
 8015ca4:	f000 fbfc 	bl	80164a0 <llhwc_evnt_done>
 8015ca8:	2000      	movs	r0, #0
 8015caa:	4641      	mov	r1, r8
 8015cac:	2400      	movs	r4, #0
 8015cae:	f007 fd2e 	bl	801d70e <emngr_post_event>
 8015cb2:	b2c0      	uxtb	r0, r0
 8015cb4:	f640 060c 	movw	r6, #2060	@ 0x80c
 8015cb8:	f247 3a30 	movw	sl, #29488	@ 0x7330
 8015cbc:	f247 3be8 	movw	fp, #29672	@ 0x73e8
 8015cc0:	284d      	cmp	r0, #77	@ 0x4d
 8015cc2:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8015cc6:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8015cca:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8015cce:	d10f      	bne.n	8015cf0 <llhwc_scan_done+0x364>
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	2101      	movs	r1, #1
 8015cd4:	2701      	movs	r7, #1
 8015cd6:	f005 fe22 	bl	801b91e <bsp_assert>
 8015cda:	f1b8 0f00 	cmp.w	r8, #0
 8015cde:	f8ca 4028 	str.w	r4, [sl, #40]	@ 0x28
 8015ce2:	d003      	beq.n	8015cec <llhwc_scan_done+0x360>
 8015ce4:	4640      	mov	r0, r8
 8015ce6:	f007 fee9 	bl	801dabc <os_mem_pool_free>
 8015cea:	2701      	movs	r7, #1
 8015cec:	f04f 0900 	mov.w	r9, #0
 8015cf0:	b33f      	cbz	r7, 8015d42 <llhwc_scan_done+0x3b6>
 8015cf2:	fa5f f089 	uxtb.w	r0, r9
 8015cf6:	2801      	cmp	r0, #1
 8015cf8:	d823      	bhi.n	8015d42 <llhwc_scan_done+0x3b6>
 8015cfa:	9806      	ldr	r0, [sp, #24]
 8015cfc:	2804      	cmp	r0, #4
 8015cfe:	d105      	bne.n	8015d0c <llhwc_scan_done+0x380>
 8015d00:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015d02:	6860      	ldr	r0, [r4, #4]
 8015d04:	f004 fdf4 	bl	801a8f0 <free_buff_hdr>
 8015d08:	2000      	movs	r0, #0
 8015d0a:	6060      	str	r0, [r4, #4]
 8015d0c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8015d0e:	ea5f 6009 	movs.w	r0, r9, lsl #24
 8015d12:	f040 8088 	bne.w	8015e26 <llhwc_scan_done+0x49a>
 8015d16:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8015d18:	f004 fdea 	bl	801a8f0 <free_buff_hdr>
 8015d1c:	e083      	b.n	8015e26 <llhwc_scan_done+0x49a>
 8015d1e:	f1bb 0f01 	cmp.w	fp, #1
 8015d22:	d08c      	beq.n	8015c3e <llhwc_scan_done+0x2b2>
 8015d24:	7e68      	ldrb	r0, [r5, #25]
 8015d26:	2801      	cmp	r0, #1
 8015d28:	f43f af89 	beq.w	8015c3e <llhwc_scan_done+0x2b2>
 8015d2c:	f247 3130 	movw	r1, #29488	@ 0x7330
 8015d30:	2001      	movs	r0, #1
 8015d32:	2e00      	cmp	r6, #0
 8015d34:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015d38:	6288      	str	r0, [r1, #40]	@ 0x28
 8015d3a:	d062      	beq.n	8015e02 <llhwc_scan_done+0x476>
 8015d3c:	970a      	str	r7, [sp, #40]	@ 0x28
 8015d3e:	2700      	movs	r7, #0
 8015d40:	e786      	b.n	8015c50 <llhwc_scan_done+0x2c4>
 8015d42:	ea5f 6009 	movs.w	r0, r9, lsl #24
 8015d46:	d05a      	beq.n	8015dfe <llhwc_scan_done+0x472>
 8015d48:	2f00      	cmp	r7, #0
 8015d4a:	d158      	bne.n	8015dfe <llhwc_scan_done+0x472>
 8015d4c:	fa5f f089 	uxtb.w	r0, r9
 8015d50:	f646 6400 	movw	r4, #28160	@ 0x6e00
 8015d54:	2801      	cmp	r0, #1
 8015d56:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8015d5a:	d809      	bhi.n	8015d70 <llhwc_scan_done+0x3e4>
 8015d5c:	9806      	ldr	r0, [sp, #24]
 8015d5e:	2804      	cmp	r0, #4
 8015d60:	d106      	bne.n	8015d70 <llhwc_scan_done+0x3e4>
 8015d62:	6820      	ldr	r0, [r4, #0]
 8015d64:	6840      	ldr	r0, [r0, #4]
 8015d66:	f004 fdc3 	bl	801a8f0 <free_buff_hdr>
 8015d6a:	6820      	ldr	r0, [r4, #0]
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	6041      	str	r1, [r0, #4]
 8015d70:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8015d74:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015d78:	2000      	movs	r0, #0
 8015d7a:	f04f 0900 	mov.w	r9, #0
 8015d7e:	f004 fd89 	bl	801a894 <allocate_data_packet>
 8015d82:	2800      	cmp	r0, #0
 8015d84:	6020      	str	r0, [r4, #0]
 8015d86:	f000 8091 	beq.w	8015eac <llhwc_scan_done+0x520>
 8015d8a:	6802      	ldr	r2, [r0, #0]
 8015d8c:	2118      	movs	r1, #24
 8015d8e:	f102 0714 	add.w	r7, r2, #20
 8015d92:	8141      	strh	r1, [r0, #10]
 8015d94:	4638      	mov	r0, r7
 8015d96:	2100      	movs	r1, #0
 8015d98:	2204      	movs	r2, #4
 8015d9a:	f00a fda3 	bl	80208e4 <ble_memset>
 8015d9e:	9808      	ldr	r0, [sp, #32]
 8015da0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015da2:	f080 0010 	eor.w	r0, r0, #16
 8015da6:	4308      	orrs	r0, r1
 8015da8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015daa:	f8ab 701e 	strh.w	r7, [fp, #30]
 8015dae:	83c7      	strh	r7, [r0, #30]
 8015db0:	d13b      	bne.n	8015e2a <llhwc_scan_done+0x49e>
 8015db2:	6820      	ldr	r0, [r4, #0]
 8015db4:	f649 7110 	movw	r1, #40720	@ 0x9f10
 8015db8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8015dbc:	f004 fd6a 	bl	801a894 <allocate_data_packet>
 8015dc0:	2800      	cmp	r0, #0
 8015dc2:	d06e      	beq.n	8015ea2 <llhwc_scan_done+0x516>
 8015dc4:	6804      	ldr	r4, [r0, #0]
 8015dc6:	2118      	movs	r1, #24
 8015dc8:	f104 0514 	add.w	r5, r4, #20
 8015dcc:	8141      	strh	r1, [r0, #10]
 8015dce:	4628      	mov	r0, r5
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	2204      	movs	r2, #4
 8015dd4:	f00a fd86 	bl	80208e4 <ble_memset>
 8015dd8:	f8bb 001e 	ldrh.w	r0, [fp, #30]
 8015ddc:	2100      	movs	r1, #0
 8015dde:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8015de2:	4308      	orrs	r0, r1
 8015de4:	6801      	ldr	r1, [r0, #0]
 8015de6:	f365 010f 	bfi	r1, r5, #0, #16
 8015dea:	6001      	str	r1, [r0, #0]
 8015dec:	6960      	ldr	r0, [r4, #20]
 8015dee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015df2:	f646 5558 	movw	r5, #27992	@ 0x6d58
 8015df6:	4308      	orrs	r0, r1
 8015df8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8015dfc:	6160      	str	r0, [r4, #20]
 8015dfe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015e00:	e018      	b.n	8015e34 <llhwc_scan_done+0x4a8>
 8015e02:	f640 060c 	movw	r6, #2060	@ 0x80c
 8015e06:	f1b8 0f00 	cmp.w	r8, #0
 8015e0a:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8015e0e:	d03e      	beq.n	8015e8e <llhwc_scan_done+0x502>
 8015e10:	4640      	mov	r0, r8
 8015e12:	f007 fe53 	bl	801dabc <os_mem_pool_free>
 8015e16:	f247 3a30 	movw	sl, #29488	@ 0x7330
 8015e1a:	f247 3be8 	movw	fp, #29672	@ 0x73e8
 8015e1e:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8015e22:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8015e26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015e28:	e005      	b.n	8015e36 <llhwc_scan_done+0x4aa>
 8015e2a:	6838      	ldr	r0, [r7, #0]
 8015e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e30:	4310      	orrs	r0, r2
 8015e32:	6038      	str	r0, [r7, #0]
 8015e34:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8015e36:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8015e3a:	2801      	cmp	r0, #1
 8015e3c:	d13b      	bne.n	8015eb6 <llhwc_scan_done+0x52a>
 8015e3e:	9808      	ldr	r0, [sp, #32]
 8015e40:	f64f 4338 	movw	r3, #64568	@ 0xfc38
 8015e44:	e9c5 0108 	strd	r0, r1, [r5, #32]
 8015e48:	f6cf 73ff 	movt	r3, #65535	@ 0xffff
 8015e4c:	58f2      	ldr	r2, [r6, r3]
 8015e4e:	f042 0202 	orr.w	r2, r2, #2
 8015e52:	50f2      	str	r2, [r6, r3]
 8015e54:	58f2      	ldr	r2, [r6, r3]
 8015e56:	f022 0202 	bic.w	r2, r2, #2
 8015e5a:	50f2      	str	r2, [r6, r3]
 8015e5c:	6834      	ldr	r4, [r6, #0]
 8015e5e:	f7fe fc59 	bl	8014714 <llhwc_get_sm_mode_from_event_type>
 8015e62:	f360 0404 	bfi	r4, r0, #0, #5
 8015e66:	1e78      	subs	r0, r7, #1
 8015e68:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8015e6c:	6034      	str	r4, [r6, #0]
 8015e6e:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 8015e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e74:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015e76:	6150      	str	r0, [r2, #20]
 8015e78:	f101 0012 	add.w	r0, r1, #18
 8015e7c:	f8bb 101e 	ldrh.w	r1, [fp, #30]
 8015e80:	9010      	str	r0, [sp, #64]	@ 0x40
 8015e82:	83d1      	strh	r1, [r2, #30]
 8015e84:	a910      	add	r1, sp, #64	@ 0x40
 8015e86:	2000      	movs	r0, #0
 8015e88:	f008 ff9c 	bl	801edc4 <llhwc_slptmr_set>
 8015e8c:	e018      	b.n	8015ec0 <llhwc_scan_done+0x534>
 8015e8e:	f247 3a30 	movw	sl, #29488	@ 0x7330
 8015e92:	f247 3be8 	movw	fp, #29672	@ 0x73e8
 8015e96:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015e98:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8015e9c:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8015ea0:	e7cd      	b.n	8015e3e <llhwc_scan_done+0x4b2>
 8015ea2:	6820      	ldr	r0, [r4, #0]
 8015ea4:	f004 fd24 	bl	801a8f0 <free_buff_hdr>
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	6020      	str	r0, [r4, #0]
 8015eac:	2001      	movs	r0, #1
 8015eae:	f888 0024 	strb.w	r0, [r8, #36]	@ 0x24
 8015eb2:	f8ca 9028 	str.w	r9, [sl, #40]	@ 0x28
 8015eb6:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8015eb8:	9907      	ldr	r1, [sp, #28]
 8015eba:	f361 0082 	bfi	r0, r1, #2, #1
 8015ebe:	6730      	str	r0, [r6, #112]	@ 0x70
 8015ec0:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8015ec4:	b9b8      	cbnz	r0, 8015ef6 <llhwc_scan_done+0x56a>
 8015ec6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015ec8:	f009 ff0e 	bl	801fce8 <llhwc_cmn_free_desc>
 8015ecc:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8015ed0:	b988      	cbnz	r0, 8015ef6 <llhwc_scan_done+0x56a>
 8015ed2:	f895 0030 	ldrb.w	r0, [r5, #48]	@ 0x30
 8015ed6:	b970      	cbnz	r0, 8015ef6 <llhwc_scan_done+0x56a>
 8015ed8:	f64f 4038 	movw	r0, #64568	@ 0xfc38
 8015edc:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8015ee0:	5831      	ldr	r1, [r6, r0]
 8015ee2:	f041 0102 	orr.w	r1, r1, #2
 8015ee6:	5031      	str	r1, [r6, r0]
 8015ee8:	5831      	ldr	r1, [r6, r0]
 8015eea:	f021 0102 	bic.w	r1, r1, #2
 8015eee:	5031      	str	r1, [r6, r0]
 8015ef0:	2001      	movs	r0, #1
 8015ef2:	f008 fcd9 	bl	801e8a8 <llhwc_pwr_switch>
 8015ef6:	204e      	movs	r0, #78	@ 0x4e
 8015ef8:	f005 fd5a 	bl	801b9b0 <bsp_debug_gpio_clear>
 8015efc:	b013      	add	sp, #76	@ 0x4c
 8015efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f02 <llhwc_init_done>:
 8015f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f06:	b08d      	sub	sp, #52	@ 0x34
 8015f08:	f247 3730 	movw	r7, #29488	@ 0x7330
 8015f0c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8015f10:	2400      	movs	r4, #0
 8015f12:	f646 6000 	movw	r0, #28160	@ 0x6e00
 8015f16:	f8d7 b024 	ldr.w	fp, [r7, #36]	@ 0x24
 8015f1a:	940c      	str	r4, [sp, #48]	@ 0x30
 8015f1c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015f1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8015f20:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015f24:	6800      	ldr	r0, [r0, #0]
 8015f26:	f646 5a58 	movw	sl, #27992	@ 0x6d58
 8015f2a:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8015f2e:	9006      	str	r0, [sp, #24]
 8015f30:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8015f34:	f640 0618 	movw	r6, #2072	@ 0x818
 8015f38:	f240 4844 	movw	r8, #1092	@ 0x444
 8015f3c:	9409      	str	r4, [sp, #36]	@ 0x24
 8015f3e:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 8015f42:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 8015f46:	9408      	str	r4, [sp, #32]
 8015f48:	f00a fb32 	bl	80205b0 <llhwc_cmn_get_desc>
 8015f4c:	4605      	mov	r5, r0
 8015f4e:	204f      	movs	r0, #79	@ 0x4f
 8015f50:	f005 fd2c 	bl	801b9ac <bsp_debug_gpio_set>
 8015f54:	9501      	str	r5, [sp, #4]
 8015f56:	8bed      	ldrh	r5, [r5, #30]
 8015f58:	6830      	ldr	r0, [r6, #0]
 8015f5a:	f64f 31c0 	movw	r1, #64448	@ 0xfbc0
 8015f5e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8015f62:	f6cf 71ff 	movt	r1, #65535	@ 0xffff
 8015f66:	900a      	str	r0, [sp, #40]	@ 0x28
 8015f68:	f64f 4048 	movw	r0, #64584	@ 0xfc48
 8015f6c:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8015f70:	5830      	ldr	r0, [r6, r0]
 8015f72:	9004      	str	r0, [sp, #16]
 8015f74:	8b38      	ldrh	r0, [r7, #24]
 8015f76:	9003      	str	r0, [sp, #12]
 8015f78:	8a38      	ldrh	r0, [r7, #16]
 8015f7a:	9002      	str	r0, [sp, #8]
 8015f7c:	6830      	ldr	r0, [r6, #0]
 8015f7e:	9005      	str	r0, [sp, #20]
 8015f80:	f247 30e8 	movw	r0, #29672	@ 0x73e8
 8015f84:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015f88:	8bc0      	ldrh	r0, [r0, #30]
 8015f8a:	4440      	add	r0, r8
 8015f8c:	5847      	ldr	r7, [r0, r1]
 8015f8e:	f248 202c 	movw	r0, #33324	@ 0x822c
 8015f92:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8015f96:	f007 fd8f 	bl	801dab8 <os_mem_pool_alloc>
 8015f9a:	4606      	mov	r6, r0
 8015f9c:	46d1      	mov	r9, sl
 8015f9e:	b118      	cbz	r0, 8015fa8 <llhwc_init_done+0xa6>
 8015fa0:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8015fa4:	61b0      	str	r0, [r6, #24]
 8015fa6:	e001      	b.n	8015fac <llhwc_init_done+0xaa>
 8015fa8:	f88a 4030 	strb.w	r4, [sl, #48]	@ 0x30
 8015fac:	f10d 011f 	add.w	r1, sp, #31
 8015fb0:	4628      	mov	r0, r5
 8015fb2:	4632      	mov	r2, r6
 8015fb4:	f007 0a0f 	and.w	sl, r7, #15
 8015fb8:	f000 fb0c 	bl	80165d4 <llhwc_calc_num_rx_pkts>
 8015fbc:	ac08      	add	r4, sp, #32
 8015fbe:	4605      	mov	r5, r0
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	f008 fa82 	bl	801e4ca <llhwc_slptmr_get>
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	4659      	mov	r1, fp
 8015fca:	f007 fb2b 	bl	801d624 <ble_time_cmp_raw_reading>
 8015fce:	9908      	ldr	r1, [sp, #32]
 8015fd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015fd4:	bfce      	itee	gt
 8015fd6:	4658      	movgt	r0, fp
 8015fd8:	4608      	movle	r0, r1
 8015fda:	4659      	movle	r1, fp
 8015fdc:	f007 fb47 	bl	801d66e <ble_time_overflow_diff>
 8015fe0:	900c      	str	r0, [sp, #48]	@ 0x30
 8015fe2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8015fe4:	f1ba 0407 	subs.w	r4, sl, #7
 8015fe8:	f100 0012 	add.w	r0, r0, #18
 8015fec:	900c      	str	r0, [sp, #48]	@ 0x30
 8015fee:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015ff2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015ff4:	464f      	mov	r7, r9
 8015ff6:	eba0 0001 	sub.w	r0, r0, r1
 8015ffa:	900b      	str	r0, [sp, #44]	@ 0x2c
 8015ffc:	f8d8 0000 	ldr.w	r0, [r8]
 8016000:	f085 0101 	eor.w	r1, r5, #1
 8016004:	f040 0002 	orr.w	r0, r0, #2
 8016008:	f8c8 0000 	str.w	r0, [r8]
 801600c:	f8d8 0000 	ldr.w	r0, [r8]
 8016010:	f020 0002 	bic.w	r0, r0, #2
 8016014:	f8c8 0000 	str.w	r0, [r8]
 8016018:	f899 002e 	ldrb.w	r0, [r9, #46]	@ 0x2e
 801601c:	bf18      	it	ne
 801601e:	462c      	movne	r4, r5
 8016020:	4308      	orrs	r0, r1
 8016022:	f899 001a 	ldrb.w	r0, [r9, #26]
 8016026:	bf18      	it	ne
 8016028:	462c      	movne	r4, r5
 801602a:	b120      	cbz	r0, 8016036 <llhwc_init_done+0x134>
 801602c:	f247 3a30 	movw	sl, #29488	@ 0x7330
 8016030:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8016034:	e009      	b.n	801604a <llhwc_init_done+0x148>
 8016036:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016038:	f247 3a30 	movw	sl, #29488	@ 0x7330
 801603c:	2801      	cmp	r0, #1
 801603e:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8016042:	d102      	bne.n	801604a <llhwc_init_done+0x148>
 8016044:	b10c      	cbz	r4, 801604a <llhwc_init_done+0x148>
 8016046:	2400      	movs	r4, #0
 8016048:	940a      	str	r4, [sp, #40]	@ 0x28
 801604a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801604c:	6979      	ldr	r1, [r7, #20]
 801604e:	4288      	cmp	r0, r1
 8016050:	d802      	bhi.n	8016058 <llhwc_init_done+0x156>
 8016052:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016054:	2811      	cmp	r0, #17
 8016056:	d859      	bhi.n	801610c <llhwc_init_done+0x20a>
 8016058:	2000      	movs	r0, #0
 801605a:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
 801605e:	fab4 f084 	clz	r0, r4
 8016062:	ea4f 1850 	mov.w	r8, r0, lsr #5
 8016066:	f04f 0901 	mov.w	r9, #1
 801606a:	b326      	cbz	r6, 80160b6 <llhwc_init_done+0x1b4>
 801606c:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016070:	f886 4020 	strb.w	r4, [r6, #32]
 8016074:	f1b8 0f00 	cmp.w	r8, #0
 8016078:	eba0 0001 	sub.w	r0, r0, r1
 801607c:	9902      	ldr	r1, [sp, #8]
 801607e:	eb00 0201 	add.w	r2, r0, r1
 8016082:	f04f 0001 	mov.w	r0, #1
 8016086:	f886 0024 	strb.w	r0, [r6, #36]	@ 0x24
 801608a:	f04f 0000 	mov.w	r0, #0
 801608e:	f04f 0140 	mov.w	r1, #64	@ 0x40
 8016092:	e9c6 1004 	strd	r1, r0, [r6, #16]
 8016096:	f886 0021 	strb.w	r0, [r6, #33]	@ 0x21
 801609a:	9806      	ldr	r0, [sp, #24]
 801609c:	bf18      	it	ne
 801609e:	2000      	movne	r0, #0
 80160a0:	60b0      	str	r0, [r6, #8]
 80160a2:	9905      	ldr	r1, [sp, #20]
 80160a4:	f89a 003b 	ldrb.w	r0, [sl, #59]	@ 0x3b
 80160a8:	f3c1 0142 	ubfx	r1, r1, #1, #3
 80160ac:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
 80160b0:	4630      	mov	r0, r6
 80160b2:	f000 f9f5 	bl	80164a0 <llhwc_evnt_done>
 80160b6:	2000      	movs	r0, #0
 80160b8:	4631      	mov	r1, r6
 80160ba:	2500      	movs	r5, #0
 80160bc:	f007 fb27 	bl	801d70e <emngr_post_event>
 80160c0:	b2c0      	uxtb	r0, r0
 80160c2:	284d      	cmp	r0, #77	@ 0x4d
 80160c4:	d107      	bne.n	80160d6 <llhwc_init_done+0x1d4>
 80160c6:	2000      	movs	r0, #0
 80160c8:	2101      	movs	r1, #1
 80160ca:	f005 fc28 	bl	801b91e <bsp_assert>
 80160ce:	b116      	cbz	r6, 80160d6 <llhwc_init_done+0x1d4>
 80160d0:	4630      	mov	r0, r6
 80160d2:	f007 fcf3 	bl	801dabc <os_mem_pool_free>
 80160d6:	2001      	movs	r0, #1
 80160d8:	f008 fbe6 	bl	801e8a8 <llhwc_pwr_switch>
 80160dc:	2c01      	cmp	r4, #1
 80160de:	bf88      	it	hi
 80160e0:	2501      	movhi	r5, #1
 80160e2:	f089 0001 	eor.w	r0, r9, #1
 80160e6:	4328      	orrs	r0, r5
 80160e8:	d12b      	bne.n	8016142 <llhwc_init_done+0x240>
 80160ea:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 80160ee:	2801      	cmp	r0, #1
 80160f0:	d105      	bne.n	80160fe <llhwc_init_done+0x1fc>
 80160f2:	9c06      	ldr	r4, [sp, #24]
 80160f4:	6860      	ldr	r0, [r4, #4]
 80160f6:	f004 fbfb 	bl	801a8f0 <free_buff_hdr>
 80160fa:	2000      	movs	r0, #0
 80160fc:	6060      	str	r0, [r4, #4]
 80160fe:	f1b8 0f00 	cmp.w	r8, #0
 8016102:	d01e      	beq.n	8016142 <llhwc_init_done+0x240>
 8016104:	9806      	ldr	r0, [sp, #24]
 8016106:	f004 fbf3 	bl	801a8f0 <free_buff_hdr>
 801610a:	e01a      	b.n	8016142 <llhwc_init_done+0x240>
 801610c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801610e:	1e61      	subs	r1, r4, #1
 8016110:	3801      	subs	r0, #1
 8016112:	fab0 f080 	clz	r0, r0
 8016116:	0940      	lsrs	r0, r0, #5
 8016118:	2200      	movs	r2, #0
 801611a:	2902      	cmp	r1, #2
 801611c:	bf38      	it	cc
 801611e:	2201      	movcc	r2, #1
 8016120:	ea50 0902 	orrs.w	r9, r0, r2
 8016124:	fab4 f184 	clz	r1, r4
 8016128:	f089 0001 	eor.w	r0, r9, #1
 801612c:	ea4f 1851 	mov.w	r8, r1, lsr #5
 8016130:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
 8016134:	bf08      	it	eq
 8016136:	2c00      	cmpeq	r4, #0
 8016138:	d197      	bne.n	801606a <llhwc_init_done+0x168>
 801613a:	b126      	cbz	r6, 8016146 <llhwc_init_done+0x244>
 801613c:	4630      	mov	r0, r6
 801613e:	f007 fcbd 	bl	801dabc <os_mem_pool_free>
 8016142:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8016146:	2801      	cmp	r0, #1
 8016148:	d11f      	bne.n	801618a <llhwc_init_done+0x288>
 801614a:	2000      	movs	r0, #0
 801614c:	2140      	movs	r1, #64	@ 0x40
 801614e:	e9c7 1008 	strd	r1, r0, [r7, #32]
 8016152:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016156:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 801615a:	3901      	subs	r1, #1
 801615c:	eb00 0091 	add.w	r0, r0, r1, lsr #2
 8016160:	9908      	ldr	r1, [sp, #32]
 8016162:	9a01      	ldr	r2, [sp, #4]
 8016164:	381f      	subs	r0, #31
 8016166:	6150      	str	r0, [r2, #20]
 8016168:	f101 0012 	add.w	r0, r1, #18
 801616c:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 8016170:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016174:	8bc9      	ldrh	r1, [r1, #30]
 8016176:	9008      	str	r0, [sp, #32]
 8016178:	83d1      	strh	r1, [r2, #30]
 801617a:	a908      	add	r1, sp, #32
 801617c:	2000      	movs	r0, #0
 801617e:	f008 fe21 	bl	801edc4 <llhwc_slptmr_set>
 8016182:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8016186:	2801      	cmp	r0, #1
 8016188:	d01d      	beq.n	80161c6 <llhwc_init_done+0x2c4>
 801618a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801618c:	f009 fdac 	bl	801fce8 <llhwc_cmn_free_desc>
 8016190:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 8016194:	b9b8      	cbnz	r0, 80161c6 <llhwc_init_done+0x2c4>
 8016196:	f640 007c 	movw	r0, #2172	@ 0x87c
 801619a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801619e:	6801      	ldr	r1, [r0, #0]
 80161a0:	7e3a      	ldrb	r2, [r7, #24]
 80161a2:	f362 0182 	bfi	r1, r2, #2, #1
 80161a6:	6001      	str	r1, [r0, #0]
 80161a8:	f646 7064 	movw	r0, #28516	@ 0x6f64
 80161ac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80161b0:	7800      	ldrb	r0, [r0, #0]
 80161b2:	2801      	cmp	r0, #1
 80161b4:	d107      	bne.n	80161c6 <llhwc_init_done+0x2c4>
 80161b6:	f640 0118 	movw	r1, #2072	@ 0x818
 80161ba:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80161be:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 80161c0:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80161c4:	6288      	str	r0, [r1, #40]	@ 0x28
 80161c6:	204f      	movs	r0, #79	@ 0x4f
 80161c8:	f005 fbf2 	bl	801b9b0 <bsp_debug_gpio_clear>
 80161cc:	b00d      	add	sp, #52	@ 0x34
 80161ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080161d4 <llhwc_conn_evnt_done>:
 80161d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d8:	b081      	sub	sp, #4
 80161da:	f646 6000 	movw	r0, #28160	@ 0x6e00
 80161de:	f646 5a58 	movw	sl, #27992	@ 0x6d58
 80161e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80161e6:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 80161ea:	6806      	ldr	r6, [r0, #0]
 80161ec:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 80161f0:	f640 0b0c 	movw	fp, #2060	@ 0x80c
 80161f4:	2700      	movs	r7, #0
 80161f6:	f6c4 0b02 	movt	fp, #18434	@ 0x4802
 80161fa:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 80161fe:	f00a f9d7 	bl	80205b0 <llhwc_cmn_get_desc>
 8016202:	4680      	mov	r8, r0
 8016204:	2050      	movs	r0, #80	@ 0x50
 8016206:	f005 fbd1 	bl	801b9ac <bsp_debug_gpio_set>
 801620a:	f248 202c 	movw	r0, #33324	@ 0x822c
 801620e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016212:	f007 fc51 	bl	801dab8 <os_mem_pool_alloc>
 8016216:	2101      	movs	r1, #1
 8016218:	4604      	mov	r4, r0
 801621a:	2800      	cmp	r0, #0
 801621c:	bf18      	it	ne
 801621e:	2001      	movne	r0, #1
 8016220:	f04f 0901 	mov.w	r9, #1
 8016224:	f005 fb7b 	bl	801b91e <bsp_assert>
 8016228:	f8da 0028 	ldr.w	r0, [sl, #40]	@ 0x28
 801622c:	2500      	movs	r5, #0
 801622e:	61a0      	str	r0, [r4, #24]
 8016230:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8016234:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8016238:	60a5      	str	r5, [r4, #8]
 801623a:	f8db 0000 	ldr.w	r0, [fp]
 801623e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016242:	f000 001f 	and.w	r0, r0, #31
 8016246:	fa09 f000 	lsl.w	r0, r9, r0
 801624a:	e9c4 0504 	strd	r0, r5, [r4, #16]
 801624e:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8016252:	0ec0      	lsrs	r0, r0, #27
 8016254:	7760      	strb	r0, [r4, #29]
 8016256:	77a0      	strb	r0, [r4, #30]
 8016258:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 801625c:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 8016260:	4288      	cmp	r0, r1
 8016262:	d010      	beq.n	8016286 <llhwc_conn_evnt_done+0xb2>
 8016264:	f240 10d4 	movw	r0, #468	@ 0x1d4
 8016268:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801626c:	6800      	ldr	r0, [r0, #0]
 801626e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016272:	4288      	cmp	r0, r1
 8016274:	d007      	beq.n	8016286 <llhwc_conn_evnt_done+0xb2>
 8016276:	4438      	add	r0, r7
 8016278:	78c1      	ldrb	r1, [r0, #3]
 801627a:	0789      	lsls	r1, r1, #30
 801627c:	d103      	bne.n	8016286 <llhwc_conn_evnt_done+0xb2>
 801627e:	7901      	ldrb	r1, [r0, #4]
 8016280:	f041 0110 	orr.w	r1, r1, #16
 8016284:	7101      	strb	r1, [r0, #4]
 8016286:	f104 012a 	add.w	r1, r4, #42	@ 0x2a
 801628a:	4648      	mov	r0, r9
 801628c:	4622      	mov	r2, r4
 801628e:	f000 f9a1 	bl	80165d4 <llhwc_calc_num_rx_pkts>
 8016292:	f884 0020 	strb.w	r0, [r4, #32]
 8016296:	f8db 1068 	ldr.w	r1, [fp, #104]	@ 0x68
 801629a:	f8db 3068 	ldr.w	r3, [fp, #104]	@ 0x68
 801629e:	2202      	movs	r2, #2
 80162a0:	ea02 1191 	and.w	r1, r2, r1, lsr #6
 80162a4:	f3c3 2200 	ubfx	r2, r3, #8, #1
 80162a8:	f8db 3068 	ldr.w	r3, [fp, #104]	@ 0x68
 80162ac:	4411      	add	r1, r2
 80162ae:	f003 0210 	and.w	r2, r3, #16
 80162b2:	fab0 f080 	clz	r0, r0
 80162b6:	4411      	add	r1, r2
 80162b8:	0940      	lsrs	r0, r0, #5
 80162ba:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80162be:	77e0      	strb	r0, [r4, #31]
 80162c0:	f884 5021 	strb.w	r5, [r4, #33]	@ 0x21
 80162c4:	f884 5027 	strb.w	r5, [r4, #39]	@ 0x27
 80162c8:	f8d8 0020 	ldr.w	r0, [r8, #32]
 80162cc:	f247 3230 	movw	r2, #29488	@ 0x7330
 80162d0:	f3c0 6040 	ubfx	r0, r0, #25, #1
 80162d4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80162d8:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 80162dc:	f898 0023 	ldrb.w	r0, [r8, #35]	@ 0x23
 80162e0:	f000 0001 	and.w	r0, r0, #1
 80162e4:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 80162e8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80162ec:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80162f0:	f884 0028 	strb.w	r0, [r4, #40]	@ 0x28
 80162f4:	f8db 000c 	ldr.w	r0, [fp, #12]
 80162f8:	f3c0 0142 	ubfx	r1, r0, #1, #3
 80162fc:	f64f 4054 	movw	r0, #64596	@ 0xfc54
 8016300:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8016304:	f85b 0000 	ldr.w	r0, [fp, r0]
 8016308:	8b13      	ldrh	r3, [r2, #24]
 801630a:	8a12      	ldrh	r2, [r2, #16]
 801630c:	1ac0      	subs	r0, r0, r3
 801630e:	4402      	add	r2, r0
 8016310:	4620      	mov	r0, r4
 8016312:	f000 f8c5 	bl	80164a0 <llhwc_evnt_done>
 8016316:	f89a 0030 	ldrb.w	r0, [sl, #48]	@ 0x30
 801631a:	2801      	cmp	r0, #1
 801631c:	d117      	bne.n	801634e <llhwc_conn_evnt_done+0x17a>
 801631e:	f646 6004 	movw	r0, #28164	@ 0x6e04
 8016322:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016326:	6801      	ldr	r1, [r0, #0]
 8016328:	b189      	cbz	r1, 801634e <llhwc_conn_evnt_done+0x17a>
 801632a:	f247 33e8 	movw	r3, #29672	@ 0x73e8
 801632e:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8016332:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 8016336:	331c      	adds	r3, #28
 8016338:	881b      	ldrh	r3, [r3, #0]
 801633a:	4293      	cmp	r3, r2
 801633c:	d007      	beq.n	801634e <llhwc_conn_evnt_done+0x17a>
 801633e:	4299      	cmp	r1, r3
 8016340:	ea43 0307 	orr.w	r3, r3, r7
 8016344:	d1f8      	bne.n	8016338 <llhwc_conn_evnt_done+0x164>
 8016346:	2100      	movs	r1, #0
 8016348:	f88a 1030 	strb.w	r1, [sl, #48]	@ 0x30
 801634c:	6001      	str	r1, [r0, #0]
 801634e:	f898 0003 	ldrb.w	r0, [r8, #3]
 8016352:	f8cd 9000 	str.w	r9, [sp]
 8016356:	f010 071f 	ands.w	r7, r0, #31
 801635a:	bf18      	it	ne
 801635c:	2e00      	cmpne	r6, #0
 801635e:	d041      	beq.n	80163e4 <llhwc_conn_evnt_done+0x210>
 8016360:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016364:	f894 1021 	ldrb.w	r1, [r4, #33]	@ 0x21
 8016368:	f04f 0900 	mov.w	r9, #0
 801636c:	4408      	add	r0, r1
 801636e:	eba7 0a00 	sub.w	sl, r7, r0
 8016372:	bf00      	nop
 8016374:	0601      	lsls	r1, r0, #24
 8016376:	d10b      	bne.n	8016390 <llhwc_conn_evnt_done+0x1bc>
 8016378:	ea5f 600a 	movs.w	r0, sl, lsl #24
 801637c:	d01c      	beq.n	80163b8 <llhwc_conn_evnt_done+0x1e4>
 801637e:	6875      	ldr	r5, [r6, #4]
 8016380:	4630      	mov	r0, r6
 8016382:	f004 fab5 	bl	801a8f0 <free_buff_hdr>
 8016386:	f1aa 0a01 	sub.w	sl, sl, #1
 801638a:	2000      	movs	r0, #0
 801638c:	462e      	mov	r6, r5
 801638e:	e01a      	b.n	80163c6 <llhwc_conn_evnt_done+0x1f2>
 8016390:	6871      	ldr	r1, [r6, #4]
 8016392:	3801      	subs	r0, #1
 8016394:	0602      	lsls	r2, r0, #24
 8016396:	d013      	beq.n	80163c0 <llhwc_conn_evnt_done+0x1ec>
 8016398:	6832      	ldr	r2, [r6, #0]
 801639a:	7813      	ldrb	r3, [r2, #0]
 801639c:	f003 0303 	and.w	r3, r3, #3
 80163a0:	2b03      	cmp	r3, #3
 80163a2:	d10e      	bne.n	80163c2 <llhwc_conn_evnt_done+0x1ee>
 80163a4:	7912      	ldrb	r2, [r2, #4]
 80163a6:	f042 0220 	orr.w	r2, r2, #32
 80163aa:	2a22      	cmp	r2, #34	@ 0x22
 80163ac:	bf04      	itt	eq
 80163ae:	2201      	moveq	r2, #1
 80163b0:	f884 202e 	strbeq.w	r2, [r4, #46]	@ 0x2e
 80163b4:	e005      	b.n	80163c2 <llhwc_conn_evnt_done+0x1ee>
 80163b6:	bf00      	nop
 80163b8:	f04f 0a00 	mov.w	sl, #0
 80163bc:	2000      	movs	r0, #0
 80163be:	e002      	b.n	80163c6 <llhwc_conn_evnt_done+0x1f2>
 80163c0:	2000      	movs	r0, #0
 80163c2:	46b1      	mov	r9, r6
 80163c4:	460e      	mov	r6, r1
 80163c6:	3f01      	subs	r7, #1
 80163c8:	0639      	lsls	r1, r7, #24
 80163ca:	bf18      	it	ne
 80163cc:	2e00      	cmpne	r6, #0
 80163ce:	d1d1      	bne.n	8016374 <llhwc_conn_evnt_done+0x1a0>
 80163d0:	f646 5a58 	movw	sl, #27992	@ 0x6d58
 80163d4:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	bf1c      	itt	ne
 80163de:	2000      	movne	r0, #0
 80163e0:	f8c9 0004 	strne.w	r0, [r9, #4]
 80163e4:	7f60      	ldrb	r0, [r4, #29]
 80163e6:	b128      	cbz	r0, 80163f4 <llhwc_conn_evnt_done+0x220>
 80163e8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80163ec:	b910      	cbnz	r0, 80163f4 <llhwc_conn_evnt_done+0x220>
 80163ee:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 80163f2:	b140      	cbz	r0, 8016406 <llhwc_conn_evnt_done+0x232>
 80163f4:	f898 0022 	ldrb.w	r0, [r8, #34]	@ 0x22
 80163f8:	0780      	lsls	r0, r0, #30
 80163fa:	d507      	bpl.n	801640c <llhwc_conn_evnt_done+0x238>
 80163fc:	9900      	ldr	r1, [sp, #0]
 80163fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016402:	4281      	cmp	r1, r0
 8016404:	d102      	bne.n	801640c <llhwc_conn_evnt_done+0x238>
 8016406:	2001      	movs	r0, #1
 8016408:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 801640c:	2000      	movs	r0, #0
 801640e:	4621      	mov	r1, r4
 8016410:	f007 f97d 	bl	801d70e <emngr_post_event>
 8016414:	f009 f938 	bl	801f688 <llhwc_cmn_crypto_aes_done>
 8016418:	f89a 0030 	ldrb.w	r0, [sl, #48]	@ 0x30
 801641c:	b990      	cbnz	r0, 8016444 <llhwc_conn_evnt_done+0x270>
 801641e:	f64f 4038 	movw	r0, #64568	@ 0xfc38
 8016422:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8016426:	f85b 1000 	ldr.w	r1, [fp, r0]
 801642a:	f041 0102 	orr.w	r1, r1, #2
 801642e:	f84b 1000 	str.w	r1, [fp, r0]
 8016432:	f85b 1000 	ldr.w	r1, [fp, r0]
 8016436:	f021 0102 	bic.w	r1, r1, #2
 801643a:	f84b 1000 	str.w	r1, [fp, r0]
 801643e:	2001      	movs	r0, #1
 8016440:	f008 fa32 	bl	801e8a8 <llhwc_pwr_switch>
 8016444:	69a0      	ldr	r0, [r4, #24]
 8016446:	f009 fc4f 	bl	801fce8 <llhwc_cmn_free_desc>
 801644a:	f8db 0088 	ldr.w	r0, [fp, #136]	@ 0x88
 801644e:	f020 4180 	bic.w	r1, r0, #1073741824	@ 0x40000000
 8016452:	2050      	movs	r0, #80	@ 0x50
 8016454:	f8cb 1088 	str.w	r1, [fp, #136]	@ 0x88
 8016458:	b001      	add	sp, #4
 801645a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645e:	f005 baa7 	b.w	801b9b0 <bsp_debug_gpio_clear>

08016462 <llhwc_dtm_done>:
 8016462:	b510      	push	{r4, lr}
 8016464:	f646 5458 	movw	r4, #27992	@ 0x6d58
 8016468:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801646c:	4620      	mov	r0, r4
 801646e:	f009 fc3b 	bl	801fce8 <llhwc_cmn_free_desc>
 8016472:	f240 4004 	movw	r0, #1028	@ 0x404
 8016476:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801647a:	6801      	ldr	r1, [r0, #0]
 801647c:	f021 0101 	bic.w	r1, r1, #1
 8016480:	6001      	str	r1, [r0, #0]
 8016482:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8016484:	f041 0102 	orr.w	r1, r1, #2
 8016488:	6401      	str	r1, [r0, #64]	@ 0x40
 801648a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 801648c:	f021 0102 	bic.w	r1, r1, #2
 8016490:	6401      	str	r1, [r0, #64]	@ 0x40
 8016492:	2001      	movs	r0, #1
 8016494:	f008 fa08 	bl	801e8a8 <llhwc_pwr_switch>
 8016498:	200c      	movs	r0, #12
 801649a:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
 801649e:	bd10      	pop	{r4, pc}

080164a0 <llhwc_evnt_done>:
 80164a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a2:	b081      	sub	sp, #4
 80164a4:	4604      	mov	r4, r0
 80164a6:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
 80164aa:	f894 5020 	ldrb.w	r5, [r4, #32]
 80164ae:	f1b0 0780 	subs.w	r7, r0, #128	@ 0x80
 80164b2:	f173 0700 	sbcs.w	r7, r3, #0
 80164b6:	d305      	bcc.n	80164c4 <llhwc_evnt_done+0x24>
 80164b8:	f410 47c0 	ands.w	r7, r0, #24576	@ 0x6000
 80164bc:	bf18      	it	ne
 80164be:	f884 102b 	strbne.w	r1, [r4, #43]	@ 0x2b
 80164c2:	e001      	b.n	80164c8 <llhwc_evnt_done+0x28>
 80164c4:	f884 102b 	strb.w	r1, [r4, #43]	@ 0x2b
 80164c8:	f247 3130 	movw	r1, #29488	@ 0x7330
 80164cc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80164d0:	b16d      	cbz	r5, 80164ee <llhwc_evnt_done+0x4e>
 80164d2:	68a7      	ldr	r7, [r4, #8]
 80164d4:	b92f      	cbnz	r7, 80164e2 <llhwc_evnt_done+0x42>
 80164d6:	f646 6700 	movw	r7, #28160	@ 0x6e00
 80164da:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80164de:	683f      	ldr	r7, [r7, #0]
 80164e0:	60a7      	str	r7, [r4, #8]
 80164e2:	683e      	ldr	r6, [r7, #0]
 80164e4:	897f      	ldrh	r7, [r7, #10]
 80164e6:	5dbf      	ldrb	r7, [r7, r6]
 80164e8:	f007 070f 	and.w	r7, r7, #15
 80164ec:	e004      	b.n	80164f8 <llhwc_evnt_done+0x58>
 80164ee:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80164f2:	07bf      	lsls	r7, r7, #30
 80164f4:	d513      	bpl.n	801651e <llhwc_evnt_done+0x7e>
 80164f6:	2700      	movs	r7, #0
 80164f8:	f410 7fb8 	tst.w	r0, #368	@ 0x170
 80164fc:	d009      	beq.n	8016512 <llhwc_evnt_done+0x72>
 80164fe:	f891 003b 	ldrb.w	r0, [r1, #59]	@ 0x3b
 8016502:	f24e 137a 	movw	r3, #57722	@ 0xe17a
 8016506:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801650a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801650e:	1a12      	subs	r2, r2, r0
 8016510:	e005      	b.n	801651e <llhwc_evnt_done+0x7e>
 8016512:	f480 5000 	eor.w	r0, r0, #8192	@ 0x2000
 8016516:	4318      	orrs	r0, r3
 8016518:	bf08      	it	eq
 801651a:	2f03      	cmpeq	r7, #3
 801651c:	d056      	beq.n	80165cc <llhwc_evnt_done+0x12c>
 801651e:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
 8016522:	e9c4 0100 	strd	r0, r1, [r4]
 8016526:	2000      	movs	r0, #0
 8016528:	80a0      	strh	r0, [r4, #4]
 801652a:	4620      	mov	r0, r4
 801652c:	4611      	mov	r1, r2
 801652e:	2201      	movs	r2, #1
 8016530:	f006 ff98 	bl	801d464 <ble_time_add_uint>
 8016534:	2d00      	cmp	r5, #0
 8016536:	d047      	beq.n	80165c8 <llhwc_evnt_done+0x128>
 8016538:	4620      	mov	r0, r4
 801653a:	f850 1f08 	ldr.w	r1, [r0, #8]!
 801653e:	b929      	cbnz	r1, 801654c <llhwc_evnt_done+0xac>
 8016540:	f646 6100 	movw	r1, #28160	@ 0x6e00
 8016544:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016548:	6809      	ldr	r1, [r1, #0]
 801654a:	6001      	str	r1, [r0, #0]
 801654c:	f646 5e58 	movw	lr, #27992	@ 0x6d58
 8016550:	f04f 0c00 	mov.w	ip, #0
 8016554:	2200      	movs	r2, #0
 8016556:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 801655a:	2100      	movs	r1, #0
 801655c:	6800      	ldr	r0, [r0, #0]
 801655e:	6803      	ldr	r3, [r0, #0]
 8016560:	8946      	ldrh	r6, [r0, #10]
 8016562:	18f7      	adds	r7, r6, r3
 8016564:	787b      	ldrb	r3, [r7, #1]
 8016566:	6926      	ldr	r6, [r4, #16]
 8016568:	f406 76c0 	and.w	r6, r6, #384	@ 0x180
 801656c:	b153      	cbz	r3, 8016584 <llhwc_evnt_done+0xe4>
 801656e:	b1ee      	cbz	r6, 80165ac <llhwc_evnt_done+0x10c>
 8016570:	f894 602a 	ldrb.w	r6, [r4, #42]	@ 0x2a
 8016574:	b16e      	cbz	r6, 8016592 <llhwc_evnt_done+0xf2>
 8016576:	3b04      	subs	r3, #4
 8016578:	707b      	strb	r3, [r7, #1]
 801657a:	6926      	ldr	r6, [r4, #16]
 801657c:	2700      	movs	r7, #0
 801657e:	f406 76c0 	and.w	r6, r6, #384	@ 0x180
 8016582:	e004      	b.n	801658e <llhwc_evnt_done+0xee>
 8016584:	2700      	movs	r7, #0
 8016586:	2e00      	cmp	r6, #0
 8016588:	bf18      	it	ne
 801658a:	3101      	addne	r1, #1
 801658c:	2300      	movs	r3, #0
 801658e:	433e      	orrs	r6, r7
 8016590:	d00c      	beq.n	80165ac <llhwc_evnt_done+0x10c>
 8016592:	6806      	ldr	r6, [r0, #0]
 8016594:	7837      	ldrb	r7, [r6, #0]
 8016596:	f007 0703 	and.w	r7, r7, #3
 801659a:	2f03      	cmp	r7, #3
 801659c:	d106      	bne.n	80165ac <llhwc_evnt_done+0x10c>
 801659e:	7936      	ldrb	r6, [r6, #4]
 80165a0:	f046 0620 	orr.w	r6, r6, #32
 80165a4:	2e22      	cmp	r6, #34	@ 0x22
 80165a6:	bf08      	it	eq
 80165a8:	f88e c030 	strbeq.w	ip, [lr, #48]	@ 0x30
 80165ac:	3304      	adds	r3, #4
 80165ae:	3201      	adds	r2, #1
 80165b0:	8183      	strh	r3, [r0, #12]
 80165b2:	42aa      	cmp	r2, r5
 80165b4:	f100 0004 	add.w	r0, r0, #4
 80165b8:	d3d0      	bcc.n	801655c <llhwc_evnt_done+0xbc>
 80165ba:	f894 0020 	ldrb.w	r0, [r4, #32]
 80165be:	f884 1021 	strb.w	r1, [r4, #33]	@ 0x21
 80165c2:	1a40      	subs	r0, r0, r1
 80165c4:	f884 0020 	strb.w	r0, [r4, #32]
 80165c8:	b001      	add	sp, #4
 80165ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165cc:	2d00      	cmp	r5, #0
 80165ce:	d196      	bne.n	80164fe <llhwc_evnt_done+0x5e>
 80165d0:	e7a5      	b.n	801651e <llhwc_evnt_done+0x7e>
	...

080165d4 <llhwc_calc_num_rx_pkts>:
 80165d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d8:	b087      	sub	sp, #28
 80165da:	4603      	mov	r3, r0
 80165dc:	f247 30e8 	movw	r0, #29672	@ 0x73e8
 80165e0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80165e4:	460d      	mov	r5, r1
 80165e6:	8bc1      	ldrh	r1, [r0, #30]
 80165e8:	f247 3030 	movw	r0, #29488	@ 0x7330
 80165ec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80165f0:	f890 a03b 	ldrb.w	sl, [r0, #59]	@ 0x3b
 80165f4:	f640 000c 	movw	r0, #2060	@ 0x80c
 80165f8:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 80165fc:	6800      	ldr	r0, [r0, #0]
 80165fe:	4299      	cmp	r1, r3
 8016600:	d102      	bne.n	8016608 <llhwc_calc_num_rx_pkts+0x34>
 8016602:	2700      	movs	r7, #0
 8016604:	2400      	movs	r4, #0
 8016606:	e088      	b.n	801671a <llhwc_calc_num_rx_pkts+0x146>
 8016608:	9500      	str	r5, [sp, #0]
 801660a:	f000 051d 	and.w	r5, r0, #29
 801660e:	f646 6700 	movw	r7, #28160	@ 0x6e00
 8016612:	f646 54fc 	movw	r4, #28156	@ 0x6dfc
 8016616:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801661a:	2d0d      	cmp	r5, #13
 801661c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8016620:	bf08      	it	eq
 8016622:	4627      	moveq	r7, r4
 8016624:	f010 0f1c 	tst.w	r0, #28
 8016628:	bf08      	it	eq
 801662a:	4627      	moveq	r7, r4
 801662c:	2000      	movs	r0, #0
 801662e:	f8d7 8000 	ldr.w	r8, [r7]
 8016632:	9003      	str	r0, [sp, #12]
 8016634:	2000      	movs	r0, #0
 8016636:	9002      	str	r0, [sp, #8]
 8016638:	2000      	movs	r0, #0
 801663a:	9001      	str	r0, [sp, #4]
 801663c:	2000      	movs	r0, #0
 801663e:	2500      	movs	r5, #0
 8016640:	f04f 0b00 	mov.w	fp, #0
 8016644:	9004      	str	r0, [sp, #16]
 8016646:	2000      	movs	r0, #0
 8016648:	2400      	movs	r4, #0
 801664a:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801664e:	2700      	movs	r7, #0
 8016650:	9205      	str	r2, [sp, #20]
 8016652:	bf00      	nop
 8016654:	ea41 0905 	orr.w	r9, r1, r5
 8016658:	f899 1003 	ldrb.w	r1, [r9, #3]
 801665c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8016660:	440c      	add	r4, r1
 8016662:	b38a      	cbz	r2, 80166c8 <llhwc_calc_num_rx_pkts+0xf4>
 8016664:	f1b8 0f00 	cmp.w	r8, #0
 8016668:	d02e      	beq.n	80166c8 <llhwc_calc_num_rx_pkts+0xf4>
 801666a:	f8d8 0000 	ldr.w	r0, [r8]
 801666e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8016672:	462e      	mov	r6, r5
 8016674:	4408      	add	r0, r1
 8016676:	f247 31e8 	movw	r1, #29672	@ 0x73e8
 801667a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801667e:	8bc9      	ldrh	r1, [r1, #30]
 8016680:	7842      	ldrb	r2, [r0, #1]
 8016682:	4329      	orrs	r1, r5
 8016684:	78cd      	ldrb	r5, [r1, #3]
 8016686:	1dd1      	adds	r1, r2, #7
 8016688:	f021 0103 	bic.w	r1, r1, #3
 801668c:	5808      	ldr	r0, [r1, r0]
 801668e:	9406      	str	r4, [sp, #24]
 8016690:	461c      	mov	r4, r3
 8016692:	f006 fc9b 	bl	801cfcc <llhwc_phy_get_rssi_value>
 8016696:	f1ba 0f04 	cmp.w	sl, #4
 801669a:	bf08      	it	eq
 801669c:	f015 0108 	andseq.w	r1, r5, #8
 80166a0:	d006      	beq.n	80166b0 <llhwc_calc_num_rx_pkts+0xdc>
 80166a2:	9904      	ldr	r1, [sp, #16]
 80166a4:	4401      	add	r1, r0
 80166a6:	9104      	str	r1, [sp, #16]
 80166a8:	9902      	ldr	r1, [sp, #8]
 80166aa:	3101      	adds	r1, #1
 80166ac:	9102      	str	r1, [sp, #8]
 80166ae:	e005      	b.n	80166bc <llhwc_calc_num_rx_pkts+0xe8>
 80166b0:	9901      	ldr	r1, [sp, #4]
 80166b2:	4401      	add	r1, r0
 80166b4:	9101      	str	r1, [sp, #4]
 80166b6:	9903      	ldr	r1, [sp, #12]
 80166b8:	3101      	adds	r1, #1
 80166ba:	9103      	str	r1, [sp, #12]
 80166bc:	4623      	mov	r3, r4
 80166be:	f8d8 8004 	ldr.w	r8, [r8, #4]
 80166c2:	9a05      	ldr	r2, [sp, #20]
 80166c4:	9c06      	ldr	r4, [sp, #24]
 80166c6:	4635      	mov	r5, r6
 80166c8:	f8b9 1000 	ldrh.w	r1, [r9]
 80166cc:	f10b 0b01 	add.w	fp, fp, #1
 80166d0:	4299      	cmp	r1, r3
 80166d2:	f107 0701 	add.w	r7, r7, #1
 80166d6:	d1bd      	bne.n	8016654 <llhwc_calc_num_rx_pkts+0x80>
 80166d8:	b138      	cbz	r0, 80166ea <llhwc_calc_num_rx_pkts+0x116>
 80166da:	f006 fc77 	bl	801cfcc <llhwc_phy_get_rssi_value>
 80166de:	9a05      	ldr	r2, [sp, #20]
 80166e0:	f646 5154 	movw	r1, #27988	@ 0x6d54
 80166e4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80166e8:	8008      	strh	r0, [r1, #0]
 80166ea:	9d00      	ldr	r5, [sp, #0]
 80166ec:	b1aa      	cbz	r2, 801671a <llhwc_calc_num_rx_pkts+0x146>
 80166ee:	0638      	lsls	r0, r7, #24
 80166f0:	d013      	beq.n	801671a <llhwc_calc_num_rx_pkts+0x146>
 80166f2:	f1aa 0001 	sub.w	r0, sl, #1
 80166f6:	2802      	cmp	r0, #2
 80166f8:	d304      	bcc.n	8016704 <llhwc_calc_num_rx_pkts+0x130>
 80166fa:	f1ba 0f04 	cmp.w	sl, #4
 80166fe:	d111      	bne.n	8016724 <llhwc_calc_num_rx_pkts+0x150>
 8016700:	9803      	ldr	r0, [sp, #12]
 8016702:	b978      	cbnz	r0, 8016724 <llhwc_calc_num_rx_pkts+0x150>
 8016704:	9804      	ldr	r0, [sp, #16]
 8016706:	fb90 f0fb 	sdiv	r0, r0, fp
 801670a:	f006 fc5f 	bl	801cfcc <llhwc_phy_get_rssi_value>
 801670e:	9905      	ldr	r1, [sp, #20]
 8016710:	f881 0022 	strb.w	r0, [r1, #34]	@ 0x22
 8016714:	207f      	movs	r0, #127	@ 0x7f
 8016716:	f881 0023 	strb.w	r0, [r1, #35]	@ 0x23
 801671a:	b2f8      	uxtb	r0, r7
 801671c:	702c      	strb	r4, [r5, #0]
 801671e:	b007      	add	sp, #28
 8016720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016724:	9802      	ldr	r0, [sp, #8]
 8016726:	f1ba 0f04 	cmp.w	sl, #4
 801672a:	bf08      	it	eq
 801672c:	2800      	cmpeq	r0, #0
 801672e:	d014      	beq.n	801675a <llhwc_calc_num_rx_pkts+0x186>
 8016730:	f1ba 0f04 	cmp.w	sl, #4
 8016734:	d1f1      	bne.n	801671a <llhwc_calc_num_rx_pkts+0x146>
 8016736:	2800      	cmp	r0, #0
 8016738:	d0ef      	beq.n	801671a <llhwc_calc_num_rx_pkts+0x146>
 801673a:	9e03      	ldr	r6, [sp, #12]
 801673c:	2e00      	cmp	r6, #0
 801673e:	d0ec      	beq.n	801671a <llhwc_calc_num_rx_pkts+0x146>
 8016740:	9904      	ldr	r1, [sp, #16]
 8016742:	fb91 f0f0 	sdiv	r0, r1, r0
 8016746:	f006 fc41 	bl	801cfcc <llhwc_phy_get_rssi_value>
 801674a:	9901      	ldr	r1, [sp, #4]
 801674c:	9a05      	ldr	r2, [sp, #20]
 801674e:	fb91 f1f6 	sdiv	r1, r1, r6
 8016752:	f882 0022 	strb.w	r0, [r2, #34]	@ 0x22
 8016756:	4608      	mov	r0, r1
 8016758:	e005      	b.n	8016766 <llhwc_calc_num_rx_pkts+0x192>
 801675a:	9801      	ldr	r0, [sp, #4]
 801675c:	217f      	movs	r1, #127	@ 0x7f
 801675e:	fb90 f0fb 	sdiv	r0, r0, fp
 8016762:	f882 1022 	strb.w	r1, [r2, #34]	@ 0x22
 8016766:	f006 fc31 	bl	801cfcc <llhwc_phy_get_rssi_value>
 801676a:	9905      	ldr	r1, [sp, #20]
 801676c:	e7d3      	b.n	8016716 <llhwc_calc_num_rx_pkts+0x142>
	...

08016770 <evnt_schdlr_choose_suitable_intrv>:
 8016770:	b5b0      	push	{r4, r5, r7, lr}
 8016772:	f646 6418 	movw	r4, #28184	@ 0x6e18
 8016776:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801677a:	f8d4 e034 	ldr.w	lr, [r4, #52]	@ 0x34
 801677e:	4684      	mov	ip, r0
 8016780:	f1be 0f00 	cmp.w	lr, #0
 8016784:	d00f      	beq.n	80167a6 <evnt_schdlr_choose_suitable_intrv+0x36>
 8016786:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 801678a:	2801      	cmp	r0, #1
 801678c:	d104      	bne.n	8016798 <evnt_schdlr_choose_suitable_intrv+0x28>
 801678e:	6820      	ldr	r0, [r4, #0]
 8016790:	b110      	cbz	r0, 8016798 <evnt_schdlr_choose_suitable_intrv+0x28>
 8016792:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8016794:	3001      	adds	r0, #1
 8016796:	d006      	beq.n	80167a6 <evnt_schdlr_choose_suitable_intrv+0x36>
 8016798:	45e6      	cmp	lr, ip
 801679a:	d30e      	bcc.n	80167ba <evnt_schdlr_choose_suitable_intrv+0x4a>
 801679c:	458e      	cmp	lr, r1
 801679e:	d80c      	bhi.n	80167ba <evnt_schdlr_choose_suitable_intrv+0x4a>
 80167a0:	2000      	movs	r0, #0
 80167a2:	46f4      	mov	ip, lr
 80167a4:	e039      	b.n	801681a <evnt_schdlr_choose_suitable_intrv+0xaa>
 80167a6:	1e58      	subs	r0, r3, #1
 80167a8:	b280      	uxth	r0, r0
 80167aa:	4563      	cmp	r3, ip
 80167ac:	bf88      	it	hi
 80167ae:	469c      	movhi	ip, r3
 80167b0:	4288      	cmp	r0, r1
 80167b2:	bf28      	it	cs
 80167b4:	468c      	movcs	ip, r1
 80167b6:	2000      	movs	r0, #0
 80167b8:	e02f      	b.n	801681a <evnt_schdlr_choose_suitable_intrv+0xaa>
 80167ba:	458e      	cmp	lr, r1
 80167bc:	d20c      	bcs.n	80167d8 <evnt_schdlr_choose_suitable_intrv+0x68>
 80167be:	ea4f 044e 	mov.w	r4, lr, lsl #1
 80167c2:	2000      	movs	r0, #0
 80167c4:	1825      	adds	r5, r4, r0
 80167c6:	4565      	cmp	r5, ip
 80167c8:	d301      	bcc.n	80167ce <evnt_schdlr_choose_suitable_intrv+0x5e>
 80167ca:	428d      	cmp	r5, r1
 80167cc:	d920      	bls.n	8016810 <evnt_schdlr_choose_suitable_intrv+0xa0>
 80167ce:	4470      	add	r0, lr
 80167d0:	eb0e 0500 	add.w	r5, lr, r0
 80167d4:	428d      	cmp	r5, r1
 80167d6:	d3f5      	bcc.n	80167c4 <evnt_schdlr_choose_suitable_intrv+0x54>
 80167d8:	45e6      	cmp	lr, ip
 80167da:	d90f      	bls.n	80167fc <evnt_schdlr_choose_suitable_intrv+0x8c>
 80167dc:	2002      	movs	r0, #2
 80167de:	bf00      	nop
 80167e0:	fbbe f4f0 	udiv	r4, lr, r0
 80167e4:	4564      	cmp	r4, ip
 80167e6:	d305      	bcc.n	80167f4 <evnt_schdlr_choose_suitable_intrv+0x84>
 80167e8:	428c      	cmp	r4, r1
 80167ea:	d803      	bhi.n	80167f4 <evnt_schdlr_choose_suitable_intrv+0x84>
 80167ec:	fb04 f500 	mul.w	r5, r4, r0
 80167f0:	4575      	cmp	r5, lr
 80167f2:	d010      	beq.n	8016816 <evnt_schdlr_choose_suitable_intrv+0xa6>
 80167f4:	4564      	cmp	r4, ip
 80167f6:	f100 0001 	add.w	r0, r0, #1
 80167fa:	d8f1      	bhi.n	80167e0 <evnt_schdlr_choose_suitable_intrv+0x70>
 80167fc:	1e58      	subs	r0, r3, #1
 80167fe:	b280      	uxth	r0, r0
 8016800:	4563      	cmp	r3, ip
 8016802:	bf88      	it	hi
 8016804:	469c      	movhi	ip, r3
 8016806:	4288      	cmp	r0, r1
 8016808:	bf28      	it	cs
 801680a:	468c      	movcs	ip, r1
 801680c:	201f      	movs	r0, #31
 801680e:	e004      	b.n	801681a <evnt_schdlr_choose_suitable_intrv+0xaa>
 8016810:	eb00 0c4e 	add.w	ip, r0, lr, lsl #1
 8016814:	e7cf      	b.n	80167b6 <evnt_schdlr_choose_suitable_intrv+0x46>
 8016816:	2000      	movs	r0, #0
 8016818:	46a4      	mov	ip, r4
 801681a:	f8a2 c000 	strh.w	ip, [r2]
 801681e:	bdb0      	pop	{r4, r5, r7, pc}

08016820 <extend_gnrc_evnt_durn_chk>:
 8016820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016824:	b081      	sub	sp, #4
 8016826:	4614      	mov	r4, r2
 8016828:	4688      	mov	r8, r1
 801682a:	4605      	mov	r5, r0
 801682c:	f000 f88c 	bl	8016948 <get_priority>
 8016830:	f646 6918 	movw	r9, #28184	@ 0x6e18
 8016834:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8016838:	f8d9 6000 	ldr.w	r6, [r9]
 801683c:	4607      	mov	r7, r0
 801683e:	f005 f8ce 	bl	801b9de <os_disable_isr>
 8016842:	f240 1abc 	movw	sl, #444	@ 0x1bc
 8016846:	f646 4b78 	movw	fp, #27768	@ 0x6c78
 801684a:	f1b8 0f00 	cmp.w	r8, #0
 801684e:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 8016852:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8016856:	d116      	bne.n	8016886 <extend_gnrc_evnt_durn_chk+0x66>
 8016858:	f895 008d 	ldrb.w	r0, [r5, #141]	@ 0x8d
 801685c:	b900      	cbnz	r0, 8016860 <extend_gnrc_evnt_durn_chk+0x40>
 801685e:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 8016860:	b17e      	cbz	r6, 8016882 <extend_gnrc_evnt_durn_chk+0x62>
 8016862:	f8da 0000 	ldr.w	r0, [sl]
 8016866:	f8db 1008 	ldr.w	r1, [fp, #8]
 801686a:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 801686c:	4408      	add	r0, r1
 801686e:	1a10      	subs	r0, r2, r0
 8016870:	42a0      	cmp	r0, r4
 8016872:	d206      	bcs.n	8016882 <extend_gnrc_evnt_durn_chk+0x62>
 8016874:	4630      	mov	r0, r6
 8016876:	f000 f867 	bl	8016948 <get_priority>
 801687a:	42b8      	cmp	r0, r7
 801687c:	d357      	bcc.n	801692e <extend_gnrc_evnt_durn_chk+0x10e>
 801687e:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 8016880:	e7ee      	b.n	8016860 <extend_gnrc_evnt_durn_chk+0x40>
 8016882:	f8d9 6000 	ldr.w	r6, [r9]
 8016886:	2e00      	cmp	r6, #0
 8016888:	d046      	beq.n	8016918 <extend_gnrc_evnt_durn_chk+0xf8>
 801688a:	42ae      	cmp	r6, r5
 801688c:	d102      	bne.n	8016894 <extend_gnrc_evnt_durn_chk+0x74>
 801688e:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 8016890:	2800      	cmp	r0, #0
 8016892:	d041      	beq.n	8016918 <extend_gnrc_evnt_durn_chk+0xf8>
 8016894:	f895 008d 	ldrb.w	r0, [r5, #141]	@ 0x8d
 8016898:	b908      	cbnz	r0, 801689e <extend_gnrc_evnt_durn_chk+0x7e>
 801689a:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 801689c:	b3e6      	cbz	r6, 8016918 <extend_gnrc_evnt_durn_chk+0xf8>
 801689e:	f8cd 8000 	str.w	r8, [sp]
 80168a2:	f04f 0801 	mov.w	r8, #1
 80168a6:	bf00      	nop
 80168a8:	f8da 0000 	ldr.w	r0, [sl]
 80168ac:	f8db 1008 	ldr.w	r1, [fp, #8]
 80168b0:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 80168b2:	4408      	add	r0, r1
 80168b4:	1a10      	subs	r0, r2, r0
 80168b6:	42a0      	cmp	r0, r4
 80168b8:	d22e      	bcs.n	8016918 <extend_gnrc_evnt_durn_chk+0xf8>
 80168ba:	4630      	mov	r0, r6
 80168bc:	f000 f844 	bl	8016948 <get_priority>
 80168c0:	42b8      	cmp	r0, r7
 80168c2:	d313      	bcc.n	80168ec <extend_gnrc_evnt_durn_chk+0xcc>
 80168c4:	f895 008d 	ldrb.w	r0, [r5, #141]	@ 0x8d
 80168c8:	b960      	cbnz	r0, 80168e4 <extend_gnrc_evnt_durn_chk+0xc4>
 80168ca:	200d      	movs	r0, #13
 80168cc:	f005 f86e 	bl	801b9ac <bsp_debug_gpio_set>
 80168d0:	f899 003a 	ldrb.w	r0, [r9, #58]	@ 0x3a
 80168d4:	f886 809a 	strb.w	r8, [r6, #154]	@ 0x9a
 80168d8:	3001      	adds	r0, #1
 80168da:	f889 003a 	strb.w	r0, [r9, #58]	@ 0x3a
 80168de:	200d      	movs	r0, #13
 80168e0:	f005 f866 	bl	801b9b0 <bsp_debug_gpio_clear>
 80168e4:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 80168e6:	2e00      	cmp	r6, #0
 80168e8:	d1de      	bne.n	80168a8 <extend_gnrc_evnt_durn_chk+0x88>
 80168ea:	e016      	b.n	801691a <extend_gnrc_evnt_durn_chk+0xfa>
 80168ec:	9800      	ldr	r0, [sp, #0]
 80168ee:	2101      	movs	r1, #1
 80168f0:	3801      	subs	r0, #1
 80168f2:	fab0 f080 	clz	r0, r0
 80168f6:	0940      	lsrs	r0, r0, #5
 80168f8:	f005 f811 	bl	801b91e <bsp_assert>
 80168fc:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	@ 0x90
 8016900:	f081 0108 	eor.w	r1, r1, #8
 8016904:	4308      	orrs	r0, r1
 8016906:	4650      	mov	r0, sl
 8016908:	bf08      	it	eq
 801690a:	4658      	moveq	r0, fp
 801690c:	f8db 1008 	ldr.w	r1, [fp, #8]
 8016910:	6800      	ldr	r0, [r0, #0]
 8016912:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 8016914:	4408      	add	r0, r1
 8016916:	1a14      	subs	r4, r2, r0
 8016918:	b14c      	cbz	r4, 801692e <extend_gnrc_evnt_durn_chk+0x10e>
 801691a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 801691c:	f8da 1000 	ldr.w	r1, [sl]
 8016920:	f8db 2008 	ldr.w	r2, [fp, #8]
 8016924:	1a20      	subs	r0, r4, r0
 8016926:	4408      	add	r0, r1
 8016928:	4410      	add	r0, r2
 801692a:	6628      	str	r0, [r5, #96]	@ 0x60
 801692c:	e000      	b.n	8016930 <extend_gnrc_evnt_durn_chk+0x110>
 801692e:	2400      	movs	r4, #0
 8016930:	f899 003a 	ldrb.w	r0, [r9, #58]	@ 0x3a
 8016934:	b108      	cbz	r0, 801693a <extend_gnrc_evnt_durn_chk+0x11a>
 8016936:	f000 f8f9 	bl	8016b2c <recheck_conflicting>
 801693a:	f005 f852 	bl	801b9e2 <os_enable_isr>
 801693e:	4620      	mov	r0, r4
 8016940:	b001      	add	sp, #4
 8016942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016948 <get_priority>:
 8016948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801694c:	e9d0 2124 	ldrd	r2, r1, [r0, #144]	@ 0x90
 8016950:	4604      	mov	r4, r0
 8016952:	f1d2 003f 	rsbs	r0, r2, #63	@ 0x3f
 8016956:	f04f 0300 	mov.w	r3, #0
 801695a:	eb73 0001 	sbcs.w	r0, r3, r1
 801695e:	f04f 000b 	mov.w	r0, #11
 8016962:	db1a      	blt.n	801699a <get_priority+0x52>
 8016964:	1e56      	subs	r6, r2, #1
 8016966:	f161 0700 	sbc.w	r7, r1, #0
 801696a:	f1d6 051f 	rsbs	r5, r6, #31
 801696e:	41bb      	sbcs	r3, r7
 8016970:	f0c0 80d8 	bcc.w	8016b24 <get_priority+0x1dc>
 8016974:	2301      	movs	r3, #1
 8016976:	40b3      	lsls	r3, r6
 8016978:	f013 0f8b 	tst.w	r3, #139	@ 0x8b
 801697c:	d018      	beq.n	80169b0 <get_priority+0x68>
 801697e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8016980:	f082 0202 	eor.w	r2, r2, #2
 8016984:	4311      	orrs	r1, r2
 8016986:	d102      	bne.n	801698e <get_priority+0x46>
 8016988:	7e42      	ldrb	r2, [r0, #25]
 801698a:	2a01      	cmp	r2, #1
 801698c:	d077      	beq.n	8016a7e <get_priority+0x136>
 801698e:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 8016992:	2a02      	cmp	r2, #2
 8016994:	d925      	bls.n	80169e2 <get_priority+0x9a>
 8016996:	2006      	movs	r0, #6
 8016998:	e0c4      	b.n	8016b24 <get_priority+0x1dc>
 801699a:	f1d2 07ff 	rsbs	r7, r2, #255	@ 0xff
 801699e:	418b      	sbcs	r3, r1
 80169a0:	db11      	blt.n	80169c6 <get_priority+0x7e>
 80169a2:	f082 0340 	eor.w	r3, r2, #64	@ 0x40
 80169a6:	430b      	orrs	r3, r1
 80169a8:	d025      	beq.n	80169f6 <get_priority+0xae>
 80169aa:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80169ae:	e010      	b.n	80169d2 <get_priority+0x8a>
 80169b0:	f013 2f80 	tst.w	r3, #2147516416	@ 0x80008000
 80169b4:	f000 80b6 	beq.w	8016b24 <get_priority+0x1dc>
 80169b8:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 80169bc:	2009      	movs	r0, #9
 80169be:	2909      	cmp	r1, #9
 80169c0:	bf88      	it	hi
 80169c2:	2005      	movhi	r0, #5
 80169c4:	e0ae      	b.n	8016b24 <get_priority+0x1dc>
 80169c6:	f081 0308 	eor.w	r3, r1, #8
 80169ca:	4313      	orrs	r3, r2
 80169cc:	d023      	beq.n	8016a16 <get_priority+0xce>
 80169ce:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 80169d2:	4311      	orrs	r1, r2
 80169d4:	f040 80a6 	bne.w	8016b24 <get_priority+0x1dc>
 80169d8:	7e60      	ldrb	r0, [r4, #25]
 80169da:	2801      	cmp	r0, #1
 80169dc:	d127      	bne.n	8016a2e <get_priority+0xe6>
 80169de:	2000      	movs	r0, #0
 80169e0:	e0a0      	b.n	8016b24 <get_priority+0x1dc>
 80169e2:	6942      	ldr	r2, [r0, #20]
 80169e4:	200a      	movs	r0, #10
 80169e6:	2900      	cmp	r1, #0
 80169e8:	bf08      	it	eq
 80169ea:	2007      	moveq	r0, #7
 80169ec:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80169f0:	bf88      	it	hi
 80169f2:	2006      	movhi	r0, #6
 80169f4:	e096      	b.n	8016b24 <get_priority+0x1dc>
 80169f6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80169f8:	2101      	movs	r1, #1
 80169fa:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 80169fe:	2001      	movs	r0, #1
 8016a00:	f004 ff8d 	bl	801b91e <bsp_assert>
 8016a04:	68a0      	ldr	r0, [r4, #8]
 8016a06:	b3e0      	cbz	r0, 8016a82 <get_priority+0x13a>
 8016a08:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 8016a0c:	200b      	movs	r0, #11
 8016a0e:	2903      	cmp	r1, #3
 8016a10:	bf88      	it	hi
 8016a12:	2009      	movhi	r0, #9
 8016a14:	e086      	b.n	8016b24 <get_priority+0x1dc>
 8016a16:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016a1a:	2801      	cmp	r0, #1
 8016a1c:	d0bb      	beq.n	8016996 <get_priority+0x4e>
 8016a1e:	2802      	cmp	r0, #2
 8016a20:	d02d      	beq.n	8016a7e <get_priority+0x136>
 8016a22:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8016a26:	2806      	cmp	r0, #6
 8016a28:	d2b5      	bcs.n	8016996 <get_priority+0x4e>
 8016a2a:	200a      	movs	r0, #10
 8016a2c:	e07a      	b.n	8016b24 <get_priority+0x1dc>
 8016a2e:	f894 008c 	ldrb.w	r0, [r4, #140]	@ 0x8c
 8016a32:	2800      	cmp	r0, #0
 8016a34:	d06e      	beq.n	8016b14 <get_priority+0x1cc>
 8016a36:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8016a38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016a3c:	f105 0108 	add.w	r1, r5, #8
 8016a40:	f006 fc88 	bl	801d354 <ble_time_diff_us>
 8016a44:	8b69      	ldrh	r1, [r5, #26]
 8016a46:	f24a 1220 	movw	r2, #41248	@ 0xa120
 8016a4a:	f2c0 0207 	movt	r2, #7
 8016a4e:	fb01 f102 	mul.w	r1, r1, r2
 8016a52:	f248 521f 	movw	r2, #34079	@ 0x851f
 8016a56:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8016a5a:	fb81 1202 	smull	r1, r2, r1, r2
 8016a5e:	1151      	asrs	r1, r2, #5
 8016a60:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 8016a64:	4281      	cmp	r1, r0
 8016a66:	d959      	bls.n	8016b1c <get_priority+0x1d4>
 8016a68:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8016a6c:	f894 109b 	ldrb.w	r1, [r4, #155]	@ 0x9b
 8016a70:	2802      	cmp	r0, #2
 8016a72:	bf98      	it	ls
 8016a74:	2903      	cmpls	r1, #3
 8016a76:	d34f      	bcc.n	8016b18 <get_priority+0x1d0>
 8016a78:	4408      	add	r0, r1
 8016a7a:	2805      	cmp	r0, #5
 8016a7c:	d950      	bls.n	8016b20 <get_priority+0x1d8>
 8016a7e:	2003      	movs	r0, #3
 8016a80:	e050      	b.n	8016b24 <get_priority+0x1dc>
 8016a82:	f646 6018 	movw	r0, #28184	@ 0x6e18
 8016a86:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016a8a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8016a8e:	2900      	cmp	r1, #0
 8016a90:	d042      	beq.n	8016b18 <get_priority+0x1d0>
 8016a92:	ea4f 1c18 	mov.w	ip, r8, lsr #4
 8016a96:	f100 0308 	add.w	r3, r0, #8
 8016a9a:	f04f 3eff 	mov.w	lr, #4294967295
 8016a9e:	bf00      	nop
 8016aa0:	681d      	ldr	r5, [r3, #0]
 8016aa2:	b1bd      	cbz	r5, 8016ad4 <get_priority+0x18c>
 8016aa4:	e9d5 7624 	ldrd	r7, r6, [r5, #144]	@ 0x90
 8016aa8:	f487 7280 	eor.w	r2, r7, #256	@ 0x100
 8016aac:	4332      	orrs	r2, r6
 8016aae:	bf1c      	itt	ne
 8016ab0:	f087 0280 	eorne.w	r2, r7, #128	@ 0x80
 8016ab4:	ea52 0206 	orrsne.w	r2, r2, r6
 8016ab8:	d108      	bne.n	8016acc <get_priority+0x184>
 8016aba:	6f6a      	ldr	r2, [r5, #116]	@ 0x74
 8016abc:	4670      	mov	r0, lr
 8016abe:	8b52      	ldrh	r2, [r2, #26]
 8016ac0:	4596      	cmp	lr, r2
 8016ac2:	bf88      	it	hi
 8016ac4:	4610      	movhi	r0, r2
 8016ac6:	4594      	cmp	ip, r2
 8016ac8:	bf88      	it	hi
 8016aca:	4686      	movhi	lr, r0
 8016acc:	3901      	subs	r1, #1
 8016ace:	f103 0304 	add.w	r3, r3, #4
 8016ad2:	d1e5      	bne.n	8016aa0 <get_priority+0x158>
 8016ad4:	f11e 0001 	adds.w	r0, lr, #1
 8016ad8:	d01e      	beq.n	8016b18 <get_priority+0x1d0>
 8016ada:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8016ade:	ea01 01ce 	and.w	r1, r1, lr, lsl #3
 8016ae2:	f240 12bc 	movw	r2, #444	@ 0x1bc
 8016ae6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8016aea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8016aee:	6812      	ldr	r2, [r2, #0]
 8016af0:	f8c4 8008 	str.w	r8, [r4, #8]
 8016af4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8016af8:	f646 4278 	movw	r2, #27768	@ 0x6c78
 8016afc:	f06f 0008 	mvn.w	r0, #8
 8016b00:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8016b04:	ea00 00ce 	and.w	r0, r0, lr, lsl #3
 8016b08:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8016b0a:	6892      	ldr	r2, [r2, #8]
 8016b0c:	8118      	strh	r0, [r3, #8]
 8016b0e:	1888      	adds	r0, r1, r2
 8016b10:	6620      	str	r0, [r4, #96]	@ 0x60
 8016b12:	e779      	b.n	8016a08 <get_priority+0xc0>
 8016b14:	2001      	movs	r0, #1
 8016b16:	e005      	b.n	8016b24 <get_priority+0x1dc>
 8016b18:	2008      	movs	r0, #8
 8016b1a:	e003      	b.n	8016b24 <get_priority+0x1dc>
 8016b1c:	2002      	movs	r0, #2
 8016b1e:	e001      	b.n	8016b24 <get_priority+0x1dc>
 8016b20:	f1c0 0008 	rsb	r0, r0, #8
 8016b24:	b2c0      	uxtb	r0, r0
 8016b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016b2c <recheck_conflicting>:
 8016b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b30:	b081      	sub	sp, #4
 8016b32:	f646 6b18 	movw	fp, #28184	@ 0x6e18
 8016b36:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8016b3a:	f89b 003a 	ldrb.w	r0, [fp, #58]	@ 0x3a
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	d03c      	beq.n	8016bbc <recheck_conflicting+0x90>
 8016b42:	f04f 0800 	mov.w	r8, #0
 8016b46:	f04f 0901 	mov.w	r9, #1
 8016b4a:	f04f 0a00 	mov.w	sl, #0
 8016b4e:	bf00      	nop
 8016b50:	eb0b 008a 	add.w	r0, fp, sl, lsl #2
 8016b54:	6884      	ldr	r4, [r0, #8]
 8016b56:	b35c      	cbz	r4, 8016bb0 <recheck_conflicting+0x84>
 8016b58:	e9d4 7624 	ldrd	r7, r6, [r4, #144]	@ 0x90
 8016b5c:	f894 009a 	ldrb.w	r0, [r4, #154]	@ 0x9a
 8016b60:	2801      	cmp	r0, #1
 8016b62:	d120      	bne.n	8016ba6 <recheck_conflicting+0x7a>
 8016b64:	4620      	mov	r0, r4
 8016b66:	2101      	movs	r1, #1
 8016b68:	f8cb 903c 	str.w	r9, [fp, #60]	@ 0x3c
 8016b6c:	f000 fb38 	bl	80171e0 <schedule_event>
 8016b70:	b190      	cbz	r0, 8016b98 <recheck_conflicting+0x6c>
 8016b72:	f894 1099 	ldrb.w	r1, [r4, #153]	@ 0x99
 8016b76:	f086 0008 	eor.w	r0, r6, #8
 8016b7a:	ea47 0500 	orr.w	r5, r7, r0
 8016b7e:	1c48      	adds	r0, r1, #1
 8016b80:	f8db 103c 	ldr.w	r1, [fp, #60]	@ 0x3c
 8016b84:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f000 fc65 	bl	8017458 <add_intrvl_to_evnt_time_stamp>
 8016b8e:	2d00      	cmp	r5, #0
 8016b90:	d1e4      	bne.n	8016b5c <recheck_conflicting+0x30>
 8016b92:	2800      	cmp	r0, #0
 8016b94:	d0e2      	beq.n	8016b5c <recheck_conflicting+0x30>
 8016b96:	e006      	b.n	8016ba6 <recheck_conflicting+0x7a>
 8016b98:	f89b 003a 	ldrb.w	r0, [fp, #58]	@ 0x3a
 8016b9c:	f884 809a 	strb.w	r8, [r4, #154]	@ 0x9a
 8016ba0:	3801      	subs	r0, #1
 8016ba2:	f88b 003a 	strb.w	r0, [fp, #58]	@ 0x3a
 8016ba6:	f10a 0a01 	add.w	sl, sl, #1
 8016baa:	f1ba 0f0b 	cmp.w	sl, #11
 8016bae:	d1cf      	bne.n	8016b50 <recheck_conflicting+0x24>
 8016bb0:	f89b 003a 	ldrb.w	r0, [fp, #58]	@ 0x3a
 8016bb4:	f04f 0a00 	mov.w	sl, #0
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	d1c9      	bne.n	8016b50 <recheck_conflicting+0x24>
 8016bbc:	b001      	add	sp, #4
 8016bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016bc4 <evnt_schdlr_check_if_evnt_exist>:
 8016bc4:	b180      	cbz	r0, 8016be8 <evnt_schdlr_check_if_evnt_exist+0x24>
 8016bc6:	f646 6218 	movw	r2, #28184	@ 0x6e18
 8016bca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8016bce:	f892 1038 	ldrb.w	r1, [r2, #56]	@ 0x38
 8016bd2:	b149      	cbz	r1, 8016be8 <evnt_schdlr_check_if_evnt_exist+0x24>
 8016bd4:	3208      	adds	r2, #8
 8016bd6:	bf00      	nop
 8016bd8:	6813      	ldr	r3, [r2, #0]
 8016bda:	4283      	cmp	r3, r0
 8016bdc:	bf08      	it	eq
 8016bde:	4770      	bxeq	lr
 8016be0:	3901      	subs	r1, #1
 8016be2:	f102 0204 	add.w	r2, r2, #4
 8016be6:	d1f7      	bne.n	8016bd8 <evnt_schdlr_check_if_evnt_exist+0x14>
 8016be8:	2000      	movs	r0, #0
 8016bea:	4770      	bx	lr

08016bec <evnt_schdlr_get_master_conn_anchor_point>:
 8016bec:	b5b0      	push	{r4, r5, r7, lr}
 8016bee:	f240 2271 	movw	r2, #625	@ 0x271
 8016bf2:	fb01 f102 	mul.w	r1, r1, r2
 8016bf6:	f240 42fa 	movw	r2, #1274	@ 0x4fa
 8016bfa:	4291      	cmp	r1, r2
 8016bfc:	bf38      	it	cc
 8016bfe:	460a      	movcc	r2, r1
 8016c00:	237d      	movs	r3, #125	@ 0x7d
 8016c02:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8016c06:	f240 6325 	movw	r3, #1573	@ 0x625
 8016c0a:	fb02 f303 	mul.w	r3, r2, r3
 8016c0e:	29b2      	cmp	r1, #178	@ 0xb2
 8016c10:	eba2 4213 	sub.w	r2, r2, r3, lsr #16
 8016c14:	f240 11bc 	movw	r1, #444	@ 0x1bc
 8016c18:	b292      	uxth	r2, r2
 8016c1a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016c1e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016c22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016c26:	f646 4378 	movw	r3, #27768	@ 0x6c78
 8016c2a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8016c2e:	6809      	ldr	r1, [r1, #0]
 8016c30:	689b      	ldr	r3, [r3, #8]
 8016c32:	ea4f 1292 	mov.w	r2, r2, lsr #6
 8016c36:	440b      	add	r3, r1
 8016c38:	bf38      	it	cc
 8016c3a:	2206      	movcc	r2, #6
 8016c3c:	f646 6118 	movw	r1, #28184	@ 0x6e18
 8016c40:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8016c44:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016c46:	441a      	add	r2, r3
 8016c48:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8016c4c:	4611      	mov	r1, r2
 8016c4e:	2ab2      	cmp	r2, #178	@ 0xb2
 8016c50:	bf88      	it	hi
 8016c52:	ebc3 01c4 	rsbhi	r1, r3, r4, lsl #3
 8016c56:	ebb2 0fc4 	cmp.w	r2, r4, lsl #3
 8016c5a:	bf98      	it	ls
 8016c5c:	4611      	movls	r1, r2
 8016c5e:	4604      	mov	r4, r0
 8016c60:	4608      	mov	r0, r1
 8016c62:	2100      	movs	r1, #0
 8016c64:	2500      	movs	r5, #0
 8016c66:	f000 f803 	bl	8016c70 <get_slot_offset>
 8016c6a:	6020      	str	r0, [r4, #0]
 8016c6c:	80a5      	strh	r5, [r4, #4]
 8016c6e:	bdb0      	pop	{r4, r5, r7, pc}

08016c70 <get_slot_offset>:
 8016c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c74:	f646 6c18 	movw	ip, #28184	@ 0x6e18
 8016c78:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8016c7c:	f8dc 2034 	ldr.w	r2, [ip, #52]	@ 0x34
 8016c80:	f04f 0900 	mov.w	r9, #0
 8016c84:	b3da      	cbz	r2, 8016cfe <get_slot_offset+0x8e>
 8016c86:	f89c 8038 	ldrb.w	r8, [ip, #56]	@ 0x38
 8016c8a:	f04f 0e00 	mov.w	lr, #0
 8016c8e:	f1b8 0f00 	cmp.w	r8, #0
 8016c92:	f000 80ae 	beq.w	8016df2 <get_slot_offset+0x182>
 8016c96:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
 8016c9a:	ea4f 0bce 	mov.w	fp, lr, lsl #3
 8016c9e:	4583      	cmp	fp, r0
 8016ca0:	d328      	bcc.n	8016cf4 <get_slot_offset+0x84>
 8016ca2:	f10c 0608 	add.w	r6, ip, #8
 8016ca6:	f04f 0a00 	mov.w	sl, #0
 8016caa:	4642      	mov	r2, r8
 8016cac:	6835      	ldr	r5, [r6, #0]
 8016cae:	b1ad      	cbz	r5, 8016cdc <get_slot_offset+0x6c>
 8016cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016cb2:	1c5f      	adds	r7, r3, #1
 8016cb4:	d012      	beq.n	8016cdc <get_slot_offset+0x6c>
 8016cb6:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
 8016cb8:	443b      	add	r3, r7
 8016cba:	455b      	cmp	r3, fp
 8016cbc:	d90a      	bls.n	8016cd4 <get_slot_offset+0x64>
 8016cbe:	f1ba 0f00 	cmp.w	sl, #0
 8016cc2:	d006      	beq.n	8016cd2 <get_slot_offset+0x62>
 8016cc4:	e9da 7418 	ldrd	r7, r4, [sl, #96]	@ 0x60
 8016cc8:	443c      	add	r4, r7
 8016cca:	42a3      	cmp	r3, r4
 8016ccc:	bf88      	it	hi
 8016cce:	46aa      	movhi	sl, r5
 8016cd0:	e000      	b.n	8016cd4 <get_slot_offset+0x64>
 8016cd2:	46aa      	mov	sl, r5
 8016cd4:	3a01      	subs	r2, #1
 8016cd6:	f106 0604 	add.w	r6, r6, #4
 8016cda:	d1e7      	bne.n	8016cac <get_slot_offset+0x3c>
 8016cdc:	f1ba 0f00 	cmp.w	sl, #0
 8016ce0:	d010      	beq.n	8016d04 <get_slot_offset+0x94>
 8016ce2:	e9da 2418 	ldrd	r2, r4, [sl, #96]	@ 0x60
 8016ce6:	f1ce 0300 	rsb	r3, lr, #0
 8016cea:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8016cee:	4413      	add	r3, r2
 8016cf0:	42a3      	cmp	r3, r4
 8016cf2:	d90f      	bls.n	8016d14 <get_slot_offset+0xa4>
 8016cf4:	f04f 3eff 	mov.w	lr, #4294967295
 8016cf8:	f04f 0900 	mov.w	r9, #0
 8016cfc:	e079      	b.n	8016df2 <get_slot_offset+0x182>
 8016cfe:	f04f 0e00 	mov.w	lr, #0
 8016d02:	e076      	b.n	8016df2 <get_slot_offset+0x182>
 8016d04:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016d08:	f04f 0800 	mov.w	r8, #0
 8016d0c:	e9d2 2318 	ldrd	r2, r3, [r2, #96]	@ 0x60
 8016d10:	4413      	add	r3, r2
 8016d12:	e01e      	b.n	8016d52 <get_slot_offset+0xe2>
 8016d14:	2200      	movs	r2, #0
 8016d16:	bf00      	nop
 8016d18:	eb0c 0782 	add.w	r7, ip, r2, lsl #2
 8016d1c:	68bf      	ldr	r7, [r7, #8]
 8016d1e:	b19f      	cbz	r7, 8016d48 <get_slot_offset+0xd8>
 8016d20:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 8016d22:	1c75      	adds	r5, r6, #1
 8016d24:	d010      	beq.n	8016d48 <get_slot_offset+0xd8>
 8016d26:	6e3f      	ldr	r7, [r7, #96]	@ 0x60
 8016d28:	4437      	add	r7, r6
 8016d2a:	455f      	cmp	r7, fp
 8016d2c:	bf84      	itt	hi
 8016d2e:	fbb7 f5fb 	udivhi	r5, r7, fp
 8016d32:	fb05 771b 	mlshi	r7, r5, fp, r7
 8016d36:	42b3      	cmp	r3, r6
 8016d38:	d906      	bls.n	8016d48 <get_slot_offset+0xd8>
 8016d3a:	42bb      	cmp	r3, r7
 8016d3c:	d307      	bcc.n	8016d4e <get_slot_offset+0xde>
 8016d3e:	3201      	adds	r2, #1
 8016d40:	4590      	cmp	r8, r2
 8016d42:	d1e9      	bne.n	8016d18 <get_slot_offset+0xa8>
 8016d44:	2300      	movs	r3, #0
 8016d46:	e004      	b.n	8016d52 <get_slot_offset+0xe2>
 8016d48:	f1a2 0801 	sub.w	r8, r2, #1
 8016d4c:	e001      	b.n	8016d52 <get_slot_offset+0xe2>
 8016d4e:	463b      	mov	r3, r7
 8016d50:	4690      	mov	r8, r2
 8016d52:	f242 0400 	movw	r4, #8192	@ 0x2000
 8016d56:	f04f 3eff 	mov.w	lr, #4294967295
 8016d5a:	2700      	movs	r7, #0
 8016d5c:	f2c0 2400 	movt	r4, #512	@ 0x200
 8016d60:	f04f 0900 	mov.w	r9, #0
 8016d64:	4287      	cmp	r7, r0
 8016d66:	da44      	bge.n	8016df2 <get_slot_offset+0x182>
 8016d68:	eb0c 0288 	add.w	r2, ip, r8, lsl #2
 8016d6c:	68d6      	ldr	r6, [r2, #12]
 8016d6e:	b366      	cbz	r6, 8016dca <get_slot_offset+0x15a>
 8016d70:	6e77      	ldr	r7, [r6, #100]	@ 0x64
 8016d72:	1c7d      	adds	r5, r7, #1
 8016d74:	d029      	beq.n	8016dca <get_slot_offset+0x15a>
 8016d76:	6e32      	ldr	r2, [r6, #96]	@ 0x60
 8016d78:	19d5      	adds	r5, r2, r7
 8016d7a:	455d      	cmp	r5, fp
 8016d7c:	462a      	mov	r2, r5
 8016d7e:	eba7 0703 	sub.w	r7, r7, r3
 8016d82:	bf84      	itt	hi
 8016d84:	fbb5 f2fb 	udivhi	r2, r5, fp
 8016d88:	fb02 521b 	mlshi	r2, r2, fp, r5
 8016d8c:	2f00      	cmp	r7, #0
 8016d8e:	dc09      	bgt.n	8016da4 <get_slot_offset+0x134>
 8016d90:	4293      	cmp	r3, r2
 8016d92:	bf98      	it	ls
 8016d94:	4613      	movls	r3, r2
 8016d96:	f108 0801 	add.w	r8, r8, #1
 8016d9a:	4556      	cmp	r6, sl
 8016d9c:	f04f 0700 	mov.w	r7, #0
 8016da0:	d1e0      	bne.n	8016d64 <get_slot_offset+0xf4>
 8016da2:	e026      	b.n	8016df2 <get_slot_offset+0x182>
 8016da4:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8016da8:	4022      	ands	r2, r4
 8016daa:	bf1c      	itt	ne
 8016dac:	eb03 0357 	addne.w	r3, r3, r7, lsr #1
 8016db0:	087f      	lsrne	r7, r7, #1
 8016db2:	454f      	cmp	r7, r9
 8016db4:	bfc4      	itt	gt
 8016db6:	46b9      	movgt	r9, r7
 8016db8:	469e      	movgt	lr, r3
 8016dba:	4556      	cmp	r6, sl
 8016dbc:	d019      	beq.n	8016df2 <get_slot_offset+0x182>
 8016dbe:	f108 0801 	add.w	r8, r8, #1
 8016dc2:	455d      	cmp	r5, fp
 8016dc4:	462b      	mov	r3, r5
 8016dc6:	d9cd      	bls.n	8016d64 <get_slot_offset+0xf4>
 8016dc8:	e013      	b.n	8016df2 <get_slot_offset+0x182>
 8016dca:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8016dce:	6892      	ldr	r2, [r2, #8]
 8016dd0:	6e7f      	ldr	r7, [r7, #100]	@ 0x64
 8016dd2:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 8016dd6:	ebab 0603 	sub.w	r6, fp, r3
 8016dda:	4437      	add	r7, r6
 8016ddc:	4022      	ands	r2, r4
 8016dde:	eb07 76d7 	add.w	r6, r7, r7, lsr #31
 8016de2:	bf1c      	itt	ne
 8016de4:	eb03 0366 	addne.w	r3, r3, r6, asr #1
 8016de8:	1077      	asrne	r7, r6, #1
 8016dea:	454f      	cmp	r7, r9
 8016dec:	bfc4      	itt	gt
 8016dee:	46b9      	movgt	r9, r7
 8016df0:	469e      	movgt	lr, r3
 8016df2:	b131      	cbz	r1, 8016e02 <get_slot_offset+0x192>
 8016df4:	780a      	ldrb	r2, [r1, #0]
 8016df6:	b922      	cbnz	r2, 8016e02 <get_slot_offset+0x192>
 8016df8:	2200      	movs	r2, #0
 8016dfa:	4581      	cmp	r9, r0
 8016dfc:	bfb8      	it	lt
 8016dfe:	2201      	movlt	r2, #1
 8016e00:	700a      	strb	r2, [r1, #0]
 8016e02:	4670      	mov	r0, lr
 8016e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016e08 <optm_conn_param>:
 8016e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0c:	b081      	sub	sp, #4
 8016e0e:	6f46      	ldr	r6, [r0, #116]	@ 0x74
 8016e10:	4682      	mov	sl, r0
 8016e12:	4689      	mov	r9, r1
 8016e14:	2200      	movs	r2, #0
 8016e16:	f8b6 007c 	ldrh.w	r0, [r6, #124]	@ 0x7c
 8016e1a:	f8b6 107e 	ldrh.w	r1, [r6, #126]	@ 0x7e
 8016e1e:	f8b6 808c 	ldrh.w	r8, [r6, #140]	@ 0x8c
 8016e22:	f8ad 2002 	strh.w	r2, [sp, #2]
 8016e26:	f10d 0202 	add.w	r2, sp, #2
 8016e2a:	2320      	movs	r3, #32
 8016e2c:	f7ff fca0 	bl	8016770 <evnt_schdlr_choose_suitable_intrv>
 8016e30:	f896 009c 	ldrb.w	r0, [r6, #156]	@ 0x9c
 8016e34:	f646 6b18 	movw	fp, #28184	@ 0x6e18
 8016e38:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8016e3c:	b328      	cbz	r0, 8016e8a <optm_conn_param+0x82>
 8016e3e:	f89b 1038 	ldrb.w	r1, [fp, #56]	@ 0x38
 8016e42:	2902      	cmp	r1, #2
 8016e44:	d30f      	bcc.n	8016e66 <optm_conn_param+0x5e>
 8016e46:	f8db 2034 	ldr.w	r2, [fp, #52]	@ 0x34
 8016e4a:	b162      	cbz	r2, 8016e66 <optm_conn_param+0x5e>
 8016e4c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8016e50:	b28b      	uxth	r3, r1
 8016e52:	fbb3 f5f2 	udiv	r5, r3, r2
 8016e56:	fb05 3512 	mls	r5, r5, r2, r3
 8016e5a:	b1c5      	cbz	r5, 8016e8e <optm_conn_param+0x86>
 8016e5c:	fbb2 f5f3 	udiv	r5, r2, r3
 8016e60:	fb05 2213 	mls	r2, r5, r3, r2
 8016e64:	b19a      	cbz	r2, 8016e8e <optm_conn_param+0x86>
 8016e66:	f8b6 107e 	ldrh.w	r1, [r6, #126]	@ 0x7e
 8016e6a:	b28a      	uxth	r2, r1
 8016e6c:	fbb2 f3f0 	udiv	r3, r2, r0
 8016e70:	fb03 f000 	mul.w	r0, r3, r0
 8016e74:	f8b6 307c 	ldrh.w	r3, [r6, #124]	@ 0x7c
 8016e78:	1a80      	subs	r0, r0, r2
 8016e7a:	4408      	add	r0, r1
 8016e7c:	b282      	uxth	r2, r0
 8016e7e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	bf28      	it	cs
 8016e86:	4601      	movcs	r1, r0
 8016e88:	e001      	b.n	8016e8e <optm_conn_param+0x86>
 8016e8a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8016e8e:	f8b6 0088 	ldrh.w	r0, [r6, #136]	@ 0x88
 8016e92:	f8a6 108e 	strh.w	r1, [r6, #142]	@ 0x8e
 8016e96:	2800      	cmp	r0, #0
 8016e98:	d074      	beq.n	8016f84 <optm_conn_param+0x17c>
 8016e9a:	b288      	uxth	r0, r1
 8016e9c:	f8da 1060 	ldr.w	r1, [sl, #96]	@ 0x60
 8016ea0:	f000 f896 	bl	8016fd0 <get_intrv_slot_period>
 8016ea4:	2800      	cmp	r0, #0
 8016ea6:	d06b      	beq.n	8016f80 <optm_conn_param+0x178>
 8016ea8:	f8b6 00da 	ldrh.w	r0, [r6, #218]	@ 0xda
 8016eac:	f8b6 108c 	ldrh.w	r1, [r6, #140]	@ 0x8c
 8016eb0:	1a0a      	subs	r2, r1, r0
 8016eb2:	1a40      	subs	r0, r0, r1
 8016eb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016ebc:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 8016ec0:	f1c0 0000 	rsb	r0, r0, #0
 8016ec4:	bf88      	it	hi
 8016ec6:	00c1      	lslhi	r1, r0, #3
 8016ec8:	f646 6015 	movw	r0, #28181	@ 0x6e15
 8016ecc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016ed0:	7800      	ldrb	r0, [r0, #0]
 8016ed2:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
 8016ed6:	2802      	cmp	r0, #2
 8016ed8:	d10c      	bne.n	8016ef4 <optm_conn_param+0xec>
 8016eda:	f240 10bc 	movw	r0, #444	@ 0x1bc
 8016ede:	f646 4278 	movw	r2, #27768	@ 0x6c78
 8016ee2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8016ee6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8016eea:	6800      	ldr	r0, [r0, #0]
 8016eec:	6892      	ldr	r2, [r2, #8]
 8016eee:	4410      	add	r0, r2
 8016ef0:	1a18      	subs	r0, r3, r0
 8016ef2:	1dc3      	adds	r3, r0, #7
 8016ef4:	f89b 0038 	ldrb.w	r0, [fp, #56]	@ 0x38
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	d041      	beq.n	8016f80 <optm_conn_param+0x178>
 8016efc:	8af2      	ldrh	r2, [r6, #22]
 8016efe:	f8da 5050 	ldr.w	r5, [sl, #80]	@ 0x50
 8016f02:	f8b6 4088 	ldrh.w	r4, [r6, #136]	@ 0x88
 8016f06:	f8db 7034 	ldr.w	r7, [fp, #52]	@ 0x34
 8016f0a:	fb01 5102 	mla	r1, r1, r2, r5
 8016f0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8016f12:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8016f16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8016f1a:	00f9      	lsls	r1, r7, #3
 8016f1c:	fbb2 f7f1 	udiv	r7, r2, r1
 8016f20:	fb07 2c11 	mls	ip, r7, r1, r2
 8016f24:	f10b 0708 	add.w	r7, fp, #8
 8016f28:	4463      	add	r3, ip
 8016f2a:	bf00      	nop
 8016f2c:	683d      	ldr	r5, [r7, #0]
 8016f2e:	b33d      	cbz	r5, 8016f80 <optm_conn_param+0x178>
 8016f30:	6e6c      	ldr	r4, [r5, #100]	@ 0x64
 8016f32:	1c62      	adds	r2, r4, #1
 8016f34:	d024      	beq.n	8016f80 <optm_conn_param+0x178>
 8016f36:	4555      	cmp	r5, sl
 8016f38:	d01e      	beq.n	8016f78 <optm_conn_param+0x170>
 8016f3a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8016f3c:	4564      	cmp	r4, ip
 8016f3e:	eb02 0504 	add.w	r5, r2, r4
 8016f42:	d801      	bhi.n	8016f48 <optm_conn_param+0x140>
 8016f44:	4565      	cmp	r5, ip
 8016f46:	d23c      	bcs.n	8016fc2 <optm_conn_param+0x1ba>
 8016f48:	42a3      	cmp	r3, r4
 8016f4a:	d301      	bcc.n	8016f50 <optm_conn_param+0x148>
 8016f4c:	42ab      	cmp	r3, r5
 8016f4e:	d938      	bls.n	8016fc2 <optm_conn_param+0x1ba>
 8016f50:	4564      	cmp	r4, ip
 8016f52:	bf28      	it	cs
 8016f54:	42ab      	cmpcs	r3, r5
 8016f56:	d234      	bcs.n	8016fc2 <optm_conn_param+0x1ba>
 8016f58:	428d      	cmp	r5, r1
 8016f5a:	d305      	bcc.n	8016f68 <optm_conn_param+0x160>
 8016f5c:	fbb5 f2f1 	udiv	r2, r5, r1
 8016f60:	fb02 5211 	mls	r2, r2, r1, r5
 8016f64:	4562      	cmp	r2, ip
 8016f66:	d22c      	bcs.n	8016fc2 <optm_conn_param+0x1ba>
 8016f68:	428b      	cmp	r3, r1
 8016f6a:	d305      	bcc.n	8016f78 <optm_conn_param+0x170>
 8016f6c:	fbb3 f2f1 	udiv	r2, r3, r1
 8016f70:	fb02 3211 	mls	r2, r2, r1, r3
 8016f74:	4294      	cmp	r4, r2
 8016f76:	d924      	bls.n	8016fc2 <optm_conn_param+0x1ba>
 8016f78:	3801      	subs	r0, #1
 8016f7a:	f107 0704 	add.w	r7, r7, #4
 8016f7e:	d1d5      	bne.n	8016f2c <optm_conn_param+0x124>
 8016f80:	45c8      	cmp	r8, r9
 8016f82:	d101      	bne.n	8016f88 <optm_conn_param+0x180>
 8016f84:	2000      	movs	r0, #0
 8016f86:	e020      	b.n	8016fca <optm_conn_param+0x1c2>
 8016f88:	8af1      	ldrh	r1, [r6, #22]
 8016f8a:	f8b6 2088 	ldrh.w	r2, [r6, #136]	@ 0x88
 8016f8e:	f8b6 008e 	ldrh.w	r0, [r6, #142]	@ 0x8e
 8016f92:	45c8      	cmp	r8, r9
 8016f94:	d904      	bls.n	8016fa0 <optm_conn_param+0x198>
 8016f96:	eba8 0309 	sub.w	r3, r8, r9
 8016f9a:	fb03 2101 	mla	r1, r3, r1, r2
 8016f9e:	e00a      	b.n	8016fb6 <optm_conn_param+0x1ae>
 8016fa0:	eba9 0308 	sub.w	r3, r9, r8
 8016fa4:	fb03 f101 	mul.w	r1, r3, r1
 8016fa8:	1a89      	subs	r1, r1, r2
 8016faa:	fb91 f2f0 	sdiv	r2, r1, r0
 8016fae:	fb02 1110 	mls	r1, r2, r0, r1
 8016fb2:	b289      	uxth	r1, r1
 8016fb4:	1a41      	subs	r1, r0, r1
 8016fb6:	fb91 f2f0 	sdiv	r2, r1, r0
 8016fba:	fb02 1110 	mls	r1, r2, r0, r1
 8016fbe:	2000      	movs	r0, #0
 8016fc0:	e001      	b.n	8016fc6 <optm_conn_param+0x1be>
 8016fc2:	2020      	movs	r0, #32
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	f8a6 1088 	strh.w	r1, [r6, #136]	@ 0x88
 8016fca:	b001      	add	sp, #4
 8016fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fd0 <get_intrv_slot_period>:
 8016fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd4:	f646 6c18 	movw	ip, #28184	@ 0x6e18
 8016fd8:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8016fdc:	f8dc 3034 	ldr.w	r3, [ip, #52]	@ 0x34
 8016fe0:	4680      	mov	r8, r0
 8016fe2:	b3db      	cbz	r3, 801705c <get_intrv_slot_period+0x8c>
 8016fe4:	4543      	cmp	r3, r8
 8016fe6:	d03b      	beq.n	8017060 <get_intrv_slot_period+0x90>
 8016fe8:	d20c      	bcs.n	8017004 <get_intrv_slot_period+0x34>
 8016fea:	eba8 0243 	sub.w	r2, r8, r3, lsl #1
 8016fee:	2002      	movs	r0, #2
 8016ff0:	2500      	movs	r5, #0
 8016ff2:	bf00      	nop
 8016ff4:	42aa      	cmp	r2, r5
 8016ff6:	d034      	beq.n	8017062 <get_intrv_slot_period+0x92>
 8016ff8:	441d      	add	r5, r3
 8016ffa:	195e      	adds	r6, r3, r5
 8016ffc:	4546      	cmp	r6, r8
 8016ffe:	f100 0001 	add.w	r0, r0, #1
 8017002:	d3f7      	bcc.n	8016ff4 <get_intrv_slot_period+0x24>
 8017004:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 8017008:	d309      	bcc.n	801701e <get_intrv_slot_period+0x4e>
 801700a:	ea4f 0248 	mov.w	r2, r8, lsl #1
 801700e:	2002      	movs	r0, #2
 8017010:	4293      	cmp	r3, r2
 8017012:	d029      	beq.n	8017068 <get_intrv_slot_period+0x98>
 8017014:	4442      	add	r2, r8
 8017016:	429a      	cmp	r2, r3
 8017018:	f100 0001 	add.w	r0, r0, #1
 801701c:	d9f8      	bls.n	8017010 <get_intrv_slot_period+0x40>
 801701e:	f1b8 0f00 	cmp.w	r8, #0
 8017022:	461d      	mov	r5, r3
 8017024:	d009      	beq.n	801703a <get_intrv_slot_period+0x6a>
 8017026:	4640      	mov	r0, r8
 8017028:	461a      	mov	r2, r3
 801702a:	bf00      	nop
 801702c:	1a15      	subs	r5, r2, r0
 801702e:	bf9c      	itt	ls
 8017030:	4615      	movls	r5, r2
 8017032:	1a80      	subls	r0, r0, r2
 8017034:	2800      	cmp	r0, #0
 8017036:	462a      	mov	r2, r5
 8017038:	d1f8      	bne.n	801702c <get_intrv_slot_period+0x5c>
 801703a:	f89c 2038 	ldrb.w	r2, [ip, #56]	@ 0x38
 801703e:	b1da      	cbz	r2, 8017078 <get_intrv_slot_period+0xa8>
 8017040:	f10c 0408 	add.w	r4, ip, #8
 8017044:	2000      	movs	r0, #0
 8017046:	bf00      	nop
 8017048:	6826      	ldr	r6, [r4, #0]
 801704a:	3404      	adds	r4, #4
 801704c:	6e77      	ldr	r7, [r6, #100]	@ 0x64
 801704e:	3701      	adds	r7, #1
 8017050:	bf1c      	itt	ne
 8017052:	6e37      	ldrne	r7, [r6, #96]	@ 0x60
 8017054:	4438      	addne	r0, r7
 8017056:	3a01      	subs	r2, #1
 8017058:	d1f6      	bne.n	8017048 <get_intrv_slot_period+0x78>
 801705a:	e00e      	b.n	801707a <get_intrv_slot_period+0xaa>
 801705c:	f8cc 8034 	str.w	r8, [ip, #52]	@ 0x34
 8017060:	2001      	movs	r0, #1
 8017062:	b280      	uxth	r0, r0
 8017064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017068:	fbb3 f1f0 	udiv	r1, r3, r0
 801706c:	b280      	uxth	r0, r0
 801706e:	f8cc 1034 	str.w	r1, [ip, #52]	@ 0x34
 8017072:	f000 fcd7 	bl	8017a24 <update_slot_period>
 8017076:	e7f3      	b.n	8017060 <get_intrv_slot_period+0x90>
 8017078:	2000      	movs	r0, #0
 801707a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 801707e:	4408      	add	r0, r1
 8017080:	00d1      	lsls	r1, r2, #3
 8017082:	4281      	cmp	r1, r0
 8017084:	d201      	bcs.n	801708a <get_intrv_slot_period+0xba>
 8017086:	2000      	movs	r0, #0
 8017088:	e7eb      	b.n	8017062 <get_intrv_slot_period+0x92>
 801708a:	fbb3 f0f5 	udiv	r0, r3, r5
 801708e:	f8cc 5034 	str.w	r5, [ip, #52]	@ 0x34
 8017092:	b280      	uxth	r0, r0
 8017094:	f000 fcc6 	bl	8017a24 <update_slot_period>
 8017098:	fbb8 f0f5 	udiv	r0, r8, r5
 801709c:	e7e1      	b.n	8017062 <get_intrv_slot_period+0x92>

0801709e <evnt_schdlr_multi_role_instance>:
 801709e:	f24e 2058 	movw	r0, #57944	@ 0xe258
 80170a2:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80170a6:	4770      	bx	lr

080170a8 <evnt_schdlr_update_master_conn_params>:
 80170a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ac:	b081      	sub	sp, #4
 80170ae:	468b      	mov	fp, r1
 80170b0:	4606      	mov	r6, r0
 80170b2:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	@ 0x28
 80170b6:	4615      	mov	r5, r2
 80170b8:	3a03      	subs	r2, #3
 80170ba:	b2d2      	uxtb	r2, r2
 80170bc:	f640 17c4 	movw	r7, #2500	@ 0x9c4
 80170c0:	2a02      	cmp	r2, #2
 80170c2:	bf38      	it	cc
 80170c4:	f640 67a6 	movwcc	r7, #3750	@ 0xea6
 80170c8:	461c      	mov	r4, r3
 80170ca:	2925      	cmp	r1, #37	@ 0x25
 80170cc:	bf28      	it	cs
 80170ce:	f240 47e2 	movwcs	r7, #1250	@ 0x4e2
 80170d2:	f003 fbda 	bl	801a88a <pdu_trnsprt_hndlr_get_payload_lngth>
 80170d6:	4629      	mov	r1, r5
 80170d8:	2201      	movs	r2, #1
 80170da:	f7f7 fec3 	bl	800ee64 <evnt_schdlr_get_pckt_durn_on_air>
 80170de:	f646 413c 	movw	r1, #27708	@ 0x6c3c
 80170e2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80170e6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80170e8:	4681      	mov	r9, r0
 80170ea:	6f49      	ldr	r1, [r1, #116]	@ 0x74
 80170ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80170ee:	2907      	cmp	r1, #7
 80170f0:	bf8f      	iteee	hi
 80170f2:	2500      	movhi	r5, #0
 80170f4:	f649 7018 	movwls	r0, #40728	@ 0x9f18
 80170f8:	f2c2 0000 	movtls	r0, #8192	@ 0x2000
 80170fc:	f850 5021 	ldrls.w	r5, [r0, r1, lsl #2]
 8017100:	4628      	mov	r0, r5
 8017102:	2101      	movs	r1, #1
 8017104:	2d00      	cmp	r5, #0
 8017106:	bf18      	it	ne
 8017108:	2001      	movne	r0, #1
 801710a:	f004 fc08 	bl	801b91e <bsp_assert>
 801710e:	8ae8      	ldrh	r0, [r5, #22]
 8017110:	f105 0a38 	add.w	sl, r5, #56	@ 0x38
 8017114:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8017118:	1e60      	subs	r0, r4, #1
 801711a:	b2c2      	uxtb	r2, r0
 801711c:	9400      	str	r4, [sp, #0]
 801711e:	2a04      	cmp	r2, #4
 8017120:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8017124:	d204      	bcs.n	8017130 <evnt_schdlr_update_master_conn_params+0x88>
 8017126:	b240      	sxtb	r0, r0
 8017128:	a127      	add	r1, pc, #156	@ (adr r1, 80171c8 <evnt_schdlr_update_master_conn_params+0x120>)
 801712a:	f851 8020 	ldr.w	r8, [r1, r0, lsl #2]
 801712e:	e005      	b.n	801713c <evnt_schdlr_update_master_conn_params+0x94>
 8017130:	2000      	movs	r0, #0
 8017132:	2101      	movs	r1, #1
 8017134:	f04f 0800 	mov.w	r8, #0
 8017138:	f004 fbf1 	bl	801b91e <bsp_assert>
 801713c:	a026      	add	r0, pc, #152	@ (adr r0, 80171d8 <conn_req_time_us>)
 801713e:	f830 0018 	ldrh.w	r0, [r0, r8, lsl #1]
 8017142:	2201      	movs	r2, #1
 8017144:	4448      	add	r0, r9
 8017146:	f100 0198 	add.w	r1, r0, #152	@ 0x98
 801714a:	4630      	mov	r0, r6
 801714c:	f006 f98a 	bl	801d464 <ble_time_add_uint>
 8017150:	6830      	ldr	r0, [r6, #0]
 8017152:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8017154:	1a40      	subs	r0, r0, r1
 8017156:	fbb0 f2f4 	udiv	r2, r0, r4
 801715a:	4421      	add	r1, r4
 801715c:	fb02 f204 	mul.w	r2, r2, r4
 8017160:	1a12      	subs	r2, r2, r0
 8017162:	4411      	add	r1, r2
 8017164:	4408      	add	r0, r1
 8017166:	63a8      	str	r0, [r5, #56]	@ 0x38
 8017168:	2000      	movs	r0, #0
 801716a:	87a8      	strh	r0, [r5, #60]	@ 0x3c
 801716c:	4650      	mov	r0, sl
 801716e:	4631      	mov	r1, r6
 8017170:	f006 f8f0 	bl	801d354 <ble_time_diff_us>
 8017174:	f8cb 0000 	str.w	r0, [fp]
 8017178:	9800      	ldr	r0, [sp, #0]
 801717a:	2100      	movs	r1, #0
 801717c:	f008 fa0c 	bl	801f598 <llhwc_get_hw_setup_time>
 8017180:	f8db 1000 	ldr.w	r1, [fp]
 8017184:	4408      	add	r0, r1
 8017186:	f207 41e2 	addw	r1, r7, #1250	@ 0x4e2
 801718a:	4288      	cmp	r0, r1
 801718c:	d20b      	bcs.n	80171a6 <evnt_schdlr_update_master_conn_params+0xfe>
 801718e:	8ae9      	ldrh	r1, [r5, #22]
 8017190:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8017194:	fb01 0002 	mla	r0, r1, r2, r0
 8017198:	f8cb 0000 	str.w	r0, [fp]
 801719c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801719e:	4420      	add	r0, r4
 80171a0:	63a8      	str	r0, [r5, #56]	@ 0x38
 80171a2:	f8db 0000 	ldr.w	r0, [fp]
 80171a6:	1bc0      	subs	r0, r0, r7
 80171a8:	f241 7159 	movw	r1, #5977	@ 0x1759
 80171ac:	f2a0 208a 	subw	r0, r0, #650	@ 0x28a
 80171b0:	f2cd 11b7 	movt	r1, #53687	@ 0xd1b7
 80171b4:	fba0 0101 	umull	r0, r1, r0, r1
 80171b8:	0a88      	lsrs	r0, r1, #10
 80171ba:	f8cb 0000 	str.w	r0, [fp]
 80171be:	8228      	strh	r0, [r5, #16]
 80171c0:	b001      	add	sp, #4
 80171c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171c6:	bf00      	nop
 80171c8:	00000000 	.word	0x00000000
 80171cc:	00000001 	.word	0x00000001
 80171d0:	00000003 	.word	0x00000003
 80171d4:	00000002 	.word	0x00000002

080171d8 <conn_req_time_us>:
 80171d8:	00b40160 	.word	0x00b40160
 80171dc:	0b5003ee 	.word	0x0b5003ee

080171e0 <schedule_event>:
 80171e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e4:	b087      	sub	sp, #28
 80171e6:	2800      	cmp	r0, #0
 80171e8:	9101      	str	r1, [sp, #4]
 80171ea:	f000 8131 	beq.w	8017450 <schedule_event+0x270>
 80171ee:	f646 6718 	movw	r7, #28184	@ 0x6e18
 80171f2:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80171f6:	4604      	mov	r4, r0
 80171f8:	6838      	ldr	r0, [r7, #0]
 80171fa:	2800      	cmp	r0, #0
 80171fc:	f000 8127 	beq.w	801744e <schedule_event+0x26e>
 8017200:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8017204:	f04f 0900 	mov.w	r9, #0
 8017208:	9100      	str	r1, [sp, #0]
 801720a:	4606      	mov	r6, r0
 801720c:	2001      	movs	r0, #1
 801720e:	2101      	movs	r1, #1
 8017210:	46ba      	mov	sl, r7
 8017212:	f004 fb84 	bl	801b91e <bsp_assert>
 8017216:	2001      	movs	r0, #1
 8017218:	2101      	movs	r1, #1
 801721a:	f004 fb80 	bl	801b91e <bsp_assert>
 801721e:	4637      	mov	r7, r6
 8017220:	f857 0f50 	ldr.w	r0, [r7, #80]!
 8017224:	f8b6 1060 	ldrh.w	r1, [r6, #96]	@ 0x60
 8017228:	f10d 0b10 	add.w	fp, sp, #16
 801722c:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 8017230:	687a      	ldr	r2, [r7, #4]
 8017232:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8017236:	e9d4 2014 	ldrd	r2, r0, [r4, #80]	@ 0x50
 801723a:	e9cd 2002 	strd	r2, r0, [sp, #8]
 801723e:	4658      	mov	r0, fp
 8017240:	2205      	movs	r2, #5
 8017242:	f006 f90f 	bl	801d464 <ble_time_add_uint>
 8017246:	f10d 0808 	add.w	r8, sp, #8
 801724a:	4640      	mov	r0, r8
 801724c:	4629      	mov	r1, r5
 801724e:	2205      	movs	r2, #5
 8017250:	f006 f908 	bl	801d464 <ble_time_add_uint>
 8017254:	9900      	ldr	r1, [sp, #0]
 8017256:	4658      	mov	r0, fp
 8017258:	f006 f862 	bl	801d320 <ble_time_comp>
 801725c:	2800      	cmp	r0, #0
 801725e:	f340 80cf 	ble.w	8017400 <schedule_event+0x220>
 8017262:	4640      	mov	r0, r8
 8017264:	4639      	mov	r1, r7
 8017266:	f006 f85b 	bl	801d320 <ble_time_comp>
 801726a:	2800      	cmp	r0, #0
 801726c:	f340 80de 	ble.w	801742c <schedule_event+0x24c>
 8017270:	9801      	ldr	r0, [sp, #4]
 8017272:	2801      	cmp	r0, #1
 8017274:	f000 80e3 	beq.w	801743e <schedule_event+0x25e>
 8017278:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 801727c:	4657      	mov	r7, sl
 801727e:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 8017282:	4308      	orrs	r0, r1
 8017284:	bf1e      	ittt	ne
 8017286:	e9d6 1224 	ldrdne	r1, r2, [r6, #144]	@ 0x90
 801728a:	f081 0180 	eorne.w	r1, r1, #128	@ 0x80
 801728e:	ea51 0102 	orrsne.w	r1, r1, r2
 8017292:	d111      	bne.n	80172b8 <schedule_event+0xd8>
 8017294:	f646 6115 	movw	r1, #28181	@ 0x6e15
 8017298:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801729c:	7809      	ldrb	r1, [r1, #0]
 801729e:	2900      	cmp	r1, #0
 80172a0:	f04f 0100 	mov.w	r1, #0
 80172a4:	f88d 1010 	strb.w	r1, [sp, #16]
 80172a8:	d106      	bne.n	80172b8 <schedule_event+0xd8>
 80172aa:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80172ac:	3101      	adds	r1, #1
 80172ae:	bf1c      	itt	ne
 80172b0:	6e71      	ldrne	r1, [r6, #100]	@ 0x64
 80172b2:	f111 0101 	addsne.w	r1, r1, #1
 80172b6:	d127      	bne.n	8017308 <schedule_event+0x128>
 80172b8:	4630      	mov	r0, r6
 80172ba:	f7ff fb45 	bl	8016948 <get_priority>
 80172be:	4605      	mov	r5, r0
 80172c0:	4620      	mov	r0, r4
 80172c2:	f7ff fb41 	bl	8016948 <get_priority>
 80172c6:	4285      	cmp	r5, r0
 80172c8:	f0c0 80a1 	bcc.w	801740e <schedule_event+0x22e>
 80172cc:	f000 809f 	beq.w	801740e <schedule_event+0x22e>
 80172d0:	2000      	movs	r0, #0
 80172d2:	6fb5      	ldr	r5, [r6, #120]	@ 0x78
 80172d4:	f1b9 0f00 	cmp.w	r9, #0
 80172d8:	bf14      	ite	ne
 80172da:	f8c9 5078 	strne.w	r5, [r9, #120]	@ 0x78
 80172de:	603d      	streq	r5, [r7, #0]
 80172e0:	67b0      	str	r0, [r6, #120]	@ 0x78
 80172e2:	200d      	movs	r0, #13
 80172e4:	f004 fb62 	bl	801b9ac <bsp_debug_gpio_set>
 80172e8:	f897 003a 	ldrb.w	r0, [r7, #58]	@ 0x3a
 80172ec:	2101      	movs	r1, #1
 80172ee:	3001      	adds	r0, #1
 80172f0:	f887 003a 	strb.w	r0, [r7, #58]	@ 0x3a
 80172f4:	200d      	movs	r0, #13
 80172f6:	f886 109a 	strb.w	r1, [r6, #154]	@ 0x9a
 80172fa:	f004 fb59 	bl	801b9b0 <bsp_debug_gpio_clear>
 80172fe:	2d00      	cmp	r5, #0
 8017300:	462e      	mov	r6, r5
 8017302:	f47f af83 	bne.w	801720c <schedule_event+0x2c>
 8017306:	e09c      	b.n	8017442 <schedule_event+0x262>
 8017308:	46a0      	mov	r8, r4
 801730a:	2800      	cmp	r0, #0
 801730c:	bf08      	it	eq
 801730e:	46b0      	moveq	r8, r6
 8017310:	e9d8 0124 	ldrd	r0, r1, [r8, #144]	@ 0x90
 8017314:	4635      	mov	r5, r6
 8017316:	bf08      	it	eq
 8017318:	4625      	moveq	r5, r4
 801731a:	f8d5 a074 	ldr.w	sl, [r5, #116]	@ 0x74
 801731e:	f480 3000 	eor.w	r0, r0, #131072	@ 0x20000
 8017322:	4308      	orrs	r0, r1
 8017324:	d016      	beq.n	8017354 <schedule_event+0x174>
 8017326:	f895 109c 	ldrb.w	r1, [r5, #156]	@ 0x9c
 801732a:	1c48      	adds	r0, r1, #1
 801732c:	f885 009c 	strb.w	r0, [r5, #156]	@ 0x9c
 8017330:	b111      	cbz	r1, 8017338 <schedule_event+0x158>
 8017332:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 8017336:	e002      	b.n	801733e <schedule_event+0x15e>
 8017338:	2100      	movs	r1, #0
 801733a:	f885 109d 	strb.w	r1, [r5, #157]	@ 0x9d
 801733e:	b2c0      	uxtb	r0, r0
 8017340:	4408      	add	r0, r1
 8017342:	2864      	cmp	r0, #100	@ 0x64
 8017344:	d33a      	bcc.n	80173bc <schedule_event+0x1dc>
 8017346:	2264      	movs	r2, #100	@ 0x64
 8017348:	fb01 f102 	mul.w	r1, r1, r2
 801734c:	fbb1 f0f0 	udiv	r0, r1, r0
 8017350:	2846      	cmp	r0, #70	@ 0x46
 8017352:	d833      	bhi.n	80173bc <schedule_event+0x1dc>
 8017354:	6e28      	ldr	r0, [r5, #96]	@ 0x60
 8017356:	a904      	add	r1, sp, #16
 8017358:	3028      	adds	r0, #40	@ 0x28
 801735a:	f7ff fc89 	bl	8016c70 <get_slot_offset>
 801735e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017362:	bb59      	cbnz	r1, 80173bc <schedule_event+0x1dc>
 8017364:	1c41      	adds	r1, r0, #1
 8017366:	d029      	beq.n	80173bc <schedule_event+0x1dc>
 8017368:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 801736a:	4288      	cmp	r0, r1
 801736c:	d901      	bls.n	8017372 <schedule_event+0x192>
 801736e:	1a41      	subs	r1, r0, r1
 8017370:	e005      	b.n	801737e <schedule_event+0x19e>
 8017372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017374:	1a41      	subs	r1, r0, r1
 8017376:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801737a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801737e:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 8017382:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8017386:	fba1 2302 	umull	r2, r3, r1, r2
 801738a:	095a      	lsrs	r2, r3, #5
 801738c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8017390:	ebc1 01c2 	rsb	r1, r1, r2, lsl #3
 8017394:	4408      	add	r0, r1
 8017396:	f646 6115 	movw	r1, #28181	@ 0x6e15
 801739a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801739e:	7809      	ldrb	r1, [r1, #0]
 80173a0:	3028      	adds	r0, #40	@ 0x28
 80173a2:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 80173a6:	b929      	cbnz	r1, 80173b4 <schedule_event+0x1d4>
 80173a8:	f646 6115 	movw	r1, #28181	@ 0x6e15
 80173ac:	2001      	movs	r0, #1
 80173ae:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80173b2:	7008      	strb	r0, [r1, #0]
 80173b4:	2003      	movs	r0, #3
 80173b6:	4651      	mov	r1, sl
 80173b8:	f006 f9a9 	bl	801d70e <emngr_post_event>
 80173bc:	e9d8 0124 	ldrd	r0, r1, [r8, #144]	@ 0x90
 80173c0:	f480 3000 	eor.w	r0, r0, #131072	@ 0x20000
 80173c4:	4308      	orrs	r0, r1
 80173c6:	f43f af77 	beq.w	80172b8 <schedule_event+0xd8>
 80173ca:	f895 009c 	ldrb.w	r0, [r5, #156]	@ 0x9c
 80173ce:	f895 109d 	ldrb.w	r1, [r5, #157]	@ 0x9d
 80173d2:	4408      	add	r0, r1
 80173d4:	2864      	cmp	r0, #100	@ 0x64
 80173d6:	f4ff af6f 	bcc.w	80172b8 <schedule_event+0xd8>
 80173da:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 80173de:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 80173e2:	4308      	orrs	r0, r1
 80173e4:	bf04      	itt	eq
 80173e6:	2000      	moveq	r0, #0
 80173e8:	f8a4 009c 	strheq.w	r0, [r4, #156]	@ 0x9c
 80173ec:	e9d6 0124 	ldrd	r0, r1, [r6, #144]	@ 0x90
 80173f0:	f080 0080 	eor.w	r0, r0, #128	@ 0x80
 80173f4:	4308      	orrs	r0, r1
 80173f6:	bf04      	itt	eq
 80173f8:	2000      	moveq	r0, #0
 80173fa:	f8a6 009c 	strheq.w	r0, [r6, #156]	@ 0x9c
 80173fe:	e75b      	b.n	80172b8 <schedule_event+0xd8>
 8017400:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 8017402:	46b1      	mov	r9, r6
 8017404:	2800      	cmp	r0, #0
 8017406:	4657      	mov	r7, sl
 8017408:	f47f aeff 	bne.w	801720a <schedule_event+0x2a>
 801740c:	e01d      	b.n	801744a <schedule_event+0x26a>
 801740e:	200d      	movs	r0, #13
 8017410:	f004 facc 	bl	801b9ac <bsp_debug_gpio_set>
 8017414:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8017418:	2001      	movs	r0, #1
 801741a:	f884 009a 	strb.w	r0, [r4, #154]	@ 0x9a
 801741e:	1c48      	adds	r0, r1, #1
 8017420:	f887 003a 	strb.w	r0, [r7, #58]	@ 0x3a
 8017424:	200d      	movs	r0, #13
 8017426:	f004 fac3 	bl	801b9b0 <bsp_debug_gpio_clear>
 801742a:	e011      	b.n	8017450 <schedule_event+0x270>
 801742c:	f1b9 0f00 	cmp.w	r9, #0
 8017430:	bf0c      	ite	eq
 8017432:	f8ca 4000 	streq.w	r4, [sl]
 8017436:	f8c9 4078 	strne.w	r4, [r9, #120]	@ 0x78
 801743a:	67a6      	str	r6, [r4, #120]	@ 0x78
 801743c:	e008      	b.n	8017450 <schedule_event+0x270>
 801743e:	201f      	movs	r0, #31
 8017440:	e007      	b.n	8017452 <schedule_event+0x272>
 8017442:	f1b9 0f00 	cmp.w	r9, #0
 8017446:	464e      	mov	r6, r9
 8017448:	d001      	beq.n	801744e <schedule_event+0x26e>
 801744a:	67b4      	str	r4, [r6, #120]	@ 0x78
 801744c:	e000      	b.n	8017450 <schedule_event+0x270>
 801744e:	603c      	str	r4, [r7, #0]
 8017450:	2000      	movs	r0, #0
 8017452:	b007      	add	sp, #28
 8017454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017458 <add_intrvl_to_evnt_time_stamp>:
 8017458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801745c:	b082      	sub	sp, #8
 801745e:	f248 19e8 	movw	r9, #33256	@ 0x81e8
 8017462:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8017466:	4604      	mov	r4, r0
 8017468:	6f47      	ldr	r7, [r0, #116]	@ 0x74
 801746a:	f8d9 0000 	ldr.w	r0, [r9]
 801746e:	468a      	mov	sl, r1
 8017470:	2500      	movs	r5, #0
 8017472:	f04f 31ff 	mov.w	r1, #4294967295
 8017476:	9500      	str	r5, [sp, #0]
 8017478:	f004 fab5 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801747c:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 8017480:	261f      	movs	r6, #31
 8017482:	f1d1 023f 	rsbs	r2, r1, #63	@ 0x3f
 8017486:	eb75 0200 	sbcs.w	r2, r5, r0
 801748a:	db13      	blt.n	80174b4 <add_intrvl_to_evnt_time_stamp+0x5c>
 801748c:	3901      	subs	r1, #1
 801748e:	f160 0000 	sbc.w	r0, r0, #0
 8017492:	f1d1 021f 	rsbs	r2, r1, #31
 8017496:	eb75 0000 	sbcs.w	r0, r5, r0
 801749a:	f0c0 8083 	bcc.w	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 801749e:	2001      	movs	r0, #1
 80174a0:	4088      	lsls	r0, r1
 80174a2:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 80174a6:	d017      	beq.n	80174d8 <add_intrvl_to_evnt_time_stamp+0x80>
 80174a8:	7e78      	ldrb	r0, [r7, #25]
 80174aa:	2801      	cmp	r0, #1
 80174ac:	d141      	bne.n	8017532 <add_intrvl_to_evnt_time_stamp+0xda>
 80174ae:	2000      	movs	r0, #0
 80174b0:	2600      	movs	r6, #0
 80174b2:	e04d      	b.n	8017550 <add_intrvl_to_evnt_time_stamp+0xf8>
 80174b4:	f1d1 02ff 	rsbs	r2, r1, #255	@ 0xff
 80174b8:	eb75 0200 	sbcs.w	r2, r5, r0
 80174bc:	db1f      	blt.n	80174fe <add_intrvl_to_evnt_time_stamp+0xa6>
 80174be:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 80174c2:	4302      	orrs	r2, r0
 80174c4:	d00b      	beq.n	80174de <add_intrvl_to_evnt_time_stamp+0x86>
 80174c6:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 80174ca:	4308      	orrs	r0, r1
 80174cc:	d16a      	bne.n	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 80174ce:	4620      	mov	r0, r4
 80174d0:	4651      	mov	r1, sl
 80174d2:	f7f7 fe76 	bl	800f1c2 <evnt_schdlr_update_master_conn_timers>
 80174d6:	e010      	b.n	80174fa <add_intrvl_to_evnt_time_stamp+0xa2>
 80174d8:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 80174dc:	d062      	beq.n	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 80174de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80174e0:	2202      	movs	r2, #2
 80174e2:	8900      	ldrh	r0, [r0, #8]
 80174e4:	fb00 f10a 	mul.w	r1, r0, sl
 80174e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80174ec:	f005 ffba 	bl	801d464 <ble_time_add_uint>
 80174f0:	f8b4 0088 	ldrh.w	r0, [r4, #136]	@ 0x88
 80174f4:	4450      	add	r0, sl
 80174f6:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 80174fa:	2600      	movs	r6, #0
 80174fc:	e052      	b.n	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 80174fe:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 8017502:	4302      	orrs	r2, r0
 8017504:	d02e      	beq.n	8017564 <add_intrvl_to_evnt_time_stamp+0x10c>
 8017506:	f080 0008 	eor.w	r0, r0, #8
 801750a:	4308      	orrs	r0, r1
 801750c:	d14a      	bne.n	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 801750e:	f646 6818 	movw	r8, #28184	@ 0x6e18
 8017512:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8017516:	f8d8 6000 	ldr.w	r6, [r8]
 801751a:	a801      	add	r0, sp, #4
 801751c:	f006 ffd5 	bl	801e4ca <llhwc_slptmr_get>
 8017520:	68a0      	ldr	r0, [r4, #8]
 8017522:	b328      	cbz	r0, 8017570 <add_intrvl_to_evnt_time_stamp+0x118>
 8017524:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8017526:	fa5f f28a 	uxtb.w	r2, sl
 801752a:	fb00 1002 	mla	r0, r0, r2, r1
 801752e:	6520      	str	r0, [r4, #80]	@ 0x50
 8017530:	e7e3      	b.n	80174fa <add_intrvl_to_evnt_time_stamp+0xa2>
 8017532:	4668      	mov	r0, sp
 8017534:	2101      	movs	r1, #1
 8017536:	f7fc fd56 	bl	8013fe6 <llhwc_gen_rnd_num>
 801753a:	4606      	mov	r6, r0
 801753c:	fab0 f080 	clz	r0, r0
 8017540:	0940      	lsrs	r0, r0, #5
 8017542:	2101      	movs	r1, #1
 8017544:	f004 f9eb 	bl	801b91e <bsp_assert>
 8017548:	9800      	ldr	r0, [sp, #0]
 801754a:	f000 000f 	and.w	r0, r0, #15
 801754e:	9000      	str	r0, [sp, #0]
 8017550:	6979      	ldr	r1, [r7, #20]
 8017552:	2202      	movs	r2, #2
 8017554:	4408      	add	r0, r1
 8017556:	fb00 f10a 	mul.w	r1, r0, sl
 801755a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801755e:	f005 ff81 	bl	801d464 <ble_time_add_uint>
 8017562:	e01f      	b.n	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 8017564:	4620      	mov	r0, r4
 8017566:	4651      	mov	r1, sl
 8017568:	f7f7 fd45 	bl	800eff6 <evnt_schdlr_update_slave_conn_timers>
 801756c:	4606      	mov	r6, r0
 801756e:	e019      	b.n	80175a4 <add_intrvl_to_evnt_time_stamp+0x14c>
 8017570:	6921      	ldr	r1, [r4, #16]
 8017572:	9801      	ldr	r0, [sp, #4]
 8017574:	b1f1      	cbz	r1, 80175b4 <add_intrvl_to_evnt_time_stamp+0x15c>
 8017576:	4288      	cmp	r0, r1
 8017578:	d31c      	bcc.n	80175b4 <add_intrvl_to_evnt_time_stamp+0x15c>
 801757a:	2501      	movs	r5, #1
 801757c:	f894 609a 	ldrb.w	r6, [r4, #154]	@ 0x9a
 8017580:	4620      	mov	r0, r4
 8017582:	f000 f88b 	bl	801769c <rmv_evnt>
 8017586:	2e01      	cmp	r6, #1
 8017588:	d104      	bne.n	8017594 <add_intrvl_to_evnt_time_stamp+0x13c>
 801758a:	f898 003a 	ldrb.w	r0, [r8, #58]	@ 0x3a
 801758e:	3801      	subs	r0, #1
 8017590:	f888 003a 	strb.w	r0, [r8, #58]	@ 0x3a
 8017594:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017596:	b109      	cbz	r1, 801759c <add_intrvl_to_evnt_time_stamp+0x144>
 8017598:	4628      	mov	r0, r5
 801759a:	4788      	blx	r1
 801759c:	4620      	mov	r0, r4
 801759e:	f7f7 fb0b 	bl	800ebb8 <evnt_schdlr_free_evnt>
 80175a2:	261f      	movs	r6, #31
 80175a4:	f8d9 0000 	ldr.w	r0, [r9]
 80175a8:	f004 fa23 	bl	801b9f2 <os_rcrsv_mutex_release>
 80175ac:	4630      	mov	r0, r6
 80175ae:	b002      	add	sp, #8
 80175b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175b4:	4625      	mov	r5, r4
 80175b6:	f855 2f50 	ldr.w	r2, [r5, #80]!
 80175ba:	4611      	mov	r1, r2
 80175bc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80175be:	b183      	cbz	r3, 80175e2 <add_intrvl_to_evnt_time_stamp+0x18a>
 80175c0:	e9d3 1324 	ldrd	r1, r3, [r3, #144]	@ 0x90
 80175c4:	f240 17bc 	movw	r7, #444	@ 0x1bc
 80175c8:	f646 4c78 	movw	ip, #27768	@ 0x6c78
 80175cc:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 80175d0:	f083 0308 	eor.w	r3, r3, #8
 80175d4:	4319      	orrs	r1, r3
 80175d6:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80175da:	bf08      	it	eq
 80175dc:	4667      	moveq	r7, ip
 80175de:	6839      	ldr	r1, [r7, #0]
 80175e0:	1a51      	subs	r1, r2, r1
 80175e2:	b18e      	cbz	r6, 8017608 <add_intrvl_to_evnt_time_stamp+0x1b0>
 80175e4:	4288      	cmp	r0, r1
 80175e6:	d30f      	bcc.n	8017608 <add_intrvl_to_evnt_time_stamp+0x1b0>
 80175e8:	6d31      	ldr	r1, [r6, #80]	@ 0x50
 80175ea:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80175ec:	1a09      	subs	r1, r1, r0
 80175ee:	4299      	cmp	r1, r3
 80175f0:	d90b      	bls.n	801760a <add_intrvl_to_evnt_time_stamp+0x1b2>
 80175f2:	f646 4178 	movw	r1, #27768	@ 0x6c78
 80175f6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80175fa:	6809      	ldr	r1, [r1, #0]
 80175fc:	6028      	str	r0, [r5, #0]
 80175fe:	4628      	mov	r0, r5
 8017600:	2205      	movs	r2, #5
 8017602:	f005 ff2f 	bl	801d464 <ble_time_add_uint>
 8017606:	e778      	b.n	80174fa <add_intrvl_to_evnt_time_stamp+0xa2>
 8017608:	b146      	cbz	r6, 801761c <add_intrvl_to_evnt_time_stamp+0x1c4>
 801760a:	4631      	mov	r1, r6
 801760c:	f851 7f50 	ldr.w	r7, [r1, #80]!
 8017610:	690b      	ldr	r3, [r1, #16]
 8017612:	441f      	add	r7, r3
 8017614:	42ba      	cmp	r2, r7
 8017616:	d307      	bcc.n	8017628 <add_intrvl_to_evnt_time_stamp+0x1d0>
 8017618:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 801761a:	e7f5      	b.n	8017608 <add_intrvl_to_evnt_time_stamp+0x1b0>
 801761c:	f646 4678 	movw	r6, #27768	@ 0x6c78
 8017620:	6028      	str	r0, [r5, #0]
 8017622:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8017626:	e015      	b.n	8017654 <add_intrvl_to_evnt_time_stamp+0x1fc>
 8017628:	e9d6 0224 	ldrd	r0, r2, [r6, #144]	@ 0x90
 801762c:	3660      	adds	r6, #96	@ 0x60
 801762e:	f080 0010 	eor.w	r0, r0, #16
 8017632:	4310      	orrs	r0, r2
 8017634:	d10b      	bne.n	801764e <add_intrvl_to_evnt_time_stamp+0x1f6>
 8017636:	f240 501b 	movw	r0, #1307	@ 0x51b
 801763a:	4283      	cmp	r3, r0
 801763c:	d307      	bcc.n	801764e <add_intrvl_to_evnt_time_stamp+0x1f6>
 801763e:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 8017642:	2001      	movs	r0, #1
 8017644:	f884 0020 	strb.w	r0, [r4, #32]
 8017648:	1c50      	adds	r0, r2, #1
 801764a:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 801764e:	4628      	mov	r0, r5
 8017650:	f005 fee3 	bl	801d41a <ble_time_set>
 8017654:	6831      	ldr	r1, [r6, #0]
 8017656:	4628      	mov	r0, r5
 8017658:	2205      	movs	r2, #5
 801765a:	f005 ff03 	bl	801d464 <ble_time_add_uint>
 801765e:	6920      	ldr	r0, [r4, #16]
 8017660:	b118      	cbz	r0, 801766a <add_intrvl_to_evnt_time_stamp+0x212>
 8017662:	6829      	ldr	r1, [r5, #0]
 8017664:	4281      	cmp	r1, r0
 8017666:	f63f af88 	bhi.w	801757a <add_intrvl_to_evnt_time_stamp+0x122>
 801766a:	69e0      	ldr	r0, [r4, #28]
 801766c:	2800      	cmp	r0, #0
 801766e:	f43f af44 	beq.w	80174fa <add_intrvl_to_evnt_time_stamp+0xa2>
 8017672:	f240 13bc 	movw	r3, #444	@ 0x1bc
 8017676:	f646 4778 	movw	r7, #27768	@ 0x6c78
 801767a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801767e:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8017682:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8017684:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	68bf      	ldr	r7, [r7, #8]
 801768a:	4411      	add	r1, r2
 801768c:	19da      	adds	r2, r3, r7
 801768e:	1a89      	subs	r1, r1, r2
 8017690:	4281      	cmp	r1, r0
 8017692:	f67f af32 	bls.w	80174fa <add_intrvl_to_evnt_time_stamp+0xa2>
 8017696:	2504      	movs	r5, #4
 8017698:	e770      	b.n	801757c <add_intrvl_to_evnt_time_stamp+0x124>
	...

0801769c <rmv_evnt>:
 801769c:	b570      	push	{r4, r5, r6, lr}
 801769e:	e9d0 1224 	ldrd	r1, r2, [r0, #144]	@ 0x90
 80176a2:	f082 0202 	eor.w	r2, r2, #2
 80176a6:	4311      	orrs	r1, r2
 80176a8:	d111      	bne.n	80176ce <rmv_evnt+0x32>
 80176aa:	f646 6118 	movw	r1, #28184	@ 0x6e18
 80176ae:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80176b2:	684b      	ldr	r3, [r1, #4]
 80176b4:	4283      	cmp	r3, r0
 80176b6:	d03e      	beq.n	8017736 <rmv_evnt+0x9a>
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d03e      	beq.n	801773a <rmv_evnt+0x9e>
 80176bc:	461a      	mov	r2, r3
 80176be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80176c0:	4283      	cmp	r3, r0
 80176c2:	d1f9      	bne.n	80176b8 <rmv_evnt+0x1c>
 80176c4:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80176c6:	6793      	str	r3, [r2, #120]	@ 0x78
 80176c8:	2200      	movs	r2, #0
 80176ca:	6782      	str	r2, [r0, #120]	@ 0x78
 80176cc:	e035      	b.n	801773a <rmv_evnt+0x9e>
 80176ce:	f646 6618 	movw	r6, #28184	@ 0x6e18
 80176d2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80176d6:	f896 1038 	ldrb.w	r1, [r6, #56]	@ 0x38
 80176da:	f8b0 c08a 	ldrh.w	ip, [r0, #138]	@ 0x8a
 80176de:	f8d0 e064 	ldr.w	lr, [r0, #100]	@ 0x64
 80176e2:	2300      	movs	r3, #0
 80176e4:	b149      	cbz	r1, 80176fa <rmv_evnt+0x5e>
 80176e6:	bf00      	nop
 80176e8:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 80176ec:	68a4      	ldr	r4, [r4, #8]
 80176ee:	4284      	cmp	r4, r0
 80176f0:	d003      	beq.n	80176fa <rmv_evnt+0x5e>
 80176f2:	3301      	adds	r3, #1
 80176f4:	4299      	cmp	r1, r3
 80176f6:	d1f7      	bne.n	80176e8 <rmv_evnt+0x4c>
 80176f8:	e011      	b.n	801771e <rmv_evnt+0x82>
 80176fa:	428b      	cmp	r3, r1
 80176fc:	d20f      	bcs.n	801771e <rmv_evnt+0x82>
 80176fe:	1c5c      	adds	r4, r3, #1
 8017700:	428c      	cmp	r4, r1
 8017702:	d008      	beq.n	8017716 <rmv_evnt+0x7a>
 8017704:	3901      	subs	r1, #1
 8017706:	bf00      	nop
 8017708:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 801770c:	3301      	adds	r3, #1
 801770e:	68e2      	ldr	r2, [r4, #12]
 8017710:	4299      	cmp	r1, r3
 8017712:	60a2      	str	r2, [r4, #8]
 8017714:	d1f8      	bne.n	8017708 <rmv_evnt+0x6c>
 8017716:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 801771a:	2300      	movs	r3, #0
 801771c:	608b      	str	r3, [r1, #8]
 801771e:	6833      	ldr	r3, [r6, #0]
 8017720:	4283      	cmp	r3, r0
 8017722:	d010      	beq.n	8017746 <rmv_evnt+0xaa>
 8017724:	b1a3      	cbz	r3, 8017750 <rmv_evnt+0xb4>
 8017726:	4619      	mov	r1, r3
 8017728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801772a:	4283      	cmp	r3, r0
 801772c:	d1fa      	bne.n	8017724 <rmv_evnt+0x88>
 801772e:	f850 2f78 	ldr.w	r2, [r0, #120]!
 8017732:	678a      	str	r2, [r1, #120]	@ 0x78
 8017734:	e00a      	b.n	801774c <rmv_evnt+0xb0>
 8017736:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8017738:	6048      	str	r0, [r1, #4]
 801773a:	f891 0039 	ldrb.w	r0, [r1, #57]	@ 0x39
 801773e:	3801      	subs	r0, #1
 8017740:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 8017744:	e042      	b.n	80177cc <rmv_evnt+0x130>
 8017746:	f850 1f78 	ldr.w	r1, [r0, #120]!
 801774a:	6031      	str	r1, [r6, #0]
 801774c:	2100      	movs	r1, #0
 801774e:	6001      	str	r1, [r0, #0]
 8017750:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 8017754:	f896 1039 	ldrb.w	r1, [r6, #57]	@ 0x39
 8017758:	3801      	subs	r0, #1
 801775a:	4301      	orrs	r1, r0
 801775c:	0609      	lsls	r1, r1, #24
 801775e:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 8017762:	d102      	bne.n	801776a <rmv_evnt+0xce>
 8017764:	f000 f834 	bl	80177d0 <multi_reset>
 8017768:	e030      	b.n	80177cc <rmv_evnt+0x130>
 801776a:	f11e 0101 	adds.w	r1, lr, #1
 801776e:	d102      	bne.n	8017776 <rmv_evnt+0xda>
 8017770:	b2c1      	uxtb	r1, r0
 8017772:	2901      	cmp	r1, #1
 8017774:	d104      	bne.n	8017780 <rmv_evnt+0xe4>
 8017776:	4660      	mov	r0, ip
 8017778:	f000 f846 	bl	8017808 <update_radio_period_after_rmv_evnt>
 801777c:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 8017780:	0601      	lsls	r1, r0, #24
 8017782:	d023      	beq.n	80177cc <rmv_evnt+0x130>
 8017784:	f04f 0c00 	mov.w	ip, #0
 8017788:	2200      	movs	r2, #0
 801778a:	bf00      	nop
 801778c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8017790:	688b      	ldr	r3, [r1, #8]
 8017792:	b1db      	cbz	r3, 80177cc <rmv_evnt+0x130>
 8017794:	e9d3 4124 	ldrd	r4, r1, [r3, #144]	@ 0x90
 8017798:	f084 4500 	eor.w	r5, r4, #2147483648	@ 0x80000000
 801779c:	430d      	orrs	r5, r1
 801779e:	bf1c      	itt	ne
 80177a0:	f084 0540 	eorne.w	r5, r4, #64	@ 0x40
 80177a4:	ea51 0105 	orrsne.w	r1, r1, r5
 80177a8:	d10c      	bne.n	80177c4 <rmv_evnt+0x128>
 80177aa:	6899      	ldr	r1, [r3, #8]
 80177ac:	b151      	cbz	r1, 80177c4 <rmv_evnt+0x128>
 80177ae:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80177b0:	8101      	strh	r1, [r0, #8]
 80177b2:	6898      	ldr	r0, [r3, #8]
 80177b4:	f8c3 c008 	str.w	ip, [r3, #8]
 80177b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80177bc:	0081      	lsls	r1, r0, #2
 80177be:	f896 0038 	ldrb.w	r0, [r6, #56]	@ 0x38
 80177c2:	6619      	str	r1, [r3, #96]	@ 0x60
 80177c4:	3201      	adds	r2, #1
 80177c6:	b2c1      	uxtb	r1, r0
 80177c8:	428a      	cmp	r2, r1
 80177ca:	d3df      	bcc.n	801778c <rmv_evnt+0xf0>
 80177cc:	2000      	movs	r0, #0
 80177ce:	bd70      	pop	{r4, r5, r6, pc}

080177d0 <multi_reset>:
 80177d0:	b570      	push	{r4, r5, r6, lr}
 80177d2:	f646 6418 	movw	r4, #28184	@ 0x6e18
 80177d6:	2502      	movs	r5, #2
 80177d8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80177dc:	2600      	movs	r6, #0
 80177de:	bf00      	nop
 80177e0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80177e4:	b118      	cbz	r0, 80177ee <multi_reset+0x1e>
 80177e6:	f7f7 f9e7 	bl	800ebb8 <evnt_schdlr_free_evnt>
 80177ea:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
 80177ee:	3501      	adds	r5, #1
 80177f0:	2d0d      	cmp	r5, #13
 80177f2:	d1f5      	bne.n	80177e0 <multi_reset+0x10>
 80177f4:	4620      	mov	r0, r4
 80177f6:	2100      	movs	r1, #0
 80177f8:	2240      	movs	r2, #64	@ 0x40
 80177fa:	2500      	movs	r5, #0
 80177fc:	f009 f872 	bl	80208e4 <ble_memset>
 8017800:	2000      	movs	r0, #0
 8017802:	6365      	str	r5, [r4, #52]	@ 0x34
 8017804:	bd70      	pop	{r4, r5, r6, pc}
	...

08017808 <update_radio_period_after_rmv_evnt>:
 8017808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801780a:	b081      	sub	sp, #4
 801780c:	f646 6718 	movw	r7, #28184	@ 0x6e18
 8017810:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8017814:	f897 1038 	ldrb.w	r1, [r7, #56]	@ 0x38
 8017818:	b1b1      	cbz	r1, 8017848 <update_radio_period_after_rmv_evnt+0x40>
 801781a:	2901      	cmp	r1, #1
 801781c:	d117      	bne.n	801784e <update_radio_period_after_rmv_evnt+0x46>
 801781e:	68b8      	ldr	r0, [r7, #8]
 8017820:	2300      	movs	r3, #0
 8017822:	e9d0 2124 	ldrd	r2, r1, [r0, #144]	@ 0x90
 8017826:	637b      	str	r3, [r7, #52]	@ 0x34
 8017828:	f082 0610 	eor.w	r6, r2, #16
 801782c:	430e      	orrs	r6, r1
 801782e:	bf1c      	itt	ne
 8017830:	f082 0320 	eorne.w	r3, r2, #32
 8017834:	ea53 0301 	orrsne.w	r3, r3, r1
 8017838:	d156      	bne.n	80178e8 <update_radio_period_after_rmv_evnt+0xe0>
 801783a:	6f41      	ldr	r1, [r0, #116]	@ 0x74
 801783c:	f101 0008 	add.w	r0, r1, #8
 8017840:	310a      	adds	r1, #10
 8017842:	f000 f873 	bl	801792c <get_scan_intrv_slot_period>
 8017846:	e058      	b.n	80178fa <update_radio_period_after_rmv_evnt+0xf2>
 8017848:	2000      	movs	r0, #0
 801784a:	6378      	str	r0, [r7, #52]	@ 0x34
 801784c:	e063      	b.n	8017916 <update_radio_period_after_rmv_evnt+0x10e>
 801784e:	68bd      	ldr	r5, [r7, #8]
 8017850:	2d00      	cmp	r5, #0
 8017852:	d060      	beq.n	8017916 <update_radio_period_after_rmv_evnt+0x10e>
 8017854:	f107 040c 	add.w	r4, r7, #12
 8017858:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801785c:	4622      	mov	r2, r4
 801785e:	4629      	mov	r1, r5
 8017860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017864:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
 8017866:	3601      	adds	r6, #1
 8017868:	d00b      	beq.n	8017882 <update_radio_period_after_rmv_evnt+0x7a>
 801786a:	f8b1 608a 	ldrh.w	r6, [r1, #138]	@ 0x8a
 801786e:	4286      	cmp	r6, r0
 8017870:	d951      	bls.n	8017916 <update_radio_period_after_rmv_evnt+0x10e>
 8017872:	b29b      	uxth	r3, r3
 8017874:	f852 1b04 	ldr.w	r1, [r2], #4
 8017878:	429e      	cmp	r6, r3
 801787a:	bf38      	it	cc
 801787c:	4633      	movcc	r3, r6
 801787e:	2900      	cmp	r1, #0
 8017880:	d1f0      	bne.n	8017864 <update_radio_period_after_rmv_evnt+0x5c>
 8017882:	b298      	uxth	r0, r3
 8017884:	4560      	cmp	r0, ip
 8017886:	d046      	beq.n	8017916 <update_radio_period_after_rmv_evnt+0x10e>
 8017888:	2d00      	cmp	r5, #0
 801788a:	d046      	beq.n	801791a <update_radio_period_after_rmv_evnt+0x112>
 801788c:	4622      	mov	r2, r4
 801788e:	4629      	mov	r1, r5
 8017890:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8017892:	3301      	adds	r3, #1
 8017894:	d00b      	beq.n	80178ae <update_radio_period_after_rmv_evnt+0xa6>
 8017896:	f8b1 108a 	ldrh.w	r1, [r1, #138]	@ 0x8a
 801789a:	b289      	uxth	r1, r1
 801789c:	fbb1 f3f0 	udiv	r3, r1, r0
 80178a0:	fb03 1110 	mls	r1, r3, r0, r1
 80178a4:	bbb9      	cbnz	r1, 8017916 <update_radio_period_after_rmv_evnt+0x10e>
 80178a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80178aa:	2900      	cmp	r1, #0
 80178ac:	d1f0      	bne.n	8017890 <update_radio_period_after_rmv_evnt+0x88>
 80178ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80178b0:	fb01 f100 	mul.w	r1, r1, r0
 80178b4:	6379      	str	r1, [r7, #52]	@ 0x34
 80178b6:	b3a5      	cbz	r5, 8017922 <update_radio_period_after_rmv_evnt+0x11a>
 80178b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80178bc:	00ca      	lsls	r2, r1, #3
 80178be:	bf00      	nop
 80178c0:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 80178c2:	3101      	adds	r1, #1
 80178c4:	d027      	beq.n	8017916 <update_radio_period_after_rmv_evnt+0x10e>
 80178c6:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 80178c8:	f8b5 308a 	ldrh.w	r3, [r5, #138]	@ 0x8a
 80178cc:	fbb1 f7f2 	udiv	r7, r1, r2
 80178d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80178d4:	fb07 1112 	mls	r1, r7, r2, r1
 80178d8:	f8a5 308a 	strh.w	r3, [r5, #138]	@ 0x8a
 80178dc:	6669      	str	r1, [r5, #100]	@ 0x64
 80178de:	f854 5b04 	ldr.w	r5, [r4], #4
 80178e2:	2d00      	cmp	r5, #0
 80178e4:	d1ec      	bne.n	80178c0 <update_radio_period_after_rmv_evnt+0xb8>
 80178e6:	e01c      	b.n	8017922 <update_radio_period_after_rmv_evnt+0x11a>
 80178e8:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80178ec:	4311      	orrs	r1, r2
 80178ee:	d112      	bne.n	8017916 <update_radio_period_after_rmv_evnt+0x10e>
 80178f0:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80178f2:	6e01      	ldr	r1, [r0, #96]	@ 0x60
 80178f4:	8ad0      	ldrh	r0, [r2, #22]
 80178f6:	f7ff fb6b 	bl	8016fd0 <get_intrv_slot_period>
 80178fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80178fc:	68b9      	ldr	r1, [r7, #8]
 80178fe:	f8a1 008a 	strh.w	r0, [r1, #138]	@ 0x8a
 8017902:	b142      	cbz	r2, 8017916 <update_radio_period_after_rmv_evnt+0x10e>
 8017904:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8017908:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 801790a:	00c0      	lsls	r0, r0, #3
 801790c:	fbb2 f3f0 	udiv	r3, r2, r0
 8017910:	fb03 2010 	mls	r0, r3, r0, r2
 8017914:	6648      	str	r0, [r1, #100]	@ 0x64
 8017916:	b001      	add	sp, #4
 8017918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801791a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801791c:	fb01 f000 	mul.w	r0, r1, r0
 8017920:	6378      	str	r0, [r7, #52]	@ 0x34
 8017922:	b001      	add	sp, #4
 8017924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017928:	f000 b856 	b.w	80179d8 <sort_events_table>

0801792c <get_scan_intrv_slot_period>:
 801792c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801792e:	b081      	sub	sp, #4
 8017930:	f646 6c18 	movw	ip, #28184	@ 0x6e18
 8017934:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8017938:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
 801793c:	f8b0 e000 	ldrh.w	lr, [r0]
 8017940:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8017944:	b1bc      	cbz	r4, 8017976 <get_scan_intrv_slot_period+0x4a>
 8017946:	f89c 2038 	ldrb.w	r2, [ip, #56]	@ 0x38
 801794a:	b122      	cbz	r2, 8017956 <get_scan_intrv_slot_period+0x2a>
 801794c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017950:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8017952:	3201      	adds	r2, #1
 8017954:	d00f      	beq.n	8017976 <get_scan_intrv_slot_period+0x4a>
 8017956:	429c      	cmp	r4, r3
 8017958:	d00f      	beq.n	801797a <get_scan_intrv_slot_period+0x4e>
 801795a:	d215      	bcs.n	8017988 <get_scan_intrv_slot_period+0x5c>
 801795c:	eba3 0544 	sub.w	r5, r3, r4, lsl #1
 8017960:	2202      	movs	r2, #2
 8017962:	2600      	movs	r6, #0
 8017964:	42b5      	cmp	r5, r6
 8017966:	d021      	beq.n	80179ac <get_scan_intrv_slot_period+0x80>
 8017968:	4426      	add	r6, r4
 801796a:	19a7      	adds	r7, r4, r6
 801796c:	429f      	cmp	r7, r3
 801796e:	f102 0201 	add.w	r2, r2, #1
 8017972:	d3f7      	bcc.n	8017964 <get_scan_intrv_slot_period+0x38>
 8017974:	e00a      	b.n	801798c <get_scan_intrv_slot_period+0x60>
 8017976:	f8cc 3034 	str.w	r3, [ip, #52]	@ 0x34
 801797a:	f02e 0101 	bic.w	r1, lr, #1
 801797e:	8001      	strh	r1, [r0, #0]
 8017980:	2201      	movs	r2, #1
 8017982:	b290      	uxth	r0, r2
 8017984:	b001      	add	sp, #4
 8017986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017988:	2202      	movs	r2, #2
 801798a:	4627      	mov	r7, r4
 801798c:	429f      	cmp	r7, r3
 801798e:	d90b      	bls.n	80179a8 <get_scan_intrv_slot_period+0x7c>
 8017990:	1e55      	subs	r5, r2, #1
 8017992:	fb03 f505 	mul.w	r5, r3, r5
 8017996:	1b2d      	subs	r5, r5, r4
 8017998:	fbb4 f6f2 	udiv	r6, r4, r2
 801799c:	18ed      	adds	r5, r5, r3
 801799e:	d00d      	beq.n	80179bc <get_scan_intrv_slot_period+0x90>
 80179a0:	429e      	cmp	r6, r3
 80179a2:	f102 0201 	add.w	r2, r2, #1
 80179a6:	d8f7      	bhi.n	8017998 <get_scan_intrv_slot_period+0x6c>
 80179a8:	2200      	movs	r2, #0
 80179aa:	e7ea      	b.n	8017982 <get_scan_intrv_slot_period+0x56>
 80179ac:	880b      	ldrh	r3, [r1, #0]
 80179ae:	4573      	cmp	r3, lr
 80179b0:	f02e 0301 	bic.w	r3, lr, #1
 80179b4:	bf08      	it	eq
 80179b6:	800b      	strheq	r3, [r1, #0]
 80179b8:	8003      	strh	r3, [r0, #0]
 80179ba:	e7e2      	b.n	8017982 <get_scan_intrv_slot_period+0x56>
 80179bc:	880b      	ldrh	r3, [r1, #0]
 80179be:	f8cc 6034 	str.w	r6, [ip, #52]	@ 0x34
 80179c2:	4573      	cmp	r3, lr
 80179c4:	f02e 0301 	bic.w	r3, lr, #1
 80179c8:	bf08      	it	eq
 80179ca:	800b      	strheq	r3, [r1, #0]
 80179cc:	8003      	strh	r3, [r0, #0]
 80179ce:	b290      	uxth	r0, r2
 80179d0:	f000 f828 	bl	8017a24 <update_slot_period>
 80179d4:	e7d4      	b.n	8017980 <get_scan_intrv_slot_period+0x54>
	...

080179d8 <sort_events_table>:
 80179d8:	b570      	push	{r4, r5, r6, lr}
 80179da:	f646 6c18 	movw	ip, #28184	@ 0x6e18
 80179de:	2200      	movs	r2, #0
 80179e0:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80179e4:	f04f 0e00 	mov.w	lr, #0
 80179e8:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80179ec:	2300      	movs	r3, #0
 80179ee:	bf00      	nop
 80179f0:	b170      	cbz	r0, 8017a10 <sort_events_table+0x38>
 80179f2:	eb0c 0183 	add.w	r1, ip, r3, lsl #2
 80179f6:	68cc      	ldr	r4, [r1, #12]
 80179f8:	b154      	cbz	r4, 8017a10 <sort_events_table+0x38>
 80179fa:	6e45      	ldr	r5, [r0, #100]	@ 0x64
 80179fc:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 80179fe:	3301      	adds	r3, #1
 8017a00:	42b5      	cmp	r5, r6
 8017a02:	bf86      	itte	hi
 8017a04:	e9c1 4002 	strdhi	r4, r0, [r1, #8]
 8017a08:	2201      	movhi	r2, #1
 8017a0a:	4620      	movls	r0, r4
 8017a0c:	2b0a      	cmp	r3, #10
 8017a0e:	d1ef      	bne.n	80179f0 <sort_events_table+0x18>
 8017a10:	b132      	cbz	r2, 8017a20 <sort_events_table+0x48>
 8017a12:	f10e 0e01 	add.w	lr, lr, #1
 8017a16:	f1be 0f0b 	cmp.w	lr, #11
 8017a1a:	f04f 0201 	mov.w	r2, #1
 8017a1e:	d1e3      	bne.n	80179e8 <sort_events_table+0x10>
 8017a20:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a24 <update_slot_period>:
 8017a24:	b5b0      	push	{r4, r5, r7, lr}
 8017a26:	f646 6218 	movw	r2, #28184	@ 0x6e18
 8017a2a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8017a2e:	f892 1038 	ldrb.w	r1, [r2, #56]	@ 0x38
 8017a32:	b1d9      	cbz	r1, 8017a6c <update_slot_period+0x48>
 8017a34:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8017a36:	3208      	adds	r2, #8
 8017a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017a3c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8017a40:	6813      	ldr	r3, [r2, #0]
 8017a42:	b17b      	cbz	r3, 8017a64 <update_slot_period+0x40>
 8017a44:	f8b3 408a 	ldrh.w	r4, [r3, #138]	@ 0x8a
 8017a48:	f8d3 e064 	ldr.w	lr, [r3, #100]	@ 0x64
 8017a4c:	fb04 f400 	mul.w	r4, r4, r0
 8017a50:	f11e 0501 	adds.w	r5, lr, #1
 8017a54:	f8a3 408a 	strh.w	r4, [r3, #138]	@ 0x8a
 8017a58:	d004      	beq.n	8017a64 <update_slot_period+0x40>
 8017a5a:	fbbe f4fc 	udiv	r4, lr, ip
 8017a5e:	fb04 e51c 	mls	r5, r4, ip, lr
 8017a62:	665d      	str	r5, [r3, #100]	@ 0x64
 8017a64:	3901      	subs	r1, #1
 8017a66:	f102 0204 	add.w	r2, r2, #4
 8017a6a:	d1e9      	bne.n	8017a40 <update_slot_period+0x1c>
 8017a6c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8017a70:	f7ff bfb2 	b.w	80179d8 <sort_events_table>

08017a74 <multi_init>:
 8017a74:	b5b0      	push	{r4, r5, r7, lr}
 8017a76:	f646 6418 	movw	r4, #28184	@ 0x6e18
 8017a7a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8017a7e:	4620      	mov	r0, r4
 8017a80:	2100      	movs	r1, #0
 8017a82:	2240      	movs	r2, #64	@ 0x40
 8017a84:	2500      	movs	r5, #0
 8017a86:	f008 ff2d 	bl	80208e4 <ble_memset>
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	6365      	str	r5, [r4, #52]	@ 0x34
 8017a8e:	bdb0      	pop	{r4, r5, r7, pc}

08017a90 <get_nxt_evnt>:
 8017a90:	f646 6018 	movw	r0, #28184	@ 0x6e18
 8017a94:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017a98:	6800      	ldr	r0, [r0, #0]
 8017a9a:	4770      	bx	lr

08017a9c <get_nxt_when_idle_evnt>:
 8017a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a9e:	b081      	sub	sp, #4
 8017aa0:	f646 6518 	movw	r5, #28184	@ 0x6e18
 8017aa4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8017aa8:	686c      	ldr	r4, [r5, #4]
 8017aaa:	2801      	cmp	r0, #1
 8017aac:	d02d      	beq.n	8017b0a <get_nxt_when_idle_evnt+0x6e>
 8017aae:	4668      	mov	r0, sp
 8017ab0:	f006 fd0b 	bl	801e4ca <llhwc_slptmr_get>
 8017ab4:	f04f 0600 	mov.w	r6, #0
 8017ab8:	b334      	cbz	r4, 8017b08 <get_nxt_when_idle_evnt+0x6c>
 8017aba:	f247 37a8 	movw	r7, #29608	@ 0x73a8
 8017abe:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8017ac2:	bf00      	nop
 8017ac4:	3601      	adds	r6, #1
 8017ac6:	f895 0039 	ldrb.w	r0, [r5, #57]	@ 0x39
 8017aca:	b2f1      	uxtb	r1, r6
 8017acc:	4281      	cmp	r1, r0
 8017ace:	f04f 0000 	mov.w	r0, #0
 8017ad2:	f04f 0101 	mov.w	r1, #1
 8017ad6:	bf98      	it	ls
 8017ad8:	2001      	movls	r0, #1
 8017ada:	f003 ff20 	bl	801b91e <bsp_assert>
 8017ade:	f894 0046 	ldrb.w	r0, [r4, #70]	@ 0x46
 8017ae2:	2801      	cmp	r0, #1
 8017ae4:	d10d      	bne.n	8017b02 <get_nxt_when_idle_evnt+0x66>
 8017ae6:	78b8      	ldrb	r0, [r7, #2]
 8017ae8:	2801      	cmp	r0, #1
 8017aea:	d103      	bne.n	8017af4 <get_nxt_when_idle_evnt+0x58>
 8017aec:	78f8      	ldrb	r0, [r7, #3]
 8017aee:	07c0      	lsls	r0, r0, #31
 8017af0:	d007      	beq.n	8017b02 <get_nxt_when_idle_evnt+0x66>
 8017af2:	e00a      	b.n	8017b0a <get_nxt_when_idle_evnt+0x6e>
 8017af4:	9900      	ldr	r1, [sp, #0]
 8017af6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8017afa:	f005 fd93 	bl	801d624 <ble_time_cmp_raw_reading>
 8017afe:	2800      	cmp	r0, #0
 8017b00:	dc03      	bgt.n	8017b0a <get_nxt_when_idle_evnt+0x6e>
 8017b02:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 8017b04:	2c00      	cmp	r4, #0
 8017b06:	d1dd      	bne.n	8017ac4 <get_nxt_when_idle_evnt+0x28>
 8017b08:	2400      	movs	r4, #0
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	b001      	add	sp, #4
 8017b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017b10 <evnt_on_air>:
 8017b10:	b570      	push	{r4, r5, r6, lr}
 8017b12:	f646 6518 	movw	r5, #28184	@ 0x6e18
 8017b16:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8017b1a:	6829      	ldr	r1, [r5, #0]
 8017b1c:	4604      	mov	r4, r0
 8017b1e:	2900      	cmp	r1, #0
 8017b20:	bf18      	it	ne
 8017b22:	2101      	movne	r1, #1
 8017b24:	4608      	mov	r0, r1
 8017b26:	2101      	movs	r1, #1
 8017b28:	2601      	movs	r6, #1
 8017b2a:	f003 fef8 	bl	801b91e <bsp_assert>
 8017b2e:	6828      	ldr	r0, [r5, #0]
 8017b30:	2101      	movs	r1, #1
 8017b32:	1b00      	subs	r0, r0, r4
 8017b34:	fab0 f080 	clz	r0, r0
 8017b38:	0940      	lsrs	r0, r0, #5
 8017b3a:	f003 fef0 	bl	801b91e <bsp_assert>
 8017b3e:	6828      	ldr	r0, [r5, #0]
 8017b40:	2100      	movs	r1, #0
 8017b42:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8017b44:	f884 608d 	strb.w	r6, [r4, #141]	@ 0x8d
 8017b48:	6028      	str	r0, [r5, #0]
 8017b4a:	2000      	movs	r0, #0
 8017b4c:	67a1      	str	r1, [r4, #120]	@ 0x78
 8017b4e:	bd70      	pop	{r4, r5, r6, pc}

08017b50 <hndl_missed_evnt>:
 8017b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b54:	b084      	sub	sp, #16
 8017b56:	4604      	mov	r4, r0
 8017b58:	200e      	movs	r0, #14
 8017b5a:	f003 ff27 	bl	801b9ac <bsp_debug_gpio_set>
 8017b5e:	4625      	mov	r5, r4
 8017b60:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8017b62:	f855 1f50 	ldr.w	r1, [r5, #80]!
 8017b66:	f646 6818 	movw	r8, #28184	@ 0x6e18
 8017b6a:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8017b6e:	e9cd 1000 	strd	r1, r0, [sp]
 8017b72:	f8d8 0000 	ldr.w	r0, [r8]
 8017b76:	2700      	movs	r7, #0
 8017b78:	2101      	movs	r1, #1
 8017b7a:	9702      	str	r7, [sp, #8]
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	bf18      	it	ne
 8017b80:	2001      	movne	r0, #1
 8017b82:	f003 fecc 	bl	801b91e <bsp_assert>
 8017b86:	f8d8 0000 	ldr.w	r0, [r8]
 8017b8a:	2101      	movs	r1, #1
 8017b8c:	1b00      	subs	r0, r0, r4
 8017b8e:	fab0 f080 	clz	r0, r0
 8017b92:	0940      	lsrs	r0, r0, #5
 8017b94:	f003 fec3 	bl	801b91e <bsp_assert>
 8017b98:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 8017b9c:	2101      	movs	r1, #1
 8017b9e:	3802      	subs	r0, #2
 8017ba0:	bf18      	it	ne
 8017ba2:	2001      	movne	r0, #1
 8017ba4:	f003 febb 	bl	801b91e <bsp_assert>
 8017ba8:	f8d8 0000 	ldr.w	r0, [r8]
 8017bac:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8017bae:	f884 708d 	strb.w	r7, [r4, #141]	@ 0x8d
 8017bb2:	f8c8 0000 	str.w	r0, [r8]
 8017bb6:	6826      	ldr	r6, [r4, #0]
 8017bb8:	67a7      	str	r7, [r4, #120]	@ 0x78
 8017bba:	b156      	cbz	r6, 8017bd2 <hndl_missed_evnt+0x82>
 8017bbc:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 8017bc0:	f481 2280 	eor.w	r2, r1, #262144	@ 0x40000
 8017bc4:	4302      	orrs	r2, r0
 8017bc6:	bf1c      	itt	ne
 8017bc8:	f481 1280 	eorne.w	r2, r1, #1048576	@ 0x100000
 8017bcc:	ea52 0200 	orrsne.w	r2, r2, r0
 8017bd0:	d142      	bne.n	8017c58 <hndl_missed_evnt+0x108>
 8017bd2:	a802      	add	r0, sp, #8
 8017bd4:	f006 fc79 	bl	801e4ca <llhwc_slptmr_get>
 8017bd8:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 8017bdc:	f081 0108 	eor.w	r1, r1, #8
 8017be0:	4308      	orrs	r0, r1
 8017be2:	d008      	beq.n	8017bf6 <hndl_missed_evnt+0xa6>
 8017be4:	f240 10bc 	movw	r0, #444	@ 0x1bc
 8017be8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017bec:	6801      	ldr	r1, [r0, #0]
 8017bee:	4668      	mov	r0, sp
 8017bf0:	2205      	movs	r2, #5
 8017bf2:	f005 fcd9 	bl	801d5a8 <ble_time_rmv_uint>
 8017bf6:	9902      	ldr	r1, [sp, #8]
 8017bf8:	4668      	mov	r0, sp
 8017bfa:	f005 fd13 	bl	801d624 <ble_time_cmp_raw_reading>
 8017bfe:	2801      	cmp	r0, #1
 8017c00:	db1b      	blt.n	8017c3a <hndl_missed_evnt+0xea>
 8017c02:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 8017c06:	2200      	movs	r2, #0
 8017c08:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 8017c0a:	f1d1 033f 	rsbs	r3, r1, #63	@ 0x3f
 8017c0e:	eb72 0300 	sbcs.w	r3, r2, r0
 8017c12:	9203      	str	r2, [sp, #12]
 8017c14:	db13      	blt.n	8017c3e <hndl_missed_evnt+0xee>
 8017c16:	3901      	subs	r1, #1
 8017c18:	f160 0000 	sbc.w	r0, r0, #0
 8017c1c:	f1d1 031f 	rsbs	r3, r1, #31
 8017c20:	eb72 0000 	sbcs.w	r0, r2, r0
 8017c24:	d366      	bcc.n	8017cf4 <hndl_missed_evnt+0x1a4>
 8017c26:	2001      	movs	r0, #1
 8017c28:	4088      	lsls	r0, r1
 8017c2a:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 8017c2e:	d02a      	beq.n	8017c86 <hndl_missed_evnt+0x136>
 8017c30:	7e68      	ldrb	r0, [r5, #25]
 8017c32:	2801      	cmp	r0, #1
 8017c34:	d144      	bne.n	8017cc0 <hndl_missed_evnt+0x170>
 8017c36:	2000      	movs	r0, #0
 8017c38:	e049      	b.n	8017cce <hndl_missed_evnt+0x17e>
 8017c3a:	2501      	movs	r5, #1
 8017c3c:	e063      	b.n	8017d06 <hndl_missed_evnt+0x1b6>
 8017c3e:	f1d1 03ff 	rsbs	r3, r1, #255	@ 0xff
 8017c42:	4182      	sbcs	r2, r0
 8017c44:	db24      	blt.n	8017c90 <hndl_missed_evnt+0x140>
 8017c46:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 8017c4a:	4302      	orrs	r2, r0
 8017c4c:	d01e      	beq.n	8017c8c <hndl_missed_evnt+0x13c>
 8017c4e:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 8017c52:	4308      	orrs	r0, r1
 8017c54:	d041      	beq.n	8017cda <hndl_missed_evnt+0x18a>
 8017c56:	e04d      	b.n	8017cf4 <hndl_missed_evnt+0x1a4>
 8017c58:	f411 0f20 	tst.w	r1, #10485760	@ 0xa00000
 8017c5c:	d1b9      	bne.n	8017bd2 <hndl_missed_evnt+0x82>
 8017c5e:	f481 7180 	eor.w	r1, r1, #256	@ 0x100
 8017c62:	4308      	orrs	r0, r1
 8017c64:	f04f 0000 	mov.w	r0, #0
 8017c68:	bf04      	itt	eq
 8017c6a:	6f60      	ldreq	r0, [r4, #116]	@ 0x74
 8017c6c:	f890 012f 	ldrbeq.w	r0, [r0, #303]	@ 0x12f
 8017c70:	2103      	movs	r1, #3
 8017c72:	2700      	movs	r7, #0
 8017c74:	f007 fc90 	bl	801f598 <llhwc_get_hw_setup_time>
 8017c78:	1981      	adds	r1, r0, r6
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	2201      	movs	r2, #1
 8017c7e:	f005 fbf1 	bl	801d464 <ble_time_add_uint>
 8017c82:	6027      	str	r7, [r4, #0]
 8017c84:	e7a5      	b.n	8017bd2 <hndl_missed_evnt+0x82>
 8017c86:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 8017c8a:	d033      	beq.n	8017cf4 <hndl_missed_evnt+0x1a4>
 8017c8c:	8928      	ldrh	r0, [r5, #8]
 8017c8e:	e020      	b.n	8017cd2 <hndl_missed_evnt+0x182>
 8017c90:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 8017c94:	4302      	orrs	r2, r0
 8017c96:	d020      	beq.n	8017cda <hndl_missed_evnt+0x18a>
 8017c98:	f080 0008 	eor.w	r0, r0, #8
 8017c9c:	4308      	orrs	r0, r1
 8017c9e:	d129      	bne.n	8017cf4 <hndl_missed_evnt+0x1a4>
 8017ca0:	68a5      	ldr	r5, [r4, #8]
 8017ca2:	b9fd      	cbnz	r5, 8017ce4 <hndl_missed_evnt+0x194>
 8017ca4:	f240 10bc 	movw	r0, #444	@ 0x1bc
 8017ca8:	f646 4178 	movw	r1, #27768	@ 0x6c78
 8017cac:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017cb0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8017cb4:	6800      	ldr	r0, [r0, #0]
 8017cb6:	6889      	ldr	r1, [r1, #8]
 8017cb8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8017cba:	4408      	add	r0, r1
 8017cbc:	1a15      	subs	r5, r2, r0
 8017cbe:	e010      	b.n	8017ce2 <hndl_missed_evnt+0x192>
 8017cc0:	a803      	add	r0, sp, #12
 8017cc2:	2101      	movs	r1, #1
 8017cc4:	f7fc f98f 	bl	8013fe6 <llhwc_gen_rnd_num>
 8017cc8:	9803      	ldr	r0, [sp, #12]
 8017cca:	f000 000f 	and.w	r0, r0, #15
 8017cce:	6969      	ldr	r1, [r5, #20]
 8017cd0:	4408      	add	r0, r1
 8017cd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017cd6:	0085      	lsls	r5, r0, #2
 8017cd8:	e003      	b.n	8017ce2 <hndl_missed_evnt+0x192>
 8017cda:	8ae8      	ldrh	r0, [r5, #22]
 8017cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017ce0:	00c5      	lsls	r5, r0, #3
 8017ce2:	b15d      	cbz	r5, 8017cfc <hndl_missed_evnt+0x1ac>
 8017ce4:	9802      	ldr	r0, [sp, #8]
 8017ce6:	9900      	ldr	r1, [sp, #0]
 8017ce8:	f005 fcc1 	bl	801d66e <ble_time_overflow_diff>
 8017cec:	fbb0 f0f5 	udiv	r0, r0, r5
 8017cf0:	1c45      	adds	r5, r0, #1
 8017cf2:	e008      	b.n	8017d06 <hndl_missed_evnt+0x1b6>
 8017cf4:	2000      	movs	r0, #0
 8017cf6:	2101      	movs	r1, #1
 8017cf8:	f003 fe11 	bl	801b91e <bsp_assert>
 8017cfc:	2000      	movs	r0, #0
 8017cfe:	2101      	movs	r1, #1
 8017d00:	2500      	movs	r5, #0
 8017d02:	f003 fe0c 	bl	801b91e <bsp_assert>
 8017d06:	f8b4 0090 	ldrh.w	r0, [r4, #144]	@ 0x90
 8017d0a:	f410 7fc0 	tst.w	r0, #384	@ 0x180
 8017d0e:	d009      	beq.n	8017d24 <hndl_missed_evnt+0x1d4>
 8017d10:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017d12:	f8b1 0070 	ldrh.w	r0, [r1, #112]	@ 0x70
 8017d16:	b128      	cbz	r0, 8017d24 <hndl_missed_evnt+0x1d4>
 8017d18:	f8b1 10da 	ldrh.w	r1, [r1, #218]	@ 0xda
 8017d1c:	186a      	adds	r2, r5, r1
 8017d1e:	4282      	cmp	r2, r0
 8017d20:	bf28      	it	cs
 8017d22:	1a45      	subcs	r5, r0, r1
 8017d24:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8017d28:	4629      	mov	r1, r5
 8017d2a:	4428      	add	r0, r5
 8017d2c:	f884 0099 	strb.w	r0, [r4, #153]	@ 0x99
 8017d30:	4620      	mov	r0, r4
 8017d32:	f7ff fb91 	bl	8017458 <add_intrvl_to_evnt_time_stamp>
 8017d36:	4605      	mov	r5, r0
 8017d38:	b940      	cbnz	r0, 8017d4c <hndl_missed_evnt+0x1fc>
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	f7ff fa4f 	bl	80171e0 <schedule_event>
 8017d42:	f898 003a 	ldrb.w	r0, [r8, #58]	@ 0x3a
 8017d46:	b108      	cbz	r0, 8017d4c <hndl_missed_evnt+0x1fc>
 8017d48:	f7fe fef0 	bl	8016b2c <recheck_conflicting>
 8017d4c:	200e      	movs	r0, #14
 8017d4e:	f003 fe2f 	bl	801b9b0 <bsp_debug_gpio_clear>
 8017d52:	4628      	mov	r0, r5
 8017d54:	b004      	add	sp, #16
 8017d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017d5c <add_evnt>:
 8017d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d60:	b083      	sub	sp, #12
 8017d62:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 8017d66:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8017d6a:	4683      	mov	fp, r0
 8017d6c:	e9d0 9a24 	ldrd	r9, sl, [r0, #144]	@ 0x90
 8017d70:	f8d8 0000 	ldr.w	r0, [r8]
 8017d74:	f04f 31ff 	mov.w	r1, #4294967295
 8017d78:	f003 fe35 	bl	801b9e6 <os_rcrsv_mutex_wait>
 8017d7c:	f08a 0002 	eor.w	r0, sl, #2
 8017d80:	ea50 0009 	orrs.w	r0, r0, r9
 8017d84:	d149      	bne.n	8017e1a <add_evnt+0xbe>
 8017d86:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8017d8a:	2501      	movs	r5, #1
 8017d8c:	f081 0102 	eor.w	r1, r1, #2
 8017d90:	4308      	orrs	r0, r1
 8017d92:	fab0 f080 	clz	r0, r0
 8017d96:	0940      	lsrs	r0, r0, #5
 8017d98:	2101      	movs	r1, #1
 8017d9a:	f003 fdc0 	bl	801b91e <bsp_assert>
 8017d9e:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 8017da2:	2801      	cmp	r0, #1
 8017da4:	d11f      	bne.n	8017de6 <add_evnt+0x8a>
 8017da6:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
 8017daa:	f10b 0134 	add.w	r1, fp, #52	@ 0x34
 8017dae:	f10b 023c 	add.w	r2, fp, #60	@ 0x3c
 8017db2:	f7fd fc57 	bl	8015664 <llhwc_get_prdc_clbr_evnt_cfg_time>
 8017db6:	f247 30a8 	movw	r0, #29608	@ 0x73a8
 8017dba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017dbe:	7880      	ldrb	r0, [r0, #2]
 8017dc0:	f88b 5048 	strb.w	r5, [fp, #72]	@ 0x48
 8017dc4:	b978      	cbnz	r0, 8017de6 <add_evnt+0x8a>
 8017dc6:	f646 403c 	movw	r0, #27708	@ 0x6c3c
 8017dca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017dce:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8017dd0:	4658      	mov	r0, fp
 8017dd2:	f840 1f50 	str.w	r1, [r0, #80]!
 8017dd6:	f646 4194 	movw	r1, #27796	@ 0x6c94
 8017dda:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8017dde:	6809      	ldr	r1, [r1, #0]
 8017de0:	2205      	movs	r2, #5
 8017de2:	f005 fb3f 	bl	801d464 <ble_time_add_uint>
 8017de6:	f646 6018 	movw	r0, #28184	@ 0x6e18
 8017dea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8017dee:	1d03      	adds	r3, r0, #4
 8017df0:	2100      	movs	r1, #0
 8017df2:	bf00      	nop
 8017df4:	460a      	mov	r2, r1
 8017df6:	6819      	ldr	r1, [r3, #0]
 8017df8:	2900      	cmp	r1, #0
 8017dfa:	f101 0378 	add.w	r3, r1, #120	@ 0x78
 8017dfe:	d1f9      	bne.n	8017df4 <add_evnt+0x98>
 8017e00:	2a00      	cmp	r2, #0
 8017e02:	bf14      	ite	ne
 8017e04:	f8c2 b078 	strne.w	fp, [r2, #120]	@ 0x78
 8017e08:	f8c0 b004 	streq.w	fp, [r0, #4]
 8017e0c:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8017e10:	3101      	adds	r1, #1
 8017e12:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8017e16:	2500      	movs	r5, #0
 8017e18:	e008      	b.n	8017e2c <add_evnt+0xd0>
 8017e1a:	f646 6718 	movw	r7, #28184	@ 0x6e18
 8017e1e:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8017e22:	f897 0038 	ldrb.w	r0, [r7, #56]	@ 0x38
 8017e26:	280a      	cmp	r0, #10
 8017e28:	d908      	bls.n	8017e3c <add_evnt+0xe0>
 8017e2a:	251f      	movs	r5, #31
 8017e2c:	f8d8 0000 	ldr.w	r0, [r8]
 8017e30:	f003 fddf 	bl	801b9f2 <os_rcrsv_mutex_release>
 8017e34:	4628      	mov	r0, r5
 8017e36:	b003      	add	sp, #12
 8017e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e3c:	2001      	movs	r0, #1
 8017e3e:	2101      	movs	r1, #1
 8017e40:	f003 fd6d 	bl	801b91e <bsp_assert>
 8017e44:	e9db 1024 	ldrd	r1, r0, [fp, #144]	@ 0x90
 8017e48:	f8db 6074 	ldr.w	r6, [fp, #116]	@ 0x74
 8017e4c:	f1d1 023f 	rsbs	r2, r1, #63	@ 0x3f
 8017e50:	f04f 0200 	mov.w	r2, #0
 8017e54:	eb72 0300 	sbcs.w	r3, r2, r0
 8017e58:	f04f 051f 	mov.w	r5, #31
 8017e5c:	db5b      	blt.n	8017f16 <add_evnt+0x1ba>
 8017e5e:	3901      	subs	r1, #1
 8017e60:	f160 0000 	sbc.w	r0, r0, #0
 8017e64:	f1d1 031f 	rsbs	r3, r1, #31
 8017e68:	eb72 0000 	sbcs.w	r0, r2, r0
 8017e6c:	f0c0 81c0 	bcc.w	80181f0 <add_evnt+0x494>
 8017e70:	2001      	movs	r0, #1
 8017e72:	4088      	lsls	r0, r1
 8017e74:	f010 0f8b 	tst.w	r0, #139	@ 0x8b
 8017e78:	f000 8086 	beq.w	8017f88 <add_evnt+0x22c>
 8017e7c:	4658      	mov	r0, fp
 8017e7e:	2101      	movs	r1, #1
 8017e80:	f7f7 fac6 	bl	800f410 <evnt_schdlr_calc_prim_adv_durn_on_air>
 8017e84:	217d      	movs	r1, #125	@ 0x7d
 8017e86:	f240 16bc 	movw	r6, #444	@ 0x1bc
 8017e8a:	f646 4278 	movw	r2, #27768	@ 0x6c78
 8017e8e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8017e92:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8017e96:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8017e9a:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 8017e9e:	6831      	ldr	r1, [r6, #0]
 8017ea0:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 8017ea4:	6892      	ldr	r2, [r2, #8]
 8017ea6:	fba0 0303 	umull	r0, r3, r0, r3
 8017eaa:	1850      	adds	r0, r2, r1
 8017eac:	eb00 00d3 	add.w	r0, r0, r3, lsr #3
 8017eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8017eb4:	e9cb 0118 	strd	r0, r1, [fp, #96]	@ 0x60
 8017eb8:	4658      	mov	r0, fp
 8017eba:	f000 fdc9 	bl	8018a50 <set_evnt_start_time>
 8017ebe:	f7f4 fbeb 	bl	800c698 <evnt_schdlr_get_prdc_clbr_evnt_hndl>
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	f000 819e 	beq.w	8018204 <add_evnt+0x4a8>
 8017ec8:	4605      	mov	r5, r0
 8017eca:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 8017ece:	2205      	movs	r2, #5
 8017ed0:	9000      	str	r0, [sp, #0]
 8017ed2:	4668      	mov	r0, sp
 8017ed4:	9101      	str	r1, [sp, #4]
 8017ed6:	6831      	ldr	r1, [r6, #0]
 8017ed8:	f501 517a 	add.w	r1, r1, #16000	@ 0x3e80
 8017edc:	f005 fac2 	bl	801d464 <ble_time_add_uint>
 8017ee0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	f000 818e 	beq.w	8018204 <add_evnt+0x4a8>
 8017ee8:	f10b 0650 	add.w	r6, fp, #80	@ 0x50
 8017eec:	4668      	mov	r0, sp
 8017eee:	4631      	mov	r1, r6
 8017ef0:	f005 fa16 	bl	801d320 <ble_time_comp>
 8017ef4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017ef8:	f300 8184 	bgt.w	8018204 <add_evnt+0x4a8>
 8017efc:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
 8017efe:	f7fd fbb3 	bl	8015668 <llhwc_get_num_of_prdc_clbr_chnls>
 8017f02:	e9d5 120e 	ldrd	r1, r2, [r5, #56]	@ 0x38
 8017f06:	fb04 1000 	mla	r0, r4, r0, r1
 8017f0a:	1881      	adds	r1, r0, r2
 8017f0c:	4630      	mov	r0, r6
 8017f0e:	2201      	movs	r2, #1
 8017f10:	f005 faa8 	bl	801d464 <ble_time_add_uint>
 8017f14:	e176      	b.n	8018204 <add_evnt+0x4a8>
 8017f16:	f1d1 03ff 	rsbs	r3, r1, #255	@ 0xff
 8017f1a:	4182      	sbcs	r2, r0
 8017f1c:	db71      	blt.n	8018002 <add_evnt+0x2a6>
 8017f1e:	f081 0240 	eor.w	r2, r1, #64	@ 0x40
 8017f22:	4302      	orrs	r2, r0
 8017f24:	f000 80ce 	beq.w	80180c4 <add_evnt+0x368>
 8017f28:	f081 0180 	eor.w	r1, r1, #128	@ 0x80
 8017f2c:	4308      	orrs	r0, r1
 8017f2e:	f040 815f 	bne.w	80181f0 <add_evnt+0x494>
 8017f32:	f10b 0050 	add.w	r0, fp, #80	@ 0x50
 8017f36:	f106 0138 	add.w	r1, r6, #56	@ 0x38
 8017f3a:	f005 fa6e 	bl	801d41a <ble_time_set>
 8017f3e:	4630      	mov	r0, r6
 8017f40:	2100      	movs	r1, #0
 8017f42:	f7f6 ffb1 	bl	800eea8 <evnt_schdlr_calc_conn_duration>
 8017f46:	f240 11bc 	movw	r1, #444	@ 0x1bc
 8017f4a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8017f4e:	f646 4278 	movw	r2, #27768	@ 0x6c78
 8017f52:	6809      	ldr	r1, [r1, #0]
 8017f54:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8017f58:	6892      	ldr	r2, [r2, #8]
 8017f5a:	4408      	add	r0, r1
 8017f5c:	1881      	adds	r1, r0, r2
 8017f5e:	8af0      	ldrh	r0, [r6, #22]
 8017f60:	f8cb 1060 	str.w	r1, [fp, #96]	@ 0x60
 8017f64:	f7ff f834 	bl	8016fd0 <get_intrv_slot_period>
 8017f68:	2800      	cmp	r0, #0
 8017f6a:	f8ab 008a 	strh.w	r0, [fp, #138]	@ 0x8a
 8017f6e:	f000 80ef 	beq.w	8018150 <add_evnt+0x3f4>
 8017f72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017f74:	f8db 1050 	ldr.w	r1, [fp, #80]	@ 0x50
 8017f78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8017f7c:	00c0      	lsls	r0, r0, #3
 8017f7e:	fbb1 f2f0 	udiv	r2, r1, r0
 8017f82:	fb02 1010 	mls	r0, r2, r0, r1
 8017f86:	e0e5      	b.n	8018154 <add_evnt+0x3f8>
 8017f88:	f010 2f80 	tst.w	r0, #2147516416	@ 0x80008000
 8017f8c:	f000 8130 	beq.w	80181f0 <add_evnt+0x494>
 8017f90:	f106 050a 	add.w	r5, r6, #10
 8017f94:	f106 0008 	add.w	r0, r6, #8
 8017f98:	4629      	mov	r1, r5
 8017f9a:	f7ff fcc7 	bl	801792c <get_scan_intrv_slot_period>
 8017f9e:	f240 13bc 	movw	r3, #444	@ 0x1bc
 8017fa2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8017fa6:	8931      	ldrh	r1, [r6, #8]
 8017fa8:	8972      	ldrh	r2, [r6, #10]
 8017faa:	681e      	ldr	r6, [r3, #0]
 8017fac:	f64c 4ccd 	movw	ip, #52429	@ 0xcccd
 8017fb0:	f6cc 4ccc 	movt	ip, #52428	@ 0xcccc
 8017fb4:	fba6 430c 	umull	r4, r3, r6, ip
 8017fb8:	f646 4478 	movw	r4, #27768	@ 0x6c78
 8017fbc:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8017fc0:	f3c3 130f 	ubfx	r3, r3, #4, #16
 8017fc4:	68a4      	ldr	r4, [r4, #8]
 8017fc6:	1a8a      	subs	r2, r1, r2
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	eb04 0206 	add.w	r2, r4, r6
 8017fce:	f8ab 008a 	strh.w	r0, [fp, #138]	@ 0x8a
 8017fd2:	dc04      	bgt.n	8017fde <add_evnt+0x282>
 8017fd4:	fba2 360c 	umull	r3, r6, r2, ip
 8017fd8:	eba1 1116 	sub.w	r1, r1, r6, lsr #4
 8017fdc:	8029      	strh	r1, [r5, #0]
 8017fde:	2125      	movs	r1, #37	@ 0x25
 8017fe0:	f88b 1010 	strb.w	r1, [fp, #16]
 8017fe4:	8829      	ldrh	r1, [r5, #0]
 8017fe6:	2800      	cmp	r0, #0
 8017fe8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017fec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8017ff0:	f8cb 1060 	str.w	r1, [fp, #96]	@ 0x60
 8017ff4:	f000 809e 	beq.w	8018134 <add_evnt+0x3d8>
 8017ff8:	4608      	mov	r0, r1
 8017ffa:	2100      	movs	r1, #0
 8017ffc:	f7fe fe38 	bl	8016c70 <get_slot_offset>
 8018000:	e09a      	b.n	8018138 <add_evnt+0x3dc>
 8018002:	f481 7280 	eor.w	r2, r1, #256	@ 0x100
 8018006:	4302      	orrs	r2, r0
 8018008:	f000 808b 	beq.w	8018122 <add_evnt+0x3c6>
 801800c:	f080 0008 	eor.w	r0, r0, #8
 8018010:	4308      	orrs	r0, r1
 8018012:	f040 80ed 	bne.w	80181f0 <add_evnt+0x494>
 8018016:	2001      	movs	r0, #1
 8018018:	2101      	movs	r1, #1
 801801a:	f003 fc80 	bl	801b91e <bsp_assert>
 801801e:	f240 14bc 	movw	r4, #444	@ 0x1bc
 8018022:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8018026:	f646 4678 	movw	r6, #27768	@ 0x6c78
 801802a:	f8db 1014 	ldr.w	r1, [fp, #20]
 801802e:	6822      	ldr	r2, [r4, #0]
 8018030:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8018034:	f8db 0008 	ldr.w	r0, [fp, #8]
 8018038:	68b3      	ldr	r3, [r6, #8]
 801803a:	4411      	add	r1, r2
 801803c:	4419      	add	r1, r3
 801803e:	2800      	cmp	r0, #0
 8018040:	f8cb 1060 	str.w	r1, [fp, #96]	@ 0x60
 8018044:	f000 8089 	beq.w	801815a <add_evnt+0x3fe>
 8018048:	f64c 42cd 	movw	r2, #52429	@ 0xcccd
 801804c:	f6cc 42cc 	movt	r2, #52428	@ 0xcccc
 8018050:	fba0 0202 	umull	r0, r2, r0, r2
 8018054:	0950      	lsrs	r0, r2, #5
 8018056:	f7fe ffbb 	bl	8016fd0 <get_intrv_slot_period>
 801805a:	2800      	cmp	r0, #0
 801805c:	f8ab 008a 	strh.w	r0, [fp, #138]	@ 0x8a
 8018060:	f000 80ad 	beq.w	80181be <add_evnt+0x462>
 8018064:	f8db 0060 	ldr.w	r0, [fp, #96]	@ 0x60
 8018068:	2100      	movs	r1, #0
 801806a:	2500      	movs	r5, #0
 801806c:	f7fe fe00 	bl	8016c70 <get_slot_offset>
 8018070:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 8018074:	a802      	add	r0, sp, #8
 8018076:	f006 fa28 	bl	801e4ca <llhwc_slptmr_get>
 801807a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801807c:	9e02      	ldr	r6, [sp, #8]
 801807e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8018082:	f8db 4064 	ldr.w	r4, [fp, #100]	@ 0x64
 8018086:	00d8      	lsls	r0, r3, #3
 8018088:	fbb6 f1f0 	udiv	r1, r6, r0
 801808c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8018090:	fb01 4100 	mla	r1, r1, r0, r4
 8018094:	3605      	adds	r6, #5
 8018096:	428e      	cmp	r6, r1
 8018098:	bf88      	it	hi
 801809a:	eb01 01c3 	addhi.w	r1, r1, r3, lsl #3
 801809e:	2a00      	cmp	r2, #0
 80180a0:	f8cb 1050 	str.w	r1, [fp, #80]	@ 0x50
 80180a4:	f000 80a3 	beq.w	80181ee <add_evnt+0x492>
 80180a8:	428a      	cmp	r2, r1
 80180aa:	f240 80a0 	bls.w	80181ee <add_evnt+0x492>
 80180ae:	4402      	add	r2, r0
 80180b0:	43cb      	mvns	r3, r1
 80180b2:	441a      	add	r2, r3
 80180b4:	fbb2 f2f0 	udiv	r2, r2, r0
 80180b8:	b292      	uxth	r2, r2
 80180ba:	fb02 1000 	mla	r0, r2, r0, r1
 80180be:	f8cb 0050 	str.w	r0, [fp, #80]	@ 0x50
 80180c2:	e093      	b.n	80181ec <add_evnt+0x490>
 80180c4:	f240 12bc 	movw	r2, #444	@ 0x1bc
 80180c8:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80180cc:	6812      	ldr	r2, [r2, #0]
 80180ce:	f64c 4ccd 	movw	ip, #52429	@ 0xcccd
 80180d2:	f6cc 4ccc 	movt	ip, #52428	@ 0xcccc
 80180d6:	fba2 430c 	umull	r4, r3, r2, ip
 80180da:	f646 4478 	movw	r4, #27768	@ 0x6c78
 80180de:	8931      	ldrh	r1, [r6, #8]
 80180e0:	8970      	ldrh	r0, [r6, #10]
 80180e2:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80180e6:	f3c3 130f 	ubfx	r3, r3, #4, #16
 80180ea:	68a4      	ldr	r4, [r4, #8]
 80180ec:	1a0d      	subs	r5, r1, r0
 80180ee:	429d      	cmp	r5, r3
 80180f0:	4422      	add	r2, r4
 80180f2:	dc05      	bgt.n	8018100 <add_evnt+0x3a4>
 80180f4:	fba2 030c 	umull	r0, r3, r2, ip
 80180f8:	eba1 1113 	sub.w	r1, r1, r3, lsr #4
 80180fc:	b288      	uxth	r0, r1
 80180fe:	8171      	strh	r1, [r6, #10]
 8018100:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018104:	f04f 31ff 	mov.w	r1, #4294967295
 8018108:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801810c:	2400      	movs	r4, #0
 801810e:	e9cb 0118 	strd	r0, r1, [fp, #96]	@ 0x60
 8018112:	4658      	mov	r0, fp
 8018114:	f8ab 408a 	strh.w	r4, [fp, #138]	@ 0x8a
 8018118:	f000 fc9a 	bl	8018a50 <set_evnt_start_time>
 801811c:	f8ab 4088 	strh.w	r4, [fp, #136]	@ 0x88
 8018120:	e012      	b.n	8018148 <add_evnt+0x3ec>
 8018122:	4658      	mov	r0, fp
 8018124:	f7f6 fe0e 	bl	800ed44 <evnt_schdlr_set_slave_conn_timers>
 8018128:	4605      	mov	r5, r0
 801812a:	f04f 30ff 	mov.w	r0, #4294967295
 801812e:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 8018132:	e05c      	b.n	80181ee <add_evnt+0x492>
 8018134:	f04f 30ff 	mov.w	r0, #4294967295
 8018138:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 801813c:	4658      	mov	r0, fp
 801813e:	f000 fc87 	bl	8018a50 <set_evnt_start_time>
 8018142:	2000      	movs	r0, #0
 8018144:	f8ab 0088 	strh.w	r0, [fp, #136]	@ 0x88
 8018148:	2001      	movs	r0, #1
 801814a:	f88b 008c 	strb.w	r0, [fp, #140]	@ 0x8c
 801814e:	e059      	b.n	8018204 <add_evnt+0x4a8>
 8018150:	f04f 30ff 	mov.w	r0, #4294967295
 8018154:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 8018158:	e054      	b.n	8018204 <add_evnt+0x4a8>
 801815a:	f04f 30ff 	mov.w	r0, #4294967295
 801815e:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 8018162:	a802      	add	r0, sp, #8
 8018164:	f006 f9b1 	bl	801e4ca <llhwc_slptmr_get>
 8018168:	9802      	ldr	r0, [sp, #8]
 801816a:	465d      	mov	r5, fp
 801816c:	f845 0f50 	str.w	r0, [r5, #80]!
 8018170:	2105      	movs	r1, #5
 8018172:	4628      	mov	r0, r5
 8018174:	2205      	movs	r2, #5
 8018176:	f005 f975 	bl	801d464 <ble_time_add_uint>
 801817a:	f855 0c44 	ldr.w	r0, [r5, #-68]
 801817e:	b118      	cbz	r0, 8018188 <add_evnt+0x42c>
 8018180:	6829      	ldr	r1, [r5, #0]
 8018182:	4281      	cmp	r1, r0
 8018184:	bf38      	it	cc
 8018186:	6028      	strcc	r0, [r5, #0]
 8018188:	f8db 0010 	ldr.w	r0, [fp, #16]
 801818c:	b120      	cbz	r0, 8018198 <add_evnt+0x43c>
 801818e:	6829      	ldr	r1, [r5, #0]
 8018190:	4281      	cmp	r1, r0
 8018192:	d901      	bls.n	8018198 <add_evnt+0x43c>
 8018194:	2003      	movs	r0, #3
 8018196:	e00e      	b.n	80181b6 <add_evnt+0x45a>
 8018198:	f8db 001c 	ldr.w	r0, [fp, #28]
 801819c:	b330      	cbz	r0, 80181ec <add_evnt+0x490>
 801819e:	f8db 1050 	ldr.w	r1, [fp, #80]	@ 0x50
 80181a2:	f8db 2060 	ldr.w	r2, [fp, #96]	@ 0x60
 80181a6:	6823      	ldr	r3, [r4, #0]
 80181a8:	68b6      	ldr	r6, [r6, #8]
 80181aa:	4411      	add	r1, r2
 80181ac:	199a      	adds	r2, r3, r6
 80181ae:	1a89      	subs	r1, r1, r2
 80181b0:	4281      	cmp	r1, r0
 80181b2:	d91b      	bls.n	80181ec <add_evnt+0x490>
 80181b4:	2004      	movs	r0, #4
 80181b6:	f88b 0021 	strb.w	r0, [fp, #33]	@ 0x21
 80181ba:	251f      	movs	r5, #31
 80181bc:	e017      	b.n	80181ee <add_evnt+0x492>
 80181be:	f04f 30ff 	mov.w	r0, #4294967295
 80181c2:	f8cb 0064 	str.w	r0, [fp, #100]	@ 0x64
 80181c6:	a802      	add	r0, sp, #8
 80181c8:	f006 f97f 	bl	801e4ca <llhwc_slptmr_get>
 80181cc:	9802      	ldr	r0, [sp, #8]
 80181ce:	465d      	mov	r5, fp
 80181d0:	f845 0f50 	str.w	r0, [r5, #80]!
 80181d4:	2105      	movs	r1, #5
 80181d6:	4628      	mov	r0, r5
 80181d8:	2205      	movs	r2, #5
 80181da:	f005 f943 	bl	801d464 <ble_time_add_uint>
 80181de:	f855 0c44 	ldr.w	r0, [r5, #-68]
 80181e2:	b118      	cbz	r0, 80181ec <add_evnt+0x490>
 80181e4:	6829      	ldr	r1, [r5, #0]
 80181e6:	4281      	cmp	r1, r0
 80181e8:	bf38      	it	cc
 80181ea:	6028      	strcc	r0, [r5, #0]
 80181ec:	2500      	movs	r5, #0
 80181ee:	b14d      	cbz	r5, 8018204 <add_evnt+0x4a8>
 80181f0:	f08a 0008 	eor.w	r0, sl, #8
 80181f4:	ea50 0009 	orrs.w	r0, r0, r9
 80181f8:	f47f ae18 	bne.w	8017e2c <add_evnt+0xd0>
 80181fc:	4658      	mov	r0, fp
 80181fe:	f7f6 fcdb 	bl	800ebb8 <evnt_schdlr_free_evnt>
 8018202:	e613      	b.n	8017e2c <add_evnt+0xd0>
 8018204:	f897 0038 	ldrb.w	r0, [r7, #56]	@ 0x38
 8018208:	1c41      	adds	r1, r0, #1
 801820a:	b2c8      	uxtb	r0, r1
 801820c:	4288      	cmp	r0, r1
 801820e:	f887 1038 	strb.w	r1, [r7, #56]	@ 0x38
 8018212:	d024      	beq.n	801825e <add_evnt+0x502>
 8018214:	e9db 0124 	ldrd	r0, r1, [fp, #144]	@ 0x90
 8018218:	f480 2080 	eor.w	r0, r0, #262144	@ 0x40000
 801821c:	4308      	orrs	r0, r1
 801821e:	d003      	beq.n	8018228 <add_evnt+0x4cc>
 8018220:	4658      	mov	r0, fp
 8018222:	2100      	movs	r1, #0
 8018224:	f7fe ffdc 	bl	80171e0 <schedule_event>
 8018228:	f897 003a 	ldrb.w	r0, [r7, #58]	@ 0x3a
 801822c:	b108      	cbz	r0, 8018232 <add_evnt+0x4d6>
 801822e:	f7fe fc7d 	bl	8016b2c <recheck_conflicting>
 8018232:	f08a 0008 	eor.w	r0, sl, #8
 8018236:	ea50 0009 	orrs.w	r0, r0, r9
 801823a:	f47f adec 	bne.w	8017e16 <add_evnt+0xba>
 801823e:	f897 0038 	ldrb.w	r0, [r7, #56]	@ 0x38
 8018242:	2800      	cmp	r0, #0
 8018244:	f43f adf1 	beq.w	8017e2a <add_evnt+0xce>
 8018248:	f107 0108 	add.w	r1, r7, #8
 801824c:	680a      	ldr	r2, [r1, #0]
 801824e:	455a      	cmp	r2, fp
 8018250:	f43f ade1 	beq.w	8017e16 <add_evnt+0xba>
 8018254:	3801      	subs	r0, #1
 8018256:	f101 0104 	add.w	r1, r1, #4
 801825a:	d1f7      	bne.n	801824c <add_evnt+0x4f0>
 801825c:	e5e5      	b.n	8017e2a <add_evnt+0xce>
 801825e:	f8db 5064 	ldr.w	r5, [fp, #100]	@ 0x64
 8018262:	2300      	movs	r3, #0
 8018264:	465c      	mov	r4, fp
 8018266:	b2db      	uxtb	r3, r3
 8018268:	eb07 0683 	add.w	r6, r7, r3, lsl #2
 801826c:	68b2      	ldr	r2, [r6, #8]
 801826e:	b90a      	cbnz	r2, 8018274 <add_evnt+0x518>
 8018270:	4622      	mov	r2, r4
 8018272:	60b4      	str	r4, [r6, #8]
 8018274:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8018276:	42a9      	cmp	r1, r5
 8018278:	d803      	bhi.n	8018282 <add_evnt+0x526>
 801827a:	3301      	adds	r3, #1
 801827c:	4283      	cmp	r3, r0
 801827e:	d3f3      	bcc.n	8018268 <add_evnt+0x50c>
 8018280:	e7c8      	b.n	8018214 <add_evnt+0x4b8>
 8018282:	3301      	adds	r3, #1
 8018284:	60b4      	str	r4, [r6, #8]
 8018286:	b2de      	uxtb	r6, r3
 8018288:	4286      	cmp	r6, r0
 801828a:	460d      	mov	r5, r1
 801828c:	4614      	mov	r4, r2
 801828e:	d3ea      	bcc.n	8018266 <add_evnt+0x50a>
 8018290:	e7c0      	b.n	8018214 <add_evnt+0x4b8>
	...

08018294 <update_slot_durations>:
 8018294:	b570      	push	{r4, r5, r6, lr}
 8018296:	4601      	mov	r1, r0
 8018298:	6800      	ldr	r0, [r0, #0]
 801829a:	684a      	ldr	r2, [r1, #4]
 801829c:	f646 6418 	movw	r4, #28184	@ 0x6e18
 80182a0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80182a4:	4410      	add	r0, r2
 80182a6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80182aa:	f100 0e0e 	add.w	lr, r0, #14
 80182ae:	f240 1cbc 	movw	ip, #444	@ 0x1bc
 80182b2:	f646 4078 	movw	r0, #27768	@ 0x6c78
 80182b6:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80182ba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80182be:	b18a      	cbz	r2, 80182e4 <update_slot_durations+0x50>
 80182c0:	6889      	ldr	r1, [r1, #8]
 80182c2:	f8dc 3000 	ldr.w	r3, [ip]
 80182c6:	6885      	ldr	r5, [r0, #8]
 80182c8:	4471      	add	r1, lr
 80182ca:	442b      	add	r3, r5
 80182cc:	3408      	adds	r4, #8
 80182ce:	bf00      	nop
 80182d0:	6825      	ldr	r5, [r4, #0]
 80182d2:	b11d      	cbz	r5, 80182dc <update_slot_durations+0x48>
 80182d4:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
 80182d6:	440e      	add	r6, r1
 80182d8:	1af6      	subs	r6, r6, r3
 80182da:	662e      	str	r6, [r5, #96]	@ 0x60
 80182dc:	3a01      	subs	r2, #1
 80182de:	f104 0404 	add.w	r4, r4, #4
 80182e2:	d1f5      	bne.n	80182d0 <update_slot_durations+0x3c>
 80182e4:	f100 010c 	add.w	r1, r0, #12
 80182e8:	220c      	movs	r2, #12
 80182ea:	f8cc e000 	str.w	lr, [ip]
 80182ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182f2:	f008 baa7 	b.w	8020844 <ble_memcpy>

080182f6 <events_count>:
 80182f6:	f646 6018 	movw	r0, #28184	@ 0x6e18
 80182fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80182fe:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8018302:	4770      	bx	lr

08018304 <events_when_idle_count>:
 8018304:	f646 6018 	movw	r0, #28184	@ 0x6e18
 8018308:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801830c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8018310:	4770      	bx	lr

08018312 <schdlr_nxt_cycle>:
 8018312:	b510      	push	{r4, lr}
 8018314:	4604      	mov	r4, r0
 8018316:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 8018318:	2101      	movs	r1, #1
 801831a:	fab0 f080 	clz	r0, r0
 801831e:	0940      	lsrs	r0, r0, #5
 8018320:	f003 fafd 	bl	801b91e <bsp_assert>
 8018324:	f894 0098 	ldrb.w	r0, [r4, #152]	@ 0x98
 8018328:	2101      	movs	r1, #1
 801832a:	3802      	subs	r0, #2
 801832c:	bf18      	it	ne
 801832e:	2001      	movne	r0, #1
 8018330:	f003 faf5 	bl	801b91e <bsp_assert>
 8018334:	2000      	movs	r0, #0
 8018336:	f884 008d 	strb.w	r0, [r4, #141]	@ 0x8d
 801833a:	4620      	mov	r0, r4
 801833c:	2101      	movs	r1, #1
 801833e:	f7ff f88b 	bl	8017458 <add_intrvl_to_evnt_time_stamp>
 8018342:	b100      	cbz	r0, 8018346 <schdlr_nxt_cycle+0x34>
 8018344:	bd10      	pop	{r4, pc}
 8018346:	4620      	mov	r0, r4
 8018348:	2100      	movs	r1, #0
 801834a:	f7fe ff49 	bl	80171e0 <schedule_event>
 801834e:	f646 6018 	movw	r0, #28184	@ 0x6e18
 8018352:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018356:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 801835a:	2800      	cmp	r0, #0
 801835c:	d0f2      	beq.n	8018344 <schdlr_nxt_cycle+0x32>
 801835e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018362:	f7fe bbe3 	b.w	8016b2c <recheck_conflicting>

08018366 <updt_conn_evnt_durn>:
 8018366:	f240 12bc 	movw	r2, #444	@ 0x1bc
 801836a:	f646 4378 	movw	r3, #27768	@ 0x6c78
 801836e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8018372:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8018376:	f8d2 c000 	ldr.w	ip, [r2]
 801837a:	689b      	ldr	r3, [r3, #8]
 801837c:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8018380:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8018384:	449c      	add	ip, r3
 8018386:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 801838a:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 801838e:	fba1 1303 	umull	r1, r3, r1, r3
 8018392:	f890 209e 	ldrb.w	r2, [r0, #158]	@ 0x9e
 8018396:	2107      	movs	r1, #7
 8018398:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801839c:	2a00      	cmp	r2, #0
 801839e:	bf08      	it	eq
 80183a0:	eb0c 01d3 	addeq.w	r1, ip, r3, lsr #3
 80183a4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80183a6:	4291      	cmp	r1, r2
 80183a8:	bf88      	it	hi
 80183aa:	6601      	strhi	r1, [r0, #96]	@ 0x60
 80183ac:	4770      	bx	lr
	...

080183b0 <calculate_max_pkts_to_send>:
 80183b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183b4:	2101      	movs	r1, #1
 80183b6:	4605      	mov	r5, r0
 80183b8:	2800      	cmp	r0, #0
 80183ba:	bf18      	it	ne
 80183bc:	2001      	movne	r0, #1
 80183be:	f003 faae 	bl	801b91e <bsp_assert>
 80183c2:	f646 6018 	movw	r0, #28184	@ 0x6e18
 80183c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80183ca:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80183ce:	f8d5 8074 	ldr.w	r8, [r5, #116]	@ 0x74
 80183d2:	2801      	cmp	r0, #1
 80183d4:	d106      	bne.n	80183e4 <calculate_max_pkts_to_send+0x34>
 80183d6:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 80183da:	f240 41e2 	movw	r1, #1250	@ 0x4e2
 80183de:	fb00 f601 	mul.w	r6, r0, r1
 80183e2:	e011      	b.n	8018408 <calculate_max_pkts_to_send+0x58>
 80183e4:	f646 403c 	movw	r0, #27708	@ 0x6c3c
 80183e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80183ec:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 80183f0:	b108      	cbz	r0, 80183f6 <calculate_max_pkts_to_send+0x46>
 80183f2:	2001      	movs	r0, #1
 80183f4:	e07d      	b.n	80184f2 <calculate_max_pkts_to_send+0x142>
 80183f6:	6fa8      	ldr	r0, [r5, #120]	@ 0x78
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d0fa      	beq.n	80183f2 <calculate_max_pkts_to_send+0x42>
 80183fc:	3050      	adds	r0, #80	@ 0x50
 80183fe:	f105 0150 	add.w	r1, r5, #80	@ 0x50
 8018402:	f004 ffea 	bl	801d3da <ble_time_ordered_diff_us>
 8018406:	4606      	mov	r6, r0
 8018408:	f895 009e 	ldrb.w	r0, [r5, #158]	@ 0x9e
 801840c:	b1a0      	cbz	r0, 8018438 <calculate_max_pkts_to_send+0x88>
 801840e:	2000      	movs	r0, #0
 8018410:	2101      	movs	r1, #1
 8018412:	2eda      	cmp	r6, #218	@ 0xda
 8018414:	bf88      	it	hi
 8018416:	2001      	movhi	r0, #1
 8018418:	f003 fa81 	bl	801b91e <bsp_assert>
 801841c:	f240 10bc 	movw	r0, #444	@ 0x1bc
 8018420:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018424:	6801      	ldr	r1, [r0, #0]
 8018426:	f646 4078 	movw	r0, #27768	@ 0x6c78
 801842a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801842e:	6882      	ldr	r2, [r0, #8]
 8018430:	f1a6 00da 	sub.w	r0, r6, #218	@ 0xda
 8018434:	4411      	add	r1, r2
 8018436:	e01d      	b.n	8018474 <calculate_max_pkts_to_send+0xc4>
 8018438:	f240 14bc 	movw	r4, #444	@ 0x1bc
 801843c:	f646 4778 	movw	r7, #27768	@ 0x6c78
 8018440:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8018444:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8018448:	6820      	ldr	r0, [r4, #0]
 801844a:	68b9      	ldr	r1, [r7, #8]
 801844c:	4408      	add	r0, r1
 801844e:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 8018452:	eb01 0190 	add.w	r1, r1, r0, lsr #2
 8018456:	2000      	movs	r0, #0
 8018458:	428e      	cmp	r6, r1
 801845a:	bf88      	it	hi
 801845c:	2001      	movhi	r0, #1
 801845e:	2101      	movs	r1, #1
 8018460:	f003 fa5d 	bl	801b91e <bsp_assert>
 8018464:	6820      	ldr	r0, [r4, #0]
 8018466:	68b9      	ldr	r1, [r7, #8]
 8018468:	4401      	add	r1, r0
 801846a:	eba1 1041 	sub.w	r0, r1, r1, lsl #5
 801846e:	eba6 0291 	sub.w	r2, r6, r1, lsr #2
 8018472:	4410      	add	r0, r2
 8018474:	f8b8 201e 	ldrh.w	r2, [r8, #30]
 8018478:	f44f 771b 	mov.w	r7, #620	@ 0x26c
 801847c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8018480:	fb02 f207 	mul.w	r2, r2, r7
 8018484:	009b      	lsls	r3, r3, #2
 8018486:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
 8018488:	eb02 0793 	add.w	r7, r2, r3, lsr #2
 801848c:	1a71      	subs	r1, r6, r1
 801848e:	4287      	cmp	r7, r0
 8018490:	bf28      	it	cs
 8018492:	4607      	movcs	r7, r0
 8018494:	f105 090c 	add.w	r9, r5, #12
 8018498:	428b      	cmp	r3, r1
 801849a:	bf98      	it	ls
 801849c:	4607      	movls	r7, r0
 801849e:	4648      	mov	r0, r9
 80184a0:	f7f6 ffff 	bl	800f4a2 <packet_get_frst_pkt>
 80184a4:	f240 1ac0 	movw	sl, #448	@ 0x1c0
 80184a8:	4606      	mov	r6, r0
 80184aa:	2400      	movs	r4, #0
 80184ac:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 80184b0:	2500      	movs	r5, #0
 80184b2:	bf00      	nop
 80184b4:	2e00      	cmp	r6, #0
 80184b6:	bf08      	it	eq
 80184b8:	4656      	moveq	r6, sl
 80184ba:	89b0      	ldrh	r0, [r6, #12]
 80184bc:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	@ 0xa8
 80184c0:	3804      	subs	r0, #4
 80184c2:	b281      	uxth	r1, r0
 80184c4:	4640      	mov	r0, r8
 80184c6:	f7f6 ff10 	bl	800f2ea <evnt_utils_calc_conn_tx_rx_durn_per_pkt>
 80184ca:	4428      	add	r0, r5
 80184cc:	3096      	adds	r0, #150	@ 0x96
 80184ce:	42b8      	cmp	r0, r7
 80184d0:	d80b      	bhi.n	80184ea <calculate_max_pkts_to_send+0x13a>
 80184d2:	4649      	mov	r1, r9
 80184d4:	4556      	cmp	r6, sl
 80184d6:	bf18      	it	ne
 80184d8:	1d31      	addne	r1, r6, #4
 80184da:	680e      	ldr	r6, [r1, #0]
 80184dc:	3c01      	subs	r4, #1
 80184de:	1de1      	adds	r1, r4, #7
 80184e0:	f100 0596 	add.w	r5, r0, #150	@ 0x96
 80184e4:	d1e6      	bne.n	80184b4 <calculate_max_pkts_to_send+0x104>
 80184e6:	2007      	movs	r0, #7
 80184e8:	e003      	b.n	80184f2 <calculate_max_pkts_to_send+0x142>
 80184ea:	4260      	negs	r0, r4
 80184ec:	2c00      	cmp	r4, #0
 80184ee:	bf08      	it	eq
 80184f0:	2001      	moveq	r0, #1
 80184f2:	b2c0      	uxtb	r0, r0
 80184f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080184f8 <chk_when_idle_evnt_priority>:
 80184f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184fc:	b081      	sub	sp, #4
 80184fe:	4688      	mov	r8, r1
 8018500:	4683      	mov	fp, r0
 8018502:	f7fd f8b1 	bl	8015668 <llhwc_get_num_of_prdc_clbr_chnls>
 8018506:	f1bb 0f00 	cmp.w	fp, #0
 801850a:	d055      	beq.n	80185b8 <chk_when_idle_evnt_priority+0xc0>
 801850c:	4604      	mov	r4, r0
 801850e:	f646 6018 	movw	r0, #28184	@ 0x6e18
 8018512:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018516:	6806      	ldr	r6, [r0, #0]
 8018518:	4668      	mov	r0, sp
 801851a:	f005 ffd6 	bl	801e4ca <llhwc_slptmr_get>
 801851e:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 8018522:	2700      	movs	r7, #0
 8018524:	2801      	cmp	r0, #1
 8018526:	d149      	bne.n	80185bc <chk_when_idle_evnt_priority+0xc4>
 8018528:	f89b 0047 	ldrb.w	r0, [fp, #71]	@ 0x47
 801852c:	2101      	movs	r1, #1
 801852e:	4284      	cmp	r4, r0
 8018530:	bf28      	it	cs
 8018532:	2701      	movcs	r7, #1
 8018534:	4638      	mov	r0, r7
 8018536:	f003 f9f2 	bl	801b91e <bsp_assert>
 801853a:	f247 35a8 	movw	r5, #29608	@ 0x73a8
 801853e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8018542:	78a8      	ldrb	r0, [r5, #2]
 8018544:	f89b 9047 	ldrb.w	r9, [fp, #71]	@ 0x47
 8018548:	2801      	cmp	r0, #1
 801854a:	bf04      	itt	eq
 801854c:	78e8      	ldrbeq	r0, [r5, #3]
 801854e:	ea5f 70c0 	movseq.w	r0, r0, lsl #31
 8018552:	d031      	beq.n	80185b8 <chk_when_idle_evnt_priority+0xc0>
 8018554:	9900      	ldr	r1, [sp, #0]
 8018556:	f10b 0750 	add.w	r7, fp, #80	@ 0x50
 801855a:	4638      	mov	r0, r7
 801855c:	f005 f862 	bl	801d624 <ble_time_cmp_raw_reading>
 8018560:	2800      	cmp	r0, #0
 8018562:	d429      	bmi.n	80185b8 <chk_when_idle_evnt_priority+0xc0>
 8018564:	78a8      	ldrb	r0, [r5, #2]
 8018566:	2801      	cmp	r0, #1
 8018568:	d109      	bne.n	801857e <chk_when_idle_evnt_priority+0x86>
 801856a:	6838      	ldr	r0, [r7, #0]
 801856c:	b938      	cbnz	r0, 801857e <chk_when_idle_evnt_priority+0x86>
 801856e:	9800      	ldr	r0, [sp, #0]
 8018570:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8018574:	6038      	str	r0, [r7, #0]
 8018576:	4638      	mov	r0, r7
 8018578:	2205      	movs	r2, #5
 801857a:	f005 f815 	bl	801d5a8 <ble_time_rmv_uint>
 801857e:	9800      	ldr	r0, [sp, #0]
 8018580:	6839      	ldr	r1, [r7, #0]
 8018582:	eba4 0409 	sub.w	r4, r4, r9
 8018586:	4288      	cmp	r0, r1
 8018588:	d91b      	bls.n	80185c2 <chk_when_idle_evnt_priority+0xca>
 801858a:	f005 f870 	bl	801d66e <ble_time_overflow_diff>
 801858e:	f644 51d3 	movw	r1, #19923	@ 0x4dd3
 8018592:	f2c1 0162 	movt	r1, #4194	@ 0x1062
 8018596:	fba0 0101 	umull	r0, r1, r0, r1
 801859a:	f3c1 2087 	ubfx	r0, r1, #10, #8
 801859e:	f1c0 090d 	rsb	r9, r0, #13
 80185a2:	f1b9 0f03 	cmp.w	r9, #3
 80185a6:	bfd8      	it	le
 80185a8:	f04f 0903 	movle.w	r9, #3
 80185ac:	280a      	cmp	r0, #10
 80185ae:	bf24      	itt	cs
 80185b0:	2001      	movcs	r0, #1
 80185b2:	f88b 0045 	strbcs.w	r0, [fp, #69]	@ 0x45
 80185b6:	e006      	b.n	80185c6 <chk_when_idle_evnt_priority+0xce>
 80185b8:	2400      	movs	r4, #0
 80185ba:	e08a      	b.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 80185bc:	f04f 090d 	mov.w	r9, #13
 80185c0:	e022      	b.n	8018608 <chk_when_idle_evnt_priority+0x110>
 80185c2:	f04f 090d 	mov.w	r9, #13
 80185c6:	f89b 0048 	ldrb.w	r0, [fp, #72]	@ 0x48
 80185ca:	213c      	movs	r1, #60	@ 0x3c
 80185cc:	2801      	cmp	r0, #1
 80185ce:	bf08      	it	eq
 80185d0:	2138      	moveq	r1, #56	@ 0x38
 80185d2:	f85b 0001 	ldr.w	r0, [fp, r1]
 80185d6:	f8db 1034 	ldr.w	r1, [fp, #52]	@ 0x34
 80185da:	b2e2      	uxtb	r2, r4
 80185dc:	fb01 0002 	mla	r0, r1, r2, r0
 80185e0:	217d      	movs	r1, #125	@ 0x7d
 80185e2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80185e6:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 80185ea:	f240 11bc 	movw	r1, #444	@ 0x1bc
 80185ee:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 80185f2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80185f6:	fba0 0202 	umull	r0, r2, r0, r2
 80185fa:	6809      	ldr	r1, [r1, #0]
 80185fc:	9800      	ldr	r0, [sp, #0]
 80185fe:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
 8018602:	bf38      	it	cc
 8018604:	08d1      	lsrcc	r1, r2, #3
 8018606:	180f      	adds	r7, r1, r0
 8018608:	b1e6      	cbz	r6, 8018644 <chk_when_idle_evnt_priority+0x14c>
 801860a:	f240 14bc 	movw	r4, #444	@ 0x1bc
 801860e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8018612:	fa5f f589 	uxtb.w	r5, r9
 8018616:	bf00      	nop
 8018618:	6d30      	ldr	r0, [r6, #80]	@ 0x50
 801861a:	6821      	ldr	r1, [r4, #0]
 801861c:	1a40      	subs	r0, r0, r1
 801861e:	42b8      	cmp	r0, r7
 8018620:	d219      	bcs.n	8018656 <chk_when_idle_evnt_priority+0x15e>
 8018622:	4630      	mov	r0, r6
 8018624:	f7fe f990 	bl	8016948 <get_priority>
 8018628:	42a8      	cmp	r0, r5
 801862a:	d310      	bcc.n	801864e <chk_when_idle_evnt_priority+0x156>
 801862c:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 8018630:	2801      	cmp	r0, #1
 8018632:	d104      	bne.n	801863e <chk_when_idle_evnt_priority+0x146>
 8018634:	f896 0092 	ldrb.w	r0, [r6, #146]	@ 0x92
 8018638:	f010 0f1e 	tst.w	r0, #30
 801863c:	d107      	bne.n	801864e <chk_when_idle_evnt_priority+0x156>
 801863e:	6fb6      	ldr	r6, [r6, #120]	@ 0x78
 8018640:	2e00      	cmp	r6, #0
 8018642:	d1e9      	bne.n	8018618 <chk_when_idle_evnt_priority+0x120>
 8018644:	f04f 0a01 	mov.w	sl, #1
 8018648:	2600      	movs	r6, #0
 801864a:	2401      	movs	r4, #1
 801864c:	e006      	b.n	801865c <chk_when_idle_evnt_priority+0x164>
 801864e:	f04f 0a00 	mov.w	sl, #0
 8018652:	2400      	movs	r4, #0
 8018654:	e002      	b.n	801865c <chk_when_idle_evnt_priority+0x164>
 8018656:	2401      	movs	r4, #1
 8018658:	f04f 0a00 	mov.w	sl, #0
 801865c:	f89b 0046 	ldrb.w	r0, [fp, #70]	@ 0x46
 8018660:	2801      	cmp	r0, #1
 8018662:	d136      	bne.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 8018664:	4640      	mov	r0, r8
 8018666:	2101      	movs	r1, #1
 8018668:	f1b8 0f00 	cmp.w	r8, #0
 801866c:	bf18      	it	ne
 801866e:	2001      	movne	r0, #1
 8018670:	f003 f955 	bl	801b91e <bsp_assert>
 8018674:	b124      	cbz	r4, 8018680 <chk_when_idle_evnt_priority+0x188>
 8018676:	9800      	ldr	r0, [sp, #0]
 8018678:	1a38      	subs	r0, r7, r0
 801867a:	f8c8 0000 	str.w	r0, [r8]
 801867e:	e028      	b.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 8018680:	f1ba 0f00 	cmp.w	sl, #0
 8018684:	d125      	bne.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 8018686:	f240 15bc 	movw	r5, #444	@ 0x1bc
 801868a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801868e:	9800      	ldr	r0, [sp, #0]
 8018690:	6829      	ldr	r1, [r5, #0]
 8018692:	3650      	adds	r6, #80	@ 0x50
 8018694:	4401      	add	r1, r0
 8018696:	4630      	mov	r0, r6
 8018698:	f004 ffc4 	bl	801d624 <ble_time_cmp_raw_reading>
 801869c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80186a0:	dc17      	bgt.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 80186a2:	f1b9 0f0a 	cmp.w	r9, #10
 80186a6:	d814      	bhi.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 80186a8:	9800      	ldr	r0, [sp, #0]
 80186aa:	6829      	ldr	r1, [r5, #0]
 80186ac:	6832      	ldr	r2, [r6, #0]
 80186ae:	4408      	add	r0, r1
 80186b0:	f8db 1038 	ldr.w	r1, [fp, #56]	@ 0x38
 80186b4:	237d      	movs	r3, #125	@ 0x7d
 80186b6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80186ba:	1a10      	subs	r0, r2, r0
 80186bc:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 80186c0:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 80186c4:	fba1 1202 	umull	r1, r2, r1, r2
 80186c8:	ebb0 0fd2 	cmp.w	r0, r2, lsr #3
 80186cc:	d901      	bls.n	80186d2 <chk_when_idle_evnt_priority+0x1da>
 80186ce:	2401      	movs	r4, #1
 80186d0:	e7d3      	b.n	801867a <chk_when_idle_evnt_priority+0x182>
 80186d2:	4620      	mov	r0, r4
 80186d4:	b001      	add	sp, #4
 80186d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080186dc <resume_scan>:
 80186dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e0:	b087      	sub	sp, #28
 80186e2:	f646 6a18 	movw	sl, #28184	@ 0x6e18
 80186e6:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 80186ea:	f8da b000 	ldr.w	fp, [sl]
 80186ee:	4681      	mov	r9, r0
 80186f0:	2001      	movs	r0, #1
 80186f2:	f1bb 0f00 	cmp.w	fp, #0
 80186f6:	9001      	str	r0, [sp, #4]
 80186f8:	d008      	beq.n	801870c <resume_scan+0x30>
 80186fa:	465c      	mov	r4, fp
 80186fc:	f894 0090 	ldrb.w	r0, [r4, #144]	@ 0x90
 8018700:	f010 0f70 	tst.w	r0, #112	@ 0x70
 8018704:	d104      	bne.n	8018710 <resume_scan+0x34>
 8018706:	6fa4      	ldr	r4, [r4, #120]	@ 0x78
 8018708:	2c00      	cmp	r4, #0
 801870a:	d1f7      	bne.n	80186fc <resume_scan+0x20>
 801870c:	201f      	movs	r0, #31
 801870e:	e0d4      	b.n	80188ba <resume_scan+0x1de>
 8018710:	a801      	add	r0, sp, #4
 8018712:	9100      	str	r1, [sp, #0]
 8018714:	f005 fed9 	bl	801e4ca <llhwc_slptmr_get>
 8018718:	4627      	mov	r7, r4
 801871a:	f857 0f50 	ldr.w	r0, [r7, #80]!
 801871e:	f240 16bc 	movw	r6, #444	@ 0x1bc
 8018722:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8018726:	6831      	ldr	r1, [r6, #0]
 8018728:	687a      	ldr	r2, [r7, #4]
 801872a:	ad04      	add	r5, sp, #16
 801872c:	9004      	str	r0, [sp, #16]
 801872e:	9205      	str	r2, [sp, #20]
 8018730:	4628      	mov	r0, r5
 8018732:	2205      	movs	r2, #5
 8018734:	f004 ff38 	bl	801d5a8 <ble_time_rmv_uint>
 8018738:	9901      	ldr	r1, [sp, #4]
 801873a:	4628      	mov	r0, r5
 801873c:	f004 ff72 	bl	801d624 <ble_time_cmp_raw_reading>
 8018740:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018744:	dd47      	ble.n	80187d6 <resume_scan+0xfa>
 8018746:	68a0      	ldr	r0, [r4, #8]
 8018748:	f646 4578 	movw	r5, #27768	@ 0x6c78
 801874c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8018750:	2800      	cmp	r0, #0
 8018752:	bf1a      	itte	ne
 8018754:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
 8018758:	0080      	lslne	r0, r0, #2
 801875a:	6e20      	ldreq	r0, [r4, #96]	@ 0x60
 801875c:	6831      	ldr	r1, [r6, #0]
 801875e:	68aa      	ldr	r2, [r5, #8]
 8018760:	e9d4 3714 	ldrd	r3, r7, [r4, #80]	@ 0x50
 8018764:	4411      	add	r1, r2
 8018766:	1a41      	subs	r1, r0, r1
 8018768:	a802      	add	r0, sp, #8
 801876a:	2205      	movs	r2, #5
 801876c:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8018770:	f004 fe78 	bl	801d464 <ble_time_add_uint>
 8018774:	f8da 0000 	ldr.w	r0, [sl]
 8018778:	4284      	cmp	r4, r0
 801877a:	d023      	beq.n	80187c4 <resume_scan+0xe8>
 801877c:	4602      	mov	r2, r0
 801877e:	bf00      	nop
 8018780:	b13a      	cbz	r2, 8018792 <resume_scan+0xb6>
 8018782:	4611      	mov	r1, r2
 8018784:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018786:	42a2      	cmp	r2, r4
 8018788:	d1fa      	bne.n	8018780 <resume_scan+0xa4>
 801878a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801878c:	678a      	str	r2, [r1, #120]	@ 0x78
 801878e:	2100      	movs	r1, #0
 8018790:	67a1      	str	r1, [r4, #120]	@ 0x78
 8018792:	67a0      	str	r0, [r4, #120]	@ 0x78
 8018794:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	@ 0x50
 8018798:	68aa      	ldr	r2, [r5, #8]
 801879a:	ad04      	add	r5, sp, #16
 801879c:	9004      	str	r0, [sp, #16]
 801879e:	9105      	str	r1, [sp, #20]
 80187a0:	6831      	ldr	r1, [r6, #0]
 80187a2:	4628      	mov	r0, r5
 80187a4:	4411      	add	r1, r2
 80187a6:	2205      	movs	r2, #5
 80187a8:	f8ca 4000 	str.w	r4, [sl]
 80187ac:	f004 fefc 	bl	801d5a8 <ble_time_rmv_uint>
 80187b0:	a802      	add	r0, sp, #8
 80187b2:	4629      	mov	r1, r5
 80187b4:	f004 fdb4 	bl	801d320 <ble_time_comp>
 80187b8:	2801      	cmp	r0, #1
 80187ba:	bfa4      	itt	ge
 80187bc:	e9dd 1004 	ldrdge	r1, r0, [sp, #16]
 80187c0:	e9cd 1002 	strdge	r1, r0, [sp, #8]
 80187c4:	9901      	ldr	r1, [sp, #4]
 80187c6:	a802      	add	r0, sp, #8
 80187c8:	f004 ff2c 	bl	801d624 <ble_time_cmp_raw_reading>
 80187cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80187d0:	dd3d      	ble.n	801884e <resume_scan+0x172>
 80187d2:	2500      	movs	r5, #0
 80187d4:	e040      	b.n	8018858 <resume_scan+0x17c>
 80187d6:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 80187da:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80187de:	ad04      	add	r5, sp, #16
 80187e0:	f8d8 0000 	ldr.w	r0, [r8]
 80187e4:	f04f 31ff 	mov.w	r1, #4294967295
 80187e8:	f003 f8fd 	bl	801b9e6 <os_rcrsv_mutex_wait>
 80187ec:	e9d4 1024 	ldrd	r1, r0, [r4, #144]	@ 0x90
 80187f0:	f081 0210 	eor.w	r2, r1, #16
 80187f4:	4302      	orrs	r2, r0
 80187f6:	bf1c      	itt	ne
 80187f8:	f081 0240 	eorne.w	r2, r1, #64	@ 0x40
 80187fc:	ea52 0200 	orrsne.w	r2, r2, r0
 8018800:	d120      	bne.n	8018844 <resume_scan+0x168>
 8018802:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8018804:	2202      	movs	r2, #2
 8018806:	3008      	adds	r0, #8
 8018808:	8801      	ldrh	r1, [r0, #0]
 801880a:	4638      	mov	r0, r7
 801880c:	f004 fecc 	bl	801d5a8 <ble_time_rmv_uint>
 8018810:	f8b4 0088 	ldrh.w	r0, [r4, #136]	@ 0x88
 8018814:	3801      	subs	r0, #1
 8018816:	f8a4 0088 	strh.w	r0, [r4, #136]	@ 0x88
 801881a:	f8d8 0000 	ldr.w	r0, [r8]
 801881e:	f003 f8e8 	bl	801b9f2 <os_rcrsv_mutex_release>
 8018822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8018826:	2205      	movs	r2, #5
 8018828:	9004      	str	r0, [sp, #16]
 801882a:	4628      	mov	r0, r5
 801882c:	9105      	str	r1, [sp, #20]
 801882e:	6831      	ldr	r1, [r6, #0]
 8018830:	f004 feba 	bl	801d5a8 <ble_time_rmv_uint>
 8018834:	9901      	ldr	r1, [sp, #4]
 8018836:	4628      	mov	r0, r5
 8018838:	f004 fef4 	bl	801d624 <ble_time_cmp_raw_reading>
 801883c:	2800      	cmp	r0, #0
 801883e:	d4cf      	bmi.n	80187e0 <resume_scan+0x104>
 8018840:	e781      	b.n	8018746 <resume_scan+0x6a>
 8018842:	bf00      	nop
 8018844:	f081 0120 	eor.w	r1, r1, #32
 8018848:	4308      	orrs	r0, r1
 801884a:	d0da      	beq.n	8018802 <resume_scan+0x126>
 801884c:	e7e5      	b.n	801881a <resume_scan+0x13e>
 801884e:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8018852:	f004 ff0c 	bl	801d66e <ble_time_overflow_diff>
 8018856:	4605      	mov	r5, r0
 8018858:	9901      	ldr	r1, [sp, #4]
 801885a:	a802      	add	r0, sp, #8
 801885c:	f004 fee2 	bl	801d624 <ble_time_cmp_raw_reading>
 8018860:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018864:	dc09      	bgt.n	801887a <resume_scan+0x19e>
 8018866:	6830      	ldr	r0, [r6, #0]
 8018868:	3010      	adds	r0, #16
 801886a:	4285      	cmp	r5, r0
 801886c:	d905      	bls.n	801887a <resume_scan+0x19e>
 801886e:	9800      	ldr	r0, [sp, #0]
 8018870:	f8c9 4000 	str.w	r4, [r9]
 8018874:	6005      	str	r5, [r0, #0]
 8018876:	2000      	movs	r0, #0
 8018878:	e01f      	b.n	80188ba <resume_scan+0x1de>
 801887a:	f8da 1000 	ldr.w	r1, [sl]
 801887e:	42a1      	cmp	r1, r4
 8018880:	d00a      	beq.n	8018898 <resume_scan+0x1bc>
 8018882:	bf00      	nop
 8018884:	b179      	cbz	r1, 80188a6 <resume_scan+0x1ca>
 8018886:	4608      	mov	r0, r1
 8018888:	6f89      	ldr	r1, [r1, #120]	@ 0x78
 801888a:	42a1      	cmp	r1, r4
 801888c:	d1fa      	bne.n	8018884 <resume_scan+0x1a8>
 801888e:	4621      	mov	r1, r4
 8018890:	f851 2f78 	ldr.w	r2, [r1, #120]!
 8018894:	6782      	str	r2, [r0, #120]	@ 0x78
 8018896:	e004      	b.n	80188a2 <resume_scan+0x1c6>
 8018898:	4621      	mov	r1, r4
 801889a:	f851 0f78 	ldr.w	r0, [r1, #120]!
 801889e:	f8ca 0000 	str.w	r0, [sl]
 80188a2:	2000      	movs	r0, #0
 80188a4:	6008      	str	r0, [r1, #0]
 80188a6:	4620      	mov	r0, r4
 80188a8:	f7ff fd33 	bl	8018312 <schdlr_nxt_cycle>
 80188ac:	f8da 1000 	ldr.w	r1, [sl]
 80188b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80188b4:	458b      	cmp	fp, r1
 80188b6:	bf08      	it	eq
 80188b8:	203a      	moveq	r0, #58	@ 0x3a
 80188ba:	b007      	add	sp, #28
 80188bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080188c0 <updt_radio_period>:
 80188c0:	b5b0      	push	{r4, r5, r7, lr}
 80188c2:	f646 6218 	movw	r2, #28184	@ 0x6e18
 80188c6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80188ca:	6894      	ldr	r4, [r2, #8]
 80188cc:	4605      	mov	r5, r0
 80188ce:	b184      	cbz	r4, 80188f2 <updt_radio_period+0x32>
 80188d0:	2000      	movs	r0, #0
 80188d2:	4623      	mov	r3, r4
 80188d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80188d6:	3301      	adds	r3, #1
 80188d8:	d006      	beq.n	80188e8 <updt_radio_period+0x28>
 80188da:	3001      	adds	r0, #1
 80188dc:	b2c3      	uxtb	r3, r0
 80188de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80188e2:	689b      	ldr	r3, [r3, #8]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d1f5      	bne.n	80188d4 <updt_radio_period+0x14>
 80188e8:	b2c0      	uxtb	r0, r0
 80188ea:	2801      	cmp	r0, #1
 80188ec:	bf08      	it	eq
 80188ee:	42ac      	cmpeq	r4, r5
 80188f0:	d003      	beq.n	80188fa <updt_radio_period+0x3a>
 80188f2:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80188f4:	b108      	cbz	r0, 80188fa <updt_radio_period+0x3a>
 80188f6:	4288      	cmp	r0, r1
 80188f8:	d110      	bne.n	801891c <updt_radio_period+0x5c>
 80188fa:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80188fe:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8018900:	00c0      	lsls	r0, r0, #3
 8018902:	fbb3 f4f0 	udiv	r4, r3, r0
 8018906:	6351      	str	r1, [r2, #52]	@ 0x34
 8018908:	fb04 3010 	mls	r0, r4, r0, r3
 801890c:	6668      	str	r0, [r5, #100]	@ 0x64
 801890e:	2001      	movs	r0, #1
 8018910:	f8a5 008a 	strh.w	r0, [r5, #138]	@ 0x8a
 8018914:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8018918:	f7ff b85e 	b.w	80179d8 <sort_events_table>
 801891c:	4288      	cmp	r0, r1
 801891e:	d90d      	bls.n	801893c <updt_radio_period+0x7c>
 8018920:	fbb0 f3f1 	udiv	r3, r0, r1
 8018924:	fb03 f401 	mul.w	r4, r3, r1
 8018928:	42a0      	cmp	r0, r4
 801892a:	d107      	bne.n	801893c <updt_radio_period+0x7c>
 801892c:	b2d8      	uxtb	r0, r3
 801892e:	6351      	str	r1, [r2, #52]	@ 0x34
 8018930:	f7ff f878 	bl	8017a24 <update_slot_period>
 8018934:	2001      	movs	r0, #1
 8018936:	f8a5 008a 	strh.w	r0, [r5, #138]	@ 0x8a
 801893a:	bdb0      	pop	{r4, r5, r7, pc}
 801893c:	4288      	cmp	r0, r1
 801893e:	d212      	bcs.n	8018966 <updt_radio_period+0xa6>
 8018940:	fbb1 f2f0 	udiv	r2, r1, r0
 8018944:	fb02 f300 	mul.w	r3, r2, r0
 8018948:	428b      	cmp	r3, r1
 801894a:	d10c      	bne.n	8018966 <updt_radio_period+0xa6>
 801894c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018950:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8018952:	00c0      	lsls	r0, r0, #3
 8018954:	fbb1 f3f0 	udiv	r3, r1, r0
 8018958:	fb03 1010 	mls	r0, r3, r0, r1
 801895c:	b2d1      	uxtb	r1, r2
 801895e:	f8a5 108a 	strh.w	r1, [r5, #138]	@ 0x8a
 8018962:	6668      	str	r0, [r5, #100]	@ 0x64
 8018964:	e7d6      	b.n	8018914 <updt_radio_period+0x54>
 8018966:	2000      	movs	r0, #0
 8018968:	f8a5 008a 	strh.w	r0, [r5, #138]	@ 0x8a
 801896c:	f04f 30ff 	mov.w	r0, #4294967295
 8018970:	6668      	str	r0, [r5, #100]	@ 0x64
 8018972:	f7ff f831 	bl	80179d8 <sort_events_table>
 8018976:	f8b5 008a 	ldrh.w	r0, [r5, #138]	@ 0x8a
 801897a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801897e:	f7fe bf43 	b.w	8017808 <update_radio_period_after_rmv_evnt>

08018982 <conn_param_req>:
 8018982:	b5b0      	push	{r4, r5, r7, lr}
 8018984:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8018986:	4604      	mov	r4, r0
 8018988:	f8b5 007c 	ldrh.w	r0, [r5, #124]	@ 0x7c
 801898c:	f8b5 107e 	ldrh.w	r1, [r5, #126]	@ 0x7e
 8018990:	f105 028e 	add.w	r2, r5, #142	@ 0x8e
 8018994:	2320      	movs	r3, #32
 8018996:	f7fd feeb 	bl	8016770 <evnt_schdlr_choose_suitable_intrv>
 801899a:	f8b5 108e 	ldrh.w	r1, [r5, #142]	@ 0x8e
 801899e:	f8a5 107c 	strh.w	r1, [r5, #124]	@ 0x7c
 80189a2:	f8a5 107e 	strh.w	r1, [r5, #126]	@ 0x7e
 80189a6:	b910      	cbnz	r0, 80189ae <conn_param_req+0x2c>
 80189a8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80189aa:	3001      	adds	r0, #1
 80189ac:	d000      	beq.n	80189b0 <conn_param_req+0x2e>
 80189ae:	bdb0      	pop	{r4, r5, r7, pc}
 80189b0:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	@ 0x90
 80189b4:	f480 7080 	eor.w	r0, r0, #256	@ 0x100
 80189b8:	4308      	orrs	r0, r1
 80189ba:	d0f8      	beq.n	80189ae <conn_param_req+0x2c>
 80189bc:	f646 6018 	movw	r0, #28184	@ 0x6e18
 80189c0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80189c4:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80189c6:	2800      	cmp	r0, #0
 80189c8:	d0f1      	beq.n	80189ae <conn_param_req+0x2c>
 80189ca:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80189cc:	2100      	movs	r1, #0
 80189ce:	3028      	adds	r0, #40	@ 0x28
 80189d0:	f7fe f94e 	bl	8016c70 <get_slot_offset>
 80189d4:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80189d8:	4620      	mov	r0, r4
 80189da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80189de:	f000 b800 	b.w	80189e2 <calc_win_offset>

080189e2 <calc_win_offset>:
 80189e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189e4:	b081      	sub	sp, #4
 80189e6:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 80189e8:	460c      	mov	r4, r1
 80189ea:	f8b5 108c 	ldrh.w	r1, [r5, #140]	@ 0x8c
 80189ee:	f8b5 20da 	ldrh.w	r2, [r5, #218]	@ 0xda
 80189f2:	8aeb      	ldrh	r3, [r5, #22]
 80189f4:	1a89      	subs	r1, r1, r2
 80189f6:	fb03 f101 	mul.w	r1, r3, r1
 80189fa:	f646 6618 	movw	r6, #28184	@ 0x6e18
 80189fe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8018a00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018a04:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8018a08:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8018a0a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 8018a0e:	2101      	movs	r1, #1
 8018a10:	2800      	cmp	r0, #0
 8018a12:	bf18      	it	ne
 8018a14:	2001      	movne	r0, #1
 8018a16:	f002 ff82 	bl	801b91e <bsp_assert>
 8018a1a:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8018a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018a20:	00c1      	lsls	r1, r0, #3
 8018a22:	fbb7 f2f1 	udiv	r2, r7, r1
 8018a26:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8018a2a:	fb02 f201 	mul.w	r2, r2, r1
 8018a2e:	1bd2      	subs	r2, r2, r7
 8018a30:	4410      	add	r0, r2
 8018a32:	fbb0 f2f1 	udiv	r2, r0, r1
 8018a36:	fb02 0011 	mls	r0, r2, r1, r0
 8018a3a:	f64c 41cd 	movw	r1, #52429	@ 0xcccd
 8018a3e:	f6cc 41cc 	movt	r1, #52428	@ 0xcccc
 8018a42:	fba0 0101 	umull	r0, r1, r0, r1
 8018a46:	0948      	lsrs	r0, r1, #5
 8018a48:	f8a5 0088 	strh.w	r0, [r5, #136]	@ 0x88
 8018a4c:	b001      	add	sp, #4
 8018a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018a50 <set_evnt_start_time>:
 8018a50:	b570      	push	{r4, r5, r6, lr}
 8018a52:	b082      	sub	sp, #8
 8018a54:	f646 6118 	movw	r1, #28184	@ 0x6e18
 8018a58:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018a5c:	4604      	mov	r4, r0
 8018a5e:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8018a60:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8018a64:	2330      	movs	r3, #48	@ 0x30
 8018a66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8018a6a:	f6c0 0300 	movt	r3, #2048	@ 0x800
 8018a6e:	421a      	tst	r2, r3
 8018a70:	f04f 0600 	mov.w	r6, #0
 8018a74:	d006      	beq.n	8018a84 <set_evnt_start_time+0x34>
 8018a76:	6889      	ldr	r1, [r1, #8]
 8018a78:	b921      	cbnz	r1, 8018a84 <set_evnt_start_time+0x34>
 8018a7a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8018a7c:	f1b1 36ff 	subs.w	r6, r1, #4294967295
 8018a80:	bf18      	it	ne
 8018a82:	2601      	movne	r6, #1
 8018a84:	00c5      	lsls	r5, r0, #3
 8018a86:	a801      	add	r0, sp, #4
 8018a88:	f005 fd1f 	bl	801e4ca <llhwc_slptmr_get>
 8018a8c:	9901      	ldr	r1, [sp, #4]
 8018a8e:	b99e      	cbnz	r6, 8018ab8 <set_evnt_start_time+0x68>
 8018a90:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8018a92:	1c42      	adds	r2, r0, #1
 8018a94:	d010      	beq.n	8018ab8 <set_evnt_start_time+0x68>
 8018a96:	f240 13bc 	movw	r3, #444	@ 0x1bc
 8018a9a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8018a9e:	fbb1 f2f5 	udiv	r2, r1, r5
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	fb02 0005 	mla	r0, r2, r5, r0
 8018aa8:	4419      	add	r1, r3
 8018aaa:	3105      	adds	r1, #5
 8018aac:	4281      	cmp	r1, r0
 8018aae:	6520      	str	r0, [r4, #80]	@ 0x50
 8018ab0:	bf84      	itt	hi
 8018ab2:	4428      	addhi	r0, r5
 8018ab4:	6520      	strhi	r0, [r4, #80]	@ 0x50
 8018ab6:	e012      	b.n	8018ade <set_evnt_start_time+0x8e>
 8018ab8:	f240 12bc 	movw	r2, #444	@ 0x1bc
 8018abc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	6812      	ldr	r2, [r2, #0]
 8018ac4:	f840 1f50 	str.w	r1, [r0, #80]!
 8018ac8:	1d51      	adds	r1, r2, #5
 8018aca:	2205      	movs	r2, #5
 8018acc:	f004 fcca 	bl	801d464 <ble_time_add_uint>
 8018ad0:	b12e      	cbz	r6, 8018ade <set_evnt_start_time+0x8e>
 8018ad2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8018ad4:	fbb0 f1f5 	udiv	r1, r0, r5
 8018ad8:	fb01 0015 	mls	r0, r1, r5, r0
 8018adc:	6660      	str	r0, [r4, #100]	@ 0x64
 8018ade:	2000      	movs	r0, #0
 8018ae0:	f8a4 0054 	strh.w	r0, [r4, #84]	@ 0x54
 8018ae4:	b002      	add	sp, #8
 8018ae6:	bd70      	pop	{r4, r5, r6, pc}

08018ae8 <non_conn_mngr_reset>:
 8018ae8:	b570      	push	{r4, r5, r6, lr}
 8018aea:	f646 6558 	movw	r5, #28248	@ 0x6e58
 8018aee:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8018af2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8018af4:	b118      	cbz	r0, 8018afe <non_conn_mngr_reset+0x16>
 8018af6:	f7f5 fccb 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8018afa:	2000      	movs	r0, #0
 8018afc:	6268      	str	r0, [r5, #36]	@ 0x24
 8018afe:	6928      	ldr	r0, [r5, #16]
 8018b00:	b120      	cbz	r0, 8018b0c <non_conn_mngr_reset+0x24>
 8018b02:	3804      	subs	r0, #4
 8018b04:	f004 ffda 	bl	801dabc <os_mem_pool_free>
 8018b08:	2000      	movs	r0, #0
 8018b0a:	6128      	str	r0, [r5, #16]
 8018b0c:	4628      	mov	r0, r5
 8018b0e:	2100      	movs	r1, #0
 8018b10:	2260      	movs	r2, #96	@ 0x60
 8018b12:	2600      	movs	r6, #0
 8018b14:	f007 fee6 	bl	80208e4 <ble_memset>
 8018b18:	20ff      	movs	r0, #255	@ 0xff
 8018b1a:	f646 64b8 	movw	r4, #28344	@ 0x6eb8
 8018b1e:	7328      	strb	r0, [r5, #12]
 8018b20:	2001      	movs	r0, #1
 8018b22:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8018b26:	f885 0029 	strb.w	r0, [r5, #41]	@ 0x29
 8018b2a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8018b2c:	f04f 1110 	mov.w	r1, #1048592	@ 0x100010
 8018b30:	60a9      	str	r1, [r5, #8]
 8018b32:	b110      	cbz	r0, 8018b3a <non_conn_mngr_reset+0x52>
 8018b34:	f7f5 fcac 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8018b38:	62e6      	str	r6, [r4, #44]	@ 0x2c
 8018b3a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018b3c:	b110      	cbz	r0, 8018b44 <non_conn_mngr_reset+0x5c>
 8018b3e:	3804      	subs	r0, #4
 8018b40:	f004 ffbc 	bl	801dabc <os_mem_pool_free>
 8018b44:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8018b46:	b110      	cbz	r0, 8018b4e <non_conn_mngr_reset+0x66>
 8018b48:	3804      	subs	r0, #4
 8018b4a:	f004 ffb7 	bl	801dabc <os_mem_pool_free>
 8018b4e:	4620      	mov	r0, r4
 8018b50:	2100      	movs	r1, #0
 8018b52:	2260      	movs	r2, #96	@ 0x60
 8018b54:	2600      	movs	r6, #0
 8018b56:	f007 fec5 	bl	80208e4 <ble_memset>
 8018b5a:	2001      	movs	r0, #1
 8018b5c:	f646 7518 	movw	r5, #28440	@ 0x6f18
 8018b60:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8018b64:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8018b68:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8018b6c:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8018b70:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018b72:	2107      	movs	r1, #7
 8018b74:	7621      	strb	r1, [r4, #24]
 8018b76:	b110      	cbz	r0, 8018b7e <non_conn_mngr_reset+0x96>
 8018b78:	f7f5 fc8a 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8018b7c:	632e      	str	r6, [r5, #48]	@ 0x30
 8018b7e:	69a8      	ldr	r0, [r5, #24]
 8018b80:	b110      	cbz	r0, 8018b88 <non_conn_mngr_reset+0xa0>
 8018b82:	3804      	subs	r0, #4
 8018b84:	f004 ff9a 	bl	801dabc <os_mem_pool_free>
 8018b88:	4628      	mov	r0, r5
 8018b8a:	2100      	movs	r1, #0
 8018b8c:	224c      	movs	r2, #76	@ 0x4c
 8018b8e:	f007 fea9 	bl	80208e4 <ble_memset>
 8018b92:	2001      	movs	r0, #1
 8018b94:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
 8018b98:	bd70      	pop	{r4, r5, r6, pc}

08018b9a <non_conn_mngr_add_rmv_clr_device_white_list>:
 8018b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b9c:	b083      	sub	sp, #12
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	4615      	mov	r5, r2
 8018ba2:	460e      	mov	r6, r1
 8018ba4:	2000      	movs	r0, #0
 8018ba6:	9002      	str	r0, [sp, #8]
 8018ba8:	b91c      	cbnz	r4, 8018bb2 <non_conn_mngr_add_rmv_clr_device_white_list+0x18>
 8018baa:	2d02      	cmp	r5, #2
 8018bac:	d001      	beq.n	8018bb2 <non_conn_mngr_add_rmv_clr_device_white_list+0x18>
 8018bae:	2711      	movs	r7, #17
 8018bb0:	e065      	b.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018bb2:	f646 6058 	movw	r0, #28248	@ 0x6e58
 8018bb6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018bba:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
 8018bbe:	b911      	cbnz	r1, 8018bc6 <non_conn_mngr_add_rmv_clr_device_white_list+0x2c>
 8018bc0:	7bc0      	ldrb	r0, [r0, #15]
 8018bc2:	2801      	cmp	r0, #1
 8018bc4:	d057      	beq.n	8018c76 <non_conn_mngr_add_rmv_clr_device_white_list+0xdc>
 8018bc6:	f646 60b8 	movw	r0, #28344	@ 0x6eb8
 8018bca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018bce:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8018bd2:	2900      	cmp	r1, #0
 8018bd4:	d03e      	beq.n	8018c54 <non_conn_mngr_add_rmv_clr_device_white_list+0xba>
 8018bd6:	f646 7018 	movw	r0, #28440	@ 0x6f18
 8018bda:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018bde:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 8018be2:	b911      	cbnz	r1, 8018bea <non_conn_mngr_add_rmv_clr_device_white_list+0x50>
 8018be4:	7d40      	ldrb	r0, [r0, #21]
 8018be6:	2801      	cmp	r0, #1
 8018be8:	d045      	beq.n	8018c76 <non_conn_mngr_add_rmv_clr_device_white_list+0xdc>
 8018bea:	2d02      	cmp	r5, #2
 8018bec:	d04a      	beq.n	8018c84 <non_conn_mngr_add_rmv_clr_device_white_list+0xea>
 8018bee:	2d01      	cmp	r5, #1
 8018bf0:	d00e      	beq.n	8018c10 <non_conn_mngr_add_rmv_clr_device_white_list+0x76>
 8018bf2:	2d00      	cmp	r5, #0
 8018bf4:	d13f      	bne.n	8018c76 <non_conn_mngr_add_rmv_clr_device_white_list+0xdc>
 8018bf6:	f10d 0306 	add.w	r3, sp, #6
 8018bfa:	2000      	movs	r0, #0
 8018bfc:	4631      	mov	r1, r6
 8018bfe:	4622      	mov	r2, r4
 8018c00:	f7fa ffdf 	bl	8013bc2 <llhwc_lst_search>
 8018c04:	4607      	mov	r7, r0
 8018c06:	bbd0      	cbnz	r0, 8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018c08:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8018c0c:	07c0      	lsls	r0, r0, #31
 8018c0e:	d01f      	beq.n	8018c50 <non_conn_mngr_add_rmv_clr_device_white_list+0xb6>
 8018c10:	2700      	movs	r7, #0
 8018c12:	4628      	mov	r0, r5
 8018c14:	2100      	movs	r1, #0
 8018c16:	4632      	mov	r2, r6
 8018c18:	4623      	mov	r3, r4
 8018c1a:	9700      	str	r7, [sp, #0]
 8018c1c:	f7fb f874 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 8018c20:	2e01      	cmp	r6, #1
 8018c22:	4607      	mov	r7, r0
 8018c24:	bf08      	it	eq
 8018c26:	2f00      	cmpeq	r7, #0
 8018c28:	d129      	bne.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018c2a:	7960      	ldrb	r0, [r4, #5]
 8018c2c:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8018c30:	2840      	cmp	r0, #64	@ 0x40
 8018c32:	d10d      	bne.n	8018c50 <non_conn_mngr_add_rmv_clr_device_white_list+0xb6>
 8018c34:	aa02      	add	r2, sp, #8
 8018c36:	2002      	movs	r0, #2
 8018c38:	4621      	mov	r1, r4
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	f002 faba 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 8018c40:	9802      	ldr	r0, [sp, #8]
 8018c42:	b320      	cbz	r0, 8018c8e <non_conn_mngr_add_rmv_clr_device_white_list+0xf4>
 8018c44:	6800      	ldr	r0, [r0, #0]
 8018c46:	2d01      	cmp	r5, #1
 8018c48:	d142      	bne.n	8018cd0 <non_conn_mngr_add_rmv_clr_device_white_list+0x136>
 8018c4a:	b2c0      	uxtb	r0, r0
 8018c4c:	f7fb f9d0 	bl	8013ff0 <llhwc_lst_rmv_by_loc>
 8018c50:	2700      	movs	r7, #0
 8018c52:	e014      	b.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018c54:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8018c58:	3801      	subs	r0, #1
 8018c5a:	2803      	cmp	r0, #3
 8018c5c:	d30b      	bcc.n	8018c76 <non_conn_mngr_add_rmv_clr_device_white_list+0xdc>
 8018c5e:	f646 7068 	movw	r0, #28520	@ 0x6f68
 8018c62:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018c66:	f890 1036 	ldrb.w	r1, [r0, #54]	@ 0x36
 8018c6a:	2900      	cmp	r1, #0
 8018c6c:	d0b3      	beq.n	8018bd6 <non_conn_mngr_add_rmv_clr_device_white_list+0x3c>
 8018c6e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8018c72:	2803      	cmp	r0, #3
 8018c74:	d1af      	bne.n	8018bd6 <non_conn_mngr_add_rmv_clr_device_white_list+0x3c>
 8018c76:	2043      	movs	r0, #67	@ 0x43
 8018c78:	f002 fe9c 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8018c7c:	270c      	movs	r7, #12
 8018c7e:	4638      	mov	r0, r7
 8018c80:	b003      	add	sp, #12
 8018c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c84:	2000      	movs	r0, #0
 8018c86:	2700      	movs	r7, #0
 8018c88:	f7fa feae 	bl	80139e8 <llhwc_lst_clr>
 8018c8c:	e7f7      	b.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018c8e:	f10d 0507 	add.w	r5, sp, #7
 8018c92:	2000      	movs	r0, #0
 8018c94:	2103      	movs	r1, #3
 8018c96:	2201      	movs	r2, #1
 8018c98:	4623      	mov	r3, r4
 8018c9a:	9500      	str	r5, [sp, #0]
 8018c9c:	f7fb f834 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 8018ca0:	b190      	cbz	r0, 8018cc8 <non_conn_mngr_add_rmv_clr_device_white_list+0x12e>
 8018ca2:	4607      	mov	r7, r0
 8018ca4:	2807      	cmp	r0, #7
 8018ca6:	d1ea      	bne.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018ca8:	2003      	movs	r0, #3
 8018caa:	f000 f818 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 8018cae:	4607      	mov	r7, r0
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	d1e4      	bne.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018cb4:	2000      	movs	r0, #0
 8018cb6:	2103      	movs	r1, #3
 8018cb8:	2201      	movs	r2, #1
 8018cba:	4623      	mov	r3, r4
 8018cbc:	9500      	str	r5, [sp, #0]
 8018cbe:	f7fb f823 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 8018cc2:	4607      	mov	r7, r0
 8018cc4:	2800      	cmp	r0, #0
 8018cc6:	d1da      	bne.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>
 8018cc8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018ccc:	2000      	movs	r0, #0
 8018cce:	e001      	b.n	8018cd4 <non_conn_mngr_add_rmv_clr_device_white_list+0x13a>
 8018cd0:	b2c1      	uxtb	r1, r0
 8018cd2:	2003      	movs	r0, #3
 8018cd4:	2200      	movs	r2, #0
 8018cd6:	2700      	movs	r7, #0
 8018cd8:	f7fb f9a9 	bl	801402e <llhwc_lst_edit_indicators>
 8018cdc:	e7cf      	b.n	8018c7e <non_conn_mngr_add_rmv_clr_device_white_list+0xe4>

08018cde <non_conn_mngr_remove_random_addr_list>:
 8018cde:	b510      	push	{r4, lr}
 8018ce0:	b082      	sub	sp, #8
 8018ce2:	2100      	movs	r1, #0
 8018ce4:	9101      	str	r1, [sp, #4]
 8018ce6:	a901      	add	r1, sp, #4
 8018ce8:	f7fb f925 	bl	8013f36 <llhwc_lst_rmv_rand_add>
 8018cec:	4604      	mov	r4, r0
 8018cee:	b918      	cbnz	r0, 8018cf8 <non_conn_mngr_remove_random_addr_list+0x1a>
 8018cf0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8018cf4:	f002 fca4 	bl	801b640 <prvcy_mngr_clean_hwpostn_fw_lst>
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	b002      	add	sp, #8
 8018cfc:	bd10      	pop	{r4, pc}

08018cfe <non_conn_mngr_interrupt>:
 8018cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d02:	b087      	sub	sp, #28
 8018d04:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	@ 0x40
 8018d08:	4604      	mov	r4, r0
 8018d0a:	460f      	mov	r7, r1
 8018d0c:	f084 0110 	eor.w	r1, r4, #16
 8018d10:	461e      	mov	r6, r3
 8018d12:	4692      	mov	sl, r2
 8018d14:	2000      	movs	r0, #0
 8018d16:	ea51 0b07 	orrs.w	fp, r1, r7
 8018d1a:	9006      	str	r0, [sp, #24]
 8018d1c:	9004      	str	r0, [sp, #16]
 8018d1e:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8018d22:	9001      	str	r0, [sp, #4]
 8018d24:	d108      	bne.n	8018d38 <non_conn_mngr_interrupt+0x3a>
 8018d26:	f646 6158 	movw	r1, #28248	@ 0x6e58
 8018d2a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018d2e:	7b8d      	ldrb	r5, [r1, #14]
 8018d30:	f889 5000 	strb.w	r5, [r9]
 8018d34:	7b88      	ldrb	r0, [r1, #14]
 8018d36:	e007      	b.n	8018d48 <non_conn_mngr_interrupt+0x4a>
 8018d38:	f646 7118 	movw	r1, #28440	@ 0x6f18
 8018d3c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018d40:	7d8d      	ldrb	r5, [r1, #22]
 8018d42:	f889 5000 	strb.w	r5, [r9]
 8018d46:	7d88      	ldrb	r0, [r1, #22]
 8018d48:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8018d4c:	2802      	cmp	r0, #2
 8018d4e:	bf04      	itt	eq
 8018d50:	1ea8      	subeq	r0, r5, #2
 8018d52:	f889 0000 	strbeq.w	r0, [r9]
 8018d56:	4640      	mov	r0, r8
 8018d58:	2206      	movs	r2, #6
 8018d5a:	f007 fd73 	bl	8020844 <ble_memcpy>
 8018d5e:	b13e      	cbz	r6, 8018d70 <non_conn_mngr_interrupt+0x72>
 8018d60:	2e01      	cmp	r6, #1
 8018d62:	d10e      	bne.n	8018d82 <non_conn_mngr_interrupt+0x84>
 8018d64:	f89a 0005 	ldrb.w	r0, [sl, #5]
 8018d68:	3040      	adds	r0, #64	@ 0x40
 8018d6a:	b240      	sxtb	r0, r0
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	d408      	bmi.n	8018d82 <non_conn_mngr_interrupt+0x84>
 8018d70:	f1bb 0f00 	cmp.w	fp, #0
 8018d74:	d129      	bne.n	8018dca <non_conn_mngr_interrupt+0xcc>
 8018d76:	f646 6058 	movw	r0, #28248	@ 0x6e58
 8018d7a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018d7e:	7b80      	ldrb	r0, [r0, #14]
 8018d80:	e02c      	b.n	8018ddc <non_conn_mngr_interrupt+0xde>
 8018d82:	f10d 0317 	add.w	r3, sp, #23
 8018d86:	2003      	movs	r0, #3
 8018d88:	4631      	mov	r1, r6
 8018d8a:	4652      	mov	r2, sl
 8018d8c:	f7fa ff19 	bl	8013bc2 <llhwc_lst_search>
 8018d90:	bb80      	cbnz	r0, 8018df4 <non_conn_mngr_interrupt+0xf6>
 8018d92:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8018d96:	07c0      	lsls	r0, r0, #31
 8018d98:	d130      	bne.n	8018dfc <non_conn_mngr_interrupt+0xfe>
 8018d9a:	f005 00fe 	and.w	r0, r5, #254	@ 0xfe
 8018d9e:	2802      	cmp	r0, #2
 8018da0:	d128      	bne.n	8018df4 <non_conn_mngr_interrupt+0xf6>
 8018da2:	f10d 0117 	add.w	r1, sp, #23
 8018da6:	aa06      	add	r2, sp, #24
 8018da8:	2004      	movs	r0, #4
 8018daa:	2300      	movs	r3, #0
 8018dac:	f002 fa02 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 8018db0:	9806      	ldr	r0, [sp, #24]
 8018db2:	b1b8      	cbz	r0, 8018de4 <non_conn_mngr_interrupt+0xe6>
 8018db4:	a901      	add	r1, sp, #4
 8018db6:	2206      	movs	r2, #6
 8018db8:	f007 fdcc 	bl	8020954 <ble_memcmp>
 8018dbc:	b1d0      	cbz	r0, 8018df4 <non_conn_mngr_interrupt+0xf6>
 8018dbe:	9906      	ldr	r1, [sp, #24]
 8018dc0:	4640      	mov	r0, r8
 8018dc2:	2206      	movs	r2, #6
 8018dc4:	f007 fd3e 	bl	8020844 <ble_memcpy>
 8018dc8:	e011      	b.n	8018dee <non_conn_mngr_interrupt+0xf0>
 8018dca:	f084 0040 	eor.w	r0, r4, #64	@ 0x40
 8018dce:	4338      	orrs	r0, r7
 8018dd0:	d110      	bne.n	8018df4 <non_conn_mngr_interrupt+0xf6>
 8018dd2:	f646 7018 	movw	r0, #28440	@ 0x6f18
 8018dd6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018dda:	7d80      	ldrb	r0, [r0, #22]
 8018ddc:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8018de0:	2802      	cmp	r0, #2
 8018de2:	d107      	bne.n	8018df4 <non_conn_mngr_interrupt+0xf6>
 8018de4:	4650      	mov	r0, sl
 8018de6:	4641      	mov	r1, r8
 8018de8:	f002 faee 	bl	801b3c8 <prvcy_mngr_get_local_rpa>
 8018dec:	b910      	cbnz	r0, 8018df4 <non_conn_mngr_interrupt+0xf6>
 8018dee:	2001      	movs	r0, #1
 8018df0:	f889 0000 	strb.w	r0, [r9]
 8018df4:	2000      	movs	r0, #0
 8018df6:	b007      	add	sp, #28
 8018df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dfc:	2001      	movs	r0, #1
 8018dfe:	e7fa      	b.n	8018df6 <non_conn_mngr_interrupt+0xf8>

08018e00 <non_conn_mngr_scan_enable>:
 8018e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e04:	b084      	sub	sp, #16
 8018e06:	f646 6458 	movw	r4, #28248	@ 0x6e58
 8018e0a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8018e0e:	7ba5      	ldrb	r5, [r4, #14]
 8018e10:	f005 02fe 	and.w	r2, r5, #254	@ 0xfe
 8018e14:	2a02      	cmp	r2, #2
 8018e16:	f240 1201 	movw	r2, #257	@ 0x101
 8018e1a:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 8018e1e:	d106      	bne.n	8018e2e <non_conn_mngr_scan_enable+0x2e>
 8018e20:	f646 7268 	movw	r2, #28520	@ 0x6f68
 8018e24:	3d02      	subs	r5, #2
 8018e26:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8018e2a:	f882 5027 	strb.w	r5, [r2, #39]	@ 0x27
 8018e2e:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 8018e32:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
 8018e36:	b390      	cbz	r0, 8018e9e <non_conn_mngr_scan_enable+0x9e>
 8018e38:	2a01      	cmp	r2, #1
 8018e3a:	d034      	beq.n	8018ea6 <non_conn_mngr_scan_enable+0xa6>
 8018e3c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8018e3e:	f7f5 fb27 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8018e42:	4605      	mov	r5, r0
 8018e44:	bb80      	cbnz	r0, 8018ea8 <non_conn_mngr_scan_enable+0xa8>
 8018e46:	6920      	ldr	r0, [r4, #16]
 8018e48:	2500      	movs	r5, #0
 8018e4a:	6265      	str	r5, [r4, #36]	@ 0x24
 8018e4c:	b118      	cbz	r0, 8018e56 <non_conn_mngr_scan_enable+0x56>
 8018e4e:	3804      	subs	r0, #4
 8018e50:	f004 fe34 	bl	801dabc <os_mem_pool_free>
 8018e54:	6125      	str	r5, [r4, #16]
 8018e56:	6a20      	ldr	r0, [r4, #32]
 8018e58:	2100      	movs	r1, #0
 8018e5a:	f002 fce7 	bl	801b82c <state_mngr_update_state>
 8018e5e:	4605      	mov	r5, r0
 8018e60:	bb10      	cbnz	r0, 8018ea8 <non_conn_mngr_scan_enable+0xa8>
 8018e62:	f646 7068 	movw	r0, #28520	@ 0x6f68
 8018e66:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018e6a:	f890 0036 	ldrb.w	r0, [r0, #54]	@ 0x36
 8018e6e:	2801      	cmp	r0, #1
 8018e70:	bf04      	itt	eq
 8018e72:	2003      	moveq	r0, #3
 8018e74:	f7fa fdb8 	bleq	80139e8 <llhwc_lst_clr>
 8018e78:	2002      	movs	r0, #2
 8018e7a:	f7fa fdb5 	bl	80139e8 <llhwc_lst_clr>
 8018e7e:	2001      	movs	r0, #1
 8018e80:	f249 33ef 	movw	r3, #37871	@ 0x93ef
 8018e84:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8018e88:	f88d 000c 	strb.w	r0, [sp, #12]
 8018e8c:	aa03      	add	r2, sp, #12
 8018e8e:	2008      	movs	r0, #8
 8018e90:	2100      	movs	r1, #0
 8018e92:	f6c0 0301 	movt	r3, #2049	@ 0x801
 8018e96:	2500      	movs	r5, #0
 8018e98:	f004 fdb8 	bl	801da0c <emngr_remove_conditional_event>
 8018e9c:	e004      	b.n	8018ea8 <non_conn_mngr_scan_enable+0xa8>
 8018e9e:	b112      	cbz	r2, 8018ea6 <non_conn_mngr_scan_enable+0xa6>
 8018ea0:	f7fb f9d1 	bl	8014246 <llhwc_is_dtm_enabled>
 8018ea4:	b120      	cbz	r0, 8018eb0 <non_conn_mngr_scan_enable+0xb0>
 8018ea6:	2500      	movs	r5, #0
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	b004      	add	sp, #16
 8018eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eb0:	2003      	movs	r0, #3
 8018eb2:	f002 fc43 	bl	801b73c <state_mngr_alloc_state_mchn>
 8018eb6:	2101      	movs	r1, #1
 8018eb8:	6220      	str	r0, [r4, #32]
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	bf18      	it	ne
 8018ebe:	2001      	movne	r0, #1
 8018ec0:	f002 fd2d 	bl	801b91e <bsp_assert>
 8018ec4:	b2ee      	uxtb	r6, r5
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	4621      	mov	r1, r4
 8018eca:	f009 fc09 	bl	80226e0 <db_get_src_address>
 8018ece:	4605      	mov	r5, r0
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	d1e9      	bne.n	8018ea8 <non_conn_mngr_scan_enable+0xa8>
 8018ed4:	7b20      	ldrb	r0, [r4, #12]
 8018ed6:	f04f 0800 	mov.w	r8, #0
 8018eda:	2801      	cmp	r0, #1
 8018edc:	d11a      	bne.n	8018f14 <non_conn_mngr_scan_enable+0x114>
 8018ede:	6921      	ldr	r1, [r4, #16]
 8018ee0:	2004      	movs	r0, #4
 8018ee2:	8360      	strh	r0, [r4, #26]
 8018ee4:	f8a4 801c 	strh.w	r8, [r4, #28]
 8018ee8:	b931      	cbnz	r1, 8018ef8 <non_conn_mngr_scan_enable+0xf8>
 8018eea:	f649 7000 	movw	r0, #40704	@ 0x9f00
 8018eee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018ef2:	f004 fde5 	bl	801dac0 <os_shrd_mem_alloc>
 8018ef6:	6120      	str	r0, [r4, #16]
 8018ef8:	2700      	movs	r7, #0
 8018efa:	f104 0110 	add.w	r1, r4, #16
 8018efe:	4630      	mov	r0, r6
 8018f00:	2203      	movs	r2, #3
 8018f02:	2300      	movs	r3, #0
 8018f04:	9700      	str	r7, [sp, #0]
 8018f06:	f001 f895 	bl	801a034 <pdu_trnsprt_hndlr_form_nconn_scan>
 8018f0a:	4605      	mov	r5, r0
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	d1cb      	bne.n	8018ea8 <non_conn_mngr_scan_enable+0xa8>
 8018f10:	2010      	movs	r0, #16
 8018f12:	e001      	b.n	8018f18 <non_conn_mngr_scan_enable+0x118>
 8018f14:	2020      	movs	r0, #32
 8018f16:	2700      	movs	r7, #0
 8018f18:	f648 7349 	movw	r3, #36681	@ 0x8f49
 8018f1c:	4639      	mov	r1, r7
 8018f1e:	f6c0 0301 	movt	r3, #2049	@ 0x801
 8018f22:	4622      	mov	r2, r4
 8018f24:	e9cd 8800 	strd	r8, r8, [sp]
 8018f28:	f8cd 8008 	str.w	r8, [sp, #8]
 8018f2c:	f7f4 fcb5 	bl	800d89a <evnt_schdlr_rgstr_evnt>
 8018f30:	2101      	movs	r1, #1
 8018f32:	6260      	str	r0, [r4, #36]	@ 0x24
 8018f34:	2800      	cmp	r0, #0
 8018f36:	bf18      	it	ne
 8018f38:	2001      	movne	r0, #1
 8018f3a:	f002 fcf0 	bl	801b91e <bsp_assert>
 8018f3e:	f884 803c 	strb.w	r8, [r4, #60]	@ 0x3c
 8018f42:	f884 8029 	strb.w	r8, [r4, #41]	@ 0x29
 8018f46:	e7ae      	b.n	8018ea6 <non_conn_mngr_scan_enable+0xa6>

08018f48 <non_conn_mngr_scan_cbk>:
 8018f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f4c:	b09b      	sub	sp, #108	@ 0x6c
 8018f4e:	207f      	movs	r0, #127	@ 0x7f
 8018f50:	4688      	mov	r8, r1
 8018f52:	f002 fd2b 	bl	801b9ac <bsp_debug_gpio_set>
 8018f56:	4640      	mov	r0, r8
 8018f58:	2101      	movs	r1, #1
 8018f5a:	f1b8 0f00 	cmp.w	r8, #0
 8018f5e:	bf18      	it	ne
 8018f60:	2001      	movne	r0, #1
 8018f62:	f002 fcdc 	bl	801b91e <bsp_assert>
 8018f66:	f898 4020 	ldrb.w	r4, [r8, #32]
 8018f6a:	2c00      	cmp	r4, #0
 8018f6c:	f000 8217 	beq.w	801939e <non_conn_mngr_scan_cbk+0x456>
 8018f70:	f898 002b 	ldrb.w	r0, [r8, #43]	@ 0x2b
 8018f74:	ae18      	add	r6, sp, #96	@ 0x60
 8018f76:	9002      	str	r0, [sp, #8]
 8018f78:	4630      	mov	r0, r6
 8018f7a:	2100      	movs	r1, #0
 8018f7c:	2208      	movs	r2, #8
 8018f7e:	f007 fcb1 	bl	80208e4 <ble_memset>
 8018f82:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8018f86:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018f8a:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8018f8e:	f646 7168 	movw	r1, #28520	@ 0x6f68
 8018f92:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8018f96:	3108      	adds	r1, #8
 8018f98:	f10d 0b13 	add.w	fp, sp, #19
 8018f9c:	f04f 0900 	mov.w	r9, #0
 8018fa0:	2700      	movs	r7, #0
 8018fa2:	9103      	str	r1, [sp, #12]
 8018fa4:	2101      	movs	r1, #1
 8018fa6:	2800      	cmp	r0, #0
 8018fa8:	bf18      	it	ne
 8018faa:	2001      	movne	r0, #1
 8018fac:	f002 fcb7 	bl	801b91e <bsp_assert>
 8018fb0:	a90a      	add	r1, sp, #40	@ 0x28
 8018fb2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018fb6:	eb01 0509 	add.w	r5, r1, r9
 8018fba:	9a03      	ldr	r2, [sp, #12]
 8018fbc:	4629      	mov	r1, r5
 8018fbe:	465b      	mov	r3, fp
 8018fc0:	9700      	str	r7, [sp, #0]
 8018fc2:	f000 ff55 	bl	8019e70 <pdu_trnsprt_hndlr_parse_nconn_adv>
 8018fc6:	f89d 1013 	ldrb.w	r1, [sp, #19]
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	f646 7068 	movw	r0, #28520	@ 0x6f68
 8018fd0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8018fd4:	f880 1027 	strb.w	r1, [r0, #39]	@ 0x27
 8018fd8:	f040 81e1 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 8018fdc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018fe0:	f898 1022 	ldrb.w	r1, [r8, #34]	@ 0x22
 8018fe4:	f846 0b04 	str.w	r0, [r6], #4
 8018fe8:	7629      	strb	r1, [r5, #24]
 8018fea:	f001 fc9f 	bl	801a92c <get_nxt_data_packet>
 8018fee:	f109 091c 	add.w	r9, r9, #28
 8018ff2:	45ca      	cmp	sl, r9
 8018ff4:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ff8:	d1d4      	bne.n	8018fa4 <non_conn_mngr_scan_cbk+0x5c>
 8018ffa:	f89d 2041 	ldrb.w	r2, [sp, #65]	@ 0x41
 8018ffe:	f646 7068 	movw	r0, #28520	@ 0x6f68
 8019002:	2103      	movs	r1, #3
 8019004:	2a03      	cmp	r2, #3
 8019006:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801900a:	f880 1028 	strb.w	r1, [r0, #40]	@ 0x28
 801900e:	f200 81c6 	bhi.w	801939e <non_conn_mngr_scan_cbk+0x456>
 8019012:	f240 1100 	movw	r1, #256	@ 0x100
 8019016:	00d2      	lsls	r2, r2, #3
 8019018:	f2c0 2106 	movt	r1, #518	@ 0x206
 801901c:	40d1      	lsrs	r1, r2
 801901e:	ad0a      	add	r5, sp, #40	@ 0x28
 8019020:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8019024:	4629      	mov	r1, r5
 8019026:	2206      	movs	r2, #6
 8019028:	f007 fc0c 	bl	8020844 <ble_memcpy>
 801902c:	f646 7368 	movw	r3, #28520	@ 0x6f68
 8019030:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 8019034:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8019038:	f646 6b58 	movw	fp, #28248	@ 0x6e58
 801903c:	f883 0025 	strb.w	r0, [r3, #37]	@ 0x25
 8019040:	f883 0026 	strb.w	r0, [r3, #38]	@ 0x26
 8019044:	f2c2 0b00 	movt	fp, #8192	@ 0x2000
 8019048:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 801904c:	f89b 100d 	ldrb.w	r1, [fp, #13]
 8019050:	2801      	cmp	r0, #1
 8019052:	621b      	str	r3, [r3, #32]
 8019054:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
 8019058:	d136      	bne.n	80190c8 <non_conn_mngr_scan_cbk+0x180>
 801905a:	9802      	ldr	r0, [sp, #8]
 801905c:	f001 fda6 	bl	801abac <prvcy_mngr_addr_hndlr>
 8019060:	f646 7168 	movw	r1, #28520	@ 0x6f68
 8019064:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019068:	2800      	cmp	r0, #0
 801906a:	f040 8198 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 801906e:	6a08      	ldr	r0, [r1, #32]
 8019070:	2101      	movs	r1, #1
 8019072:	2800      	cmp	r0, #0
 8019074:	bf18      	it	ne
 8019076:	2001      	movne	r0, #1
 8019078:	f002 fc51 	bl	801b91e <bsp_assert>
 801907c:	f646 7068 	movw	r0, #28520	@ 0x6f68
 8019080:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019084:	f646 7168 	movw	r1, #28520	@ 0x6f68
 8019088:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 801908c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019090:	6a09      	ldr	r1, [r1, #32]
 8019092:	ae0a      	add	r6, sp, #40	@ 0x28
 8019094:	f88d 0042 	strb.w	r0, [sp, #66]	@ 0x42
 8019098:	4630      	mov	r0, r6
 801909a:	2206      	movs	r2, #6
 801909c:	f007 fbd2 	bl	8020844 <ble_memcpy>
 80190a0:	f646 7368 	movw	r3, #28520	@ 0x6f68
 80190a4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80190a8:	2c02      	cmp	r4, #2
 80190aa:	d10d      	bne.n	80190c8 <non_conn_mngr_scan_cbk+0x180>
 80190ac:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80190b0:	6a19      	ldr	r1, [r3, #32]
 80190b2:	f106 001c 	add.w	r0, r6, #28
 80190b6:	f88d 205e 	strb.w	r2, [sp, #94]	@ 0x5e
 80190ba:	2206      	movs	r2, #6
 80190bc:	f007 fbc2 	bl	8020844 <ble_memcpy>
 80190c0:	f646 7368 	movw	r3, #28520	@ 0x6f68
 80190c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80190c8:	9802      	ldr	r0, [sp, #8]
 80190ca:	b110      	cbz	r0, 80190d2 <non_conn_mngr_scan_cbk+0x18a>
 80190cc:	f04f 0a00 	mov.w	sl, #0
 80190d0:	e123      	b.n	801931a <non_conn_mngr_scan_cbk+0x3d2>
 80190d2:	f89b 0028 	ldrb.w	r0, [fp, #40]	@ 0x28
 80190d6:	2801      	cmp	r0, #1
 80190d8:	d168      	bne.n	80191ac <non_conn_mngr_scan_cbk+0x264>
 80190da:	f89b 000c 	ldrb.w	r0, [fp, #12]
 80190de:	f084 0102 	eor.w	r1, r4, #2
 80190e2:	4308      	orrs	r0, r1
 80190e4:	f04f 0101 	mov.w	r1, #1
 80190e8:	bf18      	it	ne
 80190ea:	2001      	movne	r0, #1
 80190ec:	2601      	movs	r6, #1
 80190ee:	f002 fc16 	bl	801b91e <bsp_assert>
 80190f2:	f89b 000c 	ldrb.w	r0, [fp, #12]
 80190f6:	f04f 0a01 	mov.w	sl, #1
 80190fa:	2801      	cmp	r0, #1
 80190fc:	d107      	bne.n	801910e <non_conn_mngr_scan_cbk+0x1c6>
 80190fe:	f89d 0041 	ldrb.w	r0, [sp, #65]	@ 0x41
 8019102:	f04f 0a01 	mov.w	sl, #1
 8019106:	f040 0002 	orr.w	r0, r0, #2
 801910a:	2803      	cmp	r0, #3
 801910c:	d179      	bne.n	8019202 <non_conn_mngr_scan_cbk+0x2ba>
 801910e:	f646 7768 	movw	r7, #28520	@ 0x6f68
 8019112:	f89d 102d 	ldrb.w	r1, [sp, #45]	@ 0x2d
 8019116:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801911a:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 801911e:	f897 0036 	ldrb.w	r0, [r7, #54]	@ 0x36
 8019122:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 8019126:	ea26 0302 	bic.w	r3, r6, r2
 801912a:	3940      	subs	r1, #64	@ 0x40
 801912c:	bf18      	it	ne
 801912e:	2101      	movne	r1, #1
 8019130:	2801      	cmp	r0, #1
 8019132:	ea43 0601 	orr.w	r6, r3, r1
 8019136:	d13c      	bne.n	80191b2 <non_conn_mngr_scan_cbk+0x26a>
 8019138:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 801913c:	2901      	cmp	r1, #1
 801913e:	d138      	bne.n	80191b2 <non_conn_mngr_scan_cbk+0x26a>
 8019140:	7979      	ldrb	r1, [r7, #5]
 8019142:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 8019146:	2940      	cmp	r1, #64	@ 0x40
 8019148:	d133      	bne.n	80191b2 <non_conn_mngr_scan_cbk+0x26a>
 801914a:	f646 7768 	movw	r7, #28520	@ 0x6f68
 801914e:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8019152:	f10d 036b 	add.w	r3, sp, #107	@ 0x6b
 8019156:	2003      	movs	r0, #3
 8019158:	2101      	movs	r1, #1
 801915a:	463a      	mov	r2, r7
 801915c:	f7fa fd31 	bl	8013bc2 <llhwc_lst_search>
 8019160:	2800      	cmp	r0, #0
 8019162:	f040 811c 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 8019166:	f89d 106b 	ldrb.w	r1, [sp, #107]	@ 0x6b
 801916a:	2002      	movs	r0, #2
 801916c:	2200      	movs	r2, #0
 801916e:	f7fa ff5e 	bl	801402e <llhwc_lst_edit_indicators>
 8019172:	f897 0036 	ldrb.w	r0, [r7, #54]	@ 0x36
 8019176:	b130      	cbz	r0, 8019186 <non_conn_mngr_scan_cbk+0x23e>
 8019178:	3801      	subs	r0, #1
 801917a:	fab0 f080 	clz	r0, r0
 801917e:	0940      	lsrs	r0, r0, #5
 8019180:	4030      	ands	r0, r6
 8019182:	f000 80c6 	beq.w	8019312 <non_conn_mngr_scan_cbk+0x3ca>
 8019186:	f89d 1042 	ldrb.w	r1, [sp, #66]	@ 0x42
 801918a:	aa0a      	add	r2, sp, #40	@ 0x28
 801918c:	f10d 036b 	add.w	r3, sp, #107	@ 0x6b
 8019190:	2002      	movs	r0, #2
 8019192:	f7fa fd16 	bl	8013bc2 <llhwc_lst_search>
 8019196:	2800      	cmp	r0, #0
 8019198:	f040 8101 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 801919c:	f89d 006b 	ldrb.w	r0, [sp, #107]	@ 0x6b
 80191a0:	07c0      	lsls	r0, r0, #31
 80191a2:	f000 8097 	beq.w	80192d4 <non_conn_mngr_scan_cbk+0x38c>
 80191a6:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 80191aa:	e00a      	b.n	80191c2 <non_conn_mngr_scan_cbk+0x27a>
 80191ac:	f04f 0a01 	mov.w	sl, #1
 80191b0:	e0b3      	b.n	801931a <non_conn_mngr_scan_cbk+0x3d2>
 80191b2:	b130      	cbz	r0, 80191c2 <non_conn_mngr_scan_cbk+0x27a>
 80191b4:	3801      	subs	r0, #1
 80191b6:	fab0 f080 	clz	r0, r0
 80191ba:	0940      	lsrs	r0, r0, #5
 80191bc:	4030      	ands	r0, r6
 80191be:	f000 80a8 	beq.w	8019312 <non_conn_mngr_scan_cbk+0x3ca>
 80191c2:	2700      	movs	r7, #0
 80191c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80191c6:	2000      	movs	r0, #0
 80191c8:	2102      	movs	r1, #2
 80191ca:	9700      	str	r7, [sp, #0]
 80191cc:	f7fa fd9c 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 80191d0:	2800      	cmp	r0, #0
 80191d2:	f000 809e 	beq.w	8019312 <non_conn_mngr_scan_cbk+0x3ca>
 80191d6:	2807      	cmp	r0, #7
 80191d8:	f040 80e1 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 80191dc:	2002      	movs	r0, #2
 80191de:	f7ff fd7e 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	f040 80db 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 80191e8:	f89d 2042 	ldrb.w	r2, [sp, #66]	@ 0x42
 80191ec:	2700      	movs	r7, #0
 80191ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80191f0:	2000      	movs	r0, #0
 80191f2:	2102      	movs	r1, #2
 80191f4:	9700      	str	r7, [sp, #0]
 80191f6:	f7fa fd87 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 80191fa:	2800      	cmp	r0, #0
 80191fc:	f040 80cf 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 8019200:	e087      	b.n	8019312 <non_conn_mngr_scan_cbk+0x3ca>
 8019202:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 8019206:	f89b 103c 	ldrb.w	r1, [fp, #60]	@ 0x3c
 801920a:	f000 0201 	and.w	r2, r0, #1
 801920e:	f10b 062a 	add.w	r6, fp, #42	@ 0x2a
 8019212:	2000      	movs	r0, #0
 8019214:	2501      	movs	r5, #1
 8019216:	fa0a f900 	lsl.w	r9, sl, r0
 801921a:	4607      	mov	r7, r0
 801921c:	ea19 0f01 	tst.w	r9, r1
 8019220:	d013      	beq.n	801924a <non_conn_mngr_scan_cbk+0x302>
 8019222:	f89b 003d 	ldrb.w	r0, [fp, #61]	@ 0x3d
 8019226:	40f8      	lsrs	r0, r7
 8019228:	f000 0001 	and.w	r0, r0, #1
 801922c:	4290      	cmp	r0, r2
 801922e:	d10c      	bne.n	801924a <non_conn_mngr_scan_cbk+0x302>
 8019230:	4692      	mov	sl, r2
 8019232:	a80a      	add	r0, sp, #40	@ 0x28
 8019234:	4631      	mov	r1, r6
 8019236:	2206      	movs	r2, #6
 8019238:	f007 fb8c 	bl	8020954 <ble_memcmp>
 801923c:	f89b 103c 	ldrb.w	r1, [fp, #60]	@ 0x3c
 8019240:	2800      	cmp	r0, #0
 8019242:	d03e      	beq.n	80192c2 <non_conn_mngr_scan_cbk+0x37a>
 8019244:	4652      	mov	r2, sl
 8019246:	f04f 0a01 	mov.w	sl, #1
 801924a:	1c78      	adds	r0, r7, #1
 801924c:	2f02      	cmp	r7, #2
 801924e:	f04f 0500 	mov.w	r5, #0
 8019252:	bf38      	it	cc
 8019254:	2501      	movcc	r5, #1
 8019256:	2803      	cmp	r0, #3
 8019258:	f106 0606 	add.w	r6, r6, #6
 801925c:	d1db      	bne.n	8019216 <non_conn_mngr_scan_cbk+0x2ce>
 801925e:	f1b4 0a01 	subs.w	sl, r4, #1
 8019262:	bf18      	it	ne
 8019264:	f04f 0a01 	movne.w	sl, #1
 8019268:	2c01      	cmp	r4, #1
 801926a:	d14d      	bne.n	8019308 <non_conn_mngr_scan_cbk+0x3c0>
 801926c:	2f02      	cmp	r7, #2
 801926e:	ad0a      	add	r5, sp, #40	@ 0x28
 8019270:	f04f 0601 	mov.w	r6, #1
 8019274:	d34a      	bcc.n	801930c <non_conn_mngr_scan_cbk+0x3c4>
 8019276:	2000      	movs	r0, #0
 8019278:	2701      	movs	r7, #1
 801927a:	fa07 f300 	lsl.w	r3, r7, r0
 801927e:	420b      	tst	r3, r1
 8019280:	d02b      	beq.n	80192da <non_conn_mngr_scan_cbk+0x392>
 8019282:	3001      	adds	r0, #1
 8019284:	2803      	cmp	r0, #3
 8019286:	d1f8      	bne.n	801927a <non_conn_mngr_scan_cbk+0x332>
 8019288:	a805      	add	r0, sp, #20
 801928a:	2101      	movs	r1, #1
 801928c:	4617      	mov	r7, r2
 801928e:	f04f 0901 	mov.w	r9, #1
 8019292:	f7fa fea8 	bl	8013fe6 <llhwc_gen_rnd_num>
 8019296:	0600      	lsls	r0, r0, #24
 8019298:	f040 8081 	bne.w	801939e <non_conn_mngr_scan_cbk+0x456>
 801929c:	9805      	ldr	r0, [sp, #20]
 801929e:	f64a 21ab 	movw	r1, #43691	@ 0xaaab
 80192a2:	f6ca 21aa 	movt	r1, #43690	@ 0xaaaa
 80192a6:	fba0 1201 	umull	r1, r2, r0, r1
 80192aa:	0851      	lsrs	r1, r2, #1
 80192ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80192b0:	1a40      	subs	r0, r0, r1
 80192b2:	f89b 103d 	ldrb.w	r1, [fp, #61]	@ 0x3d
 80192b6:	fa09 f200 	lsl.w	r2, r9, r0
 80192ba:	4391      	bics	r1, r2
 80192bc:	463a      	mov	r2, r7
 80192be:	9005      	str	r0, [sp, #20]
 80192c0:	e012      	b.n	80192e8 <non_conn_mngr_scan_cbk+0x3a0>
 80192c2:	2c01      	cmp	r4, #1
 80192c4:	f040 8086 	bne.w	80193d4 <non_conn_mngr_scan_cbk+0x48c>
 80192c8:	07e8      	lsls	r0, r5, #31
 80192ca:	ad0a      	add	r5, sp, #40	@ 0x28
 80192cc:	f04f 0601 	mov.w	r6, #1
 80192d0:	4652      	mov	r2, sl
 80192d2:	d0d0      	beq.n	8019276 <non_conn_mngr_scan_cbk+0x32e>
 80192d4:	f04f 0a00 	mov.w	sl, #0
 80192d8:	e01b      	b.n	8019312 <non_conn_mngr_scan_cbk+0x3ca>
 80192da:	f89b 703d 	ldrb.w	r7, [fp, #61]	@ 0x3d
 80192de:	4319      	orrs	r1, r3
 80192e0:	f88b 103c 	strb.w	r1, [fp, #60]	@ 0x3c
 80192e4:	ea27 0103 	bic.w	r1, r7, r3
 80192e8:	4082      	lsls	r2, r0
 80192ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80192ee:	4311      	orrs	r1, r2
 80192f0:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 80192f4:	f88b 103d 	strb.w	r1, [fp, #61]	@ 0x3d
 80192f8:	302a      	adds	r0, #42	@ 0x2a
 80192fa:	a90a      	add	r1, sp, #40	@ 0x28
 80192fc:	2206      	movs	r2, #6
 80192fe:	f007 faa1 	bl	8020844 <ble_memcpy>
 8019302:	f04f 0a01 	mov.w	sl, #1
 8019306:	e001      	b.n	801930c <non_conn_mngr_scan_cbk+0x3c4>
 8019308:	ad0a      	add	r5, sp, #40	@ 0x28
 801930a:	2601      	movs	r6, #1
 801930c:	2c01      	cmp	r4, #1
 801930e:	f47f aefe 	bne.w	801910e <non_conn_mngr_scan_cbk+0x1c6>
 8019312:	f646 7368 	movw	r3, #28520	@ 0x6f68
 8019316:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801931a:	f893 0037 	ldrb.w	r0, [r3, #55]	@ 0x37
 801931e:	2801      	cmp	r0, #1
 8019320:	d129      	bne.n	8019376 <non_conn_mngr_scan_cbk+0x42e>
 8019322:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 8019326:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801932a:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 801932e:	2001      	movs	r0, #1
 8019330:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8019334:	ad05      	add	r5, sp, #20
 8019336:	9903      	ldr	r1, [sp, #12]
 8019338:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 801933c:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8019340:	f105 0008 	add.w	r0, r5, #8
 8019344:	2206      	movs	r2, #6
 8019346:	f007 fa7d 	bl	8020844 <ble_memcpy>
 801934a:	a90a      	add	r1, sp, #40	@ 0x28
 801934c:	4628      	mov	r0, r5
 801934e:	2206      	movs	r2, #6
 8019350:	f007 fa78 	bl	8020844 <ble_memcpy>
 8019354:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8019358:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801935c:	6800      	ldr	r0, [r0, #0]
 801935e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8019360:	b109      	cbz	r1, 8019366 <non_conn_mngr_scan_cbk+0x41e>
 8019362:	a805      	add	r0, sp, #20
 8019364:	4788      	blx	r1
 8019366:	f646 7168 	movw	r1, #28520	@ 0x6f68
 801936a:	2000      	movs	r0, #0
 801936c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019370:	f881 0037 	strb.w	r0, [r1, #55]	@ 0x37
 8019374:	e013      	b.n	801939e <non_conn_mngr_scan_cbk+0x456>
 8019376:	f646 5048 	movw	r0, #27976	@ 0x6d48
 801937a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801937e:	6800      	ldr	r0, [r0, #0]
 8019380:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8019382:	b162      	cbz	r2, 801939e <non_conn_mngr_scan_cbk+0x456>
 8019384:	f1ba 0f02 	cmp.w	sl, #2
 8019388:	d005      	beq.n	8019396 <non_conn_mngr_scan_cbk+0x44e>
 801938a:	f1ba 0f01 	cmp.w	sl, #1
 801938e:	d106      	bne.n	801939e <non_conn_mngr_scan_cbk+0x456>
 8019390:	a80a      	add	r0, sp, #40	@ 0x28
 8019392:	4621      	mov	r1, r4
 8019394:	e002      	b.n	801939c <non_conn_mngr_scan_cbk+0x454>
 8019396:	f105 001c 	add.w	r0, r5, #28
 801939a:	2101      	movs	r1, #1
 801939c:	4790      	blx	r2
 801939e:	f898 0024 	ldrb.w	r0, [r8, #36]	@ 0x24
 80193a2:	2801      	cmp	r0, #1
 80193a4:	d106      	bne.n	80193b4 <non_conn_mngr_scan_cbk+0x46c>
 80193a6:	f646 6058 	movw	r0, #28248	@ 0x6e58
 80193aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80193ae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80193b0:	f7f5 f9cc 	bl	800e74c <evnt_schdlr_evnt_updtd>
 80193b4:	b144      	cbz	r4, 80193c8 <non_conn_mngr_scan_cbk+0x480>
 80193b6:	ad18      	add	r5, sp, #96	@ 0x60
 80193b8:	6828      	ldr	r0, [r5, #0]
 80193ba:	b108      	cbz	r0, 80193c0 <non_conn_mngr_scan_cbk+0x478>
 80193bc:	f001 fa98 	bl	801a8f0 <free_buff_hdr>
 80193c0:	3c01      	subs	r4, #1
 80193c2:	f105 0504 	add.w	r5, r5, #4
 80193c6:	d1f7      	bne.n	80193b8 <non_conn_mngr_scan_cbk+0x470>
 80193c8:	207f      	movs	r0, #127	@ 0x7f
 80193ca:	f002 faf1 	bl	801b9b0 <bsp_debug_gpio_clear>
 80193ce:	b01b      	add	sp, #108	@ 0x6c
 80193d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193d4:	07e8      	lsls	r0, r5, #31
 80193d6:	bf0f      	iteee	eq
 80193d8:	f04f 0a01 	moveq.w	sl, #1
 80193dc:	ea21 0009 	bicne.w	r0, r1, r9
 80193e0:	f88b 003c 	strbne.w	r0, [fp, #60]	@ 0x3c
 80193e4:	f04f 0a02 	movne.w	sl, #2
 80193e8:	ad0a      	add	r5, sp, #40	@ 0x28
 80193ea:	2601      	movs	r6, #1
 80193ec:	e68f      	b.n	801910e <non_conn_mngr_scan_cbk+0x1c6>

080193ee <non_conn_mngr_remove_conditional_event>:
 80193ee:	b510      	push	{r4, lr}
 80193f0:	6802      	ldr	r2, [r0, #0]
 80193f2:	780b      	ldrb	r3, [r1, #0]
 80193f4:	8944      	ldrh	r4, [r0, #10]
 80193f6:	2b02      	cmp	r3, #2
 80193f8:	4422      	add	r2, r4
 80193fa:	d013      	beq.n	8019424 <non_conn_mngr_remove_conditional_event+0x36>
 80193fc:	2b01      	cmp	r3, #1
 80193fe:	d008      	beq.n	8019412 <non_conn_mngr_remove_conditional_event+0x24>
 8019400:	b9ab      	cbnz	r3, 801942e <non_conn_mngr_remove_conditional_event+0x40>
 8019402:	7813      	ldrb	r3, [r2, #0]
 8019404:	7852      	ldrb	r2, [r2, #1]
 8019406:	8849      	ldrh	r1, [r1, #2]
 8019408:	f362 230b 	bfi	r3, r2, #8, #4
 801940c:	428b      	cmp	r3, r1
 801940e:	d005      	beq.n	801941c <non_conn_mngr_remove_conditional_event+0x2e>
 8019410:	e00b      	b.n	801942a <non_conn_mngr_remove_conditional_event+0x3c>
 8019412:	7891      	ldrb	r1, [r2, #2]
 8019414:	2902      	cmp	r1, #2
 8019416:	d001      	beq.n	801941c <non_conn_mngr_remove_conditional_event+0x2e>
 8019418:	290b      	cmp	r1, #11
 801941a:	d106      	bne.n	801942a <non_conn_mngr_remove_conditional_event+0x3c>
 801941c:	f7f7 f98e 	bl	801073c <ll_intf_free_ll_pkt_hndlr>
 8019420:	2401      	movs	r4, #1
 8019422:	e009      	b.n	8019438 <non_conn_mngr_remove_conditional_event+0x4a>
 8019424:	7891      	ldrb	r1, [r2, #2]
 8019426:	290d      	cmp	r1, #13
 8019428:	d0f8      	beq.n	801941c <non_conn_mngr_remove_conditional_event+0x2e>
 801942a:	2400      	movs	r4, #0
 801942c:	e004      	b.n	8019438 <non_conn_mngr_remove_conditional_event+0x4a>
 801942e:	2000      	movs	r0, #0
 8019430:	2101      	movs	r1, #1
 8019432:	2400      	movs	r4, #0
 8019434:	f002 fa73 	bl	801b91e <bsp_assert>
 8019438:	4620      	mov	r0, r4
 801943a:	bd10      	pop	{r4, pc}

0801943c <non_conn_mngr_set_adv_params>:
 801943c:	b5b0      	push	{r4, r5, r7, lr}
 801943e:	b330      	cbz	r0, 801948e <non_conn_mngr_set_adv_params+0x52>
 8019440:	f646 65b8 	movw	r5, #28344	@ 0x6eb8
 8019444:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8019448:	4601      	mov	r1, r0
 801944a:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 801944e:	b300      	cbz	r0, 8019492 <non_conn_mngr_set_adv_params+0x56>
 8019450:	7c48      	ldrb	r0, [r1, #17]
 8019452:	f105 0408 	add.w	r4, r5, #8
 8019456:	2804      	cmp	r0, #4
 8019458:	bf12      	itee	ne
 801945a:	2801      	cmpne	r0, #1
 801945c:	2000      	moveq	r0, #0
 801945e:	7708      	strbeq	r0, [r1, #28]
 8019460:	2220      	movs	r2, #32
 8019462:	4620      	mov	r0, r4
 8019464:	f007 f9ee 	bl	8020844 <ble_memcpy>
 8019468:	7ea8      	ldrb	r0, [r5, #26]
 801946a:	f895 2023 	ldrb.w	r2, [r5, #35]	@ 0x23
 801946e:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8019472:	f105 011b 	add.w	r1, r5, #27
 8019476:	f885 2030 	strb.w	r2, [r5, #48]	@ 0x30
 801947a:	f885 0031 	strb.w	r0, [r5, #49]	@ 0x31
 801947e:	4620      	mov	r0, r4
 8019480:	2206      	movs	r2, #6
 8019482:	f885 3032 	strb.w	r3, [r5, #50]	@ 0x32
 8019486:	f007 f9dd 	bl	8020844 <ble_memcpy>
 801948a:	2000      	movs	r0, #0
 801948c:	bdb0      	pop	{r4, r5, r7, pc}
 801948e:	2012      	movs	r0, #18
 8019490:	bdb0      	pop	{r4, r5, r7, pc}
 8019492:	2043      	movs	r0, #67	@ 0x43
 8019494:	f002 fa8e 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8019498:	200c      	movs	r0, #12
 801949a:	bdb0      	pop	{r4, r5, r7, pc}

0801949c <non_conn_mngr_set_adv_data>:
 801949c:	b570      	push	{r4, r5, r6, lr}
 801949e:	b330      	cbz	r0, 80194ee <non_conn_mngr_set_adv_data+0x52>
 80194a0:	f646 64b8 	movw	r4, #28344	@ 0x6eb8
 80194a4:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80194a8:	4605      	mov	r5, r0
 80194aa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80194ac:	460e      	mov	r6, r1
 80194ae:	b930      	cbnz	r0, 80194be <non_conn_mngr_set_adv_data+0x22>
 80194b0:	f649 7000 	movw	r0, #40704	@ 0x9f00
 80194b4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80194b8:	f004 fb02 	bl	801dac0 <os_shrd_mem_alloc>
 80194bc:	63a0      	str	r0, [r4, #56]	@ 0x38
 80194be:	f894 1037 	ldrb.w	r1, [r4, #55]	@ 0x37
 80194c2:	2004      	movs	r0, #4
 80194c4:	f8a4 0042 	strh.w	r0, [r4, #66]	@ 0x42
 80194c8:	07c8      	lsls	r0, r1, #31
 80194ca:	f8a4 6048 	strh.w	r6, [r4, #72]	@ 0x48
 80194ce:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
 80194d2:	d10e      	bne.n	80194f2 <non_conn_mngr_set_adv_data+0x56>
 80194d4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80194d6:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 80194da:	4632      	mov	r2, r6
 80194dc:	4408      	add	r0, r1
 80194de:	4629      	mov	r1, r5
 80194e0:	f007 f9b0 	bl	8020844 <ble_memcpy>
 80194e4:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 80194e8:	b3a8      	cbz	r0, 8019556 <non_conn_mngr_set_adv_data+0xba>
 80194ea:	2000      	movs	r0, #0
 80194ec:	e032      	b.n	8019554 <non_conn_mngr_set_adv_data+0xb8>
 80194ee:	2012      	movs	r0, #18
 80194f0:	bd70      	pop	{r4, r5, r6, pc}
 80194f2:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80194f6:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 80194fa:	2802      	cmp	r0, #2
 80194fc:	d11c      	bne.n	8019538 <non_conn_mngr_set_adv_data+0x9c>
 80194fe:	f104 0108 	add.w	r1, r4, #8
 8019502:	2000      	movs	r0, #0
 8019504:	4622      	mov	r2, r4
 8019506:	f002 f806 	bl	801b516 <prvcy_mngr_RPA_Regeneration>
 801950a:	bb18      	cbnz	r0, 8019554 <non_conn_mngr_set_adv_data+0xb8>
 801950c:	f646 7068 	movw	r0, #28520	@ 0x6f68
 8019510:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019514:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8019518:	f646 71a4 	movw	r1, #28580	@ 0x6fa4
 801951c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019520:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019524:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8019528:	f646 61b8 	movw	r1, #28344	@ 0x6eb8
 801952c:	3008      	adds	r0, #8
 801952e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019532:	2206      	movs	r2, #6
 8019534:	f007 f986 	bl	8020844 <ble_memcpy>
 8019538:	7e60      	ldrb	r0, [r4, #25]
 801953a:	2804      	cmp	r0, #4
 801953c:	bf18      	it	ne
 801953e:	2801      	cmpne	r0, #1
 8019540:	d1c8      	bne.n	80194d4 <non_conn_mngr_set_adv_data+0x38>
 8019542:	f104 0108 	add.w	r1, r4, #8
 8019546:	f104 021b 	add.w	r2, r4, #27
 801954a:	2001      	movs	r0, #1
 801954c:	f001 ffe3 	bl	801b516 <prvcy_mngr_RPA_Regeneration>
 8019550:	2800      	cmp	r0, #0
 8019552:	d0bf      	beq.n	80194d4 <non_conn_mngr_set_adv_data+0x38>
 8019554:	bd70      	pop	{r4, r5, r6, pc}
 8019556:	f104 0008 	add.w	r0, r4, #8
 801955a:	f104 0338 	add.w	r3, r4, #56	@ 0x38
 801955e:	2100      	movs	r1, #0
 8019560:	2200      	movs	r2, #0
 8019562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019566:	f000 bbe7 	b.w	8019d38 <pdu_trnsprt_hndlr_form_nconn_adv>
	...

0801956c <non_conn_mngr_adv_enable>:
 801956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019570:	b088      	sub	sp, #32
 8019572:	f646 64b8 	movw	r4, #28344	@ 0x6eb8
 8019576:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801957a:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
 801957e:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8019582:	f894 7032 	ldrb.w	r7, [r4, #50]	@ 0x32
 8019586:	4606      	mov	r6, r0
 8019588:	f104 001b 	add.w	r0, r4, #27
 801958c:	f104 0108 	add.w	r1, r4, #8
 8019590:	f894 8023 	ldrb.w	r8, [r4, #35]	@ 0x23
 8019594:	2500      	movs	r5, #0
 8019596:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 801959a:	2206      	movs	r2, #6
 801959c:	9507      	str	r5, [sp, #28]
 801959e:	e9cd 5505 	strd	r5, r5, [sp, #20]
 80195a2:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80195a6:	f884 7024 	strb.w	r7, [r4, #36]	@ 0x24
 80195aa:	76a3      	strb	r3, [r4, #26]
 80195ac:	f007 f94a 	bl	8020844 <ble_memcpy>
 80195b0:	f104 0035 	add.w	r0, r4, #53	@ 0x35
 80195b4:	f009 f8f5 	bl	80227a2 <db_get_tx_power_value>
 80195b8:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 80195bc:	f001 00fe 	and.w	r0, r1, #254	@ 0xfe
 80195c0:	2802      	cmp	r0, #2
 80195c2:	f646 7068 	movw	r0, #28520	@ 0x6f68
 80195c6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80195ca:	bf04      	itt	eq
 80195cc:	f1a1 0802 	subeq.w	r8, r1, #2
 80195d0:	f880 8027 	strbeq.w	r8, [r0, #39]	@ 0x27
 80195d4:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 80195d8:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 80195dc:	2a01      	cmp	r2, #1
 80195de:	f884 1033 	strb.w	r1, [r4, #51]	@ 0x33
 80195e2:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
 80195e6:	d108      	bne.n	80195fa <non_conn_mngr_adv_enable+0x8e>
 80195e8:	2903      	cmp	r1, #3
 80195ea:	d003      	beq.n	80195f4 <non_conn_mngr_adv_enable+0x88>
 80195ec:	2901      	cmp	r1, #1
 80195ee:	d104      	bne.n	80195fa <non_conn_mngr_adv_enable+0x8e>
 80195f0:	2002      	movs	r0, #2
 80195f2:	e000      	b.n	80195f6 <non_conn_mngr_adv_enable+0x8a>
 80195f4:	2000      	movs	r0, #0
 80195f6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
 80195fa:	7e60      	ldrb	r0, [r4, #25]
 80195fc:	2804      	cmp	r0, #4
 80195fe:	d813      	bhi.n	8019628 <non_conn_mngr_adv_enable+0xbc>
 8019600:	2500      	movs	r5, #0
 8019602:	f04f 0901 	mov.w	r9, #1
 8019606:	f04f 0a00 	mov.w	sl, #0
 801960a:	2701      	movs	r7, #1
 801960c:	e8df f000 	tbb	[pc, r0]
 8019610:	120e0318 	.word	0x120e0318
 8019614:	0005      	.short	0x0005
 8019616:	2006      	movs	r0, #6
 8019618:	6160      	str	r0, [r4, #20]
 801961a:	f04f 0a00 	mov.w	sl, #0
 801961e:	f04f 0902 	mov.w	r9, #2
 8019622:	2501      	movs	r5, #1
 8019624:	2701      	movs	r7, #1
 8019626:	e00b      	b.n	8019640 <non_conn_mngr_adv_enable+0xd4>
 8019628:	2711      	movs	r7, #17
 801962a:	e0d3      	b.n	80197d4 <non_conn_mngr_adv_enable+0x268>
 801962c:	2500      	movs	r5, #0
 801962e:	f04f 0908 	mov.w	r9, #8
 8019632:	e002      	b.n	801963a <non_conn_mngr_adv_enable+0xce>
 8019634:	2500      	movs	r5, #0
 8019636:	f04f 0904 	mov.w	r9, #4
 801963a:	2702      	movs	r7, #2
 801963c:	f04f 0a00 	mov.w	sl, #0
 8019640:	b12e      	cbz	r6, 801964e <non_conn_mngr_adv_enable+0xe2>
 8019642:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8019646:	2801      	cmp	r0, #1
 8019648:	d109      	bne.n	801965e <non_conn_mngr_adv_enable+0xf2>
 801964a:	2700      	movs	r7, #0
 801964c:	e0c2      	b.n	80197d4 <non_conn_mngr_adv_enable+0x268>
 801964e:	f7fa fdfa 	bl	8014246 <llhwc_is_dtm_enabled>
 8019652:	b1c8      	cbz	r0, 8019688 <non_conn_mngr_adv_enable+0x11c>
 8019654:	2043      	movs	r0, #67	@ 0x43
 8019656:	f002 f9ad 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801965a:	270c      	movs	r7, #12
 801965c:	e0ba      	b.n	80197d4 <non_conn_mngr_adv_enable+0x268>
 801965e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8019660:	f7f4 ff16 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8019664:	4607      	mov	r7, r0
 8019666:	2800      	cmp	r0, #0
 8019668:	f040 80b4 	bne.w	80197d4 <non_conn_mngr_adv_enable+0x268>
 801966c:	2100      	movs	r1, #0
 801966e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8019670:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8019672:	2100      	movs	r1, #0
 8019674:	f002 f8da 	bl	801b82c <state_mngr_update_state>
 8019678:	4607      	mov	r7, r0
 801967a:	2800      	cmp	r0, #0
 801967c:	f040 80aa 	bne.w	80197d4 <non_conn_mngr_adv_enable+0x268>
 8019680:	2001      	movs	r0, #1
 8019682:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 8019686:	e7e0      	b.n	801964a <non_conn_mngr_adv_enable+0xde>
 8019688:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 801968c:	2800      	cmp	r0, #0
 801968e:	d0dc      	beq.n	801964a <non_conn_mngr_adv_enable+0xde>
 8019690:	4638      	mov	r0, r7
 8019692:	f002 f853 	bl	801b73c <state_mngr_alloc_state_mchn>
 8019696:	62a0      	str	r0, [r4, #40]	@ 0x28
 8019698:	b3b0      	cbz	r0, 8019708 <non_conn_mngr_adv_enable+0x19c>
 801969a:	f646 66b8 	movw	r6, #28344	@ 0x6eb8
 801969e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80196a2:	fa5f f088 	uxtb.w	r0, r8
 80196a6:	4631      	mov	r1, r6
 80196a8:	f009 f81a 	bl	80226e0 <db_get_src_address>
 80196ac:	4607      	mov	r7, r0
 80196ae:	2800      	cmp	r0, #0
 80196b0:	f040 8090 	bne.w	80197d4 <non_conn_mngr_adv_enable+0x268>
 80196b4:	f896 0023 	ldrb.w	r0, [r6, #35]	@ 0x23
 80196b8:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 80196bc:	2802      	cmp	r0, #2
 80196be:	d108      	bne.n	80196d2 <non_conn_mngr_adv_enable+0x166>
 80196c0:	f106 0008 	add.w	r0, r6, #8
 80196c4:	4631      	mov	r1, r6
 80196c6:	f001 fe7f 	bl	801b3c8 <prvcy_mngr_get_local_rpa>
 80196ca:	b910      	cbnz	r0, 80196d2 <non_conn_mngr_adv_enable+0x166>
 80196cc:	2001      	movs	r0, #1
 80196ce:	f886 0023 	strb.w	r0, [r6, #35]	@ 0x23
 80196d2:	b33d      	cbz	r5, 8019724 <non_conn_mngr_adv_enable+0x1b8>
 80196d4:	f106 0708 	add.w	r7, r6, #8
 80196d8:	aa07      	add	r2, sp, #28
 80196da:	2001      	movs	r0, #1
 80196dc:	4639      	mov	r1, r7
 80196de:	2300      	movs	r3, #0
 80196e0:	f001 fd68 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 80196e4:	9807      	ldr	r0, [sp, #28]
 80196e6:	b1e8      	cbz	r0, 8019724 <non_conn_mngr_adv_enable+0x1b8>
 80196e8:	a903      	add	r1, sp, #12
 80196ea:	2210      	movs	r2, #16
 80196ec:	f007 f932 	bl	8020954 <ble_memcmp>
 80196f0:	b1c0      	cbz	r0, 8019724 <non_conn_mngr_adv_enable+0x1b8>
 80196f2:	f106 081b 	add.w	r8, r6, #27
 80196f6:	4638      	mov	r0, r7
 80196f8:	4641      	mov	r1, r8
 80196fa:	2206      	movs	r2, #6
 80196fc:	f007 f92a 	bl	8020954 <ble_memcmp>
 8019700:	b138      	cbz	r0, 8019712 <non_conn_mngr_adv_enable+0x1a6>
 8019702:	2001      	movs	r0, #1
 8019704:	76b0      	strb	r0, [r6, #26]
 8019706:	e00d      	b.n	8019724 <non_conn_mngr_adv_enable+0x1b8>
 8019708:	2042      	movs	r0, #66	@ 0x42
 801970a:	f002 f953 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801970e:	2707      	movs	r7, #7
 8019710:	e060      	b.n	80197d4 <non_conn_mngr_adv_enable+0x268>
 8019712:	9807      	ldr	r0, [sp, #28]
 8019714:	4641      	mov	r1, r8
 8019716:	f001 fe87 	bl	801b428 <prvcy_mngr_addr_gen>
 801971a:	4607      	mov	r7, r0
 801971c:	2001      	movs	r0, #1
 801971e:	2f00      	cmp	r7, #0
 8019720:	76b0      	strb	r0, [r6, #26]
 8019722:	d157      	bne.n	80197d4 <non_conn_mngr_adv_enable+0x268>
 8019724:	7e71      	ldrb	r1, [r6, #25]
 8019726:	2004      	movs	r0, #4
 8019728:	f8a6 0042 	strh.w	r0, [r6, #66]	@ 0x42
 801972c:	2901      	cmp	r1, #1
 801972e:	f04f 0000 	mov.w	r0, #0
 8019732:	bf1c      	itt	ne
 8019734:	2904      	cmpne	r1, #4
 8019736:	f8b6 0048 	ldrhne.w	r0, [r6, #72]	@ 0x48
 801973a:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 801973c:	f8a6 0044 	strh.w	r0, [r6, #68]	@ 0x44
 8019740:	b931      	cbnz	r1, 8019750 <non_conn_mngr_adv_enable+0x1e4>
 8019742:	f649 7000 	movw	r0, #40704	@ 0x9f00
 8019746:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801974a:	f004 f9b9 	bl	801dac0 <os_shrd_mem_alloc>
 801974e:	63b0      	str	r0, [r6, #56]	@ 0x38
 8019750:	f106 0008 	add.w	r0, r6, #8
 8019754:	f106 0338 	add.w	r3, r6, #56	@ 0x38
 8019758:	2100      	movs	r1, #0
 801975a:	2200      	movs	r2, #0
 801975c:	f000 faec 	bl	8019d38 <pdu_trnsprt_hndlr_form_nconn_adv>
 8019760:	4607      	mov	r7, r0
 8019762:	bbb8      	cbnz	r0, 80197d4 <non_conn_mngr_adv_enable+0x268>
 8019764:	7e70      	ldrb	r0, [r6, #25]
 8019766:	f010 0ffd 	tst.w	r0, #253	@ 0xfd
 801976a:	d016      	beq.n	801979a <non_conn_mngr_adv_enable+0x22e>
 801976c:	f249 73dd 	movw	r3, #38877	@ 0x97dd
 8019770:	2700      	movs	r7, #0
 8019772:	4648      	mov	r0, r9
 8019774:	4651      	mov	r1, sl
 8019776:	f6c0 0301 	movt	r3, #2049	@ 0x801
 801977a:	4632      	mov	r2, r6
 801977c:	e9cd 7700 	strd	r7, r7, [sp]
 8019780:	9702      	str	r7, [sp, #8]
 8019782:	f7f4 f88a 	bl	800d89a <evnt_schdlr_rgstr_evnt>
 8019786:	2101      	movs	r1, #1
 8019788:	62f0      	str	r0, [r6, #44]	@ 0x2c
 801978a:	2800      	cmp	r0, #0
 801978c:	bf18      	it	ne
 801978e:	2001      	movne	r0, #1
 8019790:	f002 f8c5 	bl	801b91e <bsp_assert>
 8019794:	f886 7034 	strb.w	r7, [r6, #52]	@ 0x34
 8019798:	e01c      	b.n	80197d4 <non_conn_mngr_adv_enable+0x268>
 801979a:	2004      	movs	r0, #4
 801979c:	f8a6 0056 	strh.w	r0, [r6, #86]	@ 0x56
 80197a0:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80197a2:	f8b6 105c 	ldrh.w	r1, [r6, #92]	@ 0x5c
 80197a6:	f8a6 1058 	strh.w	r1, [r6, #88]	@ 0x58
 80197aa:	b930      	cbnz	r0, 80197ba <non_conn_mngr_adv_enable+0x24e>
 80197ac:	f649 7000 	movw	r0, #40704	@ 0x9f00
 80197b0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80197b4:	f004 f984 	bl	801dac0 <os_shrd_mem_alloc>
 80197b8:	64f0      	str	r0, [r6, #76]	@ 0x4c
 80197ba:	f896 0023 	ldrb.w	r0, [r6, #35]	@ 0x23
 80197be:	2700      	movs	r7, #0
 80197c0:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
 80197c4:	2204      	movs	r2, #4
 80197c6:	2300      	movs	r3, #0
 80197c8:	9700      	str	r7, [sp, #0]
 80197ca:	f000 fc33 	bl	801a034 <pdu_trnsprt_hndlr_form_nconn_scan>
 80197ce:	4607      	mov	r7, r0
 80197d0:	2800      	cmp	r0, #0
 80197d2:	d0cb      	beq.n	801976c <non_conn_mngr_adv_enable+0x200>
 80197d4:	4638      	mov	r0, r7
 80197d6:	b008      	add	sp, #32
 80197d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080197dc <non_conn_mngr_adv_cbk>:
 80197dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80197e0:	b09b      	sub	sp, #108	@ 0x6c
 80197e2:	f891 702b 	ldrb.w	r7, [r1, #43]	@ 0x2b
 80197e6:	2080      	movs	r0, #128	@ 0x80
 80197e8:	460c      	mov	r4, r1
 80197ea:	f002 f8df 	bl	801b9ac <bsp_debug_gpio_set>
 80197ee:	4620      	mov	r0, r4
 80197f0:	2101      	movs	r1, #1
 80197f2:	2c00      	cmp	r4, #0
 80197f4:	bf18      	it	ne
 80197f6:	2001      	movne	r0, #1
 80197f8:	f002 f891 	bl	801b91e <bsp_assert>
 80197fc:	a80d      	add	r0, sp, #52	@ 0x34
 80197fe:	2100      	movs	r1, #0
 8019800:	2238      	movs	r2, #56	@ 0x38
 8019802:	f007 f86f 	bl	80208e4 <ble_memset>
 8019806:	f894 0020 	ldrb.w	r0, [r4, #32]
 801980a:	2800      	cmp	r0, #0
 801980c:	d044      	beq.n	8019898 <non_conn_mngr_adv_cbk+0xbc>
 801980e:	2801      	cmp	r0, #1
 8019810:	f040 816b 	bne.w	8019aea <non_conn_mngr_adv_cbk+0x30e>
 8019814:	68a0      	ldr	r0, [r4, #8]
 8019816:	f000 fb89 	bl	8019f2c <pdu_trnsprt_hndlr_get_pdu_type>
 801981a:	4606      	mov	r6, r0
 801981c:	2803      	cmp	r0, #3
 801981e:	d16d      	bne.n	80198fc <non_conn_mngr_adv_cbk+0x120>
 8019820:	f646 69b8 	movw	r9, #28344	@ 0x6eb8
 8019824:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 8019828:	f899 0019 	ldrb.w	r0, [r9, #25]
 801982c:	f646 7568 	movw	r5, #28520	@ 0x6f68
 8019830:	1e41      	subs	r1, r0, #1
 8019832:	3804      	subs	r0, #4
 8019834:	fab1 f181 	clz	r1, r1
 8019838:	fab0 f080 	clz	r0, r0
 801983c:	0949      	lsrs	r1, r1, #5
 801983e:	0940      	lsrs	r0, r0, #5
 8019840:	4308      	orrs	r0, r1
 8019842:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8019846:	2f00      	cmp	r7, #0
 8019848:	f885 0028 	strb.w	r0, [r5, #40]	@ 0x28
 801984c:	d074      	beq.n	8019938 <non_conn_mngr_adv_cbk+0x15c>
 801984e:	2f01      	cmp	r7, #1
 8019850:	f040 809a 	bne.w	8019988 <non_conn_mngr_adv_cbk+0x1ac>
 8019854:	2e03      	cmp	r6, #3
 8019856:	f040 808f 	bne.w	8019978 <non_conn_mngr_adv_cbk+0x19c>
 801985a:	68a0      	ldr	r0, [r4, #8]
 801985c:	2206      	movs	r2, #6
 801985e:	6800      	ldr	r0, [r0, #0]
 8019860:	1d01      	adds	r1, r0, #4
 8019862:	4628      	mov	r0, r5
 8019864:	f006 ffee 	bl	8020844 <ble_memcpy>
 8019868:	68a0      	ldr	r0, [r4, #8]
 801986a:	6800      	ldr	r0, [r0, #0]
 801986c:	7800      	ldrb	r0, [r0, #0]
 801986e:	622d      	str	r5, [r5, #32]
 8019870:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8019874:	f885 0025 	strb.w	r0, [r5, #37]	@ 0x25
 8019878:	f885 0026 	strb.w	r0, [r5, #38]	@ 0x26
 801987c:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 8019880:	2801      	cmp	r0, #1
 8019882:	f04f 0003 	mov.w	r0, #3
 8019886:	f885 0029 	strb.w	r0, [r5, #41]	@ 0x29
 801988a:	d175      	bne.n	8019978 <non_conn_mngr_adv_cbk+0x19c>
 801988c:	f899 1033 	ldrb.w	r1, [r9, #51]	@ 0x33
 8019890:	2001      	movs	r0, #1
 8019892:	f001 f98b 	bl	801abac <prvcy_mngr_addr_hndlr>
 8019896:	e06f      	b.n	8019978 <non_conn_mngr_adv_cbk+0x19c>
 8019898:	f646 64b8 	movw	r4, #28344	@ 0x6eb8
 801989c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80198a0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80198a2:	f7f4 fdf5 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 80198a6:	2800      	cmp	r0, #0
 80198a8:	f040 8115 	bne.w	8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 80198ac:	2100      	movs	r1, #0
 80198ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80198b0:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80198b2:	2100      	movs	r1, #0
 80198b4:	f001 ffba 	bl	801b82c <state_mngr_update_state>
 80198b8:	2800      	cmp	r0, #0
 80198ba:	f040 810c 	bne.w	8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 80198be:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80198c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80198c6:	6800      	ldr	r0, [r0, #0]
 80198c8:	68c1      	ldr	r1, [r0, #12]
 80198ca:	b199      	cbz	r1, 80198f4 <non_conn_mngr_adv_cbk+0x118>
 80198cc:	223c      	movs	r2, #60	@ 0x3c
 80198ce:	7ea3      	ldrb	r3, [r4, #26]
 80198d0:	2100      	movs	r1, #0
 80198d2:	9206      	str	r2, [sp, #24]
 80198d4:	2201      	movs	r2, #1
 80198d6:	910c      	str	r1, [sp, #48]	@ 0x30
 80198d8:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 80198dc:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
 80198e0:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
 80198e4:	f104 021b 	add.w	r2, r4, #27
 80198e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80198ea:	9207      	str	r2, [sp, #28]
 80198ec:	68c2      	ldr	r2, [r0, #12]
 80198ee:	a806      	add	r0, sp, #24
 80198f0:	9108      	str	r1, [sp, #32]
 80198f2:	4790      	blx	r2
 80198f4:	2001      	movs	r0, #1
 80198f6:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
 80198fa:	e0f6      	b.n	8019aea <non_conn_mngr_adv_cbk+0x30e>
 80198fc:	68a0      	ldr	r0, [r4, #8]
 80198fe:	2e05      	cmp	r6, #5
 8019900:	d113      	bne.n	801992a <non_conn_mngr_adv_cbk+0x14e>
 8019902:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 8019906:	4641      	mov	r1, r8
 8019908:	2205      	movs	r2, #5
 801990a:	f000 fb24 	bl	8019f56 <pdu_trnsprt_hndlr_parse_conn_req>
 801990e:	4605      	mov	r5, r0
 8019910:	4640      	mov	r0, r8
 8019912:	f000 f9bb 	bl	8019c8c <non_conn_mngr_check_conn_params>
 8019916:	b110      	cbz	r0, 801991e <non_conn_mngr_adv_cbk+0x142>
 8019918:	2d00      	cmp	r5, #0
 801991a:	f43f af81 	beq.w	8019820 <non_conn_mngr_adv_cbk+0x44>
 801991e:	f646 60b8 	movw	r0, #28344	@ 0x6eb8
 8019922:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019926:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8019928:	e028      	b.n	801997c <non_conn_mngr_adv_cbk+0x1a0>
 801992a:	f000 ffe1 	bl	801a8f0 <free_buff_hdr>
 801992e:	2000      	movs	r0, #0
 8019930:	2101      	movs	r1, #1
 8019932:	f001 fff4 	bl	801b91e <bsp_assert>
 8019936:	e0ce      	b.n	8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 8019938:	2e05      	cmp	r6, #5
 801993a:	d11d      	bne.n	8019978 <non_conn_mngr_adv_cbk+0x19c>
 801993c:	2005      	movs	r0, #5
 801993e:	f885 0029 	strb.w	r0, [r5, #41]	@ 0x29
 8019942:	68a0      	ldr	r0, [r4, #8]
 8019944:	2206      	movs	r2, #6
 8019946:	6800      	ldr	r0, [r0, #0]
 8019948:	1d01      	adds	r1, r0, #4
 801994a:	4628      	mov	r0, r5
 801994c:	f006 ff7a 	bl	8020844 <ble_memcpy>
 8019950:	68a0      	ldr	r0, [r4, #8]
 8019952:	f895 1036 	ldrb.w	r1, [r5, #54]	@ 0x36
 8019956:	6800      	ldr	r0, [r0, #0]
 8019958:	2901      	cmp	r1, #1
 801995a:	7800      	ldrb	r0, [r0, #0]
 801995c:	622d      	str	r5, [r5, #32]
 801995e:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8019962:	f885 0025 	strb.w	r0, [r5, #37]	@ 0x25
 8019966:	f885 0026 	strb.w	r0, [r5, #38]	@ 0x26
 801996a:	d10d      	bne.n	8019988 <non_conn_mngr_adv_cbk+0x1ac>
 801996c:	f899 1033 	ldrb.w	r1, [r9, #51]	@ 0x33
 8019970:	2000      	movs	r0, #0
 8019972:	f001 f91b 	bl	801abac <prvcy_mngr_addr_hndlr>
 8019976:	b138      	cbz	r0, 8019988 <non_conn_mngr_adv_cbk+0x1ac>
 8019978:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 801997c:	f7f4 fee6 	bl	800e74c <evnt_schdlr_evnt_updtd>
 8019980:	68a0      	ldr	r0, [r4, #8]
 8019982:	f000 ffb5 	bl	801a8f0 <free_buff_hdr>
 8019986:	e0b0      	b.n	8019aea <non_conn_mngr_adv_cbk+0x30e>
 8019988:	f895 0026 	ldrb.w	r0, [r5, #38]	@ 0x26
 801998c:	6a29      	ldr	r1, [r5, #32]
 801998e:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 8019992:	f88d 0057 	strb.w	r0, [sp, #87]	@ 0x57
 8019996:	4640      	mov	r0, r8
 8019998:	2206      	movs	r2, #6
 801999a:	f006 ff53 	bl	8020844 <ble_memcpy>
 801999e:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 80199a2:	2801      	cmp	r0, #1
 80199a4:	d134      	bne.n	8019a10 <non_conn_mngr_adv_cbk+0x234>
 80199a6:	f895 1026 	ldrb.w	r1, [r5, #38]	@ 0x26
 80199aa:	6a2a      	ldr	r2, [r5, #32]
 80199ac:	ab06      	add	r3, sp, #24
 80199ae:	2001      	movs	r0, #1
 80199b0:	f7fa f907 	bl	8013bc2 <llhwc_lst_search>
 80199b4:	2800      	cmp	r0, #0
 80199b6:	f040 808e 	bne.w	8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 80199ba:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80199be:	07c0      	lsls	r0, r0, #31
 80199c0:	d113      	bne.n	80199ea <non_conn_mngr_adv_cbk+0x20e>
 80199c2:	f646 7268 	movw	r2, #28520	@ 0x6f68
 80199c6:	ab06      	add	r3, sp, #24
 80199c8:	2003      	movs	r0, #3
 80199ca:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80199ce:	2101      	movs	r1, #1
 80199d0:	f7fa f8f7 	bl	8013bc2 <llhwc_lst_search>
 80199d4:	2800      	cmp	r0, #0
 80199d6:	d17e      	bne.n	8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 80199d8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80199dc:	07c8      	lsls	r0, r1, #31
 80199de:	d1cb      	bne.n	8019978 <non_conn_mngr_adv_cbk+0x19c>
 80199e0:	2001      	movs	r0, #1
 80199e2:	2200      	movs	r2, #0
 80199e4:	f7fa fb23 	bl	801402e <llhwc_lst_edit_indicators>
 80199e8:	e7c6      	b.n	8019978 <non_conn_mngr_adv_cbk+0x19c>
 80199ea:	f899 0032 	ldrb.w	r0, [r9, #50]	@ 0x32
 80199ee:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 80199f2:	2801      	cmp	r0, #1
 80199f4:	d10c      	bne.n	8019a10 <non_conn_mngr_adv_cbk+0x234>
 80199f6:	f895 1026 	ldrb.w	r1, [r5, #38]	@ 0x26
 80199fa:	6a2a      	ldr	r2, [r5, #32]
 80199fc:	ab06      	add	r3, sp, #24
 80199fe:	2000      	movs	r0, #0
 8019a00:	f7fa f8df 	bl	8013bc2 <llhwc_lst_search>
 8019a04:	2800      	cmp	r0, #0
 8019a06:	d166      	bne.n	8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 8019a08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8019a0c:	07c0      	lsls	r0, r0, #31
 8019a0e:	d1b3      	bne.n	8019978 <non_conn_mngr_adv_cbk+0x19c>
 8019a10:	68a0      	ldr	r0, [r4, #8]
 8019a12:	f000 ff6d 	bl	801a8f0 <free_buff_hdr>
 8019a16:	2e05      	cmp	r6, #5
 8019a18:	d128      	bne.n	8019a6c <non_conn_mngr_adv_cbk+0x290>
 8019a1a:	f899 0019 	ldrb.w	r0, [r9, #25]
 8019a1e:	2804      	cmp	r0, #4
 8019a20:	bf18      	it	ne
 8019a22:	2801      	cmpne	r0, #1
 8019a24:	d127      	bne.n	8019a76 <non_conn_mngr_adv_cbk+0x29a>
 8019a26:	f109 061b 	add.w	r6, r9, #27
 8019a2a:	a90d      	add	r1, sp, #52	@ 0x34
 8019a2c:	4630      	mov	r0, r6
 8019a2e:	2206      	movs	r2, #6
 8019a30:	f006 ff90 	bl	8020954 <ble_memcmp>
 8019a34:	b928      	cbnz	r0, 8019a42 <non_conn_mngr_adv_cbk+0x266>
 8019a36:	f899 0031 	ldrb.w	r0, [r9, #49]	@ 0x31
 8019a3a:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 8019a3e:	4288      	cmp	r0, r1
 8019a40:	d019      	beq.n	8019a76 <non_conn_mngr_adv_cbk+0x29a>
 8019a42:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 8019a46:	b188      	cbz	r0, 8019a6c <non_conn_mngr_adv_cbk+0x290>
 8019a48:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 8019a4c:	f899 0031 	ldrb.w	r0, [r9, #49]	@ 0x31
 8019a50:	1e8a      	subs	r2, r1, #2
 8019a52:	4282      	cmp	r2, r0
 8019a54:	d106      	bne.n	8019a64 <non_conn_mngr_adv_cbk+0x288>
 8019a56:	a80d      	add	r0, sp, #52	@ 0x34
 8019a58:	4631      	mov	r1, r6
 8019a5a:	f001 fd96 	bl	801b58a <prvcy_mngr_chck_rpa>
 8019a5e:	b150      	cbz	r0, 8019a76 <non_conn_mngr_adv_cbk+0x29a>
 8019a60:	f89d 1057 	ldrb.w	r1, [sp, #87]	@ 0x57
 8019a64:	a80d      	add	r0, sp, #52	@ 0x34
 8019a66:	f001 fdaf 	bl	801b5c8 <prvcy_mngr_chck_dev_prvcy_mode>
 8019a6a:	b120      	cbz	r0, 8019a76 <non_conn_mngr_adv_cbk+0x29a>
 8019a6c:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 8019a70:	f7f4 fe6c 	bl	800e74c <evnt_schdlr_evnt_updtd>
 8019a74:	e039      	b.n	8019aea <non_conn_mngr_adv_cbk+0x30e>
 8019a76:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 8019a7a:	2105      	movs	r1, #5
 8019a7c:	f001 fed6 	bl	801b82c <state_mngr_update_state>
 8019a80:	bb48      	cbnz	r0, 8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 8019a82:	f108 0008 	add.w	r0, r8, #8
 8019a86:	4621      	mov	r1, r4
 8019a88:	f003 fcc7 	bl	801d41a <ble_time_set>
 8019a8c:	2001      	movs	r0, #1
 8019a8e:	2401      	movs	r4, #1
 8019a90:	f7f4 ff8a 	bl	800e9a8 <evnt_schdlr_set_pndg_evnts>
 8019a94:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 8019a98:	f7f4 fcfa 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8019a9c:	b9d8      	cbnz	r0, 8019ad6 <non_conn_mngr_adv_cbk+0x2fa>
 8019a9e:	f899 2023 	ldrb.w	r2, [r9, #35]	@ 0x23
 8019aa2:	2100      	movs	r1, #0
 8019aa4:	f8d9 0028 	ldr.w	r0, [r9, #40]	@ 0x28
 8019aa8:	f895 3036 	ldrb.w	r3, [r5, #54]	@ 0x36
 8019aac:	f8c9 102c 	str.w	r1, [r9, #44]	@ 0x2c
 8019ab0:	f899 6030 	ldrb.w	r6, [r9, #48]	@ 0x30
 8019ab4:	f889 4034 	strb.w	r4, [r9, #52]	@ 0x34
 8019ab8:	f240 44e2 	movw	r4, #1250	@ 0x4e2
 8019abc:	e88d 0244 	stmia.w	sp, {r2, r6, r9}
 8019ac0:	9103      	str	r1, [sp, #12]
 8019ac2:	a90d      	add	r1, sp, #52	@ 0x34
 8019ac4:	462a      	mov	r2, r5
 8019ac6:	9404      	str	r4, [sp, #16]
 8019ac8:	f007 fe85 	bl	80217d6 <conn_mngr_slave_start_connection>
 8019acc:	4604      	mov	r4, r0
 8019ace:	2000      	movs	r0, #0
 8019ad0:	f7f4 ff6a 	bl	800e9a8 <evnt_schdlr_set_pndg_evnts>
 8019ad4:	b17c      	cbz	r4, 8019af6 <non_conn_mngr_adv_cbk+0x31a>
 8019ad6:	b947      	cbnz	r7, 8019aea <non_conn_mngr_adv_cbk+0x30e>
 8019ad8:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8019adc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019ae0:	6800      	ldr	r0, [r0, #0]
 8019ae2:	6801      	ldr	r1, [r0, #0]
 8019ae4:	b109      	cbz	r1, 8019aea <non_conn_mngr_adv_cbk+0x30e>
 8019ae6:	2003      	movs	r0, #3
 8019ae8:	4788      	blx	r1
 8019aea:	2080      	movs	r0, #128	@ 0x80
 8019aec:	f001 ff60 	bl	801b9b0 <bsp_debug_gpio_clear>
 8019af0:	b01b      	add	sp, #108	@ 0x6c
 8019af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019af6:	2001      	movs	r0, #1
 8019af8:	f889 0034 	strb.w	r0, [r9, #52]	@ 0x34
 8019afc:	e7f5      	b.n	8019aea <non_conn_mngr_adv_cbk+0x30e>

08019afe <non_conn_mngr_event_status_check>:
 8019afe:	b580      	push	{r7, lr}
 8019b00:	f646 60b8 	movw	r0, #28344	@ 0x6eb8
 8019b04:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019b08:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8019b0c:	b178      	cbz	r0, 8019b2e <non_conn_mngr_event_status_check+0x30>
 8019b0e:	f646 6058 	movw	r0, #28248	@ 0x6e58
 8019b12:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019b16:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8019b1a:	b140      	cbz	r0, 8019b2e <non_conn_mngr_event_status_check+0x30>
 8019b1c:	f646 7018 	movw	r0, #28440	@ 0x6f18
 8019b20:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019b24:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8019b28:	b108      	cbz	r0, 8019b2e <non_conn_mngr_event_status_check+0x30>
 8019b2a:	2000      	movs	r0, #0
 8019b2c:	bd80      	pop	{r7, pc}
 8019b2e:	2043      	movs	r0, #67	@ 0x43
 8019b30:	f001 ff40 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8019b34:	200c      	movs	r0, #12
 8019b36:	bd80      	pop	{r7, pc}

08019b38 <non_conn_mngr_update_rpa_src_addr>:
 8019b38:	b5b0      	push	{r4, r5, r7, lr}
 8019b3a:	b086      	sub	sp, #24
 8019b3c:	f646 64b8 	movw	r4, #28344	@ 0x6eb8
 8019b40:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8019b44:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	f04f 0000 	mov.w	r0, #0
 8019b4e:	9005      	str	r0, [sp, #20]
 8019b50:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8019b54:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8019b58:	d10c      	bne.n	8019b74 <non_conn_mngr_update_rpa_src_addr+0x3c>
 8019b5a:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8019b5e:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8019b62:	2802      	cmp	r0, #2
 8019b64:	d106      	bne.n	8019b74 <non_conn_mngr_update_rpa_src_addr+0x3c>
 8019b66:	f104 0508 	add.w	r5, r4, #8
 8019b6a:	4628      	mov	r0, r5
 8019b6c:	4621      	mov	r1, r4
 8019b6e:	f001 fc2b 	bl	801b3c8 <prvcy_mngr_get_local_rpa>
 8019b72:	b110      	cbz	r0, 8019b7a <non_conn_mngr_update_rpa_src_addr+0x42>
 8019b74:	2000      	movs	r0, #0
 8019b76:	b006      	add	sp, #24
 8019b78:	bdb0      	pop	{r4, r5, r7, pc}
 8019b7a:	7e60      	ldrb	r0, [r4, #25]
 8019b7c:	2804      	cmp	r0, #4
 8019b7e:	bf18      	it	ne
 8019b80:	2801      	cmpne	r0, #1
 8019b82:	d1f7      	bne.n	8019b74 <non_conn_mngr_update_rpa_src_addr+0x3c>
 8019b84:	aa05      	add	r2, sp, #20
 8019b86:	2001      	movs	r0, #1
 8019b88:	4629      	mov	r1, r5
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	f001 fb12 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 8019b90:	9805      	ldr	r0, [sp, #20]
 8019b92:	2800      	cmp	r0, #0
 8019b94:	d0ee      	beq.n	8019b74 <non_conn_mngr_update_rpa_src_addr+0x3c>
 8019b96:	a901      	add	r1, sp, #4
 8019b98:	2210      	movs	r2, #16
 8019b9a:	f006 fedb 	bl	8020954 <ble_memcmp>
 8019b9e:	2800      	cmp	r0, #0
 8019ba0:	d0e8      	beq.n	8019b74 <non_conn_mngr_update_rpa_src_addr+0x3c>
 8019ba2:	9805      	ldr	r0, [sp, #20]
 8019ba4:	f104 011b 	add.w	r1, r4, #27
 8019ba8:	f001 fc3e 	bl	801b428 <prvcy_mngr_addr_gen>
 8019bac:	e7e2      	b.n	8019b74 <non_conn_mngr_update_rpa_src_addr+0x3c>

08019bae <non_conn_mngr_set_random_address>:
 8019bae:	b580      	push	{r7, lr}
 8019bb0:	f646 61b8 	movw	r1, #28344	@ 0x6eb8
 8019bb4:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019bb8:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8019bbc:	b189      	cbz	r1, 8019be2 <non_conn_mngr_set_random_address+0x34>
 8019bbe:	f646 6158 	movw	r1, #28248	@ 0x6e58
 8019bc2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019bc6:	f891 1029 	ldrb.w	r1, [r1, #41]	@ 0x29
 8019bca:	b151      	cbz	r1, 8019be2 <non_conn_mngr_set_random_address+0x34>
 8019bcc:	f646 7118 	movw	r1, #28440	@ 0x6f18
 8019bd0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8019bd4:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8019bd8:	b119      	cbz	r1, 8019be2 <non_conn_mngr_set_random_address+0x34>
 8019bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019bde:	f008 beb0 	b.w	8022942 <db_set_random_address>
 8019be2:	2043      	movs	r0, #67	@ 0x43
 8019be4:	f001 fee6 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8019be8:	200c      	movs	r0, #12
 8019bea:	bd80      	pop	{r7, pc}

08019bec <non_conn_mngr_get_link_status>:
 8019bec:	b570      	push	{r4, r5, r6, lr}
 8019bee:	4614      	mov	r4, r2
 8019bf0:	f646 62b8 	movw	r2, #28344	@ 0x6eb8
 8019bf4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8019bf8:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8019bfc:	460d      	mov	r5, r1
 8019bfe:	4606      	mov	r6, r0
 8019c00:	b9ea      	cbnz	r2, 8019c3e <non_conn_mngr_get_link_status+0x52>
 8019c02:	e00b      	b.n	8019c1c <non_conn_mngr_get_link_status+0x30>
 8019c04:	3001      	adds	r0, #1
 8019c06:	b2c1      	uxtb	r1, r0
 8019c08:	7020      	strb	r0, [r4, #0]
 8019c0a:	290a      	cmp	r1, #10
 8019c0c:	f04f 0000 	mov.w	r0, #0
 8019c10:	f04f 0101 	mov.w	r1, #1
 8019c14:	bf38      	it	cc
 8019c16:	2001      	movcc	r0, #1
 8019c18:	f001 fe81 	bl	801b91e <bsp_assert>
 8019c1c:	7820      	ldrb	r0, [r4, #0]
 8019c1e:	5c31      	ldrb	r1, [r6, r0]
 8019c20:	2900      	cmp	r1, #0
 8019c22:	d1ef      	bne.n	8019c04 <non_conn_mngr_get_link_status+0x18>
 8019c24:	2101      	movs	r1, #1
 8019c26:	5431      	strb	r1, [r6, r0]
 8019c28:	7820      	ldrb	r0, [r4, #0]
 8019c2a:	21ff      	movs	r1, #255	@ 0xff
 8019c2c:	f805 1010 	strb.w	r1, [r5, r0, lsl #1]
 8019c30:	7820      	ldrb	r0, [r4, #0]
 8019c32:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8019c36:	7041      	strb	r1, [r0, #1]
 8019c38:	7820      	ldrb	r0, [r4, #0]
 8019c3a:	3001      	adds	r0, #1
 8019c3c:	7020      	strb	r0, [r4, #0]
 8019c3e:	f646 6058 	movw	r0, #28248	@ 0x6e58
 8019c42:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8019c46:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8019c4a:	2800      	cmp	r0, #0
 8019c4c:	bf18      	it	ne
 8019c4e:	bd70      	popne	{r4, r5, r6, pc}
 8019c50:	7820      	ldrb	r0, [r4, #0]
 8019c52:	5c31      	ldrb	r1, [r6, r0]
 8019c54:	b161      	cbz	r1, 8019c70 <non_conn_mngr_get_link_status+0x84>
 8019c56:	3001      	adds	r0, #1
 8019c58:	b2c1      	uxtb	r1, r0
 8019c5a:	7020      	strb	r0, [r4, #0]
 8019c5c:	290a      	cmp	r1, #10
 8019c5e:	f04f 0000 	mov.w	r0, #0
 8019c62:	f04f 0101 	mov.w	r1, #1
 8019c66:	bf38      	it	cc
 8019c68:	2001      	movcc	r0, #1
 8019c6a:	f001 fe58 	bl	801b91e <bsp_assert>
 8019c6e:	e7ef      	b.n	8019c50 <non_conn_mngr_get_link_status+0x64>
 8019c70:	2103      	movs	r1, #3
 8019c72:	5431      	strb	r1, [r6, r0]
 8019c74:	7820      	ldrb	r0, [r4, #0]
 8019c76:	21ff      	movs	r1, #255	@ 0xff
 8019c78:	f805 1010 	strb.w	r1, [r5, r0, lsl #1]
 8019c7c:	7820      	ldrb	r0, [r4, #0]
 8019c7e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8019c82:	7041      	strb	r1, [r0, #1]
 8019c84:	7820      	ldrb	r0, [r4, #0]
 8019c86:	3001      	adds	r0, #1
 8019c88:	7020      	strb	r0, [r4, #0]
 8019c8a:	bd70      	pop	{r4, r5, r6, pc}

08019c8c <non_conn_mngr_check_conn_params>:
 8019c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c90:	8b42      	ldrh	r2, [r0, #26]
 8019c92:	f640 4377 	movw	r3, #3191	@ 0xc77
 8019c96:	3a0a      	subs	r2, #10
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	8ac3      	ldrh	r3, [r0, #22]
 8019c9c:	f04f 0200 	mov.w	r2, #0
 8019ca0:	f1a3 0106 	sub.w	r1, r3, #6
 8019ca4:	b289      	uxth	r1, r1
 8019ca6:	f640 447b 	movw	r4, #3195	@ 0xc7b
 8019caa:	f8b0 c018 	ldrh.w	ip, [r0, #24]
 8019cae:	bf38      	it	cc
 8019cb0:	2201      	movcc	r2, #1
 8019cb2:	42a1      	cmp	r1, r4
 8019cb4:	f04f 0100 	mov.w	r1, #0
 8019cb8:	bf38      	it	cc
 8019cba:	2101      	movcc	r1, #1
 8019cbc:	f890 4020 	ldrb.w	r4, [r0, #32]
 8019cc0:	f890 6026 	ldrb.w	r6, [r0, #38]	@ 0x26
 8019cc4:	f104 07ff 	add.w	r7, r4, #255	@ 0xff
 8019cc8:	b2fd      	uxtb	r5, r7
 8019cca:	1bef      	subs	r7, r5, r7
 8019ccc:	f8b0 e010 	ldrh.w	lr, [r0, #16]
 8019cd0:	bf18      	it	ne
 8019cd2:	2701      	movne	r7, #1
 8019cd4:	42a3      	cmp	r3, r4
 8019cd6:	f04f 0400 	mov.w	r4, #0
 8019cda:	bf88      	it	hi
 8019cdc:	2401      	movhi	r4, #1
 8019cde:	2d08      	cmp	r5, #8
 8019ce0:	f04f 0500 	mov.w	r5, #0
 8019ce4:	f1a6 0605 	sub.w	r6, r6, #5
 8019ce8:	bf38      	it	cc
 8019cea:	2501      	movcc	r5, #1
 8019cec:	2e0c      	cmp	r6, #12
 8019cee:	f04f 0600 	mov.w	r6, #0
 8019cf2:	ea04 0407 	and.w	r4, r4, r7
 8019cf6:	bf38      	it	cc
 8019cf8:	2601      	movcc	r6, #1
 8019cfa:	459e      	cmp	lr, r3
 8019cfc:	f04f 0300 	mov.w	r3, #0
 8019d00:	f04f 0700 	mov.w	r7, #0
 8019d04:	bf98      	it	ls
 8019d06:	2301      	movls	r3, #1
 8019d08:	f5bc 7ffa 	cmp.w	ip, #500	@ 0x1f4
 8019d0c:	bf38      	it	cc
 8019d0e:	2701      	movcc	r7, #1
 8019d10:	403a      	ands	r2, r7
 8019d12:	4011      	ands	r1, r2
 8019d14:	4019      	ands	r1, r3
 8019d16:	4021      	ands	r1, r4
 8019d18:	4029      	ands	r1, r5
 8019d1a:	3030      	adds	r0, #48	@ 0x30
 8019d1c:	f04f 0800 	mov.w	r8, #0
 8019d20:	ea06 0401 	and.w	r4, r6, r1
 8019d24:	f007 ff5a 	bl	8021bdc <conn_mngr_calc_num_of_used_data_chnls>
 8019d28:	2801      	cmp	r0, #1
 8019d2a:	bf88      	it	hi
 8019d2c:	f04f 0801 	movhi.w	r8, #1
 8019d30:	ea08 0004 	and.w	r0, r8, r4
 8019d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019d38 <pdu_trnsprt_hndlr_form_nconn_adv>:
 8019d38:	b570      	push	{r4, r5, r6, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	4618      	mov	r0, r3
 8019d42:	4629      	mov	r1, r5
 8019d44:	bf18      	it	ne
 8019d46:	2001      	movne	r0, #1
 8019d48:	2d00      	cmp	r5, #0
 8019d4a:	bf18      	it	ne
 8019d4c:	2101      	movne	r1, #1
 8019d4e:	4008      	ands	r0, r1
 8019d50:	2101      	movs	r1, #1
 8019d52:	461c      	mov	r4, r3
 8019d54:	2601      	movs	r6, #1
 8019d56:	f001 fde2 	bl	801b91e <bsp_assert>
 8019d5a:	6820      	ldr	r0, [r4, #0]
 8019d5c:	2101      	movs	r1, #1
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	bf18      	it	ne
 8019d62:	2001      	movne	r0, #1
 8019d64:	f001 fddb 	bl	801b91e <bsp_assert>
 8019d68:	7c68      	ldrb	r0, [r5, #17]
 8019d6a:	2804      	cmp	r0, #4
 8019d6c:	d807      	bhi.n	8019d7e <pdu_trnsprt_hndlr_form_nconn_adv+0x46>
 8019d6e:	210c      	movs	r1, #12
 8019d70:	e8df f000 	tbb	[pc, r0]
 8019d74:	07030b08 	.word	0x07030b08
 8019d78:	000b      	.short	0x000b
 8019d7a:	2006      	movs	r0, #6
 8019d7c:	e002      	b.n	8019d84 <pdu_trnsprt_hndlr_form_nconn_adv+0x4c>
 8019d7e:	201f      	movs	r0, #31
 8019d80:	e00c      	b.n	8019d9c <pdu_trnsprt_hndlr_form_nconn_adv+0x64>
 8019d82:	2002      	movs	r0, #2
 8019d84:	89a1      	ldrh	r1, [r4, #12]
 8019d86:	4606      	mov	r6, r0
 8019d88:	3106      	adds	r1, #6
 8019d8a:	7ca8      	ldrb	r0, [r5, #18]
 8019d8c:	7eeb      	ldrb	r3, [r5, #27]
 8019d8e:	2500      	movs	r5, #0
 8019d90:	9000      	str	r0, [sp, #0]
 8019d92:	4620      	mov	r0, r4
 8019d94:	4632      	mov	r2, r6
 8019d96:	9501      	str	r5, [sp, #4]
 8019d98:	f000 f802 	bl	8019da0 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr>
 8019d9c:	b002      	add	sp, #8
 8019d9e:	bd70      	pop	{r4, r5, r6, pc}

08019da0 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr>:
 8019da0:	b570      	push	{r4, r5, r6, lr}
 8019da2:	1e4d      	subs	r5, r1, #1
 8019da4:	2d27      	cmp	r5, #39	@ 0x27
 8019da6:	d81d      	bhi.n	8019de4 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x44>
 8019da8:	6804      	ldr	r4, [r0, #0]
 8019daa:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
 8019dae:	46a6      	mov	lr, r4
 8019db0:	f1bc 0f00 	cmp.w	ip, #0
 8019db4:	bf1e      	ittt	ne
 8019db6:	8945      	ldrhne	r5, [r0, #10]
 8019db8:	4425      	addne	r5, r4
 8019dba:	f1a5 0e04 	subne.w	lr, r5, #4
 8019dbe:	2a06      	cmp	r2, #6
 8019dc0:	d810      	bhi.n	8019de4 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x44>
 8019dc2:	2501      	movs	r5, #1
 8019dc4:	4095      	lsls	r5, r2
 8019dc6:	f015 0f5c 	tst.w	r5, #92	@ 0x5c
 8019dca:	d001      	beq.n	8019dd0 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x30>
 8019dcc:	2500      	movs	r5, #0
 8019dce:	e007      	b.n	8019de0 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x40>
 8019dd0:	07ad      	lsls	r5, r5, #30
 8019dd2:	d001      	beq.n	8019dd8 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x38>
 8019dd4:	2520      	movs	r5, #32
 8019dd6:	e003      	b.n	8019de0 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x40>
 8019dd8:	9d05      	ldr	r5, [sp, #20]
 8019dda:	2620      	movs	r6, #32
 8019ddc:	ea06 1545 	and.w	r5, r6, r5, lsl #5
 8019de0:	45a6      	cmp	lr, r4
 8019de2:	d201      	bcs.n	8019de8 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr+0x48>
 8019de4:	201f      	movs	r0, #31
 8019de6:	bd70      	pop	{r4, r5, r6, pc}
 8019de8:	9c04      	ldr	r4, [sp, #16]
 8019dea:	f88e 1001 	strb.w	r1, [lr, #1]
 8019dee:	01e4      	lsls	r4, r4, #7
 8019df0:	f363 1486 	bfi	r4, r3, #6, #1
 8019df4:	192b      	adds	r3, r5, r4
 8019df6:	431a      	orrs	r2, r3
 8019df8:	f88e 2000 	strb.w	r2, [lr]
 8019dfc:	8981      	ldrh	r1, [r0, #12]
 8019dfe:	f10c 0203 	add.w	r2, ip, #3
 8019e02:	2900      	cmp	r1, #0
 8019e04:	f022 0103 	bic.w	r1, r2, #3
 8019e08:	bf1a      	itte	ne
 8019e0a:	8942      	ldrhne	r2, [r0, #10]
 8019e0c:	3a04      	subne	r2, #4
 8019e0e:	2200      	moveq	r2, #0
 8019e10:	3104      	adds	r1, #4
 8019e12:	8142      	strh	r2, [r0, #10]
 8019e14:	8181      	strh	r1, [r0, #12]
 8019e16:	2000      	movs	r0, #0
 8019e18:	bd70      	pop	{r4, r5, r6, pc}

08019e1a <pdu_trnsprt_hndlr_nconn_init_patch>:
 8019e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e1e:	460e      	mov	r6, r1
 8019e20:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019e24:	2101      	movs	r1, #1
 8019e26:	461c      	mov	r4, r3
 8019e28:	4615      	mov	r5, r2
 8019e2a:	4607      	mov	r7, r0
 8019e2c:	2800      	cmp	r0, #0
 8019e2e:	bf18      	it	ne
 8019e30:	2001      	movne	r0, #1
 8019e32:	f001 fd74 	bl	801b91e <bsp_assert>
 8019e36:	6838      	ldr	r0, [r7, #0]
 8019e38:	2101      	movs	r1, #1
 8019e3a:	2800      	cmp	r0, #0
 8019e3c:	bf18      	it	ne
 8019e3e:	2001      	movne	r0, #1
 8019e40:	f001 fd6d 	bl	801b91e <bsp_assert>
 8019e44:	6838      	ldr	r0, [r7, #0]
 8019e46:	f008 0201 	and.w	r2, r8, #1
 8019e4a:	7801      	ldrb	r1, [r0, #0]
 8019e4c:	f001 01df 	and.w	r1, r1, #223	@ 0xdf
 8019e50:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8019e54:	0a22      	lsrs	r2, r4, #8
 8019e56:	7001      	strb	r1, [r0, #0]
 8019e58:	6839      	ldr	r1, [r7, #0]
 8019e5a:	0a30      	lsrs	r0, r6, #8
 8019e5c:	73c8      	strb	r0, [r1, #15]
 8019e5e:	0a28      	lsrs	r0, r5, #8
 8019e60:	7448      	strb	r0, [r1, #17]
 8019e62:	2000      	movs	r0, #0
 8019e64:	738e      	strb	r6, [r1, #14]
 8019e66:	740d      	strb	r5, [r1, #16]
 8019e68:	748c      	strb	r4, [r1, #18]
 8019e6a:	74ca      	strb	r2, [r1, #19]
 8019e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019e70 <pdu_trnsprt_hndlr_parse_nconn_adv>:
 8019e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e74:	460d      	mov	r5, r1
 8019e76:	2101      	movs	r1, #1
 8019e78:	4698      	mov	r8, r3
 8019e7a:	4616      	mov	r6, r2
 8019e7c:	4607      	mov	r7, r0
 8019e7e:	2800      	cmp	r0, #0
 8019e80:	bf18      	it	ne
 8019e82:	2001      	movne	r0, #1
 8019e84:	f001 fd4b 	bl	801b91e <bsp_assert>
 8019e88:	6838      	ldr	r0, [r7, #0]
 8019e8a:	2101      	movs	r1, #1
 8019e8c:	2800      	cmp	r0, #0
 8019e8e:	bf18      	it	ne
 8019e90:	2001      	movne	r0, #1
 8019e92:	f001 fd44 	bl	801b91e <bsp_assert>
 8019e96:	6838      	ldr	r0, [r7, #0]
 8019e98:	8979      	ldrh	r1, [r7, #10]
 8019e9a:	eb00 0701 	add.w	r7, r0, r1
 8019e9e:	5c40      	ldrb	r0, [r0, r1]
 8019ea0:	f000 040f 	and.w	r4, r0, #15
 8019ea4:	b136      	cbz	r6, 8019eb4 <pdu_trnsprt_hndlr_parse_nconn_adv+0x44>
 8019ea6:	f107 010a 	add.w	r1, r7, #10
 8019eaa:	4630      	mov	r0, r6
 8019eac:	2206      	movs	r2, #6
 8019eae:	f006 fcc9 	bl	8020844 <ble_memcpy>
 8019eb2:	7838      	ldrb	r0, [r7, #0]
 8019eb4:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8019eb8:	1d39      	adds	r1, r7, #4
 8019eba:	76a8      	strb	r0, [r5, #26]
 8019ebc:	7878      	ldrb	r0, [r7, #1]
 8019ebe:	2206      	movs	r2, #6
 8019ec0:	3806      	subs	r0, #6
 8019ec2:	82a8      	strh	r0, [r5, #20]
 8019ec4:	f107 000a 	add.w	r0, r7, #10
 8019ec8:	60a8      	str	r0, [r5, #8]
 8019eca:	2000      	movs	r0, #0
 8019ecc:	8268      	strh	r0, [r5, #18]
 8019ece:	4628      	mov	r0, r5
 8019ed0:	f006 fcb8 	bl	8020844 <ble_memcpy>
 8019ed4:	2c06      	cmp	r4, #6
 8019ed6:	f04f 001f 	mov.w	r0, #31
 8019eda:	d81c      	bhi.n	8019f16 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa6>
 8019edc:	9906      	ldr	r1, [sp, #24]
 8019ede:	e8df f004 	tbb	[pc, r4]
 8019ee2:	0804      	.short	0x0804
 8019ee4:	1a151a13 	.word	0x1a151a13
 8019ee8:	0017      	.short	0x0017
 8019eea:	2000      	movs	r0, #0
 8019eec:	7668      	strb	r0, [r5, #25]
 8019eee:	b931      	cbnz	r1, 8019efe <pdu_trnsprt_hndlr_parse_nconn_adv+0x8e>
 8019ef0:	e011      	b.n	8019f16 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa6>
 8019ef2:	2001      	movs	r0, #1
 8019ef4:	7668      	strb	r0, [r5, #25]
 8019ef6:	2000      	movs	r0, #0
 8019ef8:	82a8      	strh	r0, [r5, #20]
 8019efa:	60a8      	str	r0, [r5, #8]
 8019efc:	b159      	cbz	r1, 8019f16 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa6>
 8019efe:	7838      	ldrb	r0, [r7, #0]
 8019f00:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8019f04:	7008      	strb	r0, [r1, #0]
 8019f06:	e005      	b.n	8019f14 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa4>
 8019f08:	2003      	movs	r0, #3
 8019f0a:	e002      	b.n	8019f12 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa2>
 8019f0c:	2004      	movs	r0, #4
 8019f0e:	e000      	b.n	8019f12 <pdu_trnsprt_hndlr_parse_nconn_adv+0xa2>
 8019f10:	2002      	movs	r0, #2
 8019f12:	7668      	strb	r0, [r5, #25]
 8019f14:	2000      	movs	r0, #0
 8019f16:	f1b8 0f00 	cmp.w	r8, #0
 8019f1a:	bf08      	it	eq
 8019f1c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f20:	7839      	ldrb	r1, [r7, #0]
 8019f22:	09c9      	lsrs	r1, r1, #7
 8019f24:	f888 1000 	strb.w	r1, [r8]
 8019f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f2c <pdu_trnsprt_hndlr_get_pdu_type>:
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	2101      	movs	r1, #1
 8019f30:	4604      	mov	r4, r0
 8019f32:	2800      	cmp	r0, #0
 8019f34:	bf18      	it	ne
 8019f36:	2001      	movne	r0, #1
 8019f38:	f001 fcf1 	bl	801b91e <bsp_assert>
 8019f3c:	6820      	ldr	r0, [r4, #0]
 8019f3e:	2101      	movs	r1, #1
 8019f40:	2800      	cmp	r0, #0
 8019f42:	bf18      	it	ne
 8019f44:	2001      	movne	r0, #1
 8019f46:	f001 fcea 	bl	801b91e <bsp_assert>
 8019f4a:	6820      	ldr	r0, [r4, #0]
 8019f4c:	8961      	ldrh	r1, [r4, #10]
 8019f4e:	5c40      	ldrb	r0, [r0, r1]
 8019f50:	f000 000f 	and.w	r0, r0, #15
 8019f54:	bd10      	pop	{r4, pc}

08019f56 <pdu_trnsprt_hndlr_parse_conn_req>:
 8019f56:	b570      	push	{r4, r5, r6, lr}
 8019f58:	4606      	mov	r6, r0
 8019f5a:	460c      	mov	r4, r1
 8019f5c:	2900      	cmp	r1, #0
 8019f5e:	4608      	mov	r0, r1
 8019f60:	4631      	mov	r1, r6
 8019f62:	bf18      	it	ne
 8019f64:	2001      	movne	r0, #1
 8019f66:	2e00      	cmp	r6, #0
 8019f68:	bf18      	it	ne
 8019f6a:	2101      	movne	r1, #1
 8019f6c:	4008      	ands	r0, r1
 8019f6e:	2101      	movs	r1, #1
 8019f70:	4615      	mov	r5, r2
 8019f72:	f001 fcd4 	bl	801b91e <bsp_assert>
 8019f76:	6830      	ldr	r0, [r6, #0]
 8019f78:	2101      	movs	r1, #1
 8019f7a:	2800      	cmp	r0, #0
 8019f7c:	bf18      	it	ne
 8019f7e:	2001      	movne	r0, #1
 8019f80:	f001 fccd 	bl	801b91e <bsp_assert>
 8019f84:	6830      	ldr	r0, [r6, #0]
 8019f86:	8971      	ldrh	r1, [r6, #10]
 8019f88:	2d05      	cmp	r5, #5
 8019f8a:	d105      	bne.n	8019f98 <pdu_trnsprt_hndlr_parse_conn_req+0x42>
 8019f8c:	1842      	adds	r2, r0, r1
 8019f8e:	7852      	ldrb	r2, [r2, #1]
 8019f90:	2a22      	cmp	r2, #34	@ 0x22
 8019f92:	bf1c      	itt	ne
 8019f94:	201f      	movne	r0, #31
 8019f96:	bd70      	popne	{r4, r5, r6, pc}
 8019f98:	5c42      	ldrb	r2, [r0, r1]
 8019f9a:	1845      	adds	r5, r0, r1
 8019f9c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8019fa0:	f884 2022 	strb.w	r2, [r4, #34]	@ 0x22
 8019fa4:	5c42      	ldrb	r2, [r0, r1]
 8019fa6:	1d29      	adds	r1, r5, #4
 8019fa8:	f3c2 1280 	ubfx	r2, r2, #6, #1
 8019fac:	4620      	mov	r0, r4
 8019fae:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 8019fb2:	2206      	movs	r2, #6
 8019fb4:	f006 fc46 	bl	8020844 <ble_memcpy>
 8019fb8:	7c28      	ldrb	r0, [r5, #16]
 8019fba:	7c69      	ldrb	r1, [r5, #17]
 8019fbc:	7caa      	ldrb	r2, [r5, #18]
 8019fbe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8019fc2:	7ce9      	ldrb	r1, [r5, #19]
 8019fc4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8019fc8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8019fcc:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8019fce:	7d28      	ldrb	r0, [r5, #20]
 8019fd0:	7d69      	ldrb	r1, [r5, #21]
 8019fd2:	7daa      	ldrb	r2, [r5, #22]
 8019fd4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8019fd8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8019fdc:	2205      	movs	r2, #5
 8019fde:	62a0      	str	r0, [r4, #40]	@ 0x28
 8019fe0:	7de8      	ldrb	r0, [r5, #23]
 8019fe2:	f884 0020 	strb.w	r0, [r4, #32]
 8019fe6:	7e28      	ldrb	r0, [r5, #24]
 8019fe8:	7e69      	ldrb	r1, [r5, #25]
 8019fea:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8019fee:	8220      	strh	r0, [r4, #16]
 8019ff0:	7ea8      	ldrb	r0, [r5, #26]
 8019ff2:	7ee9      	ldrb	r1, [r5, #27]
 8019ff4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8019ff8:	82e0      	strh	r0, [r4, #22]
 8019ffa:	7f28      	ldrb	r0, [r5, #28]
 8019ffc:	7f69      	ldrb	r1, [r5, #29]
 8019ffe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801a002:	8320      	strh	r0, [r4, #24]
 801a004:	7fa8      	ldrb	r0, [r5, #30]
 801a006:	7fe9      	ldrb	r1, [r5, #31]
 801a008:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801a00c:	f105 0120 	add.w	r1, r5, #32
 801a010:	8360      	strh	r0, [r4, #26]
 801a012:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801a016:	f006 fc15 	bl	8020844 <ble_memcpy>
 801a01a:	f895 0025 	ldrb.w	r0, [r5, #37]	@ 0x25
 801a01e:	f000 001f 	and.w	r0, r0, #31
 801a022:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
 801a026:	f895 0025 	ldrb.w	r0, [r5, #37]	@ 0x25
 801a02a:	0940      	lsrs	r0, r0, #5
 801a02c:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 801a030:	2000      	movs	r0, #0
 801a032:	bd70      	pop	{r4, r5, r6, pc}

0801a034 <pdu_trnsprt_hndlr_form_nconn_scan>:
 801a034:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a036:	b083      	sub	sp, #12
 801a038:	460e      	mov	r6, r1
 801a03a:	4607      	mov	r7, r0
 801a03c:	2900      	cmp	r1, #0
 801a03e:	4608      	mov	r0, r1
 801a040:	f04f 0101 	mov.w	r1, #1
 801a044:	bf18      	it	ne
 801a046:	2001      	movne	r0, #1
 801a048:	4614      	mov	r4, r2
 801a04a:	f001 fc68 	bl	801b91e <bsp_assert>
 801a04e:	6830      	ldr	r0, [r6, #0]
 801a050:	2101      	movs	r1, #1
 801a052:	2800      	cmp	r0, #0
 801a054:	bf18      	it	ne
 801a056:	2001      	movne	r0, #1
 801a058:	f001 fc61 	bl	801b91e <bsp_assert>
 801a05c:	2100      	movs	r1, #0
 801a05e:	2c03      	cmp	r4, #3
 801a060:	bf08      	it	eq
 801a062:	210c      	moveq	r1, #12
 801a064:	2c04      	cmp	r4, #4
 801a066:	bf04      	itt	eq
 801a068:	89b0      	ldrheq	r0, [r6, #12]
 801a06a:	1d81      	addeq	r1, r0, #6
 801a06c:	2500      	movs	r5, #0
 801a06e:	4630      	mov	r0, r6
 801a070:	4622      	mov	r2, r4
 801a072:	463b      	mov	r3, r7
 801a074:	9500      	str	r5, [sp, #0]
 801a076:	9501      	str	r5, [sp, #4]
 801a078:	f7ff fe92 	bl	8019da0 <pdu_trnsprt_hndlr_form_adv_PDU_Hdr>
 801a07c:	b003      	add	sp, #12
 801a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a080 <pdu_trnsprt_hndlr_form_data_pdu>:
 801a080:	b570      	push	{r4, r5, r6, lr}
 801a082:	2101      	movs	r1, #1
 801a084:	4604      	mov	r4, r0
 801a086:	2800      	cmp	r0, #0
 801a088:	bf18      	it	ne
 801a08a:	2001      	movne	r0, #1
 801a08c:	f001 fc47 	bl	801b91e <bsp_assert>
 801a090:	6820      	ldr	r0, [r4, #0]
 801a092:	2101      	movs	r1, #1
 801a094:	2800      	cmp	r0, #0
 801a096:	bf18      	it	ne
 801a098:	2001      	movne	r0, #1
 801a09a:	f001 fc40 	bl	801b91e <bsp_assert>
 801a09e:	6820      	ldr	r0, [r4, #0]
 801a0a0:	8961      	ldrh	r1, [r4, #10]
 801a0a2:	89a5      	ldrh	r5, [r4, #12]
 801a0a4:	4408      	add	r0, r1
 801a0a6:	3808      	subs	r0, #8
 801a0a8:	2100      	movs	r1, #0
 801a0aa:	2204      	movs	r2, #4
 801a0ac:	2600      	movs	r6, #0
 801a0ae:	f006 fc19 	bl	80208e4 <ble_memset>
 801a0b2:	6820      	ldr	r0, [r4, #0]
 801a0b4:	8961      	ldrh	r1, [r4, #10]
 801a0b6:	4408      	add	r0, r1
 801a0b8:	f800 6d04 	strb.w	r6, [r0, #-4]!
 801a0bc:	70c6      	strb	r6, [r0, #3]
 801a0be:	7086      	strb	r6, [r0, #2]
 801a0c0:	7046      	strb	r6, [r0, #1]
 801a0c2:	7ba1      	ldrb	r1, [r4, #14]
 801a0c4:	07c9      	lsls	r1, r1, #31
 801a0c6:	f04f 0112 	mov.w	r1, #18
 801a0ca:	bf08      	it	eq
 801a0cc:	2111      	moveq	r1, #17
 801a0ce:	7001      	strb	r1, [r0, #0]
 801a0d0:	7045      	strb	r5, [r0, #1]
 801a0d2:	8960      	ldrh	r0, [r4, #10]
 801a0d4:	3804      	subs	r0, #4
 801a0d6:	8160      	strh	r0, [r4, #10]
 801a0d8:	1ce8      	adds	r0, r5, #3
 801a0da:	f020 0003 	bic.w	r0, r0, #3
 801a0de:	1d01      	adds	r1, r0, #4
 801a0e0:	2000      	movs	r0, #0
 801a0e2:	81a1      	strh	r1, [r4, #12]
 801a0e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a0e8 <pdu_trnsprt_hndlr_form_cntrl_pdu>:
 801a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ec:	460e      	mov	r6, r1
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	4610      	mov	r0, r2
 801a0f2:	2101      	movs	r1, #1
 801a0f4:	4615      	mov	r5, r2
 801a0f6:	2a00      	cmp	r2, #0
 801a0f8:	bf18      	it	ne
 801a0fa:	2001      	movne	r0, #1
 801a0fc:	f001 fc0f 	bl	801b91e <bsp_assert>
 801a100:	6828      	ldr	r0, [r5, #0]
 801a102:	2101      	movs	r1, #1
 801a104:	2800      	cmp	r0, #0
 801a106:	bf18      	it	ne
 801a108:	2001      	movne	r0, #1
 801a10a:	f001 fc08 	bl	801b91e <bsp_assert>
 801a10e:	2c1e      	cmp	r4, #30
 801a110:	f04f 071f 	mov.w	r7, #31
 801a114:	f200 81ae 	bhi.w	801a474 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x38c>
 801a118:	e8df f014 	tbh	[pc, r4, lsl #1]
 801a11c:	00b0008d 	.word	0x00b0008d
 801a120:	00cf00c8 	.word	0x00cf00c8
 801a124:	011200f6 	.word	0x011200f6
 801a128:	01180115 	.word	0x01180115
 801a12c:	011c001f 	.word	0x011c001f
 801a130:	012b0128 	.word	0x012b0128
 801a134:	0145012e 	.word	0x0145012e
 801a138:	0027001f 	.word	0x0027001f
 801a13c:	01490027 	.word	0x01490027
 801a140:	01540151 	.word	0x01540151
 801a144:	006a006a 	.word	0x006a006a
 801a148:	00860086 	.word	0x00860086
 801a14c:	0169015a 	.word	0x0169015a
 801a150:	01ac01ac 	.word	0x01ac01ac
 801a154:	017a01ac 	.word	0x017a01ac
 801a158:	017e      	.short	0x017e
 801a15a:	6828      	ldr	r0, [r5, #0]
 801a15c:	4631      	mov	r1, r6
 801a15e:	7104      	strb	r4, [r0, #4]
 801a160:	3005      	adds	r0, #5
 801a162:	2208      	movs	r2, #8
 801a164:	f006 fb6e 	bl	8020844 <ble_memcpy>
 801a168:	e05b      	b.n	801a222 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x13a>
 801a16a:	4630      	mov	r0, r6
 801a16c:	2101      	movs	r1, #1
 801a16e:	2e00      	cmp	r6, #0
 801a170:	bf18      	it	ne
 801a172:	2001      	movne	r0, #1
 801a174:	f001 fbd3 	bl	801b91e <bsp_assert>
 801a178:	6828      	ldr	r0, [r5, #0]
 801a17a:	f04f 0818 	mov.w	r8, #24
 801a17e:	7104      	strb	r4, [r0, #4]
 801a180:	7a31      	ldrb	r1, [r6, #8]
 801a182:	7141      	strb	r1, [r0, #5]
 801a184:	7a71      	ldrb	r1, [r6, #9]
 801a186:	7181      	strb	r1, [r0, #6]
 801a188:	7ab1      	ldrb	r1, [r6, #10]
 801a18a:	71c1      	strb	r1, [r0, #7]
 801a18c:	7af1      	ldrb	r1, [r6, #11]
 801a18e:	7201      	strb	r1, [r0, #8]
 801a190:	7b31      	ldrb	r1, [r6, #12]
 801a192:	7241      	strb	r1, [r0, #9]
 801a194:	7b71      	ldrb	r1, [r6, #13]
 801a196:	7281      	strb	r1, [r0, #10]
 801a198:	7bb1      	ldrb	r1, [r6, #14]
 801a19a:	72c1      	strb	r1, [r0, #11]
 801a19c:	7bf1      	ldrb	r1, [r6, #15]
 801a19e:	7301      	strb	r1, [r0, #12]
 801a1a0:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 801a1a4:	7341      	strb	r1, [r0, #13]
 801a1a6:	7e31      	ldrb	r1, [r6, #24]
 801a1a8:	7381      	strb	r1, [r0, #14]
 801a1aa:	7e71      	ldrb	r1, [r6, #25]
 801a1ac:	73c1      	strb	r1, [r0, #15]
 801a1ae:	7d31      	ldrb	r1, [r6, #20]
 801a1b0:	7401      	strb	r1, [r0, #16]
 801a1b2:	7d71      	ldrb	r1, [r6, #21]
 801a1b4:	7441      	strb	r1, [r0, #17]
 801a1b6:	7fb1      	ldrb	r1, [r6, #30]
 801a1b8:	7481      	strb	r1, [r0, #18]
 801a1ba:	7ff1      	ldrb	r1, [r6, #31]
 801a1bc:	74c1      	strb	r1, [r0, #19]
 801a1be:	f896 1020 	ldrb.w	r1, [r6, #32]
 801a1c2:	7501      	strb	r1, [r0, #20]
 801a1c4:	f896 1021 	ldrb.w	r1, [r6, #33]	@ 0x21
 801a1c8:	7541      	strb	r1, [r0, #21]
 801a1ca:	f896 1022 	ldrb.w	r1, [r6, #34]	@ 0x22
 801a1ce:	7581      	strb	r1, [r0, #22]
 801a1d0:	f896 1023 	ldrb.w	r1, [r6, #35]	@ 0x23
 801a1d4:	75c1      	strb	r1, [r0, #23]
 801a1d6:	f896 1024 	ldrb.w	r1, [r6, #36]	@ 0x24
 801a1da:	7601      	strb	r1, [r0, #24]
 801a1dc:	f896 1025 	ldrb.w	r1, [r6, #37]	@ 0x25
 801a1e0:	7641      	strb	r1, [r0, #25]
 801a1e2:	f896 1026 	ldrb.w	r1, [r6, #38]	@ 0x26
 801a1e6:	7681      	strb	r1, [r0, #26]
 801a1e8:	f896 1027 	ldrb.w	r1, [r6, #39]	@ 0x27
 801a1ec:	76c1      	strb	r1, [r0, #27]
 801a1ee:	e089      	b.n	801a304 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x21c>
 801a1f0:	4630      	mov	r0, r6
 801a1f2:	2101      	movs	r1, #1
 801a1f4:	2e00      	cmp	r6, #0
 801a1f6:	bf18      	it	ne
 801a1f8:	2001      	movne	r0, #1
 801a1fa:	f001 fb90 	bl	801b91e <bsp_assert>
 801a1fe:	6828      	ldr	r0, [r5, #0]
 801a200:	7104      	strb	r4, [r0, #4]
 801a202:	7831      	ldrb	r1, [r6, #0]
 801a204:	7141      	strb	r1, [r0, #5]
 801a206:	7871      	ldrb	r1, [r6, #1]
 801a208:	7181      	strb	r1, [r0, #6]
 801a20a:	78b1      	ldrb	r1, [r6, #2]
 801a20c:	71c1      	strb	r1, [r0, #7]
 801a20e:	78f1      	ldrb	r1, [r6, #3]
 801a210:	7201      	strb	r1, [r0, #8]
 801a212:	7931      	ldrb	r1, [r6, #4]
 801a214:	7241      	strb	r1, [r0, #9]
 801a216:	7971      	ldrb	r1, [r6, #5]
 801a218:	7281      	strb	r1, [r0, #10]
 801a21a:	79b1      	ldrb	r1, [r6, #6]
 801a21c:	72c1      	strb	r1, [r0, #11]
 801a21e:	79f1      	ldrb	r1, [r6, #7]
 801a220:	7301      	strb	r1, [r0, #12]
 801a222:	f04f 0809 	mov.w	r8, #9
 801a226:	e09f      	b.n	801a368 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x280>
 801a228:	6830      	ldr	r0, [r6, #0]
 801a22a:	6829      	ldr	r1, [r5, #0]
 801a22c:	0a02      	lsrs	r2, r0, #8
 801a22e:	710c      	strb	r4, [r1, #4]
 801a230:	7148      	strb	r0, [r1, #5]
 801a232:	718a      	strb	r2, [r1, #6]
 801a234:	e0e9      	b.n	801a40a <pdu_trnsprt_hndlr_form_cntrl_pdu+0x322>
 801a236:	4630      	mov	r0, r6
 801a238:	2101      	movs	r1, #1
 801a23a:	2e00      	cmp	r6, #0
 801a23c:	bf18      	it	ne
 801a23e:	2001      	movne	r0, #1
 801a240:	f001 fb6d 	bl	801b91e <bsp_assert>
 801a244:	6828      	ldr	r0, [r5, #0]
 801a246:	2100      	movs	r1, #0
 801a248:	7101      	strb	r1, [r0, #4]
 801a24a:	7f31      	ldrb	r1, [r6, #28]
 801a24c:	f04f 080c 	mov.w	r8, #12
 801a250:	7141      	strb	r1, [r0, #5]
 801a252:	7d31      	ldrb	r1, [r6, #20]
 801a254:	7181      	strb	r1, [r0, #6]
 801a256:	7d71      	ldrb	r1, [r6, #21]
 801a258:	71c1      	strb	r1, [r0, #7]
 801a25a:	7eb1      	ldrb	r1, [r6, #26]
 801a25c:	7201      	strb	r1, [r0, #8]
 801a25e:	7ef1      	ldrb	r1, [r6, #27]
 801a260:	7241      	strb	r1, [r0, #9]
 801a262:	7b31      	ldrb	r1, [r6, #12]
 801a264:	7281      	strb	r1, [r0, #10]
 801a266:	7b71      	ldrb	r1, [r6, #13]
 801a268:	72c1      	strb	r1, [r0, #11]
 801a26a:	7bb1      	ldrb	r1, [r6, #14]
 801a26c:	7301      	strb	r1, [r0, #12]
 801a26e:	7bf1      	ldrb	r1, [r6, #15]
 801a270:	7341      	strb	r1, [r0, #13]
 801a272:	7e31      	ldrb	r1, [r6, #24]
 801a274:	7381      	strb	r1, [r0, #14]
 801a276:	7e71      	ldrb	r1, [r6, #25]
 801a278:	73c1      	strb	r1, [r0, #15]
 801a27a:	e075      	b.n	801a368 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x280>
 801a27c:	4630      	mov	r0, r6
 801a27e:	2101      	movs	r1, #1
 801a280:	2e00      	cmp	r6, #0
 801a282:	bf18      	it	ne
 801a284:	2001      	movne	r0, #1
 801a286:	f04f 0801 	mov.w	r8, #1
 801a28a:	f001 fb48 	bl	801b91e <bsp_assert>
 801a28e:	682f      	ldr	r7, [r5, #0]
 801a290:	1cb1      	adds	r1, r6, #2
 801a292:	1d78      	adds	r0, r7, #5
 801a294:	2205      	movs	r2, #5
 801a296:	f887 8004 	strb.w	r8, [r7, #4]
 801a29a:	f006 fad3 	bl	8020844 <ble_memcpy>
 801a29e:	7830      	ldrb	r0, [r6, #0]
 801a2a0:	f04f 0808 	mov.w	r8, #8
 801a2a4:	72b8      	strb	r0, [r7, #10]
 801a2a6:	7870      	ldrb	r0, [r6, #1]
 801a2a8:	72f8      	strb	r0, [r7, #11]
 801a2aa:	e09e      	b.n	801a3ea <pdu_trnsprt_hndlr_form_cntrl_pdu+0x302>
 801a2ac:	7830      	ldrb	r0, [r6, #0]
 801a2ae:	6829      	ldr	r1, [r5, #0]
 801a2b0:	f04f 0802 	mov.w	r8, #2
 801a2b4:	f881 8004 	strb.w	r8, [r1, #4]
 801a2b8:	e0b4      	b.n	801a424 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x33c>
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	2101      	movs	r1, #1
 801a2be:	2e00      	cmp	r6, #0
 801a2c0:	bf18      	it	ne
 801a2c2:	2001      	movne	r0, #1
 801a2c4:	f001 fb2b 	bl	801b91e <bsp_assert>
 801a2c8:	682f      	ldr	r7, [r5, #0]
 801a2ca:	2003      	movs	r0, #3
 801a2cc:	7138      	strb	r0, [r7, #4]
 801a2ce:	1d78      	adds	r0, r7, #5
 801a2d0:	4631      	mov	r1, r6
 801a2d2:	2208      	movs	r2, #8
 801a2d4:	f006 fab6 	bl	8020844 <ble_memcpy>
 801a2d8:	7d30      	ldrb	r0, [r6, #20]
 801a2da:	f106 0108 	add.w	r1, r6, #8
 801a2de:	7378      	strb	r0, [r7, #13]
 801a2e0:	7d70      	ldrb	r0, [r6, #21]
 801a2e2:	2208      	movs	r2, #8
 801a2e4:	73b8      	strb	r0, [r7, #14]
 801a2e6:	f107 000f 	add.w	r0, r7, #15
 801a2ea:	f006 faab 	bl	8020844 <ble_memcpy>
 801a2ee:	6930      	ldr	r0, [r6, #16]
 801a2f0:	f04f 0817 	mov.w	r8, #23
 801a2f4:	75f8      	strb	r0, [r7, #23]
 801a2f6:	6930      	ldr	r0, [r6, #16]
 801a2f8:	0a00      	lsrs	r0, r0, #8
 801a2fa:	7638      	strb	r0, [r7, #24]
 801a2fc:	8a70      	ldrh	r0, [r6, #18]
 801a2fe:	7678      	strb	r0, [r7, #25]
 801a300:	7cf0      	ldrb	r0, [r6, #19]
 801a302:	76b8      	strb	r0, [r7, #26]
 801a304:	2018      	movs	r0, #24
 801a306:	e08f      	b.n	801a428 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x340>
 801a308:	4630      	mov	r0, r6
 801a30a:	2101      	movs	r1, #1
 801a30c:	2e00      	cmp	r6, #0
 801a30e:	bf18      	it	ne
 801a310:	2001      	movne	r0, #1
 801a312:	f001 fb04 	bl	801b91e <bsp_assert>
 801a316:	682f      	ldr	r7, [r5, #0]
 801a318:	2004      	movs	r0, #4
 801a31a:	7138      	strb	r0, [r7, #4]
 801a31c:	1d78      	adds	r0, r7, #5
 801a31e:	1d31      	adds	r1, r6, #4
 801a320:	2208      	movs	r2, #8
 801a322:	f006 fa8f 	bl	8020844 <ble_memcpy>
 801a326:	6830      	ldr	r0, [r6, #0]
 801a328:	f04f 080d 	mov.w	r8, #13
 801a32c:	7378      	strb	r0, [r7, #13]
 801a32e:	6830      	ldr	r0, [r6, #0]
 801a330:	0a00      	lsrs	r0, r0, #8
 801a332:	73b8      	strb	r0, [r7, #14]
 801a334:	8870      	ldrh	r0, [r6, #2]
 801a336:	73f8      	strb	r0, [r7, #15]
 801a338:	78f0      	ldrb	r0, [r6, #3]
 801a33a:	7438      	strb	r0, [r7, #16]
 801a33c:	2010      	movs	r0, #16
 801a33e:	e073      	b.n	801a428 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x340>
 801a340:	6828      	ldr	r0, [r5, #0]
 801a342:	2105      	movs	r1, #5
 801a344:	e040      	b.n	801a3c8 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2e0>
 801a346:	6828      	ldr	r0, [r5, #0]
 801a348:	2106      	movs	r1, #6
 801a34a:	e03d      	b.n	801a3c8 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2e0>
 801a34c:	7830      	ldrb	r0, [r6, #0]
 801a34e:	6829      	ldr	r1, [r5, #0]
 801a350:	2207      	movs	r2, #7
 801a352:	e064      	b.n	801a41e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x336>
 801a354:	6828      	ldr	r0, [r5, #0]
 801a356:	f04f 0809 	mov.w	r8, #9
 801a35a:	f880 8004 	strb.w	r8, [r0, #4]
 801a35e:	3005      	adds	r0, #5
 801a360:	4631      	mov	r1, r6
 801a362:	2208      	movs	r2, #8
 801a364:	f006 fa6e 	bl	8020844 <ble_memcpy>
 801a368:	200c      	movs	r0, #12
 801a36a:	e05d      	b.n	801a428 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x340>
 801a36c:	6828      	ldr	r0, [r5, #0]
 801a36e:	210a      	movs	r1, #10
 801a370:	e02a      	b.n	801a3c8 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2e0>
 801a372:	6828      	ldr	r0, [r5, #0]
 801a374:	210b      	movs	r1, #11
 801a376:	e027      	b.n	801a3c8 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2e0>
 801a378:	4630      	mov	r0, r6
 801a37a:	2101      	movs	r1, #1
 801a37c:	2e00      	cmp	r6, #0
 801a37e:	bf18      	it	ne
 801a380:	2001      	movne	r0, #1
 801a382:	f001 facc 	bl	801b91e <bsp_assert>
 801a386:	6828      	ldr	r0, [r5, #0]
 801a388:	210c      	movs	r1, #12
 801a38a:	7101      	strb	r1, [r0, #4]
 801a38c:	7931      	ldrb	r1, [r6, #4]
 801a38e:	f04f 0806 	mov.w	r8, #6
 801a392:	7141      	strb	r1, [r0, #5]
 801a394:	7831      	ldrb	r1, [r6, #0]
 801a396:	7181      	strb	r1, [r0, #6]
 801a398:	7871      	ldrb	r1, [r6, #1]
 801a39a:	71c1      	strb	r1, [r0, #7]
 801a39c:	78b1      	ldrb	r1, [r6, #2]
 801a39e:	7201      	strb	r1, [r0, #8]
 801a3a0:	78f1      	ldrb	r1, [r6, #3]
 801a3a2:	7241      	strb	r1, [r0, #9]
 801a3a4:	e021      	b.n	801a3ea <pdu_trnsprt_hndlr_form_cntrl_pdu+0x302>
 801a3a6:	7830      	ldrb	r0, [r6, #0]
 801a3a8:	6829      	ldr	r1, [r5, #0]
 801a3aa:	220d      	movs	r2, #13
 801a3ac:	e037      	b.n	801a41e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x336>
 801a3ae:	7830      	ldrb	r0, [r6, #0]
 801a3b0:	7871      	ldrb	r1, [r6, #1]
 801a3b2:	682a      	ldr	r2, [r5, #0]
 801a3b4:	2311      	movs	r3, #17
 801a3b6:	7113      	strb	r3, [r2, #4]
 801a3b8:	7150      	strb	r0, [r2, #5]
 801a3ba:	7191      	strb	r1, [r2, #6]
 801a3bc:	e025      	b.n	801a40a <pdu_trnsprt_hndlr_form_cntrl_pdu+0x322>
 801a3be:	6828      	ldr	r0, [r5, #0]
 801a3c0:	2112      	movs	r1, #18
 801a3c2:	e001      	b.n	801a3c8 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x2e0>
 801a3c4:	6828      	ldr	r0, [r5, #0]
 801a3c6:	2113      	movs	r1, #19
 801a3c8:	7101      	strb	r1, [r0, #4]
 801a3ca:	f04f 0801 	mov.w	r8, #1
 801a3ce:	e02a      	b.n	801a426 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x33e>
 801a3d0:	6830      	ldr	r0, [r6, #0]
 801a3d2:	682b      	ldr	r3, [r5, #0]
 801a3d4:	0a01      	lsrs	r1, r0, #8
 801a3d6:	0c02      	lsrs	r2, r0, #16
 801a3d8:	2718      	movs	r7, #24
 801a3da:	7158      	strb	r0, [r3, #5]
 801a3dc:	0e00      	lsrs	r0, r0, #24
 801a3de:	711f      	strb	r7, [r3, #4]
 801a3e0:	7199      	strb	r1, [r3, #6]
 801a3e2:	71da      	strb	r2, [r3, #7]
 801a3e4:	7218      	strb	r0, [r3, #8]
 801a3e6:	f04f 0805 	mov.w	r8, #5
 801a3ea:	2008      	movs	r0, #8
 801a3ec:	e01c      	b.n	801a428 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x340>
 801a3ee:	4630      	mov	r0, r6
 801a3f0:	2101      	movs	r1, #1
 801a3f2:	2e00      	cmp	r6, #0
 801a3f4:	bf18      	it	ne
 801a3f6:	2001      	movne	r0, #1
 801a3f8:	f001 fa91 	bl	801b91e <bsp_assert>
 801a3fc:	6828      	ldr	r0, [r5, #0]
 801a3fe:	2119      	movs	r1, #25
 801a400:	7101      	strb	r1, [r0, #4]
 801a402:	7831      	ldrb	r1, [r6, #0]
 801a404:	7141      	strb	r1, [r0, #5]
 801a406:	7871      	ldrb	r1, [r6, #1]
 801a408:	7181      	strb	r1, [r0, #6]
 801a40a:	f04f 0803 	mov.w	r8, #3
 801a40e:	e00a      	b.n	801a426 <pdu_trnsprt_hndlr_form_cntrl_pdu+0x33e>
 801a410:	7830      	ldrb	r0, [r6, #0]
 801a412:	6829      	ldr	r1, [r5, #0]
 801a414:	221d      	movs	r2, #29
 801a416:	e002      	b.n	801a41e <pdu_trnsprt_hndlr_form_cntrl_pdu+0x336>
 801a418:	7830      	ldrb	r0, [r6, #0]
 801a41a:	6829      	ldr	r1, [r5, #0]
 801a41c:	221e      	movs	r2, #30
 801a41e:	f04f 0802 	mov.w	r8, #2
 801a422:	710a      	strb	r2, [r1, #4]
 801a424:	7148      	strb	r0, [r1, #5]
 801a426:	2004      	movs	r0, #4
 801a428:	2104      	movs	r1, #4
 801a42a:	8169      	strh	r1, [r5, #10]
 801a42c:	6829      	ldr	r1, [r5, #0]
 801a42e:	81a8      	strh	r0, [r5, #12]
 801a430:	1f08      	subs	r0, r1, #4
 801a432:	2100      	movs	r1, #0
 801a434:	2204      	movs	r2, #4
 801a436:	2700      	movs	r7, #0
 801a438:	f006 fa54 	bl	80208e4 <ble_memset>
 801a43c:	6828      	ldr	r0, [r5, #0]
 801a43e:	8969      	ldrh	r1, [r5, #10]
 801a440:	2c02      	cmp	r4, #2
 801a442:	4408      	add	r0, r1
 801a444:	f04f 0113 	mov.w	r1, #19
 801a448:	bf08      	it	eq
 801a44a:	2103      	moveq	r1, #3
 801a44c:	f800 1c04 	strb.w	r1, [r0, #-4]
 801a450:	f800 8c03 	strb.w	r8, [r0, #-3]
 801a454:	8968      	ldrh	r0, [r5, #10]
 801a456:	89a9      	ldrh	r1, [r5, #12]
 801a458:	3804      	subs	r0, #4
 801a45a:	8168      	strh	r0, [r5, #10]
 801a45c:	3104      	adds	r1, #4
 801a45e:	682a      	ldr	r2, [r5, #0]
 801a460:	b280      	uxth	r0, r0
 801a462:	81a9      	strh	r1, [r5, #12]
 801a464:	b289      	uxth	r1, r1
 801a466:	4410      	add	r0, r2
 801a468:	4408      	add	r0, r1
 801a46a:	7104      	strb	r4, [r0, #4]
 801a46c:	2001      	movs	r0, #1
 801a46e:	2101      	movs	r1, #1
 801a470:	f001 fa55 	bl	801b91e <bsp_assert>
 801a474:	4638      	mov	r0, r7
 801a476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801a47c <pdu_trnsprt_hndlr_parse_data_cntrl>:
 801a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a47e:	b081      	sub	sp, #4
 801a480:	4607      	mov	r7, r0
 801a482:	2b00      	cmp	r3, #0
 801a484:	4618      	mov	r0, r3
 801a486:	460e      	mov	r6, r1
 801a488:	bf18      	it	ne
 801a48a:	2001      	movne	r0, #1
 801a48c:	2900      	cmp	r1, #0
 801a48e:	bf18      	it	ne
 801a490:	2101      	movne	r1, #1
 801a492:	4008      	ands	r0, r1
 801a494:	4639      	mov	r1, r7
 801a496:	2f00      	cmp	r7, #0
 801a498:	bf18      	it	ne
 801a49a:	2101      	movne	r1, #1
 801a49c:	4008      	ands	r0, r1
 801a49e:	4611      	mov	r1, r2
 801a4a0:	2a00      	cmp	r2, #0
 801a4a2:	bf18      	it	ne
 801a4a4:	2101      	movne	r1, #1
 801a4a6:	4008      	ands	r0, r1
 801a4a8:	2101      	movs	r1, #1
 801a4aa:	461d      	mov	r5, r3
 801a4ac:	4614      	mov	r4, r2
 801a4ae:	f001 fa36 	bl	801b91e <bsp_assert>
 801a4b2:	6828      	ldr	r0, [r5, #0]
 801a4b4:	2101      	movs	r1, #1
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	bf18      	it	ne
 801a4ba:	2001      	movne	r0, #1
 801a4bc:	f001 fa2f 	bl	801b91e <bsp_assert>
 801a4c0:	6828      	ldr	r0, [r5, #0]
 801a4c2:	8969      	ldrh	r1, [r5, #10]
 801a4c4:	5c42      	ldrb	r2, [r0, r1]
 801a4c6:	f002 0203 	and.w	r2, r2, #3
 801a4ca:	2a03      	cmp	r2, #3
 801a4cc:	703a      	strb	r2, [r7, #0]
 801a4ce:	d12a      	bne.n	801a526 <pdu_trnsprt_hndlr_parse_data_cntrl+0xaa>
 801a4d0:	4408      	add	r0, r1
 801a4d2:	7901      	ldrb	r1, [r0, #4]
 801a4d4:	291e      	cmp	r1, #30
 801a4d6:	7031      	strb	r1, [r6, #0]
 801a4d8:	d825      	bhi.n	801a526 <pdu_trnsprt_hndlr_parse_data_cntrl+0xaa>
 801a4da:	2000      	movs	r0, #0
 801a4dc:	e8df f011 	tbh	[pc, r1, lsl #1]
 801a4e0:	00bc00b7 	.word	0x00bc00b7
 801a4e4:	00c1001f 	.word	0x00c1001f
 801a4e8:	00ee00c6 	.word	0x00ee00c6
 801a4ec:	001f00ee 	.word	0x001f00ee
 801a4f0:	00cb0025 	.word	0x00cb0025
 801a4f4:	00ee00ee 	.word	0x00ee00ee
 801a4f8:	001f00d0 	.word	0x001f00d0
 801a4fc:	00350025 	.word	0x00350025
 801a500:	00d50035 	.word	0x00d50035
 801a504:	00ee00ee 	.word	0x00ee00ee
 801a508:	007a007a 	.word	0x007a007a
 801a50c:	00990099 	.word	0x00990099
 801a510:	00e900e4 	.word	0x00e900e4
 801a514:	00230023 	.word	0x00230023
 801a518:	00a60023 	.word	0x00a60023
 801a51c:	00a6      	.short	0x00a6
 801a51e:	4620      	mov	r0, r4
 801a520:	2101      	movs	r1, #1
 801a522:	2c00      	cmp	r4, #0
 801a524:	e089      	b.n	801a63a <pdu_trnsprt_hndlr_parse_data_cntrl+0x1be>
 801a526:	201f      	movs	r0, #31
 801a528:	e0c8      	b.n	801a6bc <pdu_trnsprt_hndlr_parse_data_cntrl+0x240>
 801a52a:	4620      	mov	r0, r4
 801a52c:	2101      	movs	r1, #1
 801a52e:	2c00      	cmp	r4, #0
 801a530:	bf18      	it	ne
 801a532:	2001      	movne	r0, #1
 801a534:	f001 f9f3 	bl	801b91e <bsp_assert>
 801a538:	6828      	ldr	r0, [r5, #0]
 801a53a:	8969      	ldrh	r1, [r5, #10]
 801a53c:	2208      	movs	r2, #8
 801a53e:	4408      	add	r0, r1
 801a540:	1d41      	adds	r1, r0, #5
 801a542:	4620      	mov	r0, r4
 801a544:	f006 f97e 	bl	8020844 <ble_memcpy>
 801a548:	e0b7      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a54a:	4620      	mov	r0, r4
 801a54c:	2101      	movs	r1, #1
 801a54e:	2c00      	cmp	r4, #0
 801a550:	bf18      	it	ne
 801a552:	2001      	movne	r0, #1
 801a554:	f001 f9e3 	bl	801b91e <bsp_assert>
 801a558:	6828      	ldr	r0, [r5, #0]
 801a55a:	8969      	ldrh	r1, [r5, #10]
 801a55c:	4408      	add	r0, r1
 801a55e:	7941      	ldrb	r1, [r0, #5]
 801a560:	7982      	ldrb	r2, [r0, #6]
 801a562:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a566:	8121      	strh	r1, [r4, #8]
 801a568:	79c1      	ldrb	r1, [r0, #7]
 801a56a:	7a02      	ldrb	r2, [r0, #8]
 801a56c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a570:	8161      	strh	r1, [r4, #10]
 801a572:	7a41      	ldrb	r1, [r0, #9]
 801a574:	7a82      	ldrb	r2, [r0, #10]
 801a576:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a57a:	81a1      	strh	r1, [r4, #12]
 801a57c:	7ac1      	ldrb	r1, [r0, #11]
 801a57e:	7b02      	ldrb	r2, [r0, #12]
 801a580:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a584:	81e1      	strh	r1, [r4, #14]
 801a586:	7b41      	ldrb	r1, [r0, #13]
 801a588:	f884 1028 	strb.w	r1, [r4, #40]	@ 0x28
 801a58c:	7b81      	ldrb	r1, [r0, #14]
 801a58e:	7bc2      	ldrb	r2, [r0, #15]
 801a590:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a594:	8321      	strh	r1, [r4, #24]
 801a596:	7c01      	ldrb	r1, [r0, #16]
 801a598:	7c42      	ldrb	r2, [r0, #17]
 801a59a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a59e:	82a1      	strh	r1, [r4, #20]
 801a5a0:	7c81      	ldrb	r1, [r0, #18]
 801a5a2:	7cc2      	ldrb	r2, [r0, #19]
 801a5a4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a5a8:	83e1      	strh	r1, [r4, #30]
 801a5aa:	7d01      	ldrb	r1, [r0, #20]
 801a5ac:	7d42      	ldrb	r2, [r0, #21]
 801a5ae:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a5b2:	8421      	strh	r1, [r4, #32]
 801a5b4:	7d81      	ldrb	r1, [r0, #22]
 801a5b6:	7dc2      	ldrb	r2, [r0, #23]
 801a5b8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a5bc:	8461      	strh	r1, [r4, #34]	@ 0x22
 801a5be:	7e01      	ldrb	r1, [r0, #24]
 801a5c0:	7e42      	ldrb	r2, [r0, #25]
 801a5c2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a5c6:	84a1      	strh	r1, [r4, #36]	@ 0x24
 801a5c8:	7e81      	ldrb	r1, [r0, #26]
 801a5ca:	7ec0      	ldrb	r0, [r0, #27]
 801a5cc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801a5d0:	84e0      	strh	r0, [r4, #38]	@ 0x26
 801a5d2:	e072      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	2101      	movs	r1, #1
 801a5d8:	2c00      	cmp	r4, #0
 801a5da:	bf18      	it	ne
 801a5dc:	2001      	movne	r0, #1
 801a5de:	f001 f99e 	bl	801b91e <bsp_assert>
 801a5e2:	6828      	ldr	r0, [r5, #0]
 801a5e4:	8969      	ldrh	r1, [r5, #10]
 801a5e6:	4408      	add	r0, r1
 801a5e8:	7941      	ldrb	r1, [r0, #5]
 801a5ea:	7982      	ldrb	r2, [r0, #6]
 801a5ec:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a5f0:	8021      	strh	r1, [r4, #0]
 801a5f2:	79c1      	ldrb	r1, [r0, #7]
 801a5f4:	7a02      	ldrb	r2, [r0, #8]
 801a5f6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a5fa:	8061      	strh	r1, [r4, #2]
 801a5fc:	7a41      	ldrb	r1, [r0, #9]
 801a5fe:	7a82      	ldrb	r2, [r0, #10]
 801a600:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a604:	80a1      	strh	r1, [r4, #4]
 801a606:	7ac1      	ldrb	r1, [r0, #11]
 801a608:	7b00      	ldrb	r0, [r0, #12]
 801a60a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801a60e:	80e0      	strh	r0, [r4, #6]
 801a610:	e053      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a612:	4620      	mov	r0, r4
 801a614:	2101      	movs	r1, #1
 801a616:	2c00      	cmp	r4, #0
 801a618:	bf18      	it	ne
 801a61a:	2001      	movne	r0, #1
 801a61c:	f001 f97f 	bl	801b91e <bsp_assert>
 801a620:	6828      	ldr	r0, [r5, #0]
 801a622:	8969      	ldrh	r1, [r5, #10]
 801a624:	4408      	add	r0, r1
 801a626:	7941      	ldrb	r1, [r0, #5]
 801a628:	7021      	strb	r1, [r4, #0]
 801a62a:	e03a      	b.n	801a6a2 <pdu_trnsprt_hndlr_parse_data_cntrl+0x226>
 801a62c:	2001      	movs	r0, #1
 801a62e:	2101      	movs	r1, #1
 801a630:	f001 f975 	bl	801b91e <bsp_assert>
 801a634:	6828      	ldr	r0, [r5, #0]
 801a636:	2101      	movs	r1, #1
 801a638:	2800      	cmp	r0, #0
 801a63a:	bf18      	it	ne
 801a63c:	2001      	movne	r0, #1
 801a63e:	f001 f96e 	bl	801b91e <bsp_assert>
 801a642:	6828      	ldr	r0, [r5, #0]
 801a644:	8969      	ldrh	r1, [r5, #10]
 801a646:	4408      	add	r0, r1
 801a648:	7940      	ldrb	r0, [r0, #5]
 801a64a:	7020      	strb	r0, [r4, #0]
 801a64c:	e035      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a64e:	4620      	mov	r0, r4
 801a650:	4629      	mov	r1, r5
 801a652:	f000 f835 	bl	801a6c0 <pdu_trnsprt_hndlr_parse_cntrl_conn_updt>
 801a656:	e030      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a658:	4620      	mov	r0, r4
 801a65a:	4629      	mov	r1, r5
 801a65c:	f000 f858 	bl	801a710 <pdu_trnsprt_hndlr_parse_cntrl_chnl_map>
 801a660:	e02b      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a662:	4620      	mov	r0, r4
 801a664:	4629      	mov	r1, r5
 801a666:	f000 f86a 	bl	801a73e <pdu_trnsprt_hndlr_parse_cntrl_encryption_req>
 801a66a:	e026      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a66c:	4620      	mov	r0, r4
 801a66e:	4629      	mov	r1, r5
 801a670:	f000 f8ba 	bl	801a7e8 <pdu_trnsprt_hndlr_parse_cntrl_enc_rsp>
 801a674:	e021      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a676:	4620      	mov	r0, r4
 801a678:	4629      	mov	r1, r5
 801a67a:	f000 f889 	bl	801a790 <pdu_trnsprt_hndlr_parse_cntrl_featr_rsp>
 801a67e:	e01c      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a680:	4620      	mov	r0, r4
 801a682:	4629      	mov	r1, r5
 801a684:	f000 f897 	bl	801a7b6 <pdu_trnsprt_hndlr_parse_cntrl_ver>
 801a688:	e017      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a68a:	2001      	movs	r0, #1
 801a68c:	2101      	movs	r1, #1
 801a68e:	f001 f946 	bl	801b91e <bsp_assert>
 801a692:	6828      	ldr	r0, [r5, #0]
 801a694:	8969      	ldrh	r1, [r5, #10]
 801a696:	4408      	add	r0, r1
 801a698:	7940      	ldrb	r0, [r0, #5]
 801a69a:	7020      	strb	r0, [r4, #0]
 801a69c:	6828      	ldr	r0, [r5, #0]
 801a69e:	8969      	ldrh	r1, [r5, #10]
 801a6a0:	4408      	add	r0, r1
 801a6a2:	7980      	ldrb	r0, [r0, #6]
 801a6a4:	7060      	strb	r0, [r4, #1]
 801a6a6:	e008      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a6a8:	4620      	mov	r0, r4
 801a6aa:	4629      	mov	r1, r5
 801a6ac:	f000 f8b8 	bl	801a820 <pdu_trnsprt_hndlr_parse_phy_update_ind>
 801a6b0:	e003      	b.n	801a6ba <pdu_trnsprt_hndlr_parse_data_cntrl+0x23e>
 801a6b2:	4620      	mov	r0, r4
 801a6b4:	4629      	mov	r1, r5
 801a6b6:	f000 f8c9 	bl	801a84c <pdu_trnsprt_hndlr_parse_min_used_chnls>
 801a6ba:	2000      	movs	r0, #0
 801a6bc:	b001      	add	sp, #4
 801a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a6c0 <pdu_trnsprt_hndlr_parse_cntrl_conn_updt>:
 801a6c0:	b5b0      	push	{r4, r5, r7, lr}
 801a6c2:	460d      	mov	r5, r1
 801a6c4:	2101      	movs	r1, #1
 801a6c6:	4604      	mov	r4, r0
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	bf18      	it	ne
 801a6cc:	2001      	movne	r0, #1
 801a6ce:	f001 f926 	bl	801b91e <bsp_assert>
 801a6d2:	6828      	ldr	r0, [r5, #0]
 801a6d4:	8969      	ldrh	r1, [r5, #10]
 801a6d6:	4408      	add	r0, r1
 801a6d8:	7941      	ldrb	r1, [r0, #5]
 801a6da:	7721      	strb	r1, [r4, #28]
 801a6dc:	7981      	ldrb	r1, [r0, #6]
 801a6de:	79c2      	ldrb	r2, [r0, #7]
 801a6e0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a6e4:	82a1      	strh	r1, [r4, #20]
 801a6e6:	7a01      	ldrb	r1, [r0, #8]
 801a6e8:	7a42      	ldrb	r2, [r0, #9]
 801a6ea:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a6ee:	8361      	strh	r1, [r4, #26]
 801a6f0:	7a81      	ldrb	r1, [r0, #10]
 801a6f2:	7ac2      	ldrb	r2, [r0, #11]
 801a6f4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a6f8:	81a1      	strh	r1, [r4, #12]
 801a6fa:	7b01      	ldrb	r1, [r0, #12]
 801a6fc:	7b42      	ldrb	r2, [r0, #13]
 801a6fe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a702:	81e1      	strh	r1, [r4, #14]
 801a704:	7b81      	ldrb	r1, [r0, #14]
 801a706:	7bc0      	ldrb	r0, [r0, #15]
 801a708:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801a70c:	8320      	strh	r0, [r4, #24]
 801a70e:	bdb0      	pop	{r4, r5, r7, pc}

0801a710 <pdu_trnsprt_hndlr_parse_cntrl_chnl_map>:
 801a710:	b5b0      	push	{r4, r5, r7, lr}
 801a712:	460c      	mov	r4, r1
 801a714:	2101      	movs	r1, #1
 801a716:	4605      	mov	r5, r0
 801a718:	2800      	cmp	r0, #0
 801a71a:	bf18      	it	ne
 801a71c:	2001      	movne	r0, #1
 801a71e:	f001 f8fe 	bl	801b91e <bsp_assert>
 801a722:	6820      	ldr	r0, [r4, #0]
 801a724:	8961      	ldrh	r1, [r4, #10]
 801a726:	2205      	movs	r2, #5
 801a728:	1844      	adds	r4, r0, r1
 801a72a:	1d61      	adds	r1, r4, #5
 801a72c:	1ca8      	adds	r0, r5, #2
 801a72e:	f006 f889 	bl	8020844 <ble_memcpy>
 801a732:	7aa0      	ldrb	r0, [r4, #10]
 801a734:	7ae1      	ldrb	r1, [r4, #11]
 801a736:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801a73a:	8028      	strh	r0, [r5, #0]
 801a73c:	bdb0      	pop	{r4, r5, r7, pc}

0801a73e <pdu_trnsprt_hndlr_parse_cntrl_encryption_req>:
 801a73e:	b5b0      	push	{r4, r5, r7, lr}
 801a740:	460d      	mov	r5, r1
 801a742:	2101      	movs	r1, #1
 801a744:	4604      	mov	r4, r0
 801a746:	2800      	cmp	r0, #0
 801a748:	bf18      	it	ne
 801a74a:	2001      	movne	r0, #1
 801a74c:	f001 f8e7 	bl	801b91e <bsp_assert>
 801a750:	6828      	ldr	r0, [r5, #0]
 801a752:	8969      	ldrh	r1, [r5, #10]
 801a754:	2208      	movs	r2, #8
 801a756:	1845      	adds	r5, r0, r1
 801a758:	1d69      	adds	r1, r5, #5
 801a75a:	4620      	mov	r0, r4
 801a75c:	f006 f872 	bl	8020844 <ble_memcpy>
 801a760:	7b68      	ldrb	r0, [r5, #13]
 801a762:	7ba9      	ldrb	r1, [r5, #14]
 801a764:	2208      	movs	r2, #8
 801a766:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801a76a:	f105 010f 	add.w	r1, r5, #15
 801a76e:	82a0      	strh	r0, [r4, #20]
 801a770:	f104 0008 	add.w	r0, r4, #8
 801a774:	f006 f866 	bl	8020844 <ble_memcpy>
 801a778:	7de8      	ldrb	r0, [r5, #23]
 801a77a:	7e29      	ldrb	r1, [r5, #24]
 801a77c:	7e6a      	ldrb	r2, [r5, #25]
 801a77e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801a782:	7ea9      	ldrb	r1, [r5, #26]
 801a784:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801a788:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 801a78c:	6120      	str	r0, [r4, #16]
 801a78e:	bdb0      	pop	{r4, r5, r7, pc}

0801a790 <pdu_trnsprt_hndlr_parse_cntrl_featr_rsp>:
 801a790:	b5b0      	push	{r4, r5, r7, lr}
 801a792:	460c      	mov	r4, r1
 801a794:	2101      	movs	r1, #1
 801a796:	4605      	mov	r5, r0
 801a798:	2800      	cmp	r0, #0
 801a79a:	bf18      	it	ne
 801a79c:	2001      	movne	r0, #1
 801a79e:	f001 f8be 	bl	801b91e <bsp_assert>
 801a7a2:	6820      	ldr	r0, [r4, #0]
 801a7a4:	8961      	ldrh	r1, [r4, #10]
 801a7a6:	2208      	movs	r2, #8
 801a7a8:	4408      	add	r0, r1
 801a7aa:	1d41      	adds	r1, r0, #5
 801a7ac:	4628      	mov	r0, r5
 801a7ae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801a7b2:	f006 b847 	b.w	8020844 <ble_memcpy>

0801a7b6 <pdu_trnsprt_hndlr_parse_cntrl_ver>:
 801a7b6:	b5b0      	push	{r4, r5, r7, lr}
 801a7b8:	460c      	mov	r4, r1
 801a7ba:	2101      	movs	r1, #1
 801a7bc:	4605      	mov	r5, r0
 801a7be:	2800      	cmp	r0, #0
 801a7c0:	bf18      	it	ne
 801a7c2:	2001      	movne	r0, #1
 801a7c4:	f001 f8ab 	bl	801b91e <bsp_assert>
 801a7c8:	6820      	ldr	r0, [r4, #0]
 801a7ca:	8961      	ldrh	r1, [r4, #10]
 801a7cc:	4408      	add	r0, r1
 801a7ce:	7941      	ldrb	r1, [r0, #5]
 801a7d0:	7129      	strb	r1, [r5, #4]
 801a7d2:	7981      	ldrb	r1, [r0, #6]
 801a7d4:	79c2      	ldrb	r2, [r0, #7]
 801a7d6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801a7da:	8029      	strh	r1, [r5, #0]
 801a7dc:	7a01      	ldrb	r1, [r0, #8]
 801a7de:	7a40      	ldrb	r0, [r0, #9]
 801a7e0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801a7e4:	8068      	strh	r0, [r5, #2]
 801a7e6:	bdb0      	pop	{r4, r5, r7, pc}

0801a7e8 <pdu_trnsprt_hndlr_parse_cntrl_enc_rsp>:
 801a7e8:	b5b0      	push	{r4, r5, r7, lr}
 801a7ea:	460c      	mov	r4, r1
 801a7ec:	2101      	movs	r1, #1
 801a7ee:	4605      	mov	r5, r0
 801a7f0:	2800      	cmp	r0, #0
 801a7f2:	bf18      	it	ne
 801a7f4:	2001      	movne	r0, #1
 801a7f6:	f001 f892 	bl	801b91e <bsp_assert>
 801a7fa:	6821      	ldr	r1, [r4, #0]
 801a7fc:	8962      	ldrh	r2, [r4, #10]
 801a7fe:	1d28      	adds	r0, r5, #4
 801a800:	4411      	add	r1, r2
 801a802:	3105      	adds	r1, #5
 801a804:	2208      	movs	r2, #8
 801a806:	f006 f81d 	bl	8020844 <ble_memcpy>
 801a80a:	6820      	ldr	r0, [r4, #0]
 801a80c:	8961      	ldrh	r1, [r4, #10]
 801a80e:	2204      	movs	r2, #4
 801a810:	4408      	add	r0, r1
 801a812:	f100 010d 	add.w	r1, r0, #13
 801a816:	4628      	mov	r0, r5
 801a818:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801a81c:	f006 b812 	b.w	8020844 <ble_memcpy>

0801a820 <pdu_trnsprt_hndlr_parse_phy_update_ind>:
 801a820:	b5b0      	push	{r4, r5, r7, lr}
 801a822:	460c      	mov	r4, r1
 801a824:	2101      	movs	r1, #1
 801a826:	4605      	mov	r5, r0
 801a828:	2800      	cmp	r0, #0
 801a82a:	bf18      	it	ne
 801a82c:	2001      	movne	r0, #1
 801a82e:	f001 f876 	bl	801b91e <bsp_assert>
 801a832:	6820      	ldr	r0, [r4, #0]
 801a834:	8961      	ldrh	r1, [r4, #10]
 801a836:	4408      	add	r0, r1
 801a838:	7941      	ldrb	r1, [r0, #5]
 801a83a:	7029      	strb	r1, [r5, #0]
 801a83c:	7981      	ldrb	r1, [r0, #6]
 801a83e:	7069      	strb	r1, [r5, #1]
 801a840:	79c1      	ldrb	r1, [r0, #7]
 801a842:	7a00      	ldrb	r0, [r0, #8]
 801a844:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801a848:	8068      	strh	r0, [r5, #2]
 801a84a:	bdb0      	pop	{r4, r5, r7, pc}

0801a84c <pdu_trnsprt_hndlr_parse_min_used_chnls>:
 801a84c:	b5b0      	push	{r4, r5, r7, lr}
 801a84e:	460d      	mov	r5, r1
 801a850:	2101      	movs	r1, #1
 801a852:	4604      	mov	r4, r0
 801a854:	2800      	cmp	r0, #0
 801a856:	bf18      	it	ne
 801a858:	2001      	movne	r0, #1
 801a85a:	f001 f860 	bl	801b91e <bsp_assert>
 801a85e:	4628      	mov	r0, r5
 801a860:	2101      	movs	r1, #1
 801a862:	2d00      	cmp	r5, #0
 801a864:	bf18      	it	ne
 801a866:	2001      	movne	r0, #1
 801a868:	f001 f859 	bl	801b91e <bsp_assert>
 801a86c:	6828      	ldr	r0, [r5, #0]
 801a86e:	2101      	movs	r1, #1
 801a870:	2800      	cmp	r0, #0
 801a872:	bf18      	it	ne
 801a874:	2001      	movne	r0, #1
 801a876:	f001 f852 	bl	801b91e <bsp_assert>
 801a87a:	6828      	ldr	r0, [r5, #0]
 801a87c:	8969      	ldrh	r1, [r5, #10]
 801a87e:	4408      	add	r0, r1
 801a880:	7941      	ldrb	r1, [r0, #5]
 801a882:	7021      	strb	r1, [r4, #0]
 801a884:	7980      	ldrb	r0, [r0, #6]
 801a886:	7060      	strb	r0, [r4, #1]
 801a888:	bdb0      	pop	{r4, r5, r7, pc}

0801a88a <pdu_trnsprt_hndlr_get_payload_lngth>:
 801a88a:	6801      	ldr	r1, [r0, #0]
 801a88c:	8940      	ldrh	r0, [r0, #10]
 801a88e:	4408      	add	r0, r1
 801a890:	7840      	ldrb	r0, [r0, #1]
 801a892:	4770      	bx	lr

0801a894 <allocate_data_packet>:
 801a894:	b570      	push	{r4, r5, r6, lr}
 801a896:	4605      	mov	r5, r0
 801a898:	f249 5014 	movw	r0, #38164	@ 0x9514
 801a89c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a8a0:	460e      	mov	r6, r1
 801a8a2:	f003 f909 	bl	801dab8 <os_mem_pool_alloc>
 801a8a6:	2101      	movs	r1, #1
 801a8a8:	4604      	mov	r4, r0
 801a8aa:	2800      	cmp	r0, #0
 801a8ac:	bf18      	it	ne
 801a8ae:	2001      	movne	r0, #1
 801a8b0:	f001 f835 	bl	801b91e <bsp_assert>
 801a8b4:	b17c      	cbz	r4, 801a8d6 <allocate_data_packet+0x42>
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	2100      	movs	r1, #0
 801a8ba:	2210      	movs	r2, #16
 801a8bc:	f006 f812 	bl	80208e4 <ble_memset>
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	f003 f8fd 	bl	801dac0 <os_shrd_mem_alloc>
 801a8c6:	6020      	str	r0, [r4, #0]
 801a8c8:	b110      	cbz	r0, 801a8d0 <allocate_data_packet+0x3c>
 801a8ca:	6830      	ldr	r0, [r6, #0]
 801a8cc:	8120      	strh	r0, [r4, #8]
 801a8ce:	e003      	b.n	801a8d8 <allocate_data_packet+0x44>
 801a8d0:	4620      	mov	r0, r4
 801a8d2:	f003 f8f3 	bl	801dabc <os_mem_pool_free>
 801a8d6:	2400      	movs	r4, #0
 801a8d8:	b105      	cbz	r5, 801a8dc <allocate_data_packet+0x48>
 801a8da:	606c      	str	r4, [r5, #4]
 801a8dc:	b134      	cbz	r4, 801a8ec <allocate_data_packet+0x58>
 801a8de:	6820      	ldr	r0, [r4, #0]
 801a8e0:	b120      	cbz	r0, 801a8ec <allocate_data_packet+0x58>
 801a8e2:	3804      	subs	r0, #4
 801a8e4:	2100      	movs	r1, #0
 801a8e6:	2204      	movs	r2, #4
 801a8e8:	f005 fffc 	bl	80208e4 <ble_memset>
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	bd70      	pop	{r4, r5, r6, pc}

0801a8f0 <free_buff_hdr>:
 801a8f0:	b5b0      	push	{r4, r5, r7, lr}
 801a8f2:	2101      	movs	r1, #1
 801a8f4:	4604      	mov	r4, r0
 801a8f6:	2800      	cmp	r0, #0
 801a8f8:	bf18      	it	ne
 801a8fa:	2001      	movne	r0, #1
 801a8fc:	f001 f80f 	bl	801b91e <bsp_assert>
 801a900:	7ba0      	ldrb	r0, [r4, #14]
 801a902:	0740      	lsls	r0, r0, #29
 801a904:	d40c      	bmi.n	801a920 <free_buff_hdr+0x30>
 801a906:	6820      	ldr	r0, [r4, #0]
 801a908:	2101      	movs	r1, #1
 801a90a:	2800      	cmp	r0, #0
 801a90c:	bf18      	it	ne
 801a90e:	2001      	movne	r0, #1
 801a910:	2501      	movs	r5, #1
 801a912:	f001 f804 	bl	801b91e <bsp_assert>
 801a916:	6820      	ldr	r0, [r4, #0]
 801a918:	3804      	subs	r0, #4
 801a91a:	f003 f8cf 	bl	801dabc <os_mem_pool_free>
 801a91e:	e000      	b.n	801a922 <free_buff_hdr+0x32>
 801a920:	2500      	movs	r5, #0
 801a922:	4620      	mov	r0, r4
 801a924:	f003 f8ca 	bl	801dabc <os_mem_pool_free>
 801a928:	4628      	mov	r0, r5
 801a92a:	bdb0      	pop	{r4, r5, r7, pc}

0801a92c <get_nxt_data_packet>:
 801a92c:	6840      	ldr	r0, [r0, #4]
 801a92e:	4770      	bx	lr

0801a930 <prvcy_mngr_reset>:
 801a930:	b5b0      	push	{r4, r5, r7, lr}
 801a932:	b082      	sub	sp, #8
 801a934:	f646 7468 	movw	r4, #28520	@ 0x6f68
 801a938:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801a93c:	20aa      	movs	r0, #170	@ 0xaa
 801a93e:	2500      	movs	r5, #0
 801a940:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 801a944:	f104 0018 	add.w	r0, r4, #24
 801a948:	2100      	movs	r1, #0
 801a94a:	2206      	movs	r2, #6
 801a94c:	86e5      	strh	r5, [r4, #54]	@ 0x36
 801a94e:	f005 ffc9 	bl	80208e4 <ble_memset>
 801a952:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a956:	8620      	strh	r0, [r4, #48]	@ 0x30
 801a958:	2002      	movs	r0, #2
 801a95a:	2100      	movs	r1, #0
 801a95c:	2200      	movs	r2, #0
 801a95e:	2300      	movs	r3, #0
 801a960:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 801a964:	9500      	str	r5, [sp, #0]
 801a966:	f000 f803 	bl	801a970 <prvcy_mngr_add_rmv_clr_fw_reslvng_list>
 801a96a:	b002      	add	sp, #8
 801a96c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a970 <prvcy_mngr_add_rmv_clr_fw_reslvng_list>:
 801a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a974:	b089      	sub	sp, #36	@ 0x24
 801a976:	f646 7668 	movw	r6, #28520	@ 0x6f68
 801a97a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801a97e:	4689      	mov	r9, r1
 801a980:	f896 1036 	ldrb.w	r1, [r6, #54]	@ 0x36
 801a984:	469b      	mov	fp, r3
 801a986:	4614      	mov	r4, r2
 801a988:	4607      	mov	r7, r0
 801a98a:	2901      	cmp	r1, #1
 801a98c:	f04f 0000 	mov.w	r0, #0
 801a990:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801a994:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801a998:	d103      	bne.n	801a9a2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x32>
 801a99a:	f7ff f8b0 	bl	8019afe <non_conn_mngr_event_status_check>
 801a99e:	4605      	mov	r5, r0
 801a9a0:	b918      	cbnz	r0, 801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801a9a2:	2f02      	cmp	r7, #2
 801a9a4:	d005      	beq.n	801a9b2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x42>
 801a9a6:	b924      	cbnz	r4, 801a9b2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x42>
 801a9a8:	2511      	movs	r5, #17
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	b009      	add	sp, #36	@ 0x24
 801a9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b2:	b32f      	cbz	r7, 801aa00 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x90>
 801a9b4:	2f01      	cmp	r7, #1
 801a9b6:	d075      	beq.n	801aaa4 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x134>
 801a9b8:	2f02      	cmp	r7, #2
 801a9ba:	f040 808d 	bne.w	801aad8 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x168>
 801a9be:	2500      	movs	r5, #0
 801a9c0:	b2ec      	uxtb	r4, r5
 801a9c2:	4620      	mov	r0, r4
 801a9c4:	f000 fd6a 	bl	801b49c <prvcy_mngr_remove_from_associated_lists>
 801a9c8:	2c04      	cmp	r4, #4
 801a9ca:	f105 0501 	add.w	r5, r5, #1
 801a9ce:	d3f7      	bcc.n	801a9c0 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x50>
 801a9d0:	f646 70a4 	movw	r0, #28580	@ 0x6fa4
 801a9d4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a9d8:	2100      	movs	r1, #0
 801a9da:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 801a9de:	2500      	movs	r5, #0
 801a9e0:	f005 ff80 	bl	80208e4 <ble_memset>
 801a9e4:	2003      	movs	r0, #3
 801a9e6:	f7f8 ffff 	bl	80139e8 <llhwc_lst_clr>
 801a9ea:	2004      	movs	r0, #4
 801a9ec:	f7f8 fffc 	bl	80139e8 <llhwc_lst_clr>
 801a9f0:	f247 00f8 	movw	r0, #28920	@ 0x70f8
 801a9f4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801a9f8:	7005      	strb	r5, [r0, #0]
 801a9fa:	f000 fd79 	bl	801b4f0 <prvcy_mngr_free_tmr>
 801a9fe:	e7d4      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801aa00:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801aa02:	b9a0      	cbnz	r0, 801aa2e <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0xbe>
 801aa04:	f24b 60ad 	movw	r0, #46765	@ 0xb6ad
 801aa08:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801aa0c:	2101      	movs	r1, #1
 801aa0e:	2200      	movs	r2, #0
 801aa10:	f003 fa1a 	bl	801de48 <os_timer_create>
 801aa14:	2800      	cmp	r0, #0
 801aa16:	62f0      	str	r0, [r6, #44]	@ 0x2c
 801aa18:	d03f      	beq.n	801aa9a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x12a>
 801aa1a:	f003 fb4b 	bl	801e0b4 <os_timer_stop>
 801aa1e:	8e31      	ldrh	r1, [r6, #48]	@ 0x30
 801aa20:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 801aa24:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801aa26:	fb01 f102 	mul.w	r1, r1, r2
 801aa2a:	f003 fa86 	bl	801df3a <os_timer_start>
 801aa2e:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 801aa32:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801aa36:	2600      	movs	r6, #0
 801aa38:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801aa3c:	f10d 0a14 	add.w	sl, sp, #20
 801aa40:	e9cd 6607 	strd	r6, r6, [sp, #28]
 801aa44:	e9cd 6605 	strd	r6, r6, [sp, #20]
 801aa48:	19af      	adds	r7, r5, r6
 801aa4a:	7e38      	ldrb	r0, [r7, #24]
 801aa4c:	2801      	cmp	r0, #1
 801aa4e:	d117      	bne.n	801aa80 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x110>
 801aa50:	4620      	mov	r0, r4
 801aa52:	4639      	mov	r1, r7
 801aa54:	2206      	movs	r2, #6
 801aa56:	f005 ff7d 	bl	8020954 <ble_memcmp>
 801aa5a:	b918      	cbnz	r0, 801aa64 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0xf4>
 801aa5c:	7e78      	ldrb	r0, [r7, #25]
 801aa5e:	4548      	cmp	r0, r9
 801aa60:	f000 8085 	beq.w	801ab6e <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1fe>
 801aa64:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801aa68:	4658      	mov	r0, fp
 801aa6a:	2210      	movs	r2, #16
 801aa6c:	f005 ff72 	bl	8020954 <ble_memcmp>
 801aa70:	b930      	cbnz	r0, 801aa80 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x110>
 801aa72:	4658      	mov	r0, fp
 801aa74:	4651      	mov	r1, sl
 801aa76:	2210      	movs	r2, #16
 801aa78:	f005 ff6c 	bl	8020954 <ble_memcmp>
 801aa7c:	2800      	cmp	r0, #0
 801aa7e:	d176      	bne.n	801ab6e <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1fe>
 801aa80:	3644      	adds	r6, #68	@ 0x44
 801aa82:	f5b6 7faa 	cmp.w	r6, #340	@ 0x154
 801aa86:	d1df      	bne.n	801aa48 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0xd8>
 801aa88:	2000      	movs	r0, #0
 801aa8a:	bf00      	nop
 801aa8c:	182f      	adds	r7, r5, r0
 801aa8e:	7e39      	ldrb	r1, [r7, #24]
 801aa90:	b339      	cbz	r1, 801aae2 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x172>
 801aa92:	3044      	adds	r0, #68	@ 0x44
 801aa94:	f5b0 7faa 	cmp.w	r0, #340	@ 0x154
 801aa98:	d1f8      	bne.n	801aa8c <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x11c>
 801aa9a:	2042      	movs	r0, #66	@ 0x42
 801aa9c:	f000 ff8a 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801aaa0:	2507      	movs	r5, #7
 801aaa2:	e782      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801aaa4:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801aaa8:	2600      	movs	r6, #0
 801aaaa:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801aaae:	bf00      	nop
 801aab0:	4620      	mov	r0, r4
 801aab2:	4629      	mov	r1, r5
 801aab4:	2206      	movs	r2, #6
 801aab6:	f005 ff4d 	bl	8020954 <ble_memcmp>
 801aaba:	f88d 0014 	strb.w	r0, [sp, #20]
 801aabe:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801aac2:	b910      	cbnz	r0, 801aaca <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x15a>
 801aac4:	7e68      	ldrb	r0, [r5, #25]
 801aac6:	4548      	cmp	r0, r9
 801aac8:	d037      	beq.n	801ab3a <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1ca>
 801aaca:	3601      	adds	r6, #1
 801aacc:	2e05      	cmp	r6, #5
 801aace:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801aad2:	d1ed      	bne.n	801aab0 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x140>
 801aad4:	2502      	movs	r5, #2
 801aad6:	e768      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801aad8:	2043      	movs	r0, #67	@ 0x43
 801aada:	f000 ff6b 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801aade:	250c      	movs	r5, #12
 801aae0:	e763      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801aae2:	4638      	mov	r0, r7
 801aae4:	4621      	mov	r1, r4
 801aae6:	2206      	movs	r2, #6
 801aae8:	f887 9019 	strb.w	r9, [r7, #25]
 801aaec:	f005 feaa 	bl	8020844 <ble_memcpy>
 801aaf0:	f107 0420 	add.w	r4, r7, #32
 801aaf4:	4620      	mov	r0, r4
 801aaf6:	4641      	mov	r1, r8
 801aaf8:	2210      	movs	r2, #16
 801aafa:	f005 fea3 	bl	8020844 <ble_memcpy>
 801aafe:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 801ab02:	4628      	mov	r0, r5
 801ab04:	4659      	mov	r1, fp
 801ab06:	2210      	movs	r2, #16
 801ab08:	f005 fe9c 	bl	8020844 <ble_memcpy>
 801ab0c:	2601      	movs	r6, #1
 801ab0e:	a901      	add	r1, sp, #4
 801ab10:	4628      	mov	r0, r5
 801ab12:	2210      	movs	r2, #16
 801ab14:	763e      	strb	r6, [r7, #24]
 801ab16:	f005 ff1d 	bl	8020954 <ble_memcmp>
 801ab1a:	b350      	cbz	r0, 801ab72 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x202>
 801ab1c:	7e7a      	ldrb	r2, [r7, #25]
 801ab1e:	2600      	movs	r6, #0
 801ab20:	2000      	movs	r0, #0
 801ab22:	2105      	movs	r1, #5
 801ab24:	463b      	mov	r3, r7
 801ab26:	f887 6040 	strb.w	r6, [r7, #64]	@ 0x40
 801ab2a:	9600      	str	r6, [sp, #0]
 801ab2c:	f7f9 f8ec 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801ab30:	4605      	mov	r5, r0
 801ab32:	2800      	cmp	r0, #0
 801ab34:	f47f af39 	bne.w	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ab38:	e01d      	b.n	801ab76 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x206>
 801ab3a:	f247 07f8 	movw	r7, #28920	@ 0x70f8
 801ab3e:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801ab42:	7839      	ldrb	r1, [r7, #0]
 801ab44:	2000      	movs	r0, #0
 801ab46:	7628      	strb	r0, [r5, #24]
 801ab48:	1e48      	subs	r0, r1, #1
 801ab4a:	b2f4      	uxtb	r4, r6
 801ab4c:	7038      	strb	r0, [r7, #0]
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f000 fca4 	bl	801b49c <prvcy_mngr_remove_from_associated_lists>
 801ab54:	4628      	mov	r0, r5
 801ab56:	2100      	movs	r1, #0
 801ab58:	2244      	movs	r2, #68	@ 0x44
 801ab5a:	f005 fec3 	bl	80208e4 <ble_memset>
 801ab5e:	7838      	ldrb	r0, [r7, #0]
 801ab60:	b908      	cbnz	r0, 801ab66 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x1f6>
 801ab62:	f000 fcc5 	bl	801b4f0 <prvcy_mngr_free_tmr>
 801ab66:	2c05      	cmp	r4, #5
 801ab68:	d0b4      	beq.n	801aad4 <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x164>
 801ab6a:	2500      	movs	r5, #0
 801ab6c:	e71d      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ab6e:	2512      	movs	r5, #18
 801ab70:	e71b      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ab72:	f887 6040 	strb.w	r6, [r7, #64]	@ 0x40
 801ab76:	f247 00f8 	movw	r0, #28920	@ 0x70f8
 801ab7a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ab7e:	7801      	ldrb	r1, [r0, #0]
 801ab80:	2210      	movs	r2, #16
 801ab82:	3101      	adds	r1, #1
 801ab84:	7001      	strb	r1, [r0, #0]
 801ab86:	a901      	add	r1, sp, #4
 801ab88:	4620      	mov	r0, r4
 801ab8a:	f005 fee3 	bl	8020954 <ble_memcmp>
 801ab8e:	f107 0108 	add.w	r1, r7, #8
 801ab92:	b120      	cbz	r0, 801ab9e <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x22e>
 801ab94:	4620      	mov	r0, r4
 801ab96:	f000 fc47 	bl	801b428 <prvcy_mngr_addr_gen>
 801ab9a:	4605      	mov	r5, r0
 801ab9c:	e705      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>
 801ab9e:	4608      	mov	r0, r1
 801aba0:	2100      	movs	r1, #0
 801aba2:	2206      	movs	r2, #6
 801aba4:	2500      	movs	r5, #0
 801aba6:	f005 fe9d 	bl	80208e4 <ble_memset>
 801abaa:	e6fe      	b.n	801a9aa <prvcy_mngr_add_rmv_clr_fw_reslvng_list+0x3a>

0801abac <prvcy_mngr_addr_hndlr>:
 801abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb0:	b083      	sub	sp, #12
 801abb2:	f646 7868 	movw	r8, #28520	@ 0x6f68
 801abb6:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801abba:	4683      	mov	fp, r0
 801abbc:	f898 0025 	ldrb.w	r0, [r8, #37]	@ 0x25
 801abc0:	468a      	mov	sl, r1
 801abc2:	2700      	movs	r7, #0
 801abc4:	2801      	cmp	r0, #1
 801abc6:	f04f 0001 	mov.w	r0, #1
 801abca:	9702      	str	r7, [sp, #8]
 801abcc:	f040 8120 	bne.w	801ae10 <prvcy_mngr_addr_hndlr+0x264>
 801abd0:	f898 1005 	ldrb.w	r1, [r8, #5]
 801abd4:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 801abd8:	2940      	cmp	r1, #64	@ 0x40
 801abda:	f040 8119 	bne.w	801ae10 <prvcy_mngr_addr_hndlr+0x264>
 801abde:	2001      	movs	r0, #1
 801abe0:	f888 0024 	strb.w	r0, [r8, #36]	@ 0x24
 801abe4:	f10d 0306 	add.w	r3, sp, #6
 801abe8:	2003      	movs	r0, #3
 801abea:	2101      	movs	r1, #1
 801abec:	4642      	mov	r2, r8
 801abee:	f7f8 ffe8 	bl	8013bc2 <llhwc_lst_search>
 801abf2:	4607      	mov	r7, r0
 801abf4:	2800      	cmp	r0, #0
 801abf6:	f040 817e 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801abfa:	f89d 0006 	ldrb.w	r0, [sp, #6]
 801abfe:	07c1      	lsls	r1, r0, #31
 801ac00:	d134      	bne.n	801ac6c <prvcy_mngr_addr_hndlr+0xc0>
 801ac02:	f898 1029 	ldrb.w	r1, [r8, #41]	@ 0x29
 801ac06:	2905      	cmp	r1, #5
 801ac08:	d10a      	bne.n	801ac20 <prvcy_mngr_addr_hndlr+0x74>
 801ac0a:	f898 1034 	ldrb.w	r1, [r8, #52]	@ 0x34
 801ac0e:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 801ac12:	2901      	cmp	r1, #1
 801ac14:	d104      	bne.n	801ac20 <prvcy_mngr_addr_hndlr+0x74>
 801ac16:	f7f9 fa01 	bl	801401c <llhwc_lst_read_indicators>
 801ac1a:	0740      	lsls	r0, r0, #29
 801ac1c:	f140 816a 	bpl.w	801aef4 <prvcy_mngr_addr_hndlr+0x348>
 801ac20:	f10d 0106 	add.w	r1, sp, #6
 801ac24:	aa02      	add	r2, sp, #8
 801ac26:	f10d 0307 	add.w	r3, sp, #7
 801ac2a:	2003      	movs	r0, #3
 801ac2c:	f000 fac2 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 801ac30:	9a02      	ldr	r2, [sp, #8]
 801ac32:	2a00      	cmp	r2, #0
 801ac34:	d074      	beq.n	801ad20 <prvcy_mngr_addr_hndlr+0x174>
 801ac36:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801ac3a:	f10d 0306 	add.w	r3, sp, #6
 801ac3e:	1c88      	adds	r0, r1, #2
 801ac40:	f888 0026 	strb.w	r0, [r8, #38]	@ 0x26
 801ac44:	2006      	movs	r0, #6
 801ac46:	f8c8 2020 	str.w	r2, [r8, #32]
 801ac4a:	f7f8 ffba 	bl	8013bc2 <llhwc_lst_search>
 801ac4e:	4607      	mov	r7, r0
 801ac50:	2800      	cmp	r0, #0
 801ac52:	f040 8150 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ac56:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801ac5a:	07c8      	lsls	r0, r1, #31
 801ac5c:	d166      	bne.n	801ad2c <prvcy_mngr_addr_hndlr+0x180>
 801ac5e:	2006      	movs	r0, #6
 801ac60:	2200      	movs	r2, #0
 801ac62:	2700      	movs	r7, #0
 801ac64:	f7f9 f9e3 	bl	801402e <llhwc_lst_edit_indicators>
 801ac68:	2001      	movs	r0, #1
 801ac6a:	e0d1      	b.n	801ae10 <prvcy_mngr_addr_hndlr+0x264>
 801ac6c:	f646 72a4 	movw	r2, #28580	@ 0x6fa4
 801ac70:	f646 7368 	movw	r3, #28520	@ 0x6f68
 801ac74:	2500      	movs	r5, #0
 801ac76:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ac7a:	2000      	movs	r0, #0
 801ac7c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801ac80:	2700      	movs	r7, #0
 801ac82:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 801ac86:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 801ac8a:	bf00      	nop
 801ac8c:	7e31      	ldrb	r1, [r6, #24]
 801ac8e:	2901      	cmp	r1, #1
 801ac90:	d005      	beq.n	801ac9e <prvcy_mngr_addr_hndlr+0xf2>
 801ac92:	3501      	adds	r5, #1
 801ac94:	2d05      	cmp	r5, #5
 801ac96:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801ac9a:	d1f7      	bne.n	801ac8c <prvcy_mngr_addr_hndlr+0xe0>
 801ac9c:	e015      	b.n	801acca <prvcy_mngr_addr_hndlr+0x11e>
 801ac9e:	4691      	mov	r9, r2
 801aca0:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 801aca4:	4619      	mov	r1, r3
 801aca6:	2200      	movs	r2, #0
 801aca8:	461c      	mov	r4, r3
 801acaa:	f000 f947 	bl	801af3c <prvcy_mngr_addr_rsln>
 801acae:	280f      	cmp	r0, #15
 801acb0:	f040 808c 	bne.w	801adcc <prvcy_mngr_addr_hndlr+0x220>
 801acb4:	2d04      	cmp	r5, #4
 801acb6:	f105 0501 	add.w	r5, r5, #1
 801acba:	f04f 070f 	mov.w	r7, #15
 801acbe:	f04f 0001 	mov.w	r0, #1
 801acc2:	4623      	mov	r3, r4
 801acc4:	464a      	mov	r2, r9
 801acc6:	d1dc      	bne.n	801ac82 <prvcy_mngr_addr_hndlr+0xd6>
 801acc8:	e002      	b.n	801acd0 <prvcy_mngr_addr_hndlr+0x124>
 801acca:	07c0      	lsls	r0, r0, #31
 801accc:	f000 8094 	beq.w	801adf8 <prvcy_mngr_addr_hndlr+0x24c>
 801acd0:	f1bb 0f00 	cmp.w	fp, #0
 801acd4:	d02d      	beq.n	801ad32 <prvcy_mngr_addr_hndlr+0x186>
 801acd6:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 801acda:	2000      	movs	r0, #0
 801acdc:	2103      	movs	r1, #3
 801acde:	f10d 0506 	add.w	r5, sp, #6
 801ace2:	461c      	mov	r4, r3
 801ace4:	9500      	str	r5, [sp, #0]
 801ace6:	f7f9 f80f 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801acea:	b3b0      	cbz	r0, 801ad5a <prvcy_mngr_addr_hndlr+0x1ae>
 801acec:	4607      	mov	r7, r0
 801acee:	2807      	cmp	r0, #7
 801acf0:	f040 8101 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801acf4:	2003      	movs	r0, #3
 801acf6:	f7fd fff2 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 801acfa:	4607      	mov	r7, r0
 801acfc:	2800      	cmp	r0, #0
 801acfe:	f040 80fa 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ad02:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 801ad06:	4623      	mov	r3, r4
 801ad08:	2000      	movs	r0, #0
 801ad0a:	2103      	movs	r1, #3
 801ad0c:	9500      	str	r5, [sp, #0]
 801ad0e:	f7f8 fffb 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801ad12:	b310      	cbz	r0, 801ad5a <prvcy_mngr_addr_hndlr+0x1ae>
 801ad14:	4607      	mov	r7, r0
 801ad16:	2000      	movs	r0, #0
 801ad18:	2101      	movs	r1, #1
 801ad1a:	f000 fe00 	bl	801b91e <bsp_assert>
 801ad1e:	e0ea      	b.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ad20:	f898 0025 	ldrb.w	r0, [r8, #37]	@ 0x25
 801ad24:	f8c8 8020 	str.w	r8, [r8, #32]
 801ad28:	f888 0026 	strb.w	r0, [r8, #38]	@ 0x26
 801ad2c:	2001      	movs	r0, #1
 801ad2e:	2700      	movs	r7, #0
 801ad30:	e06e      	b.n	801ae10 <prvcy_mngr_addr_hndlr+0x264>
 801ad32:	f893 0029 	ldrb.w	r0, [r3, #41]	@ 0x29
 801ad36:	f10d 0506 	add.w	r5, sp, #6
 801ad3a:	2805      	cmp	r0, #5
 801ad3c:	d115      	bne.n	801ad6a <prvcy_mngr_addr_hndlr+0x1be>
 801ad3e:	f893 0034 	ldrb.w	r0, [r3, #52]	@ 0x34
 801ad42:	270f      	movs	r7, #15
 801ad44:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 801ad48:	2801      	cmp	r0, #1
 801ad4a:	f000 80d4 	beq.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ad4e:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 801ad52:	4619      	mov	r1, r3
 801ad54:	2801      	cmp	r0, #1
 801ad56:	d110      	bne.n	801ad7a <prvcy_mngr_addr_hndlr+0x1ce>
 801ad58:	e0cd      	b.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ad5a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801ad5e:	2000      	movs	r0, #0
 801ad60:	2201      	movs	r2, #1
 801ad62:	2700      	movs	r7, #0
 801ad64:	f7f9 f963 	bl	801402e <llhwc_lst_edit_indicators>
 801ad68:	e045      	b.n	801adf6 <prvcy_mngr_addr_hndlr+0x24a>
 801ad6a:	4619      	mov	r1, r3
 801ad6c:	2809      	cmp	r0, #9
 801ad6e:	d104      	bne.n	801ad7a <prvcy_mngr_addr_hndlr+0x1ce>
 801ad70:	f891 0028 	ldrb.w	r0, [r1, #40]	@ 0x28
 801ad74:	2809      	cmp	r0, #9
 801ad76:	f000 80bd 	beq.w	801aef4 <prvcy_mngr_addr_hndlr+0x348>
 801ad7a:	f891 2025 	ldrb.w	r2, [r1, #37]	@ 0x25
 801ad7e:	460b      	mov	r3, r1
 801ad80:	6209      	str	r1, [r1, #32]
 801ad82:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
 801ad86:	2000      	movs	r0, #0
 801ad88:	2103      	movs	r1, #3
 801ad8a:	461c      	mov	r4, r3
 801ad8c:	9500      	str	r5, [sp, #0]
 801ad8e:	f7f8 ffbb 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801ad92:	4607      	mov	r7, r0
 801ad94:	b378      	cbz	r0, 801adf6 <prvcy_mngr_addr_hndlr+0x24a>
 801ad96:	2f07      	cmp	r7, #7
 801ad98:	f040 80ad 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ad9c:	2003      	movs	r0, #3
 801ad9e:	f7fd ff9e 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 801ada2:	4607      	mov	r7, r0
 801ada4:	2800      	cmp	r0, #0
 801ada6:	f040 80a6 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801adaa:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
 801adae:	2000      	movs	r0, #0
 801adb0:	2103      	movs	r1, #3
 801adb2:	4623      	mov	r3, r4
 801adb4:	9500      	str	r5, [sp, #0]
 801adb6:	2700      	movs	r7, #0
 801adb8:	f7f8 ffa6 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801adbc:	b1d8      	cbz	r0, 801adf6 <prvcy_mngr_addr_hndlr+0x24a>
 801adbe:	4605      	mov	r5, r0
 801adc0:	2000      	movs	r0, #0
 801adc2:	2101      	movs	r1, #1
 801adc4:	f000 fdab 	bl	801b91e <bsp_assert>
 801adc8:	462f      	mov	r7, r5
 801adca:	e094      	b.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801adcc:	4607      	mov	r7, r0
 801adce:	2800      	cmp	r0, #0
 801add0:	f040 8091 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801add4:	7e77      	ldrb	r7, [r6, #25]
 801add6:	b2ea      	uxtb	r2, r5
 801add8:	1cb8      	adds	r0, r7, #2
 801adda:	f884 0026 	strb.w	r0, [r4, #38]	@ 0x26
 801adde:	4650      	mov	r0, sl
 801ade0:	4659      	mov	r1, fp
 801ade2:	4633      	mov	r3, r6
 801ade4:	6226      	str	r6, [r4, #32]
 801ade6:	9700      	str	r7, [sp, #0]
 801ade8:	f000 f8d9 	bl	801af9e <prvcy_mngr_add_rmv_hw_reslvng_list>
 801adec:	4607      	mov	r7, r0
 801adee:	2800      	cmp	r0, #0
 801adf0:	f040 8081 	bne.w	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801adf4:	2700      	movs	r7, #0
 801adf6:	4623      	mov	r3, r4
 801adf8:	f893 0028 	ldrb.w	r0, [r3, #40]	@ 0x28
 801adfc:	f893 1029 	ldrb.w	r1, [r3, #41]	@ 0x29
 801ae00:	f080 0003 	eor.w	r0, r0, #3
 801ae04:	f081 0101 	eor.w	r1, r1, #1
 801ae08:	4308      	orrs	r0, r1
 801ae0a:	fab0 f080 	clz	r0, r0
 801ae0e:	0940      	lsrs	r0, r0, #5
 801ae10:	f898 1028 	ldrb.w	r1, [r8, #40]	@ 0x28
 801ae14:	2903      	cmp	r1, #3
 801ae16:	f04f 0100 	mov.w	r1, #0
 801ae1a:	d10b      	bne.n	801ae34 <prvcy_mngr_addr_hndlr+0x288>
 801ae1c:	f898 2029 	ldrb.w	r2, [r8, #41]	@ 0x29
 801ae20:	2a01      	cmp	r2, #1
 801ae22:	d107      	bne.n	801ae34 <prvcy_mngr_addr_hndlr+0x288>
 801ae24:	f898 1035 	ldrb.w	r1, [r8, #53]	@ 0x35
 801ae28:	f001 01fe 	and.w	r1, r1, #254	@ 0xfe
 801ae2c:	3902      	subs	r1, #2
 801ae2e:	fab1 f181 	clz	r1, r1
 801ae32:	0949      	lsrs	r1, r1, #5
 801ae34:	f898 300d 	ldrb.w	r3, [r8, #13]
 801ae38:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
 801ae3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801ae40:	f082 0201 	eor.w	r2, r2, #1
 801ae44:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 801ae48:	431a      	orrs	r2, r3
 801ae4a:	fab2 f282 	clz	r2, r2
 801ae4e:	0952      	lsrs	r2, r2, #5
 801ae50:	4010      	ands	r0, r2
 801ae52:	2801      	cmp	r0, #1
 801ae54:	d14f      	bne.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ae56:	f1bb 0201 	subs.w	r2, fp, #1
 801ae5a:	f081 0101 	eor.w	r1, r1, #1
 801ae5e:	bf18      	it	ne
 801ae60:	2201      	movne	r2, #1
 801ae62:	2000      	movs	r0, #0
 801ae64:	420a      	tst	r2, r1
 801ae66:	f888 0024 	strb.w	r0, [r8, #36]	@ 0x24
 801ae6a:	d144      	bne.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801ae6c:	f646 70a4 	movw	r0, #28580	@ 0x6fa4
 801ae70:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ae74:	f100 0520 	add.w	r5, r0, #32
 801ae78:	2400      	movs	r4, #0
 801ae7a:	f108 0608 	add.w	r6, r8, #8
 801ae7e:	bf00      	nop
 801ae80:	4628      	mov	r0, r5
 801ae82:	4631      	mov	r1, r6
 801ae84:	2200      	movs	r2, #0
 801ae86:	f000 f859 	bl	801af3c <prvcy_mngr_addr_rsln>
 801ae8a:	280f      	cmp	r0, #15
 801ae8c:	d122      	bne.n	801aed4 <prvcy_mngr_addr_hndlr+0x328>
 801ae8e:	3401      	adds	r4, #1
 801ae90:	2c05      	cmp	r4, #5
 801ae92:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801ae96:	d1f3      	bne.n	801ae80 <prvcy_mngr_addr_hndlr+0x2d4>
 801ae98:	f898 0028 	ldrb.w	r0, [r8, #40]	@ 0x28
 801ae9c:	2803      	cmp	r0, #3
 801ae9e:	d129      	bne.n	801aef4 <prvcy_mngr_addr_hndlr+0x348>
 801aea0:	f898 0035 	ldrb.w	r0, [r8, #53]	@ 0x35
 801aea4:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 801aea8:	2802      	cmp	r0, #2
 801aeaa:	d123      	bne.n	801aef4 <prvcy_mngr_addr_hndlr+0x348>
 801aeac:	f898 1027 	ldrb.w	r1, [r8, #39]	@ 0x27
 801aeb0:	f10d 0506 	add.w	r5, sp, #6
 801aeb4:	2004      	movs	r0, #4
 801aeb6:	4632      	mov	r2, r6
 801aeb8:	462b      	mov	r3, r5
 801aeba:	f7f8 fe82 	bl	8013bc2 <llhwc_lst_search>
 801aebe:	4607      	mov	r7, r0
 801aec0:	b9c8      	cbnz	r0, 801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801aec2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 801aec6:	07c0      	lsls	r0, r0, #31
 801aec8:	d119      	bne.n	801aefe <prvcy_mngr_addr_hndlr+0x352>
 801aeca:	2001      	movs	r0, #1
 801aecc:	2700      	movs	r7, #0
 801aece:	f888 0037 	strb.w	r0, [r8, #55]	@ 0x37
 801aed2:	e010      	b.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801aed4:	4607      	mov	r7, r0
 801aed6:	b970      	cbnz	r0, 801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801aed8:	f898 7027 	ldrb.w	r7, [r8, #39]	@ 0x27
 801aedc:	b2e2      	uxtb	r2, r4
 801aede:	4650      	mov	r0, sl
 801aee0:	4659      	mov	r1, fp
 801aee2:	4633      	mov	r3, r6
 801aee4:	9700      	str	r7, [sp, #0]
 801aee6:	f000 f85a 	bl	801af9e <prvcy_mngr_add_rmv_hw_reslvng_list>
 801aeea:	4607      	mov	r7, r0
 801aeec:	2800      	cmp	r0, #0
 801aeee:	bf08      	it	eq
 801aef0:	2700      	moveq	r7, #0
 801aef2:	e000      	b.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801aef4:	270f      	movs	r7, #15
 801aef6:	4638      	mov	r0, r7
 801aef8:	b003      	add	sp, #12
 801aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aefe:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
 801af02:	2000      	movs	r0, #0
 801af04:	2104      	movs	r1, #4
 801af06:	4633      	mov	r3, r6
 801af08:	9500      	str	r5, [sp, #0]
 801af0a:	f7f8 fefd 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801af0e:	b198      	cbz	r0, 801af38 <prvcy_mngr_addr_hndlr+0x38c>
 801af10:	4607      	mov	r7, r0
 801af12:	2807      	cmp	r0, #7
 801af14:	d1ef      	bne.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801af16:	2004      	movs	r0, #4
 801af18:	f7fd fee1 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 801af1c:	4607      	mov	r7, r0
 801af1e:	2800      	cmp	r0, #0
 801af20:	d1e9      	bne.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>
 801af22:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
 801af26:	2000      	movs	r0, #0
 801af28:	2104      	movs	r1, #4
 801af2a:	4633      	mov	r3, r6
 801af2c:	9500      	str	r5, [sp, #0]
 801af2e:	f7f8 feeb 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801af32:	2800      	cmp	r0, #0
 801af34:	f47f aeee 	bne.w	801ad14 <prvcy_mngr_addr_hndlr+0x168>
 801af38:	271f      	movs	r7, #31
 801af3a:	e7dc      	b.n	801aef6 <prvcy_mngr_addr_hndlr+0x34a>

0801af3c <prvcy_mngr_addr_rsln>:
 801af3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af3e:	b08b      	sub	sp, #44	@ 0x2c
 801af40:	af03      	add	r7, sp, #12
 801af42:	4616      	mov	r6, r2
 801af44:	460c      	mov	r4, r1
 801af46:	4605      	mov	r5, r0
 801af48:	4638      	mov	r0, r7
 801af4a:	2100      	movs	r1, #0
 801af4c:	2210      	movs	r2, #16
 801af4e:	f005 fcc9 	bl	80208e4 <ble_memset>
 801af52:	a807      	add	r0, sp, #28
 801af54:	2100      	movs	r1, #0
 801af56:	2210      	movs	r2, #16
 801af58:	f005 fcc4 	bl	80208e4 <ble_memset>
 801af5c:	1ce1      	adds	r1, r4, #3
 801af5e:	4638      	mov	r0, r7
 801af60:	2203      	movs	r2, #3
 801af62:	f005 fc6f 	bl	8020844 <ble_memcpy>
 801af66:	a803      	add	r0, sp, #12
 801af68:	aa07      	add	r2, sp, #28
 801af6a:	4629      	mov	r1, r5
 801af6c:	2e01      	cmp	r6, #1
 801af6e:	d102      	bne.n	801af76 <prvcy_mngr_addr_rsln+0x3a>
 801af70:	f7f9 f954 	bl	801421c <llhwc_128_encrypt_arbitrator>
 801af74:	e001      	b.n	801af7a <prvcy_mngr_addr_rsln+0x3e>
 801af76:	f7f9 f936 	bl	80141e6 <llhwc_128_encrypt>
 801af7a:	b970      	cbnz	r0, 801af9a <prvcy_mngr_addr_rsln+0x5e>
 801af7c:	f10d 0506 	add.w	r5, sp, #6
 801af80:	a907      	add	r1, sp, #28
 801af82:	4628      	mov	r0, r5
 801af84:	2203      	movs	r2, #3
 801af86:	f005 fc5d 	bl	8020844 <ble_memcpy>
 801af8a:	4628      	mov	r0, r5
 801af8c:	4621      	mov	r1, r4
 801af8e:	2203      	movs	r2, #3
 801af90:	f005 fce0 	bl	8020954 <ble_memcmp>
 801af94:	2800      	cmp	r0, #0
 801af96:	bf18      	it	ne
 801af98:	200f      	movne	r0, #15
 801af9a:	b00b      	add	sp, #44	@ 0x2c
 801af9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801af9e <prvcy_mngr_add_rmv_hw_reslvng_list>:
 801af9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	4614      	mov	r4, r2
 801afa6:	f646 7268 	movw	r2, #28520	@ 0x6f68
 801afaa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801afae:	461d      	mov	r5, r3
 801afb0:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	f000 808d 	beq.w	801b0d4 <prvcy_mngr_add_rmv_hw_reslvng_list+0x136>
 801afba:	2b01      	cmp	r3, #1
 801afbc:	f040 80f2 	bne.w	801b1a4 <prvcy_mngr_add_rmv_hw_reslvng_list+0x206>
 801afc0:	f646 7968 	movw	r9, #28520	@ 0x6f68
 801afc4:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801afc8:	460e      	mov	r6, r1
 801afca:	4607      	mov	r7, r0
 801afcc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 801afd0:	f10d 0a06 	add.w	sl, sp, #6
 801afd4:	2000      	movs	r0, #0
 801afd6:	2103      	movs	r1, #3
 801afd8:	2201      	movs	r2, #1
 801afda:	464b      	mov	r3, r9
 801afdc:	f8cd a000 	str.w	sl, [sp]
 801afe0:	f7f8 fe92 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801afe4:	2e01      	cmp	r6, #1
 801afe6:	4606      	mov	r6, r0
 801afe8:	f040 8099 	bne.w	801b11e <prvcy_mngr_add_rmv_hw_reslvng_list+0x180>
 801afec:	b1be      	cbz	r6, 801b01e <prvcy_mngr_add_rmv_hw_reslvng_list+0x80>
 801afee:	2e07      	cmp	r6, #7
 801aff0:	f040 80d9 	bne.w	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801aff4:	2003      	movs	r0, #3
 801aff6:	f7fd fe72 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 801affa:	4606      	mov	r6, r0
 801affc:	2800      	cmp	r0, #0
 801affe:	f040 80d2 	bne.w	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b002:	f646 7368 	movw	r3, #28520	@ 0x6f68
 801b006:	2000      	movs	r0, #0
 801b008:	2103      	movs	r1, #3
 801b00a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801b00e:	2201      	movs	r2, #1
 801b010:	f8cd a000 	str.w	sl, [sp]
 801b014:	f7f8 fe78 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801b018:	2800      	cmp	r0, #0
 801b01a:	f040 8094 	bne.w	801b146 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1a8>
 801b01e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801b022:	f646 77a4 	movw	r7, #28580	@ 0x6fa4
 801b026:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801b02a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801b02e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801b032:	f10d 0307 	add.w	r3, sp, #7
 801b036:	61c1      	str	r1, [r0, #28]
 801b038:	2000      	movs	r0, #0
 801b03a:	4641      	mov	r1, r8
 801b03c:	462a      	mov	r2, r5
 801b03e:	f7f8 fdc0 	bl	8013bc2 <llhwc_lst_search>
 801b042:	4606      	mov	r6, r0
 801b044:	2800      	cmp	r0, #0
 801b046:	f040 80ae 	bne.w	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b04a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801b04e:	07c0      	lsls	r0, r0, #31
 801b050:	d105      	bne.n	801b05e <prvcy_mngr_add_rmv_hw_reslvng_list+0xc0>
 801b052:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801b056:	2000      	movs	r0, #0
 801b058:	2200      	movs	r2, #0
 801b05a:	f7f8 ffe8 	bl	801402e <llhwc_lst_edit_indicators>
 801b05e:	f899 0028 	ldrb.w	r0, [r9, #40]	@ 0x28
 801b062:	2805      	cmp	r0, #5
 801b064:	d120      	bne.n	801b0a8 <prvcy_mngr_add_rmv_hw_reslvng_list+0x10a>
 801b066:	f109 0010 	add.w	r0, r9, #16
 801b06a:	4629      	mov	r1, r5
 801b06c:	2206      	movs	r2, #6
 801b06e:	f005 fc71 	bl	8020954 <ble_memcmp>
 801b072:	b9c8      	cbnz	r0, 801b0a8 <prvcy_mngr_add_rmv_hw_reslvng_list+0x10a>
 801b074:	f899 0039 	ldrb.w	r0, [r9, #57]	@ 0x39
 801b078:	4540      	cmp	r0, r8
 801b07a:	d115      	bne.n	801b0a8 <prvcy_mngr_add_rmv_hw_reslvng_list+0x10a>
 801b07c:	f646 7618 	movw	r6, #28440	@ 0x6f18
 801b080:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801b084:	f106 000d 	add.w	r0, r6, #13
 801b088:	4649      	mov	r1, r9
 801b08a:	2206      	movs	r2, #6
 801b08c:	f005 fbda 	bl	8020844 <ble_memcpy>
 801b090:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801b094:	4649      	mov	r1, r9
 801b096:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801b09a:	2206      	movs	r2, #6
 801b09c:	3010      	adds	r0, #16
 801b09e:	f005 fbd1 	bl	8020844 <ble_memcpy>
 801b0a2:	f899 0025 	ldrb.w	r0, [r9, #37]	@ 0x25
 801b0a6:	75f0      	strb	r0, [r6, #23]
 801b0a8:	f10d 0307 	add.w	r3, sp, #7
 801b0ac:	2006      	movs	r0, #6
 801b0ae:	4641      	mov	r1, r8
 801b0b0:	462a      	mov	r2, r5
 801b0b2:	f7f8 fd86 	bl	8013bc2 <llhwc_lst_search>
 801b0b6:	4606      	mov	r6, r0
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	d174      	bne.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b0bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801b0c0:	07c0      	lsls	r0, r0, #31
 801b0c2:	d16f      	bne.n	801b1a4 <prvcy_mngr_add_rmv_hw_reslvng_list+0x206>
 801b0c4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801b0c8:	2006      	movs	r0, #6
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	2600      	movs	r6, #0
 801b0ce:	f7f8 ffae 	bl	801402e <llhwc_lst_edit_indicators>
 801b0d2:	e068      	b.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b0d4:	f102 0408 	add.w	r4, r2, #8
 801b0d8:	f10d 0506 	add.w	r5, sp, #6
 801b0dc:	2000      	movs	r0, #0
 801b0de:	2104      	movs	r1, #4
 801b0e0:	2201      	movs	r2, #1
 801b0e2:	4623      	mov	r3, r4
 801b0e4:	9500      	str	r5, [sp, #0]
 801b0e6:	f7f8 fe0f 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801b0ea:	4606      	mov	r6, r0
 801b0ec:	2807      	cmp	r0, #7
 801b0ee:	d15a      	bne.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b0f0:	2004      	movs	r0, #4
 801b0f2:	f7fd fdf4 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 801b0f6:	4606      	mov	r6, r0
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	d154      	bne.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b0fc:	2000      	movs	r0, #0
 801b0fe:	2104      	movs	r1, #4
 801b100:	2201      	movs	r2, #1
 801b102:	4623      	mov	r3, r4
 801b104:	9500      	str	r5, [sp, #0]
 801b106:	2600      	movs	r6, #0
 801b108:	f7f8 fdfe 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801b10c:	2800      	cmp	r0, #0
 801b10e:	d04a      	beq.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b110:	4604      	mov	r4, r0
 801b112:	2000      	movs	r0, #0
 801b114:	2101      	movs	r1, #1
 801b116:	f000 fc02 	bl	801b91e <bsp_assert>
 801b11a:	4626      	mov	r6, r4
 801b11c:	e043      	b.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b11e:	b1c6      	cbz	r6, 801b152 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1b4>
 801b120:	2e07      	cmp	r6, #7
 801b122:	d140      	bne.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b124:	2003      	movs	r0, #3
 801b126:	f7fd fdda 	bl	8018cde <non_conn_mngr_remove_random_addr_list>
 801b12a:	4606      	mov	r6, r0
 801b12c:	bbd8      	cbnz	r0, 801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b12e:	f646 7368 	movw	r3, #28520	@ 0x6f68
 801b132:	2000      	movs	r0, #0
 801b134:	2103      	movs	r1, #3
 801b136:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801b13a:	2201      	movs	r2, #1
 801b13c:	f8cd a000 	str.w	sl, [sp]
 801b140:	f7f8 fde2 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801b144:	b128      	cbz	r0, 801b152 <prvcy_mngr_add_rmv_hw_reslvng_list+0x1b4>
 801b146:	4606      	mov	r6, r0
 801b148:	2000      	movs	r0, #0
 801b14a:	2101      	movs	r1, #1
 801b14c:	f000 fbe7 	bl	801b91e <bsp_assert>
 801b150:	e029      	b.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b152:	f007 00fd 	and.w	r0, r7, #253	@ 0xfd
 801b156:	2801      	cmp	r0, #1
 801b158:	d119      	bne.n	801b18e <prvcy_mngr_add_rmv_hw_reslvng_list+0x1f0>
 801b15a:	f899 0029 	ldrb.w	r0, [r9, #41]	@ 0x29
 801b15e:	2805      	cmp	r0, #5
 801b160:	d115      	bne.n	801b18e <prvcy_mngr_add_rmv_hw_reslvng_list+0x1f0>
 801b162:	f899 0028 	ldrb.w	r0, [r9, #40]	@ 0x28
 801b166:	b990      	cbnz	r0, 801b18e <prvcy_mngr_add_rmv_hw_reslvng_list+0x1f0>
 801b168:	f10d 0307 	add.w	r3, sp, #7
 801b16c:	2000      	movs	r0, #0
 801b16e:	4641      	mov	r1, r8
 801b170:	462a      	mov	r2, r5
 801b172:	f7f8 fd26 	bl	8013bc2 <llhwc_lst_search>
 801b176:	4606      	mov	r6, r0
 801b178:	b9a8      	cbnz	r0, 801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
 801b17a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801b17e:	07c0      	lsls	r0, r0, #31
 801b180:	d115      	bne.n	801b1ae <prvcy_mngr_add_rmv_hw_reslvng_list+0x210>
 801b182:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801b186:	2000      	movs	r0, #0
 801b188:	2200      	movs	r2, #0
 801b18a:	f7f8 ff50 	bl	801402e <llhwc_lst_edit_indicators>
 801b18e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
 801b192:	f646 72a4 	movw	r2, #28580	@ 0x6fa4
 801b196:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801b19a:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801b19e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801b1a2:	61c1      	str	r1, [r0, #28]
 801b1a4:	2600      	movs	r6, #0
 801b1a6:	4630      	mov	r0, r6
 801b1a8:	b002      	add	sp, #8
 801b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1ae:	260f      	movs	r6, #15
 801b1b0:	e7f9      	b.n	801b1a6 <prvcy_mngr_add_rmv_hw_reslvng_list+0x208>
	...

0801b1b4 <prvcy_mngr_srch_fw_reslvng_list>:
 801b1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b1b8:	b081      	sub	sp, #4
 801b1ba:	2807      	cmp	r0, #7
 801b1bc:	f200 8101 	bhi.w	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b1c0:	460c      	mov	r4, r1
 801b1c2:	4690      	mov	r8, r2
 801b1c4:	e8df f000 	tbb	[pc, r0]
 801b1c8:	583c2004 	.word	0x583c2004
 801b1cc:	c2a8967a 	.word	0xc2a8967a
 801b1d0:	4640      	mov	r0, r8
 801b1d2:	2101      	movs	r1, #1
 801b1d4:	f1b8 0f00 	cmp.w	r8, #0
 801b1d8:	bf18      	it	ne
 801b1da:	2001      	movne	r0, #1
 801b1dc:	f000 fb9f 	bl	801b91e <bsp_assert>
 801b1e0:	f646 76a4 	movw	r6, #28580	@ 0x6fa4
 801b1e4:	2700      	movs	r7, #0
 801b1e6:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801b1ea:	bf00      	nop
 801b1ec:	4620      	mov	r0, r4
 801b1ee:	4631      	mov	r1, r6
 801b1f0:	2206      	movs	r2, #6
 801b1f2:	f005 fbaf 	bl	8020954 <ble_memcmp>
 801b1f6:	2800      	cmp	r0, #0
 801b1f8:	f000 80c2 	beq.w	801b380 <prvcy_mngr_srch_fw_reslvng_list+0x1cc>
 801b1fc:	3701      	adds	r7, #1
 801b1fe:	2f05      	cmp	r7, #5
 801b200:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801b204:	d1f2      	bne.n	801b1ec <prvcy_mngr_srch_fw_reslvng_list+0x38>
 801b206:	e0dc      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b208:	4640      	mov	r0, r8
 801b20a:	2101      	movs	r1, #1
 801b20c:	f1b8 0f00 	cmp.w	r8, #0
 801b210:	bf18      	it	ne
 801b212:	2001      	movne	r0, #1
 801b214:	f000 fb83 	bl	801b91e <bsp_assert>
 801b218:	f646 76a4 	movw	r6, #28580	@ 0x6fa4
 801b21c:	2700      	movs	r7, #0
 801b21e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801b222:	bf00      	nop
 801b224:	4620      	mov	r0, r4
 801b226:	4631      	mov	r1, r6
 801b228:	2206      	movs	r2, #6
 801b22a:	f005 fb93 	bl	8020954 <ble_memcmp>
 801b22e:	2800      	cmp	r0, #0
 801b230:	f000 80a9 	beq.w	801b386 <prvcy_mngr_srch_fw_reslvng_list+0x1d2>
 801b234:	3701      	adds	r7, #1
 801b236:	2f05      	cmp	r7, #5
 801b238:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801b23c:	d1f2      	bne.n	801b224 <prvcy_mngr_srch_fw_reslvng_list+0x70>
 801b23e:	e0c0      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b240:	4640      	mov	r0, r8
 801b242:	2101      	movs	r1, #1
 801b244:	f1b8 0f00 	cmp.w	r8, #0
 801b248:	bf18      	it	ne
 801b24a:	2001      	movne	r0, #1
 801b24c:	f000 fb67 	bl	801b91e <bsp_assert>
 801b250:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801b254:	2700      	movs	r7, #0
 801b256:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801b25a:	bf00      	nop
 801b25c:	19ee      	adds	r6, r5, r7
 801b25e:	4620      	mov	r0, r4
 801b260:	4631      	mov	r1, r6
 801b262:	2206      	movs	r2, #6
 801b264:	f005 fb76 	bl	8020954 <ble_memcmp>
 801b268:	2800      	cmp	r0, #0
 801b26a:	f000 8097 	beq.w	801b39c <prvcy_mngr_srch_fw_reslvng_list+0x1e8>
 801b26e:	3744      	adds	r7, #68	@ 0x44
 801b270:	f5b7 7faa 	cmp.w	r7, #340	@ 0x154
 801b274:	d1f2      	bne.n	801b25c <prvcy_mngr_srch_fw_reslvng_list+0xa8>
 801b276:	e0a4      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b278:	4647      	mov	r7, r8
 801b27a:	f1b8 0f00 	cmp.w	r8, #0
 801b27e:	bf18      	it	ne
 801b280:	2701      	movne	r7, #1
 801b282:	4638      	mov	r0, r7
 801b284:	2101      	movs	r1, #1
 801b286:	4699      	mov	r9, r3
 801b288:	f000 fb49 	bl	801b91e <bsp_assert>
 801b28c:	4638      	mov	r0, r7
 801b28e:	2101      	movs	r1, #1
 801b290:	f000 fb45 	bl	801b91e <bsp_assert>
 801b294:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801b298:	2700      	movs	r7, #0
 801b29a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801b29e:	bf00      	nop
 801b2a0:	19ee      	adds	r6, r5, r7
 801b2a2:	f106 011c 	add.w	r1, r6, #28
 801b2a6:	4620      	mov	r0, r4
 801b2a8:	2201      	movs	r2, #1
 801b2aa:	f005 fb53 	bl	8020954 <ble_memcmp>
 801b2ae:	2800      	cmp	r0, #0
 801b2b0:	d077      	beq.n	801b3a2 <prvcy_mngr_srch_fw_reslvng_list+0x1ee>
 801b2b2:	3744      	adds	r7, #68	@ 0x44
 801b2b4:	f5b7 7faa 	cmp.w	r7, #340	@ 0x154
 801b2b8:	d1f2      	bne.n	801b2a0 <prvcy_mngr_srch_fw_reslvng_list+0xec>
 801b2ba:	e082      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b2bc:	4640      	mov	r0, r8
 801b2be:	2101      	movs	r1, #1
 801b2c0:	f1b8 0f00 	cmp.w	r8, #0
 801b2c4:	bf18      	it	ne
 801b2c6:	2001      	movne	r0, #1
 801b2c8:	f000 fb29 	bl	801b91e <bsp_assert>
 801b2cc:	f64f 66ac 	movw	r6, #65196	@ 0xfeac
 801b2d0:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801b2d4:	f6cf 76ff 	movt	r6, #65535	@ 0xffff
 801b2d8:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801b2dc:	19af      	adds	r7, r5, r6
 801b2de:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	2201      	movs	r2, #1
 801b2e6:	f005 fb35 	bl	8020954 <ble_memcmp>
 801b2ea:	2800      	cmp	r0, #0
 801b2ec:	d062      	beq.n	801b3b4 <prvcy_mngr_srch_fw_reslvng_list+0x200>
 801b2ee:	3644      	adds	r6, #68	@ 0x44
 801b2f0:	d1f4      	bne.n	801b2dc <prvcy_mngr_srch_fw_reslvng_list+0x128>
 801b2f2:	e066      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b2f4:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801b2f8:	2600      	movs	r6, #0
 801b2fa:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801b2fe:	bf00      	nop
 801b300:	4620      	mov	r0, r4
 801b302:	4629      	mov	r1, r5
 801b304:	2206      	movs	r2, #6
 801b306:	f005 fb25 	bl	8020954 <ble_memcmp>
 801b30a:	b398      	cbz	r0, 801b374 <prvcy_mngr_srch_fw_reslvng_list+0x1c0>
 801b30c:	3601      	adds	r6, #1
 801b30e:	2e05      	cmp	r6, #5
 801b310:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801b314:	d1f4      	bne.n	801b300 <prvcy_mngr_srch_fw_reslvng_list+0x14c>
 801b316:	e054      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b318:	4640      	mov	r0, r8
 801b31a:	2101      	movs	r1, #1
 801b31c:	f1b8 0f00 	cmp.w	r8, #0
 801b320:	bf18      	it	ne
 801b322:	2001      	movne	r0, #1
 801b324:	f000 fafb 	bl	801b91e <bsp_assert>
 801b328:	f646 75a4 	movw	r5, #28580	@ 0x6fa4
 801b32c:	2700      	movs	r7, #0
 801b32e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801b332:	bf00      	nop
 801b334:	19ee      	adds	r6, r5, r7
 801b336:	4620      	mov	r0, r4
 801b338:	4631      	mov	r1, r6
 801b33a:	2206      	movs	r2, #6
 801b33c:	f005 fb0a 	bl	8020954 <ble_memcmp>
 801b340:	b3d8      	cbz	r0, 801b3ba <prvcy_mngr_srch_fw_reslvng_list+0x206>
 801b342:	3744      	adds	r7, #68	@ 0x44
 801b344:	f5b7 7faa 	cmp.w	r7, #340	@ 0x154
 801b348:	d1f4      	bne.n	801b334 <prvcy_mngr_srch_fw_reslvng_list+0x180>
 801b34a:	e03a      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b34c:	f646 70a4 	movw	r0, #28580	@ 0x6fa4
 801b350:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b354:	f100 051c 	add.w	r5, r0, #28
 801b358:	2600      	movs	r6, #0
 801b35a:	bf00      	nop
 801b35c:	4620      	mov	r0, r4
 801b35e:	4629      	mov	r1, r5
 801b360:	2201      	movs	r2, #1
 801b362:	f005 faf7 	bl	8020954 <ble_memcmp>
 801b366:	b128      	cbz	r0, 801b374 <prvcy_mngr_srch_fw_reslvng_list+0x1c0>
 801b368:	3601      	adds	r6, #1
 801b36a:	2e05      	cmp	r6, #5
 801b36c:	f105 0544 	add.w	r5, r5, #68	@ 0x44
 801b370:	d1f4      	bne.n	801b35c <prvcy_mngr_srch_fw_reslvng_list+0x1a8>
 801b372:	e026      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b374:	f240 10d8 	movw	r0, #472	@ 0x1d8
 801b378:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b37c:	7006      	strb	r6, [r0, #0]
 801b37e:	e020      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b380:	f106 0020 	add.w	r0, r6, #32
 801b384:	e001      	b.n	801b38a <prvcy_mngr_srch_fw_reslvng_list+0x1d6>
 801b386:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 801b38a:	f8c8 0000 	str.w	r0, [r8]
 801b38e:	f646 7068 	movw	r0, #28520	@ 0x6f68
 801b392:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b396:	f880 7038 	strb.w	r7, [r0, #56]	@ 0x38
 801b39a:	e012      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b39c:	f106 001c 	add.w	r0, r6, #28
 801b3a0:	e00d      	b.n	801b3be <prvcy_mngr_srch_fw_reslvng_list+0x20a>
 801b3a2:	f1b9 0f00 	cmp.w	r9, #0
 801b3a6:	f8c8 6000 	str.w	r6, [r8]
 801b3aa:	d00a      	beq.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b3ac:	7e70      	ldrb	r0, [r6, #25]
 801b3ae:	f889 0000 	strb.w	r0, [r9]
 801b3b2:	e006      	b.n	801b3c2 <prvcy_mngr_srch_fw_reslvng_list+0x20e>
 801b3b4:	f507 70ae 	add.w	r0, r7, #348	@ 0x15c
 801b3b8:	e001      	b.n	801b3be <prvcy_mngr_srch_fw_reslvng_list+0x20a>
 801b3ba:	f106 0010 	add.w	r0, r6, #16
 801b3be:	f8c8 0000 	str.w	r0, [r8]
 801b3c2:	b001      	add	sp, #4
 801b3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801b3c8 <prvcy_mngr_get_local_rpa>:
 801b3c8:	b510      	push	{r4, lr}
 801b3ca:	b086      	sub	sp, #24
 801b3cc:	460c      	mov	r4, r1
 801b3ce:	4601      	mov	r1, r0
 801b3d0:	2000      	movs	r0, #0
 801b3d2:	9005      	str	r0, [sp, #20]
 801b3d4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801b3d8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801b3dc:	aa05      	add	r2, sp, #20
 801b3de:	2000      	movs	r0, #0
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	f7ff fee7 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 801b3e6:	9805      	ldr	r0, [sp, #20]
 801b3e8:	b1d0      	cbz	r0, 801b420 <prvcy_mngr_get_local_rpa+0x58>
 801b3ea:	a901      	add	r1, sp, #4
 801b3ec:	2210      	movs	r2, #16
 801b3ee:	f005 fab1 	bl	8020954 <ble_memcmp>
 801b3f2:	b1a8      	cbz	r0, 801b420 <prvcy_mngr_get_local_rpa+0x58>
 801b3f4:	f646 7068 	movw	r0, #28520	@ 0x6f68
 801b3f8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b3fc:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801b400:	f646 71a4 	movw	r1, #28580	@ 0x6fa4
 801b404:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b408:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b40c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801b410:	2206      	movs	r2, #6
 801b412:	f100 0108 	add.w	r1, r0, #8
 801b416:	4620      	mov	r0, r4
 801b418:	f005 fa14 	bl	8020844 <ble_memcpy>
 801b41c:	2000      	movs	r0, #0
 801b41e:	e000      	b.n	801b422 <prvcy_mngr_get_local_rpa+0x5a>
 801b420:	2001      	movs	r0, #1
 801b422:	b006      	add	sp, #24
 801b424:	bd10      	pop	{r4, pc}
	...

0801b428 <prvcy_mngr_addr_gen>:
 801b428:	b570      	push	{r4, r5, r6, lr}
 801b42a:	b088      	sub	sp, #32
 801b42c:	ae04      	add	r6, sp, #16
 801b42e:	460c      	mov	r4, r1
 801b430:	4605      	mov	r5, r0
 801b432:	4630      	mov	r0, r6
 801b434:	2100      	movs	r1, #0
 801b436:	2210      	movs	r2, #16
 801b438:	f005 fa54 	bl	80208e4 <ble_memset>
 801b43c:	4668      	mov	r0, sp
 801b43e:	2100      	movs	r1, #0
 801b440:	2210      	movs	r2, #16
 801b442:	f005 fa4f 	bl	80208e4 <ble_memset>
 801b446:	4630      	mov	r0, r6
 801b448:	2103      	movs	r1, #3
 801b44a:	f7f8 fdcc 	bl	8013fe6 <llhwc_gen_rnd_num>
 801b44e:	bb18      	cbnz	r0, 801b498 <prvcy_mngr_addr_gen+0x70>
 801b450:	ae04      	add	r6, sp, #16
 801b452:	bf00      	nop
 801b454:	9804      	ldr	r0, [sp, #16]
 801b456:	0281      	lsls	r1, r0, #10
 801b458:	bf18      	it	ne
 801b45a:	f511 6f80 	cmnne.w	r1, #1024	@ 0x400
 801b45e:	d106      	bne.n	801b46e <prvcy_mngr_addr_gen+0x46>
 801b460:	4630      	mov	r0, r6
 801b462:	2103      	movs	r1, #3
 801b464:	f7f8 fdbf 	bl	8013fe6 <llhwc_gen_rnd_num>
 801b468:	2800      	cmp	r0, #0
 801b46a:	d0f3      	beq.n	801b454 <prvcy_mngr_addr_gen+0x2c>
 801b46c:	e014      	b.n	801b498 <prvcy_mngr_addr_gen+0x70>
 801b46e:	2101      	movs	r1, #1
 801b470:	f361 509f 	bfi	r0, r1, #22, #10
 801b474:	9004      	str	r0, [sp, #16]
 801b476:	a804      	add	r0, sp, #16
 801b478:	466a      	mov	r2, sp
 801b47a:	4629      	mov	r1, r5
 801b47c:	f7f8 feb3 	bl	80141e6 <llhwc_128_encrypt>
 801b480:	b950      	cbnz	r0, 801b498 <prvcy_mngr_addr_gen+0x70>
 801b482:	4669      	mov	r1, sp
 801b484:	4620      	mov	r0, r4
 801b486:	2203      	movs	r2, #3
 801b488:	f005 f9dc 	bl	8020844 <ble_memcpy>
 801b48c:	1ce0      	adds	r0, r4, #3
 801b48e:	a904      	add	r1, sp, #16
 801b490:	2203      	movs	r2, #3
 801b492:	f005 f9d7 	bl	8020844 <ble_memcpy>
 801b496:	2000      	movs	r0, #0
 801b498:	b008      	add	sp, #32
 801b49a:	bd70      	pop	{r4, r5, r6, pc}

0801b49c <prvcy_mngr_remove_from_associated_lists>:
 801b49c:	b570      	push	{r4, r5, r6, lr}
 801b49e:	b082      	sub	sp, #8
 801b4a0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b4a4:	f646 71a4 	movw	r1, #28580	@ 0x6fa4
 801b4a8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b4ac:	eb01 0480 	add.w	r4, r1, r0, lsl #2
 801b4b0:	2001      	movs	r0, #1
 801b4b2:	4626      	mov	r6, r4
 801b4b4:	f816 1f19 	ldrb.w	r1, [r6, #25]!
 801b4b8:	f10d 0507 	add.w	r5, sp, #7
 801b4bc:	f88d 0007 	strb.w	r0, [sp, #7]
 801b4c0:	2005      	movs	r0, #5
 801b4c2:	4622      	mov	r2, r4
 801b4c4:	462b      	mov	r3, r5
 801b4c6:	f7f8 fb7c 	bl	8013bc2 <llhwc_lst_search>
 801b4ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801b4ce:	07c0      	lsls	r0, r0, #31
 801b4d0:	d106      	bne.n	801b4e0 <prvcy_mngr_remove_from_associated_lists+0x44>
 801b4d2:	7832      	ldrb	r2, [r6, #0]
 801b4d4:	2001      	movs	r0, #1
 801b4d6:	2105      	movs	r1, #5
 801b4d8:	4623      	mov	r3, r4
 801b4da:	9500      	str	r5, [sp, #0]
 801b4dc:	f7f8 fc14 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 801b4e0:	69e0      	ldr	r0, [r4, #28]
 801b4e2:	b118      	cbz	r0, 801b4ec <prvcy_mngr_remove_from_associated_lists+0x50>
 801b4e4:	b2c0      	uxtb	r0, r0
 801b4e6:	0840      	lsrs	r0, r0, #1
 801b4e8:	f7f8 fd82 	bl	8013ff0 <llhwc_lst_rmv_by_loc>
 801b4ec:	b002      	add	sp, #8
 801b4ee:	bd70      	pop	{r4, r5, r6, pc}

0801b4f0 <prvcy_mngr_free_tmr>:
 801b4f0:	b580      	push	{r7, lr}
 801b4f2:	f646 7068 	movw	r0, #28520	@ 0x6f68
 801b4f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b4fa:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801b4fc:	b151      	cbz	r1, 801b514 <prvcy_mngr_free_tmr+0x24>
 801b4fe:	302c      	adds	r0, #44	@ 0x2c
 801b500:	f002 fe56 	bl	801e1b0 <os_timer_stop_free>
 801b504:	fab0 f080 	clz	r0, r0
 801b508:	0940      	lsrs	r0, r0, #5
 801b50a:	2101      	movs	r1, #1
 801b50c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b510:	f000 ba05 	b.w	801b91e <bsp_assert>
 801b514:	bd80      	pop	{r7, pc}

0801b516 <prvcy_mngr_RPA_Regeneration>:
 801b516:	b510      	push	{r4, lr}
 801b518:	b086      	sub	sp, #24
 801b51a:	4614      	mov	r4, r2
 801b51c:	2200      	movs	r2, #0
 801b51e:	2801      	cmp	r0, #1
 801b520:	e9cd 2204 	strd	r2, r2, [sp, #16]
 801b524:	e9cd 2202 	strd	r2, r2, [sp, #8]
 801b528:	9201      	str	r2, [sp, #4]
 801b52a:	d80f      	bhi.n	801b54c <prvcy_mngr_RPA_Regeneration+0x36>
 801b52c:	aa05      	add	r2, sp, #20
 801b52e:	2300      	movs	r3, #0
 801b530:	f7ff fe40 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 801b534:	9805      	ldr	r0, [sp, #20]
 801b536:	b148      	cbz	r0, 801b54c <prvcy_mngr_RPA_Regeneration+0x36>
 801b538:	a901      	add	r1, sp, #4
 801b53a:	2210      	movs	r2, #16
 801b53c:	f005 fa0a 	bl	8020954 <ble_memcmp>
 801b540:	b120      	cbz	r0, 801b54c <prvcy_mngr_RPA_Regeneration+0x36>
 801b542:	9805      	ldr	r0, [sp, #20]
 801b544:	4621      	mov	r1, r4
 801b546:	f7ff ff6f 	bl	801b428 <prvcy_mngr_addr_gen>
 801b54a:	e000      	b.n	801b54e <prvcy_mngr_RPA_Regeneration+0x38>
 801b54c:	20ff      	movs	r0, #255	@ 0xff
 801b54e:	b006      	add	sp, #24
 801b550:	bd10      	pop	{r4, pc}

0801b552 <prvcy_mngr_set_addr_rsln_enble>:
 801b552:	b5b0      	push	{r4, r5, r7, lr}
 801b554:	f646 7568 	movw	r5, #28520	@ 0x6f68
 801b558:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801b55c:	f895 1036 	ldrb.w	r1, [r5, #54]	@ 0x36
 801b560:	4604      	mov	r4, r0
 801b562:	2901      	cmp	r1, #1
 801b564:	d103      	bne.n	801b56e <prvcy_mngr_set_addr_rsln_enble+0x1c>
 801b566:	f7fe faca 	bl	8019afe <non_conn_mngr_event_status_check>
 801b56a:	b100      	cbz	r0, 801b56e <prvcy_mngr_set_addr_rsln_enble+0x1c>
 801b56c:	bdb0      	pop	{r4, r5, r7, pc}
 801b56e:	4620      	mov	r0, r4
 801b570:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
 801b574:	f7f8 f904 	bl	8013780 <llhwc_addr_rsln_en>
 801b578:	2000      	movs	r0, #0
 801b57a:	bdb0      	pop	{r4, r5, r7, pc}

0801b57c <get_addr_rsl_enable>:
 801b57c:	f646 7068 	movw	r0, #28520	@ 0x6f68
 801b580:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b584:	f890 0036 	ldrb.w	r0, [r0, #54]	@ 0x36
 801b588:	4770      	bx	lr

0801b58a <prvcy_mngr_chck_rpa>:
 801b58a:	b510      	push	{r4, lr}
 801b58c:	b086      	sub	sp, #24
 801b58e:	460c      	mov	r4, r1
 801b590:	4601      	mov	r1, r0
 801b592:	2000      	movs	r0, #0
 801b594:	9005      	str	r0, [sp, #20]
 801b596:	e9cd 0003 	strd	r0, r0, [sp, #12]
 801b59a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801b59e:	aa05      	add	r2, sp, #20
 801b5a0:	2001      	movs	r0, #1
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	f7ff fe06 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 801b5a8:	9805      	ldr	r0, [sp, #20]
 801b5aa:	b150      	cbz	r0, 801b5c2 <prvcy_mngr_chck_rpa+0x38>
 801b5ac:	a901      	add	r1, sp, #4
 801b5ae:	2210      	movs	r2, #16
 801b5b0:	f005 f9d0 	bl	8020954 <ble_memcmp>
 801b5b4:	b128      	cbz	r0, 801b5c2 <prvcy_mngr_chck_rpa+0x38>
 801b5b6:	9805      	ldr	r0, [sp, #20]
 801b5b8:	4621      	mov	r1, r4
 801b5ba:	2200      	movs	r2, #0
 801b5bc:	f7ff fcbe 	bl	801af3c <prvcy_mngr_addr_rsln>
 801b5c0:	e000      	b.n	801b5c4 <prvcy_mngr_chck_rpa+0x3a>
 801b5c2:	200f      	movs	r0, #15
 801b5c4:	b006      	add	sp, #24
 801b5c6:	bd10      	pop	{r4, pc}

0801b5c8 <prvcy_mngr_chck_dev_prvcy_mode>:
 801b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5cc:	f646 78a4 	movw	r8, #28580	@ 0x6fa4
 801b5d0:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801b5d4:	460c      	mov	r4, r1
 801b5d6:	4605      	mov	r5, r0
 801b5d8:	2700      	movs	r7, #0
 801b5da:	4646      	mov	r6, r8
 801b5dc:	4628      	mov	r0, r5
 801b5de:	4631      	mov	r1, r6
 801b5e0:	2206      	movs	r2, #6
 801b5e2:	f005 f9b7 	bl	8020954 <ble_memcmp>
 801b5e6:	b150      	cbz	r0, 801b5fe <prvcy_mngr_chck_dev_prvcy_mode+0x36>
 801b5e8:	3701      	adds	r7, #1
 801b5ea:	2f05      	cmp	r7, #5
 801b5ec:	f106 0644 	add.w	r6, r6, #68	@ 0x44
 801b5f0:	d1f4      	bne.n	801b5dc <prvcy_mngr_chck_dev_prvcy_mode+0x14>
 801b5f2:	f240 10d8 	movw	r0, #472	@ 0x1d8
 801b5f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b5fa:	7800      	ldrb	r0, [r0, #0]
 801b5fc:	e005      	b.n	801b60a <prvcy_mngr_chck_dev_prvcy_mode+0x42>
 801b5fe:	f240 11d8 	movw	r1, #472	@ 0x1d8
 801b602:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b606:	b2f8      	uxtb	r0, r7
 801b608:	700f      	strb	r7, [r1, #0]
 801b60a:	28aa      	cmp	r0, #170	@ 0xaa
 801b60c:	bf04      	itt	eq
 801b60e:	200f      	moveq	r0, #15
 801b610:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b614:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b618:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 801b61c:	7e41      	ldrb	r1, [r0, #25]
 801b61e:	42a1      	cmp	r1, r4
 801b620:	d105      	bne.n	801b62e <prvcy_mngr_chck_dev_prvcy_mode+0x66>
 801b622:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 801b626:	2801      	cmp	r0, #1
 801b628:	d101      	bne.n	801b62e <prvcy_mngr_chck_dev_prvcy_mode+0x66>
 801b62a:	2000      	movs	r0, #0
 801b62c:	e000      	b.n	801b630 <prvcy_mngr_chck_dev_prvcy_mode+0x68>
 801b62e:	200f      	movs	r0, #15
 801b630:	f240 11d8 	movw	r1, #472	@ 0x1d8
 801b634:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b638:	22aa      	movs	r2, #170	@ 0xaa
 801b63a:	700a      	strb	r2, [r1, #0]
 801b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b640 <prvcy_mngr_clean_hwpostn_fw_lst>:
 801b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b642:	b081      	sub	sp, #4
 801b644:	f646 76a4 	movw	r6, #28580	@ 0x6fa4
 801b648:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801b64c:	f106 041c 	add.w	r4, r6, #28
 801b650:	2700      	movs	r7, #0
 801b652:	f10d 0503 	add.w	r5, sp, #3
 801b656:	f88d 0003 	strb.w	r0, [sp, #3]
 801b65a:	bf00      	nop
 801b65c:	4628      	mov	r0, r5
 801b65e:	4621      	mov	r1, r4
 801b660:	2201      	movs	r2, #1
 801b662:	f005 f977 	bl	8020954 <ble_memcmp>
 801b666:	b150      	cbz	r0, 801b67e <prvcy_mngr_clean_hwpostn_fw_lst+0x3e>
 801b668:	3701      	adds	r7, #1
 801b66a:	2f05      	cmp	r7, #5
 801b66c:	f104 0444 	add.w	r4, r4, #68	@ 0x44
 801b670:	d1f4      	bne.n	801b65c <prvcy_mngr_clean_hwpostn_fw_lst+0x1c>
 801b672:	f240 10d8 	movw	r0, #472	@ 0x1d8
 801b676:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b67a:	7800      	ldrb	r0, [r0, #0]
 801b67c:	e005      	b.n	801b68a <prvcy_mngr_clean_hwpostn_fw_lst+0x4a>
 801b67e:	f240 11d8 	movw	r1, #472	@ 0x1d8
 801b682:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b686:	b2f8      	uxtb	r0, r7
 801b688:	700f      	strb	r7, [r1, #0]
 801b68a:	28aa      	cmp	r0, #170	@ 0xaa
 801b68c:	d00b      	beq.n	801b6a6 <prvcy_mngr_clean_hwpostn_fw_lst+0x66>
 801b68e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b692:	2100      	movs	r1, #0
 801b694:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801b698:	61c1      	str	r1, [r0, #28]
 801b69a:	f240 10d8 	movw	r0, #472	@ 0x1d8
 801b69e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b6a2:	21aa      	movs	r1, #170	@ 0xaa
 801b6a4:	7001      	strb	r1, [r0, #0]
 801b6a6:	b001      	add	sp, #4
 801b6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b6ac <prvcy_post_timer_evnt_clbk>:
 801b6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6b0:	b082      	sub	sp, #8
 801b6b2:	2600      	movs	r6, #0
 801b6b4:	2063      	movs	r0, #99	@ 0x63
 801b6b6:	f8ad 6004 	strh.w	r6, [sp, #4]
 801b6ba:	9600      	str	r6, [sp, #0]
 801b6bc:	f000 f976 	bl	801b9ac <bsp_debug_gpio_set>
 801b6c0:	f646 77a4 	movw	r7, #28580	@ 0x6fa4
 801b6c4:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801b6c8:	46e8      	mov	r8, sp
 801b6ca:	bf00      	nop
 801b6cc:	19bc      	adds	r4, r7, r6
 801b6ce:	7e20      	ldrb	r0, [r4, #24]
 801b6d0:	2801      	cmp	r0, #1
 801b6d2:	d10d      	bne.n	801b6f0 <prvcy_post_timer_evnt_clbk+0x44>
 801b6d4:	f104 0508 	add.w	r5, r4, #8
 801b6d8:	4628      	mov	r0, r5
 801b6da:	4641      	mov	r1, r8
 801b6dc:	2206      	movs	r2, #6
 801b6de:	f005 f939 	bl	8020954 <ble_memcmp>
 801b6e2:	b128      	cbz	r0, 801b6f0 <prvcy_post_timer_evnt_clbk+0x44>
 801b6e4:	f104 0020 	add.w	r0, r4, #32
 801b6e8:	4629      	mov	r1, r5
 801b6ea:	f7ff fe9d 	bl	801b428 <prvcy_mngr_addr_gen>
 801b6ee:	b928      	cbnz	r0, 801b6fc <prvcy_post_timer_evnt_clbk+0x50>
 801b6f0:	3644      	adds	r6, #68	@ 0x44
 801b6f2:	f5b6 7faa 	cmp.w	r6, #340	@ 0x154
 801b6f6:	d1e9      	bne.n	801b6cc <prvcy_post_timer_evnt_clbk+0x20>
 801b6f8:	f7fe fa1e 	bl	8019b38 <non_conn_mngr_update_rpa_src_addr>
 801b6fc:	2063      	movs	r0, #99	@ 0x63
 801b6fe:	f000 f957 	bl	801b9b0 <bsp_debug_gpio_clear>
 801b702:	b002      	add	sp, #8
 801b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b708 <state_mngr_reset>:
 801b708:	f247 00f9 	movw	r0, #28921	@ 0x70f9
 801b70c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b710:	2100      	movs	r1, #0
 801b712:	7001      	strb	r1, [r0, #0]
 801b714:	f247 00fa 	movw	r0, #28922	@ 0x70fa
 801b718:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b71c:	7001      	strb	r1, [r0, #0]
 801b71e:	f247 00fb 	movw	r0, #28923	@ 0x70fb
 801b722:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b726:	f247 02fc 	movw	r2, #28924	@ 0x70fc
 801b72a:	7001      	strb	r1, [r0, #0]
 801b72c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801b730:	2000      	movs	r0, #0
 801b732:	e9c2 1100 	strd	r1, r1, [r2]
 801b736:	8111      	strh	r1, [r2, #8]
 801b738:	4770      	bx	lr
	...

0801b73c <state_mngr_alloc_state_mchn>:
 801b73c:	b5b0      	push	{r4, r5, r7, lr}
 801b73e:	f247 01fc 	movw	r1, #28924	@ 0x70fc
 801b742:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b746:	780a      	ldrb	r2, [r1, #0]
 801b748:	b14a      	cbz	r2, 801b75e <state_mngr_alloc_state_mchn+0x22>
 801b74a:	2400      	movs	r4, #0
 801b74c:	4622      	mov	r2, r4
 801b74e:	2c07      	cmp	r4, #7
 801b750:	d008      	beq.n	801b764 <state_mngr_alloc_state_mchn+0x28>
 801b752:	188b      	adds	r3, r1, r2
 801b754:	785b      	ldrb	r3, [r3, #1]
 801b756:	1c54      	adds	r4, r2, #1
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d1f7      	bne.n	801b74c <state_mngr_alloc_state_mchn+0x10>
 801b75c:	e003      	b.n	801b766 <state_mngr_alloc_state_mchn+0x2a>
 801b75e:	2301      	movs	r3, #1
 801b760:	2400      	movs	r4, #0
 801b762:	e004      	b.n	801b76e <state_mngr_alloc_state_mchn+0x32>
 801b764:	2408      	movs	r4, #8
 801b766:	2300      	movs	r3, #0
 801b768:	2a07      	cmp	r2, #7
 801b76a:	bf38      	it	cc
 801b76c:	2301      	movcc	r3, #1
 801b76e:	1e42      	subs	r2, r0, #1
 801b770:	2a03      	cmp	r2, #3
 801b772:	d82f      	bhi.n	801b7d4 <state_mngr_alloc_state_mchn+0x98>
 801b774:	e8df f002 	tbb	[pc, r2]
 801b778:	02341702 	.word	0x02341702
 801b77c:	f247 0cfb 	movw	ip, #28923	@ 0x70fb
 801b780:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801b784:	f89c 2000 	ldrb.w	r2, [ip]
 801b788:	2500      	movs	r5, #0
 801b78a:	2a08      	cmp	r2, #8
 801b78c:	bf38      	it	cc
 801b78e:	2501      	movcc	r5, #1
 801b790:	402b      	ands	r3, r5
 801b792:	2b01      	cmp	r3, #1
 801b794:	f04f 0500 	mov.w	r5, #0
 801b798:	d146      	bne.n	801b828 <state_mngr_alloc_state_mchn+0xec>
 801b79a:	5508      	strb	r0, [r1, r4]
 801b79c:	1c50      	adds	r0, r2, #1
 801b79e:	190d      	adds	r5, r1, r4
 801b7a0:	f88c 0000 	strb.w	r0, [ip]
 801b7a4:	e040      	b.n	801b828 <state_mngr_alloc_state_mchn+0xec>
 801b7a6:	f247 00fa 	movw	r0, #28922	@ 0x70fa
 801b7aa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b7ae:	7802      	ldrb	r2, [r0, #0]
 801b7b0:	b382      	cbz	r2, 801b814 <state_mngr_alloc_state_mchn+0xd8>
 801b7b2:	f247 00fb 	movw	r0, #28923	@ 0x70fb
 801b7b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b7ba:	7802      	ldrb	r2, [r0, #0]
 801b7bc:	2500      	movs	r5, #0
 801b7be:	2a08      	cmp	r2, #8
 801b7c0:	bf38      	it	cc
 801b7c2:	2501      	movcc	r5, #1
 801b7c4:	402b      	ands	r3, r5
 801b7c6:	2b01      	cmp	r3, #1
 801b7c8:	f04f 0500 	mov.w	r5, #0
 801b7cc:	d12c      	bne.n	801b828 <state_mngr_alloc_state_mchn+0xec>
 801b7ce:	190d      	adds	r5, r1, r4
 801b7d0:	2302      	movs	r3, #2
 801b7d2:	e01b      	b.n	801b80c <state_mngr_alloc_state_mchn+0xd0>
 801b7d4:	2000      	movs	r0, #0
 801b7d6:	2101      	movs	r1, #1
 801b7d8:	2500      	movs	r5, #0
 801b7da:	f000 f8a0 	bl	801b91e <bsp_assert>
 801b7de:	e023      	b.n	801b828 <state_mngr_alloc_state_mchn+0xec>
 801b7e0:	f247 00f9 	movw	r0, #28921	@ 0x70f9
 801b7e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b7e8:	7802      	ldrb	r2, [r0, #0]
 801b7ea:	b1ba      	cbz	r2, 801b81c <state_mngr_alloc_state_mchn+0xe0>
 801b7ec:	f247 00fb 	movw	r0, #28923	@ 0x70fb
 801b7f0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801b7f4:	7802      	ldrb	r2, [r0, #0]
 801b7f6:	2500      	movs	r5, #0
 801b7f8:	2a08      	cmp	r2, #8
 801b7fa:	bf38      	it	cc
 801b7fc:	2501      	movcc	r5, #1
 801b7fe:	402b      	ands	r3, r5
 801b800:	2b01      	cmp	r3, #1
 801b802:	f04f 0500 	mov.w	r5, #0
 801b806:	d10f      	bne.n	801b828 <state_mngr_alloc_state_mchn+0xec>
 801b808:	190d      	adds	r5, r1, r4
 801b80a:	2303      	movs	r3, #3
 801b80c:	550b      	strb	r3, [r1, r4]
 801b80e:	1c51      	adds	r1, r2, #1
 801b810:	7001      	strb	r1, [r0, #0]
 801b812:	e009      	b.n	801b828 <state_mngr_alloc_state_mchn+0xec>
 801b814:	2202      	movs	r2, #2
 801b816:	f801 2f08 	strb.w	r2, [r1, #8]!
 801b81a:	e002      	b.n	801b822 <state_mngr_alloc_state_mchn+0xe6>
 801b81c:	2203      	movs	r2, #3
 801b81e:	f801 2f09 	strb.w	r2, [r1, #9]!
 801b822:	2201      	movs	r2, #1
 801b824:	7002      	strb	r2, [r0, #0]
 801b826:	460d      	mov	r5, r1
 801b828:	4628      	mov	r0, r5
 801b82a:	bdb0      	pop	{r4, r5, r7, pc}

0801b82c <state_mngr_update_state>:
 801b82c:	f247 0cfc 	movw	ip, #28924	@ 0x70fc
 801b830:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801b834:	4560      	cmp	r0, ip
 801b836:	f04f 0230 	mov.w	r2, #48	@ 0x30
 801b83a:	d331      	bcc.n	801b8a0 <state_mngr_update_state+0x74>
 801b83c:	f10c 030a 	add.w	r3, ip, #10
 801b840:	4298      	cmp	r0, r3
 801b842:	d82d      	bhi.n	801b8a0 <state_mngr_update_state+0x74>
 801b844:	2906      	cmp	r1, #6
 801b846:	f04f 0230 	mov.w	r2, #48	@ 0x30
 801b84a:	d829      	bhi.n	801b8a0 <state_mngr_update_state+0x74>
 801b84c:	e8df f001 	tbb	[pc, r1]
 801b850:	28262604 	.word	0x28262604
 801b854:	00221628 	.word	0x00221628
 801b858:	7801      	ldrb	r1, [r0, #0]
 801b85a:	3901      	subs	r1, #1
 801b85c:	2905      	cmp	r1, #5
 801b85e:	d80b      	bhi.n	801b878 <state_mngr_update_state+0x4c>
 801b860:	e8df f001 	tbb	[pc, r1]
 801b864:	032b2203 	.word	0x032b2203
 801b868:	0303      	.short	0x0303
 801b86a:	f247 01fb 	movw	r1, #28923	@ 0x70fb
 801b86e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b872:	780a      	ldrb	r2, [r1, #0]
 801b874:	3a01      	subs	r2, #1
 801b876:	700a      	strb	r2, [r1, #0]
 801b878:	2100      	movs	r1, #0
 801b87a:	e00f      	b.n	801b89c <state_mngr_update_state+0x70>
 801b87c:	7801      	ldrb	r1, [r0, #0]
 801b87e:	2230      	movs	r2, #48	@ 0x30
 801b880:	2906      	cmp	r1, #6
 801b882:	d80d      	bhi.n	801b8a0 <state_mngr_update_state+0x74>
 801b884:	2301      	movs	r3, #1
 801b886:	fa03 f101 	lsl.w	r1, r3, r1
 801b88a:	f011 0f52 	tst.w	r1, #82	@ 0x52
 801b88e:	d007      	beq.n	801b8a0 <state_mngr_update_state+0x74>
 801b890:	2105      	movs	r1, #5
 801b892:	e003      	b.n	801b89c <state_mngr_update_state+0x70>
 801b894:	7801      	ldrb	r1, [r0, #0]
 801b896:	2905      	cmp	r1, #5
 801b898:	d104      	bne.n	801b8a4 <state_mngr_update_state+0x78>
 801b89a:	2106      	movs	r1, #6
 801b89c:	2200      	movs	r2, #0
 801b89e:	7001      	strb	r1, [r0, #0]
 801b8a0:	4610      	mov	r0, r2
 801b8a2:	4770      	bx	lr
 801b8a4:	2230      	movs	r2, #48	@ 0x30
 801b8a6:	e7fb      	b.n	801b8a0 <state_mngr_update_state+0x74>
 801b8a8:	f10c 0108 	add.w	r1, ip, #8
 801b8ac:	4288      	cmp	r0, r1
 801b8ae:	d1dc      	bne.n	801b86a <state_mngr_update_state+0x3e>
 801b8b0:	f247 02fa 	movw	r2, #28922	@ 0x70fa
 801b8b4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801b8b8:	e007      	b.n	801b8ca <state_mngr_update_state+0x9e>
 801b8ba:	f10c 0109 	add.w	r1, ip, #9
 801b8be:	4288      	cmp	r0, r1
 801b8c0:	d1d3      	bne.n	801b86a <state_mngr_update_state+0x3e>
 801b8c2:	f247 02f9 	movw	r2, #28921	@ 0x70f9
 801b8c6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801b8ca:	2100      	movs	r1, #0
 801b8cc:	7011      	strb	r1, [r2, #0]
 801b8ce:	e7e5      	b.n	801b89c <state_mngr_update_state+0x70>

0801b8d0 <state_mngr_get_state_type>:
 801b8d0:	b580      	push	{r7, lr}
 801b8d2:	f247 01fc 	movw	r1, #28924	@ 0x70fc
 801b8d6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801b8da:	4288      	cmp	r0, r1
 801b8dc:	d304      	bcc.n	801b8e8 <state_mngr_get_state_type+0x18>
 801b8de:	310a      	adds	r1, #10
 801b8e0:	4288      	cmp	r0, r1
 801b8e2:	bf9c      	itt	ls
 801b8e4:	7800      	ldrbls	r0, [r0, #0]
 801b8e6:	bd80      	popls	{r7, pc}
 801b8e8:	2000      	movs	r0, #0
 801b8ea:	2101      	movs	r1, #1
 801b8ec:	f000 f817 	bl	801b91e <bsp_assert>
 801b8f0:	200e      	movs	r0, #14
 801b8f2:	bd80      	pop	{r7, pc}

0801b8f4 <bsp_init>:
 801b8f4:	b580      	push	{r7, lr}
 801b8f6:	f7f0 fa4f 	bl	800bd98 <ll_sys_init>
 801b8fa:	2000      	movs	r0, #0
 801b8fc:	bd80      	pop	{r7, pc}

0801b8fe <bsp_delay_us>:
 801b8fe:	f7f0 ba4d 	b.w	800bd9c <ll_sys_delay_us>

0801b902 <bsp_intr_set_pri>:
 801b902:	b580      	push	{r7, lr}
 801b904:	2802      	cmp	r0, #2
 801b906:	d005      	beq.n	801b914 <bsp_intr_set_pri+0x12>
 801b908:	2801      	cmp	r0, #1
 801b90a:	d106      	bne.n	801b91a <bsp_intr_set_pri+0x18>
 801b90c:	4608      	mov	r0, r1
 801b90e:	f7f0 fa4d 	bl	800bdac <ll_sys_setup_radio_intr>
 801b912:	e002      	b.n	801b91a <bsp_intr_set_pri+0x18>
 801b914:	4608      	mov	r0, r1
 801b916:	f7f0 fa4b 	bl	800bdb0 <ll_sys_setup_radio_sw_low_intr>
 801b91a:	2000      	movs	r0, #0
 801b91c:	bd80      	pop	{r7, pc}

0801b91e <bsp_assert>:
 801b91e:	2901      	cmp	r1, #1
 801b920:	bf18      	it	ne
 801b922:	4770      	bxne	lr
 801b924:	f7f0 ba3c 	b.w	800bda0 <ll_sys_assert>

0801b928 <bsp_is_ptr_in_ble_mem>:
 801b928:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801b92c:	f6c4 0101 	movt	r1, #18433	@ 0x4801
 801b930:	f24c 0300 	movw	r3, #49152	@ 0xc000
 801b934:	2200      	movs	r2, #0
 801b936:	4288      	cmp	r0, r1
 801b938:	f04f 0100 	mov.w	r1, #0
 801b93c:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 801b940:	bf88      	it	hi
 801b942:	2101      	movhi	r1, #1
 801b944:	4298      	cmp	r0, r3
 801b946:	bf38      	it	cc
 801b948:	2201      	movcc	r2, #1
 801b94a:	ea01 0002 	and.w	r0, r1, r2
 801b94e:	4770      	bx	lr

0801b950 <bsp_control_hclk>:
 801b950:	4770      	bx	lr

0801b952 <bsp_control_aclk>:
 801b952:	f7f0 ba27 	b.w	800bda4 <ll_sys_radio_ack_ctrl>

0801b956 <bsp_switch_to_lw_isr>:
 801b956:	f7f0 ba2d 	b.w	800bdb4 <ll_sys_radio_sw_low_intr_trigger>

0801b95a <gen_rnd_num>:
 801b95a:	b580      	push	{r7, lr}
 801b95c:	f7f0 fa24 	bl	800bda8 <ll_sys_get_rng>
 801b960:	2000      	movs	r0, #0
 801b962:	bd80      	pop	{r7, pc}

0801b964 <bsp_evnt_not>:
 801b964:	b510      	push	{r4, lr}
 801b966:	2802      	cmp	r0, #2
 801b968:	d004      	beq.n	801b974 <bsp_evnt_not+0x10>
 801b96a:	2800      	cmp	r0, #0
 801b96c:	bf0c      	ite	eq
 801b96e:	2401      	moveq	r4, #1
 801b970:	2400      	movne	r4, #0
 801b972:	e003      	b.n	801b97c <bsp_evnt_not+0x18>
 801b974:	2000      	movs	r0, #0
 801b976:	2400      	movs	r4, #0
 801b978:	f7f0 fa12 	bl	800bda0 <ll_sys_assert>
 801b97c:	4620      	mov	r0, r4
 801b97e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b982:	f7f0 ba19 	b.w	800bdb8 <ll_sys_radio_evt_not>

0801b986 <bsp_rco_clbr_not>:
 801b986:	b510      	push	{r4, lr}
 801b988:	2802      	cmp	r0, #2
 801b98a:	d004      	beq.n	801b996 <bsp_rco_clbr_not+0x10>
 801b98c:	2800      	cmp	r0, #0
 801b98e:	bf0c      	ite	eq
 801b990:	2401      	moveq	r4, #1
 801b992:	2400      	movne	r4, #0
 801b994:	e003      	b.n	801b99e <bsp_rco_clbr_not+0x18>
 801b996:	2000      	movs	r0, #0
 801b998:	2400      	movs	r4, #0
 801b99a:	f7f0 fa01 	bl	800bda0 <ll_sys_assert>
 801b99e:	4620      	mov	r0, r4
 801b9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9a4:	f7f0 ba0e 	b.w	800bdc4 <ll_sys_rco_clbr_not>

0801b9a8 <bsp_request_temperature>:
 801b9a8:	f7f0 ba12 	b.w	800bdd0 <ll_sys_request_temperature>

0801b9ac <bsp_debug_gpio_set>:
 801b9ac:	f7ea bcc8 	b.w	8006340 <LINKLAYER_DEBUG_SIGNAL_SET>

0801b9b0 <bsp_debug_gpio_clear>:
 801b9b0:	f7ea bcc8 	b.w	8006344 <LINKLAYER_DEBUG_SIGNAL_RESET>

0801b9b4 <bsp_debug_gpio_toggle>:
 801b9b4:	f7ea bcc8 	b.w	8006348 <LINKLAYER_DEBUG_SIGNAL_TOGGLE>

0801b9b8 <bsp_set_phy_clbr_state>:
 801b9b8:	b130      	cbz	r0, 801b9c8 <bsp_set_phy_clbr_state+0x10>
 801b9ba:	2802      	cmp	r0, #2
 801b9bc:	d006      	beq.n	801b9cc <bsp_set_phy_clbr_state+0x14>
 801b9be:	2801      	cmp	r0, #1
 801b9c0:	bf18      	it	ne
 801b9c2:	4770      	bxne	lr
 801b9c4:	f7f0 b984 	b.w	800bcd0 <ll_sys_disable_os_context_switch>
 801b9c8:	f7f0 b980 	b.w	800bccc <ll_sys_enable_os_context_switch>
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	f7f0 b9e7 	b.w	800bda0 <ll_sys_assert>

0801b9d2 <bsp_evnt_schldr_timing_update_not>:
 801b9d2:	f7f0 b9ff 	b.w	800bdd4 <ll_sys_schldr_timing_update_not>

0801b9d6 <enable_specific_irq>:
 801b9d6:	f7f0 b975 	b.w	800bcc4 <ll_sys_enable_specific_irq>

0801b9da <disable_specific_irq>:
 801b9da:	f7f0 b975 	b.w	800bcc8 <ll_sys_disable_specific_irq>

0801b9de <os_disable_isr>:
 801b9de:	f7e6 be9d 	b.w	800271c <LINKLAYER_PLAT_DisableIRQ>

0801b9e2 <os_enable_isr>:
 801b9e2:	f7e6 be87 	b.w	80026f4 <LINKLAYER_PLAT_EnableIRQ>

0801b9e6 <os_rcrsv_mutex_wait>:
 801b9e6:	b580      	push	{r7, lr}
 801b9e8:	2003      	movs	r0, #3
 801b9ea:	f7e6 fed7 	bl	800279c <LINKLAYER_PLAT_DisableSpecificIRQ>
 801b9ee:	2000      	movs	r0, #0
 801b9f0:	bd80      	pop	{r7, pc}

0801b9f2 <os_rcrsv_mutex_release>:
 801b9f2:	b580      	push	{r7, lr}
 801b9f4:	2003      	movs	r0, #3
 801b9f6:	f7e6 fea1 	bl	800273c <LINKLAYER_PLAT_EnableSpecificIRQ>
 801b9fa:	2000      	movs	r0, #0
 801b9fc:	bd80      	pop	{r7, pc}

0801b9fe <os_semaphore_create>:
 801b9fe:	2000      	movs	r0, #0
 801ba00:	4770      	bx	lr

0801ba02 <os_semaphore_wait>:
 801ba02:	2000      	movs	r0, #0
 801ba04:	4770      	bx	lr

0801ba06 <os_semaphore_release>:
 801ba06:	b580      	push	{r7, lr}
 801ba08:	f7e6 ff54 	bl	80028b4 <ll_sys_schedule_bg_process>
 801ba0c:	2000      	movs	r0, #0
 801ba0e:	bd80      	pop	{r7, pc}

0801ba10 <os_semaphore_release_isr>:
 801ba10:	b580      	push	{r7, lr}
 801ba12:	f7e6 ff53 	bl	80028bc <ll_sys_schedule_bg_process_isr>
 801ba16:	2000      	movs	r0, #0
 801ba18:	bd80      	pop	{r7, pc}

0801ba1a <llhwc_phy_exec_clbr_done_clbk>:
 801ba1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba1c:	b081      	sub	sp, #4
 801ba1e:	f24e 6054 	movw	r0, #58964	@ 0xe654
 801ba22:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ba26:	6805      	ldr	r5, [r0, #0]
 801ba28:	2000      	movs	r0, #0
 801ba2a:	2101      	movs	r1, #1
 801ba2c:	2700      	movs	r7, #0
 801ba2e:	2dff      	cmp	r5, #255	@ 0xff
 801ba30:	bf38      	it	cc
 801ba32:	2001      	movcc	r0, #1
 801ba34:	f7ff ff73 	bl	801b91e <bsp_assert>
 801ba38:	f247 161c 	movw	r6, #28956	@ 0x711c
 801ba3c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801ba40:	6872      	ldr	r2, [r6, #4]
 801ba42:	f896 4037 	ldrb.w	r4, [r6, #55]	@ 0x37
 801ba46:	f886 7039 	strb.w	r7, [r6, #57]	@ 0x39
 801ba4a:	b132      	cbz	r2, 801ba5a <llhwc_phy_exec_clbr_done_clbk+0x40>
 801ba4c:	b2e8      	uxtb	r0, r5
 801ba4e:	1a20      	subs	r0, r4, r0
 801ba50:	fab0 f080 	clz	r0, r0
 801ba54:	0940      	lsrs	r0, r0, #5
 801ba56:	4621      	mov	r1, r4
 801ba58:	4790      	blx	r2
 801ba5a:	b2e8      	uxtb	r0, r5
 801ba5c:	4284      	cmp	r4, r0
 801ba5e:	bf04      	itt	eq
 801ba60:	2000      	moveq	r0, #0
 801ba62:	f886 0037 	strbeq.w	r0, [r6, #55]	@ 0x37
 801ba66:	b001      	add	sp, #4
 801ba68:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ba6a <llhwc_phy_get_num_of_prdc_clbr_chnls>:
 801ba6a:	b510      	push	{r4, lr}
 801ba6c:	f24e 6054 	movw	r0, #58964	@ 0xe654
 801ba70:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ba74:	6804      	ldr	r4, [r0, #0]
 801ba76:	2000      	movs	r0, #0
 801ba78:	2101      	movs	r1, #1
 801ba7a:	2cff      	cmp	r4, #255	@ 0xff
 801ba7c:	bf38      	it	cc
 801ba7e:	2001      	movcc	r0, #1
 801ba80:	f7ff ff4d 	bl	801b91e <bsp_assert>
 801ba84:	b2e0      	uxtb	r0, r4
 801ba86:	bd10      	pop	{r4, pc}

0801ba88 <llhwc_phy_set_phy_clbr_state>:
 801ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba8a:	b081      	sub	sp, #4
 801ba8c:	b150      	cbz	r0, 801baa4 <llhwc_phy_set_phy_clbr_state+0x1c>
 801ba8e:	f247 111c 	movw	r1, #28956	@ 0x711c
 801ba92:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ba96:	f891 2038 	ldrb.w	r2, [r1, #56]	@ 0x38
 801ba9a:	b90a      	cbnz	r2, 801baa0 <llhwc_phy_set_phy_clbr_state+0x18>
 801ba9c:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801baa0:	b001      	add	sp, #4
 801baa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baa4:	f247 1410 	movw	r4, #28944	@ 0x7110
 801baa8:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801baac:	6820      	ldr	r0, [r4, #0]
 801baae:	2802      	cmp	r0, #2
 801bab0:	d127      	bne.n	801bb02 <llhwc_phy_set_phy_clbr_state+0x7a>
 801bab2:	2003      	movs	r0, #3
 801bab4:	f7ff ff91 	bl	801b9da <disable_specific_irq>
 801bab8:	6820      	ldr	r0, [r4, #0]
 801baba:	f247 161c 	movw	r6, #28956	@ 0x711c
 801babe:	2500      	movs	r5, #0
 801bac0:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801bac4:	2802      	cmp	r0, #2
 801bac6:	f886 5038 	strb.w	r5, [r6, #56]	@ 0x38
 801baca:	6035      	str	r5, [r6, #0]
 801bacc:	d10f      	bne.n	801baee <llhwc_phy_set_phy_clbr_state+0x66>
 801bace:	f240 4740 	movw	r7, #1088	@ 0x440
 801bad2:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801bad6:	bf00      	nop
 801bad8:	6838      	ldr	r0, [r7, #0]
 801bada:	07c0      	lsls	r0, r0, #31
 801badc:	d102      	bne.n	801bae4 <llhwc_phy_set_phy_clbr_state+0x5c>
 801bade:	2002      	movs	r0, #2
 801bae0:	e003      	b.n	801baea <llhwc_phy_set_phy_clbr_state+0x62>
 801bae2:	bf00      	nop
 801bae4:	f000 f81c 	bl	801bb20 <llhwc_phy_clbr_seq_done_isr>
 801bae8:	6820      	ldr	r0, [r4, #0]
 801baea:	2802      	cmp	r0, #2
 801baec:	d0f4      	beq.n	801bad8 <llhwc_phy_set_phy_clbr_state+0x50>
 801baee:	6872      	ldr	r2, [r6, #4]
 801baf0:	f886 5039 	strb.w	r5, [r6, #57]	@ 0x39
 801baf4:	b112      	cbz	r2, 801bafc <llhwc_phy_set_phy_clbr_state+0x74>
 801baf6:	2001      	movs	r0, #1
 801baf8:	21ff      	movs	r1, #255	@ 0xff
 801bafa:	4790      	blx	r2
 801bafc:	2003      	movs	r0, #3
 801bafe:	f7ff ff6a 	bl	801b9d6 <enable_specific_irq>
 801bb02:	f247 131c 	movw	r3, #28956	@ 0x711c
 801bb06:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801bb0a:	2700      	movs	r7, #0
 801bb0c:	f103 000e 	add.w	r0, r3, #14
 801bb10:	2100      	movs	r1, #0
 801bb12:	2228      	movs	r2, #40	@ 0x28
 801bb14:	86df      	strh	r7, [r3, #54]	@ 0x36
 801bb16:	b001      	add	sp, #4
 801bb18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bb1c:	f004 bee2 	b.w	80208e4 <ble_memset>

0801bb20 <llhwc_phy_clbr_seq_done_isr>:
 801bb20:	b5b0      	push	{r4, r5, r7, lr}
 801bb22:	b082      	sub	sp, #8
 801bb24:	f24e 6054 	movw	r0, #58964	@ 0xe654
 801bb28:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801bb2c:	6804      	ldr	r4, [r0, #0]
 801bb2e:	2500      	movs	r5, #0
 801bb30:	2000      	movs	r0, #0
 801bb32:	2101      	movs	r1, #1
 801bb34:	9501      	str	r5, [sp, #4]
 801bb36:	2cff      	cmp	r4, #255	@ 0xff
 801bb38:	bf38      	it	cc
 801bb3a:	2001      	movcc	r0, #1
 801bb3c:	f7ff feef 	bl	801b91e <bsp_assert>
 801bb40:	202f      	movs	r0, #47	@ 0x2f
 801bb42:	b2e4      	uxtb	r4, r4
 801bb44:	f7ff ff32 	bl	801b9ac <bsp_debug_gpio_set>
 801bb48:	f240 4024 	movw	r0, #1060	@ 0x424
 801bb4c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801bb50:	6a01      	ldr	r1, [r0, #32]
 801bb52:	f041 0101 	orr.w	r1, r1, #1
 801bb56:	6201      	str	r1, [r0, #32]
 801bb58:	6a01      	ldr	r1, [r0, #32]
 801bb5a:	f021 0101 	bic.w	r1, r1, #1
 801bb5e:	6201      	str	r1, [r0, #32]
 801bb60:	f247 1110 	movw	r1, #28944	@ 0x7110
 801bb64:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801bb68:	600d      	str	r5, [r1, #0]
 801bb6a:	6801      	ldr	r1, [r0, #0]
 801bb6c:	f021 0120 	bic.w	r1, r1, #32
 801bb70:	6001      	str	r1, [r0, #0]
 801bb72:	6801      	ldr	r1, [r0, #0]
 801bb74:	f021 0110 	bic.w	r1, r1, #16
 801bb78:	6001      	str	r1, [r0, #0]
 801bb7a:	f247 100c 	movw	r0, #28940	@ 0x710c
 801bb7e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bb82:	7005      	strb	r5, [r0, #0]
 801bb84:	f247 100d 	movw	r0, #28941	@ 0x710d
 801bb88:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bb8c:	7005      	strb	r5, [r0, #0]
 801bb8e:	2000      	movs	r0, #0
 801bb90:	2102      	movs	r1, #2
 801bb92:	f004 f877 	bl	801fc84 <llhwc_cmn_control_aclk>
 801bb96:	f000 feac 	bl	801c8f2 <llhwc_phy_read_updt_vco_pll_clbr>
 801bb9a:	f247 151c 	movw	r5, #28956	@ 0x711c
 801bb9e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801bba2:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 801bba6:	3001      	adds	r0, #1
 801bba8:	f885 0037 	strb.w	r0, [r5, #55]	@ 0x37
 801bbac:	a801      	add	r0, sp, #4
 801bbae:	f002 fc8c 	bl	801e4ca <llhwc_slptmr_get>
 801bbb2:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 801bbb6:	42a0      	cmp	r0, r4
 801bbb8:	d20c      	bcs.n	801bbd4 <llhwc_phy_clbr_seq_done_isr+0xb4>
 801bbba:	9801      	ldr	r0, [sp, #4]
 801bbbc:	7b69      	ldrb	r1, [r5, #13]
 801bbbe:	682a      	ldr	r2, [r5, #0]
 801bbc0:	4408      	add	r0, r1
 801bbc2:	4290      	cmp	r0, r2
 801bbc4:	d206      	bcs.n	801bbd4 <llhwc_phy_clbr_seq_done_isr+0xb4>
 801bbc6:	f000 ff29 	bl	801ca1c <llhwc_phy_get_nxt_clbr_ch>
 801bbca:	2102      	movs	r1, #2
 801bbcc:	2200      	movs	r2, #0
 801bbce:	f000 fe4d 	bl	801c86c <llhwc_phy_strt_vco_pll_clbr>
 801bbd2:	e002      	b.n	801bbda <llhwc_phy_clbr_seq_done_isr+0xba>
 801bbd4:	2000      	movs	r0, #0
 801bbd6:	f000 ffbe 	bl	801cb56 <llhwc_phy_clbr_cmpltd_release_grant>
 801bbda:	202f      	movs	r0, #47	@ 0x2f
 801bbdc:	f7ff fee8 	bl	801b9b0 <bsp_debug_gpio_clear>
 801bbe0:	b002      	add	sp, #8
 801bbe2:	bdb0      	pop	{r4, r5, r7, pc}

0801bbe4 <llhwc_phy_get_phy_clbr_state>:
 801bbe4:	f247 101c 	movw	r0, #28956	@ 0x711c
 801bbe8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bbec:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801bbf0:	2800      	cmp	r0, #0
 801bbf2:	bf18      	it	ne
 801bbf4:	2001      	movne	r0, #1
 801bbf6:	4770      	bx	lr

0801bbf8 <llhwc_phy_is_phy_clbr_done_pnding>:
 801bbf8:	f247 101c 	movw	r0, #28956	@ 0x711c
 801bbfc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bc00:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 801bc04:	4770      	bx	lr

0801bc06 <llhwc_phy_run_phy_sequence>:
 801bc06:	2a01      	cmp	r2, #1
 801bc08:	bf08      	it	eq
 801bc0a:	f000 b8cf 	beq.w	801bdac <llhwc_phy_trg_sequence_from_sequencer_ram>
 801bc0e:	b922      	cbnz	r2, 801bc1a <llhwc_phy_run_phy_sequence+0x14>
 801bc10:	0889      	lsrs	r1, r1, #2
 801bc12:	2200      	movs	r2, #0
 801bc14:	2300      	movs	r3, #0
 801bc16:	f000 b805 	b.w	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801bc1a:	2000      	movs	r0, #0
 801bc1c:	2101      	movs	r1, #1
 801bc1e:	f7ff be7e 	b.w	801b91e <bsp_assert>
	...

0801bc24 <llhwc_phy_write_cfg_fifo_batch>:
 801bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc28:	b081      	sub	sp, #4
 801bc2a:	4681      	mov	r9, r0
 801bc2c:	2000      	movs	r0, #0
 801bc2e:	2900      	cmp	r1, #0
 801bc30:	9000      	str	r0, [sp, #0]
 801bc32:	f000 80b1 	beq.w	801bd98 <llhwc_phy_write_cfg_fifo_batch+0x174>
 801bc36:	f247 3030 	movw	r0, #29488	@ 0x7330
 801bc3a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bc3e:	f890 804c 	ldrb.w	r8, [r0, #76]	@ 0x4c
 801bc42:	469a      	mov	sl, r3
 801bc44:	4693      	mov	fp, r2
 801bc46:	460e      	mov	r6, r1
 801bc48:	2901      	cmp	r1, #1
 801bc4a:	d104      	bne.n	801bc56 <llhwc_phy_write_cfg_fifo_batch+0x32>
 801bc4c:	f8d9 0000 	ldr.w	r0, [r9]
 801bc50:	28ae      	cmp	r0, #174	@ 0xae
 801bc52:	f000 80a1 	beq.w	801bd98 <llhwc_phy_write_cfg_fifo_batch+0x174>
 801bc56:	f1b8 0f01 	cmp.w	r8, #1
 801bc5a:	d003      	beq.n	801bc64 <llhwc_phy_write_cfg_fifo_batch+0x40>
 801bc5c:	2001      	movs	r0, #1
 801bc5e:	2102      	movs	r1, #2
 801bc60:	f004 f810 	bl	801fc84 <llhwc_cmn_control_aclk>
 801bc64:	f247 1010 	movw	r0, #28944	@ 0x7110
 801bc68:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bc6c:	6800      	ldr	r0, [r0, #0]
 801bc6e:	b120      	cbz	r0, 801bc7a <llhwc_phy_write_cfg_fifo_batch+0x56>
 801bc70:	2000      	movs	r0, #0
 801bc72:	2101      	movs	r1, #1
 801bc74:	f7ff fe53 	bl	801b91e <bsp_assert>
 801bc78:	e08b      	b.n	801bd92 <llhwc_phy_write_cfg_fifo_batch+0x16e>
 801bc7a:	f240 4724 	movw	r7, #1060	@ 0x424
 801bc7e:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801bc82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc84:	2400      	movs	r4, #0
 801bc86:	f040 0001 	orr.w	r0, r0, #1
 801bc8a:	6278      	str	r0, [r7, #36]	@ 0x24
 801bc8c:	6838      	ldr	r0, [r7, #0]
 801bc8e:	2500      	movs	r5, #0
 801bc90:	f040 0001 	orr.w	r0, r0, #1
 801bc94:	6038      	str	r0, [r7, #0]
 801bc96:	6838      	ldr	r0, [r7, #0]
 801bc98:	f020 0001 	bic.w	r0, r0, #1
 801bc9c:	6038      	str	r0, [r7, #0]
 801bc9e:	6838      	ldr	r0, [r7, #0]
 801bca0:	f040 0002 	orr.w	r0, r0, #2
 801bca4:	6038      	str	r0, [r7, #0]
 801bca6:	6838      	ldr	r0, [r7, #0]
 801bca8:	f020 0002 	bic.w	r0, r0, #2
 801bcac:	6038      	str	r0, [r7, #0]
 801bcae:	6838      	ldr	r0, [r7, #0]
 801bcb0:	f040 0020 	orr.w	r0, r0, #32
 801bcb4:	6038      	str	r0, [r7, #0]
 801bcb6:	e02f      	b.n	801bd18 <llhwc_phy_write_cfg_fifo_batch+0xf4>
 801bcb8:	68f8      	ldr	r0, [r7, #12]
 801bcba:	ebaa 0105 	sub.w	r1, sl, r5
 801bcbe:	2903      	cmp	r1, #3
 801bcc0:	d808      	bhi.n	801bcd4 <llhwc_phy_write_cfg_fifo_batch+0xb0>
 801bcc2:	e8df f001 	tbb	[pc, r1]
 801bcc6:	1302      	.short	0x1302
 801bcc8:	1f17      	.short	0x1f17
 801bcca:	2000      	movs	r0, #0
 801bccc:	2101      	movs	r1, #1
 801bcce:	f7ff fe26 	bl	801b91e <bsp_assert>
 801bcd2:	e038      	b.n	801bd46 <llhwc_phy_write_cfg_fifo_batch+0x122>
 801bcd4:	eb0b 0105 	add.w	r1, fp, r5
 801bcd8:	0a02      	lsrs	r2, r0, #8
 801bcda:	f80b 0005 	strb.w	r0, [fp, r5]
 801bcde:	704a      	strb	r2, [r1, #1]
 801bce0:	0c02      	lsrs	r2, r0, #16
 801bce2:	0e00      	lsrs	r0, r0, #24
 801bce4:	3504      	adds	r5, #4
 801bce6:	708a      	strb	r2, [r1, #2]
 801bce8:	70c8      	strb	r0, [r1, #3]
 801bcea:	e02c      	b.n	801bd46 <llhwc_phy_write_cfg_fifo_batch+0x122>
 801bcec:	f80b 0005 	strb.w	r0, [fp, r5]
 801bcf0:	3501      	adds	r5, #1
 801bcf2:	e028      	b.n	801bd46 <llhwc_phy_write_cfg_fifo_batch+0x122>
 801bcf4:	eb0b 0105 	add.w	r1, fp, r5
 801bcf8:	f80b 0005 	strb.w	r0, [fp, r5]
 801bcfc:	0a00      	lsrs	r0, r0, #8
 801bcfe:	7048      	strb	r0, [r1, #1]
 801bd00:	3502      	adds	r5, #2
 801bd02:	e020      	b.n	801bd46 <llhwc_phy_write_cfg_fifo_batch+0x122>
 801bd04:	eb0b 0105 	add.w	r1, fp, r5
 801bd08:	f80b 0005 	strb.w	r0, [fp, r5]
 801bd0c:	0a02      	lsrs	r2, r0, #8
 801bd0e:	0c00      	lsrs	r0, r0, #16
 801bd10:	704a      	strb	r2, [r1, #1]
 801bd12:	7088      	strb	r0, [r1, #2]
 801bd14:	3503      	adds	r5, #3
 801bd16:	e016      	b.n	801bd46 <llhwc_phy_write_cfg_fifo_batch+0x122>
 801bd18:	42b4      	cmp	r4, r6
 801bd1a:	d20a      	bcs.n	801bd32 <llhwc_phy_write_cfg_fifo_batch+0x10e>
 801bd1c:	6838      	ldr	r0, [r7, #0]
 801bd1e:	f3c0 4080 	ubfx	r0, r0, #18, #1
 801bd22:	9000      	str	r0, [sp, #0]
 801bd24:	9800      	ldr	r0, [sp, #0]
 801bd26:	2801      	cmp	r0, #1
 801bd28:	d003      	beq.n	801bd32 <llhwc_phy_write_cfg_fifo_batch+0x10e>
 801bd2a:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
 801bd2e:	3401      	adds	r4, #1
 801bd30:	60b8      	str	r0, [r7, #8]
 801bd32:	6838      	ldr	r0, [r7, #0]
 801bd34:	f1bb 0f00 	cmp.w	fp, #0
 801bd38:	f3c0 5000 	ubfx	r0, r0, #20, #1
 801bd3c:	9000      	str	r0, [sp, #0]
 801bd3e:	d002      	beq.n	801bd46 <llhwc_phy_write_cfg_fifo_batch+0x122>
 801bd40:	9800      	ldr	r0, [sp, #0]
 801bd42:	2800      	cmp	r0, #0
 801bd44:	d0b8      	beq.n	801bcb8 <llhwc_phy_write_cfg_fifo_batch+0x94>
 801bd46:	4555      	cmp	r5, sl
 801bd48:	bf28      	it	cs
 801bd4a:	42b4      	cmpcs	r4, r6
 801bd4c:	d3e4      	bcc.n	801bd18 <llhwc_phy_write_cfg_fifo_batch+0xf4>
 801bd4e:	f64f 61a1 	movw	r1, #65185	@ 0xfea1
 801bd52:	f2c0 0126 	movt	r1, #38	@ 0x26
 801bd56:	f04f 30ff 	mov.w	r0, #4294967295
 801bd5a:	1c4a      	adds	r2, r1, #1
 801bd5c:	69fb      	ldr	r3, [r7, #28]
 801bd5e:	3001      	adds	r0, #1
 801bd60:	f003 0301 	and.w	r3, r3, #1
 801bd64:	9300      	str	r3, [sp, #0]
 801bd66:	9b00      	ldr	r3, [sp, #0]
 801bd68:	b90b      	cbnz	r3, 801bd6e <llhwc_phy_write_cfg_fifo_batch+0x14a>
 801bd6a:	4290      	cmp	r0, r2
 801bd6c:	d3f6      	bcc.n	801bd5c <llhwc_phy_write_cfg_fifo_batch+0x138>
 801bd6e:	4288      	cmp	r0, r1
 801bd70:	d903      	bls.n	801bd7a <llhwc_phy_write_cfg_fifo_batch+0x156>
 801bd72:	2000      	movs	r0, #0
 801bd74:	2101      	movs	r1, #1
 801bd76:	f7ff fdd2 	bl	801b91e <bsp_assert>
 801bd7a:	6a38      	ldr	r0, [r7, #32]
 801bd7c:	f040 0001 	orr.w	r0, r0, #1
 801bd80:	6238      	str	r0, [r7, #32]
 801bd82:	6a38      	ldr	r0, [r7, #32]
 801bd84:	f020 0001 	bic.w	r0, r0, #1
 801bd88:	6238      	str	r0, [r7, #32]
 801bd8a:	6838      	ldr	r0, [r7, #0]
 801bd8c:	f020 0020 	bic.w	r0, r0, #32
 801bd90:	6038      	str	r0, [r7, #0]
 801bd92:	f1b8 0f01 	cmp.w	r8, #1
 801bd96:	d102      	bne.n	801bd9e <llhwc_phy_write_cfg_fifo_batch+0x17a>
 801bd98:	b001      	add	sp, #4
 801bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd9e:	2000      	movs	r0, #0
 801bda0:	2102      	movs	r1, #2
 801bda2:	b001      	add	sp, #4
 801bda4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda8:	f003 bf6c 	b.w	801fc84 <llhwc_cmn_control_aclk>

0801bdac <llhwc_phy_trg_sequence_from_sequencer_ram>:
 801bdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdae:	b081      	sub	sp, #4
 801bdb0:	2900      	cmp	r1, #0
 801bdb2:	d04d      	beq.n	801be50 <llhwc_phy_trg_sequence_from_sequencer_ram+0xa4>
 801bdb4:	4605      	mov	r5, r0
 801bdb6:	f247 1014 	movw	r0, #28948	@ 0x7114
 801bdba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bdbe:	6800      	ldr	r0, [r0, #0]
 801bdc0:	460c      	mov	r4, r1
 801bdc2:	2904      	cmp	r1, #4
 801bdc4:	d102      	bne.n	801bdcc <llhwc_phy_trg_sequence_from_sequencer_ram+0x20>
 801bdc6:	6829      	ldr	r1, [r5, #0]
 801bdc8:	29ae      	cmp	r1, #174	@ 0xae
 801bdca:	d041      	beq.n	801be50 <llhwc_phy_trg_sequence_from_sequencer_ram+0xa4>
 801bdcc:	4420      	add	r0, r4
 801bdce:	f5a0 5180 	sub.w	r1, r0, #4096	@ 0x1000
 801bdd2:	2000      	movs	r0, #0
 801bdd4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801bdd8:	bf98      	it	ls
 801bdda:	2001      	movls	r0, #1
 801bddc:	2101      	movs	r1, #1
 801bdde:	f7ff fd9e 	bl	801b91e <bsp_assert>
 801bde2:	f247 1610 	movw	r6, #28944	@ 0x7110
 801bde6:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801bdea:	6830      	ldr	r0, [r6, #0]
 801bdec:	b1b8      	cbz	r0, 801be1e <llhwc_phy_trg_sequence_from_sequencer_ram+0x72>
 801bdee:	f247 170c 	movw	r7, #28940	@ 0x710c
 801bdf2:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801bdf6:	7838      	ldrb	r0, [r7, #0]
 801bdf8:	280a      	cmp	r0, #10
 801bdfa:	d304      	bcc.n	801be06 <llhwc_phy_trg_sequence_from_sequencer_ram+0x5a>
 801bdfc:	2000      	movs	r0, #0
 801bdfe:	2101      	movs	r1, #1
 801be00:	f7ff fd8d 	bl	801b91e <bsp_assert>
 801be04:	7838      	ldrb	r0, [r7, #0]
 801be06:	1c41      	adds	r1, r0, #1
 801be08:	7039      	strb	r1, [r7, #0]
 801be0a:	f247 1158 	movw	r1, #29016	@ 0x7158
 801be0e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801be12:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 801be16:	f841 5030 	str.w	r5, [r1, r0, lsl #3]
 801be1a:	6054      	str	r4, [r2, #4]
 801be1c:	e010      	b.n	801be40 <llhwc_phy_trg_sequence_from_sequencer_ram+0x94>
 801be1e:	2001      	movs	r0, #1
 801be20:	2102      	movs	r1, #2
 801be22:	f003 ff2f 	bl	801fc84 <llhwc_cmn_control_aclk>
 801be26:	f240 4048 	movw	r0, #1096	@ 0x448
 801be2a:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801be2e:	6801      	ldr	r1, [r0, #0]
 801be30:	2201      	movs	r2, #1
 801be32:	f041 0101 	orr.w	r1, r1, #1
 801be36:	6001      	str	r1, [r0, #0]
 801be38:	4628      	mov	r0, r5
 801be3a:	4621      	mov	r1, r4
 801be3c:	f000 f85a 	bl	801bef4 <llhwc_phy_sequencer_ram_cpy_strt_seq>
 801be40:	6830      	ldr	r0, [r6, #0]
 801be42:	2801      	cmp	r0, #1
 801be44:	d104      	bne.n	801be50 <llhwc_phy_trg_sequence_from_sequencer_ram+0xa4>
 801be46:	b001      	add	sp, #4
 801be48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801be4c:	f000 b808 	b.w	801be60 <llhwc_phy_get_nxt_seq_from_queue>
 801be50:	b001      	add	sp, #4
 801be52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801be54 <llhwc_phy_is_phy_driver_busy>:
 801be54:	f247 1010 	movw	r0, #28944	@ 0x7110
 801be58:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801be5c:	6800      	ldr	r0, [r0, #0]
 801be5e:	4770      	bx	lr

0801be60 <llhwc_phy_get_nxt_seq_from_queue>:
 801be60:	b510      	push	{r4, lr}
 801be62:	f240 4024 	movw	r0, #1060	@ 0x424
 801be66:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801be6a:	69c1      	ldr	r1, [r0, #28]
 801be6c:	07c9      	lsls	r1, r1, #31
 801be6e:	bf08      	it	eq
 801be70:	bd10      	popeq	{r4, pc}
 801be72:	f247 140d 	movw	r4, #28941	@ 0x710d
 801be76:	f247 110c 	movw	r1, #28940	@ 0x710c
 801be7a:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801be7e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801be82:	7822      	ldrb	r2, [r4, #0]
 801be84:	780b      	ldrb	r3, [r1, #0]
 801be86:	429a      	cmp	r2, r3
 801be88:	d216      	bcs.n	801beb8 <llhwc_phy_get_nxt_seq_from_queue+0x58>
 801be8a:	f247 1058 	movw	r0, #29016	@ 0x7158
 801be8e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801be92:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801be96:	f850 0032 	ldr.w	r0, [r0, r2, lsl #3]
 801be9a:	6849      	ldr	r1, [r1, #4]
 801be9c:	2201      	movs	r2, #1
 801be9e:	f000 f829 	bl	801bef4 <llhwc_phy_sequencer_ram_cpy_strt_seq>
 801bea2:	7820      	ldrb	r0, [r4, #0]
 801bea4:	280a      	cmp	r0, #10
 801bea6:	d304      	bcc.n	801beb2 <llhwc_phy_get_nxt_seq_from_queue+0x52>
 801bea8:	2000      	movs	r0, #0
 801beaa:	2101      	movs	r1, #1
 801beac:	f7ff fd37 	bl	801b91e <bsp_assert>
 801beb0:	7820      	ldrb	r0, [r4, #0]
 801beb2:	3001      	adds	r0, #1
 801beb4:	7020      	strb	r0, [r4, #0]
 801beb6:	bd10      	pop	{r4, pc}
 801beb8:	6a02      	ldr	r2, [r0, #32]
 801beba:	2300      	movs	r3, #0
 801bebc:	f042 0201 	orr.w	r2, r2, #1
 801bec0:	6202      	str	r2, [r0, #32]
 801bec2:	6a02      	ldr	r2, [r0, #32]
 801bec4:	f022 0201 	bic.w	r2, r2, #1
 801bec8:	6202      	str	r2, [r0, #32]
 801beca:	f247 1210 	movw	r2, #28944	@ 0x7110
 801bece:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801bed2:	6013      	str	r3, [r2, #0]
 801bed4:	6802      	ldr	r2, [r0, #0]
 801bed6:	f022 0220 	bic.w	r2, r2, #32
 801beda:	6002      	str	r2, [r0, #0]
 801bedc:	6802      	ldr	r2, [r0, #0]
 801bede:	f022 0210 	bic.w	r2, r2, #16
 801bee2:	6002      	str	r2, [r0, #0]
 801bee4:	700b      	strb	r3, [r1, #0]
 801bee6:	2000      	movs	r0, #0
 801bee8:	2102      	movs	r1, #2
 801beea:	7023      	strb	r3, [r4, #0]
 801beec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bef0:	f003 bec8 	b.w	801fc84 <llhwc_cmn_control_aclk>

0801bef4 <llhwc_phy_sequencer_ram_cpy_strt_seq>:
 801bef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bef8:	b081      	sub	sp, #4
 801befa:	460c      	mov	r4, r1
 801befc:	f247 1114 	movw	r1, #28948	@ 0x7114
 801bf00:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801bf04:	680f      	ldr	r7, [r1, #0]
 801bf06:	4681      	mov	r9, r0
 801bf08:	f5a7 5680 	sub.w	r6, r7, #4096	@ 0x1000
 801bf0c:	f026 0003 	bic.w	r0, r6, #3
 801bf10:	1901      	adds	r1, r0, r4
 801bf12:	2000      	movs	r0, #0
 801bf14:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801bf18:	bf98      	it	ls
 801bf1a:	2001      	movls	r0, #1
 801bf1c:	2101      	movs	r1, #1
 801bf1e:	4690      	mov	r8, r2
 801bf20:	2501      	movs	r5, #1
 801bf22:	f7ff fcfc 	bl	801b91e <bsp_assert>
 801bf26:	f247 1010 	movw	r0, #28944	@ 0x7110
 801bf2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bf2e:	6801      	ldr	r1, [r0, #0]
 801bf30:	b901      	cbnz	r1, 801bf34 <llhwc_phy_sequencer_ram_cpy_strt_seq+0x40>
 801bf32:	6005      	str	r5, [r0, #0]
 801bf34:	f240 4524 	movw	r5, #1060	@ 0x424
 801bf38:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801bf3c:	6828      	ldr	r0, [r5, #0]
 801bf3e:	08b1      	lsrs	r1, r6, #2
 801bf40:	f040 0001 	orr.w	r0, r0, #1
 801bf44:	6028      	str	r0, [r5, #0]
 801bf46:	6828      	ldr	r0, [r5, #0]
 801bf48:	2600      	movs	r6, #0
 801bf4a:	f020 0001 	bic.w	r0, r0, #1
 801bf4e:	6028      	str	r0, [r5, #0]
 801bf50:	6828      	ldr	r0, [r5, #0]
 801bf52:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801bf56:	f040 0002 	orr.w	r0, r0, #2
 801bf5a:	6028      	str	r0, [r5, #0]
 801bf5c:	6828      	ldr	r0, [r5, #0]
 801bf5e:	f020 0002 	bic.w	r0, r0, #2
 801bf62:	6028      	str	r0, [r5, #0]
 801bf64:	6828      	ldr	r0, [r5, #0]
 801bf66:	f020 0020 	bic.w	r0, r0, #32
 801bf6a:	6028      	str	r0, [r5, #0]
 801bf6c:	6a28      	ldr	r0, [r5, #32]
 801bf6e:	f040 0001 	orr.w	r0, r0, #1
 801bf72:	6228      	str	r0, [r5, #32]
 801bf74:	6a28      	ldr	r0, [r5, #32]
 801bf76:	f020 0001 	bic.w	r0, r0, #1
 801bf7a:	6228      	str	r0, [r5, #32]
 801bf7c:	6828      	ldr	r0, [r5, #0]
 801bf7e:	f361 509c 	bfi	r0, r1, #22, #7
 801bf82:	6028      	str	r0, [r5, #0]
 801bf84:	6828      	ldr	r0, [r5, #0]
 801bf86:	f040 0010 	orr.w	r0, r0, #16
 801bf8a:	6028      	str	r0, [r5, #0]
 801bf8c:	f8d9 0000 	ldr.w	r0, [r9]
 801bf90:	51b8      	str	r0, [r7, r6]
 801bf92:	f7ff fd24 	bl	801b9de <os_disable_isr>
 801bf96:	6828      	ldr	r0, [r5, #0]
 801bf98:	f1b8 0f01 	cmp.w	r8, #1
 801bf9c:	f040 0020 	orr.w	r0, r0, #32
 801bfa0:	6028      	str	r0, [r5, #0]
 801bfa2:	d10f      	bne.n	801bfc4 <llhwc_phy_sequencer_ram_cpy_strt_seq+0xd0>
 801bfa4:	2c08      	cmp	r4, #8
 801bfa6:	d30d      	bcc.n	801bfc4 <llhwc_phy_sequencer_ram_cpy_strt_seq+0xd0>
 801bfa8:	f04f 31ff 	mov.w	r1, #4294967295
 801bfac:	19f0      	adds	r0, r6, r7
 801bfae:	eb01 0194 	add.w	r1, r1, r4, lsr #2
 801bfb2:	3004      	adds	r0, #4
 801bfb4:	f109 0204 	add.w	r2, r9, #4
 801bfb8:	f852 3b04 	ldr.w	r3, [r2], #4
 801bfbc:	3901      	subs	r1, #1
 801bfbe:	f840 3b04 	str.w	r3, [r0], #4
 801bfc2:	d1f9      	bne.n	801bfb8 <llhwc_phy_sequencer_ram_cpy_strt_seq+0xc4>
 801bfc4:	b001      	add	sp, #4
 801bfc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfca:	f7ff bd0a 	b.w	801b9e2 <os_enable_isr>

0801bfce <llhwc_phy_phy_driver_stop>:
 801bfce:	f247 1010 	movw	r0, #28944	@ 0x7110
 801bfd2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	6002      	str	r2, [r0, #0]
 801bfda:	f240 4024 	movw	r0, #1060	@ 0x424
 801bfde:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801bfe2:	6801      	ldr	r1, [r0, #0]
 801bfe4:	f247 130d 	movw	r3, #28941	@ 0x710d
 801bfe8:	f021 0120 	bic.w	r1, r1, #32
 801bfec:	6001      	str	r1, [r0, #0]
 801bfee:	6801      	ldr	r1, [r0, #0]
 801bff0:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801bff4:	f021 0110 	bic.w	r1, r1, #16
 801bff8:	6001      	str	r1, [r0, #0]
 801bffa:	f247 100c 	movw	r0, #28940	@ 0x710c
 801bffe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c002:	7002      	strb	r2, [r0, #0]
 801c004:	2000      	movs	r0, #0
 801c006:	2102      	movs	r1, #2
 801c008:	701a      	strb	r2, [r3, #0]
 801c00a:	f003 be3b 	b.w	801fc84 <llhwc_cmn_control_aclk>
	...

0801c010 <llhwc_phy_get_phy_seq_cfg_time>:
 801c010:	b570      	push	{r4, r5, r6, lr}
 801c012:	ea5f 0e91 	movs.w	lr, r1, lsr #2
 801c016:	d024      	beq.n	801c062 <llhwc_phy_get_phy_seq_cfg_time+0x52>
 801c018:	2100      	movs	r1, #0
 801c01a:	2300      	movs	r3, #0
 801c01c:	f04f 0c00 	mov.w	ip, #0
 801c020:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 801c024:	f004 05ef 	and.w	r5, r4, #239	@ 0xef
 801c028:	2d03      	cmp	r5, #3
 801c02a:	bf18      	it	ne
 801c02c:	2da1      	cmpne	r5, #161	@ 0xa1
 801c02e:	d109      	bne.n	801c044 <llhwc_phy_get_phy_seq_cfg_time+0x34>
 801c030:	f004 04ee 	and.w	r4, r4, #238	@ 0xee
 801c034:	3101      	adds	r1, #1
 801c036:	2c04      	cmp	r4, #4
 801c038:	bf08      	it	eq
 801c03a:	3301      	addeq	r3, #1
 801c03c:	b2cc      	uxtb	r4, r1
 801c03e:	45a6      	cmp	lr, r4
 801c040:	d8ee      	bhi.n	801c020 <llhwc_phy_get_phy_seq_cfg_time+0x10>
 801c042:	e011      	b.n	801c068 <llhwc_phy_get_phy_seq_cfg_time+0x58>
 801c044:	2c00      	cmp	r4, #0
 801c046:	ea4f 6514 	mov.w	r5, r4, lsr #24
 801c04a:	d401      	bmi.n	801c050 <llhwc_phy_get_phy_seq_cfg_time+0x40>
 801c04c:	44ac      	add	ip, r5
 801c04e:	e7ef      	b.n	801c030 <llhwc_phy_get_phy_seq_cfg_time+0x20>
 801c050:	f005 057f 	and.w	r5, r5, #127	@ 0x7f
 801c054:	ebc5 1645 	rsb	r6, r5, r5, lsl #5
 801c058:	eb0c 0595 	add.w	r5, ip, r5, lsr #2
 801c05c:	eb05 0c06 	add.w	ip, r5, r6
 801c060:	e7e6      	b.n	801c030 <llhwc_phy_get_phy_seq_cfg_time+0x20>
 801c062:	f04f 0c00 	mov.w	ip, #0
 801c066:	2300      	movs	r3, #0
 801c068:	2031      	movs	r0, #49	@ 0x31
 801c06a:	fb02 f000 	mul.w	r0, r2, r0
 801c06e:	ebae 0203 	sub.w	r2, lr, r3
 801c072:	b2d9      	uxtb	r1, r3
 801c074:	3010      	adds	r0, #16
 801c076:	b2d2      	uxtb	r2, r2
 801c078:	fb00 f002 	mul.w	r0, r0, r2
 801c07c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801c080:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801c084:	3014      	adds	r0, #20
 801c086:	eb0c 1090 	add.w	r0, ip, r0, lsr #6
 801c08a:	bd70      	pop	{r4, r5, r6, pc}

0801c08c <llhwc_phy_seq_ram_init>:
 801c08c:	b510      	push	{r4, lr}
 801c08e:	f24e 6028 	movw	r0, #58920	@ 0xe628
 801c092:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c096:	6800      	ldr	r0, [r0, #0]
 801c098:	f240 0e00 	movw	lr, #0
 801c09c:	0882      	lsrs	r2, r0, #2
 801c09e:	f6c4 0e02 	movt	lr, #18434	@ 0x4802
 801c0a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801c0a6:	d010      	beq.n	801c0ca <llhwc_phy_seq_ram_init+0x3e>
 801c0a8:	f240 4c60 	movw	ip, #1120	@ 0x460
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801c0b2:	bf00      	nop
 801c0b4:	f85c 0003 	ldr.w	r0, [ip, r3]
 801c0b8:	eb0e 0403 	add.w	r4, lr, r3
 801c0bc:	3a01      	subs	r2, #1
 801c0be:	f103 0304 	add.w	r3, r3, #4
 801c0c2:	5060      	str	r0, [r4, r1]
 801c0c4:	d1f6      	bne.n	801c0b4 <llhwc_phy_seq_ram_init+0x28>
 801c0c6:	f503 5180 	add.w	r1, r3, #4096	@ 0x1000
 801c0ca:	f24e 6240 	movw	r2, #58944	@ 0xe640
 801c0ce:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801c0d2:	6812      	ldr	r2, [r2, #0]
 801c0d4:	0892      	lsrs	r2, r2, #2
 801c0d6:	d00b      	beq.n	801c0f0 <llhwc_phy_seq_ram_init+0x64>
 801c0d8:	f240 5300 	movw	r3, #1280	@ 0x500
 801c0dc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c0e0:	f853 0b04 	ldr.w	r0, [r3], #4
 801c0e4:	3a01      	subs	r2, #1
 801c0e6:	f841 000e 	str.w	r0, [r1, lr]
 801c0ea:	f101 0104 	add.w	r1, r1, #4
 801c0ee:	d1f7      	bne.n	801c0e0 <llhwc_phy_seq_ram_init+0x54>
 801c0f0:	f24e 600c 	movw	r0, #58892	@ 0xe60c
 801c0f4:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c0f8:	6800      	ldr	r0, [r0, #0]
 801c0fa:	0882      	lsrs	r2, r0, #2
 801c0fc:	d00c      	beq.n	801c118 <llhwc_phy_seq_ram_init+0x8c>
 801c0fe:	f240 3370 	movw	r3, #880	@ 0x370
 801c102:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c106:	bf00      	nop
 801c108:	f853 0b04 	ldr.w	r0, [r3], #4
 801c10c:	3a01      	subs	r2, #1
 801c10e:	f841 000e 	str.w	r0, [r1, lr]
 801c112:	f101 0104 	add.w	r1, r1, #4
 801c116:	d1f7      	bne.n	801c108 <llhwc_phy_seq_ram_init+0x7c>
 801c118:	f24e 6018 	movw	r0, #58904	@ 0xe618
 801c11c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c120:	6800      	ldr	r0, [r0, #0]
 801c122:	0882      	lsrs	r2, r0, #2
 801c124:	d00c      	beq.n	801c140 <llhwc_phy_seq_ram_init+0xb4>
 801c126:	f240 3398 	movw	r3, #920	@ 0x398
 801c12a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c12e:	bf00      	nop
 801c130:	f853 0b04 	ldr.w	r0, [r3], #4
 801c134:	3a01      	subs	r2, #1
 801c136:	f841 000e 	str.w	r0, [r1, lr]
 801c13a:	f101 0104 	add.w	r1, r1, #4
 801c13e:	d1f7      	bne.n	801c130 <llhwc_phy_seq_ram_init+0xa4>
 801c140:	f24e 6010 	movw	r0, #58896	@ 0xe610
 801c144:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c148:	6800      	ldr	r0, [r0, #0]
 801c14a:	0882      	lsrs	r2, r0, #2
 801c14c:	d00c      	beq.n	801c168 <llhwc_phy_seq_ram_init+0xdc>
 801c14e:	f240 33c0 	movw	r3, #960	@ 0x3c0
 801c152:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c156:	bf00      	nop
 801c158:	f853 0b04 	ldr.w	r0, [r3], #4
 801c15c:	3a01      	subs	r2, #1
 801c15e:	f841 000e 	str.w	r0, [r1, lr]
 801c162:	f101 0104 	add.w	r1, r1, #4
 801c166:	d1f7      	bne.n	801c158 <llhwc_phy_seq_ram_init+0xcc>
 801c168:	f24e 602c 	movw	r0, #58924	@ 0xe62c
 801c16c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c170:	6800      	ldr	r0, [r0, #0]
 801c172:	0882      	lsrs	r2, r0, #2
 801c174:	d00c      	beq.n	801c190 <llhwc_phy_seq_ram_init+0x104>
 801c176:	f240 4380 	movw	r3, #1152	@ 0x480
 801c17a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c17e:	bf00      	nop
 801c180:	f853 0b04 	ldr.w	r0, [r3], #4
 801c184:	3a01      	subs	r2, #1
 801c186:	f841 000e 	str.w	r0, [r1, lr]
 801c18a:	f101 0104 	add.w	r1, r1, #4
 801c18e:	d1f7      	bne.n	801c180 <llhwc_phy_seq_ram_init+0xf4>
 801c190:	f24e 6030 	movw	r0, #58928	@ 0xe630
 801c194:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c198:	6800      	ldr	r0, [r0, #0]
 801c19a:	0882      	lsrs	r2, r0, #2
 801c19c:	d00c      	beq.n	801c1b8 <llhwc_phy_seq_ram_init+0x12c>
 801c19e:	f240 43a0 	movw	r3, #1184	@ 0x4a0
 801c1a2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c1a6:	bf00      	nop
 801c1a8:	f853 0b04 	ldr.w	r0, [r3], #4
 801c1ac:	3a01      	subs	r2, #1
 801c1ae:	f841 000e 	str.w	r0, [r1, lr]
 801c1b2:	f101 0104 	add.w	r1, r1, #4
 801c1b6:	d1f7      	bne.n	801c1a8 <llhwc_phy_seq_ram_init+0x11c>
 801c1b8:	f24e 6034 	movw	r0, #58932	@ 0xe634
 801c1bc:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c1c0:	6800      	ldr	r0, [r0, #0]
 801c1c2:	0882      	lsrs	r2, r0, #2
 801c1c4:	d00c      	beq.n	801c1e0 <llhwc_phy_seq_ram_init+0x154>
 801c1c6:	f240 43c0 	movw	r3, #1216	@ 0x4c0
 801c1ca:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c1ce:	bf00      	nop
 801c1d0:	f853 0b04 	ldr.w	r0, [r3], #4
 801c1d4:	3a01      	subs	r2, #1
 801c1d6:	f841 000e 	str.w	r0, [r1, lr]
 801c1da:	f101 0104 	add.w	r1, r1, #4
 801c1de:	d1f7      	bne.n	801c1d0 <llhwc_phy_seq_ram_init+0x144>
 801c1e0:	f24e 50c4 	movw	r0, #58820	@ 0xe5c4
 801c1e4:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c1e8:	6800      	ldr	r0, [r0, #0]
 801c1ea:	f247 1314 	movw	r3, #28948	@ 0x7114
 801c1ee:	f841 000e 	str.w	r0, [r1, lr]
 801c1f2:	1d0a      	adds	r2, r1, #4
 801c1f4:	2000      	movs	r0, #0
 801c1f6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c1fa:	f5b2 5f90 	cmp.w	r2, #4608	@ 0x1200
 801c1fe:	bf98      	it	ls
 801c200:	2001      	movls	r0, #1
 801c202:	2101      	movs	r1, #1
 801c204:	601a      	str	r2, [r3, #0]
 801c206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c20a:	f7ff bb88 	b.w	801b91e <bsp_assert>

0801c20e <llhwc_phy_get_prdc_clbr_cfg_time>:
 801c20e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c212:	b083      	sub	sp, #12
 801c214:	2800      	cmp	r0, #0
 801c216:	9202      	str	r2, [sp, #8]
 801c218:	460e      	mov	r6, r1
 801c21a:	4605      	mov	r5, r0
 801c21c:	bf18      	it	ne
 801c21e:	2001      	movne	r0, #1
 801c220:	2900      	cmp	r1, #0
 801c222:	bf18      	it	ne
 801c224:	2101      	movne	r1, #1
 801c226:	4008      	ands	r0, r1
 801c228:	2101      	movs	r1, #1
 801c22a:	f7ff fb78 	bl	801b91e <bsp_assert>
 801c22e:	f24e 50d0 	movw	r0, #58832	@ 0xe5d0
 801c232:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c236:	6801      	ldr	r1, [r0, #0]
 801c238:	f24e 20c8 	movw	r0, #58056	@ 0xe2c8
 801c23c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c240:	2202      	movs	r2, #2
 801c242:	f7ff fee5 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c246:	f24e 51e0 	movw	r1, #58848	@ 0xe5e0
 801c24a:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c24e:	6809      	ldr	r1, [r1, #0]
 801c250:	9001      	str	r0, [sp, #4]
 801c252:	f24e 20ec 	movw	r0, #58092	@ 0xe2ec
 801c256:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c25a:	2202      	movs	r2, #2
 801c25c:	f7ff fed8 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c260:	f24e 51e4 	movw	r1, #58852	@ 0xe5e4
 801c264:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c268:	6809      	ldr	r1, [r1, #0]
 801c26a:	9000      	str	r0, [sp, #0]
 801c26c:	f24e 30d4 	movw	r0, #58324	@ 0xe3d4
 801c270:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c274:	2202      	movs	r2, #2
 801c276:	f7ff fecb 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c27a:	f24e 51e8 	movw	r1, #58856	@ 0xe5e8
 801c27e:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c282:	6809      	ldr	r1, [r1, #0]
 801c284:	4683      	mov	fp, r0
 801c286:	f24e 40b0 	movw	r0, #58544	@ 0xe4b0
 801c28a:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c28e:	2202      	movs	r2, #2
 801c290:	f7ff febe 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c294:	f24e 51ec 	movw	r1, #58860	@ 0xe5ec
 801c298:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c29c:	6809      	ldr	r1, [r1, #0]
 801c29e:	4604      	mov	r4, r0
 801c2a0:	f24e 40ec 	movw	r0, #58604	@ 0xe4ec
 801c2a4:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c2a8:	2202      	movs	r2, #2
 801c2aa:	f7ff feb1 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c2ae:	f24e 51f0 	movw	r1, #58864	@ 0xe5f0
 801c2b2:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c2b6:	6809      	ldr	r1, [r1, #0]
 801c2b8:	4607      	mov	r7, r0
 801c2ba:	f240 10dc 	movw	r0, #476	@ 0x1dc
 801c2be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c2c2:	2202      	movs	r2, #2
 801c2c4:	f7ff fea4 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c2c8:	307d      	adds	r0, #125	@ 0x7d
 801c2ca:	f04f 087d 	mov.w	r8, #125	@ 0x7d
 801c2ce:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 801c2d2:	f644 59d3 	movw	r9, #19923	@ 0x4dd3
 801c2d6:	f2c1 0962 	movt	r9, #4194	@ 0x1062
 801c2da:	6030      	str	r0, [r6, #0]
 801c2dc:	fba1 0109 	umull	r0, r1, r1, r9
 801c2e0:	2004      	movs	r0, #4
 801c2e2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
 801c2e6:	f24e 51cc 	movw	r1, #58828	@ 0xe5cc
 801c2ea:	f247 1a1c 	movw	sl, #28956	@ 0x711c
 801c2ee:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c2f2:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801c2f6:	6809      	ldr	r1, [r1, #0]
 801c2f8:	f88a 000d 	strb.w	r0, [sl, #13]
 801c2fc:	f24e 20bc 	movw	r0, #58044	@ 0xe2bc
 801c300:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c304:	2202      	movs	r2, #2
 801c306:	f7ff fe83 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c30a:	f24e 6108 	movw	r1, #58888	@ 0xe608
 801c30e:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c312:	6809      	ldr	r1, [r1, #0]
 801c314:	4606      	mov	r6, r0
 801c316:	f240 3068 	movw	r0, #872	@ 0x368
 801c31a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c31e:	2202      	movs	r2, #2
 801c320:	f7ff fe76 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c324:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c328:	4411      	add	r1, r2
 801c32a:	4459      	add	r1, fp
 801c32c:	4421      	add	r1, r4
 801c32e:	4431      	add	r1, r6
 801c330:	4408      	add	r0, r1
 801c332:	19ca      	adds	r2, r1, r7
 801c334:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 801c338:	32d5      	adds	r2, #213	@ 0xd5
 801c33a:	602a      	str	r2, [r5, #0]
 801c33c:	fba1 1209 	umull	r1, r2, r1, r9
 801c340:	2103      	movs	r1, #3
 801c342:	eb01 01d2 	add.w	r1, r1, r2, lsr #3
 801c346:	9a02      	ldr	r2, [sp, #8]
 801c348:	f88a 100c 	strb.w	r1, [sl, #12]
 801c34c:	6010      	str	r0, [r2, #0]
 801c34e:	b003      	add	sp, #12
 801c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c354 <llhwc_phy_set_cfg_time>:
 801c354:	b510      	push	{r4, lr}
 801c356:	f7ff fb42 	bl	801b9de <os_disable_isr>
 801c35a:	f24e 600c 	movw	r0, #58892	@ 0xe60c
 801c35e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c362:	6801      	ldr	r1, [r0, #0]
 801c364:	f240 3070 	movw	r0, #880	@ 0x370
 801c368:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c36c:	2202      	movs	r2, #2
 801c36e:	f7ff fe4f 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c372:	f24e 612c 	movw	r1, #58924	@ 0xe62c
 801c376:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c37a:	6809      	ldr	r1, [r1, #0]
 801c37c:	4604      	mov	r4, r0
 801c37e:	f240 40e0 	movw	r0, #1248	@ 0x4e0
 801c382:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c386:	2202      	movs	r2, #2
 801c388:	f7ff fe42 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c38c:	f247 12a8 	movw	r2, #29096	@ 0x71a8
 801c390:	1c61      	adds	r1, r4, #1
 801c392:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801c396:	3004      	adds	r0, #4
 801c398:	e9c2 1000 	strd	r1, r0, [r2]
 801c39c:	f24e 6128 	movw	r1, #58920	@ 0xe628
 801c3a0:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c3a4:	6809      	ldr	r1, [r1, #0]
 801c3a6:	60d0      	str	r0, [r2, #12]
 801c3a8:	f240 4060 	movw	r0, #1120	@ 0x460
 801c3ac:	6094      	str	r4, [r2, #8]
 801c3ae:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c3b2:	2202      	movs	r2, #2
 801c3b4:	f7ff fe2c 	bl	801c010 <llhwc_phy_get_phy_seq_cfg_time>
 801c3b8:	f24e 6159 	movw	r1, #58969	@ 0xe659
 801c3bc:	f24e 625d 	movw	r2, #58973	@ 0xe65d
 801c3c0:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c3c4:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801c3c8:	4420      	add	r0, r4
 801c3ca:	7809      	ldrb	r1, [r1, #0]
 801c3cc:	7812      	ldrb	r2, [r2, #0]
 801c3ce:	3004      	adds	r0, #4
 801c3d0:	f247 13c4 	movw	r3, #29124	@ 0x71c4
 801c3d4:	4401      	add	r1, r0
 801c3d6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801c3da:	4410      	add	r0, r2
 801c3dc:	e9c3 1000 	strd	r1, r0, [r3]
 801c3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3e4:	f7ff bafd 	b.w	801b9e2 <os_enable_isr>

0801c3e8 <llhwc_phy_strt_stp>:
 801c3e8:	b570      	push	{r4, r5, r6, lr}
 801c3ea:	460c      	mov	r4, r1
 801c3ec:	4605      	mov	r5, r0
 801c3ee:	2802      	cmp	r0, #2
 801c3f0:	f04f 0000 	mov.w	r0, #0
 801c3f4:	f04f 0101 	mov.w	r1, #1
 801c3f8:	bf38      	it	cc
 801c3fa:	2001      	movcc	r0, #1
 801c3fc:	2600      	movs	r6, #0
 801c3fe:	f7ff fa8e 	bl	801b91e <bsp_assert>
 801c402:	b3ad      	cbz	r5, 801c470 <llhwc_phy_strt_stp+0x88>
 801c404:	f24e 6048 	movw	r0, #58952	@ 0xe648
 801c408:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c40c:	6800      	ldr	r0, [r0, #0]
 801c40e:	2200      	movs	r2, #0
 801c410:	0881      	lsrs	r1, r0, #2
 801c412:	f24e 50b8 	movw	r0, #58808	@ 0xe5b8
 801c416:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c41a:	2300      	movs	r3, #0
 801c41c:	2400      	movs	r4, #0
 801c41e:	f7ff fc01 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c422:	f247 3030 	movw	r0, #29488	@ 0x7330
 801c426:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c42a:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 801c42e:	b9a8      	cbnz	r0, 801c45c <llhwc_phy_strt_stp+0x74>
 801c430:	f247 101c 	movw	r0, #28956	@ 0x711c
 801c434:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c438:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801c43c:	2802      	cmp	r0, #2
 801c43e:	d00d      	beq.n	801c45c <llhwc_phy_strt_stp+0x74>
 801c440:	f24e 50cc 	movw	r0, #58828	@ 0xe5cc
 801c444:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c448:	6800      	ldr	r0, [r0, #0]
 801c44a:	2200      	movs	r2, #0
 801c44c:	0881      	lsrs	r1, r0, #2
 801c44e:	f24e 20bc 	movw	r0, #58044	@ 0xe2bc
 801c452:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c456:	2300      	movs	r3, #0
 801c458:	f7ff fbe4 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c45c:	f247 1108 	movw	r1, #28936	@ 0x7108
 801c460:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c464:	2000      	movs	r0, #0
 801c466:	600c      	str	r4, [r1, #0]
 801c468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c46c:	f001 bfa3 	b.w	801e3b6 <ll_tx_pwr_if_epa_enable>
 801c470:	2099      	movs	r0, #153	@ 0x99
 801c472:	f7ff fa9f 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801c476:	f247 100c 	movw	r0, #28940	@ 0x710c
 801c47a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c47e:	7006      	strb	r6, [r0, #0]
 801c480:	f247 100d 	movw	r0, #28941	@ 0x710d
 801c484:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c488:	7006      	strb	r6, [r0, #0]
 801c48a:	b91c      	cbnz	r4, 801c494 <llhwc_phy_strt_stp+0xac>
 801c48c:	2001      	movs	r0, #1
 801c48e:	2102      	movs	r1, #2
 801c490:	f003 fbf8 	bl	801fc84 <llhwc_cmn_control_aclk>
 801c494:	f247 3030 	movw	r0, #29488	@ 0x7330
 801c498:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c49c:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 801c4a0:	bbb8      	cbnz	r0, 801c512 <llhwc_phy_strt_stp+0x12a>
 801c4a2:	f247 101c 	movw	r0, #28956	@ 0x711c
 801c4a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c4aa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801c4ae:	2802      	cmp	r0, #2
 801c4b0:	d02f      	beq.n	801c512 <llhwc_phy_strt_stp+0x12a>
 801c4b2:	f24e 50d4 	movw	r0, #58836	@ 0xe5d4
 801c4b6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c4ba:	6801      	ldr	r1, [r0, #0]
 801c4bc:	f24e 20d4 	movw	r0, #58068	@ 0xe2d4
 801c4c0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c4c4:	4622      	mov	r2, r4
 801c4c6:	f7ff fb9e 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c4ca:	f24e 50e0 	movw	r0, #58848	@ 0xe5e0
 801c4ce:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c4d2:	6801      	ldr	r1, [r0, #0]
 801c4d4:	f24e 20ec 	movw	r0, #58092	@ 0xe2ec
 801c4d8:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c4dc:	4622      	mov	r2, r4
 801c4de:	f7ff fb92 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c4e2:	f24e 50e4 	movw	r0, #58852	@ 0xe5e4
 801c4e6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c4ea:	6801      	ldr	r1, [r0, #0]
 801c4ec:	f24e 30d4 	movw	r0, #58324	@ 0xe3d4
 801c4f0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c4f4:	4622      	mov	r2, r4
 801c4f6:	f7ff fb86 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c4fa:	f24e 50e8 	movw	r0, #58856	@ 0xe5e8
 801c4fe:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c502:	6801      	ldr	r1, [r0, #0]
 801c504:	f24e 40b0 	movw	r0, #58544	@ 0xe4b0
 801c508:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c50c:	4622      	mov	r2, r4
 801c50e:	f7ff fb7a 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c512:	f24e 50fc 	movw	r0, #58876	@ 0xe5fc
 801c516:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c51a:	6801      	ldr	r1, [r0, #0]
 801c51c:	f240 2020 	movw	r0, #544	@ 0x220
 801c520:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c524:	4622      	mov	r2, r4
 801c526:	f7ff fb6e 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c52a:	f24e 6000 	movw	r0, #58880	@ 0xe600
 801c52e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c532:	6801      	ldr	r1, [r0, #0]
 801c534:	f240 3008 	movw	r0, #776	@ 0x308
 801c538:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c53c:	4622      	mov	r2, r4
 801c53e:	f7ff fb62 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c542:	f24e 6004 	movw	r0, #58884	@ 0xe604
 801c546:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c54a:	6801      	ldr	r1, [r0, #0]
 801c54c:	f240 3064 	movw	r0, #868	@ 0x364
 801c550:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c554:	4622      	mov	r2, r4
 801c556:	f7ff fb56 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c55a:	f24e 6044 	movw	r0, #58948	@ 0xe644
 801c55e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c562:	6801      	ldr	r1, [r0, #0]
 801c564:	f24e 50a8 	movw	r0, #58792	@ 0xe5a8
 801c568:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c56c:	4622      	mov	r2, r4
 801c56e:	f7ff fb4a 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801c572:	f247 1108 	movw	r1, #28936	@ 0x7108
 801c576:	2001      	movs	r0, #1
 801c578:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c57c:	6008      	str	r0, [r1, #0]
 801c57e:	b91c      	cbnz	r4, 801c588 <llhwc_phy_strt_stp+0x1a0>
 801c580:	2000      	movs	r0, #0
 801c582:	2102      	movs	r1, #2
 801c584:	f003 fb7e 	bl	801fc84 <llhwc_cmn_control_aclk>
 801c588:	2099      	movs	r0, #153	@ 0x99
 801c58a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c58e:	f7ff ba11 	b.w	801b9b4 <bsp_debug_gpio_toggle>

0801c592 <llhwc_phy_reset>:
 801c592:	b580      	push	{r7, lr}
 801c594:	f240 4c24 	movw	ip, #1060	@ 0x424
 801c598:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 801c59c:	f24e 51d8 	movw	r1, #58840	@ 0xe5d8
 801c5a0:	f8dc 0000 	ldr.w	r0, [ip]
 801c5a4:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c5a8:	6809      	ldr	r1, [r1, #0]
 801c5aa:	f020 0e1c 	bic.w	lr, r0, #28
 801c5ae:	f24e 20e0 	movw	r0, #58080	@ 0xe2e0
 801c5b2:	0889      	lsrs	r1, r1, #2
 801c5b4:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	f8cc e000 	str.w	lr, [ip]
 801c5c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c5c4:	f7ff bb2e 	b.w	801bc24 <llhwc_phy_write_cfg_fifo_batch>

0801c5c8 <llhwc_phy_recover_from_ll_dp_slp>:
 801c5c8:	b580      	push	{r7, lr}
 801c5ca:	f24e 50dc 	movw	r0, #58844	@ 0xe5dc
 801c5ce:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c5d2:	6800      	ldr	r0, [r0, #0]
 801c5d4:	2200      	movs	r2, #0
 801c5d6:	0881      	lsrs	r1, r0, #2
 801c5d8:	f24e 20e8 	movw	r0, #58088	@ 0xe2e8
 801c5dc:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	f7ff fb1f 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c5e6:	f247 1014 	movw	r0, #28948	@ 0x7114
 801c5ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c5ee:	6800      	ldr	r0, [r0, #0]
 801c5f0:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 801c5f4:	f240 4224 	movw	r2, #1060	@ 0x424
 801c5f8:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 801c5fc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801c600:	6811      	ldr	r1, [r2, #0]
 801c602:	0980      	lsrs	r0, r0, #6
 801c604:	f360 118c 	bfi	r1, r0, #6, #7
 801c608:	6011      	str	r1, [r2, #0]
 801c60a:	f24e 6158 	movw	r1, #58968	@ 0xe658
 801c60e:	6910      	ldr	r0, [r2, #16]
 801c610:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c614:	7809      	ldrb	r1, [r1, #0]
 801c616:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
 801c61a:	4408      	add	r0, r1
 801c61c:	6110      	str	r0, [r2, #16]
 801c61e:	bd80      	pop	{r7, pc}

0801c620 <llhwc_phy_init_clbr>:
 801c620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c624:	b082      	sub	sp, #8
 801c626:	2001      	movs	r0, #1
 801c628:	f88d 0007 	strb.w	r0, [sp, #7]
 801c62c:	202d      	movs	r0, #45	@ 0x2d
 801c62e:	f7ff f9bd 	bl	801b9ac <bsp_debug_gpio_set>
 801c632:	2001      	movs	r0, #1
 801c634:	2102      	movs	r1, #2
 801c636:	f003 fb25 	bl	801fc84 <llhwc_cmn_control_aclk>
 801c63a:	f247 3030 	movw	r0, #29488	@ 0x7330
 801c63e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c642:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 801c646:	bbb8      	cbnz	r0, 801c6b8 <llhwc_phy_init_clbr+0x98>
 801c648:	f24e 50d0 	movw	r0, #58832	@ 0xe5d0
 801c64c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c650:	6800      	ldr	r0, [r0, #0]
 801c652:	2200      	movs	r2, #0
 801c654:	0881      	lsrs	r1, r0, #2
 801c656:	f24e 20c8 	movw	r0, #58056	@ 0xe2c8
 801c65a:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c65e:	2300      	movs	r3, #0
 801c660:	f7ff fae0 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c664:	f24e 50e0 	movw	r0, #58848	@ 0xe5e0
 801c668:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c66c:	6800      	ldr	r0, [r0, #0]
 801c66e:	2200      	movs	r2, #0
 801c670:	0881      	lsrs	r1, r0, #2
 801c672:	f24e 20ec 	movw	r0, #58092	@ 0xe2ec
 801c676:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c67a:	2300      	movs	r3, #0
 801c67c:	f7ff fad2 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c680:	f24e 50e4 	movw	r0, #58852	@ 0xe5e4
 801c684:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c688:	6800      	ldr	r0, [r0, #0]
 801c68a:	2200      	movs	r2, #0
 801c68c:	0881      	lsrs	r1, r0, #2
 801c68e:	f24e 30d4 	movw	r0, #58324	@ 0xe3d4
 801c692:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c696:	2300      	movs	r3, #0
 801c698:	f7ff fac4 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c69c:	f24e 50e8 	movw	r0, #58856	@ 0xe5e8
 801c6a0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c6a4:	6800      	ldr	r0, [r0, #0]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	0881      	lsrs	r1, r0, #2
 801c6aa:	f24e 40b0 	movw	r0, #58544	@ 0xe4b0
 801c6ae:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c6b2:	2300      	movs	r3, #0
 801c6b4:	f7ff fab6 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c6b8:	f10d 0107 	add.w	r1, sp, #7
 801c6bc:	2000      	movs	r0, #0
 801c6be:	f04f 0800 	mov.w	r8, #0
 801c6c2:	f000 f833 	bl	801c72c <llhwc_phy_run_pre_post_phy_clbr>
 801c6c6:	f24e 6054 	movw	r0, #58964	@ 0xe654
 801c6ca:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c6ce:	6807      	ldr	r7, [r0, #0]
 801c6d0:	b1df      	cbz	r7, 801c70a <llhwc_phy_init_clbr+0xea>
 801c6d2:	f24e 50f0 	movw	r0, #58864	@ 0xe5f0
 801c6d6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c6da:	6800      	ldr	r0, [r0, #0]
 801c6dc:	f240 15dc 	movw	r5, #476	@ 0x1dc
 801c6e0:	0884      	lsrs	r4, r0, #2
 801c6e2:	2600      	movs	r6, #0
 801c6e4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c6e8:	2030      	movs	r0, #48	@ 0x30
 801c6ea:	f7ff f95f 	bl	801b9ac <bsp_debug_gpio_set>
 801c6ee:	0c30      	lsrs	r0, r6, #16
 801c6f0:	70a8      	strb	r0, [r5, #2]
 801c6f2:	4628      	mov	r0, r5
 801c6f4:	4621      	mov	r1, r4
 801c6f6:	2200      	movs	r2, #0
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	f7ff fa93 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c6fe:	f000 f8f8 	bl	801c8f2 <llhwc_phy_read_updt_vco_pll_clbr>
 801c702:	3f01      	subs	r7, #1
 801c704:	f506 3680 	add.w	r6, r6, #65536	@ 0x10000
 801c708:	d1ee      	bne.n	801c6e8 <llhwc_phy_init_clbr+0xc8>
 801c70a:	f10d 0107 	add.w	r1, sp, #7
 801c70e:	2001      	movs	r0, #1
 801c710:	f000 f80c 	bl	801c72c <llhwc_phy_run_pre_post_phy_clbr>
 801c714:	f247 101c 	movw	r0, #28956	@ 0x711c
 801c718:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c71c:	f880 8038 	strb.w	r8, [r0, #56]	@ 0x38
 801c720:	202d      	movs	r0, #45	@ 0x2d
 801c722:	f7ff f945 	bl	801b9b0 <bsp_debug_gpio_clear>
 801c726:	b002      	add	sp, #8
 801c728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c72c <llhwc_phy_run_pre_post_phy_clbr>:
 801c72c:	b570      	push	{r4, r5, r6, lr}
 801c72e:	460c      	mov	r4, r1
 801c730:	f247 3130 	movw	r1, #29488	@ 0x7330
 801c734:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c738:	f247 151c 	movw	r5, #28956	@ 0x711c
 801c73c:	f891 1050 	ldrb.w	r1, [r1, #80]	@ 0x50
 801c740:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c744:	f895 2038 	ldrb.w	r2, [r5, #56]	@ 0x38
 801c748:	fab1 f181 	clz	r1, r1
 801c74c:	0949      	lsrs	r1, r1, #5
 801c74e:	3a02      	subs	r2, #2
 801c750:	bf18      	it	ne
 801c752:	2201      	movne	r2, #1
 801c754:	2801      	cmp	r0, #1
 801c756:	ea01 0002 	and.w	r0, r1, r2
 801c75a:	d126      	bne.n	801c7aa <llhwc_phy_run_pre_post_phy_clbr+0x7e>
 801c75c:	f24e 51f4 	movw	r1, #58868	@ 0xe5f4
 801c760:	2800      	cmp	r0, #0
 801c762:	f24e 50cc 	movw	r0, #58828	@ 0xe5cc
 801c766:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c76a:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c76e:	bf18      	it	ne
 801c770:	4601      	movne	r1, r0
 801c772:	f24e 22bc 	movw	r2, #58044	@ 0xe2bc
 801c776:	f24e 5094 	movw	r0, #58772	@ 0xe594
 801c77a:	6809      	ldr	r1, [r1, #0]
 801c77c:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801c780:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c784:	bf18      	it	ne
 801c786:	4610      	movne	r0, r2
 801c788:	0889      	lsrs	r1, r1, #2
 801c78a:	2200      	movs	r2, #0
 801c78c:	2300      	movs	r3, #0
 801c78e:	2400      	movs	r4, #0
 801c790:	f7ff fa48 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c794:	f247 1208 	movw	r2, #28936	@ 0x7108
 801c798:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801c79c:	2000      	movs	r0, #0
 801c79e:	2102      	movs	r1, #2
 801c7a0:	6014      	str	r4, [r2, #0]
 801c7a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7a6:	f003 ba6d 	b.w	801fc84 <llhwc_cmn_control_aclk>
 801c7aa:	b3b8      	cbz	r0, 801c81c <llhwc_phy_run_pre_post_phy_clbr+0xf0>
 801c7ac:	f24e 50d0 	movw	r0, #58832	@ 0xe5d0
 801c7b0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c7b4:	6800      	ldr	r0, [r0, #0]
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	0881      	lsrs	r1, r0, #2
 801c7ba:	f24e 20c8 	movw	r0, #58056	@ 0xe2c8
 801c7be:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	f7ff fa2e 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c7c8:	f24e 50e0 	movw	r0, #58848	@ 0xe5e0
 801c7cc:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c7d0:	6800      	ldr	r0, [r0, #0]
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	0881      	lsrs	r1, r0, #2
 801c7d6:	f24e 20ec 	movw	r0, #58092	@ 0xe2ec
 801c7da:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c7de:	2300      	movs	r3, #0
 801c7e0:	f7ff fa20 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c7e4:	f24e 50e4 	movw	r0, #58852	@ 0xe5e4
 801c7e8:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c7ec:	6800      	ldr	r0, [r0, #0]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	0881      	lsrs	r1, r0, #2
 801c7f2:	f24e 30d4 	movw	r0, #58324	@ 0xe3d4
 801c7f6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	f7ff fa12 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c800:	f24e 50e8 	movw	r0, #58856	@ 0xe5e8
 801c804:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c808:	6800      	ldr	r0, [r0, #0]
 801c80a:	2200      	movs	r2, #0
 801c80c:	0881      	lsrs	r1, r0, #2
 801c80e:	f24e 40b0 	movw	r0, #58544	@ 0xe4b0
 801c812:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c816:	2300      	movs	r3, #0
 801c818:	f7ff fa04 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c81c:	b1b4      	cbz	r4, 801c84c <llhwc_phy_run_pre_post_phy_clbr+0x120>
 801c81e:	7820      	ldrb	r0, [r4, #0]
 801c820:	2801      	cmp	r0, #1
 801c822:	d113      	bne.n	801c84c <llhwc_phy_run_pre_post_phy_clbr+0x120>
 801c824:	f24e 50ec 	movw	r0, #58860	@ 0xe5ec
 801c828:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c82c:	6800      	ldr	r0, [r0, #0]
 801c82e:	2200      	movs	r2, #0
 801c830:	0881      	lsrs	r1, r0, #2
 801c832:	f24e 40ec 	movw	r0, #58604	@ 0xe4ec
 801c836:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c83a:	2300      	movs	r3, #0
 801c83c:	2600      	movs	r6, #0
 801c83e:	f7ff f9f1 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c842:	2001      	movs	r0, #1
 801c844:	7026      	strb	r6, [r4, #0]
 801c846:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801c84a:	bd70      	pop	{r4, r5, r6, pc}
 801c84c:	f24e 6008 	movw	r0, #58888	@ 0xe608
 801c850:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c854:	6800      	ldr	r0, [r0, #0]
 801c856:	2200      	movs	r2, #0
 801c858:	0881      	lsrs	r1, r0, #2
 801c85a:	f240 3068 	movw	r0, #872	@ 0x368
 801c85e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c862:	2300      	movs	r3, #0
 801c864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c868:	f7ff b9dc 	b.w	801bc24 <llhwc_phy_write_cfg_fifo_batch>

0801c86c <llhwc_phy_strt_vco_pll_clbr>:
 801c86c:	b570      	push	{r4, r5, r6, lr}
 801c86e:	4606      	mov	r6, r0
 801c870:	2030      	movs	r0, #48	@ 0x30
 801c872:	4614      	mov	r4, r2
 801c874:	460d      	mov	r5, r1
 801c876:	f7ff f899 	bl	801b9ac <bsp_debug_gpio_set>
 801c87a:	f240 10dc 	movw	r0, #476	@ 0x1dc
 801c87e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c882:	2d02      	cmp	r5, #2
 801c884:	7086      	strb	r6, [r0, #2]
 801c886:	d126      	bne.n	801c8d6 <llhwc_phy_strt_vco_pll_clbr+0x6a>
 801c888:	f247 1510 	movw	r5, #28944	@ 0x7110
 801c88c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801c890:	6828      	ldr	r0, [r5, #0]
 801c892:	2101      	movs	r1, #1
 801c894:	fab0 f080 	clz	r0, r0
 801c898:	0940      	lsrs	r0, r0, #5
 801c89a:	f7ff f840 	bl	801b91e <bsp_assert>
 801c89e:	2001      	movs	r0, #1
 801c8a0:	2102      	movs	r1, #2
 801c8a2:	2602      	movs	r6, #2
 801c8a4:	f003 f9ee 	bl	801fc84 <llhwc_cmn_control_aclk>
 801c8a8:	f240 4048 	movw	r0, #1096	@ 0x448
 801c8ac:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801c8b0:	6801      	ldr	r1, [r0, #0]
 801c8b2:	4622      	mov	r2, r4
 801c8b4:	f021 0101 	bic.w	r1, r1, #1
 801c8b8:	6001      	str	r1, [r0, #0]
 801c8ba:	f24e 50f0 	movw	r0, #58864	@ 0xe5f0
 801c8be:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c8c2:	6801      	ldr	r1, [r0, #0]
 801c8c4:	f240 10dc 	movw	r0, #476	@ 0x1dc
 801c8c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c8cc:	602e      	str	r6, [r5, #0]
 801c8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8d2:	f7ff bb0f 	b.w	801bef4 <llhwc_phy_sequencer_ram_cpy_strt_seq>
 801c8d6:	f24e 50f0 	movw	r0, #58864	@ 0xe5f0
 801c8da:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c8de:	6801      	ldr	r1, [r0, #0]
 801c8e0:	f240 10dc 	movw	r0, #476	@ 0x1dc
 801c8e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c8e8:	462a      	mov	r2, r5
 801c8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c8ee:	f7ff b98a 	b.w	801bc06 <llhwc_phy_run_phy_sequence>

0801c8f2 <llhwc_phy_read_updt_vco_pll_clbr>:
 801c8f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8f6:	b081      	sub	sp, #4
 801c8f8:	f240 10dc 	movw	r0, #476	@ 0x1dc
 801c8fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c900:	7885      	ldrb	r5, [r0, #2]
 801c902:	f24e 50fc 	movw	r0, #58876	@ 0xe5fc
 801c906:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c90a:	6807      	ldr	r7, [r0, #0]
 801c90c:	f24e 6000 	movw	r0, #58880	@ 0xe600
 801c910:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c914:	6800      	ldr	r0, [r0, #0]
 801c916:	f24e 6104 	movw	r1, #58884	@ 0xe604
 801c91a:	0886      	lsrs	r6, r0, #2
 801c91c:	f24e 50f8 	movw	r0, #58872	@ 0xe5f8
 801c920:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801c924:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801c928:	f247 18cc 	movw	r8, #29132	@ 0x71cc
 801c92c:	6809      	ldr	r1, [r1, #0]
 801c92e:	6800      	ldr	r0, [r0, #0]
 801c930:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801c934:	eb08 0445 	add.w	r4, r8, r5, lsl #1
 801c938:	ea4f 0991 	mov.w	r9, r1, lsr #2
 801c93c:	0881      	lsrs	r1, r0, #2
 801c93e:	f240 2018 	movw	r0, #536	@ 0x218
 801c942:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c946:	4622      	mov	r2, r4
 801c948:	2302      	movs	r3, #2
 801c94a:	f7ff f96b 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801c94e:	f3c7 0787 	ubfx	r7, r7, #2, #8
 801c952:	1c68      	adds	r0, r5, #1
 801c954:	f240 2a20 	movw	sl, #544	@ 0x220
 801c958:	42b8      	cmp	r0, r7
 801c95a:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801c95e:	d202      	bcs.n	801c966 <llhwc_phy_read_updt_vco_pll_clbr+0x74>
 801c960:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801c964:	e01c      	b.n	801c9a0 <llhwc_phy_read_updt_vco_pll_clbr+0xae>
 801c966:	b2f1      	uxtb	r1, r6
 801c968:	4439      	add	r1, r7
 801c96a:	4288      	cmp	r0, r1
 801c96c:	d207      	bcs.n	801c97e <llhwc_phy_read_updt_vco_pll_clbr+0x8c>
 801c96e:	f240 3108 	movw	r1, #776	@ 0x308
 801c972:	1bc0      	subs	r0, r0, r7
 801c974:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c978:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801c97c:	e010      	b.n	801c9a0 <llhwc_phy_read_updt_vco_pll_clbr+0xae>
 801c97e:	eba0 0b01 	sub.w	fp, r0, r1
 801c982:	fa5f f189 	uxtb.w	r1, r9
 801c986:	2000      	movs	r0, #0
 801c988:	458b      	cmp	fp, r1
 801c98a:	bf38      	it	cc
 801c98c:	2001      	movcc	r0, #1
 801c98e:	2101      	movs	r1, #1
 801c990:	f7fe ffc5 	bl	801b91e <bsp_assert>
 801c994:	f240 3064 	movw	r0, #868	@ 0x364
 801c998:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c99c:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 801c9a0:	7862      	ldrb	r2, [r4, #1]
 801c9a2:	f105 0129 	add.w	r1, r5, #41	@ 0x29
 801c9a6:	42b9      	cmp	r1, r7
 801c9a8:	7082      	strb	r2, [r0, #2]
 801c9aa:	d202      	bcs.n	801c9b2 <llhwc_phy_read_updt_vco_pll_clbr+0xc0>
 801c9ac:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 801c9b0:	e01b      	b.n	801c9ea <llhwc_phy_read_updt_vco_pll_clbr+0xf8>
 801c9b2:	b2f0      	uxtb	r0, r6
 801c9b4:	4438      	add	r0, r7
 801c9b6:	4281      	cmp	r1, r0
 801c9b8:	d207      	bcs.n	801c9ca <llhwc_phy_read_updt_vco_pll_clbr+0xd8>
 801c9ba:	1bc8      	subs	r0, r1, r7
 801c9bc:	f240 3108 	movw	r1, #776	@ 0x308
 801c9c0:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801c9c4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801c9c8:	e00f      	b.n	801c9ea <llhwc_phy_read_updt_vco_pll_clbr+0xf8>
 801c9ca:	1a0c      	subs	r4, r1, r0
 801c9cc:	fa5f f189 	uxtb.w	r1, r9
 801c9d0:	2000      	movs	r0, #0
 801c9d2:	428c      	cmp	r4, r1
 801c9d4:	bf38      	it	cc
 801c9d6:	2001      	movcc	r0, #1
 801c9d8:	2101      	movs	r1, #1
 801c9da:	f7fe ffa0 	bl	801b91e <bsp_assert>
 801c9de:	f240 3064 	movw	r0, #868	@ 0x364
 801c9e2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801c9e6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801c9ea:	f818 1015 	ldrb.w	r1, [r8, r5, lsl #1]
 801c9ee:	2d28      	cmp	r5, #40	@ 0x28
 801c9f0:	7081      	strb	r1, [r0, #2]
 801c9f2:	f04f 0000 	mov.w	r0, #0
 801c9f6:	f04f 0101 	mov.w	r1, #1
 801c9fa:	bf38      	it	cc
 801c9fc:	2001      	movcc	r0, #1
 801c9fe:	2401      	movs	r4, #1
 801ca00:	f7fe ff8d 	bl	801b91e <bsp_assert>
 801ca04:	f247 101c 	movw	r0, #28956	@ 0x711c
 801ca08:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ca0c:	1941      	adds	r1, r0, r5
 801ca0e:	2030      	movs	r0, #48	@ 0x30
 801ca10:	738c      	strb	r4, [r1, #14]
 801ca12:	b001      	add	sp, #4
 801ca14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca18:	f7fe bfca 	b.w	801b9b0 <bsp_debug_gpio_clear>

0801ca1c <llhwc_phy_get_nxt_clbr_ch>:
 801ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca20:	f24e 6054 	movw	r0, #58964	@ 0xe654
 801ca24:	f247 151c 	movw	r5, #28956	@ 0x711c
 801ca28:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ca2c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801ca30:	6806      	ldr	r6, [r0, #0]
 801ca32:	f895 8036 	ldrb.w	r8, [r5, #54]	@ 0x36
 801ca36:	2000      	movs	r0, #0
 801ca38:	2101      	movs	r1, #1
 801ca3a:	2400      	movs	r4, #0
 801ca3c:	2eff      	cmp	r6, #255	@ 0xff
 801ca3e:	bf38      	it	cc
 801ca40:	2001      	movcc	r0, #1
 801ca42:	f7fe ff6c 	bl	801b91e <bsp_assert>
 801ca46:	68a9      	ldr	r1, [r5, #8]
 801ca48:	b121      	cbz	r1, 801ca54 <llhwc_phy_get_nxt_clbr_ch+0x38>
 801ca4a:	f105 000e 	add.w	r0, r5, #14
 801ca4e:	4788      	blx	r1
 801ca50:	28ff      	cmp	r0, #255	@ 0xff
 801ca52:	d12b      	bne.n	801caac <llhwc_phy_get_nxt_clbr_ch+0x90>
 801ca54:	b2f7      	uxtb	r7, r6
 801ca56:	2f29      	cmp	r7, #41	@ 0x29
 801ca58:	bf38      	it	cc
 801ca5a:	2401      	movcc	r4, #1
 801ca5c:	4620      	mov	r0, r4
 801ca5e:	2101      	movs	r1, #1
 801ca60:	f7fe ff5d 	bl	801b91e <bsp_assert>
 801ca64:	f895 0036 	ldrb.w	r0, [r5, #54]	@ 0x36
 801ca68:	42b8      	cmp	r0, r7
 801ca6a:	d20e      	bcs.n	801ca8a <llhwc_phy_get_nxt_clbr_ch+0x6e>
 801ca6c:	f100 010e 	add.w	r1, r0, #14
 801ca70:	1c42      	adds	r2, r0, #1
 801ca72:	f885 2036 	strb.w	r2, [r5, #54]	@ 0x36
 801ca76:	5c6b      	ldrb	r3, [r5, r1]
 801ca78:	b1c3      	cbz	r3, 801caac <llhwc_phy_get_nxt_clbr_ch+0x90>
 801ca7a:	f1a1 000d 	sub.w	r0, r1, #13
 801ca7e:	b2c0      	uxtb	r0, r0
 801ca80:	3101      	adds	r1, #1
 801ca82:	42b8      	cmp	r0, r7
 801ca84:	4610      	mov	r0, r2
 801ca86:	d1f3      	bne.n	801ca70 <llhwc_phy_get_nxt_clbr_ch+0x54>
 801ca88:	4630      	mov	r0, r6
 801ca8a:	b2c0      	uxtb	r0, r0
 801ca8c:	1bc0      	subs	r0, r0, r7
 801ca8e:	f04f 0101 	mov.w	r1, #1
 801ca92:	bf18      	it	ne
 801ca94:	2001      	movne	r0, #1
 801ca96:	f7fe ff42 	bl	801b91e <bsp_assert>
 801ca9a:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 801ca9e:	2101      	movs	r1, #1
 801caa0:	1bc0      	subs	r0, r0, r7
 801caa2:	bf18      	it	ne
 801caa4:	2001      	movne	r0, #1
 801caa6:	f7fe ff3a 	bl	801b91e <bsp_assert>
 801caaa:	4640      	mov	r0, r8
 801caac:	f895 1036 	ldrb.w	r1, [r5, #54]	@ 0x36
 801cab0:	b2f2      	uxtb	r2, r6
 801cab2:	b2c0      	uxtb	r0, r0
 801cab4:	4291      	cmp	r1, r2
 801cab6:	bf04      	itt	eq
 801cab8:	2100      	moveq	r1, #0
 801caba:	f885 1036 	strbeq.w	r1, [r5, #54]	@ 0x36
 801cabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cac2 <llhwc_phy_set_schdr_clbr_cbks>:
 801cac2:	b5b0      	push	{r4, r5, r7, lr}
 801cac4:	460c      	mov	r4, r1
 801cac6:	2101      	movs	r1, #1
 801cac8:	4605      	mov	r5, r0
 801caca:	2800      	cmp	r0, #0
 801cacc:	bf18      	it	ne
 801cace:	2001      	movne	r0, #1
 801cad0:	f7fe ff25 	bl	801b91e <bsp_assert>
 801cad4:	4620      	mov	r0, r4
 801cad6:	2101      	movs	r1, #1
 801cad8:	2c00      	cmp	r4, #0
 801cada:	bf18      	it	ne
 801cadc:	2001      	movne	r0, #1
 801cade:	f7fe ff1e 	bl	801b91e <bsp_assert>
 801cae2:	f247 101c 	movw	r0, #28956	@ 0x711c
 801cae6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801caea:	e9c0 5401 	strd	r5, r4, [r0, #4]
 801caee:	bdb0      	pop	{r4, r5, r7, pc}

0801caf0 <llhwc_phy_hndl_runtime_clbr>:
 801caf0:	b5b0      	push	{r4, r5, r7, lr}
 801caf2:	b082      	sub	sp, #8
 801caf4:	4604      	mov	r4, r0
 801caf6:	2000      	movs	r0, #0
 801caf8:	f247 151c 	movw	r5, #28956	@ 0x711c
 801cafc:	9001      	str	r0, [sp, #4]
 801cafe:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801cb02:	202e      	movs	r0, #46	@ 0x2e
 801cb04:	6029      	str	r1, [r5, #0]
 801cb06:	f7fe ff51 	bl	801b9ac <bsp_debug_gpio_set>
 801cb0a:	2001      	movs	r0, #1
 801cb0c:	2102      	movs	r1, #2
 801cb0e:	f003 f8b9 	bl	801fc84 <llhwc_cmn_control_aclk>
 801cb12:	a801      	add	r0, sp, #4
 801cb14:	f001 fcd9 	bl	801e4ca <llhwc_slptmr_get>
 801cb18:	9801      	ldr	r0, [sp, #4]
 801cb1a:	7b29      	ldrb	r1, [r5, #12]
 801cb1c:	682a      	ldr	r2, [r5, #0]
 801cb1e:	4408      	add	r0, r1
 801cb20:	4290      	cmp	r0, r2
 801cb22:	d210      	bcs.n	801cb46 <llhwc_phy_hndl_runtime_clbr+0x56>
 801cb24:	2000      	movs	r0, #0
 801cb26:	4621      	mov	r1, r4
 801cb28:	f7ff fe00 	bl	801c72c <llhwc_phy_run_pre_post_phy_clbr>
 801cb2c:	9801      	ldr	r0, [sp, #4]
 801cb2e:	7b69      	ldrb	r1, [r5, #13]
 801cb30:	682a      	ldr	r2, [r5, #0]
 801cb32:	4408      	add	r0, r1
 801cb34:	4290      	cmp	r0, r2
 801cb36:	d206      	bcs.n	801cb46 <llhwc_phy_hndl_runtime_clbr+0x56>
 801cb38:	f7ff ff70 	bl	801ca1c <llhwc_phy_get_nxt_clbr_ch>
 801cb3c:	2102      	movs	r1, #2
 801cb3e:	2201      	movs	r2, #1
 801cb40:	f7ff fe94 	bl	801c86c <llhwc_phy_strt_vco_pll_clbr>
 801cb44:	e002      	b.n	801cb4c <llhwc_phy_hndl_runtime_clbr+0x5c>
 801cb46:	2001      	movs	r0, #1
 801cb48:	f000 f805 	bl	801cb56 <llhwc_phy_clbr_cmpltd_release_grant>
 801cb4c:	202e      	movs	r0, #46	@ 0x2e
 801cb4e:	f7fe ff2f 	bl	801b9b0 <bsp_debug_gpio_clear>
 801cb52:	b002      	add	sp, #8
 801cb54:	bdb0      	pop	{r4, r5, r7, pc}

0801cb56 <llhwc_phy_clbr_cmpltd_release_grant>:
 801cb56:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb58:	b081      	sub	sp, #4
 801cb5a:	4604      	mov	r4, r0
 801cb5c:	f24e 6054 	movw	r0, #58964	@ 0xe654
 801cb60:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cb64:	6807      	ldr	r7, [r0, #0]
 801cb66:	2000      	movs	r0, #0
 801cb68:	2101      	movs	r1, #1
 801cb6a:	2600      	movs	r6, #0
 801cb6c:	2fff      	cmp	r7, #255	@ 0xff
 801cb6e:	bf38      	it	cc
 801cb70:	2001      	movcc	r0, #1
 801cb72:	f7fe fed4 	bl	801b91e <bsp_assert>
 801cb76:	f247 151c 	movw	r5, #28956	@ 0x711c
 801cb7a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801cb7e:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 801cb82:	b2f9      	uxtb	r1, r7
 801cb84:	4288      	cmp	r0, r1
 801cb86:	bf08      	it	eq
 801cb88:	f885 6038 	strbeq.w	r6, [r5, #56]	@ 0x38
 801cb8c:	2001      	movs	r0, #1
 801cb8e:	2100      	movs	r1, #0
 801cb90:	2601      	movs	r6, #1
 801cb92:	f7ff fdcb 	bl	801c72c <llhwc_phy_run_pre_post_phy_clbr>
 801cb96:	b124      	cbz	r4, 801cba2 <llhwc_phy_clbr_cmpltd_release_grant+0x4c>
 801cb98:	b001      	add	sp, #4
 801cb9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cb9e:	f7fe bf3c 	b.w	801ba1a <llhwc_phy_exec_clbr_done_clbk>
 801cba2:	f885 6039 	strb.w	r6, [r5, #57]	@ 0x39
 801cba6:	b001      	add	sp, #4
 801cba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cbaa <llhwc_phy_init>:
 801cbaa:	b510      	push	{r4, lr}
 801cbac:	b084      	sub	sp, #16
 801cbae:	2400      	movs	r4, #0
 801cbb0:	9401      	str	r4, [sp, #4]
 801cbb2:	f7ff fa6b 	bl	801c08c <llhwc_phy_seq_ram_init>
 801cbb6:	f24e 50d0 	movw	r0, #58832	@ 0xe5d0
 801cbba:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cbbe:	6800      	ldr	r0, [r0, #0]
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	0881      	lsrs	r1, r0, #2
 801cbc4:	f24e 20c8 	movw	r0, #58056	@ 0xe2c8
 801cbc8:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cbcc:	2300      	movs	r3, #0
 801cbce:	f7ff f829 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801cbd2:	f24e 6060 	movw	r0, #58976	@ 0xe660
 801cbd6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cbda:	7800      	ldrb	r0, [r0, #0]
 801cbdc:	2808      	cmp	r0, #8
 801cbde:	d110      	bne.n	801cc02 <llhwc_phy_init+0x58>
 801cbe0:	f64d 7013 	movw	r0, #57107	@ 0xdf13
 801cbe4:	9003      	str	r0, [sp, #12]
 801cbe6:	a803      	add	r0, sp, #12
 801cbe8:	f10d 020b 	add.w	r2, sp, #11
 801cbec:	2101      	movs	r1, #1
 801cbee:	2301      	movs	r3, #1
 801cbf0:	f88d 400b 	strb.w	r4, [sp, #11]
 801cbf4:	f7ff f816 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801cbf8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 801cbfc:	2808      	cmp	r0, #8
 801cbfe:	d11c      	bne.n	801cc3a <llhwc_phy_init+0x90>
 801cc00:	e01f      	b.n	801cc42 <llhwc_phy_init+0x98>
 801cc02:	f24e 50c8 	movw	r0, #58824	@ 0xe5c8
 801cc06:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cc0a:	6800      	ldr	r0, [r0, #0]
 801cc0c:	ac01      	add	r4, sp, #4
 801cc0e:	0881      	lsrs	r1, r0, #2
 801cc10:	f24e 20ac 	movw	r0, #58028	@ 0xe2ac
 801cc14:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cc18:	4622      	mov	r2, r4
 801cc1a:	2304      	movs	r3, #4
 801cc1c:	f7ff f802 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801cc20:	f24e 6164 	movw	r1, #58980	@ 0xe664
 801cc24:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801cc28:	4620      	mov	r0, r4
 801cc2a:	2204      	movs	r2, #4
 801cc2c:	f003 fe92 	bl	8020954 <ble_memcmp>
 801cc30:	b138      	cbz	r0, 801cc42 <llhwc_phy_init+0x98>
 801cc32:	2001      	movs	r0, #1
 801cc34:	2101      	movs	r1, #1
 801cc36:	f7fe fe72 	bl	801b91e <bsp_assert>
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	2101      	movs	r1, #1
 801cc3e:	f7fe fe6e 	bl	801b91e <bsp_assert>
 801cc42:	f247 101c 	movw	r0, #28956	@ 0x711c
 801cc46:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cc4a:	2100      	movs	r1, #0
 801cc4c:	223c      	movs	r2, #60	@ 0x3c
 801cc4e:	f003 fe49 	bl	80208e4 <ble_memset>
 801cc52:	f24e 50cc 	movw	r0, #58828	@ 0xe5cc
 801cc56:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cc5a:	6800      	ldr	r0, [r0, #0]
 801cc5c:	2200      	movs	r2, #0
 801cc5e:	0881      	lsrs	r1, r0, #2
 801cc60:	f24e 20bc 	movw	r0, #58044	@ 0xe2bc
 801cc64:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cc68:	2300      	movs	r3, #0
 801cc6a:	f7fe ffdb 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801cc6e:	2000      	movs	r0, #0
 801cc70:	f003 fb9b 	bl	80203aa <llhwc_cmn_evnt_notify>
 801cc74:	f7ff fcd4 	bl	801c620 <llhwc_phy_init_clbr>
 801cc78:	2001      	movs	r0, #1
 801cc7a:	f003 fb96 	bl	80203aa <llhwc_cmn_evnt_notify>
 801cc7e:	f247 1014 	movw	r0, #28948	@ 0x7114
 801cc82:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cc86:	6800      	ldr	r0, [r0, #0]
 801cc88:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 801cc8c:	f240 4224 	movw	r2, #1060	@ 0x424
 801cc90:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 801cc94:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801cc98:	6811      	ldr	r1, [r2, #0]
 801cc9a:	0980      	lsrs	r0, r0, #6
 801cc9c:	f360 118c 	bfi	r1, r0, #6, #7
 801cca0:	6011      	str	r1, [r2, #0]
 801cca2:	f24e 6158 	movw	r1, #58968	@ 0xe658
 801cca6:	6910      	ldr	r0, [r2, #16]
 801cca8:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801ccac:	7809      	ldrb	r1, [r1, #0]
 801ccae:	f020 00ff 	bic.w	r0, r0, #255	@ 0xff
 801ccb2:	4408      	add	r0, r1
 801ccb4:	6110      	str	r0, [r2, #16]
 801ccb6:	b004      	add	sp, #16
 801ccb8:	bd10      	pop	{r4, pc}

0801ccba <llhwc_phy_set_ch_config>:
 801ccba:	b570      	push	{r4, r5, r6, lr}
 801ccbc:	f247 1618 	movw	r6, #28952	@ 0x7118
 801ccc0:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801ccc4:	7831      	ldrb	r1, [r6, #0]
 801ccc6:	4614      	mov	r4, r2
 801ccc8:	2901      	cmp	r1, #1
 801ccca:	4605      	mov	r5, r0
 801cccc:	d119      	bne.n	801cd02 <llhwc_phy_set_ch_config+0x48>
 801ccce:	f24e 6028 	movw	r0, #58920	@ 0xe628
 801ccd2:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ccd6:	6801      	ldr	r1, [r0, #0]
 801ccd8:	f240 4060 	movw	r0, #1120	@ 0x460
 801ccdc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cce0:	4622      	mov	r2, r4
 801cce2:	f7fe ff90 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801cce6:	f24e 6048 	movw	r0, #58952	@ 0xe648
 801ccea:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ccee:	6801      	ldr	r1, [r0, #0]
 801ccf0:	f24e 50b8 	movw	r0, #58808	@ 0xe5b8
 801ccf4:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ccf8:	4622      	mov	r2, r4
 801ccfa:	f7fe ff84 	bl	801bc06 <llhwc_phy_run_phy_sequence>
 801ccfe:	2000      	movs	r0, #0
 801cd00:	7030      	strb	r0, [r6, #0]
 801cd02:	f247 1019 	movw	r0, #28953	@ 0x7119
 801cd06:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cd0a:	7800      	ldrb	r0, [r0, #0]
 801cd0c:	2801      	cmp	r0, #1
 801cd0e:	d003      	beq.n	801cd18 <llhwc_phy_set_ch_config+0x5e>
 801cd10:	2802      	cmp	r0, #2
 801cd12:	d104      	bne.n	801cd1e <llhwc_phy_set_ch_config+0x64>
 801cd14:	2001      	movs	r0, #1
 801cd16:	e000      	b.n	801cd1a <llhwc_phy_set_ch_config+0x60>
 801cd18:	2000      	movs	r0, #0
 801cd1a:	f000 f80f 	bl	801cd3c <llhwc_phy_stop_modulation_mode>
 801cd1e:	f24e 614c 	movw	r1, #58956	@ 0xe64c
 801cd22:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801cd26:	f240 5014 	movw	r0, #1300	@ 0x514
 801cd2a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cd2e:	6809      	ldr	r1, [r1, #0]
 801cd30:	4622      	mov	r2, r4
 801cd32:	7085      	strb	r5, [r0, #2]
 801cd34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd38:	f7fe bf65 	b.w	801bc06 <llhwc_phy_run_phy_sequence>

0801cd3c <llhwc_phy_stop_modulation_mode>:
 801cd3c:	b5b0      	push	{r4, r5, r7, lr}
 801cd3e:	4604      	mov	r4, r0
 801cd40:	f002 fc6f 	bl	801f622 <llhwc_wait_for_evnt_on_air>
 801cd44:	fab0 f080 	clz	r0, r0
 801cd48:	0940      	lsrs	r0, r0, #5
 801cd4a:	2101      	movs	r1, #1
 801cd4c:	f7fe fde7 	bl	801b91e <bsp_assert>
 801cd50:	2000      	movs	r0, #0
 801cd52:	2101      	movs	r1, #1
 801cd54:	2500      	movs	r5, #0
 801cd56:	2c02      	cmp	r4, #2
 801cd58:	bf38      	it	cc
 801cd5a:	2001      	movcc	r0, #1
 801cd5c:	f7fe fddf 	bl	801b91e <bsp_assert>
 801cd60:	f24e 6124 	movw	r1, #58916	@ 0xe624
 801cd64:	f24e 6020 	movw	r0, #58912	@ 0xe620
 801cd68:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801cd6c:	2c00      	cmp	r4, #0
 801cd6e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cd72:	bf08      	it	eq
 801cd74:	4601      	moveq	r1, r0
 801cd76:	f240 421c 	movw	r2, #1052	@ 0x41c
 801cd7a:	f240 403c 	movw	r0, #1084	@ 0x43c
 801cd7e:	6809      	ldr	r1, [r1, #0]
 801cd80:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801cd84:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cd88:	bf08      	it	eq
 801cd8a:	4610      	moveq	r0, r2
 801cd8c:	0889      	lsrs	r1, r1, #2
 801cd8e:	2200      	movs	r2, #0
 801cd90:	2300      	movs	r3, #0
 801cd92:	f7fe ff47 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801cd96:	2001      	movs	r0, #1
 801cd98:	2100      	movs	r1, #0
 801cd9a:	f7ff fb25 	bl	801c3e8 <llhwc_phy_strt_stp>
 801cd9e:	f247 1019 	movw	r0, #28953	@ 0x7119
 801cda2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cda6:	7005      	strb	r5, [r0, #0]
 801cda8:	bdb0      	pop	{r4, r5, r7, pc}

0801cdaa <llhwc_phy_set_ch_config_adv>:
 801cdaa:	b510      	push	{r4, lr}
 801cdac:	f247 1418 	movw	r4, #28952	@ 0x7118
 801cdb0:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801cdb4:	7820      	ldrb	r0, [r4, #0]
 801cdb6:	2801      	cmp	r0, #1
 801cdb8:	bf18      	it	ne
 801cdba:	bd10      	popne	{r4, pc}
 801cdbc:	f24e 6028 	movw	r0, #58920	@ 0xe628
 801cdc0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cdc4:	6801      	ldr	r1, [r0, #0]
 801cdc6:	f240 4060 	movw	r0, #1120	@ 0x460
 801cdca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cdce:	f7fe ffed 	bl	801bdac <llhwc_phy_trg_sequence_from_sequencer_ram>
 801cdd2:	f24e 6048 	movw	r0, #58952	@ 0xe648
 801cdd6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cdda:	6801      	ldr	r1, [r0, #0]
 801cddc:	f24e 50b8 	movw	r0, #58808	@ 0xe5b8
 801cde0:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cde4:	f7fe ffe2 	bl	801bdac <llhwc_phy_trg_sequence_from_sequencer_ram>
 801cde8:	2000      	movs	r0, #0
 801cdea:	7020      	strb	r0, [r4, #0]
 801cdec:	bd10      	pop	{r4, pc}

0801cdee <llhwc_phy_read_and_stop_ed>:
 801cdee:	b510      	push	{r4, lr}
 801cdf0:	b082      	sub	sp, #8
 801cdf2:	4604      	mov	r4, r0
 801cdf4:	9001      	str	r0, [sp, #4]
 801cdf6:	2001      	movs	r0, #1
 801cdf8:	2102      	movs	r1, #2
 801cdfa:	f002 ff43 	bl	801fc84 <llhwc_cmn_control_aclk>
 801cdfe:	b16c      	cbz	r4, 801ce1c <llhwc_phy_read_and_stop_ed+0x2e>
 801ce00:	f24e 603c 	movw	r0, #58940	@ 0xe63c
 801ce04:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ce08:	6800      	ldr	r0, [r0, #0]
 801ce0a:	aa01      	add	r2, sp, #4
 801ce0c:	0881      	lsrs	r1, r0, #2
 801ce0e:	f24e 50a4 	movw	r0, #58788	@ 0xe5a4
 801ce12:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ce16:	2302      	movs	r3, #2
 801ce18:	f7fe ff04 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801ce1c:	f24e 6038 	movw	r0, #58936	@ 0xe638
 801ce20:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ce24:	6800      	ldr	r0, [r0, #0]
 801ce26:	2200      	movs	r2, #0
 801ce28:	0881      	lsrs	r1, r0, #2
 801ce2a:	f24e 509c 	movw	r0, #58780	@ 0xe59c
 801ce2e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ce32:	2300      	movs	r3, #0
 801ce34:	f7fe fef6 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801ce38:	9801      	ldr	r0, [sp, #4]
 801ce3a:	bb10      	cbnz	r0, 801ce82 <llhwc_phy_read_and_stop_ed+0x94>
 801ce3c:	f247 3030 	movw	r0, #29488	@ 0x7330
 801ce40:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ce44:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 801ce48:	b9d8      	cbnz	r0, 801ce82 <llhwc_phy_read_and_stop_ed+0x94>
 801ce4a:	f247 101c 	movw	r0, #28956	@ 0x711c
 801ce4e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ce52:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 801ce56:	2802      	cmp	r0, #2
 801ce58:	d013      	beq.n	801ce82 <llhwc_phy_read_and_stop_ed+0x94>
 801ce5a:	f24e 50cc 	movw	r0, #58828	@ 0xe5cc
 801ce5e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ce62:	6800      	ldr	r0, [r0, #0]
 801ce64:	2200      	movs	r2, #0
 801ce66:	0881      	lsrs	r1, r0, #2
 801ce68:	f24e 20bc 	movw	r0, #58044	@ 0xe2bc
 801ce6c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ce70:	2300      	movs	r3, #0
 801ce72:	2400      	movs	r4, #0
 801ce74:	f7fe fed6 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801ce78:	f247 1008 	movw	r0, #28936	@ 0x7108
 801ce7c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ce80:	6004      	str	r4, [r0, #0]
 801ce82:	2000      	movs	r0, #0
 801ce84:	2102      	movs	r1, #2
 801ce86:	f002 fefd 	bl	801fc84 <llhwc_cmn_control_aclk>
 801ce8a:	b002      	add	sp, #8
 801ce8c:	bd10      	pop	{r4, pc}

0801ce8e <llhwc_phy_get_sequenc_ram_ofst>:
 801ce8e:	b580      	push	{r7, lr}
 801ce90:	f24e 6328 	movw	r3, #58920	@ 0xe628
 801ce94:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	f04f 0c00 	mov.w	ip, #0
 801ce9e:	089b      	lsrs	r3, r3, #2
 801cea0:	2901      	cmp	r1, #1
 801cea2:	f8c2 c008 	str.w	ip, [r2, #8]
 801cea6:	60d3      	str	r3, [r2, #12]
 801cea8:	bf18      	it	ne
 801ceaa:	bd80      	popne	{r7, pc}
 801ceac:	f24e 6140 	movw	r1, #58944	@ 0xe640
 801ceb0:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801ceb4:	6809      	ldr	r1, [r1, #0]
 801ceb6:	f24e 6e18 	movw	lr, #58904	@ 0xe618
 801ceba:	eb03 0c91 	add.w	ip, r3, r1, lsr #2
 801cebe:	b2c1      	uxtb	r1, r0
 801cec0:	2902      	cmp	r1, #2
 801cec2:	ea4f 2010 	mov.w	r0, r0, lsr #8
 801cec6:	f6c0 0e02 	movt	lr, #2050	@ 0x802
 801ceca:	d108      	bne.n	801cede <llhwc_phy_get_sequenc_ram_ofst+0x50>
 801cecc:	f24e 610c 	movw	r1, #58892	@ 0xe60c
 801ced0:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801ced4:	6809      	ldr	r1, [r1, #0]
 801ced6:	eb0c 0191 	add.w	r1, ip, r1, lsr #2
 801ceda:	468c      	mov	ip, r1
 801cedc:	e010      	b.n	801cf00 <llhwc_phy_get_sequenc_ram_ofst+0x72>
 801cede:	f24e 630c 	movw	r3, #58892	@ 0xe60c
 801cee2:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	3903      	subs	r1, #3
 801ceea:	2902      	cmp	r1, #2
 801ceec:	ea4f 0193 	mov.w	r1, r3, lsr #2
 801cef0:	d205      	bcs.n	801cefe <llhwc_phy_get_sequenc_ram_ofst+0x70>
 801cef2:	f8de 3000 	ldr.w	r3, [lr]
 801cef6:	4461      	add	r1, ip
 801cef8:	eb01 0c93 	add.w	ip, r1, r3, lsr #2
 801cefc:	e000      	b.n	801cf00 <llhwc_phy_get_sequenc_ram_ofst+0x72>
 801cefe:	4461      	add	r1, ip
 801cf00:	f8de 3000 	ldr.w	r3, [lr]
 801cf04:	b2c0      	uxtb	r0, r0
 801cf06:	eb01 0193 	add.w	r1, r1, r3, lsr #2
 801cf0a:	f24e 6310 	movw	r3, #58896	@ 0xe610
 801cf0e:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	2802      	cmp	r0, #2
 801cf16:	eb01 0393 	add.w	r3, r1, r3, lsr #2
 801cf1a:	f8c2 c000 	str.w	ip, [r2]
 801cf1e:	d107      	bne.n	801cf30 <llhwc_phy_get_sequenc_ram_ofst+0xa2>
 801cf20:	f24e 602c 	movw	r0, #58924	@ 0xe62c
 801cf24:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cf28:	6800      	ldr	r0, [r0, #0]
 801cf2a:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 801cf2e:	e010      	b.n	801cf52 <llhwc_phy_get_sequenc_ram_ofst+0xc4>
 801cf30:	3803      	subs	r0, #3
 801cf32:	2801      	cmp	r0, #1
 801cf34:	d80d      	bhi.n	801cf52 <llhwc_phy_get_sequenc_ram_ofst+0xc4>
 801cf36:	f24e 602c 	movw	r0, #58924	@ 0xe62c
 801cf3a:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cf3e:	6800      	ldr	r0, [r0, #0]
 801cf40:	f24e 6130 	movw	r1, #58928	@ 0xe630
 801cf44:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801cf48:	6809      	ldr	r1, [r1, #0]
 801cf4a:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 801cf4e:	eb00 0391 	add.w	r3, r0, r1, lsr #2
 801cf52:	6053      	str	r3, [r2, #4]
 801cf54:	bd80      	pop	{r7, pc}

0801cf56 <llhwc_phy_get_ltncy>:
 801cf56:	2901      	cmp	r1, #1
 801cf58:	bf18      	it	ne
 801cf5a:	4770      	bxne	lr
 801cf5c:	b580      	push	{r7, lr}
 801cf5e:	f3c0 0146 	ubfx	r1, r0, #1, #7
 801cf62:	f3c0 2e46 	ubfx	lr, r0, #9, #7
 801cf66:	f24e 6c5b 	movw	ip, #58971	@ 0xe65b
 801cf6a:	f24e 605d 	movw	r0, #58973	@ 0xe65d
 801cf6e:	f6c0 0c02 	movt	ip, #2050	@ 0x802
 801cf72:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cf76:	2901      	cmp	r1, #1
 801cf78:	bf08      	it	eq
 801cf7a:	4660      	moveq	r0, ip
 801cf7c:	f24e 6c59 	movw	ip, #58969	@ 0xe659
 801cf80:	f6c0 0c02 	movt	ip, #2050	@ 0x802
 801cf84:	2900      	cmp	r1, #0
 801cf86:	bf08      	it	eq
 801cf88:	4660      	moveq	r0, ip
 801cf8a:	f24e 6c5c 	movw	ip, #58972	@ 0xe65c
 801cf8e:	f24e 615e 	movw	r1, #58974	@ 0xe65e
 801cf92:	f6c0 0c02 	movt	ip, #2050	@ 0x802
 801cf96:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801cf9a:	f1be 0f01 	cmp.w	lr, #1
 801cf9e:	bf08      	it	eq
 801cfa0:	4661      	moveq	r1, ip
 801cfa2:	f24e 6c5a 	movw	ip, #58970	@ 0xe65a
 801cfa6:	f6c0 0c02 	movt	ip, #2050	@ 0x802
 801cfaa:	f1be 0f00 	cmp.w	lr, #0
 801cfae:	bf08      	it	eq
 801cfb0:	4661      	moveq	r1, ip
 801cfb2:	7800      	ldrb	r0, [r0, #0]
 801cfb4:	7809      	ldrb	r1, [r1, #0]
 801cfb6:	7010      	strb	r0, [r2, #0]
 801cfb8:	7019      	strb	r1, [r3, #0]
 801cfba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cfbe:	4770      	bx	lr

0801cfc0 <llhwc_phy_get_adv_chnls_switch_time>:
 801cfc0:	f24e 605f 	movw	r0, #58975	@ 0xe65f
 801cfc4:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801cfc8:	7800      	ldrb	r0, [r0, #0]
 801cfca:	4770      	bx	lr

0801cfcc <llhwc_phy_get_rssi_value>:
 801cfcc:	b5b0      	push	{r4, r5, r7, lr}
 801cfce:	f24e 51c4 	movw	r1, #58820	@ 0xe5c4
 801cfd2:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801cfd6:	788d      	ldrb	r5, [r1, #2]
 801cfd8:	4604      	mov	r4, r0
 801cfda:	1e69      	subs	r1, r5, #1
 801cfdc:	2000      	movs	r0, #0
 801cfde:	2902      	cmp	r1, #2
 801cfe0:	bf38      	it	cc
 801cfe2:	2001      	movcc	r0, #1
 801cfe4:	2101      	movs	r1, #1
 801cfe6:	f7fe fc9a 	bl	801b91e <bsp_assert>
 801cfea:	2d02      	cmp	r5, #2
 801cfec:	bf08      	it	eq
 801cfee:	08a4      	lsreq	r4, r4, #2
 801cff0:	b260      	sxtb	r0, r4
 801cff2:	bdb0      	pop	{r4, r5, r7, pc}

0801cff4 <llhwc_phy_get_phy_strt_state>:
 801cff4:	f247 1008 	movw	r0, #28936	@ 0x7108
 801cff8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801cffc:	6800      	ldr	r0, [r0, #0]
 801cffe:	4770      	bx	lr

0801d000 <llhwc_phy_set_tx_pwr>:
 801d000:	460a      	mov	r2, r1
 801d002:	f240 5118 	movw	r1, #1304	@ 0x518
 801d006:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d00a:	6809      	ldr	r1, [r1, #0]
 801d00c:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 801d010:	f24e 6150 	movw	r1, #58960	@ 0xe650
 801d014:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801d018:	f247 10b8 	movw	r0, #29112	@ 0x71b8
 801d01c:	6809      	ldr	r1, [r1, #0]
 801d01e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d022:	6003      	str	r3, [r0, #0]
 801d024:	f7fe bdef 	b.w	801bc06 <llhwc_phy_run_phy_sequence>

0801d028 <llhwc_phy_patch_tx_power_mode_phy_reg>:
 801d028:	b5b0      	push	{r4, r5, r7, lr}
 801d02a:	460c      	mov	r4, r1
 801d02c:	f24e 610c 	movw	r1, #58892	@ 0xe60c
 801d030:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801d034:	6809      	ldr	r1, [r1, #0]
 801d036:	4605      	mov	r5, r0
 801d038:	f240 3070 	movw	r0, #880	@ 0x370
 801d03c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d040:	462a      	mov	r2, r5
 801d042:	4623      	mov	r3, r4
 801d044:	f000 f82c 	bl	801d0a0 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 801d048:	f24e 6018 	movw	r0, #58904	@ 0xe618
 801d04c:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801d050:	6801      	ldr	r1, [r0, #0]
 801d052:	f240 3098 	movw	r0, #920	@ 0x398
 801d056:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d05a:	462a      	mov	r2, r5
 801d05c:	4623      	mov	r3, r4
 801d05e:	f000 f81f 	bl	801d0a0 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 801d062:	f24e 6010 	movw	r0, #58896	@ 0xe610
 801d066:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801d06a:	6801      	ldr	r1, [r0, #0]
 801d06c:	f240 30c0 	movw	r0, #960	@ 0x3c0
 801d070:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d074:	462a      	mov	r2, r5
 801d076:	4623      	mov	r3, r4
 801d078:	f000 f812 	bl	801d0a0 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 801d07c:	f24e 6014 	movw	r0, #58900	@ 0xe614
 801d080:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801d084:	6801      	ldr	r1, [r0, #0]
 801d086:	f240 30e8 	movw	r0, #1000	@ 0x3e8
 801d08a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d08e:	462a      	mov	r2, r5
 801d090:	4623      	mov	r3, r4
 801d092:	f000 f805 	bl	801d0a0 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>
 801d096:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d09a:	f7fe bff7 	b.w	801c08c <llhwc_phy_seq_ram_init>
	...

0801d0a0 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences>:
 801d0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0a4:	b081      	sub	sp, #4
 801d0a6:	460f      	mov	r7, r1
 801d0a8:	2101      	movs	r1, #1
 801d0aa:	4698      	mov	r8, r3
 801d0ac:	4691      	mov	r9, r2
 801d0ae:	4606      	mov	r6, r0
 801d0b0:	2800      	cmp	r0, #0
 801d0b2:	bf18      	it	ne
 801d0b4:	2001      	movne	r0, #1
 801d0b6:	f7fe fc32 	bl	801b91e <bsp_assert>
 801d0ba:	b35f      	cbz	r7, 801d114 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x74>
 801d0bc:	08b8      	lsrs	r0, r7, #2
 801d0be:	d029      	beq.n	801d114 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x74>
 801d0c0:	2500      	movs	r5, #0
 801d0c2:	f246 3102 	movw	r1, #25346	@ 0x6302
 801d0c6:	f64e 2c02 	movw	ip, #59906	@ 0xea02
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	f04f 0e00 	mov.w	lr, #0
 801d0d0:	2400      	movs	r4, #0
 801d0d2:	bf00      	nop
 801d0d4:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 801d0d8:	ea02 0701 	and.w	r7, r2, r1
 801d0dc:	428f      	cmp	r7, r1
 801d0de:	d103      	bne.n	801d0e8 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x48>
 801d0e0:	2401      	movs	r4, #1
 801d0e2:	464f      	mov	r7, r9
 801d0e4:	e007      	b.n	801d0f6 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x56>
 801d0e6:	bf00      	nop
 801d0e8:	ea02 070c 	and.w	r7, r2, ip
 801d0ec:	4567      	cmp	r7, ip
 801d0ee:	d108      	bne.n	801d102 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x62>
 801d0f0:	f04f 0e01 	mov.w	lr, #1
 801d0f4:	4647      	mov	r7, r8
 801d0f6:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 801d0fa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 801d0fe:	f846 2025 	str.w	r2, [r6, r5, lsl #2]
 801d102:	2c01      	cmp	r4, #1
 801d104:	bf08      	it	eq
 801d106:	f1be 0f01 	cmpeq.w	lr, #1
 801d10a:	d003      	beq.n	801d114 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x74>
 801d10c:	3301      	adds	r3, #1
 801d10e:	b2dd      	uxtb	r5, r3
 801d110:	42a8      	cmp	r0, r5
 801d112:	d8df      	bhi.n	801d0d4 <llhwc_phy_patch_tx_power_mode_in_pre_tx_sequences+0x34>
 801d114:	b001      	add	sp, #4
 801d116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d11a <llhwc_phy_reset_freq_correction_reg>:
 801d11a:	f24e 601c 	movw	r0, #58908	@ 0xe61c
 801d11e:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801d122:	6800      	ldr	r0, [r0, #0]
 801d124:	2200      	movs	r2, #0
 801d126:	0881      	lsrs	r1, r0, #2
 801d128:	f240 4010 	movw	r0, #1040	@ 0x410
 801d12c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d130:	2300      	movs	r3, #0
 801d132:	f7fe bd77 	b.w	801bc24 <llhwc_phy_write_cfg_fifo_batch>

0801d136 <llhwc_phy_read_rssi>:
 801d136:	b5b0      	push	{r4, r5, r7, lr}
 801d138:	b082      	sub	sp, #8
 801d13a:	f24e 51c4 	movw	r1, #58820	@ 0xe5c4
 801d13e:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801d142:	788c      	ldrb	r4, [r1, #2]
 801d144:	2000      	movs	r0, #0
 801d146:	1e65      	subs	r5, r4, #1
 801d148:	2101      	movs	r1, #1
 801d14a:	f8ad 0006 	strh.w	r0, [sp, #6]
 801d14e:	f88d 0005 	strb.w	r0, [sp, #5]
 801d152:	2d02      	cmp	r5, #2
 801d154:	bf38      	it	cc
 801d156:	2001      	movcc	r0, #1
 801d158:	f7fe fbe1 	bl	801b91e <bsp_assert>
 801d15c:	f24e 50c4 	movw	r0, #58820	@ 0xe5c4
 801d160:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801d164:	b16d      	cbz	r5, 801d182 <llhwc_phy_read_rssi+0x4c>
 801d166:	f10d 0206 	add.w	r2, sp, #6
 801d16a:	2101      	movs	r1, #1
 801d16c:	2302      	movs	r3, #2
 801d16e:	f7fe fd59 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801d172:	2c02      	cmp	r4, #2
 801d174:	d10e      	bne.n	801d194 <llhwc_phy_read_rssi+0x5e>
 801d176:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d17a:	0181      	lsls	r1, r0, #6
 801d17c:	ea41 2090 	orr.w	r0, r1, r0, lsr #10
 801d180:	e009      	b.n	801d196 <llhwc_phy_read_rssi+0x60>
 801d182:	f10d 0205 	add.w	r2, sp, #5
 801d186:	2101      	movs	r1, #1
 801d188:	2301      	movs	r3, #1
 801d18a:	f7fe fd4b 	bl	801bc24 <llhwc_phy_write_cfg_fifo_batch>
 801d18e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 801d192:	e000      	b.n	801d196 <llhwc_phy_read_rssi+0x60>
 801d194:	2000      	movs	r0, #0
 801d196:	b240      	sxtb	r0, r0
 801d198:	b002      	add	sp, #8
 801d19a:	bdb0      	pop	{r4, r5, r7, pc}

0801d19c <llhwc_phy_deactivate_scan_req>:
 801d19c:	b570      	push	{r4, r5, r6, lr}
 801d19e:	f24e 610c 	movw	r1, #58892	@ 0xe60c
 801d1a2:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801d1a6:	6809      	ldr	r1, [r1, #0]
 801d1a8:	2803      	cmp	r0, #3
 801d1aa:	d013      	beq.n	801d1d4 <llhwc_phy_deactivate_scan_req+0x38>
 801d1ac:	2802      	cmp	r0, #2
 801d1ae:	d028      	beq.n	801d202 <llhwc_phy_deactivate_scan_req+0x66>
 801d1b0:	2801      	cmp	r0, #1
 801d1b2:	d175      	bne.n	801d2a0 <llhwc_phy_deactivate_scan_req+0x104>
 801d1b4:	f24e 6228 	movw	r2, #58920	@ 0xe628
 801d1b8:	f24e 6340 	movw	r3, #58944	@ 0xe640
 801d1bc:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d1c0:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801d1c4:	6812      	ldr	r2, [r2, #0]
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	189e      	adds	r6, r3, r2
 801d1ca:	f240 3270 	movw	r2, #880	@ 0x370
 801d1ce:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801d1d2:	e026      	b.n	801d222 <llhwc_phy_deactivate_scan_req+0x86>
 801d1d4:	f24e 6228 	movw	r2, #58920	@ 0xe628
 801d1d8:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d1dc:	f24e 6340 	movw	r3, #58944	@ 0xe640
 801d1e0:	6812      	ldr	r2, [r2, #0]
 801d1e2:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801d1e6:	f24e 6518 	movw	r5, #58904	@ 0xe618
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	f6c0 0502 	movt	r5, #2050	@ 0x802
 801d1f0:	682d      	ldr	r5, [r5, #0]
 801d1f2:	440a      	add	r2, r1
 801d1f4:	441a      	add	r2, r3
 801d1f6:	1956      	adds	r6, r2, r5
 801d1f8:	f240 32c0 	movw	r2, #960	@ 0x3c0
 801d1fc:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801d200:	e00f      	b.n	801d222 <llhwc_phy_deactivate_scan_req+0x86>
 801d202:	f24e 6228 	movw	r2, #58920	@ 0xe628
 801d206:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d20a:	f24e 6340 	movw	r3, #58944	@ 0xe640
 801d20e:	6812      	ldr	r2, [r2, #0]
 801d210:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801d214:	681b      	ldr	r3, [r3, #0]
 801d216:	440a      	add	r2, r1
 801d218:	18d6      	adds	r6, r2, r3
 801d21a:	f240 3298 	movw	r2, #920	@ 0x398
 801d21e:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801d222:	f247 13bc 	movw	r3, #29116	@ 0x71bc
 801d226:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801d22a:	7018      	strb	r0, [r3, #0]
 801d22c:	f24e 6068 	movw	r0, #58984	@ 0xe668
 801d230:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801d234:	6803      	ldr	r3, [r0, #0]
 801d236:	0889      	lsrs	r1, r1, #2
 801d238:	2400      	movs	r4, #0
 801d23a:	2000      	movs	r0, #0
 801d23c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801d240:	f024 0510 	bic.w	r5, r4, #16
 801d244:	429d      	cmp	r5, r3
 801d246:	d009      	beq.n	801d25c <llhwc_phy_deactivate_scan_req+0xc0>
 801d248:	3001      	adds	r0, #1
 801d24a:	b2c4      	uxtb	r4, r0
 801d24c:	42a1      	cmp	r1, r4
 801d24e:	d2f5      	bcs.n	801d23c <llhwc_phy_deactivate_scan_req+0xa0>
 801d250:	f240 10d9 	movw	r0, #473	@ 0x1d9
 801d254:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d258:	7800      	ldrb	r0, [r0, #0]
 801d25a:	e009      	b.n	801d270 <llhwc_phy_deactivate_scan_req+0xd4>
 801d25c:	f247 11c0 	movw	r1, #29120	@ 0x71c0
 801d260:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d264:	600c      	str	r4, [r1, #0]
 801d266:	f240 11d9 	movw	r1, #473	@ 0x1d9
 801d26a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d26e:	7008      	strb	r0, [r1, #0]
 801d270:	b2c0      	uxtb	r0, r0
 801d272:	38ff      	subs	r0, #255	@ 0xff
 801d274:	f04f 0101 	mov.w	r1, #1
 801d278:	bf18      	it	ne
 801d27a:	2001      	movne	r0, #1
 801d27c:	f7fe fb4f 	bl	801b91e <bsp_assert>
 801d280:	f240 10d9 	movw	r0, #473	@ 0x1d9
 801d284:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d288:	7800      	ldrb	r0, [r0, #0]
 801d28a:	28ff      	cmp	r0, #255	@ 0xff
 801d28c:	bf08      	it	eq
 801d28e:	bd70      	popeq	{r4, r5, r6, pc}
 801d290:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801d294:	f241 0100 	movw	r1, #4096	@ 0x1000
 801d298:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801d29c:	22ae      	movs	r2, #174	@ 0xae
 801d29e:	5042      	str	r2, [r0, r1]
 801d2a0:	bd70      	pop	{r4, r5, r6, pc}

0801d2a2 <llhwc_phy_activate_scan_req>:
 801d2a2:	f240 10d9 	movw	r0, #473	@ 0x1d9
 801d2a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d2aa:	7801      	ldrb	r1, [r0, #0]
 801d2ac:	29ff      	cmp	r1, #255	@ 0xff
 801d2ae:	bf08      	it	eq
 801d2b0:	4770      	bxeq	lr
 801d2b2:	f24e 6228 	movw	r2, #58920	@ 0xe628
 801d2b6:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d2ba:	6812      	ldr	r2, [r2, #0]
 801d2bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 801d2c0:	f24e 6240 	movw	r2, #58944	@ 0xe640
 801d2c4:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d2c8:	6813      	ldr	r3, [r2, #0]
 801d2ca:	f247 12bc 	movw	r2, #29116	@ 0x71bc
 801d2ce:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801d2d2:	7812      	ldrb	r2, [r2, #0]
 801d2d4:	4419      	add	r1, r3
 801d2d6:	2a03      	cmp	r2, #3
 801d2d8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801d2dc:	d008      	beq.n	801d2f0 <llhwc_phy_activate_scan_req+0x4e>
 801d2de:	2a02      	cmp	r2, #2
 801d2e0:	d112      	bne.n	801d308 <llhwc_phy_activate_scan_req+0x66>
 801d2e2:	f24e 620c 	movw	r2, #58892	@ 0xe60c
 801d2e6:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d2ea:	6812      	ldr	r2, [r2, #0]
 801d2ec:	4411      	add	r1, r2
 801d2ee:	e00b      	b.n	801d308 <llhwc_phy_activate_scan_req+0x66>
 801d2f0:	f24e 620c 	movw	r2, #58892	@ 0xe60c
 801d2f4:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801d2f8:	f24e 6318 	movw	r3, #58904	@ 0xe618
 801d2fc:	6812      	ldr	r2, [r2, #0]
 801d2fe:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	4411      	add	r1, r2
 801d306:	4419      	add	r1, r3
 801d308:	f247 12c0 	movw	r2, #29120	@ 0x71c0
 801d30c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801d310:	6812      	ldr	r2, [r2, #0]
 801d312:	2300      	movs	r3, #0
 801d314:	f6c4 0302 	movt	r3, #18434	@ 0x4802
 801d318:	50ca      	str	r2, [r1, r3]
 801d31a:	21ff      	movs	r1, #255	@ 0xff
 801d31c:	7001      	strb	r1, [r0, #0]
 801d31e:	4770      	bx	lr

0801d320 <ble_time_comp>:
 801d320:	7982      	ldrb	r2, [r0, #6]
 801d322:	798b      	ldrb	r3, [r1, #6]
 801d324:	429a      	cmp	r2, r3
 801d326:	d80d      	bhi.n	801d344 <ble_time_comp+0x24>
 801d328:	4293      	cmp	r3, r2
 801d32a:	d804      	bhi.n	801d336 <ble_time_comp+0x16>
 801d32c:	6802      	ldr	r2, [r0, #0]
 801d32e:	680b      	ldr	r3, [r1, #0]
 801d330:	429a      	cmp	r2, r3
 801d332:	d807      	bhi.n	801d344 <ble_time_comp+0x24>
 801d334:	d202      	bcs.n	801d33c <ble_time_comp+0x1c>
 801d336:	f04f 30ff 	mov.w	r0, #4294967295
 801d33a:	4770      	bx	lr
 801d33c:	8880      	ldrh	r0, [r0, #4]
 801d33e:	8889      	ldrh	r1, [r1, #4]
 801d340:	4288      	cmp	r0, r1
 801d342:	d901      	bls.n	801d348 <ble_time_comp+0x28>
 801d344:	2001      	movs	r0, #1
 801d346:	4770      	bx	lr
 801d348:	f04f 0000 	mov.w	r0, #0
 801d34c:	bf38      	it	cc
 801d34e:	f04f 30ff 	movcc.w	r0, #4294967295
 801d352:	4770      	bx	lr

0801d354 <ble_time_diff_us>:
 801d354:	b5b0      	push	{r4, r5, r7, lr}
 801d356:	460c      	mov	r4, r1
 801d358:	4605      	mov	r5, r0
 801d35a:	f7ff ffe1 	bl	801d320 <ble_time_comp>
 801d35e:	2800      	cmp	r0, #0
 801d360:	bf47      	ittee	mi
 801d362:	4620      	movmi	r0, r4
 801d364:	4629      	movmi	r1, r5
 801d366:	4628      	movpl	r0, r5
 801d368:	4621      	movpl	r1, r4
 801d36a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d36e:	f000 b800 	b.w	801d372 <ble_time_ordered_diff_us_overflow>

0801d372 <ble_time_ordered_diff_us_overflow>:
 801d372:	b570      	push	{r4, r5, r6, lr}
 801d374:	4604      	mov	r4, r0
 801d376:	7980      	ldrb	r0, [r0, #6]
 801d378:	460d      	mov	r5, r1
 801d37a:	2801      	cmp	r0, #1
 801d37c:	d004      	beq.n	801d388 <ble_time_ordered_diff_us_overflow+0x16>
 801d37e:	b908      	cbnz	r0, 801d384 <ble_time_ordered_diff_us_overflow+0x12>
 801d380:	79a8      	ldrb	r0, [r5, #6]
 801d382:	b120      	cbz	r0, 801d38e <ble_time_ordered_diff_us_overflow+0x1c>
 801d384:	2000      	movs	r0, #0
 801d386:	e015      	b.n	801d3b4 <ble_time_ordered_diff_us_overflow+0x42>
 801d388:	79a8      	ldrb	r0, [r5, #6]
 801d38a:	2801      	cmp	r0, #1
 801d38c:	d10f      	bne.n	801d3ae <ble_time_ordered_diff_us_overflow+0x3c>
 801d38e:	6821      	ldr	r1, [r4, #0]
 801d390:	682a      	ldr	r2, [r5, #0]
 801d392:	88a0      	ldrh	r0, [r4, #4]
 801d394:	88ab      	ldrh	r3, [r5, #4]
 801d396:	1a89      	subs	r1, r1, r2
 801d398:	4298      	cmp	r0, r3
 801d39a:	bf3c      	itt	cc
 801d39c:	301f      	addcc	r0, #31
 801d39e:	3901      	subcc	r1, #1
 801d3a0:	1ac0      	subs	r0, r0, r3
 801d3a2:	ebc1 1241 	rsb	r2, r1, r1, lsl #5
 801d3a6:	eb00 0091 	add.w	r0, r0, r1, lsr #2
 801d3aa:	4410      	add	r0, r2
 801d3ac:	bd70      	pop	{r4, r5, r6, pc}
 801d3ae:	fab0 f080 	clz	r0, r0
 801d3b2:	0940      	lsrs	r0, r0, #5
 801d3b4:	682e      	ldr	r6, [r5, #0]
 801d3b6:	2101      	movs	r1, #1
 801d3b8:	f7fe fab1 	bl	801b91e <bsp_assert>
 801d3bc:	6820      	ldr	r0, [r4, #0]
 801d3be:	88a1      	ldrh	r1, [r4, #4]
 801d3c0:	88aa      	ldrh	r2, [r5, #4]
 801d3c2:	1b80      	subs	r0, r0, r6
 801d3c4:	4291      	cmp	r1, r2
 801d3c6:	bf3c      	itt	cc
 801d3c8:	311f      	addcc	r1, #31
 801d3ca:	3801      	subcc	r0, #1
 801d3cc:	1a89      	subs	r1, r1, r2
 801d3ce:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 801d3d2:	eb01 0090 	add.w	r0, r1, r0, lsr #2
 801d3d6:	4418      	add	r0, r3
 801d3d8:	bd70      	pop	{r4, r5, r6, pc}

0801d3da <ble_time_ordered_diff_us>:
 801d3da:	798a      	ldrb	r2, [r1, #6]
 801d3dc:	2a01      	cmp	r2, #1
 801d3de:	d101      	bne.n	801d3e4 <ble_time_ordered_diff_us+0xa>
 801d3e0:	7982      	ldrb	r2, [r0, #6]
 801d3e2:	b1b2      	cbz	r2, 801d412 <ble_time_ordered_diff_us+0x38>
 801d3e4:	680a      	ldr	r2, [r1, #0]
 801d3e6:	f64b 0300 	movw	r3, #47104	@ 0xb800
 801d3ea:	f6cf 6317 	movt	r3, #65047	@ 0xfe17
 801d3ee:	429a      	cmp	r2, r3
 801d3f0:	bf38      	it	cc
 801d3f2:	f7ff bfbe 	bcc.w	801d372 <ble_time_ordered_diff_us_overflow>
 801d3f6:	f8d0 c000 	ldr.w	ip, [r0]
 801d3fa:	f244 73ff 	movw	r3, #18431	@ 0x47ff
 801d3fe:	f2c0 13e8 	movt	r3, #488	@ 0x1e8
 801d402:	459c      	cmp	ip, r3
 801d404:	bf98      	it	ls
 801d406:	4594      	cmpls	ip, r2
 801d408:	bf3c      	itt	cc
 801d40a:	2201      	movcc	r2, #1
 801d40c:	7182      	strbcc	r2, [r0, #6]
 801d40e:	f7ff bfb0 	b.w	801d372 <ble_time_ordered_diff_us_overflow>
 801d412:	2200      	movs	r2, #0
 801d414:	718a      	strb	r2, [r1, #6]
 801d416:	f7ff bfac 	b.w	801d372 <ble_time_ordered_diff_us_overflow>

0801d41a <ble_time_set>:
 801d41a:	680a      	ldr	r2, [r1, #0]
 801d41c:	6002      	str	r2, [r0, #0]
 801d41e:	888a      	ldrh	r2, [r1, #4]
 801d420:	7989      	ldrb	r1, [r1, #6]
 801d422:	8082      	strh	r2, [r0, #4]
 801d424:	7181      	strb	r1, [r0, #6]
 801d426:	4770      	bx	lr

0801d428 <ble_time_add>:
 801d428:	b5b0      	push	{r4, r5, r7, lr}
 801d42a:	460d      	mov	r5, r1
 801d42c:	7989      	ldrb	r1, [r1, #6]
 801d42e:	4604      	mov	r4, r0
 801d430:	fab1 f081 	clz	r0, r1
 801d434:	0940      	lsrs	r0, r0, #5
 801d436:	2101      	movs	r1, #1
 801d438:	f7fe fa71 	bl	801b91e <bsp_assert>
 801d43c:	88a1      	ldrh	r1, [r4, #4]
 801d43e:	88aa      	ldrh	r2, [r5, #4]
 801d440:	6820      	ldr	r0, [r4, #0]
 801d442:	682b      	ldr	r3, [r5, #0]
 801d444:	440a      	add	r2, r1
 801d446:	1819      	adds	r1, r3, r0
 801d448:	2a20      	cmp	r2, #32
 801d44a:	6021      	str	r1, [r4, #0]
 801d44c:	80a2      	strh	r2, [r4, #4]
 801d44e:	d303      	bcc.n	801d458 <ble_time_add+0x30>
 801d450:	3101      	adds	r1, #1
 801d452:	3a1f      	subs	r2, #31
 801d454:	6021      	str	r1, [r4, #0]
 801d456:	80a2      	strh	r2, [r4, #4]
 801d458:	4288      	cmp	r0, r1
 801d45a:	bf84      	itt	hi
 801d45c:	2001      	movhi	r0, #1
 801d45e:	71a0      	strbhi	r0, [r4, #6]
 801d460:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d464 <ble_time_add_uint>:
 801d464:	b510      	push	{r4, lr}
 801d466:	b082      	sub	sp, #8
 801d468:	4604      	mov	r4, r0
 801d46a:	1e50      	subs	r0, r2, #1
 801d46c:	2300      	movs	r3, #0
 801d46e:	2804      	cmp	r0, #4
 801d470:	9301      	str	r3, [sp, #4]
 801d472:	9300      	str	r3, [sp, #0]
 801d474:	d816      	bhi.n	801d4a4 <ble_time_add_uint+0x40>
 801d476:	e8df f000 	tbb	[pc, r0]
 801d47a:	1a03      	.short	0x1a03
 801d47c:	002c2621 	.word	0x002c2621
 801d480:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 801d484:	0088      	lsls	r0, r1, #2
 801d486:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 801d48a:	fba0 0202 	umull	r0, r2, r0, r2
 801d48e:	eba1 1152 	sub.w	r1, r1, r2, lsr #5
 801d492:	08d0      	lsrs	r0, r2, #3
 801d494:	f64f 72e1 	movw	r2, #65505	@ 0xffe1
 801d498:	fb00 1102 	mla	r1, r0, r2, r1
 801d49c:	9000      	str	r0, [sp, #0]
 801d49e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d4a2:	e017      	b.n	801d4d4 <ble_time_add_uint+0x70>
 801d4a4:	2000      	movs	r0, #0
 801d4a6:	2101      	movs	r1, #1
 801d4a8:	f7fe fa39 	bl	801b91e <bsp_assert>
 801d4ac:	e012      	b.n	801d4d4 <ble_time_add_uint+0x70>
 801d4ae:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801d4b2:	0081      	lsls	r1, r0, #2
 801d4b4:	eba0 0091 	sub.w	r0, r0, r1, lsr #2
 801d4b8:	9100      	str	r1, [sp, #0]
 801d4ba:	e007      	b.n	801d4cc <ble_time_add_uint+0x68>
 801d4bc:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801d4c0:	00c0      	lsls	r0, r0, #3
 801d4c2:	9000      	str	r0, [sp, #0]
 801d4c4:	e006      	b.n	801d4d4 <ble_time_add_uint+0x70>
 801d4c6:	0148      	lsls	r0, r1, #5
 801d4c8:	9000      	str	r0, [sp, #0]
 801d4ca:	2000      	movs	r0, #0
 801d4cc:	f8ad 0004 	strh.w	r0, [sp, #4]
 801d4d0:	e000      	b.n	801d4d4 <ble_time_add_uint+0x70>
 801d4d2:	9100      	str	r1, [sp, #0]
 801d4d4:	4669      	mov	r1, sp
 801d4d6:	4620      	mov	r0, r4
 801d4d8:	f7ff ffa6 	bl	801d428 <ble_time_add>
 801d4dc:	b002      	add	sp, #8
 801d4de:	bd10      	pop	{r4, pc}

0801d4e0 <ble_time_rmv>:
 801d4e0:	b570      	push	{r4, r5, r6, lr}
 801d4e2:	460d      	mov	r5, r1
 801d4e4:	7989      	ldrb	r1, [r1, #6]
 801d4e6:	4604      	mov	r4, r0
 801d4e8:	fab1 f081 	clz	r0, r1
 801d4ec:	0940      	lsrs	r0, r0, #5
 801d4ee:	2101      	movs	r1, #1
 801d4f0:	f7fe fa15 	bl	801b91e <bsp_assert>
 801d4f4:	6826      	ldr	r6, [r4, #0]
 801d4f6:	4620      	mov	r0, r4
 801d4f8:	4629      	mov	r1, r5
 801d4fa:	f7ff ff11 	bl	801d320 <ble_time_comp>
 801d4fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d502:	dc0c      	bgt.n	801d51e <ble_time_rmv+0x3e>
 801d504:	f244 70ff 	movw	r0, #18431	@ 0x47ff
 801d508:	f2c0 10e8 	movt	r0, #488	@ 0x1e8
 801d50c:	4286      	cmp	r6, r0
 801d50e:	d802      	bhi.n	801d516 <ble_time_rmv+0x36>
 801d510:	2001      	movs	r0, #1
 801d512:	71a0      	strb	r0, [r4, #6]
 801d514:	e003      	b.n	801d51e <ble_time_rmv+0x3e>
 801d516:	2000      	movs	r0, #0
 801d518:	2101      	movs	r1, #1
 801d51a:	f7fe fa00 	bl	801b91e <bsp_assert>
 801d51e:	79a0      	ldrb	r0, [r4, #6]
 801d520:	b158      	cbz	r0, 801d53a <ble_time_rmv+0x5a>
 801d522:	6829      	ldr	r1, [r5, #0]
 801d524:	6822      	ldr	r2, [r4, #0]
 801d526:	3101      	adds	r1, #1
 801d528:	428a      	cmp	r2, r1
 801d52a:	d80d      	bhi.n	801d548 <ble_time_rmv+0x68>
 801d52c:	2801      	cmp	r0, #1
 801d52e:	d119      	bne.n	801d564 <ble_time_rmv+0x84>
 801d530:	79a8      	ldrb	r0, [r5, #6]
 801d532:	fab0 f080 	clz	r0, r0
 801d536:	0940      	lsrs	r0, r0, #5
 801d538:	e015      	b.n	801d566 <ble_time_rmv+0x86>
 801d53a:	79a8      	ldrb	r0, [r5, #6]
 801d53c:	b120      	cbz	r0, 801d548 <ble_time_rmv+0x68>
 801d53e:	6828      	ldr	r0, [r5, #0]
 801d540:	6821      	ldr	r1, [r4, #0]
 801d542:	3001      	adds	r0, #1
 801d544:	4281      	cmp	r1, r0
 801d546:	d90d      	bls.n	801d564 <ble_time_rmv+0x84>
 801d548:	88a1      	ldrh	r1, [r4, #4]
 801d54a:	88aa      	ldrh	r2, [r5, #4]
 801d54c:	6820      	ldr	r0, [r4, #0]
 801d54e:	4291      	cmp	r1, r2
 801d550:	bf3e      	ittt	cc
 801d552:	3801      	subcc	r0, #1
 801d554:	6020      	strcc	r0, [r4, #0]
 801d556:	311f      	addcc	r1, #31
 801d558:	1a89      	subs	r1, r1, r2
 801d55a:	682a      	ldr	r2, [r5, #0]
 801d55c:	80a1      	strh	r1, [r4, #4]
 801d55e:	1a80      	subs	r0, r0, r2
 801d560:	6020      	str	r0, [r4, #0]
 801d562:	e012      	b.n	801d58a <ble_time_rmv+0xaa>
 801d564:	2000      	movs	r0, #0
 801d566:	2101      	movs	r1, #1
 801d568:	f7fe f9d9 	bl	801b91e <bsp_assert>
 801d56c:	6820      	ldr	r0, [r4, #0]
 801d56e:	6829      	ldr	r1, [r5, #0]
 801d570:	88aa      	ldrh	r2, [r5, #4]
 801d572:	1a40      	subs	r0, r0, r1
 801d574:	88a1      	ldrh	r1, [r4, #4]
 801d576:	bf88      	it	hi
 801d578:	3001      	addhi	r0, #1
 801d57a:	6020      	str	r0, [r4, #0]
 801d57c:	4291      	cmp	r1, r2
 801d57e:	bf3e      	ittt	cc
 801d580:	3801      	subcc	r0, #1
 801d582:	6020      	strcc	r0, [r4, #0]
 801d584:	311f      	addcc	r1, #31
 801d586:	1a89      	subs	r1, r1, r2
 801d588:	80a1      	strh	r1, [r4, #4]
 801d58a:	42b0      	cmp	r0, r6
 801d58c:	bf98      	it	ls
 801d58e:	bd70      	popls	{r4, r5, r6, pc}
 801d590:	79a0      	ldrb	r0, [r4, #6]
 801d592:	2101      	movs	r1, #1
 801d594:	3801      	subs	r0, #1
 801d596:	fab0 f080 	clz	r0, r0
 801d59a:	0940      	lsrs	r0, r0, #5
 801d59c:	f7fe f9bf 	bl	801b91e <bsp_assert>
 801d5a0:	2000      	movs	r0, #0
 801d5a2:	71a0      	strb	r0, [r4, #6]
 801d5a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d5a8 <ble_time_rmv_uint>:
 801d5a8:	b510      	push	{r4, lr}
 801d5aa:	b082      	sub	sp, #8
 801d5ac:	4604      	mov	r4, r0
 801d5ae:	1e50      	subs	r0, r2, #1
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	2804      	cmp	r0, #4
 801d5b4:	9301      	str	r3, [sp, #4]
 801d5b6:	9300      	str	r3, [sp, #0]
 801d5b8:	d816      	bhi.n	801d5e8 <ble_time_rmv_uint+0x40>
 801d5ba:	e8df f000 	tbb	[pc, r0]
 801d5be:	1a03      	.short	0x1a03
 801d5c0:	002c261e 	.word	0x002c261e
 801d5c4:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 801d5c8:	0088      	lsls	r0, r1, #2
 801d5ca:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 801d5ce:	fba0 0202 	umull	r0, r2, r0, r2
 801d5d2:	eba1 1152 	sub.w	r1, r1, r2, lsr #5
 801d5d6:	08d0      	lsrs	r0, r2, #3
 801d5d8:	f64f 72e1 	movw	r2, #65505	@ 0xffe1
 801d5dc:	fb00 1102 	mla	r1, r0, r2, r1
 801d5e0:	9000      	str	r0, [sp, #0]
 801d5e2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d5e6:	e017      	b.n	801d618 <ble_time_rmv_uint+0x70>
 801d5e8:	2000      	movs	r0, #0
 801d5ea:	2101      	movs	r1, #1
 801d5ec:	f7fe f997 	bl	801b91e <bsp_assert>
 801d5f0:	e012      	b.n	801d618 <ble_time_rmv_uint+0x70>
 801d5f2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801d5f6:	0081      	lsls	r1, r0, #2
 801d5f8:	e003      	b.n	801d602 <ble_time_rmv_uint+0x5a>
 801d5fa:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 801d5fe:	00c1      	lsls	r1, r0, #3
 801d600:	0040      	lsls	r0, r0, #1
 801d602:	eba0 0091 	sub.w	r0, r0, r1, lsr #2
 801d606:	9100      	str	r1, [sp, #0]
 801d608:	e002      	b.n	801d610 <ble_time_rmv_uint+0x68>
 801d60a:	0148      	lsls	r0, r1, #5
 801d60c:	9000      	str	r0, [sp, #0]
 801d60e:	2000      	movs	r0, #0
 801d610:	f8ad 0004 	strh.w	r0, [sp, #4]
 801d614:	e000      	b.n	801d618 <ble_time_rmv_uint+0x70>
 801d616:	9100      	str	r1, [sp, #0]
 801d618:	4669      	mov	r1, sp
 801d61a:	4620      	mov	r0, r4
 801d61c:	f7ff ff60 	bl	801d4e0 <ble_time_rmv>
 801d620:	b002      	add	sp, #8
 801d622:	bd10      	pop	{r4, pc}

0801d624 <ble_time_cmp_raw_reading>:
 801d624:	6802      	ldr	r2, [r0, #0]
 801d626:	ea92 0001 	eors.w	r0, r2, r1
 801d62a:	d406      	bmi.n	801d63a <ble_time_cmp_raw_reading+0x16>
 801d62c:	428a      	cmp	r2, r1
 801d62e:	bf04      	itt	eq
 801d630:	2000      	moveq	r0, #0
 801d632:	4770      	bxeq	lr
 801d634:	f04f 0001 	mov.w	r0, #1
 801d638:	e00f      	b.n	801d65a <ble_time_cmp_raw_reading+0x36>
 801d63a:	1a50      	subs	r0, r2, r1
 801d63c:	d903      	bls.n	801d646 <ble_time_cmp_raw_reading+0x22>
 801d63e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801d642:	4298      	cmp	r0, r3
 801d644:	d307      	bcc.n	801d656 <ble_time_cmp_raw_reading+0x32>
 801d646:	1a88      	subs	r0, r1, r2
 801d648:	d90b      	bls.n	801d662 <ble_time_cmp_raw_reading+0x3e>
 801d64a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801d64e:	f6c7 73ff 	movt	r3, #32767	@ 0x7fff
 801d652:	4298      	cmp	r0, r3
 801d654:	d805      	bhi.n	801d662 <ble_time_cmp_raw_reading+0x3e>
 801d656:	2001      	movs	r0, #1
 801d658:	428a      	cmp	r2, r1
 801d65a:	bf88      	it	hi
 801d65c:	f04f 30ff 	movhi.w	r0, #4294967295
 801d660:	4770      	bx	lr
 801d662:	f04f 30ff 	mov.w	r0, #4294967295
 801d666:	428a      	cmp	r2, r1
 801d668:	bf88      	it	hi
 801d66a:	2001      	movhi	r0, #1
 801d66c:	4770      	bx	lr

0801d66e <ble_time_overflow_diff>:
 801d66e:	1a40      	subs	r0, r0, r1
 801d670:	4770      	bx	lr
	...

0801d674 <emngr_init>:
 801d674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d676:	b081      	sub	sp, #4
 801d678:	f247 251c 	movw	r5, #29212	@ 0x721c
 801d67c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d680:	2600      	movs	r6, #0
 801d682:	2700      	movs	r7, #0
 801d684:	f8c5 60c8 	str.w	r6, [r5, #200]	@ 0xc8
 801d688:	19ec      	adds	r4, r5, r7
 801d68a:	4620      	mov	r0, r4
 801d68c:	f000 fa20 	bl	801dad0 <queue_free>
 801d690:	51ee      	str	r6, [r5, r7]
 801d692:	3714      	adds	r7, #20
 801d694:	2fc8      	cmp	r7, #200	@ 0xc8
 801d696:	6066      	str	r6, [r4, #4]
 801d698:	7226      	strb	r6, [r4, #8]
 801d69a:	d1f5      	bne.n	801d688 <emngr_init+0x14>
 801d69c:	2000      	movs	r0, #0
 801d69e:	2100      	movs	r1, #0
 801d6a0:	186a      	adds	r2, r5, r1
 801d6a2:	3114      	adds	r1, #20
 801d6a4:	29c8      	cmp	r1, #200	@ 0xc8
 801d6a6:	8210      	strh	r0, [r2, #16]
 801d6a8:	d1fa      	bne.n	801d6a0 <emngr_init+0x2c>
 801d6aa:	f247 24e8 	movw	r4, #29416	@ 0x72e8
 801d6ae:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801d6b2:	6820      	ldr	r0, [r4, #0]
 801d6b4:	b920      	cbnz	r0, 801d6c0 <emngr_init+0x4c>
 801d6b6:	2032      	movs	r0, #50	@ 0x32
 801d6b8:	2100      	movs	r1, #0
 801d6ba:	f7fe f9a0 	bl	801b9fe <os_semaphore_create>
 801d6be:	6020      	str	r0, [r4, #0]
 801d6c0:	b001      	add	sp, #4
 801d6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6c4 <emngr_handle_init>:
 801d6c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d6c8:	f247 231c 	movw	r3, #29212	@ 0x721c
 801d6cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801d6d0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801d6d4:	2000      	movs	r0, #0
 801d6d6:	7419      	strb	r1, [r3, #16]
 801d6d8:	60da      	str	r2, [r3, #12]
 801d6da:	4770      	bx	lr

0801d6dc <emngr_handle_remove>:
 801d6dc:	b570      	push	{r4, r5, r6, lr}
 801d6de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801d6e2:	f247 261c 	movw	r6, #29212	@ 0x721c
 801d6e6:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801d6ea:	eb06 0485 	add.w	r4, r6, r5, lsl #2
 801d6ee:	4620      	mov	r0, r4
 801d6f0:	f000 f9ee 	bl	801dad0 <queue_free>
 801d6f4:	7a20      	ldrb	r0, [r4, #8]
 801d6f6:	f8d6 20c8 	ldr.w	r2, [r6, #200]	@ 0xc8
 801d6fa:	2100      	movs	r1, #0
 801d6fc:	1a10      	subs	r0, r2, r0
 801d6fe:	f8c6 00c8 	str.w	r0, [r6, #200]	@ 0xc8
 801d702:	2000      	movs	r0, #0
 801d704:	f846 1025 	str.w	r1, [r6, r5, lsl #2]
 801d708:	6061      	str	r1, [r4, #4]
 801d70a:	7221      	strb	r1, [r4, #8]
 801d70c:	bd70      	pop	{r4, r5, r6, pc}

0801d70e <emngr_post_event>:
 801d70e:	b5b0      	push	{r4, r5, r7, lr}
 801d710:	4605      	mov	r5, r0
 801d712:	201f      	movs	r0, #31
 801d714:	460c      	mov	r4, r1
 801d716:	f7fe f949 	bl	801b9ac <bsp_debug_gpio_set>
 801d71a:	f7fe f960 	bl	801b9de <os_disable_isr>
 801d71e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 801d722:	f247 251c 	movw	r5, #29212	@ 0x721c
 801d726:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d72a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801d72e:	7a01      	ldrb	r1, [r0, #8]
 801d730:	7c02      	ldrb	r2, [r0, #16]
 801d732:	4291      	cmp	r1, r2
 801d734:	d20a      	bcs.n	801d74c <emngr_post_event+0x3e>
 801d736:	4621      	mov	r1, r4
 801d738:	f000 f9d5 	bl	801dae6 <queue_enqueue>
 801d73c:	b130      	cbz	r0, 801d74c <emngr_post_event+0x3e>
 801d73e:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 801d742:	2400      	movs	r4, #0
 801d744:	3001      	adds	r0, #1
 801d746:	f8c5 00c8 	str.w	r0, [r5, #200]	@ 0xc8
 801d74a:	e004      	b.n	801d756 <emngr_post_event+0x48>
 801d74c:	2000      	movs	r0, #0
 801d74e:	2101      	movs	r1, #1
 801d750:	f7fe f8e5 	bl	801b91e <bsp_assert>
 801d754:	244d      	movs	r4, #77	@ 0x4d
 801d756:	f7fe f944 	bl	801b9e2 <os_enable_isr>
 801d75a:	f247 20e8 	movw	r0, #29416	@ 0x72e8
 801d75e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d762:	6800      	ldr	r0, [r0, #0]
 801d764:	f7fe f954 	bl	801ba10 <os_semaphore_release_isr>
 801d768:	201f      	movs	r0, #31
 801d76a:	f7fe f921 	bl	801b9b0 <bsp_debug_gpio_clear>
 801d76e:	4620      	mov	r0, r4
 801d770:	bdb0      	pop	{r4, r5, r7, pc}

0801d772 <emngr_post_event_first>:
 801d772:	b5b0      	push	{r4, r5, r7, lr}
 801d774:	4605      	mov	r5, r0
 801d776:	201f      	movs	r0, #31
 801d778:	460c      	mov	r4, r1
 801d77a:	f7fe f917 	bl	801b9ac <bsp_debug_gpio_set>
 801d77e:	f7fe f92e 	bl	801b9de <os_disable_isr>
 801d782:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 801d786:	f247 251c 	movw	r5, #29212	@ 0x721c
 801d78a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d78e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 801d792:	7a01      	ldrb	r1, [r0, #8]
 801d794:	7c02      	ldrb	r2, [r0, #16]
 801d796:	4291      	cmp	r1, r2
 801d798:	d20a      	bcs.n	801d7b0 <emngr_post_event_first+0x3e>
 801d79a:	4621      	mov	r1, r4
 801d79c:	f000 f9c6 	bl	801db2c <queue_insert_frst>
 801d7a0:	b130      	cbz	r0, 801d7b0 <emngr_post_event_first+0x3e>
 801d7a2:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
 801d7a6:	2400      	movs	r4, #0
 801d7a8:	3001      	adds	r0, #1
 801d7aa:	f8c5 00c8 	str.w	r0, [r5, #200]	@ 0xc8
 801d7ae:	e004      	b.n	801d7ba <emngr_post_event_first+0x48>
 801d7b0:	2000      	movs	r0, #0
 801d7b2:	2101      	movs	r1, #1
 801d7b4:	f7fe f8b3 	bl	801b91e <bsp_assert>
 801d7b8:	244d      	movs	r4, #77	@ 0x4d
 801d7ba:	f7fe f912 	bl	801b9e2 <os_enable_isr>
 801d7be:	f247 20e8 	movw	r0, #29416	@ 0x72e8
 801d7c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d7c6:	6800      	ldr	r0, [r0, #0]
 801d7c8:	f7fe f922 	bl	801ba10 <os_semaphore_release_isr>
 801d7cc:	201f      	movs	r0, #31
 801d7ce:	f7fe f8ef 	bl	801b9b0 <bsp_debug_gpio_clear>
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	bdb0      	pop	{r4, r5, r7, pc}

0801d7d6 <emngr_get_event>:
 801d7d6:	b5b0      	push	{r4, r5, r7, lr}
 801d7d8:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 801d7dc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d7e0:	6829      	ldr	r1, [r5, #0]
 801d7e2:	4604      	mov	r4, r0
 801d7e4:	4608      	mov	r0, r1
 801d7e6:	f04f 31ff 	mov.w	r1, #4294967295
 801d7ea:	f7fe f8fc 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801d7ee:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801d7f2:	f247 211c 	movw	r1, #29212	@ 0x721c
 801d7f6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d7fa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801d7fe:	7a02      	ldrb	r2, [r0, #8]
 801d800:	b122      	cbz	r2, 801d80c <emngr_get_event+0x36>
 801d802:	f8d1 20c8 	ldr.w	r2, [r1, #200]	@ 0xc8
 801d806:	3a01      	subs	r2, #1
 801d808:	f8c1 20c8 	str.w	r2, [r1, #200]	@ 0xc8
 801d80c:	f000 f9b4 	bl	801db78 <queue_dequeue>
 801d810:	6829      	ldr	r1, [r5, #0]
 801d812:	4604      	mov	r4, r0
 801d814:	4608      	mov	r0, r1
 801d816:	f7fe f8ec 	bl	801b9f2 <os_rcrsv_mutex_release>
 801d81a:	4620      	mov	r0, r4
 801d81c:	bdb0      	pop	{r4, r5, r7, pc}

0801d81e <emngr_process_event>:
 801d81e:	b570      	push	{r4, r5, r6, lr}
 801d820:	4604      	mov	r4, r0
 801d822:	2021      	movs	r0, #33	@ 0x21
 801d824:	f7fe f8c2 	bl	801b9ac <bsp_debug_gpio_set>
 801d828:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801d82c:	f247 211c 	movw	r1, #29212	@ 0x721c
 801d830:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d834:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 801d838:	7c68      	ldrb	r0, [r5, #17]
 801d83a:	b108      	cbz	r0, 801d840 <emngr_process_event+0x22>
 801d83c:	2401      	movs	r4, #1
 801d83e:	e01b      	b.n	801d878 <emngr_process_event+0x5a>
 801d840:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 801d844:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801d848:	6830      	ldr	r0, [r6, #0]
 801d84a:	f04f 31ff 	mov.w	r1, #4294967295
 801d84e:	f7fe f8ca 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801d852:	7a28      	ldrb	r0, [r5, #8]
 801d854:	b160      	cbz	r0, 801d870 <emngr_process_event+0x52>
 801d856:	4620      	mov	r0, r4
 801d858:	f7ff ffbd 	bl	801d7d6 <emngr_get_event>
 801d85c:	6831      	ldr	r1, [r6, #0]
 801d85e:	4604      	mov	r4, r0
 801d860:	4608      	mov	r0, r1
 801d862:	f7fe f8c6 	bl	801b9f2 <os_rcrsv_mutex_release>
 801d866:	68e9      	ldr	r1, [r5, #12]
 801d868:	b129      	cbz	r1, 801d876 <emngr_process_event+0x58>
 801d86a:	4620      	mov	r0, r4
 801d86c:	4788      	blx	r1
 801d86e:	e002      	b.n	801d876 <emngr_process_event+0x58>
 801d870:	6830      	ldr	r0, [r6, #0]
 801d872:	f7fe f8be 	bl	801b9f2 <os_rcrsv_mutex_release>
 801d876:	2400      	movs	r4, #0
 801d878:	2021      	movs	r0, #33	@ 0x21
 801d87a:	f7fe f899 	bl	801b9b0 <bsp_debug_gpio_clear>
 801d87e:	4620      	mov	r0, r4
 801d880:	bd70      	pop	{r4, r5, r6, pc}

0801d882 <emngr_get_handle_events>:
 801d882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d886:	f247 211c 	movw	r1, #29212	@ 0x721c
 801d88a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d88e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801d892:	7a00      	ldrb	r0, [r0, #8]
 801d894:	4770      	bx	lr

0801d896 <emngr_set_event_handle_busy>:
 801d896:	b5b0      	push	{r4, r5, r7, lr}
 801d898:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d89c:	f247 221c 	movw	r2, #29212	@ 0x721c
 801d8a0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801d8a4:	eb02 0580 	add.w	r5, r2, r0, lsl #2
 801d8a8:	460c      	mov	r4, r1
 801d8aa:	7c68      	ldrb	r0, [r5, #17]
 801d8ac:	fab1 f181 	clz	r1, r1
 801d8b0:	fab0 f080 	clz	r0, r0
 801d8b4:	0940      	lsrs	r0, r0, #5
 801d8b6:	0949      	lsrs	r1, r1, #5
 801d8b8:	4308      	orrs	r0, r1
 801d8ba:	2101      	movs	r1, #1
 801d8bc:	f7fe f82f 	bl	801b91e <bsp_assert>
 801d8c0:	746c      	strb	r4, [r5, #17]
 801d8c2:	b104      	cbz	r4, 801d8c6 <emngr_set_event_handle_busy+0x30>
 801d8c4:	bdb0      	pop	{r4, r5, r7, pc}
 801d8c6:	f247 20e8 	movw	r0, #29416	@ 0x72e8
 801d8ca:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d8ce:	6800      	ldr	r0, [r0, #0]
 801d8d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d8d4:	f7fe b897 	b.w	801ba06 <os_semaphore_release>

0801d8d8 <emngr_handle_all_events>:
 801d8d8:	b5b0      	push	{r4, r5, r7, lr}
 801d8da:	2020      	movs	r0, #32
 801d8dc:	f7fe f866 	bl	801b9ac <bsp_debug_gpio_set>
 801d8e0:	f247 20e8 	movw	r0, #29416	@ 0x72e8
 801d8e4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d8e8:	6800      	ldr	r0, [r0, #0]
 801d8ea:	f04f 31ff 	mov.w	r1, #4294967295
 801d8ee:	f7fe f888 	bl	801ba02 <os_semaphore_wait>
 801d8f2:	f247 201c 	movw	r0, #29212	@ 0x721c
 801d8f6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d8fa:	f100 0408 	add.w	r4, r0, #8
 801d8fe:	2500      	movs	r5, #0
 801d900:	7820      	ldrb	r0, [r4, #0]
 801d902:	b138      	cbz	r0, 801d914 <emngr_handle_all_events+0x3c>
 801d904:	b2e8      	uxtb	r0, r5
 801d906:	f7ff ff8a 	bl	801d81e <emngr_process_event>
 801d90a:	0600      	lsls	r0, r0, #24
 801d90c:	d007      	beq.n	801d91e <emngr_handle_all_events+0x46>
 801d90e:	2d09      	cmp	r5, #9
 801d910:	d302      	bcc.n	801d918 <emngr_handle_all_events+0x40>
 801d912:	e004      	b.n	801d91e <emngr_handle_all_events+0x46>
 801d914:	2d08      	cmp	r5, #8
 801d916:	d802      	bhi.n	801d91e <emngr_handle_all_events+0x46>
 801d918:	3501      	adds	r5, #1
 801d91a:	3414      	adds	r4, #20
 801d91c:	e7f0      	b.n	801d900 <emngr_handle_all_events+0x28>
 801d91e:	2020      	movs	r0, #32
 801d920:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801d924:	f7fe b844 	b.w	801b9b0 <bsp_debug_gpio_clear>

0801d928 <emngr_handle_event>:
 801d928:	b5b0      	push	{r4, r5, r7, lr}
 801d92a:	f247 25e8 	movw	r5, #29416	@ 0x72e8
 801d92e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801d932:	6829      	ldr	r1, [r5, #0]
 801d934:	4604      	mov	r4, r0
 801d936:	4608      	mov	r0, r1
 801d938:	f04f 31ff 	mov.w	r1, #4294967295
 801d93c:	f7fe f861 	bl	801ba02 <os_semaphore_wait>
 801d940:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801d944:	f247 211c 	movw	r1, #29212	@ 0x721c
 801d948:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801d94c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801d950:	7a00      	ldrb	r0, [r0, #8]
 801d952:	b190      	cbz	r0, 801d97a <emngr_handle_event+0x52>
 801d954:	4620      	mov	r0, r4
 801d956:	f7ff ff62 	bl	801d81e <emngr_process_event>
 801d95a:	f247 24ec 	movw	r4, #29420	@ 0x72ec
 801d95e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801d962:	7820      	ldrb	r0, [r4, #0]
 801d964:	b140      	cbz	r0, 801d978 <emngr_handle_event+0x50>
 801d966:	bf00      	nop
 801d968:	6828      	ldr	r0, [r5, #0]
 801d96a:	f7fe f84c 	bl	801ba06 <os_semaphore_release>
 801d96e:	7820      	ldrb	r0, [r4, #0]
 801d970:	3801      	subs	r0, #1
 801d972:	0601      	lsls	r1, r0, #24
 801d974:	7020      	strb	r0, [r4, #0]
 801d976:	d1f7      	bne.n	801d968 <emngr_handle_event+0x40>
 801d978:	bdb0      	pop	{r4, r5, r7, pc}
 801d97a:	f247 20ec 	movw	r0, #29420	@ 0x72ec
 801d97e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801d982:	7801      	ldrb	r1, [r0, #0]
 801d984:	3101      	adds	r1, #1
 801d986:	7001      	strb	r1, [r0, #0]
 801d988:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d98c <emngr_process_conditional_event>:
 801d98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d990:	b081      	sub	sp, #4
 801d992:	4607      	mov	r7, r0
 801d994:	2003      	movs	r0, #3
 801d996:	469a      	mov	sl, r3
 801d998:	4615      	mov	r5, r2
 801d99a:	4688      	mov	r8, r1
 801d99c:	f7fe f81d 	bl	801b9da <disable_specific_irq>
 801d9a0:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 801d9a4:	f247 291c 	movw	r9, #29212	@ 0x721c
 801d9a8:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801d9ac:	f859 4020 	ldr.w	r4, [r9, r0, lsl #2]
 801d9b0:	b31c      	cbz	r4, 801d9fa <emngr_process_conditional_event+0x6e>
 801d9b2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801d9b6:	2600      	movs	r6, #0
 801d9b8:	f100 0b0c 	add.w	fp, r0, #12
 801d9bc:	4627      	mov	r7, r4
 801d9be:	e9d4 0400 	ldrd	r0, r4, [r4]
 801d9c2:	4629      	mov	r1, r5
 801d9c4:	47d0      	blx	sl
 801d9c6:	2801      	cmp	r0, #1
 801d9c8:	d114      	bne.n	801d9f4 <emngr_process_conditional_event+0x68>
 801d9ca:	f8db 0000 	ldr.w	r0, [fp]
 801d9ce:	b188      	cbz	r0, 801d9f4 <emngr_process_conditional_event+0x68>
 801d9d0:	f8d9 00c8 	ldr.w	r0, [r9, #200]	@ 0xc8
 801d9d4:	683e      	ldr	r6, [r7, #0]
 801d9d6:	3801      	subs	r0, #1
 801d9d8:	f8c9 00c8 	str.w	r0, [r9, #200]	@ 0xc8
 801d9dc:	4638      	mov	r0, r7
 801d9de:	f000 f8f1 	bl	801dbc4 <queue_delete>
 801d9e2:	f8db 1000 	ldr.w	r1, [fp]
 801d9e6:	4630      	mov	r0, r6
 801d9e8:	4788      	blx	r1
 801d9ea:	f1b8 0f01 	cmp.w	r8, #1
 801d9ee:	f04f 0601 	mov.w	r6, #1
 801d9f2:	d003      	beq.n	801d9fc <emngr_process_conditional_event+0x70>
 801d9f4:	2c00      	cmp	r4, #0
 801d9f6:	d1e1      	bne.n	801d9bc <emngr_process_conditional_event+0x30>
 801d9f8:	e000      	b.n	801d9fc <emngr_process_conditional_event+0x70>
 801d9fa:	2600      	movs	r6, #0
 801d9fc:	2003      	movs	r0, #3
 801d9fe:	f7fd ffea 	bl	801b9d6 <enable_specific_irq>
 801da02:	b2f0      	uxtb	r0, r6
 801da04:	b001      	add	sp, #4
 801da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801da0c <emngr_remove_conditional_event>:
 801da0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da10:	b081      	sub	sp, #4
 801da12:	4607      	mov	r7, r0
 801da14:	2003      	movs	r0, #3
 801da16:	461c      	mov	r4, r3
 801da18:	4615      	mov	r5, r2
 801da1a:	4688      	mov	r8, r1
 801da1c:	f7fd ffdd 	bl	801b9da <disable_specific_irq>
 801da20:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 801da24:	f247 291c 	movw	r9, #29212	@ 0x721c
 801da28:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801da2c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 801da30:	b1a7      	cbz	r7, 801da5c <emngr_remove_conditional_event+0x50>
 801da32:	bf00      	nop
 801da34:	e9d7 0600 	ldrd	r0, r6, [r7]
 801da38:	4629      	mov	r1, r5
 801da3a:	47a0      	blx	r4
 801da3c:	2801      	cmp	r0, #1
 801da3e:	d10a      	bne.n	801da56 <emngr_remove_conditional_event+0x4a>
 801da40:	f8d9 00c8 	ldr.w	r0, [r9, #200]	@ 0xc8
 801da44:	3801      	subs	r0, #1
 801da46:	f8c9 00c8 	str.w	r0, [r9, #200]	@ 0xc8
 801da4a:	4638      	mov	r0, r7
 801da4c:	f000 f8ba 	bl	801dbc4 <queue_delete>
 801da50:	f1b8 0f01 	cmp.w	r8, #1
 801da54:	d002      	beq.n	801da5c <emngr_remove_conditional_event+0x50>
 801da56:	2e00      	cmp	r6, #0
 801da58:	4637      	mov	r7, r6
 801da5a:	d1eb      	bne.n	801da34 <emngr_remove_conditional_event+0x28>
 801da5c:	2003      	movs	r0, #3
 801da5e:	f7fd ffba 	bl	801b9d6 <enable_specific_irq>
 801da62:	2000      	movs	r0, #0
 801da64:	b001      	add	sp, #4
 801da66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801da6c <emngr_can_mcu_sleep>:
 801da6c:	b510      	push	{r4, lr}
 801da6e:	f247 2e1c 	movw	lr, #29212	@ 0x721c
 801da72:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 801da76:	f8de c0c8 	ldr.w	ip, [lr, #200]	@ 0xc8
 801da7a:	f1bc 0f00 	cmp.w	ip, #0
 801da7e:	bf04      	itt	eq
 801da80:	2001      	moveq	r0, #1
 801da82:	bd10      	popeq	{r4, pc}
 801da84:	2200      	movs	r2, #0
 801da86:	a30b      	add	r3, pc, #44	@ (adr r3, 801dab4 <emngr_can_mcu_sleep+0x48>)
 801da88:	2000      	movs	r0, #0
 801da8a:	bf00      	nop
 801da8c:	5c99      	ldrb	r1, [r3, r2]
 801da8e:	3201      	adds	r2, #1
 801da90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801da94:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 801da98:	7c4c      	ldrb	r4, [r1, #17]
 801da9a:	2c01      	cmp	r4, #1
 801da9c:	bf04      	itt	eq
 801da9e:	7a09      	ldrbeq	r1, [r1, #8]
 801daa0:	4408      	addeq	r0, r1
 801daa2:	2a03      	cmp	r2, #3
 801daa4:	d1f2      	bne.n	801da8c <emngr_can_mcu_sleep+0x20>
 801daa6:	b2c0      	uxtb	r0, r0
 801daa8:	ebac 0000 	sub.w	r0, ip, r0
 801daac:	fab0 f080 	clz	r0, r0
 801dab0:	0940      	lsrs	r0, r0, #5
 801dab2:	bd10      	pop	{r4, pc}
 801dab4:	00080706 	.word	0x00080706

0801dab8 <os_mem_pool_alloc>:
 801dab8:	f002 be79 	b.w	80207ae <mem_pool_alloc>

0801dabc <os_mem_pool_free>:
 801dabc:	f002 be9e 	b.w	80207fc <mem_pool_free>

0801dac0 <os_shrd_mem_alloc>:
 801dac0:	b580      	push	{r7, lr}
 801dac2:	f002 fe74 	bl	80207ae <mem_pool_alloc>
 801dac6:	2800      	cmp	r0, #0
 801dac8:	bf18      	it	ne
 801daca:	3004      	addne	r0, #4
 801dacc:	bd80      	pop	{r7, pc}
	...

0801dad0 <queue_free>:
 801dad0:	b510      	push	{r4, lr}
 801dad2:	b138      	cbz	r0, 801dae4 <queue_free+0x14>
 801dad4:	6800      	ldr	r0, [r0, #0]
 801dad6:	b128      	cbz	r0, 801dae4 <queue_free+0x14>
 801dad8:	6844      	ldr	r4, [r0, #4]
 801dada:	f7ff ffef 	bl	801dabc <os_mem_pool_free>
 801dade:	2c00      	cmp	r4, #0
 801dae0:	4620      	mov	r0, r4
 801dae2:	d1f9      	bne.n	801dad8 <queue_free+0x8>
 801dae4:	bd10      	pop	{r4, pc}

0801dae6 <queue_enqueue>:
 801dae6:	b570      	push	{r4, r5, r6, lr}
 801dae8:	4604      	mov	r4, r0
 801daea:	f247 400c 	movw	r0, #29708	@ 0x740c
 801daee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801daf2:	460e      	mov	r6, r1
 801daf4:	f7ff ffe0 	bl	801dab8 <os_mem_pool_alloc>
 801daf8:	4605      	mov	r5, r0
 801dafa:	b1a8      	cbz	r0, 801db28 <queue_enqueue+0x42>
 801dafc:	2000      	movs	r0, #0
 801dafe:	e9c5 6000 	strd	r6, r0, [r5]
 801db02:	60ac      	str	r4, [r5, #8]
 801db04:	f7fd ff6b 	bl	801b9de <os_disable_isr>
 801db08:	4620      	mov	r0, r4
 801db0a:	f850 1b04 	ldr.w	r1, [r0], #4
 801db0e:	2900      	cmp	r1, #0
 801db10:	bf19      	ittee	ne
 801db12:	6801      	ldrne	r1, [r0, #0]
 801db14:	3104      	addne	r1, #4
 801db16:	4601      	moveq	r1, r0
 801db18:	4620      	moveq	r0, r4
 801db1a:	600d      	str	r5, [r1, #0]
 801db1c:	7a21      	ldrb	r1, [r4, #8]
 801db1e:	6005      	str	r5, [r0, #0]
 801db20:	1c48      	adds	r0, r1, #1
 801db22:	7220      	strb	r0, [r4, #8]
 801db24:	f7fd ff5d 	bl	801b9e2 <os_enable_isr>
 801db28:	4628      	mov	r0, r5
 801db2a:	bd70      	pop	{r4, r5, r6, pc}

0801db2c <queue_insert_frst>:
 801db2c:	b570      	push	{r4, r5, r6, lr}
 801db2e:	4604      	mov	r4, r0
 801db30:	f247 400c 	movw	r0, #29708	@ 0x740c
 801db34:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801db38:	460e      	mov	r6, r1
 801db3a:	f7ff ffbd 	bl	801dab8 <os_mem_pool_alloc>
 801db3e:	4605      	mov	r5, r0
 801db40:	b1c0      	cbz	r0, 801db74 <queue_insert_frst+0x48>
 801db42:	2000      	movs	r0, #0
 801db44:	e9c5 6000 	strd	r6, r0, [r5]
 801db48:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 801db4c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801db50:	6830      	ldr	r0, [r6, #0]
 801db52:	f04f 31ff 	mov.w	r1, #4294967295
 801db56:	60ac      	str	r4, [r5, #8]
 801db58:	f7fd ff45 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801db5c:	6820      	ldr	r0, [r4, #0]
 801db5e:	2800      	cmp	r0, #0
 801db60:	bf14      	ite	ne
 801db62:	6068      	strne	r0, [r5, #4]
 801db64:	6065      	streq	r5, [r4, #4]
 801db66:	7a20      	ldrb	r0, [r4, #8]
 801db68:	6025      	str	r5, [r4, #0]
 801db6a:	1c41      	adds	r1, r0, #1
 801db6c:	6830      	ldr	r0, [r6, #0]
 801db6e:	7221      	strb	r1, [r4, #8]
 801db70:	f7fd ff3f 	bl	801b9f2 <os_rcrsv_mutex_release>
 801db74:	4628      	mov	r0, r5
 801db76:	bd70      	pop	{r4, r5, r6, pc}

0801db78 <queue_dequeue>:
 801db78:	b570      	push	{r4, r5, r6, lr}
 801db7a:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 801db7e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801db82:	6831      	ldr	r1, [r6, #0]
 801db84:	4605      	mov	r5, r0
 801db86:	4608      	mov	r0, r1
 801db88:	f04f 31ff 	mov.w	r1, #4294967295
 801db8c:	f7fd ff2b 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801db90:	682c      	ldr	r4, [r5, #0]
 801db92:	b18c      	cbz	r4, 801dbb8 <queue_dequeue+0x40>
 801db94:	6868      	ldr	r0, [r5, #4]
 801db96:	4284      	cmp	r4, r0
 801db98:	bf12      	itee	ne
 801db9a:	6860      	ldrne	r0, [r4, #4]
 801db9c:	2000      	moveq	r0, #0
 801db9e:	6068      	streq	r0, [r5, #4]
 801dba0:	7a29      	ldrb	r1, [r5, #8]
 801dba2:	6028      	str	r0, [r5, #0]
 801dba4:	6830      	ldr	r0, [r6, #0]
 801dba6:	3901      	subs	r1, #1
 801dba8:	7229      	strb	r1, [r5, #8]
 801dbaa:	f7fd ff22 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dbae:	6825      	ldr	r5, [r4, #0]
 801dbb0:	4620      	mov	r0, r4
 801dbb2:	f7ff ff83 	bl	801dabc <os_mem_pool_free>
 801dbb6:	e003      	b.n	801dbc0 <queue_dequeue+0x48>
 801dbb8:	6830      	ldr	r0, [r6, #0]
 801dbba:	f7fd ff1a 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dbbe:	2500      	movs	r5, #0
 801dbc0:	4628      	mov	r0, r5
 801dbc2:	bd70      	pop	{r4, r5, r6, pc}

0801dbc4 <queue_delete>:
 801dbc4:	b5b0      	push	{r4, r5, r7, lr}
 801dbc6:	b1c0      	cbz	r0, 801dbfa <queue_delete+0x36>
 801dbc8:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 801dbcc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801dbd0:	4604      	mov	r4, r0
 801dbd2:	6828      	ldr	r0, [r5, #0]
 801dbd4:	f04f 31ff 	mov.w	r1, #4294967295
 801dbd8:	f7fd ff05 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801dbdc:	68a1      	ldr	r1, [r4, #8]
 801dbde:	680a      	ldr	r2, [r1, #0]
 801dbe0:	42a2      	cmp	r2, r4
 801dbe2:	d00c      	beq.n	801dbfe <queue_delete+0x3a>
 801dbe4:	4610      	mov	r0, r2
 801dbe6:	6852      	ldr	r2, [r2, #4]
 801dbe8:	42a2      	cmp	r2, r4
 801dbea:	d1fb      	bne.n	801dbe4 <queue_delete+0x20>
 801dbec:	684a      	ldr	r2, [r1, #4]
 801dbee:	6863      	ldr	r3, [r4, #4]
 801dbf0:	42a2      	cmp	r2, r4
 801dbf2:	6043      	str	r3, [r0, #4]
 801dbf4:	d109      	bne.n	801dc0a <queue_delete+0x46>
 801dbf6:	6048      	str	r0, [r1, #4]
 801dbf8:	e007      	b.n	801dc0a <queue_delete+0x46>
 801dbfa:	2500      	movs	r5, #0
 801dbfc:	e00f      	b.n	801dc1e <queue_delete+0x5a>
 801dbfe:	684a      	ldr	r2, [r1, #4]
 801dc00:	6860      	ldr	r0, [r4, #4]
 801dc02:	42a2      	cmp	r2, r4
 801dc04:	6008      	str	r0, [r1, #0]
 801dc06:	bf08      	it	eq
 801dc08:	6048      	streq	r0, [r1, #4]
 801dc0a:	7a08      	ldrb	r0, [r1, #8]
 801dc0c:	1e42      	subs	r2, r0, #1
 801dc0e:	6828      	ldr	r0, [r5, #0]
 801dc10:	720a      	strb	r2, [r1, #8]
 801dc12:	f7fd feee 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dc16:	6825      	ldr	r5, [r4, #0]
 801dc18:	4620      	mov	r0, r4
 801dc1a:	f7ff ff4f 	bl	801dabc <os_mem_pool_free>
 801dc1e:	4628      	mov	r0, r5
 801dc20:	bdb0      	pop	{r4, r5, r7, pc}

0801dc22 <os_timer_rgstr_timer_activity_cbk>:
 801dc22:	f247 21f0 	movw	r1, #29424	@ 0x72f0
 801dc26:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801dc2a:	6008      	str	r0, [r1, #0]
 801dc2c:	4770      	bx	lr
	...

0801dc30 <os_timer_get_current_time>:
 801dc30:	b570      	push	{r4, r5, r6, lr}
 801dc32:	f004 fee7 	bl	8022a04 <get_current_time>
 801dc36:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 801dc3a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801dc3e:	6831      	ldr	r1, [r6, #0]
 801dc40:	4604      	mov	r4, r0
 801dc42:	4608      	mov	r0, r1
 801dc44:	f04f 31ff 	mov.w	r1, #4294967295
 801dc48:	f7fd fecd 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801dc4c:	f247 25fc 	movw	r5, #29436	@ 0x72fc
 801dc50:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801dc54:	6828      	ldr	r0, [r5, #0]
 801dc56:	4284      	cmp	r4, r0
 801dc58:	d211      	bcs.n	801dc7e <os_timer_get_current_time+0x4e>
 801dc5a:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801dc5e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801dc62:	bf00      	nop
 801dc64:	6800      	ldr	r0, [r0, #0]
 801dc66:	b120      	cbz	r0, 801dc72 <os_timer_get_current_time+0x42>
 801dc68:	8a81      	ldrh	r1, [r0, #20]
 801dc6a:	f021 0101 	bic.w	r1, r1, #1
 801dc6e:	8281      	strh	r1, [r0, #20]
 801dc70:	e7f8      	b.n	801dc64 <os_timer_get_current_time+0x34>
 801dc72:	f247 3014 	movw	r0, #29460	@ 0x7314
 801dc76:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801dc7a:	2100      	movs	r1, #0
 801dc7c:	6001      	str	r1, [r0, #0]
 801dc7e:	6830      	ldr	r0, [r6, #0]
 801dc80:	f7fd feb7 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dc84:	4620      	mov	r0, r4
 801dc86:	2100      	movs	r1, #0
 801dc88:	602c      	str	r4, [r5, #0]
 801dc8a:	bd70      	pop	{r4, r5, r6, pc}

0801dc8c <os_timer_init>:
 801dc8c:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801dc90:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801dc94:	2200      	movs	r2, #0
 801dc96:	6002      	str	r2, [r0, #0]
 801dc98:	f64d 40b1 	movw	r0, #56497	@ 0xdcb1
 801dc9c:	f247 23f0 	movw	r3, #29424	@ 0x72f0
 801dca0:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801dca4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801dca8:	2105      	movs	r1, #5
 801dcaa:	601a      	str	r2, [r3, #0]
 801dcac:	f002 bebb 	b.w	8020a26 <intr_hndlr_reg>

0801dcb0 <osTimerHandler>:
 801dcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcb4:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 801dcb8:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801dcbc:	f8d8 0000 	ldr.w	r0, [r8]
 801dcc0:	f04f 31ff 	mov.w	r1, #4294967295
 801dcc4:	f7fd fe8f 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801dcc8:	f247 29f4 	movw	r9, #29428	@ 0x72f4
 801dccc:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801dcd0:	f8d9 5000 	ldr.w	r5, [r9]
 801dcd4:	b35d      	cbz	r5, 801dd2e <osTimerHandler+0x7e>
 801dcd6:	f04f 0a01 	mov.w	sl, #1
 801dcda:	462e      	mov	r6, r5
 801dcdc:	8ab0      	ldrh	r0, [r6, #20]
 801dcde:	68b4      	ldr	r4, [r6, #8]
 801dce0:	f000 0701 	and.w	r7, r0, #1
 801dce4:	f7ff ffa4 	bl	801dc30 <os_timer_get_current_time>
 801dce8:	3006      	adds	r0, #6
 801dcea:	f141 0100 	adc.w	r1, r1, #0
 801dcee:	1b00      	subs	r0, r0, r4
 801dcf0:	eb71 0007 	sbcs.w	r0, r1, r7
 801dcf4:	d31c      	bcc.n	801dd30 <osTimerHandler+0x80>
 801dcf6:	e9d6 1003 	ldrd	r1, r0, [r6, #12]
 801dcfa:	6834      	ldr	r4, [r6, #0]
 801dcfc:	f886 a016 	strb.w	sl, [r6, #22]
 801dd00:	4788      	blx	r1
 801dd02:	7df0      	ldrb	r0, [r6, #23]
 801dd04:	07c0      	lsls	r0, r0, #31
 801dd06:	d008      	beq.n	801dd1a <osTimerHandler+0x6a>
 801dd08:	8ab0      	ldrh	r0, [r6, #20]
 801dd0a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801dd0e:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 801dd12:	f420 60f8 	bic.w	r0, r0, #1984	@ 0x7c0
 801dd16:	4408      	add	r0, r1
 801dd18:	82b0      	strh	r0, [r6, #20]
 801dd1a:	6830      	ldr	r0, [r6, #0]
 801dd1c:	f8d9 1000 	ldr.w	r1, [r9]
 801dd20:	42a0      	cmp	r0, r4
 801dd22:	bf18      	it	ne
 801dd24:	460d      	movne	r5, r1
 801dd26:	2c00      	cmp	r4, #0
 801dd28:	4626      	mov	r6, r4
 801dd2a:	d1d7      	bne.n	801dcdc <osTimerHandler+0x2c>
 801dd2c:	e000      	b.n	801dd30 <osTimerHandler+0x80>
 801dd2e:	2500      	movs	r5, #0
 801dd30:	f8d8 0000 	ldr.w	r0, [r8]
 801dd34:	f7fd fe5d 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dd38:	f000 f940 	bl	801dfbc <remove_stopped_and_expired_timers>
 801dd3c:	f8d8 0000 	ldr.w	r0, [r8]
 801dd40:	f04f 31ff 	mov.w	r1, #4294967295
 801dd44:	f7fd fe4f 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801dd48:	f8d9 7000 	ldr.w	r7, [r9]
 801dd4c:	b195      	cbz	r5, 801dd74 <osTimerHandler+0xc4>
 801dd4e:	42bd      	cmp	r5, r7
 801dd50:	d010      	beq.n	801dd74 <osTimerHandler+0xc4>
 801dd52:	bf00      	nop
 801dd54:	7da9      	ldrb	r1, [r5, #22]
 801dd56:	b159      	cbz	r1, 801dd70 <osTimerHandler+0xc0>
 801dd58:	7dea      	ldrb	r2, [r5, #23]
 801dd5a:	4628      	mov	r0, r5
 801dd5c:	682d      	ldr	r5, [r5, #0]
 801dd5e:	07d2      	lsls	r2, r2, #31
 801dd60:	d004      	beq.n	801dd6c <osTimerHandler+0xbc>
 801dd62:	2901      	cmp	r1, #1
 801dd64:	d102      	bne.n	801dd6c <osTimerHandler+0xbc>
 801dd66:	6841      	ldr	r1, [r0, #4]
 801dd68:	f000 f954 	bl	801e014 <add_timer_to_List>
 801dd6c:	2d00      	cmp	r5, #0
 801dd6e:	d1f1      	bne.n	801dd54 <osTimerHandler+0xa4>
 801dd70:	f8d9 7000 	ldr.w	r7, [r9]
 801dd74:	2f00      	cmp	r7, #0
 801dd76:	d047      	beq.n	801de08 <osTimerHandler+0x158>
 801dd78:	2098      	movs	r0, #152	@ 0x98
 801dd7a:	f7fd fe17 	bl	801b9ac <bsp_debug_gpio_set>
 801dd7e:	f8d9 0000 	ldr.w	r0, [r9]
 801dd82:	b3e0      	cbz	r0, 801ddfe <osTimerHandler+0x14e>
 801dd84:	f247 3414 	movw	r4, #29460	@ 0x7314
 801dd88:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801dd8c:	2500      	movs	r5, #0
 801dd8e:	bf00      	nop
 801dd90:	f7ff ff4e 	bl	801dc30 <os_timer_get_current_time>
 801dd94:	6822      	ldr	r2, [r4, #0]
 801dd96:	3203      	adds	r2, #3
 801dd98:	f145 0300 	adc.w	r3, r5, #0
 801dd9c:	1a10      	subs	r0, r2, r0
 801dd9e:	eb73 0001 	sbcs.w	r0, r3, r1
 801dda2:	d2f5      	bcs.n	801dd90 <osTimerHandler+0xe0>
 801dda4:	7db9      	ldrb	r1, [r7, #22]
 801dda6:	f8d9 0000 	ldr.w	r0, [r9]
 801ddaa:	2900      	cmp	r1, #0
 801ddac:	bf18      	it	ne
 801ddae:	4607      	movne	r7, r0
 801ddb0:	b32f      	cbz	r7, 801ddfe <osTimerHandler+0x14e>
 801ddb2:	6881      	ldr	r1, [r0, #8]
 801ddb4:	68b8      	ldr	r0, [r7, #8]
 801ddb6:	4281      	cmp	r1, r0
 801ddb8:	d321      	bcc.n	801ddfe <osTimerHandler+0x14e>
 801ddba:	7dfa      	ldrb	r2, [r7, #23]
 801ddbc:	8ab9      	ldrh	r1, [r7, #20]
 801ddbe:	07d2      	lsls	r2, r2, #31
 801ddc0:	d019      	beq.n	801ddf6 <osTimerHandler+0x146>
 801ddc2:	f3c1 0244 	ubfx	r2, r1, #1, #5
 801ddc6:	f3c1 1384 	ubfx	r3, r1, #6, #5
 801ddca:	fb02 f203 	mul.w	r2, r2, r3
 801ddce:	eb02 22d1 	add.w	r2, r2, r1, lsr #11
 801ddd2:	2a1f      	cmp	r2, #31
 801ddd4:	d30f      	bcc.n	801ddf6 <osTimerHandler+0x146>
 801ddd6:	084a      	lsrs	r2, r1, #1
 801ddd8:	098b      	lsrs	r3, r1, #6
 801ddda:	fb03 f202 	mul.w	r2, r3, r2
 801ddde:	3001      	adds	r0, #1
 801dde0:	eb01 22c2 	add.w	r2, r1, r2, lsl #11
 801dde4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dde8:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 801ddec:	440a      	add	r2, r1
 801ddee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801ddf2:	60b8      	str	r0, [r7, #8]
 801ddf4:	82ba      	strh	r2, [r7, #20]
 801ddf6:	f001 0101 	and.w	r1, r1, #1
 801ddfa:	f004 fdee 	bl	80229da <hw_ll_timer_start>
 801ddfe:	2098      	movs	r0, #152	@ 0x98
 801de00:	f7fd fdd6 	bl	801b9b0 <bsp_debug_gpio_clear>
 801de04:	2400      	movs	r4, #0
 801de06:	e001      	b.n	801de0c <osTimerHandler+0x15c>
 801de08:	f04f 34ff 	mov.w	r4, #4294967295
 801de0c:	f247 20f0 	movw	r0, #29424	@ 0x72f0
 801de10:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801de14:	6801      	ldr	r1, [r0, #0]
 801de16:	b181      	cbz	r1, 801de3a <osTimerHandler+0x18a>
 801de18:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801de1c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801de20:	2202      	movs	r2, #2
 801de22:	4603      	mov	r3, r0
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	3a01      	subs	r2, #1
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d1fb      	bne.n	801de24 <osTimerHandler+0x174>
 801de2c:	b11a      	cbz	r2, 801de36 <osTimerHandler+0x186>
 801de2e:	6800      	ldr	r0, [r0, #0]
 801de30:	b918      	cbnz	r0, 801de3a <osTimerHandler+0x18a>
 801de32:	2000      	movs	r0, #0
 801de34:	e000      	b.n	801de38 <osTimerHandler+0x188>
 801de36:	2002      	movs	r0, #2
 801de38:	4788      	blx	r1
 801de3a:	f8d8 0000 	ldr.w	r0, [r8]
 801de3e:	f7fd fdd8 	bl	801b9f2 <os_rcrsv_mutex_release>
 801de42:	4620      	mov	r0, r4
 801de44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801de48 <os_timer_create>:
 801de48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de4a:	b081      	sub	sp, #4
 801de4c:	4606      	mov	r6, r0
 801de4e:	2053      	movs	r0, #83	@ 0x53
 801de50:	4615      	mov	r5, r2
 801de52:	460f      	mov	r7, r1
 801de54:	f7fd fdaa 	bl	801b9ac <bsp_debug_gpio_set>
 801de58:	f247 7064 	movw	r0, #30564	@ 0x7764
 801de5c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801de60:	f7ff fe2a 	bl	801dab8 <os_mem_pool_alloc>
 801de64:	b390      	cbz	r0, 801decc <os_timer_create+0x84>
 801de66:	4604      	mov	r4, r0
 801de68:	b36e      	cbz	r6, 801dec6 <os_timer_create+0x7e>
 801de6a:	2002      	movs	r0, #2
 801de6c:	75a0      	strb	r0, [r4, #22]
 801de6e:	7de0      	ldrb	r0, [r4, #23]
 801de70:	f007 0101 	and.w	r1, r7, #1
 801de74:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801de78:	4408      	add	r0, r1
 801de7a:	75e0      	strb	r0, [r4, #23]
 801de7c:	8aa0      	ldrh	r0, [r4, #20]
 801de7e:	2100      	movs	r1, #0
 801de80:	e9c4 1602 	strd	r1, r6, [r4, #8]
 801de84:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 801de88:	f000 0001 	and.w	r0, r0, #1
 801de8c:	e9c4 1100 	strd	r1, r1, [r4]
 801de90:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801de94:	82a0      	strh	r0, [r4, #20]
 801de96:	6830      	ldr	r0, [r6, #0]
 801de98:	f04f 31ff 	mov.w	r1, #4294967295
 801de9c:	6125      	str	r5, [r4, #16]
 801de9e:	f7fd fda2 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801dea2:	f247 25f8 	movw	r5, #29432	@ 0x72f8
 801dea6:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801deaa:	7828      	ldrb	r0, [r5, #0]
 801deac:	b938      	cbnz	r0, 801debe <os_timer_create+0x76>
 801deae:	f64d 40b1 	movw	r0, #56497	@ 0xdcb1
 801deb2:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801deb6:	f004 fd83 	bl	80229c0 <hw_ll_timer_init>
 801deba:	2001      	movs	r0, #1
 801debc:	7028      	strb	r0, [r5, #0]
 801debe:	6830      	ldr	r0, [r6, #0]
 801dec0:	f7fd fd97 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dec4:	e003      	b.n	801dece <os_timer_create+0x86>
 801dec6:	4620      	mov	r0, r4
 801dec8:	f7ff fdf8 	bl	801dabc <os_mem_pool_free>
 801decc:	2400      	movs	r4, #0
 801dece:	2053      	movs	r0, #83	@ 0x53
 801ded0:	f7fd fd6e 	bl	801b9b0 <bsp_debug_gpio_clear>
 801ded4:	4620      	mov	r0, r4
 801ded6:	b001      	add	sp, #4
 801ded8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801deda <os_timer_set_prio>:
 801deda:	b5b0      	push	{r4, r5, r7, lr}
 801dedc:	460c      	mov	r4, r1
 801dede:	2101      	movs	r1, #1
 801dee0:	4605      	mov	r5, r0
 801dee2:	2800      	cmp	r0, #0
 801dee4:	bf18      	it	ne
 801dee6:	2001      	movne	r0, #1
 801dee8:	f7fd fd19 	bl	801b91e <bsp_assert>
 801deec:	7de8      	ldrb	r0, [r5, #23]
 801deee:	f004 0101 	and.w	r1, r4, #1
 801def2:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 801def6:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
 801defa:	75e8      	strb	r0, [r5, #23]
 801defc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801df00 <os_timer_is_any_near_sw_timer_hg_prio>:
 801df00:	b570      	push	{r4, r5, r6, lr}
 801df02:	f247 24f4 	movw	r4, #29428	@ 0x72f4
 801df06:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801df0a:	bf00      	nop
 801df0c:	6824      	ldr	r4, [r4, #0]
 801df0e:	b194      	cbz	r4, 801df36 <os_timer_is_any_near_sw_timer_hg_prio+0x36>
 801df10:	8aa0      	ldrh	r0, [r4, #20]
 801df12:	68a5      	ldr	r5, [r4, #8]
 801df14:	f000 0601 	and.w	r6, r0, #1
 801df18:	f7ff fe8a 	bl	801dc30 <os_timer_get_current_time>
 801df1c:	3006      	adds	r0, #6
 801df1e:	f141 0100 	adc.w	r1, r1, #0
 801df22:	1b40      	subs	r0, r0, r5
 801df24:	eb71 0006 	sbcs.w	r0, r1, r6
 801df28:	d305      	bcc.n	801df36 <os_timer_is_any_near_sw_timer_hg_prio+0x36>
 801df2a:	7de0      	ldrb	r0, [r4, #23]
 801df2c:	0780      	lsls	r0, r0, #30
 801df2e:	bf44      	itt	mi
 801df30:	2001      	movmi	r0, #1
 801df32:	bd70      	popmi	{r4, r5, r6, pc}
 801df34:	e7ea      	b.n	801df0c <os_timer_is_any_near_sw_timer_hg_prio+0xc>
 801df36:	2000      	movs	r0, #0
 801df38:	bd70      	pop	{r4, r5, r6, pc}

0801df3a <os_timer_start>:
 801df3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df3c:	b081      	sub	sp, #4
 801df3e:	b370      	cbz	r0, 801df9e <os_timer_start+0x64>
 801df40:	4604      	mov	r4, r0
 801df42:	7d80      	ldrb	r0, [r0, #22]
 801df44:	b358      	cbz	r0, 801df9e <os_timer_start+0x64>
 801df46:	f248 16e8 	movw	r6, #33256	@ 0x81e8
 801df4a:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801df4e:	6830      	ldr	r0, [r6, #0]
 801df50:	460d      	mov	r5, r1
 801df52:	f04f 31ff 	mov.w	r1, #4294967295
 801df56:	f7fd fd46 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801df5a:	f000 f82f 	bl	801dfbc <remove_stopped_and_expired_timers>
 801df5e:	7da7      	ldrb	r7, [r4, #22]
 801df60:	4620      	mov	r0, r4
 801df62:	4629      	mov	r1, r5
 801df64:	f000 f856 	bl	801e014 <add_timer_to_List>
 801df68:	f247 20f0 	movw	r0, #29424	@ 0x72f0
 801df6c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801df70:	f247 25f4 	movw	r5, #29428	@ 0x72f4
 801df74:	6801      	ldr	r1, [r0, #0]
 801df76:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801df7a:	6828      	ldr	r0, [r5, #0]
 801df7c:	b121      	cbz	r1, 801df88 <os_timer_start+0x4e>
 801df7e:	42a0      	cmp	r0, r4
 801df80:	d102      	bne.n	801df88 <os_timer_start+0x4e>
 801df82:	2001      	movs	r0, #1
 801df84:	4788      	blx	r1
 801df86:	6828      	ldr	r0, [r5, #0]
 801df88:	42a0      	cmp	r0, r4
 801df8a:	d10b      	bne.n	801dfa4 <os_timer_start+0x6a>
 801df8c:	2f01      	cmp	r7, #1
 801df8e:	d009      	beq.n	801dfa4 <os_timer_start+0x6a>
 801df90:	8a81      	ldrh	r1, [r0, #20]
 801df92:	6880      	ldr	r0, [r0, #8]
 801df94:	f001 0101 	and.w	r1, r1, #1
 801df98:	f004 fd1f 	bl	80229da <hw_ll_timer_start>
 801df9c:	e008      	b.n	801dfb0 <os_timer_start+0x76>
 801df9e:	f04f 30ff 	mov.w	r0, #4294967295
 801dfa2:	e009      	b.n	801dfb8 <os_timer_start+0x7e>
 801dfa4:	42a0      	cmp	r0, r4
 801dfa6:	bf04      	itt	eq
 801dfa8:	7de1      	ldrbeq	r1, [r4, #23]
 801dfaa:	ea5f 71c1 	movseq.w	r1, r1, lsl #31
 801dfae:	d0ef      	beq.n	801df90 <os_timer_start+0x56>
 801dfb0:	6830      	ldr	r0, [r6, #0]
 801dfb2:	f7fd fd1e 	bl	801b9f2 <os_rcrsv_mutex_release>
 801dfb6:	2000      	movs	r0, #0
 801dfb8:	b001      	add	sp, #4
 801dfba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dfbc <remove_stopped_and_expired_timers>:
 801dfbc:	b5b0      	push	{r4, r5, r7, lr}
 801dfbe:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 801dfc2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801dfc6:	6828      	ldr	r0, [r5, #0]
 801dfc8:	f04f 31ff 	mov.w	r1, #4294967295
 801dfcc:	f7fd fd0b 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801dfd0:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801dfd4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801dfd8:	6801      	ldr	r1, [r0, #0]
 801dfda:	b1a9      	cbz	r1, 801e008 <remove_stopped_and_expired_timers+0x4c>
 801dfdc:	2200      	movs	r2, #0
 801dfde:	bf00      	nop
 801dfe0:	7d8b      	ldrb	r3, [r1, #22]
 801dfe2:	3b01      	subs	r3, #1
 801dfe4:	2b01      	cmp	r3, #1
 801dfe6:	460b      	mov	r3, r1
 801dfe8:	d80a      	bhi.n	801e000 <remove_stopped_and_expired_timers+0x44>
 801dfea:	6803      	ldr	r3, [r0, #0]
 801dfec:	4299      	cmp	r1, r3
 801dfee:	d003      	beq.n	801dff8 <remove_stopped_and_expired_timers+0x3c>
 801dff0:	4613      	mov	r3, r2
 801dff2:	b912      	cbnz	r2, 801dffa <remove_stopped_and_expired_timers+0x3e>
 801dff4:	2300      	movs	r3, #0
 801dff6:	e003      	b.n	801e000 <remove_stopped_and_expired_timers+0x44>
 801dff8:	4603      	mov	r3, r0
 801dffa:	680c      	ldr	r4, [r1, #0]
 801dffc:	601c      	str	r4, [r3, #0]
 801dffe:	4613      	mov	r3, r2
 801e000:	6809      	ldr	r1, [r1, #0]
 801e002:	461a      	mov	r2, r3
 801e004:	2900      	cmp	r1, #0
 801e006:	d1eb      	bne.n	801dfe0 <remove_stopped_and_expired_timers+0x24>
 801e008:	6828      	ldr	r0, [r5, #0]
 801e00a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801e00e:	f7fd bcf0 	b.w	801b9f2 <os_rcrsv_mutex_release>
	...

0801e014 <add_timer_to_List>:
 801e014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e018:	4604      	mov	r4, r0
 801e01a:	7dc0      	ldrb	r0, [r0, #23]
 801e01c:	460d      	mov	r5, r1
 801e01e:	07c0      	lsls	r0, r0, #31
 801e020:	6061      	str	r1, [r4, #4]
 801e022:	d007      	beq.n	801e034 <add_timer_to_List+0x20>
 801e024:	68a0      	ldr	r0, [r4, #8]
 801e026:	b128      	cbz	r0, 801e034 <add_timer_to_List+0x20>
 801e028:	182d      	adds	r5, r5, r0
 801e02a:	f04f 0000 	mov.w	r0, #0
 801e02e:	f140 0600 	adc.w	r6, r0, #0
 801e032:	e004      	b.n	801e03e <add_timer_to_List+0x2a>
 801e034:	f7ff fdfc 	bl	801dc30 <os_timer_get_current_time>
 801e038:	182d      	adds	r5, r5, r0
 801e03a:	f141 0600 	adc.w	r6, r1, #0
 801e03e:	8aa0      	ldrh	r0, [r4, #20]
 801e040:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 801e044:	f366 0000 	bfi	r0, r6, #0, #1
 801e048:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801e04c:	82a0      	strh	r0, [r4, #20]
 801e04e:	f8d8 0000 	ldr.w	r0, [r8]
 801e052:	2700      	movs	r7, #0
 801e054:	f04f 31ff 	mov.w	r1, #4294967295
 801e058:	60a5      	str	r5, [r4, #8]
 801e05a:	75a7      	strb	r7, [r4, #22]
 801e05c:	f7fd fcc3 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801e060:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801e064:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e068:	6801      	ldr	r1, [r0, #0]
 801e06a:	b1a9      	cbz	r1, 801e098 <add_timer_to_List+0x84>
 801e06c:	8a8a      	ldrh	r2, [r1, #20]
 801e06e:	688b      	ldr	r3, [r1, #8]
 801e070:	f002 0201 	and.w	r2, r2, #1
 801e074:	1aeb      	subs	r3, r5, r3
 801e076:	eb76 0202 	sbcs.w	r2, r6, r2
 801e07a:	d201      	bcs.n	801e080 <add_timer_to_List+0x6c>
 801e07c:	2700      	movs	r7, #0
 801e07e:	e00c      	b.n	801e09a <add_timer_to_List+0x86>
 801e080:	460f      	mov	r7, r1
 801e082:	6809      	ldr	r1, [r1, #0]
 801e084:	b141      	cbz	r1, 801e098 <add_timer_to_List+0x84>
 801e086:	8a8a      	ldrh	r2, [r1, #20]
 801e088:	688b      	ldr	r3, [r1, #8]
 801e08a:	f002 0201 	and.w	r2, r2, #1
 801e08e:	1aeb      	subs	r3, r5, r3
 801e090:	eb76 0202 	sbcs.w	r2, r6, r2
 801e094:	d2f4      	bcs.n	801e080 <add_timer_to_List+0x6c>
 801e096:	e000      	b.n	801e09a <add_timer_to_List+0x86>
 801e098:	2100      	movs	r1, #0
 801e09a:	6021      	str	r1, [r4, #0]
 801e09c:	6802      	ldr	r2, [r0, #0]
 801e09e:	4291      	cmp	r1, r2
 801e0a0:	bf08      	it	eq
 801e0a2:	4607      	moveq	r7, r0
 801e0a4:	603c      	str	r4, [r7, #0]
 801e0a6:	f8d8 0000 	ldr.w	r0, [r8]
 801e0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0ae:	f7fd bca0 	b.w	801b9f2 <os_rcrsv_mutex_release>
	...

0801e0b4 <os_timer_stop>:
 801e0b4:	b378      	cbz	r0, 801e116 <os_timer_stop+0x62>
 801e0b6:	b570      	push	{r4, r5, r6, lr}
 801e0b8:	7d86      	ldrb	r6, [r0, #22]
 801e0ba:	4604      	mov	r4, r0
 801e0bc:	2e01      	cmp	r6, #1
 801e0be:	bf07      	ittee	eq
 801e0c0:	7de0      	ldrbeq	r0, [r4, #23]
 801e0c2:	ea5f 70c0 	movseq.w	r0, r0, lsl #31
 801e0c6:	2002      	movne	r0, #2
 801e0c8:	75a0      	strbne	r0, [r4, #22]
 801e0ca:	8aa1      	ldrh	r1, [r4, #20]
 801e0cc:	2000      	movs	r0, #0
 801e0ce:	60a0      	str	r0, [r4, #8]
 801e0d0:	f001 0001 	and.w	r0, r1, #1
 801e0d4:	82a0      	strh	r0, [r4, #20]
 801e0d6:	f7ff ff71 	bl	801dfbc <remove_stopped_and_expired_timers>
 801e0da:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 801e0de:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e0e2:	6828      	ldr	r0, [r5, #0]
 801e0e4:	f04f 31ff 	mov.w	r1, #4294967295
 801e0e8:	f7fd fc7d 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801e0ec:	f247 20f0 	movw	r0, #29424	@ 0x72f0
 801e0f0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e0f4:	6801      	ldr	r1, [r0, #0]
 801e0f6:	b199      	cbz	r1, 801e120 <os_timer_stop+0x6c>
 801e0f8:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801e0fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e100:	2202      	movs	r2, #2
 801e102:	4603      	mov	r3, r0
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	3a01      	subs	r2, #1
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d1fb      	bne.n	801e104 <os_timer_stop+0x50>
 801e10c:	b132      	cbz	r2, 801e11c <os_timer_stop+0x68>
 801e10e:	6802      	ldr	r2, [r0, #0]
 801e110:	b962      	cbnz	r2, 801e12c <os_timer_stop+0x78>
 801e112:	2000      	movs	r0, #0
 801e114:	e003      	b.n	801e11e <os_timer_stop+0x6a>
 801e116:	f04f 30ff 	mov.w	r0, #4294967295
 801e11a:	4770      	bx	lr
 801e11c:	2002      	movs	r0, #2
 801e11e:	4788      	blx	r1
 801e120:	f247 20f4 	movw	r0, #29428	@ 0x72f4
 801e124:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e128:	6802      	ldr	r2, [r0, #0]
 801e12a:	b1ea      	cbz	r2, 801e168 <os_timer_stop+0xb4>
 801e12c:	6820      	ldr	r0, [r4, #0]
 801e12e:	4282      	cmp	r2, r0
 801e130:	bf08      	it	eq
 801e132:	2e00      	cmpeq	r6, #0
 801e134:	d120      	bne.n	801e178 <os_timer_stop+0xc4>
 801e136:	7dd0      	ldrb	r0, [r2, #23]
 801e138:	8a91      	ldrh	r1, [r2, #20]
 801e13a:	07c0      	lsls	r0, r0, #31
 801e13c:	d017      	beq.n	801e16e <os_timer_stop+0xba>
 801e13e:	f3c1 0044 	ubfx	r0, r1, #1, #5
 801e142:	f3c1 1384 	ubfx	r3, r1, #6, #5
 801e146:	fb00 f003 	mul.w	r0, r0, r3
 801e14a:	eb00 20d1 	add.w	r0, r0, r1, lsr #11
 801e14e:	281f      	cmp	r0, #31
 801e150:	d30d      	bcc.n	801e16e <os_timer_stop+0xba>
 801e152:	f001 033f 	and.w	r3, r1, #63	@ 0x3f
 801e156:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 801e15a:	6893      	ldr	r3, [r2, #8]
 801e15c:	f500 6600 	add.w	r6, r0, #2048	@ 0x800
 801e160:	1c58      	adds	r0, r3, #1
 801e162:	6090      	str	r0, [r2, #8]
 801e164:	8296      	strh	r6, [r2, #20]
 801e166:	e003      	b.n	801e170 <os_timer_stop+0xbc>
 801e168:	f004 fc46 	bl	80229f8 <hw_ll_timer_stop>
 801e16c:	e004      	b.n	801e178 <os_timer_stop+0xc4>
 801e16e:	6890      	ldr	r0, [r2, #8]
 801e170:	f001 0101 	and.w	r1, r1, #1
 801e174:	f004 fc31 	bl	80229da <hw_ll_timer_start>
 801e178:	6828      	ldr	r0, [r5, #0]
 801e17a:	f7fd fc3a 	bl	801b9f2 <os_rcrsv_mutex_release>
 801e17e:	2000      	movs	r0, #0
 801e180:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e184 <os_timer_get_active_sw_timers_number>:
 801e184:	f247 21f4 	movw	r1, #29428	@ 0x72f4
 801e188:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801e18c:	f04f 30ff 	mov.w	r0, #4294967295
 801e190:	6809      	ldr	r1, [r1, #0]
 801e192:	3001      	adds	r0, #1
 801e194:	2900      	cmp	r1, #0
 801e196:	d1fb      	bne.n	801e190 <os_timer_get_active_sw_timers_number+0xc>
 801e198:	4770      	bx	lr

0801e19a <os_timer_free>:
 801e19a:	b580      	push	{r7, lr}
 801e19c:	b118      	cbz	r0, 801e1a6 <os_timer_free+0xc>
 801e19e:	7d81      	ldrb	r1, [r0, #22]
 801e1a0:	b119      	cbz	r1, 801e1aa <os_timer_free+0x10>
 801e1a2:	f7ff fc8b 	bl	801dabc <os_mem_pool_free>
 801e1a6:	2000      	movs	r0, #0
 801e1a8:	bd80      	pop	{r7, pc}
 801e1aa:	f04f 30ff 	mov.w	r0, #4294967295
 801e1ae:	bd80      	pop	{r7, pc}

0801e1b0 <os_timer_stop_free>:
 801e1b0:	b570      	push	{r4, r5, r6, lr}
 801e1b2:	4604      	mov	r4, r0
 801e1b4:	6800      	ldr	r0, [r0, #0]
 801e1b6:	f7ff ff7d 	bl	801e0b4 <os_timer_stop>
 801e1ba:	6821      	ldr	r1, [r4, #0]
 801e1bc:	4605      	mov	r5, r0
 801e1be:	f04f 0600 	mov.w	r6, #0
 801e1c2:	b121      	cbz	r1, 801e1ce <os_timer_stop_free+0x1e>
 801e1c4:	7d88      	ldrb	r0, [r1, #22]
 801e1c6:	b120      	cbz	r0, 801e1d2 <os_timer_stop_free+0x22>
 801e1c8:	4608      	mov	r0, r1
 801e1ca:	f7ff fc77 	bl	801dabc <os_mem_pool_free>
 801e1ce:	2000      	movs	r0, #0
 801e1d0:	e001      	b.n	801e1d6 <os_timer_stop_free+0x26>
 801e1d2:	f04f 30ff 	mov.w	r0, #4294967295
 801e1d6:	4328      	orrs	r0, r5
 801e1d8:	6026      	str	r6, [r4, #0]
 801e1da:	bd70      	pop	{r4, r5, r6, pc}

0801e1dc <os_timer_set>:
 801e1dc:	b570      	push	{r4, r5, r6, lr}
 801e1de:	460c      	mov	r4, r1
 801e1e0:	4605      	mov	r5, r0
 801e1e2:	f7fd fbfc 	bl	801b9de <os_disable_isr>
 801e1e6:	4628      	mov	r0, r5
 801e1e8:	f7ff ff64 	bl	801e0b4 <os_timer_stop>
 801e1ec:	4606      	mov	r6, r0
 801e1ee:	4628      	mov	r0, r5
 801e1f0:	4621      	mov	r1, r4
 801e1f2:	f7ff fea2 	bl	801df3a <os_timer_start>
 801e1f6:	ea40 0406 	orr.w	r4, r0, r6
 801e1fa:	f7fd fbf2 	bl	801b9e2 <os_enable_isr>
 801e1fe:	4620      	mov	r0, r4
 801e200:	bd70      	pop	{r4, r5, r6, pc}

0801e202 <os_get_tmr_state>:
 801e202:	7d80      	ldrb	r0, [r0, #22]
 801e204:	4770      	bx	lr

0801e206 <ll_tx_pwr_if_tx_power_params_init>:
 801e206:	b570      	push	{r4, r5, r6, lr}
 801e208:	f247 3404 	movw	r4, #29444	@ 0x7304
 801e20c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e210:	4620      	mov	r0, r4
 801e212:	2100      	movs	r1, #0
 801e214:	2208      	movs	r2, #8
 801e216:	2600      	movs	r6, #0
 801e218:	f002 fb64 	bl	80208e4 <ble_memset>
 801e21c:	2000      	movs	r0, #0
 801e21e:	f000 f82f 	bl	801e280 <ll_tx_pwr_if_select_tx_power_mode>
 801e222:	f247 300c 	movw	r0, #29452	@ 0x730c
 801e226:	f247 3510 	movw	r5, #29456	@ 0x7310
 801e22a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e22e:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e232:	6006      	str	r6, [r0, #0]
 801e234:	4628      	mov	r0, r5
 801e236:	2100      	movs	r1, #0
 801e238:	2202      	movs	r2, #2
 801e23a:	f002 fb53 	bl	80208e4 <ble_memset>
 801e23e:	7920      	ldrb	r0, [r4, #4]
 801e240:	6821      	ldr	r1, [r4, #0]
 801e242:	3801      	subs	r0, #1
 801e244:	b2c0      	uxtb	r0, r0
 801e246:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801e24a:	f247 3200 	movw	r2, #29440	@ 0x7300
 801e24e:	78c1      	ldrb	r1, [r0, #3]
 801e250:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e254:	7011      	strb	r1, [r2, #0]
 801e256:	78c1      	ldrb	r1, [r0, #3]
 801e258:	f247 3201 	movw	r2, #29441	@ 0x7301
 801e25c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e260:	7011      	strb	r1, [r2, #0]
 801e262:	78c1      	ldrb	r1, [r0, #3]
 801e264:	f247 3202 	movw	r2, #29442	@ 0x7302
 801e268:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e26c:	7011      	strb	r1, [r2, #0]
 801e26e:	78c0      	ldrb	r0, [r0, #3]
 801e270:	f247 3103 	movw	r1, #29443	@ 0x7303
 801e274:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801e278:	702e      	strb	r6, [r5, #0]
 801e27a:	706e      	strb	r6, [r5, #1]
 801e27c:	7008      	strb	r0, [r1, #0]
 801e27e:	bd70      	pop	{r4, r5, r6, pc}

0801e280 <ll_tx_pwr_if_select_tx_power_mode>:
 801e280:	b570      	push	{r4, r5, r6, lr}
 801e282:	f24d 519f 	movw	r1, #54687	@ 0xd59f
 801e286:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801e28a:	780c      	ldrb	r4, [r1, #0]
 801e28c:	f247 3504 	movw	r5, #29444	@ 0x7304
 801e290:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e294:	b16c      	cbz	r4, 801e2b2 <ll_tx_pwr_if_select_tx_power_mode+0x32>
 801e296:	f24d 51a0 	movw	r1, #54688	@ 0xd5a0
 801e29a:	2200      	movs	r2, #0
 801e29c:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801e2a0:	79cb      	ldrb	r3, [r1, #7]
 801e2a2:	4283      	cmp	r3, r0
 801e2a4:	d007      	beq.n	801e2b6 <ll_tx_pwr_if_select_tx_power_mode+0x36>
 801e2a6:	3201      	adds	r2, #1
 801e2a8:	4294      	cmp	r4, r2
 801e2aa:	f101 0108 	add.w	r1, r1, #8
 801e2ae:	d1f7      	bne.n	801e2a0 <ll_tx_pwr_if_select_tx_power_mode+0x20>
 801e2b0:	e00b      	b.n	801e2ca <ll_tx_pwr_if_select_tx_power_mode+0x4a>
 801e2b2:	2600      	movs	r6, #0
 801e2b4:	e007      	b.n	801e2c6 <ll_tx_pwr_if_select_tx_power_mode+0x46>
 801e2b6:	f247 3004 	movw	r0, #29444	@ 0x7304
 801e2ba:	b2d6      	uxtb	r6, r2
 801e2bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e2c0:	2208      	movs	r2, #8
 801e2c2:	f002 fabf 	bl	8020844 <ble_memcpy>
 801e2c6:	42a6      	cmp	r6, r4
 801e2c8:	d10c      	bne.n	801e2e4 <ll_tx_pwr_if_select_tx_power_mode+0x64>
 801e2ca:	f247 3004 	movw	r0, #29444	@ 0x7304
 801e2ce:	f24d 51a0 	movw	r1, #54688	@ 0xd5a0
 801e2d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e2d6:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801e2da:	2208      	movs	r2, #8
 801e2dc:	f002 fab2 	bl	8020844 <ble_memcpy>
 801e2e0:	24ff      	movs	r4, #255	@ 0xff
 801e2e2:	e000      	b.n	801e2e6 <ll_tx_pwr_if_select_tx_power_mode+0x66>
 801e2e4:	2400      	movs	r4, #0
 801e2e6:	7968      	ldrb	r0, [r5, #5]
 801e2e8:	79a9      	ldrb	r1, [r5, #6]
 801e2ea:	f7fe fe9d 	bl	801d028 <llhwc_phy_patch_tx_power_mode_phy_reg>
 801e2ee:	7928      	ldrb	r0, [r5, #4]
 801e2f0:	6829      	ldr	r1, [r5, #0]
 801e2f2:	3801      	subs	r0, #1
 801e2f4:	b2c0      	uxtb	r0, r0
 801e2f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801e2fa:	f247 3200 	movw	r2, #29440	@ 0x7300
 801e2fe:	78c1      	ldrb	r1, [r0, #3]
 801e300:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e304:	7011      	strb	r1, [r2, #0]
 801e306:	78c1      	ldrb	r1, [r0, #3]
 801e308:	f247 3201 	movw	r2, #29441	@ 0x7301
 801e30c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e310:	7011      	strb	r1, [r2, #0]
 801e312:	78c1      	ldrb	r1, [r0, #3]
 801e314:	f247 3202 	movw	r2, #29442	@ 0x7302
 801e318:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e31c:	7011      	strb	r1, [r2, #0]
 801e31e:	78c1      	ldrb	r1, [r0, #3]
 801e320:	f247 3203 	movw	r2, #29443	@ 0x7303
 801e324:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e328:	4620      	mov	r0, r4
 801e32a:	7011      	strb	r1, [r2, #0]
 801e32c:	bd70      	pop	{r4, r5, r6, pc}

0801e32e <ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels>:
 801e32e:	f247 3c04 	movw	ip, #29444	@ 0x7304
 801e332:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801e336:	f8dc 3000 	ldr.w	r3, [ip]
 801e33a:	f89c 2004 	ldrb.w	r2, [ip, #4]
 801e33e:	78db      	ldrb	r3, [r3, #3]
 801e340:	7003      	strb	r3, [r0, #0]
 801e342:	1e50      	subs	r0, r2, #1
 801e344:	f8dc 2000 	ldr.w	r2, [ip]
 801e348:	b2c0      	uxtb	r0, r0
 801e34a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801e34e:	78c0      	ldrb	r0, [r0, #3]
 801e350:	7008      	strb	r0, [r1, #0]
 801e352:	4770      	bx	lr

0801e354 <ll_tx_pwr_if_get_tx_pwr_table_offset>:
 801e354:	b580      	push	{r7, lr}
 801e356:	f247 3204 	movw	r2, #29444	@ 0x7304
 801e35a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e35e:	7913      	ldrb	r3, [r2, #4]
 801e360:	f8d2 c000 	ldr.w	ip, [r2]
 801e364:	3b01      	subs	r3, #1
 801e366:	b2da      	uxtb	r2, r3
 801e368:	eb0c 0382 	add.w	r3, ip, r2, lsl #2
 801e36c:	f99c e003 	ldrsb.w	lr, [ip, #3]
 801e370:	f993 3003 	ldrsb.w	r3, [r3, #3]
 801e374:	4283      	cmp	r3, r0
 801e376:	bfa8      	it	ge
 801e378:	4603      	movge	r3, r0
 801e37a:	4586      	cmp	lr, r0
 801e37c:	bfc8      	it	gt
 801e37e:	4673      	movgt	r3, lr
 801e380:	eba3 000e 	sub.w	r0, r3, lr
 801e384:	b2c0      	uxtb	r0, r0
 801e386:	4290      	cmp	r0, r2
 801e388:	bf38      	it	cc
 801e38a:	4602      	movcc	r2, r0
 801e38c:	2901      	cmp	r1, #1
 801e38e:	d110      	bne.n	801e3b2 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x5e>
 801e390:	eb0c 0082 	add.w	r0, ip, r2, lsl #2
 801e394:	b2d9      	uxtb	r1, r3
 801e396:	78c0      	ldrb	r0, [r0, #3]
 801e398:	4281      	cmp	r1, r0
 801e39a:	d00a      	beq.n	801e3b2 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x5e>
 801e39c:	b142      	cbz	r2, 801e3b0 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x5c>
 801e39e:	3a01      	subs	r2, #1
 801e3a0:	b2d0      	uxtb	r0, r2
 801e3a2:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 801e3a6:	eb02 010e 	add.w	r1, r2, lr
 801e3aa:	78c0      	ldrb	r0, [r0, #3]
 801e3ac:	b2c9      	uxtb	r1, r1
 801e3ae:	e7f3      	b.n	801e398 <ll_tx_pwr_if_get_tx_pwr_table_offset+0x44>
 801e3b0:	2200      	movs	r2, #0
 801e3b2:	b2d0      	uxtb	r0, r2
 801e3b4:	bd80      	pop	{r7, pc}

0801e3b6 <ll_tx_pwr_if_epa_enable>:
 801e3b6:	b5b0      	push	{r4, r5, r7, lr}
 801e3b8:	f247 3510 	movw	r5, #29456	@ 0x7310
 801e3bc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e3c0:	782a      	ldrb	r2, [r5, #0]
 801e3c2:	b18a      	cbz	r2, 801e3e8 <ll_tx_pwr_if_epa_enable+0x32>
 801e3c4:	f247 310c 	movw	r1, #29452	@ 0x730c
 801e3c8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801e3cc:	6809      	ldr	r1, [r1, #0]
 801e3ce:	b159      	cbz	r1, 801e3e8 <ll_tx_pwr_if_epa_enable+0x32>
 801e3d0:	786b      	ldrb	r3, [r5, #1]
 801e3d2:	2801      	cmp	r0, #1
 801e3d4:	d103      	bne.n	801e3de <ll_tx_pwr_if_epa_enable+0x28>
 801e3d6:	2a01      	cmp	r2, #1
 801e3d8:	bf08      	it	eq
 801e3da:	2b00      	cmpeq	r3, #0
 801e3dc:	d005      	beq.n	801e3ea <ll_tx_pwr_if_epa_enable+0x34>
 801e3de:	b918      	cbnz	r0, 801e3e8 <ll_tx_pwr_if_epa_enable+0x32>
 801e3e0:	2a01      	cmp	r2, #1
 801e3e2:	bf08      	it	eq
 801e3e4:	2b01      	cmpeq	r3, #1
 801e3e6:	d002      	beq.n	801e3ee <ll_tx_pwr_if_epa_enable+0x38>
 801e3e8:	bdb0      	pop	{r4, r5, r7, pc}
 801e3ea:	2401      	movs	r4, #1
 801e3ec:	e000      	b.n	801e3f0 <ll_tx_pwr_if_epa_enable+0x3a>
 801e3ee:	2400      	movs	r4, #0
 801e3f0:	4620      	mov	r0, r4
 801e3f2:	4788      	blx	r1
 801e3f4:	706c      	strb	r4, [r5, #1]
 801e3f6:	bdb0      	pop	{r4, r5, r7, pc}

0801e3f8 <ll_tx_pwr_if_is_le_power_class_1_supported>:
 801e3f8:	f247 3004 	movw	r0, #29444	@ 0x7304
 801e3fc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e400:	7901      	ldrb	r1, [r0, #4]
 801e402:	6800      	ldr	r0, [r0, #0]
 801e404:	3901      	subs	r1, #1
 801e406:	b2c9      	uxtb	r1, r1
 801e408:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801e40c:	f990 1003 	ldrsb.w	r1, [r0, #3]
 801e410:	2000      	movs	r0, #0
 801e412:	290a      	cmp	r1, #10
 801e414:	bfc8      	it	gt
 801e416:	2001      	movgt	r0, #1
 801e418:	4770      	bx	lr

0801e41a <ll_tx_pwr_if_tx_pwr_params_config>:
 801e41a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e41c:	b081      	sub	sp, #4
 801e41e:	4604      	mov	r4, r0
 801e420:	4608      	mov	r0, r1
 801e422:	4611      	mov	r1, r2
 801e424:	2200      	movs	r2, #0
 801e426:	461d      	mov	r5, r3
 801e428:	f7ff ff94 	bl	801e354 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 801e42c:	f247 3704 	movw	r7, #29444	@ 0x7304
 801e430:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801e434:	6839      	ldr	r1, [r7, #0]
 801e436:	4606      	mov	r6, r0
 801e438:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801e43c:	4629      	mov	r1, r5
 801e43e:	7840      	ldrb	r0, [r0, #1]
 801e440:	f7fe fdde 	bl	801d000 <llhwc_phy_set_tx_pwr>
 801e444:	f247 32e8 	movw	r2, #29672	@ 0x73e8
 801e448:	6839      	ldr	r1, [r7, #0]
 801e44a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801e44e:	7c93      	ldrb	r3, [r2, #18]
 801e450:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 801e454:	f811 1026 	ldrb.w	r1, [r1, r6, lsl #2]
 801e458:	f003 030f 	and.w	r3, r3, #15
 801e45c:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 801e460:	78d3      	ldrb	r3, [r2, #3]
 801e462:	7491      	strb	r1, [r2, #18]
 801e464:	f810 1f02 	ldrb.w	r1, [r0, #2]!
 801e468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e46c:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 801e470:	2c01      	cmp	r4, #1
 801e472:	70d1      	strb	r1, [r2, #3]
 801e474:	d101      	bne.n	801e47a <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 801e476:	7800      	ldrb	r0, [r0, #0]
 801e478:	b108      	cbz	r0, 801e47e <ll_tx_pwr_if_tx_pwr_params_config+0x64>
 801e47a:	b001      	add	sp, #4
 801e47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e47e:	f247 3410 	movw	r4, #29456	@ 0x7310
 801e482:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e486:	7820      	ldrb	r0, [r4, #0]
 801e488:	2800      	cmp	r0, #0
 801e48a:	d0f6      	beq.n	801e47a <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 801e48c:	f247 310c 	movw	r1, #29452	@ 0x730c
 801e490:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801e494:	6809      	ldr	r1, [r1, #0]
 801e496:	2900      	cmp	r1, #0
 801e498:	d0ef      	beq.n	801e47a <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 801e49a:	2801      	cmp	r0, #1
 801e49c:	d1ed      	bne.n	801e47a <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 801e49e:	7860      	ldrb	r0, [r4, #1]
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	d1ea      	bne.n	801e47a <ll_tx_pwr_if_tx_pwr_params_config+0x60>
 801e4a4:	2001      	movs	r0, #1
 801e4a6:	2501      	movs	r5, #1
 801e4a8:	4788      	blx	r1
 801e4aa:	7065      	strb	r5, [r4, #1]
 801e4ac:	e7e5      	b.n	801e47a <ll_tx_pwr_if_tx_pwr_params_config+0x60>

0801e4ae <llhwc_slptmr_init>:
 801e4ae:	b510      	push	{r4, lr}
 801e4b0:	2101      	movs	r1, #1
 801e4b2:	4604      	mov	r4, r0
 801e4b4:	2800      	cmp	r0, #0
 801e4b6:	bf18      	it	ne
 801e4b8:	2001      	movne	r0, #1
 801e4ba:	f7fd fa30 	bl	801b91e <bsp_assert>
 801e4be:	f247 3030 	movw	r0, #29488	@ 0x7330
 801e4c2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e4c6:	6004      	str	r4, [r0, #0]
 801e4c8:	bd10      	pop	{r4, pc}

0801e4ca <llhwc_slptmr_get>:
 801e4ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ce:	b081      	sub	sp, #4
 801e4d0:	4680      	mov	r8, r0
 801e4d2:	201a      	movs	r0, #26
 801e4d4:	f7fd fa6a 	bl	801b9ac <bsp_debug_gpio_set>
 801e4d8:	f247 3530 	movw	r5, #29488	@ 0x7330
 801e4dc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e4e0:	f895 004d 	ldrb.w	r0, [r5, #77]	@ 0x4d
 801e4e4:	2801      	cmp	r0, #1
 801e4e6:	d105      	bne.n	801e4f4 <llhwc_slptmr_get+0x2a>
 801e4e8:	2014      	movs	r0, #20
 801e4ea:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801e4ee:	6800      	ldr	r0, [r0, #0]
 801e4f0:	1c46      	adds	r6, r0, #1
 801e4f2:	e000      	b.n	801e4f6 <llhwc_slptmr_get+0x2c>
 801e4f4:	6d6e      	ldr	r6, [r5, #84]	@ 0x54
 801e4f6:	f247 3988 	movw	r9, #29576	@ 0x7388
 801e4fa:	f2c2 0900 	movt	r9, #8192	@ 0x2000
 801e4fe:	f899 7014 	ldrb.w	r7, [r9, #20]
 801e502:	2f00      	cmp	r7, #0
 801e504:	d053      	beq.n	801e5ae <llhwc_slptmr_get+0xe4>
 801e506:	2f02      	cmp	r7, #2
 801e508:	d021      	beq.n	801e54e <llhwc_slptmr_get+0x84>
 801e50a:	2f01      	cmp	r7, #1
 801e50c:	d130      	bne.n	801e570 <llhwc_slptmr_get+0xa6>
 801e50e:	f8d9 4000 	ldr.w	r4, [r9]
 801e512:	f24f 0218 	movw	r2, #61464	@ 0xf018
 801e516:	07e0      	lsls	r0, r4, #31
 801e518:	0861      	lsrs	r1, r4, #1
 801e51a:	f2c0 0201 	movt	r2, #1
 801e51e:	2300      	movs	r3, #0
 801e520:	f7e1 fe8c 	bl	800023c <__aeabi_uldivmod>
 801e524:	f895 1020 	ldrb.w	r1, [r5, #32]
 801e528:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 801e52c:	2901      	cmp	r1, #1
 801e52e:	d121      	bne.n	801e574 <llhwc_slptmr_get+0xaa>
 801e530:	f64d 502f 	movw	r0, #56623	@ 0xdd2f
 801e534:	f2c0 6024 	movt	r0, #1572	@ 0x624
 801e538:	4286      	cmp	r6, r0
 801e53a:	d21b      	bcs.n	801e574 <llhwc_slptmr_get+0xaa>
 801e53c:	8ba9      	ldrh	r1, [r5, #28]
 801e53e:	2000      	movs	r0, #0
 801e540:	f101 0b01 	add.w	fp, r1, #1
 801e544:	f885 0020 	strb.w	r0, [r5, #32]
 801e548:	f8a5 b01c 	strh.w	fp, [r5, #28]
 801e54c:	e014      	b.n	801e578 <llhwc_slptmr_get+0xae>
 801e54e:	f895 0020 	ldrb.w	r0, [r5, #32]
 801e552:	2801      	cmp	r0, #1
 801e554:	d121      	bne.n	801e59a <llhwc_slptmr_get+0xd0>
 801e556:	f64d 502f 	movw	r0, #56623	@ 0xdd2f
 801e55a:	f2c0 6024 	movt	r0, #1572	@ 0x624
 801e55e:	4286      	cmp	r6, r0
 801e560:	d21b      	bcs.n	801e59a <llhwc_slptmr_get+0xd0>
 801e562:	8ba9      	ldrh	r1, [r5, #28]
 801e564:	2000      	movs	r0, #0
 801e566:	f885 0020 	strb.w	r0, [r5, #32]
 801e56a:	1c48      	adds	r0, r1, #1
 801e56c:	83a8      	strh	r0, [r5, #28]
 801e56e:	e015      	b.n	801e59c <llhwc_slptmr_get+0xd2>
 801e570:	2600      	movs	r6, #0
 801e572:	e01c      	b.n	801e5ae <llhwc_slptmr_get+0xe4>
 801e574:	f8b5 b01c 	ldrh.w	fp, [r5, #28]
 801e578:	fba4 0106 	umull	r0, r1, r4, r6
 801e57c:	f24f 0218 	movw	r2, #61464	@ 0xf018
 801e580:	f2c0 0201 	movt	r2, #1
 801e584:	2300      	movs	r3, #0
 801e586:	f7e1 fe59 	bl	800023c <__aeabi_uldivmod>
 801e58a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e58e:	fa1f f28b 	uxth.w	r2, fp
 801e592:	1a40      	subs	r0, r0, r1
 801e594:	fb0a 0602 	mla	r6, sl, r2, r0
 801e598:	e009      	b.n	801e5ae <llhwc_slptmr_get+0xe4>
 801e59a:	8ba8      	ldrh	r0, [r5, #28]
 801e59c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801e5a0:	fba6 2301 	umull	r2, r3, r6, r1
 801e5a4:	fb00 3001 	mla	r0, r0, r1, r3
 801e5a8:	0a51      	lsrs	r1, r2, #9
 801e5aa:	ea41 56c0 	orr.w	r6, r1, r0, lsl #23
 801e5ae:	f8c8 6000 	str.w	r6, [r8]
 801e5b2:	b17f      	cbz	r7, 801e5d4 <llhwc_slptmr_get+0x10a>
 801e5b4:	f895 0021 	ldrb.w	r0, [r5, #33]	@ 0x21
 801e5b8:	2801      	cmp	r0, #1
 801e5ba:	d10b      	bne.n	801e5d4 <llhwc_slptmr_get+0x10a>
 801e5bc:	f244 70ff 	movw	r0, #18431	@ 0x47ff
 801e5c0:	f2c0 10e8 	movt	r0, #488	@ 0x1e8
 801e5c4:	4286      	cmp	r6, r0
 801e5c6:	d805      	bhi.n	801e5d4 <llhwc_slptmr_get+0x10a>
 801e5c8:	8be8      	ldrh	r0, [r5, #30]
 801e5ca:	3001      	adds	r0, #1
 801e5cc:	83e8      	strh	r0, [r5, #30]
 801e5ce:	2000      	movs	r0, #0
 801e5d0:	f885 0021 	strb.w	r0, [r5, #33]	@ 0x21
 801e5d4:	201a      	movs	r0, #26
 801e5d6:	b001      	add	sp, #4
 801e5d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5dc:	f7fd b9e8 	b.w	801b9b0 <bsp_debug_gpio_clear>

0801e5e0 <llhwc_cmn_reset>:
 801e5e0:	b570      	push	{r4, r5, r6, lr}
 801e5e2:	f247 3430 	movw	r4, #29488	@ 0x7330
 801e5e6:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e5ea:	2009      	movs	r0, #9
 801e5ec:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
 801e5f0:	2005      	movs	r0, #5
 801e5f2:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 801e5f6:	f248 2048 	movw	r0, #33352	@ 0x8248
 801e5fa:	2500      	movs	r5, #0
 801e5fc:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801e600:	2100      	movs	r1, #0
 801e602:	2260      	movs	r2, #96	@ 0x60
 801e604:	60e5      	str	r5, [r4, #12]
 801e606:	8225      	strh	r5, [r4, #16]
 801e608:	74a5      	strb	r5, [r4, #18]
 801e60a:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
 801e60e:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
 801e612:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 801e616:	f002 f965 	bl	80208e4 <ble_memset>
 801e61a:	f247 30d8 	movw	r0, #29656	@ 0x73d8
 801e61e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e622:	8085      	strh	r5, [r0, #4]
 801e624:	6005      	str	r5, [r0, #0]
 801e626:	8185      	strh	r5, [r0, #12]
 801e628:	6085      	str	r5, [r0, #8]
 801e62a:	f247 30a0 	movw	r0, #29600	@ 0x73a0
 801e62e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e632:	260c      	movs	r6, #12
 801e634:	6005      	str	r5, [r0, #0]
 801e636:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801e63a:	f856 0c04 	ldr.w	r0, [r6, #-4]
 801e63e:	f020 0008 	bic.w	r0, r0, #8
 801e642:	f846 0c04 	str.w	r0, [r6, #-4]
 801e646:	f856 0c04 	ldr.w	r0, [r6, #-4]
 801e64a:	f040 0008 	orr.w	r0, r0, #8
 801e64e:	f846 0c04 	str.w	r0, [r6, #-4]
 801e652:	6830      	ldr	r0, [r6, #0]
 801e654:	f020 0004 	bic.w	r0, r0, #4
 801e658:	6030      	str	r0, [r6, #0]
 801e65a:	6830      	ldr	r0, [r6, #0]
 801e65c:	f040 0004 	orr.w	r0, r0, #4
 801e660:	6030      	str	r0, [r6, #0]
 801e662:	6830      	ldr	r0, [r6, #0]
 801e664:	f040 0002 	orr.w	r0, r0, #2
 801e668:	6030      	str	r0, [r6, #0]
 801e66a:	203c      	movs	r0, #60	@ 0x3c
 801e66c:	f7fd f947 	bl	801b8fe <bsp_delay_us>
 801e670:	2001      	movs	r0, #1
 801e672:	f000 f829 	bl	801e6c8 <llhwc_cmn_control_hclk>
 801e676:	2000      	movs	r0, #0
 801e678:	f7fd f96b 	bl	801b952 <bsp_control_aclk>
 801e67c:	6565      	str	r5, [r4, #84]	@ 0x54
 801e67e:	f247 3488 	movw	r4, #29576	@ 0x7388
 801e682:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e686:	4620      	mov	r0, r4
 801e688:	2100      	movs	r1, #0
 801e68a:	2218      	movs	r2, #24
 801e68c:	f002 f92a 	bl	80208e4 <ble_memset>
 801e690:	f642 20fb 	movw	r0, #11003	@ 0x2afb
 801e694:	f2c0 0005 	movt	r0, #5
 801e698:	6020      	str	r0, [r4, #0]
 801e69a:	2002      	movs	r0, #2
 801e69c:	7520      	strb	r0, [r4, #20]
 801e69e:	f000 f843 	bl	801e728 <llhwc_cmn_reset_rco_clbr>
 801e6a2:	f247 3014 	movw	r0, #29460	@ 0x7314
 801e6a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e6aa:	6005      	str	r5, [r0, #0]
 801e6ac:	2001      	movs	r0, #1
 801e6ae:	f000 f88f 	bl	801e7d0 <llhwc_cmn_reset_slp_params>
 801e6b2:	6830      	ldr	r0, [r6, #0]
 801e6b4:	f040 0020 	orr.w	r0, r0, #32
 801e6b8:	6030      	str	r0, [r6, #0]
 801e6ba:	6830      	ldr	r0, [r6, #0]
 801e6bc:	f420 7180 	bic.w	r1, r0, #256	@ 0x100
 801e6c0:	2000      	movs	r0, #0
 801e6c2:	6031      	str	r1, [r6, #0]
 801e6c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e6c8 <llhwc_cmn_control_hclk>:
 801e6c8:	b570      	push	{r4, r5, r6, lr}
 801e6ca:	f247 3530 	movw	r5, #29488	@ 0x7330
 801e6ce:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801e6d2:	f895 104d 	ldrb.w	r1, [r5, #77]	@ 0x4d
 801e6d6:	4604      	mov	r4, r0
 801e6d8:	4308      	orrs	r0, r1
 801e6da:	d024      	beq.n	801e726 <llhwc_cmn_control_hclk+0x5e>
 801e6dc:	2c01      	cmp	r4, #1
 801e6de:	bf04      	itt	eq
 801e6e0:	2901      	cmpeq	r1, #1
 801e6e2:	bd70      	popeq	{r4, r5, r6, pc}
 801e6e4:	b1ac      	cbz	r4, 801e712 <llhwc_cmn_control_hclk+0x4a>
 801e6e6:	2c01      	cmp	r4, #1
 801e6e8:	d11b      	bne.n	801e722 <llhwc_cmn_control_hclk+0x5a>
 801e6ea:	2901      	cmp	r1, #1
 801e6ec:	d019      	beq.n	801e722 <llhwc_cmn_control_hclk+0x5a>
 801e6ee:	2614      	movs	r6, #20
 801e6f0:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801e6f4:	f7fd f973 	bl	801b9de <os_disable_isr>
 801e6f8:	2001      	movs	r0, #1
 801e6fa:	f7fd f929 	bl	801b950 <bsp_control_hclk>
 801e6fe:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 801e700:	6831      	ldr	r1, [r6, #0]
 801e702:	1a09      	subs	r1, r1, r0
 801e704:	2902      	cmp	r1, #2
 801e706:	d3fb      	bcc.n	801e700 <llhwc_cmn_control_hclk+0x38>
 801e708:	2000      	movs	r0, #0
 801e70a:	6568      	str	r0, [r5, #84]	@ 0x54
 801e70c:	f7fd f969 	bl	801b9e2 <os_enable_isr>
 801e710:	e007      	b.n	801e722 <llhwc_cmn_control_hclk+0x5a>
 801e712:	2014      	movs	r0, #20
 801e714:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801e718:	6800      	ldr	r0, [r0, #0]
 801e71a:	6568      	str	r0, [r5, #84]	@ 0x54
 801e71c:	2000      	movs	r0, #0
 801e71e:	f7fd f917 	bl	801b950 <bsp_control_hclk>
 801e722:	f885 404d 	strb.w	r4, [r5, #77]	@ 0x4d
 801e726:	bd70      	pop	{r4, r5, r6, pc}

0801e728 <llhwc_cmn_reset_rco_clbr>:
 801e728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e72a:	b081      	sub	sp, #4
 801e72c:	f247 34b0 	movw	r4, #29616	@ 0x73b0
 801e730:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e734:	68e0      	ldr	r0, [r4, #12]
 801e736:	b190      	cbz	r0, 801e75e <llhwc_cmn_reset_rco_clbr+0x36>
 801e738:	f7ff fcbc 	bl	801e0b4 <os_timer_stop>
 801e73c:	fab0 f080 	clz	r0, r0
 801e740:	0940      	lsrs	r0, r0, #5
 801e742:	2101      	movs	r1, #1
 801e744:	f7fd f8eb 	bl	801b91e <bsp_assert>
 801e748:	68e0      	ldr	r0, [r4, #12]
 801e74a:	f7ff fd26 	bl	801e19a <os_timer_free>
 801e74e:	2100      	movs	r1, #0
 801e750:	fab0 f080 	clz	r0, r0
 801e754:	60e1      	str	r1, [r4, #12]
 801e756:	0940      	lsrs	r0, r0, #5
 801e758:	2101      	movs	r1, #1
 801e75a:	f7fd f8e0 	bl	801b91e <bsp_assert>
 801e75e:	f247 302c 	movw	r0, #29484	@ 0x732c
 801e762:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e766:	2500      	movs	r5, #0
 801e768:	6005      	str	r5, [r0, #0]
 801e76a:	2001      	movs	r0, #1
 801e76c:	f7fd f90b 	bl	801b986 <bsp_rco_clbr_not>
 801e770:	2014      	movs	r0, #20
 801e772:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801e776:	f8d0 1470 	ldr.w	r1, [r0, #1136]	@ 0x470
 801e77a:	f247 361c 	movw	r6, #29468	@ 0x731c
 801e77e:	f021 0101 	bic.w	r1, r1, #1
 801e782:	f8c0 1470 	str.w	r1, [r0, #1136]	@ 0x470
 801e786:	6801      	ldr	r1, [r0, #0]
 801e788:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801e78c:	3101      	adds	r1, #1
 801e78e:	6031      	str	r1, [r6, #0]
 801e790:	6901      	ldr	r1, [r0, #16]
 801e792:	f247 3720 	movw	r7, #29472	@ 0x7320
 801e796:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 801e79a:	6101      	str	r1, [r0, #16]
 801e79c:	6800      	ldr	r0, [r0, #0]
 801e79e:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801e7a2:	3001      	adds	r0, #1
 801e7a4:	6038      	str	r0, [r7, #0]
 801e7a6:	4620      	mov	r0, r4
 801e7a8:	2100      	movs	r1, #0
 801e7aa:	2224      	movs	r2, #36	@ 0x24
 801e7ac:	f002 f89a 	bl	80208e4 <ble_memset>
 801e7b0:	207f      	movs	r0, #127	@ 0x7f
 801e7b2:	7220      	strb	r0, [r4, #8]
 801e7b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801e7b8:	6120      	str	r0, [r4, #16]
 801e7ba:	f247 3024 	movw	r0, #29476	@ 0x7324
 801e7be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e7c2:	7665      	strb	r5, [r4, #25]
 801e7c4:	76a5      	strb	r5, [r4, #26]
 801e7c6:	6035      	str	r5, [r6, #0]
 801e7c8:	603d      	str	r5, [r7, #0]
 801e7ca:	6005      	str	r5, [r0, #0]
 801e7cc:	b001      	add	sp, #4
 801e7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e7d0 <llhwc_cmn_reset_slp_params>:
 801e7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7d2:	b081      	sub	sp, #4
 801e7d4:	4604      	mov	r4, r0
 801e7d6:	f240 4548 	movw	r5, #1096	@ 0x448
 801e7da:	261c      	movs	r6, #28
 801e7dc:	2001      	movs	r0, #1
 801e7de:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801e7e2:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801e7e6:	2701      	movs	r7, #1
 801e7e8:	f000 f85e 	bl	801e8a8 <llhwc_pwr_switch>
 801e7ec:	f8d6 0408 	ldr.w	r0, [r6, #1032]	@ 0x408
 801e7f0:	2c01      	cmp	r4, #1
 801e7f2:	f367 3050 	bfi	r0, r7, #13, #4
 801e7f6:	f8c6 0408 	str.w	r0, [r6, #1032]	@ 0x408
 801e7fa:	f04f 30ff 	mov.w	r0, #4294967295
 801e7fe:	6028      	str	r0, [r5, #0]
 801e800:	d103      	bne.n	801e80a <llhwc_cmn_reset_slp_params+0x3a>
 801e802:	f7fd fec6 	bl	801c592 <llhwc_phy_reset>
 801e806:	f7fe f9d0 	bl	801cbaa <llhwc_phy_init>
 801e80a:	6830      	ldr	r0, [r6, #0]
 801e80c:	f040 0020 	orr.w	r0, r0, #32
 801e810:	6030      	str	r0, [r6, #0]
 801e812:	6828      	ldr	r0, [r5, #0]
 801e814:	f040 0008 	orr.w	r0, r0, #8
 801e818:	6028      	str	r0, [r5, #0]
 801e81a:	6828      	ldr	r0, [r5, #0]
 801e81c:	f020 0004 	bic.w	r0, r0, #4
 801e820:	6028      	str	r0, [r5, #0]
 801e822:	b001      	add	sp, #4
 801e824:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e826 <llhwc_cmn_set_dp_slp_mode>:
 801e826:	b5b0      	push	{r4, r5, r7, lr}
 801e828:	f247 3430 	movw	r4, #29488	@ 0x7330
 801e82c:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e830:	f894 1022 	ldrb.w	r1, [r4, #34]	@ 0x22
 801e834:	2801      	cmp	r0, #1
 801e836:	bf08      	it	eq
 801e838:	2900      	cmpeq	r1, #0
 801e83a:	d032      	beq.n	801e8a2 <llhwc_cmn_set_dp_slp_mode+0x7c>
 801e83c:	b900      	cbnz	r0, 801e840 <llhwc_cmn_set_dp_slp_mode+0x1a>
 801e83e:	bb81      	cbnz	r1, 801e8a2 <llhwc_cmn_set_dp_slp_mode+0x7c>
 801e840:	2801      	cmp	r0, #1
 801e842:	d103      	bne.n	801e84c <llhwc_cmn_set_dp_slp_mode+0x26>
 801e844:	2000      	movs	r0, #0
 801e846:	f000 f82f 	bl	801e8a8 <llhwc_pwr_switch>
 801e84a:	e02a      	b.n	801e8a2 <llhwc_cmn_set_dp_slp_mode+0x7c>
 801e84c:	bb48      	cbnz	r0, 801e8a2 <llhwc_cmn_set_dp_slp_mode+0x7c>
 801e84e:	2005      	movs	r0, #5
 801e850:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
 801e854:	2001      	movs	r0, #1
 801e856:	2501      	movs	r5, #1
 801e858:	f000 f826 	bl	801e8a8 <llhwc_pwr_switch>
 801e85c:	201c      	movs	r0, #28
 801e85e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801e862:	f8d0 1408 	ldr.w	r1, [r0, #1032]	@ 0x408
 801e866:	f04f 32ff 	mov.w	r2, #4294967295
 801e86a:	f365 3150 	bfi	r1, r5, #13, #4
 801e86e:	f8c0 1408 	str.w	r1, [r0, #1032]	@ 0x408
 801e872:	f240 4148 	movw	r1, #1096	@ 0x448
 801e876:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801e87a:	600a      	str	r2, [r1, #0]
 801e87c:	6802      	ldr	r2, [r0, #0]
 801e87e:	f042 0220 	orr.w	r2, r2, #32
 801e882:	6002      	str	r2, [r0, #0]
 801e884:	6808      	ldr	r0, [r1, #0]
 801e886:	f040 0008 	orr.w	r0, r0, #8
 801e88a:	6008      	str	r0, [r1, #0]
 801e88c:	6808      	ldr	r0, [r1, #0]
 801e88e:	f020 0004 	bic.w	r0, r0, #4
 801e892:	6008      	str	r0, [r1, #0]
 801e894:	f7fd fe98 	bl	801c5c8 <llhwc_phy_recover_from_ll_dp_slp>
 801e898:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801e89a:	b100      	cbz	r0, 801e89e <llhwc_cmn_set_dp_slp_mode+0x78>
 801e89c:	4780      	blx	r0
 801e89e:	f002 f9ce 	bl	8020c3e <pta_recover_from_deep_sleep>
 801e8a2:	2000      	movs	r0, #0
 801e8a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801e8a8 <llhwc_pwr_switch>:
 801e8a8:	b580      	push	{r7, lr}
 801e8aa:	f247 3e30 	movw	lr, #29488	@ 0x7330
 801e8ae:	f2c2 0e00 	movt	lr, #8192	@ 0x2000
 801e8b2:	f89e 2022 	ldrb.w	r2, [lr, #34]	@ 0x22
 801e8b6:	4282      	cmp	r2, r0
 801e8b8:	d01b      	beq.n	801e8f2 <llhwc_pwr_switch+0x4a>
 801e8ba:	2801      	cmp	r0, #1
 801e8bc:	d103      	bne.n	801e8c6 <llhwc_pwr_switch+0x1e>
 801e8be:	f89e 2050 	ldrb.w	r2, [lr, #80]	@ 0x50
 801e8c2:	2a01      	cmp	r2, #1
 801e8c4:	d015      	beq.n	801e8f2 <llhwc_pwr_switch+0x4a>
 801e8c6:	2208      	movs	r2, #8
 801e8c8:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 801e8cc:	6813      	ldr	r3, [r2, #0]
 801e8ce:	f3c3 1c06 	ubfx	ip, r3, #4, #7
 801e8d2:	a309      	add	r3, pc, #36	@ (adr r3, 801e8f8 <llhwc_pwr_switch+0x50>)
 801e8d4:	5c1b      	ldrb	r3, [r3, r0]
 801e8d6:	459c      	cmp	ip, r3
 801e8d8:	d009      	beq.n	801e8ee <llhwc_pwr_switch+0x46>
 801e8da:	6811      	ldr	r1, [r2, #0]
 801e8dc:	f360 0102 	bfi	r1, r0, #0, #3
 801e8e0:	6011      	str	r1, [r2, #0]
 801e8e2:	bf00      	nop
 801e8e4:	6811      	ldr	r1, [r2, #0]
 801e8e6:	f3c1 1106 	ubfx	r1, r1, #4, #7
 801e8ea:	428b      	cmp	r3, r1
 801e8ec:	d1fa      	bne.n	801e8e4 <llhwc_pwr_switch+0x3c>
 801e8ee:	f88e 0022 	strb.w	r0, [lr, #34]	@ 0x22
 801e8f2:	2000      	movs	r0, #0
 801e8f4:	bd80      	pop	{r7, pc}
 801e8f6:	bf00      	nop
 801e8f8:	230f0301 	.word	0x230f0301
 801e8fc:	3f1f172f 	.word	0x3f1f172f

0801e900 <llhwc_cmn_is_dp_slp_enabled>:
 801e900:	f247 3030 	movw	r0, #29488	@ 0x7330
 801e904:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e908:	f890 0022 	ldrb.w	r0, [r0, #34]	@ 0x22
 801e90c:	fab0 f080 	clz	r0, r0
 801e910:	0940      	lsrs	r0, r0, #5
 801e912:	4770      	bx	lr

0801e914 <llhwc_cmn_init>:
 801e914:	b570      	push	{r4, r5, r6, lr}
 801e916:	b090      	sub	sp, #64	@ 0x40
 801e918:	a803      	add	r0, sp, #12
 801e91a:	2131      	movs	r1, #49	@ 0x31
 801e91c:	f00d f820 	bl	802b960 <__aeabi_memclr>
 801e920:	2032      	movs	r0, #50	@ 0x32
 801e922:	f88d 0008 	strb.w	r0, [sp, #8]
 801e926:	f644 7053 	movw	r0, #20307	@ 0x4f53
 801e92a:	f2c3 0057 	movt	r0, #12375	@ 0x3057
 801e92e:	f64e 215b 	movw	r1, #59995	@ 0xea5b
 801e932:	9001      	str	r0, [sp, #4]
 801e934:	f6c0 0101 	movt	r1, #2049	@ 0x801
 801e938:	2001      	movs	r0, #1
 801e93a:	2202      	movs	r2, #2
 801e93c:	2502      	movs	r5, #2
 801e93e:	f7fc ffe0 	bl	801b902 <bsp_intr_set_pri>
 801e942:	f64e 2197 	movw	r1, #60055	@ 0xea97
 801e946:	f6c0 0101 	movt	r1, #2049	@ 0x801
 801e94a:	2002      	movs	r0, #2
 801e94c:	220a      	movs	r2, #10
 801e94e:	f7fc ffd8 	bl	801b902 <bsp_intr_set_pri>
 801e952:	f247 3430 	movw	r4, #29488	@ 0x7330
 801e956:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801e95a:	4620      	mov	r0, r4
 801e95c:	2100      	movs	r1, #0
 801e95e:	2258      	movs	r2, #88	@ 0x58
 801e960:	2600      	movs	r6, #0
 801e962:	f001 ffbf 	bl	80208e4 <ble_memset>
 801e966:	f247 30a4 	movw	r0, #29604	@ 0x73a4
 801e96a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e96e:	2100      	movs	r1, #0
 801e970:	2203      	movs	r2, #3
 801e972:	f001 ffb7 	bl	80208e4 <ble_memset>
 801e976:	f247 30a8 	movw	r0, #29608	@ 0x73a8
 801e97a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e97e:	21ff      	movs	r1, #255	@ 0xff
 801e980:	8001      	strh	r1, [r0, #0]
 801e982:	78c1      	ldrb	r1, [r0, #3]
 801e984:	7086      	strb	r6, [r0, #2]
 801e986:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 801e98a:	70c1      	strb	r1, [r0, #3]
 801e98c:	f884 504f 	strb.w	r5, [r4, #79]	@ 0x4f
 801e990:	f7fd fce0 	bl	801c354 <llhwc_phy_set_cfg_time>
 801e994:	f7ff fc37 	bl	801e206 <ll_tx_pwr_if_tx_power_params_init>
 801e998:	f7ff fe22 	bl	801e5e0 <llhwc_cmn_reset>
 801e99c:	f64e 209d 	movw	r0, #60061	@ 0xea9d
 801e9a0:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801e9a4:	2101      	movs	r1, #1
 801e9a6:	f002 f83e 	bl	8020a26 <intr_hndlr_reg>
 801e9aa:	f64e 302b 	movw	r0, #60203	@ 0xeb2b
 801e9ae:	f6c0 0001 	movt	r0, #2049	@ 0x801
 801e9b2:	2102      	movs	r1, #2
 801e9b4:	f002 f837 	bl	8020a26 <intr_hndlr_reg>
 801e9b8:	f247 3088 	movw	r0, #29576	@ 0x7388
 801e9bc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801e9c0:	7d00      	ldrb	r0, [r0, #20]
 801e9c2:	2801      	cmp	r0, #1
 801e9c4:	d103      	bne.n	801e9ce <llhwc_cmn_init+0xba>
 801e9c6:	2000      	movs	r0, #0
 801e9c8:	2100      	movs	r1, #0
 801e9ca:	f000 f91f 	bl	801ec0c <llhwc_cmn_initial_rco_clbr>
 801e9ce:	f002 f923 	bl	8020c18 <pta_init_context>
 801e9d2:	ac03      	add	r4, sp, #12
 801e9d4:	4620      	mov	r0, r4
 801e9d6:	2100      	movs	r1, #0
 801e9d8:	f000 f942 	bl	801ec60 <llhwc_cmn_read_cntrlr_ver_info>
 801e9dc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 801e9e0:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 801e9e4:	4288      	cmp	r0, r1
 801e9e6:	d118      	bne.n	801ea1a <llhwc_cmn_init+0x106>
 801e9e8:	f89d 0012 	ldrb.w	r0, [sp, #18]
 801e9ec:	f89d 1027 	ldrb.w	r1, [sp, #39]	@ 0x27
 801e9f0:	4288      	cmp	r0, r1
 801e9f2:	d112      	bne.n	801ea1a <llhwc_cmn_init+0x106>
 801e9f4:	f89d 0013 	ldrb.w	r0, [sp, #19]
 801e9f8:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 801e9fc:	4288      	cmp	r0, r1
 801e9fe:	d10c      	bne.n	801ea1a <llhwc_cmn_init+0x106>
 801ea00:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801ea04:	f89d 1029 	ldrb.w	r1, [sp, #41]	@ 0x29
 801ea08:	4288      	cmp	r0, r1
 801ea0a:	d106      	bne.n	801ea1a <llhwc_cmn_init+0x106>
 801ea0c:	f104 000a 	add.w	r0, r4, #10
 801ea10:	a901      	add	r1, sp, #4
 801ea12:	2205      	movs	r2, #5
 801ea14:	f001 ff9e 	bl	8020954 <ble_memcmp>
 801ea18:	b160      	cbz	r0, 801ea34 <llhwc_cmn_init+0x120>
 801ea1a:	20c6      	movs	r0, #198	@ 0xc6
 801ea1c:	f7fc ffca 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801ea20:	20c6      	movs	r0, #198	@ 0xc6
 801ea22:	f7fc ffc7 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801ea26:	2000      	movs	r0, #0
 801ea28:	2101      	movs	r1, #1
 801ea2a:	f7fc ff78 	bl	801b91e <bsp_assert>
 801ea2e:	2000      	movs	r0, #0
 801ea30:	b010      	add	sp, #64	@ 0x40
 801ea32:	bd70      	pop	{r4, r5, r6, pc}
 801ea34:	f104 001f 	add.w	r0, r4, #31
 801ea38:	ac01      	add	r4, sp, #4
 801ea3a:	4621      	mov	r1, r4
 801ea3c:	2205      	movs	r2, #5
 801ea3e:	f001 ff01 	bl	8020844 <ble_memcpy>
 801ea42:	f240 501c 	movw	r0, #1308	@ 0x51c
 801ea46:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ea4a:	4621      	mov	r1, r4
 801ea4c:	2205      	movs	r2, #5
 801ea4e:	f001 fef9 	bl	8020844 <ble_memcpy>
 801ea52:	20c6      	movs	r0, #198	@ 0xc6
 801ea54:	f7fc ffae 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801ea58:	e7e9      	b.n	801ea2e <llhwc_cmn_init+0x11a>

0801ea5a <ll_isr>:
 801ea5a:	b580      	push	{r7, lr}
 801ea5c:	2018      	movs	r0, #24
 801ea5e:	f7fc ffa5 	bl	801b9ac <bsp_debug_gpio_set>
 801ea62:	f7fd f9f7 	bl	801be54 <llhwc_phy_is_phy_driver_busy>
 801ea66:	2802      	cmp	r0, #2
 801ea68:	d30b      	bcc.n	801ea82 <ll_isr+0x28>
 801ea6a:	f7fd f8bb 	bl	801bbe4 <llhwc_phy_get_phy_clbr_state>
 801ea6e:	b140      	cbz	r0, 801ea82 <ll_isr+0x28>
 801ea70:	f240 4040 	movw	r0, #1088	@ 0x440
 801ea74:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801ea78:	6800      	ldr	r0, [r0, #0]
 801ea7a:	07c0      	lsls	r0, r0, #31
 801ea7c:	bf18      	it	ne
 801ea7e:	f7fd f84f 	blne	801bb20 <llhwc_phy_clbr_seq_done_isr>
 801ea82:	f000 fbe4 	bl	801f24e <ll_cmn_clr_isr>
 801ea86:	2001      	movs	r0, #1
 801ea88:	f001 ffd4 	bl	8020a34 <os_process_isr>
 801ea8c:	2018      	movs	r0, #24
 801ea8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ea92:	f7fc bf8d 	b.w	801b9b0 <bsp_debug_gpio_clear>

0801ea96 <ll_lw_prio_isr>:
 801ea96:	2002      	movs	r0, #2
 801ea98:	f001 bfcc 	b.w	8020a34 <os_process_isr>

0801ea9c <ll_cmn_hg_isr>:
 801ea9c:	b510      	push	{r4, lr}
 801ea9e:	2008      	movs	r0, #8
 801eaa0:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801eaa4:	6800      	ldr	r0, [r0, #0]
 801eaa6:	2101      	movs	r1, #1
 801eaa8:	f000 0407 	and.w	r4, r0, #7
 801eaac:	f247 3018 	movw	r0, #29464	@ 0x7318
 801eab0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eab4:	7001      	strb	r1, [r0, #0]
 801eab6:	2015      	movs	r0, #21
 801eab8:	f7fc ff78 	bl	801b9ac <bsp_debug_gpio_set>
 801eabc:	2c04      	cmp	r4, #4
 801eabe:	bf18      	it	ne
 801eac0:	2c02      	cmpne	r4, #2
 801eac2:	d109      	bne.n	801ead8 <ll_cmn_hg_isr+0x3c>
 801eac4:	f247 3030 	movw	r0, #29488	@ 0x7330
 801eac8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eacc:	6841      	ldr	r1, [r0, #4]
 801eace:	f247 30d5 	movw	r0, #29653	@ 0x73d5
 801ead2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ead6:	4788      	blx	r1
 801ead8:	f001 ffb5 	bl	8020a46 <os_wrapper_is_rtos_used>
 801eadc:	b120      	cbz	r0, 801eae8 <ll_cmn_hg_isr+0x4c>
 801eade:	2015      	movs	r0, #21
 801eae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eae4:	f7fc bf64 	b.w	801b9b0 <bsp_debug_gpio_clear>
 801eae8:	f247 30a4 	movw	r0, #29604	@ 0x73a4
 801eaec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eaf0:	7800      	ldrb	r0, [r0, #0]
 801eaf2:	2801      	cmp	r0, #1
 801eaf4:	d005      	beq.n	801eb02 <ll_cmn_hg_isr+0x66>
 801eaf6:	2800      	cmp	r0, #0
 801eaf8:	d1f1      	bne.n	801eade <ll_cmn_hg_isr+0x42>
 801eafa:	2002      	movs	r0, #2
 801eafc:	f001 ff9a 	bl	8020a34 <os_process_isr>
 801eb00:	e7ed      	b.n	801eade <ll_cmn_hg_isr+0x42>
 801eb02:	f247 30d4 	movw	r0, #29652	@ 0x73d4
 801eb06:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eb0a:	7800      	ldrb	r0, [r0, #0]
 801eb0c:	2801      	cmp	r0, #1
 801eb0e:	d103      	bne.n	801eb18 <ll_cmn_hg_isr+0x7c>
 801eb10:	f7ff f9f6 	bl	801df00 <os_timer_is_any_near_sw_timer_hg_prio>
 801eb14:	2801      	cmp	r0, #1
 801eb16:	d002      	beq.n	801eb1e <ll_cmn_hg_isr+0x82>
 801eb18:	f7fd f86e 	bl	801bbf8 <llhwc_phy_is_phy_clbr_done_pnding>
 801eb1c:	b108      	cbz	r0, 801eb22 <ll_cmn_hg_isr+0x86>
 801eb1e:	2001      	movs	r0, #1
 801eb20:	e000      	b.n	801eb24 <ll_cmn_hg_isr+0x88>
 801eb22:	2000      	movs	r0, #0
 801eb24:	f7fc ff17 	bl	801b956 <bsp_switch_to_lw_isr>
 801eb28:	e7d9      	b.n	801eade <ll_cmn_hg_isr+0x42>

0801eb2a <ll_cmn_lw_isr>:
 801eb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb2e:	2016      	movs	r0, #22
 801eb30:	f7fc ff3c 	bl	801b9ac <bsp_debug_gpio_set>
 801eb34:	f248 17e8 	movw	r7, #33256	@ 0x81e8
 801eb38:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801eb3c:	6838      	ldr	r0, [r7, #0]
 801eb3e:	f04f 31ff 	mov.w	r1, #4294967295
 801eb42:	f7fc ff50 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801eb46:	f247 341a 	movw	r4, #29466	@ 0x731a
 801eb4a:	f247 3018 	movw	r0, #29464	@ 0x7318
 801eb4e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801eb52:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eb56:	7821      	ldrb	r1, [r4, #0]
 801eb58:	7800      	ldrb	r0, [r0, #0]
 801eb5a:	f247 3619 	movw	r6, #29465	@ 0x7319
 801eb5e:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801eb62:	2901      	cmp	r1, #1
 801eb64:	4621      	mov	r1, r4
 801eb66:	7030      	strb	r0, [r6, #0]
 801eb68:	bf88      	it	hi
 801eb6a:	4631      	movhi	r1, r6
 801eb6c:	6838      	ldr	r0, [r7, #0]
 801eb6e:	2500      	movs	r5, #0
 801eb70:	700d      	strb	r5, [r1, #0]
 801eb72:	f7fc ff3e 	bl	801b9f2 <os_rcrsv_mutex_release>
 801eb76:	2008      	movs	r0, #8
 801eb78:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801eb7c:	6807      	ldr	r7, [r0, #0]
 801eb7e:	f247 30d4 	movw	r0, #29652	@ 0x73d4
 801eb82:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eb86:	7801      	ldrb	r1, [r0, #0]
 801eb88:	f247 3830 	movw	r8, #29488	@ 0x7330
 801eb8c:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801eb90:	b139      	cbz	r1, 801eba2 <ll_cmn_lw_isr+0x78>
 801eb92:	7005      	strb	r5, [r0, #0]
 801eb94:	f8d8 0000 	ldr.w	r0, [r8]
 801eb98:	4780      	blx	r0
 801eb9a:	7820      	ldrb	r0, [r4, #0]
 801eb9c:	7035      	strb	r5, [r6, #0]
 801eb9e:	3001      	adds	r0, #1
 801eba0:	7020      	strb	r0, [r4, #0]
 801eba2:	f7fd f829 	bl	801bbf8 <llhwc_phy_is_phy_clbr_done_pnding>
 801eba6:	b130      	cbz	r0, 801ebb6 <ll_cmn_lw_isr+0x8c>
 801eba8:	2000      	movs	r0, #0
 801ebaa:	7030      	strb	r0, [r6, #0]
 801ebac:	f7fc ff35 	bl	801ba1a <llhwc_phy_exec_clbr_done_clbk>
 801ebb0:	7820      	ldrb	r0, [r4, #0]
 801ebb2:	3001      	adds	r0, #1
 801ebb4:	7020      	strb	r0, [r4, #0]
 801ebb6:	f247 302a 	movw	r0, #29482	@ 0x732a
 801ebba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ebbe:	7801      	ldrb	r1, [r0, #0]
 801ebc0:	b139      	cbz	r1, 801ebd2 <ll_cmn_lw_isr+0xa8>
 801ebc2:	2500      	movs	r5, #0
 801ebc4:	7005      	strb	r5, [r0, #0]
 801ebc6:	f000 fbbb 	bl	801f340 <llhwc_cmn_rco_isr>
 801ebca:	7820      	ldrb	r0, [r4, #0]
 801ebcc:	7035      	strb	r5, [r6, #0]
 801ebce:	3001      	adds	r0, #1
 801ebd0:	7020      	strb	r0, [r4, #0]
 801ebd2:	f247 30a4 	movw	r0, #29604	@ 0x73a4
 801ebd6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ebda:	7880      	ldrb	r0, [r0, #2]
 801ebdc:	2802      	cmp	r0, #2
 801ebde:	bf1c      	itt	ne
 801ebe0:	f007 0007 	andne.w	r0, r7, #7
 801ebe4:	2804      	cmpne	r0, #4
 801ebe6:	d10e      	bne.n	801ec06 <ll_cmn_lw_isr+0xdc>
 801ebe8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801ebec:	f247 30d5 	movw	r0, #29653	@ 0x73d5
 801ebf0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ebf4:	4788      	blx	r1
 801ebf6:	7820      	ldrb	r0, [r4, #0]
 801ebf8:	3001      	adds	r0, #1
 801ebfa:	7020      	strb	r0, [r4, #0]
 801ebfc:	2016      	movs	r0, #22
 801ebfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec02:	f7fc bed5 	b.w	801b9b0 <bsp_debug_gpio_clear>
 801ec06:	2802      	cmp	r0, #2
 801ec08:	d0ee      	beq.n	801ebe8 <ll_cmn_lw_isr+0xbe>
 801ec0a:	e7f7      	b.n	801ebfc <ll_cmn_lw_isr+0xd2>

0801ec0c <llhwc_cmn_initial_rco_clbr>:
 801ec0c:	b5b0      	push	{r4, r5, r7, lr}
 801ec0e:	f247 3588 	movw	r5, #29576	@ 0x7388
 801ec12:	460c      	mov	r4, r1
 801ec14:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801ec18:	2100      	movs	r1, #0
 801ec1a:	7129      	strb	r1, [r5, #4]
 801ec1c:	f247 31b0 	movw	r1, #29616	@ 0x73b0
 801ec20:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ec24:	7608      	strb	r0, [r1, #24]
 801ec26:	f240 202f 	movw	r0, #559	@ 0x22f
 801ec2a:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ec2e:	f7fe fff8 	bl	801dc22 <os_timer_rgstr_timer_activity_cbk>
 801ec32:	207f      	movs	r0, #127	@ 0x7f
 801ec34:	f001 fb22 	bl	802027c <llhwc_cmn_hw_rco_clbr>
 801ec38:	f240 4040 	movw	r0, #1088	@ 0x440
 801ec3c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801ec40:	7929      	ldrb	r1, [r5, #4]
 801ec42:	b911      	cbnz	r1, 801ec4a <llhwc_cmn_initial_rco_clbr+0x3e>
 801ec44:	6801      	ldr	r1, [r0, #0]
 801ec46:	0689      	lsls	r1, r1, #26
 801ec48:	d5fa      	bpl.n	801ec40 <llhwc_cmn_initial_rco_clbr+0x34>
 801ec4a:	b13c      	cbz	r4, 801ec5c <llhwc_cmn_initial_rco_clbr+0x50>
 801ec4c:	6828      	ldr	r0, [r5, #0]
 801ec4e:	f64b 0100 	movw	r1, #47104	@ 0xb800
 801ec52:	f2cf 213b 	movt	r1, #62011	@ 0xf23b
 801ec56:	fbb1 f0f0 	udiv	r0, r1, r0
 801ec5a:	8020      	strh	r0, [r4, #0]
 801ec5c:	2000      	movs	r0, #0
 801ec5e:	bdb0      	pop	{r4, r5, r7, pc}

0801ec60 <llhwc_cmn_read_cntrlr_ver_info>:
 801ec60:	2800      	cmp	r0, #0
 801ec62:	d03b      	beq.n	801ecdc <llhwc_cmn_read_cntrlr_ver_info+0x7c>
 801ec64:	b5b0      	push	{r4, r5, r7, lr}
 801ec66:	a13a      	add	r1, pc, #232	@ (adr r1, 801ed50 <llhwc_cmn_read_cntrlr_ver_info+0xf0>)
 801ec68:	2231      	movs	r2, #49	@ 0x31
 801ec6a:	4604      	mov	r4, r0
 801ec6c:	f001 fdea 	bl	8020844 <ble_memcpy>
 801ec70:	2000      	movs	r0, #0
 801ec72:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801ec76:	6803      	ldr	r3, [r0, #0]
 801ec78:	f04f 0c03 	mov.w	ip, #3
 801ec7c:	0e19      	lsrs	r1, r3, #24
 801ec7e:	f36c 111f 	bfi	r1, ip, #4, #28
 801ec82:	7121      	strb	r1, [r4, #4]
 801ec84:	0d19      	lsrs	r1, r3, #20
 801ec86:	f36c 111f 	bfi	r1, ip, #4, #28
 801ec8a:	71a1      	strb	r1, [r4, #6]
 801ec8c:	f3c3 2103 	ubfx	r1, r3, #8, #4
 801ec90:	22cd      	movs	r2, #205	@ 0xcd
 801ec92:	fb01 f202 	mul.w	r2, r1, r2
 801ec96:	0c18      	lsrs	r0, r3, #16
 801ec98:	0ad2      	lsrs	r2, r2, #11
 801ec9a:	ea42 0282 	orr.w	r2, r2, r2, lsl #2
 801ec9e:	f36c 101f 	bfi	r0, ip, #4, #28
 801eca2:	71e0      	strb	r0, [r4, #7]
 801eca4:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
 801eca8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ecac:	3041      	adds	r0, #65	@ 0x41
 801ecae:	2906      	cmp	r1, #6
 801ecb0:	7220      	strb	r0, [r4, #8]
 801ecb2:	d814      	bhi.n	801ecde <llhwc_cmn_read_cntrlr_ver_info+0x7e>
 801ecb4:	f04f 0c41 	mov.w	ip, #65	@ 0x41
 801ecb8:	f04f 0e0b 	mov.w	lr, #11
 801ecbc:	2247      	movs	r2, #71	@ 0x47
 801ecbe:	200a      	movs	r0, #10
 801ecc0:	e8df f001 	tbb	[pc, r1]
 801ecc4:	18150430 	.word	0x18150430
 801ecc8:	002a211b 	.word	0x002a211b
 801eccc:	204c      	movs	r0, #76	@ 0x4c
 801ecce:	72a0      	strb	r0, [r4, #10]
 801ecd0:	f04f 0c41 	mov.w	ip, #65	@ 0x41
 801ecd4:	f04f 0e0c 	mov.w	lr, #12
 801ecd8:	2243      	movs	r2, #67	@ 0x43
 801ecda:	e01b      	b.n	801ed14 <llhwc_cmn_read_cntrlr_ver_info+0xb4>
 801ecdc:	4770      	bx	lr
 801ecde:	2258      	movs	r2, #88	@ 0x58
 801ece0:	f04f 0e0c 	mov.w	lr, #12
 801ece4:	200b      	movs	r0, #11
 801ece6:	f04f 0c58 	mov.w	ip, #88	@ 0x58
 801ecea:	72a2      	strb	r2, [r4, #10]
 801ecec:	e01a      	b.n	801ed24 <llhwc_cmn_read_cntrlr_ver_info+0xc4>
 801ecee:	f04f 0c41 	mov.w	ip, #65	@ 0x41
 801ecf2:	e013      	b.n	801ed1c <llhwc_cmn_read_cntrlr_ver_info+0xbc>
 801ecf4:	f04f 0c50 	mov.w	ip, #80	@ 0x50
 801ecf8:	e001      	b.n	801ecfe <llhwc_cmn_read_cntrlr_ver_info+0x9e>
 801ecfa:	f04f 0c55 	mov.w	ip, #85	@ 0x55
 801ecfe:	f04f 0e0b 	mov.w	lr, #11
 801ed02:	224c      	movs	r2, #76	@ 0x4c
 801ed04:	e00d      	b.n	801ed22 <llhwc_cmn_read_cntrlr_ver_info+0xc2>
 801ed06:	2053      	movs	r0, #83	@ 0x53
 801ed08:	72a0      	strb	r0, [r4, #10]
 801ed0a:	f04f 0c57 	mov.w	ip, #87	@ 0x57
 801ed0e:	f04f 0e0c 	mov.w	lr, #12
 801ed12:	224f      	movs	r2, #79	@ 0x4f
 801ed14:	200b      	movs	r0, #11
 801ed16:	e005      	b.n	801ed24 <llhwc_cmn_read_cntrlr_ver_info+0xc4>
 801ed18:	f04f 0c43 	mov.w	ip, #67	@ 0x43
 801ed1c:	f04f 0e0b 	mov.w	lr, #11
 801ed20:	2245      	movs	r2, #69	@ 0x45
 801ed22:	200a      	movs	r0, #10
 801ed24:	5422      	strb	r2, [r4, r0]
 801ed26:	b2d8      	uxtb	r0, r3
 801ed28:	0900      	lsrs	r0, r0, #4
 801ed2a:	3030      	adds	r0, #48	@ 0x30
 801ed2c:	f804 c00e 	strb.w	ip, [r4, lr]
 801ed30:	7360      	strb	r0, [r4, #13]
 801ed32:	2003      	movs	r0, #3
 801ed34:	f360 131f 	bfi	r3, r0, #4, #28
 801ed38:	f240 511c 	movw	r1, #1308	@ 0x51c
 801ed3c:	f104 001f 	add.w	r0, r4, #31
 801ed40:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ed44:	2205      	movs	r2, #5
 801ed46:	73a3      	strb	r3, [r4, #14]
 801ed48:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801ed4c:	f001 bd7a 	b.w	8020844 <ble_memcpy>
 801ed50:	3a4c5452 	.word	0x3a4c5452
 801ed54:	58582e58 	.word	0x58582e58
 801ed58:	58582d58 	.word	0x58582d58
 801ed5c:	5f585830 	.word	0x5f585830
 801ed60:	4d524946 	.word	0x4d524946
 801ed64:	45524157 	.word	0x45524157
 801ed68:	332e313a 	.word	0x332e313a
 801ed6c:	582d4130 	.word	0x582d4130
 801ed70:	58585858 	.word	0x58585858
 801ed74:	332e315f 	.word	0x332e315f
 801ed78:	4c2d6132 	.word	0x4c2d6132
 801ed7c:	30304143 	.word	0x30304143
 801ed80:	00000000 	.word	0x00000000

0801ed84 <llhwc_polling>:
 801ed84:	b5b0      	push	{r4, r5, r7, lr}
 801ed86:	f8dd c010 	ldr.w	ip, [sp, #16]
 801ed8a:	f240 0e00 	movw	lr, #0
 801ed8e:	f247 34ac 	movw	r4, #29612	@ 0x73ac
 801ed92:	3001      	adds	r0, #1
 801ed94:	f6c4 0e02 	movt	lr, #18434	@ 0x4802
 801ed98:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801ed9c:	3801      	subs	r0, #1
 801ed9e:	d009      	beq.n	801edb4 <llhwc_polling+0x30>
 801eda0:	f851 500e 	ldr.w	r5, [r1, lr]
 801eda4:	4015      	ands	r5, r2
 801eda6:	40dd      	lsrs	r5, r3
 801eda8:	45ac      	cmp	ip, r5
 801edaa:	6025      	str	r5, [r4, #0]
 801edac:	bf1c      	itt	ne
 801edae:	2000      	movne	r0, #0
 801edb0:	bdb0      	popne	{r4, r5, r7, pc}
 801edb2:	e7f3      	b.n	801ed9c <llhwc_polling+0x18>
 801edb4:	2000      	movs	r0, #0
 801edb6:	2101      	movs	r1, #1
 801edb8:	f7fc fdb1 	bl	801b91e <bsp_assert>
 801edbc:	f04f 30ff 	mov.w	r0, #4294967295
 801edc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801edc4 <llhwc_slptmr_set>:
 801edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edc8:	b087      	sub	sp, #28
 801edca:	680e      	ldr	r6, [r1, #0]
 801edcc:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 801edd0:	798d      	ldrb	r5, [r1, #6]
 801edd2:	79cc      	ldrb	r4, [r1, #7]
 801edd4:	4683      	mov	fp, r0
 801edd6:	f24b 78ff 	movw	r8, #47103	@ 0xb7ff
 801edda:	2019      	movs	r0, #25
 801eddc:	468a      	mov	sl, r1
 801edde:	f6cf 6817 	movt	r8, #65047	@ 0xfe17
 801ede2:	f7fc fde3 	bl	801b9ac <bsp_debug_gpio_set>
 801ede6:	f7fc fdfa 	bl	801b9de <os_disable_isr>
 801edea:	f247 3188 	movw	r1, #29576	@ 0x7388
 801edee:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801edf2:	7d08      	ldrb	r0, [r1, #20]
 801edf4:	9406      	str	r4, [sp, #24]
 801edf6:	2802      	cmp	r0, #2
 801edf8:	f000 80d5 	beq.w	801efa6 <llhwc_slptmr_set+0x1e2>
 801edfc:	2801      	cmp	r0, #1
 801edfe:	f040 8160 	bne.w	801f0c2 <llhwc_slptmr_set+0x2fe>
 801ee02:	680f      	ldr	r7, [r1, #0]
 801ee04:	2000      	movs	r0, #0
 801ee06:	f64f 010c 	movw	r1, #63500	@ 0xf80c
 801ee0a:	463a      	mov	r2, r7
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	f8cd b014 	str.w	fp, [sp, #20]
 801ee12:	2400      	movs	r4, #0
 801ee14:	f7e1 fa12 	bl	800023c <__aeabi_uldivmod>
 801ee18:	f247 3230 	movw	r2, #29488	@ 0x7330
 801ee1c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ee20:	4629      	mov	r1, r5
 801ee22:	f8b2 b01e 	ldrh.w	fp, [r2, #30]
 801ee26:	2d00      	cmp	r5, #0
 801ee28:	bf18      	it	ne
 801ee2a:	2101      	movne	r1, #1
 801ee2c:	4546      	cmp	r6, r8
 801ee2e:	bf88      	it	hi
 801ee30:	2401      	movhi	r4, #1
 801ee32:	ea41 0304 	orr.w	r3, r1, r4
 801ee36:	f892 1021 	ldrb.w	r1, [r2, #33]	@ 0x21
 801ee3a:	2b01      	cmp	r3, #1
 801ee3c:	4680      	mov	r8, r0
 801ee3e:	bf08      	it	eq
 801ee40:	2900      	cmpeq	r1, #0
 801ee42:	d102      	bne.n	801ee4a <llhwc_slptmr_set+0x86>
 801ee44:	2101      	movs	r1, #1
 801ee46:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 801ee4a:	2d00      	cmp	r5, #0
 801ee4c:	bf18      	it	ne
 801ee4e:	2501      	movne	r5, #1
 801ee50:	1e48      	subs	r0, r1, #1
 801ee52:	f8da 1000 	ldr.w	r1, [sl]
 801ee56:	f24f 0218 	movw	r2, #61464	@ 0xf018
 801ee5a:	f2c0 0201 	movt	r2, #1
 801ee5e:	fab0 f080 	clz	r0, r0
 801ee62:	fba1 4102 	umull	r4, r1, r1, r2
 801ee66:	0940      	lsrs	r0, r0, #5
 801ee68:	4005      	ands	r5, r0
 801ee6a:	4620      	mov	r0, r4
 801ee6c:	463a      	mov	r2, r7
 801ee6e:	2300      	movs	r3, #0
 801ee70:	f7e1 f9e4 	bl	800023c <__aeabi_uldivmod>
 801ee74:	4606      	mov	r6, r0
 801ee76:	fb00 4017 	mls	r0, r0, r7, r4
 801ee7a:	f242 0341 	movw	r3, #8257	@ 0x2041
 801ee7e:	0940      	lsrs	r0, r0, #5
 801ee80:	f6c0 0310 	movt	r3, #2064	@ 0x810
 801ee84:	fba0 0203 	umull	r0, r2, r0, r3
 801ee88:	eb09 0992 	add.w	r9, r9, r2, lsr #2
 801ee8c:	f5b7 6f7e 	cmp.w	r7, #4064	@ 0xfe0
 801ee90:	d311      	bcc.n	801eeb6 <llhwc_slptmr_set+0xf2>
 801ee92:	0978      	lsrs	r0, r7, #5
 801ee94:	fba0 0203 	umull	r0, r2, r0, r3
 801ee98:	fa1f f389 	uxth.w	r3, r9
 801ee9c:	0890      	lsrs	r0, r2, #2
 801ee9e:	4298      	cmp	r0, r3
 801eea0:	d209      	bcs.n	801eeb6 <llhwc_slptmr_set+0xf2>
 801eea2:	bf00      	nop
 801eea4:	eba9 0900 	sub.w	r9, r9, r0
 801eea8:	fa1f f289 	uxth.w	r2, r9
 801eeac:	3601      	adds	r6, #1
 801eeae:	f141 0100 	adc.w	r1, r1, #0
 801eeb2:	4290      	cmp	r0, r2
 801eeb4:	d3f6      	bcc.n	801eea4 <llhwc_slptmr_set+0xe0>
 801eeb6:	f247 30b0 	movw	r0, #29616	@ 0x73b0
 801eeba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eebe:	6844      	ldr	r4, [r0, #4]
 801eec0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801eec4:	2c00      	cmp	r4, #0
 801eec6:	eb05 070b 	add.w	r7, r5, fp
 801eeca:	f000 80cf 	beq.w	801f06c <llhwc_slptmr_set+0x2a8>
 801eece:	f8d0 b000 	ldr.w	fp, [r0]
 801eed2:	f1bb 0f01 	cmp.w	fp, #1
 801eed6:	f000 80c9 	beq.w	801f06c <llhwc_slptmr_set+0x2a8>
 801eeda:	f247 3024 	movw	r0, #29476	@ 0x7324
 801eede:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801eee2:	6800      	ldr	r0, [r0, #0]
 801eee4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801eee8:	1a35      	subs	r5, r6, r0
 801eeea:	fbbb f0f4 	udiv	r0, fp, r4
 801eeee:	f161 0700 	sbc.w	r7, r1, #0
 801eef2:	1c42      	adds	r2, r0, #1
 801eef4:	4628      	mov	r0, r5
 801eef6:	4639      	mov	r1, r7
 801eef8:	2300      	movs	r3, #0
 801eefa:	f7e1 f99f 	bl	800023c <__aeabi_uldivmod>
 801eefe:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801ef02:	9002      	str	r0, [sp, #8]
 801ef04:	4658      	mov	r0, fp
 801ef06:	2100      	movs	r1, #0
 801ef08:	4622      	mov	r2, r4
 801ef0a:	4643      	mov	r3, r8
 801ef0c:	f7e1 f996 	bl	800023c <__aeabi_uldivmod>
 801ef10:	1c42      	adds	r2, r0, #1
 801ef12:	f141 0300 	adc.w	r3, r1, #0
 801ef16:	4628      	mov	r0, r5
 801ef18:	4639      	mov	r1, r7
 801ef1a:	f7e1 f98f 	bl	800023c <__aeabi_uldivmod>
 801ef1e:	fba2 7004 	umull	r7, r0, r2, r4
 801ef22:	fb02 0008 	mla	r0, r2, r8, r0
 801ef26:	f247 32b0 	movw	r2, #29616	@ 0x73b0
 801ef2a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ef2e:	fb03 0804 	mla	r8, r3, r4, r0
 801ef32:	7a13      	ldrb	r3, [r2, #8]
 801ef34:	6955      	ldr	r5, [r2, #20]
 801ef36:	9301      	str	r3, [sp, #4]
 801ef38:	fbab 2303 	umull	r2, r3, fp, r3
 801ef3c:	fba7 0105 	umull	r0, r1, r7, r5
 801ef40:	015b      	lsls	r3, r3, #5
 801ef42:	fb08 1105 	mla	r1, r8, r5, r1
 801ef46:	ea43 63d2 	orr.w	r3, r3, r2, lsr #27
 801ef4a:	0152      	lsls	r2, r2, #5
 801ef4c:	f7e1 f976 	bl	800023c <__aeabi_uldivmod>
 801ef50:	f247 3188 	movw	r1, #29576	@ 0x7388
 801ef54:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ef58:	688c      	ldr	r4, [r1, #8]
 801ef5a:	2300      	movs	r3, #0
 801ef5c:	fba7 2104 	umull	r2, r1, r7, r4
 801ef60:	fb08 1104 	mla	r1, r8, r4, r1
 801ef64:	4607      	mov	r7, r0
 801ef66:	4610      	mov	r0, r2
 801ef68:	465a      	mov	r2, fp
 801ef6a:	f7e1 f967 	bl	800023c <__aeabi_uldivmod>
 801ef6e:	f247 31b0 	movw	r1, #29616	@ 0x73b0
 801ef72:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ef76:	f891 1020 	ldrb.w	r1, [r1, #32]
 801ef7a:	2900      	cmp	r1, #0
 801ef7c:	d07d      	beq.n	801f07a <llhwc_slptmr_set+0x2b6>
 801ef7e:	f242 0241 	movw	r2, #8257	@ 0x2041
 801ef82:	2901      	cmp	r1, #1
 801ef84:	f6c0 0210 	movt	r2, #2064	@ 0x810
 801ef88:	d106      	bne.n	801ef98 <llhwc_slptmr_set+0x1d4>
 801ef8a:	9901      	ldr	r1, [sp, #4]
 801ef8c:	3e01      	subs	r6, #1
 801ef8e:	0149      	lsls	r1, r1, #5
 801ef90:	fbb5 f1f1 	udiv	r1, r5, r1
 801ef94:	1bc9      	subs	r1, r1, r7
 801ef96:	4489      	add	r9, r1
 801ef98:	f8dd b014 	ldr.w	fp, [sp, #20]
 801ef9c:	f24b 78ff 	movw	r8, #47103	@ 0xb7ff
 801efa0:	f6cf 6817 	movt	r8, #65047	@ 0xfe17
 801efa4:	e074      	b.n	801f090 <llhwc_slptmr_set+0x2cc>
 801efa6:	4643      	mov	r3, r8
 801efa8:	f247 3830 	movw	r8, #29488	@ 0x7330
 801efac:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801efb0:	2d00      	cmp	r5, #0
 801efb2:	4629      	mov	r1, r5
 801efb4:	f04f 0200 	mov.w	r2, #0
 801efb8:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 801efbc:	bf18      	it	ne
 801efbe:	2101      	movne	r1, #1
 801efc0:	429e      	cmp	r6, r3
 801efc2:	bf88      	it	hi
 801efc4:	2201      	movhi	r2, #1
 801efc6:	430a      	orrs	r2, r1
 801efc8:	f898 1021 	ldrb.w	r1, [r8, #33]	@ 0x21
 801efcc:	2a01      	cmp	r2, #1
 801efce:	bf08      	it	eq
 801efd0:	2900      	cmpeq	r1, #0
 801efd2:	d102      	bne.n	801efda <llhwc_slptmr_set+0x216>
 801efd4:	2101      	movs	r1, #1
 801efd6:	f888 1021 	strb.w	r1, [r8, #33]	@ 0x21
 801efda:	3901      	subs	r1, #1
 801efdc:	fab1 f181 	clz	r1, r1
 801efe0:	2d00      	cmp	r5, #0
 801efe2:	bf18      	it	ne
 801efe4:	2501      	movne	r5, #1
 801efe6:	094a      	lsrs	r2, r1, #5
 801efe8:	0240      	lsls	r0, r0, #9
 801efea:	0274      	lsls	r4, r6, #9
 801efec:	ea40 51d6 	orr.w	r1, r0, r6, lsr #23
 801eff0:	4215      	tst	r5, r2
 801eff2:	bf18      	it	ne
 801eff4:	f501 7100 	addne.w	r1, r1, #512	@ 0x200
 801eff8:	4620      	mov	r0, r4
 801effa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 801effe:	2300      	movs	r3, #0
 801f000:	f44f 77fa 	mov.w	r7, #500	@ 0x1f4
 801f004:	2500      	movs	r5, #0
 801f006:	f7e1 f919 	bl	800023c <__aeabi_uldivmod>
 801f00a:	4606      	mov	r6, r0
 801f00c:	fb00 4017 	mls	r0, r0, r7, r4
 801f010:	f242 02c5 	movw	r2, #8389	@ 0x20c5
 801f014:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 801f018:	f3c0 004d 	ubfx	r0, r0, #1, #14
 801f01c:	fb00 f002 	mul.w	r0, r0, r2
 801f020:	eb09 5910 	add.w	r9, r9, r0, lsr #20
 801f024:	fa1f f089 	uxth.w	r0, r9
 801f028:	281f      	cmp	r0, #31
 801f02a:	d315      	bcc.n	801f058 <llhwc_slptmr_set+0x294>
 801f02c:	f1a9 001f 	sub.w	r0, r9, #31
 801f030:	b282      	uxth	r2, r0
 801f032:	f648 0389 	movw	r3, #34953	@ 0x8889
 801f036:	fb02 f203 	mul.w	r2, r2, r3
 801f03a:	0d13      	lsrs	r3, r2, #20
 801f03c:	011b      	lsls	r3, r3, #4
 801f03e:	eba3 5312 	sub.w	r3, r3, r2, lsr #20
 801f042:	eb16 5212 	adds.w	r2, r6, r2, lsr #20
 801f046:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801f04a:	f141 0100 	adc.w	r1, r1, #0
 801f04e:	1c56      	adds	r6, r2, #1
 801f050:	f100 0901 	add.w	r9, r0, #1
 801f054:	f141 0100 	adc.w	r1, r1, #0
 801f058:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 801f05c:	f24b 78ff 	movw	r8, #47103	@ 0xb7ff
 801f060:	f6cf 6817 	movt	r8, #65047	@ 0xfe17
 801f064:	4281      	cmp	r1, r0
 801f066:	bf88      	it	hi
 801f068:	2501      	movhi	r5, #1
 801f06a:	e02a      	b.n	801f0c2 <llhwc_slptmr_set+0x2fe>
 801f06c:	f8dd b014 	ldr.w	fp, [sp, #20]
 801f070:	f24b 78ff 	movw	r8, #47103	@ 0xb7ff
 801f074:	f6cf 6817 	movt	r8, #65047	@ 0xfe17
 801f078:	e020      	b.n	801f0bc <llhwc_slptmr_set+0x2f8>
 801f07a:	f8dd b014 	ldr.w	fp, [sp, #20]
 801f07e:	f24b 78ff 	movw	r8, #47103	@ 0xb7ff
 801f082:	f242 0241 	movw	r2, #8257	@ 0x2041
 801f086:	44b9      	add	r9, r7
 801f088:	f6cf 6817 	movt	r8, #65047	@ 0xfe17
 801f08c:	f6c0 0210 	movt	r2, #2064	@ 0x810
 801f090:	e9dd 1702 	ldrd	r1, r7, [sp, #8]
 801f094:	9b04      	ldr	r3, [sp, #16]
 801f096:	fb04 0001 	mla	r0, r4, r1, r0
 801f09a:	eb09 0100 	add.w	r1, r9, r0
 801f09e:	0968      	lsrs	r0, r5, #5
 801f0a0:	fba0 0202 	umull	r0, r2, r0, r2
 801f0a4:	0890      	lsrs	r0, r2, #2
 801f0a6:	bf00      	nop
 801f0a8:	f5b5 6f7e 	cmp.w	r5, #4064	@ 0xfe0
 801f0ac:	4689      	mov	r9, r1
 801f0ae:	d305      	bcc.n	801f0bc <llhwc_slptmr_set+0x2f8>
 801f0b0:	fa1f f189 	uxth.w	r1, r9
 801f0b4:	4288      	cmp	r0, r1
 801f0b6:	eba9 0100 	sub.w	r1, r9, r0
 801f0ba:	d3f5      	bcc.n	801f0a8 <llhwc_slptmr_set+0x2e4>
 801f0bc:	fb07 6603 	mla	r6, r7, r3, r6
 801f0c0:	2500      	movs	r5, #0
 801f0c2:	2400      	movs	r4, #0
 801f0c4:	f1bb 0f00 	cmp.w	fp, #0
 801f0c8:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 801f0cc:	d00c      	beq.n	801f0e8 <llhwc_slptmr_set+0x324>
 801f0ce:	f247 3014 	movw	r0, #29460	@ 0x7314
 801f0d2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f0d6:	6800      	ldr	r0, [r0, #0]
 801f0d8:	2103      	movs	r1, #3
 801f0da:	f000 f88b 	bl	801f1f4 <llhwc_slptmr_polling>
 801f0de:	68e0      	ldr	r0, [r4, #12]
 801f0e0:	f020 0020 	bic.w	r0, r0, #32
 801f0e4:	60e0      	str	r0, [r4, #12]
 801f0e6:	e021      	b.n	801f12c <llhwc_slptmr_set+0x368>
 801f0e8:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f0ec:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f0f0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801f0f2:	f100 030c 	add.w	r3, r0, #12
 801f0f6:	2901      	cmp	r1, #1
 801f0f8:	bf1c      	itt	ne
 801f0fa:	f8da 1000 	ldrne.w	r1, [sl]
 801f0fe:	6241      	strne	r1, [r0, #36]	@ 0x24
 801f100:	e9da 1200 	ldrd	r1, r2, [sl]
 801f104:	f8a0 9018 	strh.w	r9, [r0, #24]
 801f108:	c346      	stmia	r3!, {r1, r2, r6}
 801f10a:	9a06      	ldr	r2, [sp, #24]
 801f10c:	7685      	strb	r5, [r0, #26]
 801f10e:	fa1f f189 	uxth.w	r1, r9
 801f112:	76c2      	strb	r2, [r0, #27]
 801f114:	f240 405c 	movw	r0, #1116	@ 0x45c
 801f118:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801f11c:	6001      	str	r1, [r0, #0]
 801f11e:	f7fd ff69 	bl	801cff4 <llhwc_phy_get_phy_strt_state>
 801f122:	b918      	cbnz	r0, 801f12c <llhwc_slptmr_set+0x368>
 801f124:	2000      	movs	r0, #0
 801f126:	2101      	movs	r1, #1
 801f128:	f7fd f95e 	bl	801c3e8 <llhwc_phy_strt_stp>
 801f12c:	6961      	ldr	r1, [r4, #20]
 801f12e:	2200      	movs	r2, #0
 801f130:	1d08      	adds	r0, r1, #4
 801f132:	f142 0200 	adc.w	r2, r2, #0
 801f136:	f005 0301 	and.w	r3, r5, #1
 801f13a:	1a37      	subs	r7, r6, r0
 801f13c:	eb73 0202 	sbcs.w	r2, r3, r2
 801f140:	bf28      	it	cs
 801f142:	4630      	movcs	r0, r6
 801f144:	f1bb 0f01 	cmp.w	fp, #1
 801f148:	bf14      	ite	ne
 801f14a:	4630      	movne	r0, r6
 801f14c:	2d01      	cmpeq	r5, #1
 801f14e:	d017      	beq.n	801f180 <llhwc_slptmr_set+0x3bc>
 801f150:	f247 3130 	movw	r1, #29488	@ 0x7330
 801f154:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801f158:	f891 2020 	ldrb.w	r2, [r1, #32]
 801f15c:	b922      	cbnz	r2, 801f168 <llhwc_slptmr_set+0x3a4>
 801f15e:	4540      	cmp	r0, r8
 801f160:	bf84      	itt	hi
 801f162:	2201      	movhi	r2, #1
 801f164:	f881 2020 	strbhi.w	r2, [r1, #32]
 801f168:	f1bb 0f00 	cmp.w	fp, #0
 801f16c:	d11c      	bne.n	801f1a8 <llhwc_slptmr_set+0x3e4>
 801f16e:	1c42      	adds	r2, r0, #1
 801f170:	2a01      	cmp	r2, #1
 801f172:	d819      	bhi.n	801f1a8 <llhwc_slptmr_set+0x3e4>
 801f174:	2001      	movs	r0, #1
 801f176:	f04f 34ff 	mov.w	r4, #4294967295
 801f17a:	f881 0020 	strb.w	r0, [r1, #32]
 801f17e:	e02c      	b.n	801f1da <llhwc_slptmr_set+0x416>
 801f180:	f111 0f05 	cmn.w	r1, #5
 801f184:	d8e4      	bhi.n	801f150 <llhwc_slptmr_set+0x38c>
 801f186:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801f18a:	f6cf 62ff 	movt	r2, #65279	@ 0xfeff
 801f18e:	4291      	cmp	r1, r2
 801f190:	d3de      	bcc.n	801f150 <llhwc_slptmr_set+0x38c>
 801f192:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f196:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f19a:	2101      	movs	r1, #1
 801f19c:	f880 104e 	strb.w	r1, [r0, #78]	@ 0x4e
 801f1a0:	f880 1020 	strb.w	r1, [r0, #32]
 801f1a4:	f06f 0001 	mvn.w	r0, #1
 801f1a8:	a110      	add	r1, pc, #64	@ (adr r1, 801f1ec <llhwc_slptmr_set+0x428>)
 801f1aa:	f851 102b 	ldr.w	r1, [r1, fp, lsl #2]
 801f1ae:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
 801f1b2:	5108      	str	r0, [r1, r4]
 801f1b4:	f24e 606c 	movw	r0, #58988	@ 0xe66c
 801f1b8:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801f1bc:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 801f1c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801f1c4:	590a      	ldr	r2, [r1, r4]
 801f1c6:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
 801f1ca:	2701      	movs	r7, #1
 801f1cc:	439a      	bics	r2, r3
 801f1ce:	fa07 f000 	lsl.w	r0, r7, r0
 801f1d2:	4018      	ands	r0, r3
 801f1d4:	4410      	add	r0, r2
 801f1d6:	5108      	str	r0, [r1, r4]
 801f1d8:	2400      	movs	r4, #0
 801f1da:	f7fc fc02 	bl	801b9e2 <os_enable_isr>
 801f1de:	2019      	movs	r0, #25
 801f1e0:	f7fc fbe6 	bl	801b9b0 <bsp_debug_gpio_clear>
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	b007      	add	sp, #28
 801f1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ec:	00000010 	.word	0x00000010
 801f1f0:	00000018 	.word	0x00000018

0801f1f4 <llhwc_slptmr_polling>:
 801f1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1f6:	b081      	sub	sp, #4
 801f1f8:	4605      	mov	r5, r0
 801f1fa:	2000      	movs	r0, #0
 801f1fc:	460c      	mov	r4, r1
 801f1fe:	9000      	str	r0, [sp, #0]
 801f200:	f7fc fbed 	bl	801b9de <os_disable_isr>
 801f204:	426f      	negs	r7, r5
 801f206:	466e      	mov	r6, sp
 801f208:	4630      	mov	r0, r6
 801f20a:	f7ff f95e 	bl	801e4ca <llhwc_slptmr_get>
 801f20e:	9800      	ldr	r0, [sp, #0]
 801f210:	4639      	mov	r1, r7
 801f212:	42a8      	cmp	r0, r5
 801f214:	bf38      	it	cc
 801f216:	43e9      	mvncc	r1, r5
 801f218:	4408      	add	r0, r1
 801f21a:	42a0      	cmp	r0, r4
 801f21c:	d3f4      	bcc.n	801f208 <llhwc_slptmr_polling+0x14>
 801f21e:	b001      	add	sp, #4
 801f220:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f224:	f7fc bbdd 	b.w	801b9e2 <os_enable_isr>

0801f228 <llhwc_slptmr_stop>:
 801f228:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f22c:	f24e 616c 	movw	r1, #58988	@ 0xe66c
 801f230:	f6c0 0102 	movt	r1, #2050	@ 0x802
 801f234:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 801f238:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801f23c:	2100      	movs	r1, #0
 801f23e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801f242:	5853      	ldr	r3, [r2, r1]
 801f244:	6840      	ldr	r0, [r0, #4]
 801f246:	ea23 0000 	bic.w	r0, r3, r0
 801f24a:	5050      	str	r0, [r2, r1]
 801f24c:	4770      	bx	lr

0801f24e <ll_cmn_clr_isr>:
 801f24e:	b5b0      	push	{r4, r5, r7, lr}
 801f250:	240c      	movs	r4, #12
 801f252:	2014      	movs	r0, #20
 801f254:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 801f258:	f7fc fba8 	bl	801b9ac <bsp_debug_gpio_set>
 801f25c:	6920      	ldr	r0, [r4, #16]
 801f25e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 801f262:	6120      	str	r0, [r4, #16]
 801f264:	6920      	ldr	r0, [r4, #16]
 801f266:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 801f26a:	6120      	str	r0, [r4, #16]
 801f26c:	6820      	ldr	r0, [r4, #0]
 801f26e:	0700      	lsls	r0, r0, #28
 801f270:	d517      	bpl.n	801f2a2 <ll_cmn_clr_isr+0x54>
 801f272:	6820      	ldr	r0, [r4, #0]
 801f274:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 801f278:	6020      	str	r0, [r4, #0]
 801f27a:	6820      	ldr	r0, [r4, #0]
 801f27c:	f040 0010 	orr.w	r0, r0, #16
 801f280:	6020      	str	r0, [r4, #0]
 801f282:	6820      	ldr	r0, [r4, #0]
 801f284:	f020 0010 	bic.w	r0, r0, #16
 801f288:	6020      	str	r0, [r4, #0]
 801f28a:	f247 3014 	movw	r0, #29460	@ 0x7314
 801f28e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f292:	f7ff f91a 	bl	801e4ca <llhwc_slptmr_get>
 801f296:	f247 30d4 	movw	r0, #29652	@ 0x73d4
 801f29a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f29e:	2101      	movs	r1, #1
 801f2a0:	7001      	strb	r1, [r0, #0]
 801f2a2:	6820      	ldr	r0, [r4, #0]
 801f2a4:	f240 4544 	movw	r5, #1092	@ 0x444
 801f2a8:	0580      	lsls	r0, r0, #22
 801f2aa:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801f2ae:	d416      	bmi.n	801f2de <ll_cmn_clr_isr+0x90>
 801f2b0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801f2b4:	06c0      	lsls	r0, r0, #27
 801f2b6:	d527      	bpl.n	801f308 <ll_cmn_clr_isr+0xba>
 801f2b8:	6868      	ldr	r0, [r5, #4]
 801f2ba:	2101      	movs	r1, #1
 801f2bc:	f040 0010 	orr.w	r0, r0, #16
 801f2c0:	6068      	str	r0, [r5, #4]
 801f2c2:	6828      	ldr	r0, [r5, #0]
 801f2c4:	f040 0010 	orr.w	r0, r0, #16
 801f2c8:	6028      	str	r0, [r5, #0]
 801f2ca:	6828      	ldr	r0, [r5, #0]
 801f2cc:	f020 0010 	bic.w	r0, r0, #16
 801f2d0:	6028      	str	r0, [r5, #0]
 801f2d2:	f247 30d5 	movw	r0, #29653	@ 0x73d5
 801f2d6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f2da:	7001      	strb	r1, [r0, #0]
 801f2dc:	e014      	b.n	801f308 <ll_cmn_clr_isr+0xba>
 801f2de:	2017      	movs	r0, #23
 801f2e0:	f7fc fb68 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801f2e4:	f247 30d5 	movw	r0, #29653	@ 0x73d5
 801f2e8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f2ec:	2101      	movs	r1, #1
 801f2ee:	7001      	strb	r1, [r0, #0]
 801f2f0:	6820      	ldr	r0, [r4, #0]
 801f2f2:	f020 0001 	bic.w	r0, r0, #1
 801f2f6:	6020      	str	r0, [r4, #0]
 801f2f8:	6820      	ldr	r0, [r4, #0]
 801f2fa:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 801f2fe:	6020      	str	r0, [r4, #0]
 801f300:	6820      	ldr	r0, [r4, #0]
 801f302:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 801f306:	6020      	str	r0, [r4, #0]
 801f308:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801f30c:	0680      	lsls	r0, r0, #26
 801f30e:	d511      	bpl.n	801f334 <ll_cmn_clr_isr+0xe6>
 801f310:	6868      	ldr	r0, [r5, #4]
 801f312:	2101      	movs	r1, #1
 801f314:	f040 0020 	orr.w	r0, r0, #32
 801f318:	6068      	str	r0, [r5, #4]
 801f31a:	6828      	ldr	r0, [r5, #0]
 801f31c:	f040 0020 	orr.w	r0, r0, #32
 801f320:	6028      	str	r0, [r5, #0]
 801f322:	6828      	ldr	r0, [r5, #0]
 801f324:	f020 0020 	bic.w	r0, r0, #32
 801f328:	6028      	str	r0, [r5, #0]
 801f32a:	f247 302a 	movw	r0, #29482	@ 0x732a
 801f32e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f332:	7001      	strb	r1, [r0, #0]
 801f334:	2014      	movs	r0, #20
 801f336:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801f33a:	f7fc bb39 	b.w	801b9b0 <bsp_debug_gpio_clear>
	...

0801f340 <llhwc_cmn_rco_isr>:
 801f340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f344:	b081      	sub	sp, #4
 801f346:	2614      	movs	r6, #20
 801f348:	2037      	movs	r0, #55	@ 0x37
 801f34a:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801f34e:	f7fc fb2d 	bl	801b9ac <bsp_debug_gpio_set>
 801f352:	f8d6 4470 	ldr.w	r4, [r6, #1136]	@ 0x470
 801f356:	2000      	movs	r0, #0
 801f358:	2105      	movs	r1, #5
 801f35a:	2700      	movs	r7, #0
 801f35c:	f000 fc92 	bl	801fc84 <llhwc_cmn_control_aclk>
 801f360:	f247 35b0 	movw	r5, #29616	@ 0x73b0
 801f364:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f368:	6928      	ldr	r0, [r5, #16]
 801f36a:	2800      	cmp	r0, #0
 801f36c:	f000 80ca 	beq.w	801f504 <llhwc_cmn_rco_isr+0x1c4>
 801f370:	f247 302c 	movw	r0, #29484	@ 0x732c
 801f374:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f378:	6007      	str	r7, [r0, #0]
 801f37a:	2001      	movs	r0, #1
 801f37c:	f3c4 2413 	ubfx	r4, r4, #8, #20
 801f380:	f7fc fb01 	bl	801b986 <bsp_rco_clbr_not>
 801f384:	f8d6 0470 	ldr.w	r0, [r6, #1136]	@ 0x470
 801f388:	f247 321c 	movw	r2, #29468	@ 0x731c
 801f38c:	f020 0001 	bic.w	r0, r0, #1
 801f390:	f8c6 0470 	str.w	r0, [r6, #1136]	@ 0x470
 801f394:	6831      	ldr	r1, [r6, #0]
 801f396:	7e28      	ldrb	r0, [r5, #24]
 801f398:	3101      	adds	r1, #1
 801f39a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801f39e:	2801      	cmp	r0, #1
 801f3a0:	6011      	str	r1, [r2, #0]
 801f3a2:	d829      	bhi.n	801f3f8 <llhwc_cmn_rco_isr+0xb8>
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	2101      	movs	r1, #1
 801f3a8:	2c00      	cmp	r4, #0
 801f3aa:	bf18      	it	ne
 801f3ac:	2001      	movne	r0, #1
 801f3ae:	2601      	movs	r6, #1
 801f3b0:	f7fc fab5 	bl	801b91e <bsp_assert>
 801f3b4:	2c00      	cmp	r4, #0
 801f3b6:	f000 80a5 	beq.w	801f504 <llhwc_cmn_rco_isr+0x1c4>
 801f3ba:	f24f 0118 	movw	r1, #61464	@ 0xf018
 801f3be:	f2c0 0101 	movt	r1, #1
 801f3c2:	f247 3088 	movw	r0, #29576	@ 0x7388
 801f3c6:	1c4a      	adds	r2, r1, #1
 801f3c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f3cc:	4294      	cmp	r4, r2
 801f3ce:	6004      	str	r4, [r0, #0]
 801f3d0:	616c      	str	r4, [r5, #20]
 801f3d2:	7106      	strb	r6, [r0, #4]
 801f3d4:	d92f      	bls.n	801f436 <llhwc_cmn_rco_isr+0xf6>
 801f3d6:	f24d 531f 	movw	r3, #54559	@ 0xd51f
 801f3da:	08e2      	lsrs	r2, r4, #3
 801f3dc:	f2c0 4320 	movt	r3, #1056	@ 0x420
 801f3e0:	fba2 2303 	umull	r2, r3, r2, r3
 801f3e4:	0a1a      	lsrs	r2, r3, #8
 801f3e6:	fb02 4111 	mls	r1, r2, r1, r4
 801f3ea:	2701      	movs	r7, #1
 801f3ec:	2900      	cmp	r1, #0
 801f3ee:	bf18      	it	ne
 801f3f0:	eb07 2213 	addne.w	r2, r7, r3, lsr #8
 801f3f4:	1e51      	subs	r1, r2, #1
 801f3f6:	e01f      	b.n	801f438 <llhwc_cmn_rco_isr+0xf8>
 801f3f8:	2802      	cmp	r0, #2
 801f3fa:	f040 8083 	bne.w	801f504 <llhwc_cmn_rco_isr+0x1c4>
 801f3fe:	f247 3c88 	movw	ip, #29576	@ 0x7388
 801f402:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 801f406:	f8dc 3000 	ldr.w	r3, [ip]
 801f40a:	ebc4 10c4 	rsb	r0, r4, r4, lsl #7
 801f40e:	7a29      	ldrb	r1, [r5, #8]
 801f410:	e9d5 8e00 	ldrd	r8, lr, [r5]
 801f414:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f418:	fbb0 f9f1 	udiv	r9, r0, r1
 801f41c:	f241 7059 	movw	r0, #5977	@ 0x1759
 801f420:	f2cd 10b7 	movt	r0, #53687	@ 0xd1b7
 801f424:	fba2 0700 	umull	r0, r7, r2, r0
 801f428:	4599      	cmp	r9, r3
 801f42a:	616c      	str	r4, [r5, #20]
 801f42c:	d206      	bcs.n	801f43c <llhwc_cmn_rco_isr+0xfc>
 801f42e:	eba3 0209 	sub.w	r2, r3, r9
 801f432:	2000      	movs	r0, #0
 801f434:	e006      	b.n	801f444 <llhwc_cmn_rco_isr+0x104>
 801f436:	2100      	movs	r1, #0
 801f438:	6101      	str	r1, [r0, #16]
 801f43a:	e063      	b.n	801f504 <llhwc_cmn_rco_isr+0x1c4>
 801f43c:	d905      	bls.n	801f44a <llhwc_cmn_rco_isr+0x10a>
 801f43e:	eba9 0203 	sub.w	r2, r9, r3
 801f442:	2001      	movs	r0, #1
 801f444:	0b79      	lsrs	r1, r7, #13
 801f446:	428a      	cmp	r2, r1
 801f448:	d802      	bhi.n	801f450 <llhwc_cmn_rco_isr+0x110>
 801f44a:	2200      	movs	r2, #0
 801f44c:	2002      	movs	r0, #2
 801f44e:	4699      	mov	r9, r3
 801f450:	f885 0020 	strb.w	r0, [r5, #32]
 801f454:	b14b      	cbz	r3, 801f46a <llhwc_cmn_rco_isr+0x12a>
 801f456:	461f      	mov	r7, r3
 801f458:	4639      	mov	r1, r7
 801f45a:	fbb2 f7f7 	udiv	r7, r2, r7
 801f45e:	fb07 2711 	mls	r7, r7, r1, r2
 801f462:	460a      	mov	r2, r1
 801f464:	2f00      	cmp	r7, #0
 801f466:	d1f7      	bne.n	801f458 <llhwc_cmn_rco_isr+0x118>
 801f468:	e000      	b.n	801f46c <llhwc_cmn_rco_isr+0x12c>
 801f46a:	4611      	mov	r1, r2
 801f46c:	2802      	cmp	r0, #2
 801f46e:	d008      	beq.n	801f482 <llhwc_cmn_rco_isr+0x142>
 801f470:	2801      	cmp	r0, #1
 801f472:	d00d      	beq.n	801f490 <llhwc_cmn_rco_isr+0x150>
 801f474:	2800      	cmp	r0, #0
 801f476:	4647      	mov	r7, r8
 801f478:	4670      	mov	r0, lr
 801f47a:	d111      	bne.n	801f4a0 <llhwc_cmn_rco_isr+0x160>
 801f47c:	eba3 0009 	sub.w	r0, r3, r9
 801f480:	e008      	b.n	801f494 <llhwc_cmn_rco_isr+0x154>
 801f482:	2000      	movs	r0, #0
 801f484:	2101      	movs	r1, #1
 801f486:	e9c5 1000 	strd	r1, r0, [r5]
 801f48a:	f8cc 0008 	str.w	r0, [ip, #8]
 801f48e:	e033      	b.n	801f4f8 <llhwc_cmn_rco_isr+0x1b8>
 801f490:	eba9 0003 	sub.w	r0, r9, r3
 801f494:	fbb3 f7f1 	udiv	r7, r3, r1
 801f498:	fbb0 f0f1 	udiv	r0, r0, r1
 801f49c:	e9c5 7000 	strd	r7, r0, [r5]
 801f4a0:	f04f 0200 	mov.w	r2, #0
 801f4a4:	b160      	cbz	r0, 801f4c0 <llhwc_cmn_rco_isr+0x180>
 801f4a6:	2f01      	cmp	r7, #1
 801f4a8:	d00a      	beq.n	801f4c0 <llhwc_cmn_rco_isr+0x180>
 801f4aa:	fbb7 f1f0 	udiv	r1, r7, r0
 801f4ae:	ebc7 12c7 	rsb	r2, r7, r7, lsl #7
 801f4b2:	fb01 7110 	mls	r1, r1, r0, r7
 801f4b6:	0152      	lsls	r2, r2, #5
 801f4b8:	fb01 f104 	mul.w	r1, r1, r4
 801f4bc:	fbb1 f2f2 	udiv	r2, r1, r2
 801f4c0:	f8cc 2008 	str.w	r2, [ip, #8]
 801f4c4:	b1c0      	cbz	r0, 801f4f8 <llhwc_cmn_rco_isr+0x1b8>
 801f4c6:	2f01      	cmp	r7, #1
 801f4c8:	d016      	beq.n	801f4f8 <llhwc_cmn_rco_isr+0x1b8>
 801f4ca:	7ea9      	ldrb	r1, [r5, #26]
 801f4cc:	b301      	cbz	r1, 801f510 <llhwc_cmn_rco_isr+0x1d0>
 801f4ce:	4547      	cmp	r7, r8
 801f4d0:	bf08      	it	eq
 801f4d2:	4570      	cmpeq	r0, lr
 801f4d4:	d016      	beq.n	801f504 <llhwc_cmn_rco_isr+0x1c4>
 801f4d6:	2038      	movs	r0, #56	@ 0x38
 801f4d8:	f7fc fa68 	bl	801b9ac <bsp_debug_gpio_set>
 801f4dc:	f7fc fa7f 	bl	801b9de <os_disable_isr>
 801f4e0:	2001      	movs	r0, #1
 801f4e2:	f000 fe5f 	bl	80201a4 <llhwc_cmn_hw_rco_compnstn_enable>
 801f4e6:	2038      	movs	r0, #56	@ 0x38
 801f4e8:	f7fc fa62 	bl	801b9b0 <bsp_debug_gpio_clear>
 801f4ec:	f7fc fa79 	bl	801b9e2 <os_enable_isr>
 801f4f0:	4620      	mov	r0, r4
 801f4f2:	f000 fefa 	bl	80202ea <llhwc_cmn_update_rco_timer>
 801f4f6:	e005      	b.n	801f504 <llhwc_cmn_rco_isr+0x1c4>
 801f4f8:	2000      	movs	r0, #0
 801f4fa:	76a8      	strb	r0, [r5, #26]
 801f4fc:	6930      	ldr	r0, [r6, #16]
 801f4fe:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 801f502:	6130      	str	r0, [r6, #16]
 801f504:	2037      	movs	r0, #55	@ 0x37
 801f506:	b001      	add	sp, #4
 801f508:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f50c:	f7fc ba50 	b.w	801b9b0 <bsp_debug_gpio_clear>
 801f510:	2038      	movs	r0, #56	@ 0x38
 801f512:	f7fc fa4b 	bl	801b9ac <bsp_debug_gpio_set>
 801f516:	2001      	movs	r0, #1
 801f518:	f000 fe44 	bl	80201a4 <llhwc_cmn_hw_rco_compnstn_enable>
 801f51c:	4620      	mov	r0, r4
 801f51e:	f000 fee4 	bl	80202ea <llhwc_cmn_update_rco_timer>
 801f522:	2038      	movs	r0, #56	@ 0x38
 801f524:	f7fc fa44 	bl	801b9b0 <bsp_debug_gpio_clear>
 801f528:	e7ec      	b.n	801f504 <llhwc_cmn_rco_isr+0x1c4>

0801f52a <get_pwr_domain>:
 801f52a:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f52e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f532:	f890 0022 	ldrb.w	r0, [r0, #34]	@ 0x22
 801f536:	4770      	bx	lr

0801f538 <llhwc_cmn_reg_isr>:
 801f538:	2802      	cmp	r0, #2
 801f53a:	d008      	beq.n	801f54e <llhwc_cmn_reg_isr+0x16>
 801f53c:	2801      	cmp	r0, #1
 801f53e:	bf18      	it	ne
 801f540:	4770      	bxne	lr
 801f542:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f546:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f54a:	6041      	str	r1, [r0, #4]
 801f54c:	4770      	bx	lr
 801f54e:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f552:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f556:	6081      	str	r1, [r0, #8]
 801f558:	4770      	bx	lr

0801f55a <llhwc_cmn_set_phy>:
 801f55a:	b570      	push	{r4, r5, r6, lr}
 801f55c:	4605      	mov	r5, r0
 801f55e:	f240 4080 	movw	r0, #1152	@ 0x480
 801f562:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801f566:	460c      	mov	r4, r1
 801f568:	6801      	ldr	r1, [r0, #0]
 801f56a:	9e04      	ldr	r6, [sp, #16]
 801f56c:	f364 0102 	bfi	r1, r4, #0, #3
 801f570:	6001      	str	r1, [r0, #0]
 801f572:	4628      	mov	r0, r5
 801f574:	4621      	mov	r1, r4
 801f576:	f7fd fcee 	bl	801cf56 <llhwc_phy_get_ltncy>
 801f57a:	4628      	mov	r0, r5
 801f57c:	4621      	mov	r1, r4
 801f57e:	4632      	mov	r2, r6
 801f580:	f7fd fc85 	bl	801ce8e <llhwc_phy_get_sequenc_ram_ofst>
 801f584:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f588:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f58c:	0c29      	lsrs	r1, r5, #16
 801f58e:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
 801f592:	8781      	strh	r1, [r0, #60]	@ 0x3c
 801f594:	8745      	strh	r5, [r0, #58]	@ 0x3a
 801f596:	bd70      	pop	{r4, r5, r6, pc}

0801f598 <llhwc_get_hw_setup_time>:
 801f598:	f24e 625b 	movw	r2, #58971	@ 0xe65b
 801f59c:	f24e 635d 	movw	r3, #58973	@ 0xe65d
 801f5a0:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801f5a4:	f6c0 0302 	movt	r3, #2050	@ 0x802
 801f5a8:	2802      	cmp	r0, #2
 801f5aa:	bf08      	it	eq
 801f5ac:	4613      	moveq	r3, r2
 801f5ae:	f24e 6259 	movw	r2, #58969	@ 0xe659
 801f5b2:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801f5b6:	2801      	cmp	r0, #1
 801f5b8:	bf08      	it	eq
 801f5ba:	4613      	moveq	r3, r2
 801f5bc:	f24e 6c5c 	movw	ip, #58972	@ 0xe65c
 801f5c0:	f24e 625e 	movw	r2, #58974	@ 0xe65e
 801f5c4:	f6c0 0c02 	movt	ip, #2050	@ 0x802
 801f5c8:	f6c0 0202 	movt	r2, #2050	@ 0x802
 801f5cc:	2802      	cmp	r0, #2
 801f5ce:	bf08      	it	eq
 801f5d0:	4662      	moveq	r2, ip
 801f5d2:	f24e 6c5a 	movw	ip, #58970	@ 0xe65a
 801f5d6:	f6c0 0c02 	movt	ip, #2050	@ 0x802
 801f5da:	2801      	cmp	r0, #1
 801f5dc:	bf08      	it	eq
 801f5de:	4662      	moveq	r2, ip
 801f5e0:	2900      	cmp	r1, #0
 801f5e2:	bf08      	it	eq
 801f5e4:	461a      	moveq	r2, r3
 801f5e6:	7810      	ldrb	r0, [r2, #0]
 801f5e8:	f247 12a8 	movw	r2, #29096	@ 0x71a8
 801f5ec:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801f5f0:	f102 030c 	add.w	r3, r2, #12
 801f5f4:	2900      	cmp	r1, #0
 801f5f6:	bf08      	it	eq
 801f5f8:	f102 0308 	addeq.w	r3, r2, #8
 801f5fc:	6819      	ldr	r1, [r3, #0]
 801f5fe:	4408      	add	r0, r1
 801f600:	3002      	adds	r0, #2
 801f602:	4770      	bx	lr

0801f604 <llhwc_rgstr_func>:
 801f604:	2803      	cmp	r0, #3
 801f606:	d006      	beq.n	801f616 <llhwc_rgstr_func+0x12>
 801f608:	b950      	cbnz	r0, 801f620 <llhwc_rgstr_func+0x1c>
 801f60a:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f60e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f612:	6401      	str	r1, [r0, #64]	@ 0x40
 801f614:	4770      	bx	lr
 801f616:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f61a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f61e:	6441      	str	r1, [r0, #68]	@ 0x44
 801f620:	4770      	bx	lr

0801f622 <llhwc_wait_for_evnt_on_air>:
 801f622:	b510      	push	{r4, lr}
 801f624:	2008      	movs	r0, #8
 801f626:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801f62a:	6800      	ldr	r0, [r0, #0]
 801f62c:	f000 0407 	and.w	r4, r0, #7
 801f630:	201d      	movs	r0, #29
 801f632:	f7fc f9bb 	bl	801b9ac <bsp_debug_gpio_set>
 801f636:	2c04      	cmp	r4, #4
 801f638:	bf18      	it	ne
 801f63a:	2c02      	cmpne	r4, #2
 801f63c:	d10e      	bne.n	801f65c <llhwc_wait_for_evnt_on_air+0x3a>
 801f63e:	f247 3430 	movw	r4, #29488	@ 0x7330
 801f642:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801f646:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801f648:	2101      	movs	r1, #1
 801f64a:	2800      	cmp	r0, #0
 801f64c:	bf18      	it	ne
 801f64e:	2001      	movne	r0, #1
 801f650:	f7fc f965 	bl	801b91e <bsp_assert>
 801f654:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801f656:	4780      	blx	r0
 801f658:	4604      	mov	r4, r0
 801f65a:	e000      	b.n	801f65e <llhwc_wait_for_evnt_on_air+0x3c>
 801f65c:	2400      	movs	r4, #0
 801f65e:	201d      	movs	r0, #29
 801f660:	f7fc f9a6 	bl	801b9b0 <bsp_debug_gpio_clear>
 801f664:	4620      	mov	r0, r4
 801f666:	bd10      	pop	{r4, pc}

0801f668 <llhwc_cmn_crypto_aes_start>:
 801f668:	f240 4168 	movw	r1, #1128	@ 0x468
 801f66c:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801f670:	680a      	ldr	r2, [r1, #0]
 801f672:	2804      	cmp	r0, #4
 801f674:	bf08      	it	eq
 801f676:	2003      	moveq	r0, #3
 801f678:	f360 0242 	bfi	r2, r0, #1, #2
 801f67c:	600a      	str	r2, [r1, #0]
 801f67e:	6808      	ldr	r0, [r1, #0]
 801f680:	f040 0001 	orr.w	r0, r0, #1
 801f684:	6008      	str	r0, [r1, #0]
 801f686:	4770      	bx	lr

0801f688 <llhwc_cmn_crypto_aes_done>:
 801f688:	f240 4044 	movw	r0, #1092	@ 0x444
 801f68c:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801f690:	6801      	ldr	r1, [r0, #0]
 801f692:	f041 0104 	orr.w	r1, r1, #4
 801f696:	6001      	str	r1, [r0, #0]
 801f698:	6801      	ldr	r1, [r0, #0]
 801f69a:	f021 0104 	bic.w	r1, r1, #4
 801f69e:	6001      	str	r1, [r0, #0]
 801f6a0:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801f6a2:	f021 0101 	bic.w	r1, r1, #1
 801f6a6:	6241      	str	r1, [r0, #36]	@ 0x24
 801f6a8:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801f6aa:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 801f6ae:	6241      	str	r1, [r0, #36]	@ 0x24
 801f6b0:	4770      	bx	lr
	...

0801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>:
 801f6b4:	b123      	cbz	r3, 801f6c0 <llhwc_cmn_crypto_set_n_byte_to_mem+0xc>
 801f6b6:	4288      	cmp	r0, r1
 801f6b8:	bf18      	it	ne
 801f6ba:	f001 b8c3 	bne.w	8020844 <ble_memcpy>
 801f6be:	e008      	b.n	801f6d2 <llhwc_cmn_crypto_set_n_byte_to_mem+0x1e>
 801f6c0:	2a00      	cmp	r2, #0
 801f6c2:	bf08      	it	eq
 801f6c4:	4770      	bxeq	lr
 801f6c6:	3901      	subs	r1, #1
 801f6c8:	5c8b      	ldrb	r3, [r1, r2]
 801f6ca:	3a01      	subs	r2, #1
 801f6cc:	f800 3b01 	strb.w	r3, [r0], #1
 801f6d0:	d1fa      	bne.n	801f6c8 <llhwc_cmn_crypto_set_n_byte_to_mem+0x14>
 801f6d2:	4770      	bx	lr

0801f6d4 <llhwc_cmn_crypto>:
 801f6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6d8:	b089      	sub	sp, #36	@ 0x24
 801f6da:	f247 3a30 	movw	sl, #29488	@ 0x7330
 801f6de:	e9dd 8616 	ldrd	r8, r6, [sp, #88]	@ 0x58
 801f6e2:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801f6e6:	9105      	str	r1, [sp, #20]
 801f6e8:	9008      	str	r0, [sp, #32]
 801f6ea:	f89a 7022 	ldrb.w	r7, [sl, #34]	@ 0x22
 801f6ee:	2000      	movs	r0, #0
 801f6f0:	2101      	movs	r1, #1
 801f6f2:	461d      	mov	r5, r3
 801f6f4:	4693      	mov	fp, r2
 801f6f6:	2400      	movs	r4, #0
 801f6f8:	f1b8 0f06 	cmp.w	r8, #6
 801f6fc:	bf38      	it	cc
 801f6fe:	2001      	movcc	r0, #1
 801f700:	f04f 0901 	mov.w	r9, #1
 801f704:	f7fc f90b 	bl	801b91e <bsp_assert>
 801f708:	2e02      	cmp	r6, #2
 801f70a:	bf38      	it	cc
 801f70c:	2401      	movcc	r4, #1
 801f70e:	4620      	mov	r0, r4
 801f710:	2101      	movs	r1, #1
 801f712:	f7fc f904 	bl	801b91e <bsp_assert>
 801f716:	2003      	movs	r0, #3
 801f718:	f7fc f95f 	bl	801b9da <disable_specific_irq>
 801f71c:	f1b8 0f05 	cmp.w	r8, #5
 801f720:	9706      	str	r7, [sp, #24]
 801f722:	9504      	str	r5, [sp, #16]
 801f724:	d84c      	bhi.n	801f7c0 <llhwc_cmn_crypto+0xec>
 801f726:	fa09 f008 	lsl.w	r0, r9, r8
 801f72a:	f010 0f3a 	tst.w	r0, #58	@ 0x3a
 801f72e:	d047      	beq.n	801f7c0 <llhwc_cmn_crypto+0xec>
 801f730:	b156      	cbz	r6, 801f748 <llhwc_cmn_crypto+0x74>
 801f732:	2e01      	cmp	r6, #1
 801f734:	d112      	bne.n	801f75c <llhwc_cmn_crypto+0x88>
 801f736:	f247 3030 	movw	r0, #29488	@ 0x7330
 801f73a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801f73e:	2101      	movs	r1, #1
 801f740:	f000 fa38 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 801f744:	4681      	mov	r9, r0
 801f746:	e009      	b.n	801f75c <llhwc_cmn_crypto+0x88>
 801f748:	f247 35a0 	movw	r5, #29600	@ 0x73a0
 801f74c:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801f750:	4628      	mov	r0, r5
 801f752:	2101      	movs	r1, #1
 801f754:	f000 fa2e 	bl	801fbb4 <llhwc_cmn_alloc_desc>
 801f758:	4681      	mov	r9, r0
 801f75a:	6028      	str	r0, [r5, #0]
 801f75c:	f64f 70fc 	movw	r0, #65532	@ 0xfffc
 801f760:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 801f764:	4448      	add	r0, r9
 801f766:	3004      	adds	r0, #4
 801f768:	9007      	str	r0, [sp, #28]
 801f76a:	4648      	mov	r0, r9
 801f76c:	2101      	movs	r1, #1
 801f76e:	f1b9 0f00 	cmp.w	r9, #0
 801f772:	bf18      	it	ne
 801f774:	2001      	movne	r0, #1
 801f776:	f7fc f8d2 	bl	801b91e <bsp_assert>
 801f77a:	4648      	mov	r0, r9
 801f77c:	2100      	movs	r1, #0
 801f77e:	2230      	movs	r2, #48	@ 0x30
 801f780:	f001 f8b0 	bl	80208e4 <ble_memset>
 801f784:	f89a 0022 	ldrb.w	r0, [sl, #34]	@ 0x22
 801f788:	b1a0      	cbz	r0, 801f7b4 <llhwc_cmn_crypto+0xe0>
 801f78a:	f240 4768 	movw	r7, #1128	@ 0x468
 801f78e:	2e01      	cmp	r6, #1
 801f790:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801f794:	d111      	bne.n	801f7ba <llhwc_cmn_crypto+0xe6>
 801f796:	2001      	movs	r0, #1
 801f798:	2101      	movs	r1, #1
 801f79a:	4634      	mov	r4, r6
 801f79c:	f000 fa72 	bl	801fc84 <llhwc_cmn_control_aclk>
 801f7a0:	69be      	ldr	r6, [r7, #24]
 801f7a2:	f7ff ff3e 	bl	801f622 <llhwc_wait_for_evnt_on_air>
 801f7a6:	b1d0      	cbz	r0, 801f7de <llhwc_cmn_crypto+0x10a>
 801f7a8:	f006 0907 	and.w	r9, r6, #7
 801f7ac:	4626      	mov	r6, r4
 801f7ae:	9c06      	ldr	r4, [sp, #24]
 801f7b0:	4605      	mov	r5, r0
 801f7b2:	e1d6      	b.n	801fb62 <llhwc_cmn_crypto+0x48e>
 801f7b4:	f04f 35ff 	mov.w	r5, #4294967295
 801f7b8:	e1df      	b.n	801fb7a <llhwc_cmn_crypto+0x4a6>
 801f7ba:	2005      	movs	r0, #5
 801f7bc:	9003      	str	r0, [sp, #12]
 801f7be:	e020      	b.n	801f802 <llhwc_cmn_crypto+0x12e>
 801f7c0:	f248 2034 	movw	r0, #33332	@ 0x8234
 801f7c4:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801f7c8:	3824      	subs	r0, #36	@ 0x24
 801f7ca:	2100      	movs	r1, #0
 801f7cc:	2214      	movs	r2, #20
 801f7ce:	f04f 0900 	mov.w	r9, #0
 801f7d2:	f001 f887 	bl	80208e4 <ble_memset>
 801f7d6:	f248 2010 	movw	r0, #33296	@ 0x8210
 801f7da:	9007      	str	r0, [sp, #28]
 801f7dc:	e7d2      	b.n	801f784 <llhwc_cmn_crypto+0xb0>
 801f7de:	f1b9 0f00 	cmp.w	r9, #0
 801f7e2:	d004      	beq.n	801f7ee <llhwc_cmn_crypto+0x11a>
 801f7e4:	4648      	mov	r0, r9
 801f7e6:	2100      	movs	r1, #0
 801f7e8:	2230      	movs	r2, #48	@ 0x30
 801f7ea:	f001 f87b 	bl	80208e4 <ble_memset>
 801f7ee:	f89a 0022 	ldrb.w	r0, [sl, #34]	@ 0x22
 801f7f2:	9006      	str	r0, [sp, #24]
 801f7f4:	69b8      	ldr	r0, [r7, #24]
 801f7f6:	f000 0007 	and.w	r0, r0, #7
 801f7fa:	9003      	str	r0, [sp, #12]
 801f7fc:	2003      	movs	r0, #3
 801f7fe:	f7ff f853 	bl	801e8a8 <llhwc_pwr_switch>
 801f802:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	@ 0x50
 801f806:	2500      	movs	r5, #0
 801f808:	9807      	ldr	r0, [sp, #28]
 801f80a:	3901      	subs	r1, #1
 801f80c:	f6c4 0502 	movt	r5, #18434	@ 0x4802
 801f810:	fab1 f181 	clz	r1, r1
 801f814:	eb00 0a05 	add.w	sl, r0, r5
 801f818:	094b      	lsrs	r3, r1, #5
 801f81a:	9905      	ldr	r1, [sp, #20]
 801f81c:	f10a 0004 	add.w	r0, sl, #4
 801f820:	2210      	movs	r2, #16
 801f822:	f7ff ff47 	bl	801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>
 801f826:	f1b8 0f05 	cmp.w	r8, #5
 801f82a:	f200 811b 	bhi.w	801fa64 <llhwc_cmn_crypto+0x390>
 801f82e:	2001      	movs	r0, #1
 801f830:	fa00 f008 	lsl.w	r0, r0, r8
 801f834:	f010 0f3a 	tst.w	r0, #58	@ 0x3a
 801f838:	f000 8114 	beq.w	801fa64 <llhwc_cmn_crypto+0x390>
 801f83c:	9c08      	ldr	r4, [sp, #32]
 801f83e:	4620      	mov	r0, r4
 801f840:	f7fc f872 	bl	801b928 <bsp_is_ptr_in_ble_mem>
 801f844:	2101      	movs	r1, #1
 801f846:	2800      	cmp	r0, #0
 801f848:	bf18      	it	ne
 801f84a:	2001      	movne	r0, #1
 801f84c:	f7fc f867 	bl	801b91e <bsp_assert>
 801f850:	1f20      	subs	r0, r4, #4
 801f852:	2100      	movs	r1, #0
 801f854:	2204      	movs	r2, #4
 801f856:	f001 f845 	bl	80208e4 <ble_memset>
 801f85a:	f1a8 0003 	sub.w	r0, r8, #3
 801f85e:	2801      	cmp	r0, #1
 801f860:	d819      	bhi.n	801f896 <llhwc_cmn_crypto+0x1c2>
 801f862:	4658      	mov	r0, fp
 801f864:	2101      	movs	r1, #1
 801f866:	f1bb 0f00 	cmp.w	fp, #0
 801f86a:	bf18      	it	ne
 801f86c:	2001      	movne	r0, #1
 801f86e:	f7fc f856 	bl	801b91e <bsp_assert>
 801f872:	f89b 1000 	ldrb.w	r1, [fp]
 801f876:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801f87a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801f87e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801f882:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801f886:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f88a:	ea40 6703 	orr.w	r7, r0, r3, lsl #24
 801f88e:	f89b 0004 	ldrb.w	r0, [fp, #4]
 801f892:	2300      	movs	r3, #0
 801f894:	e010      	b.n	801f8b8 <llhwc_cmn_crypto+0x1e4>
 801f896:	f89b 1000 	ldrb.w	r1, [fp]
 801f89a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801f89e:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801f8a2:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801f8a6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801f8aa:	f89b 6004 	ldrb.w	r6, [fp, #4]
 801f8ae:	ea40 4702 	orr.w	r7, r0, r2, lsl #16
 801f8b2:	ea43 2006 	orr.w	r0, r3, r6, lsl #8
 801f8b6:	2301      	movs	r3, #1
 801f8b8:	9002      	str	r0, [sp, #8]
 801f8ba:	f008 00fe 	and.w	r0, r8, #254	@ 0xfe
 801f8be:	2804      	cmp	r0, #4
 801f8c0:	9808      	ldr	r0, [sp, #32]
 801f8c2:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801f8c6:	f2cb 72fd 	movt	r2, #47101	@ 0xb7fd
 801f8ca:	4410      	add	r0, r2
 801f8cc:	9005      	str	r0, [sp, #20]
 801f8ce:	d117      	bne.n	801f900 <llhwc_cmn_crypto+0x22c>
 801f8d0:	f89b 600e 	ldrb.w	r6, [fp, #14]
 801f8d4:	464c      	mov	r4, r9
 801f8d6:	0236      	lsls	r6, r6, #8
 801f8d8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 801f8dc:	f89b 200f 	ldrb.w	r2, [fp, #15]
 801f8e0:	0a36      	lsrs	r6, r6, #8
 801f8e2:	f804 6f29 	strb.w	r6, [r4, #41]!
 801f8e6:	f1b8 0f04 	cmp.w	r8, #4
 801f8ea:	f04f 0801 	mov.w	r8, #1
 801f8ee:	7061      	strb	r1, [r4, #1]
 801f8f0:	f804 2c01 	strb.w	r2, [r4, #-1]
 801f8f4:	bf08      	it	eq
 801f8f6:	f04f 0803 	moveq.w	r8, #3
 801f8fa:	2101      	movs	r1, #1
 801f8fc:	2002      	movs	r0, #2
 801f8fe:	e015      	b.n	801f92c <llhwc_cmn_crypto+0x258>
 801f900:	464a      	mov	r2, r9
 801f902:	f812 1f29 	ldrb.w	r1, [r2, #41]!
 801f906:	2004      	movs	r0, #4
 801f908:	7854      	ldrb	r4, [r2, #1]
 801f90a:	7896      	ldrb	r6, [r2, #2]
 801f90c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 801f910:	ea41 4406 	orr.w	r4, r1, r6, lsl #16
 801f914:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801f918:	f361 040f 	bfi	r4, r1, #0, #16
 801f91c:	2100      	movs	r1, #0
 801f91e:	7014      	strb	r4, [r2, #0]
 801f920:	0c26      	lsrs	r6, r4, #16
 801f922:	0a24      	lsrs	r4, r4, #8
 801f924:	f802 1c01 	strb.w	r1, [r2, #-1]
 801f928:	7096      	strb	r6, [r2, #2]
 801f92a:	7054      	strb	r4, [r2, #1]
 801f92c:	ea43 0243 	orr.w	r2, r3, r3, lsl #1
 801f930:	f24e 6684 	movw	r6, #59012	@ 0xe684
 801f934:	f6c0 0602 	movt	r6, #2050	@ 0x802
 801f938:	eb06 0482 	add.w	r4, r6, r2, lsl #2
 801f93c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801f940:	e9d4 c401 	ldrd	ip, r4, [r4, #4]
 801f944:	9001      	str	r0, [sp, #4]
 801f946:	f852 e00a 	ldr.w	lr, [r2, sl]
 801f94a:	3302      	adds	r3, #2
 801f94c:	fa07 f404 	lsl.w	r4, r7, r4
 801f950:	ea2e 000c 	bic.w	r0, lr, ip
 801f954:	ea04 040c 	and.w	r4, r4, ip
 801f958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f95c:	4420      	add	r0, r4
 801f95e:	f842 000a 	str.w	r0, [r2, sl]
 801f962:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801f966:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 801f96a:	e9d2 2601 	ldrd	r2, r6, [r2, #4]
 801f96e:	f850 300a 	ldr.w	r3, [r0, sl]
 801f972:	9f02      	ldr	r7, [sp, #8]
 801f974:	4393      	bics	r3, r2
 801f976:	fa07 f606 	lsl.w	r6, r7, r6
 801f97a:	4032      	ands	r2, r6
 801f97c:	441a      	add	r2, r3
 801f97e:	f840 200a 	str.w	r2, [r0, sl]
 801f982:	eb0b 0001 	add.w	r0, fp, r1
 801f986:	7941      	ldrb	r1, [r0, #5]
 801f988:	7982      	ldrb	r2, [r0, #6]
 801f98a:	79c3      	ldrb	r3, [r0, #7]
 801f98c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801f990:	7a07      	ldrb	r7, [r0, #8]
 801f992:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801f996:	4649      	mov	r1, r9
 801f998:	f811 2f25 	ldrb.w	r2, [r1, #37]!
 801f99c:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 801f9a0:	f841 3c11 	str.w	r3, [r1, #-17]
 801f9a4:	7a43      	ldrb	r3, [r0, #9]
 801f9a6:	7a87      	ldrb	r7, [r0, #10]
 801f9a8:	7ac6      	ldrb	r6, [r0, #11]
 801f9aa:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 801f9ae:	788f      	ldrb	r7, [r1, #2]
 801f9b0:	78cc      	ldrb	r4, [r1, #3]
 801f9b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801f9b6:	784e      	ldrb	r6, [r1, #1]
 801f9b8:	7b00      	ldrb	r0, [r0, #12]
 801f9ba:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 801f9be:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 801f9c2:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 801f9c6:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
 801f9ca:	f841 0c0d 	str.w	r0, [r1, #-13]
 801f9ce:	f248 00ff 	movw	r0, #33023	@ 0x80ff
 801f9d2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801f9d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f9d6:	f6cf 7080 	movt	r0, #65408	@ 0xff80
 801f9da:	4018      	ands	r0, r3
 801f9dc:	460b      	mov	r3, r1
 801f9de:	f007 077f 	and.w	r7, r7, #127	@ 0x7f
 801f9e2:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 801f9e6:	ea40 2707 	orr.w	r7, r0, r7, lsl #8
 801f9ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f9ee:	f813 6f04 	ldrb.w	r6, [r3, #4]!
 801f9f2:	0c00      	lsrs	r0, r0, #16
 801f9f4:	7088      	strb	r0, [r1, #2]
 801f9f6:	0a38      	lsrs	r0, r7, #8
 801f9f8:	7048      	strb	r0, [r1, #1]
 801f9fa:	7898      	ldrb	r0, [r3, #2]
 801f9fc:	f44f 0760 	mov.w	r7, #14680064	@ 0xe00000
 801fa00:	ea07 4000 	and.w	r0, r7, r0, lsl #16
 801fa04:	9f04      	ldr	r7, [sp, #16]
 801fa06:	701e      	strb	r6, [r3, #0]
 801fa08:	f007 071f 	and.w	r7, r7, #31
 801fa0c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801fa10:	9e08      	ldr	r6, [sp, #32]
 801fa12:	0c00      	lsrs	r0, r0, #16
 801fa14:	700a      	strb	r2, [r1, #0]
 801fa16:	7098      	strb	r0, [r3, #2]
 801fa18:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 801fa1c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801fa20:	4308      	orrs	r0, r1
 801fa22:	6030      	str	r0, [r6, #0]
 801fa24:	6830      	ldr	r0, [r6, #0]
 801fa26:	f020 6080 	bic.w	r0, r0, #67108864	@ 0x4000000
 801fa2a:	6030      	str	r0, [r6, #0]
 801fa2c:	9a07      	ldr	r2, [sp, #28]
 801fa2e:	5950      	ldr	r0, [r2, r5]
 801fa30:	9905      	ldr	r1, [sp, #20]
 801fa32:	b280      	uxth	r0, r0
 801fa34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801fa38:	5150      	str	r0, [r2, r5]
 801fa3a:	5950      	ldr	r0, [r2, r5]
 801fa3c:	f361 000f 	bfi	r0, r1, #0, #16
 801fa40:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fa42:	5150      	str	r0, [r2, r5]
 801fa44:	b161      	cbz	r1, 801fa60 <llhwc_cmn_crypto+0x38c>
 801fa46:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 801fa4a:	9c06      	ldr	r4, [sp, #24]
 801fa4c:	f369 000f 	bfi	r0, r9, #0, #16
 801fa50:	f240 4768 	movw	r7, #1128	@ 0x468
 801fa54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801fa58:	9901      	ldr	r1, [sp, #4]
 801fa5a:	f6c4 0702 	movt	r7, #18434	@ 0x4802
 801fa5e:	e028      	b.n	801fab2 <llhwc_cmn_crypto+0x3de>
 801fa60:	2500      	movs	r5, #0
 801fa62:	e0a0      	b.n	801fba6 <llhwc_cmn_crypto+0x4d2>
 801fa64:	f248 2634 	movw	r6, #33332	@ 0x8234
 801fa68:	fab4 f084 	clz	r0, r4
 801fa6c:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801fa70:	9908      	ldr	r1, [sp, #32]
 801fa72:	0943      	lsrs	r3, r0, #5
 801fa74:	1d30      	adds	r0, r6, #4
 801fa76:	2210      	movs	r2, #16
 801fa78:	f7ff fe1c 	bl	801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>
 801fa7c:	4630      	mov	r0, r6
 801fa7e:	2100      	movs	r1, #0
 801fa80:	2204      	movs	r2, #4
 801fa82:	f000 ff2f 	bl	80208e4 <ble_memset>
 801fa86:	9a07      	ldr	r2, [sp, #28]
 801fa88:	f248 2134 	movw	r1, #33332	@ 0x8234
 801fa8c:	5950      	ldr	r0, [r2, r5]
 801fa8e:	f361 000f 	bfi	r0, r1, #0, #16
 801fa92:	5150      	str	r0, [r2, r5]
 801fa94:	6830      	ldr	r0, [r6, #0]
 801fa96:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801fa9a:	4308      	orrs	r0, r1
 801fa9c:	6030      	str	r0, [r6, #0]
 801fa9e:	f8d5 0408 	ldr.w	r0, [r5, #1032]	@ 0x408
 801faa2:	f248 2110 	movw	r1, #33296	@ 0x8210
 801faa6:	9c06      	ldr	r4, [sp, #24]
 801faa8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801faac:	f361 000f 	bfi	r0, r1, #0, #16
 801fab0:	2101      	movs	r1, #1
 801fab2:	f8c5 0408 	str.w	r0, [r5, #1032]	@ 0x408
 801fab6:	69b8      	ldr	r0, [r7, #24]
 801fab8:	f1b8 0f04 	cmp.w	r8, #4
 801fabc:	f020 0007 	bic.w	r0, r0, #7
 801fac0:	4408      	add	r0, r1
 801fac2:	61b8      	str	r0, [r7, #24]
 801fac4:	6838      	ldr	r0, [r7, #0]
 801fac6:	f020 0018 	bic.w	r0, r0, #24
 801faca:	6038      	str	r0, [r7, #0]
 801facc:	6839      	ldr	r1, [r7, #0]
 801face:	4640      	mov	r0, r8
 801fad0:	bf08      	it	eq
 801fad2:	2003      	moveq	r0, #3
 801fad4:	f360 0142 	bfi	r1, r0, #1, #2
 801fad8:	6039      	str	r1, [r7, #0]
 801fada:	6838      	ldr	r0, [r7, #0]
 801fadc:	f247 31ac 	movw	r1, #29612	@ 0x73ac
 801fae0:	f040 0001 	orr.w	r0, r0, #1
 801fae4:	6038      	str	r0, [r7, #0]
 801fae6:	f06f 00c8 	mvn.w	r0, #200	@ 0xc8
 801faea:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801faee:	bf00      	nop
 801faf0:	3001      	adds	r0, #1
 801faf2:	d22f      	bcs.n	801fb54 <llhwc_cmn_crypto+0x480>
 801faf4:	f8d5 2440 	ldr.w	r2, [r5, #1088]	@ 0x440
 801faf8:	f3c2 0280 	ubfx	r2, r2, #2, #1
 801fafc:	2a00      	cmp	r2, #0
 801fafe:	600a      	str	r2, [r1, #0]
 801fb00:	d0f6      	beq.n	801faf0 <llhwc_cmn_crypto+0x41c>
 801fb02:	f857 0c24 	ldr.w	r0, [r7, #-36]
 801fb06:	f018 0ffd 	tst.w	r8, #253	@ 0xfd
 801fb0a:	f040 0004 	orr.w	r0, r0, #4
 801fb0e:	f847 0c24 	str.w	r0, [r7, #-36]
 801fb12:	f857 0c24 	ldr.w	r0, [r7, #-36]
 801fb16:	f020 0004 	bic.w	r0, r0, #4
 801fb1a:	f847 0c24 	str.w	r0, [r7, #-36]
 801fb1e:	6838      	ldr	r0, [r7, #0]
 801fb20:	f020 0001 	bic.w	r0, r0, #1
 801fb24:	6038      	str	r0, [r7, #0]
 801fb26:	6838      	ldr	r0, [r7, #0]
 801fb28:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 801fb2c:	6038      	str	r0, [r7, #0]
 801fb2e:	d10f      	bne.n	801fb50 <llhwc_cmn_crypto+0x47c>
 801fb30:	6830      	ldr	r0, [r6, #0]
 801fb32:	0140      	lsls	r0, r0, #5
 801fb34:	d403      	bmi.n	801fb3e <llhwc_cmn_crypto+0x46a>
 801fb36:	2000      	movs	r0, #0
 801fb38:	2101      	movs	r1, #1
 801fb3a:	f7fb fef0 	bl	801b91e <bsp_assert>
 801fb3e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801fb40:	1d31      	adds	r1, r6, #4
 801fb42:	fab0 f080 	clz	r0, r0
 801fb46:	0943      	lsrs	r3, r0, #5
 801fb48:	9808      	ldr	r0, [sp, #32]
 801fb4a:	2210      	movs	r2, #16
 801fb4c:	f7ff fdb2 	bl	801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>
 801fb50:	2500      	movs	r5, #0
 801fb52:	e005      	b.n	801fb60 <llhwc_cmn_crypto+0x48c>
 801fb54:	2000      	movs	r0, #0
 801fb56:	2101      	movs	r1, #1
 801fb58:	f7fb fee1 	bl	801b91e <bsp_assert>
 801fb5c:	f04f 35ff 	mov.w	r5, #4294967295
 801fb60:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801fb62:	4620      	mov	r0, r4
 801fb64:	f7fe fea0 	bl	801e8a8 <llhwc_pwr_switch>
 801fb68:	69b8      	ldr	r0, [r7, #24]
 801fb6a:	2101      	movs	r1, #1
 801fb6c:	f020 0007 	bic.w	r0, r0, #7
 801fb70:	4448      	add	r0, r9
 801fb72:	61b8      	str	r0, [r7, #24]
 801fb74:	2000      	movs	r0, #0
 801fb76:	f000 f885 	bl	801fc84 <llhwc_cmn_control_aclk>
 801fb7a:	f018 0ffd 	tst.w	r8, #253	@ 0xfd
 801fb7e:	d012      	beq.n	801fba6 <llhwc_cmn_crypto+0x4d2>
 801fb80:	b146      	cbz	r6, 801fb94 <llhwc_cmn_crypto+0x4c0>
 801fb82:	2e01      	cmp	r6, #1
 801fb84:	d10f      	bne.n	801fba6 <llhwc_cmn_crypto+0x4d2>
 801fb86:	f247 3030 	movw	r0, #29488	@ 0x7330
 801fb8a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fb8e:	f000 f8ab 	bl	801fce8 <llhwc_cmn_free_desc>
 801fb92:	e008      	b.n	801fba6 <llhwc_cmn_crypto+0x4d2>
 801fb94:	f247 34a0 	movw	r4, #29600	@ 0x73a0
 801fb98:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801fb9c:	4620      	mov	r0, r4
 801fb9e:	f000 f8a3 	bl	801fce8 <llhwc_cmn_free_desc>
 801fba2:	2000      	movs	r0, #0
 801fba4:	6020      	str	r0, [r4, #0]
 801fba6:	2003      	movs	r0, #3
 801fba8:	f7fb ff15 	bl	801b9d6 <enable_specific_irq>
 801fbac:	4628      	mov	r0, r5
 801fbae:	b009      	add	sp, #36	@ 0x24
 801fbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbb4 <llhwc_cmn_alloc_desc>:
 801fbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbb8:	460c      	mov	r4, r1
 801fbba:	2101      	movs	r1, #1
 801fbbc:	4605      	mov	r5, r0
 801fbbe:	2800      	cmp	r0, #0
 801fbc0:	bf18      	it	ne
 801fbc2:	2001      	movne	r0, #1
 801fbc4:	2601      	movs	r6, #1
 801fbc6:	f7fb feaa 	bl	801b91e <bsp_assert>
 801fbca:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 801fbce:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801fbd2:	f8d8 0000 	ldr.w	r0, [r8]
 801fbd6:	f04f 31ff 	mov.w	r1, #4294967295
 801fbda:	f7fb ff04 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801fbde:	f247 3ad8 	movw	sl, #29656	@ 0x73d8
 801fbe2:	2002      	movs	r0, #2
 801fbe4:	2300      	movs	r3, #0
 801fbe6:	2100      	movs	r1, #0
 801fbe8:	f2c2 0a00 	movt	sl, #8192	@ 0x2000
 801fbec:	2201      	movs	r2, #1
 801fbee:	bf00      	nop
 801fbf0:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
 801fbf4:	793f      	ldrb	r7, [r7, #4]
 801fbf6:	b94f      	cbnz	r7, 801fc0c <llhwc_cmn_alloc_desc+0x58>
 801fbf8:	2a01      	cmp	r2, #1
 801fbfa:	d107      	bne.n	801fc0c <llhwc_cmn_alloc_desc+0x58>
 801fbfc:	2c01      	cmp	r4, #1
 801fbfe:	f101 0101 	add.w	r1, r1, #1
 801fc02:	d011      	beq.n	801fc28 <llhwc_cmn_alloc_desc+0x74>
 801fc04:	2200      	movs	r2, #0
 801fc06:	4618      	mov	r0, r3
 801fc08:	e008      	b.n	801fc1c <llhwc_cmn_alloc_desc+0x68>
 801fc0a:	bf00      	nop
 801fc0c:	b117      	cbz	r7, 801fc14 <llhwc_cmn_alloc_desc+0x60>
 801fc0e:	2100      	movs	r1, #0
 801fc10:	2201      	movs	r2, #1
 801fc12:	e003      	b.n	801fc1c <llhwc_cmn_alloc_desc+0x68>
 801fc14:	3101      	adds	r1, #1
 801fc16:	b2cb      	uxtb	r3, r1
 801fc18:	42a3      	cmp	r3, r4
 801fc1a:	d007      	beq.n	801fc2c <llhwc_cmn_alloc_desc+0x78>
 801fc1c:	2301      	movs	r3, #1
 801fc1e:	07f7      	lsls	r7, r6, #31
 801fc20:	f04f 0600 	mov.w	r6, #0
 801fc24:	d1e4      	bne.n	801fbf0 <llhwc_cmn_alloc_desc+0x3c>
 801fc26:	e002      	b.n	801fc2e <llhwc_cmn_alloc_desc+0x7a>
 801fc28:	4618      	mov	r0, r3
 801fc2a:	e000      	b.n	801fc2e <llhwc_cmn_alloc_desc+0x7a>
 801fc2c:	4621      	mov	r1, r4
 801fc2e:	b2c9      	uxtb	r1, r1
 801fc30:	42a1      	cmp	r1, r4
 801fc32:	bf18      	it	ne
 801fc34:	2002      	movne	r0, #2
 801fc36:	fa5f f980 	uxtb.w	r9, r0
 801fc3a:	2000      	movs	r0, #0
 801fc3c:	2101      	movs	r1, #1
 801fc3e:	f1b9 0f02 	cmp.w	r9, #2
 801fc42:	bf38      	it	cc
 801fc44:	2001      	movcc	r0, #1
 801fc46:	2601      	movs	r6, #1
 801fc48:	f7fb fe69 	bl	801b91e <bsp_assert>
 801fc4c:	eb0a 00c9 	add.w	r0, sl, r9, lsl #3
 801fc50:	7144      	strb	r4, [r0, #5]
 801fc52:	b144      	cbz	r4, 801fc66 <llhwc_cmn_alloc_desc+0xb2>
 801fc54:	3004      	adds	r0, #4
 801fc56:	bf00      	nop
 801fc58:	7006      	strb	r6, [r0, #0]
 801fc5a:	f840 5c04 	str.w	r5, [r0, #-4]
 801fc5e:	3c01      	subs	r4, #1
 801fc60:	f100 0008 	add.w	r0, r0, #8
 801fc64:	d1f8      	bne.n	801fc58 <llhwc_cmn_alloc_desc+0xa4>
 801fc66:	eb09 0049 	add.w	r0, r9, r9, lsl #1
 801fc6a:	f248 2148 	movw	r1, #33352	@ 0x8248
 801fc6e:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801fc72:	eb01 1400 	add.w	r4, r1, r0, lsl #4
 801fc76:	f8d8 0000 	ldr.w	r0, [r8]
 801fc7a:	f7fb feba 	bl	801b9f2 <os_rcrsv_mutex_release>
 801fc7e:	4620      	mov	r0, r4
 801fc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801fc84 <llhwc_cmn_control_aclk>:
 801fc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc86:	b081      	sub	sp, #4
 801fc88:	f247 33d6 	movw	r3, #29654	@ 0x73d6
 801fc8c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 801fc90:	781a      	ldrb	r2, [r3, #0]
 801fc92:	2501      	movs	r5, #1
 801fc94:	408d      	lsls	r5, r1
 801fc96:	43aa      	bics	r2, r5
 801fc98:	f000 0501 	and.w	r5, r0, #1
 801fc9c:	fa05 f101 	lsl.w	r1, r5, r1
 801fca0:	f247 3730 	movw	r7, #29488	@ 0x7330
 801fca4:	ea42 0501 	orr.w	r5, r2, r1
 801fca8:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801fcac:	b2ec      	uxtb	r4, r5
 801fcae:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 801fcb2:	2c00      	cmp	r4, #0
 801fcb4:	4621      	mov	r1, r4
 801fcb6:	bf18      	it	ne
 801fcb8:	2101      	movne	r1, #1
 801fcba:	ea52 0604 	orrs.w	r6, r2, r4
 801fcbe:	701d      	strb	r5, [r3, #0]
 801fcc0:	d010      	beq.n	801fce4 <llhwc_cmn_control_aclk+0x60>
 801fcc2:	3a01      	subs	r2, #1
 801fcc4:	fab2 f282 	clz	r2, r2
 801fcc8:	0952      	lsrs	r2, r2, #5
 801fcca:	4011      	ands	r1, r2
 801fccc:	d10a      	bne.n	801fce4 <llhwc_cmn_control_aclk+0x60>
 801fcce:	3801      	subs	r0, #1
 801fcd0:	fab0 f080 	clz	r0, r0
 801fcd4:	0940      	lsrs	r0, r0, #5
 801fcd6:	2c00      	cmp	r4, #0
 801fcd8:	bf18      	it	ne
 801fcda:	2401      	movne	r4, #1
 801fcdc:	f7fb fe39 	bl	801b952 <bsp_control_aclk>
 801fce0:	f887 404c 	strb.w	r4, [r7, #76]	@ 0x4c
 801fce4:	b001      	add	sp, #4
 801fce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fce8 <llhwc_cmn_free_desc>:
 801fce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fcec:	b081      	sub	sp, #4
 801fcee:	2101      	movs	r1, #1
 801fcf0:	4681      	mov	r9, r0
 801fcf2:	2800      	cmp	r0, #0
 801fcf4:	bf18      	it	ne
 801fcf6:	2001      	movne	r0, #1
 801fcf8:	2401      	movs	r4, #1
 801fcfa:	f7fb fe10 	bl	801b91e <bsp_assert>
 801fcfe:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 801fd02:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801fd06:	f8d8 0000 	ldr.w	r0, [r8]
 801fd0a:	f04f 31ff 	mov.w	r1, #4294967295
 801fd0e:	f7fb fe6a 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801fd12:	f247 36d8 	movw	r6, #29656	@ 0x73d8
 801fd16:	2700      	movs	r7, #0
 801fd18:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801fd1c:	2500      	movs	r5, #0
 801fd1e:	bf00      	nop
 801fd20:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
 801fd24:	4548      	cmp	r0, r9
 801fd26:	d006      	beq.n	801fd36 <llhwc_cmn_free_desc+0x4e>
 801fd28:	2701      	movs	r7, #1
 801fd2a:	07e1      	lsls	r1, r4, #31
 801fd2c:	f04f 0400 	mov.w	r4, #0
 801fd30:	d1f6      	bne.n	801fd20 <llhwc_cmn_free_desc+0x38>
 801fd32:	2702      	movs	r7, #2
 801fd34:	e002      	b.n	801fd3c <llhwc_cmn_free_desc+0x54>
 801fd36:	eb06 01c7 	add.w	r1, r6, r7, lsl #3
 801fd3a:	794d      	ldrb	r5, [r1, #5]
 801fd3c:	eba0 0009 	sub.w	r0, r0, r9
 801fd40:	fab0 f080 	clz	r0, r0
 801fd44:	0940      	lsrs	r0, r0, #5
 801fd46:	2101      	movs	r1, #1
 801fd48:	f7fb fde9 	bl	801b91e <bsp_assert>
 801fd4c:	4628      	mov	r0, r5
 801fd4e:	2101      	movs	r1, #1
 801fd50:	2d00      	cmp	r5, #0
 801fd52:	bf18      	it	ne
 801fd54:	2001      	movne	r0, #1
 801fd56:	f7fb fde2 	bl	801b91e <bsp_assert>
 801fd5a:	b165      	cbz	r5, 801fd76 <llhwc_cmn_free_desc+0x8e>
 801fd5c:	b2fa      	uxtb	r2, r7
 801fd5e:	18a8      	adds	r0, r5, r2
 801fd60:	2100      	movs	r1, #0
 801fd62:	bf00      	nop
 801fd64:	3701      	adds	r7, #1
 801fd66:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801fd6a:	f846 1032 	str.w	r1, [r6, r2, lsl #3]
 801fd6e:	b2fa      	uxtb	r2, r7
 801fd70:	4290      	cmp	r0, r2
 801fd72:	8099      	strh	r1, [r3, #4]
 801fd74:	d8f6      	bhi.n	801fd64 <llhwc_cmn_free_desc+0x7c>
 801fd76:	f8d8 0000 	ldr.w	r0, [r8]
 801fd7a:	b001      	add	sp, #4
 801fd7c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fd80:	f7fb be37 	b.w	801b9f2 <os_rcrsv_mutex_release>

0801fd84 <llhwc_cmn_crypto_blk_mod>:
 801fd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd88:	b085      	sub	sp, #20
 801fd8a:	468b      	mov	fp, r1
 801fd8c:	2100      	movs	r1, #0
 801fd8e:	f240 0808 	movw	r8, #8
 801fd92:	9104      	str	r1, [sp, #16]
 801fd94:	e9cd 1102 	strd	r1, r1, [sp, #8]
 801fd98:	f6c4 0802 	movt	r8, #18434	@ 0x4802
 801fd9c:	9101      	str	r1, [sp, #4]
 801fd9e:	f8d8 1000 	ldr.w	r1, [r8]
 801fda2:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 801fda6:	f5b1 7f3c 	cmp.w	r1, #752	@ 0x2f0
 801fdaa:	d16a      	bne.n	801fe82 <llhwc_cmn_crypto_blk_mod+0xfe>
 801fdac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fdae:	4604      	mov	r4, r0
 801fdb0:	fab1 f181 	clz	r1, r1
 801fdb4:	ea4f 1902 	mov.w	r9, r2, lsl #4
 801fdb8:	f248 2024 	movw	r0, #33316	@ 0x8224
 801fdbc:	ea4f 1a51 	mov.w	sl, r1, lsr #5
 801fdc0:	461d      	mov	r5, r3
 801fdc2:	4617      	mov	r7, r2
 801fdc4:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801fdc8:	f240 4668 	movw	r6, #1128	@ 0x468
 801fdcc:	4621      	mov	r1, r4
 801fdce:	464a      	mov	r2, r9
 801fdd0:	4653      	mov	r3, sl
 801fdd2:	f6c4 0602 	movt	r6, #18434	@ 0x4802
 801fdd6:	f7ff fc6d 	bl	801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>
 801fdda:	2001      	movs	r0, #1
 801fddc:	2101      	movs	r1, #1
 801fdde:	f7ff ff51 	bl	801fc84 <llhwc_cmn_control_aclk>
 801fde2:	6830      	ldr	r0, [r6, #0]
 801fde4:	2102      	movs	r1, #2
 801fde6:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 801fdea:	6030      	str	r0, [r6, #0]
 801fdec:	6830      	ldr	r0, [r6, #0]
 801fdee:	2210      	movs	r2, #16
 801fdf0:	f361 0042 	bfi	r0, r1, #1, #2
 801fdf4:	6030      	str	r0, [r6, #0]
 801fdf6:	6830      	ldr	r0, [r6, #0]
 801fdf8:	f248 2124 	movw	r1, #33316	@ 0x8224
 801fdfc:	f361 10d6 	bfi	r0, r1, #7, #16
 801fe00:	6030      	str	r0, [r6, #0]
 801fe02:	6830      	ldr	r0, [r6, #0]
 801fe04:	4659      	mov	r1, fp
 801fe06:	f367 50db 	bfi	r0, r7, #23, #5
 801fe0a:	6030      	str	r0, [r6, #0]
 801fe0c:	1e68      	subs	r0, r5, #1
 801fe0e:	fab0 f080 	clz	r0, r0
 801fe12:	0943      	lsrs	r3, r0, #5
 801fe14:	a801      	add	r0, sp, #4
 801fe16:	f7ff fc4d 	bl	801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>
 801fe1a:	9801      	ldr	r0, [sp, #4]
 801fe1c:	6270      	str	r0, [r6, #36]	@ 0x24
 801fe1e:	9802      	ldr	r0, [sp, #8]
 801fe20:	62b0      	str	r0, [r6, #40]	@ 0x28
 801fe22:	9803      	ldr	r0, [sp, #12]
 801fe24:	62f0      	str	r0, [r6, #44]	@ 0x2c
 801fe26:	9804      	ldr	r0, [sp, #16]
 801fe28:	6330      	str	r0, [r6, #48]	@ 0x30
 801fe2a:	6830      	ldr	r0, [r6, #0]
 801fe2c:	f040 0001 	orr.w	r0, r0, #1
 801fe30:	6030      	str	r0, [r6, #0]
 801fe32:	bf00      	nop
 801fe34:	f8d8 0438 	ldr.w	r0, [r8, #1080]	@ 0x438
 801fe38:	0740      	lsls	r0, r0, #29
 801fe3a:	d5fb      	bpl.n	801fe34 <llhwc_cmn_crypto_blk_mod+0xb0>
 801fe3c:	f248 2124 	movw	r1, #33316	@ 0x8224
 801fe40:	4620      	mov	r0, r4
 801fe42:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 801fe46:	464a      	mov	r2, r9
 801fe48:	4653      	mov	r3, sl
 801fe4a:	f7ff fc33 	bl	801f6b4 <llhwc_cmn_crypto_set_n_byte_to_mem>
 801fe4e:	f856 0c24 	ldr.w	r0, [r6, #-36]
 801fe52:	2101      	movs	r1, #1
 801fe54:	f040 0004 	orr.w	r0, r0, #4
 801fe58:	f846 0c24 	str.w	r0, [r6, #-36]
 801fe5c:	f856 0c24 	ldr.w	r0, [r6, #-36]
 801fe60:	2400      	movs	r4, #0
 801fe62:	f020 0004 	bic.w	r0, r0, #4
 801fe66:	f846 0c24 	str.w	r0, [r6, #-36]
 801fe6a:	6830      	ldr	r0, [r6, #0]
 801fe6c:	f020 0001 	bic.w	r0, r0, #1
 801fe70:	6030      	str	r0, [r6, #0]
 801fe72:	6830      	ldr	r0, [r6, #0]
 801fe74:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 801fe78:	6030      	str	r0, [r6, #0]
 801fe7a:	2000      	movs	r0, #0
 801fe7c:	f7ff ff02 	bl	801fc84 <llhwc_cmn_control_aclk>
 801fe80:	e005      	b.n	801fe8e <llhwc_cmn_crypto_blk_mod+0x10a>
 801fe82:	2000      	movs	r0, #0
 801fe84:	2100      	movs	r1, #0
 801fe86:	f7fb fd4a 	bl	801b91e <bsp_assert>
 801fe8a:	f04f 34ff 	mov.w	r4, #4294967295
 801fe8e:	4620      	mov	r0, r4
 801fe90:	b005      	add	sp, #20
 801fe92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe96 <US_TO_SLP_TMR_PROTECTED>:
 801fe96:	b5b0      	push	{r4, r5, r7, lr}
 801fe98:	227d      	movs	r2, #125	@ 0x7d
 801fe9a:	2300      	movs	r3, #0
 801fe9c:	4604      	mov	r4, r0
 801fe9e:	257d      	movs	r5, #125	@ 0x7d
 801fea0:	f7e0 f9cc 	bl	800023c <__aeabi_uldivmod>
 801fea4:	fb00 4115 	mls	r1, r0, r5, r4
 801fea8:	f240 6325 	movw	r3, #1573	@ 0x625
 801feac:	0089      	lsls	r1, r1, #2
 801feae:	b28a      	uxth	r2, r1
 801feb0:	0080      	lsls	r0, r0, #2
 801feb2:	fb02 f203 	mul.w	r2, r2, r3
 801feb6:	eba1 4112 	sub.w	r1, r1, r2, lsr #16
 801feba:	b289      	uxth	r1, r1
 801febc:	0849      	lsrs	r1, r1, #1
 801febe:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801fec2:	eb00 1091 	add.w	r0, r0, r1, lsr #6
 801fec6:	bdb0      	pop	{r4, r5, r7, pc}

0801fec8 <llhwc_cmn_set_controller_activity>:
 801fec8:	b5b0      	push	{r4, r5, r7, lr}
 801feca:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 801fece:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 801fed2:	6829      	ldr	r1, [r5, #0]
 801fed4:	4604      	mov	r4, r0
 801fed6:	4608      	mov	r0, r1
 801fed8:	f04f 31ff 	mov.w	r1, #4294967295
 801fedc:	f7fb fd83 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801fee0:	f247 3129 	movw	r1, #29481	@ 0x7329
 801fee4:	6828      	ldr	r0, [r5, #0]
 801fee6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801feea:	700c      	strb	r4, [r1, #0]
 801feec:	f7fb fd81 	bl	801b9f2 <os_rcrsv_mutex_release>
 801fef0:	f247 3088 	movw	r0, #29576	@ 0x7388
 801fef4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801fef8:	7d00      	ldrb	r0, [r0, #20]
 801fefa:	2801      	cmp	r0, #1
 801fefc:	bf18      	it	ne
 801fefe:	bdb0      	popne	{r4, r5, r7, pc}
 801ff00:	f247 30b0 	movw	r0, #29616	@ 0x73b0
 801ff04:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 801ff08:	6900      	ldr	r0, [r0, #16]
 801ff0a:	b118      	cbz	r0, 801ff14 <llhwc_cmn_set_controller_activity+0x4c>
 801ff0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801ff10:	f000 b801 	b.w	801ff16 <llhwc_cmn_start_stop_runtime_rco_clbr>
 801ff14:	bdb0      	pop	{r4, r5, r7, pc}

0801ff16 <llhwc_cmn_start_stop_runtime_rco_clbr>:
 801ff16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff1a:	2036      	movs	r0, #54	@ 0x36
 801ff1c:	f7fb fd46 	bl	801b9ac <bsp_debug_gpio_set>
 801ff20:	f248 18e8 	movw	r8, #33256	@ 0x81e8
 801ff24:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 801ff28:	f8d8 0000 	ldr.w	r0, [r8]
 801ff2c:	f04f 31ff 	mov.w	r1, #4294967295
 801ff30:	f7fb fd59 	bl	801b9e6 <os_rcrsv_mutex_wait>
 801ff34:	f247 3729 	movw	r7, #29481	@ 0x7329
 801ff38:	f247 3428 	movw	r4, #29480	@ 0x7328
 801ff3c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 801ff40:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 801ff44:	7838      	ldrb	r0, [r7, #0]
 801ff46:	7822      	ldrb	r2, [r4, #0]
 801ff48:	1e43      	subs	r3, r0, #1
 801ff4a:	4611      	mov	r1, r2
 801ff4c:	fab3 f383 	clz	r3, r3
 801ff50:	f247 36b0 	movw	r6, #29616	@ 0x73b0
 801ff54:	2a00      	cmp	r2, #0
 801ff56:	bf18      	it	ne
 801ff58:	2101      	movne	r1, #1
 801ff5a:	095b      	lsrs	r3, r3, #5
 801ff5c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 801ff60:	430b      	orrs	r3, r1
 801ff62:	7e71      	ldrb	r1, [r6, #25]
 801ff64:	2b01      	cmp	r3, #1
 801ff66:	bf08      	it	eq
 801ff68:	2900      	cmpeq	r1, #0
 801ff6a:	d02e      	beq.n	801ffca <llhwc_cmn_start_stop_runtime_rco_clbr+0xb4>
 801ff6c:	2801      	cmp	r0, #1
 801ff6e:	d053      	beq.n	8020018 <llhwc_cmn_start_stop_runtime_rco_clbr+0x102>
 801ff70:	2a00      	cmp	r2, #0
 801ff72:	d151      	bne.n	8020018 <llhwc_cmn_start_stop_runtime_rco_clbr+0x102>
 801ff74:	2901      	cmp	r1, #1
 801ff76:	d14f      	bne.n	8020018 <llhwc_cmn_start_stop_runtime_rco_clbr+0x102>
 801ff78:	2035      	movs	r0, #53	@ 0x35
 801ff7a:	f7fb fd1b 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801ff7e:	f247 312c 	movw	r1, #29484	@ 0x732c
 801ff82:	2000      	movs	r0, #0
 801ff84:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ff88:	7670      	strb	r0, [r6, #25]
 801ff8a:	6008      	str	r0, [r1, #0]
 801ff8c:	2001      	movs	r0, #1
 801ff8e:	f7fb fcfa 	bl	801b986 <bsp_rco_clbr_not>
 801ff92:	2014      	movs	r0, #20
 801ff94:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 801ff98:	f8d0 1470 	ldr.w	r1, [r0, #1136]	@ 0x470
 801ff9c:	f247 321c 	movw	r2, #29468	@ 0x731c
 801ffa0:	f021 0101 	bic.w	r1, r1, #1
 801ffa4:	f8c0 1470 	str.w	r1, [r0, #1136]	@ 0x470
 801ffa8:	6801      	ldr	r1, [r0, #0]
 801ffaa:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 801ffae:	3101      	adds	r1, #1
 801ffb0:	6011      	str	r1, [r2, #0]
 801ffb2:	6901      	ldr	r1, [r0, #16]
 801ffb4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 801ffb8:	6101      	str	r1, [r0, #16]
 801ffba:	6800      	ldr	r0, [r0, #0]
 801ffbc:	f247 3120 	movw	r1, #29472	@ 0x7320
 801ffc0:	3001      	adds	r0, #1
 801ffc2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 801ffc6:	6008      	str	r0, [r1, #0]
 801ffc8:	e065      	b.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 801ffca:	2033      	movs	r0, #51	@ 0x33
 801ffcc:	f7fb fcf2 	bl	801b9b4 <bsp_debug_gpio_toggle>
 801ffd0:	68f0      	ldr	r0, [r6, #12]
 801ffd2:	b950      	cbnz	r0, 801ffea <llhwc_cmn_start_stop_runtime_rco_clbr+0xd4>
 801ffd4:	f240 3087 	movw	r0, #903	@ 0x387
 801ffd8:	f6c0 0002 	movt	r0, #2050	@ 0x802
 801ffdc:	2101      	movs	r1, #1
 801ffde:	2200      	movs	r2, #0
 801ffe0:	f7fd ff32 	bl	801de48 <os_timer_create>
 801ffe4:	2800      	cmp	r0, #0
 801ffe6:	60f0      	str	r0, [r6, #12]
 801ffe8:	d055      	beq.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 801ffea:	f7fe f90a 	bl	801e202 <os_get_tmr_state>
 801ffee:	2800      	cmp	r0, #0
 801fff0:	d051      	beq.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 801fff2:	7a30      	ldrb	r0, [r6, #8]
 801fff4:	2102      	movs	r1, #2
 801fff6:	7631      	strb	r1, [r6, #24]
 801fff8:	f000 f940 	bl	802027c <llhwc_cmn_hw_rco_clbr>
 801fffc:	e9d6 0103 	ldrd	r0, r1, [r6, #12]
 8020000:	0149      	lsls	r1, r1, #5
 8020002:	f7fd ff9a 	bl	801df3a <os_timer_start>
 8020006:	fab0 f080 	clz	r0, r0
 802000a:	0940      	lsrs	r0, r0, #5
 802000c:	2101      	movs	r1, #1
 802000e:	2501      	movs	r5, #1
 8020010:	f7fb fc85 	bl	801b91e <bsp_assert>
 8020014:	7675      	strb	r5, [r6, #25]
 8020016:	e03e      	b.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 8020018:	2801      	cmp	r0, #1
 802001a:	d03c      	beq.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 802001c:	2901      	cmp	r1, #1
 802001e:	d13a      	bne.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 8020020:	2033      	movs	r0, #51	@ 0x33
 8020022:	f7fb fcc7 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8020026:	f7fe f8ad 	bl	801e184 <os_timer_get_active_sw_timers_number>
 802002a:	2801      	cmp	r0, #1
 802002c:	d133      	bne.n	8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 802002e:	68f0      	ldr	r0, [r6, #12]
 8020030:	f7fe f8e7 	bl	801e202 <os_get_tmr_state>
 8020034:	bb78      	cbnz	r0, 8020096 <llhwc_cmn_start_stop_runtime_rco_clbr+0x180>
 8020036:	68f0      	ldr	r0, [r6, #12]
 8020038:	f7fe f83c 	bl	801e0b4 <os_timer_stop>
 802003c:	fab0 f080 	clz	r0, r0
 8020040:	0940      	lsrs	r0, r0, #5
 8020042:	2101      	movs	r1, #1
 8020044:	f7fb fc6b 	bl	801b91e <bsp_assert>
 8020048:	f247 302c 	movw	r0, #29484	@ 0x732c
 802004c:	2500      	movs	r5, #0
 802004e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020052:	7675      	strb	r5, [r6, #25]
 8020054:	6005      	str	r5, [r0, #0]
 8020056:	2001      	movs	r0, #1
 8020058:	f7fb fc95 	bl	801b986 <bsp_rco_clbr_not>
 802005c:	2014      	movs	r0, #20
 802005e:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8020062:	f8d0 1470 	ldr.w	r1, [r0, #1136]	@ 0x470
 8020066:	f247 321c 	movw	r2, #29468	@ 0x731c
 802006a:	f021 0101 	bic.w	r1, r1, #1
 802006e:	f8c0 1470 	str.w	r1, [r0, #1136]	@ 0x470
 8020072:	6801      	ldr	r1, [r0, #0]
 8020074:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8020078:	3101      	adds	r1, #1
 802007a:	6011      	str	r1, [r2, #0]
 802007c:	6901      	ldr	r1, [r0, #16]
 802007e:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8020082:	6101      	str	r1, [r0, #16]
 8020084:	6800      	ldr	r0, [r0, #0]
 8020086:	f247 3120 	movw	r1, #29472	@ 0x7320
 802008a:	3001      	adds	r0, #1
 802008c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020090:	6008      	str	r0, [r1, #0]
 8020092:	703d      	strb	r5, [r7, #0]
 8020094:	7025      	strb	r5, [r4, #0]
 8020096:	7838      	ldrb	r0, [r7, #0]
 8020098:	2802      	cmp	r0, #2
 802009a:	d11a      	bne.n	80200d2 <llhwc_cmn_start_stop_runtime_rco_clbr+0x1bc>
 802009c:	7820      	ldrb	r0, [r4, #0]
 802009e:	b9c0      	cbnz	r0, 80200d2 <llhwc_cmn_start_stop_runtime_rco_clbr+0x1bc>
 80200a0:	7e70      	ldrb	r0, [r6, #25]
 80200a2:	2801      	cmp	r0, #1
 80200a4:	d115      	bne.n	80200d2 <llhwc_cmn_start_stop_runtime_rco_clbr+0x1bc>
 80200a6:	f247 3488 	movw	r4, #29576	@ 0x7388
 80200aa:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80200ae:	4620      	mov	r0, r4
 80200b0:	2100      	movs	r1, #0
 80200b2:	2218      	movs	r2, #24
 80200b4:	f000 fc16 	bl	80208e4 <ble_memset>
 80200b8:	f642 20fb 	movw	r0, #11003	@ 0x2afb
 80200bc:	f2c0 0005 	movt	r0, #5
 80200c0:	6020      	str	r0, [r4, #0]
 80200c2:	2002      	movs	r0, #2
 80200c4:	7520      	strb	r0, [r4, #20]
 80200c6:	f7fe fb2f 	bl	801e728 <llhwc_cmn_reset_rco_clbr>
 80200ca:	2000      	movs	r0, #0
 80200cc:	2100      	movs	r1, #0
 80200ce:	f7fe fd9d 	bl	801ec0c <llhwc_cmn_initial_rco_clbr>
 80200d2:	f8d8 0000 	ldr.w	r0, [r8]
 80200d6:	f7fb fc8c 	bl	801b9f2 <os_rcrsv_mutex_release>
 80200da:	2036      	movs	r0, #54	@ 0x36
 80200dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80200e0:	f7fb bc66 	b.w	801b9b0 <bsp_debug_gpio_clear>

080200e4 <llhwc_cmn_le_select_slp_clk_src>:
 80200e4:	b570      	push	{r4, r5, r6, lr}
 80200e6:	f247 3588 	movw	r5, #29576	@ 0x7388
 80200ea:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80200ee:	460e      	mov	r6, r1
 80200f0:	4604      	mov	r4, r0
 80200f2:	4628      	mov	r0, r5
 80200f4:	2100      	movs	r1, #0
 80200f6:	2218      	movs	r2, #24
 80200f8:	f000 fbf4 	bl	80208e4 <ble_memset>
 80200fc:	f642 20fb 	movw	r0, #11003	@ 0x2afb
 8020100:	f2c0 0005 	movt	r0, #5
 8020104:	6028      	str	r0, [r5, #0]
 8020106:	2002      	movs	r0, #2
 8020108:	7528      	strb	r0, [r5, #20]
 802010a:	f7fe fb0d 	bl	801e728 <llhwc_cmn_reset_rco_clbr>
 802010e:	2c02      	cmp	r4, #2
 8020110:	d005      	beq.n	802011e <llhwc_cmn_le_select_slp_clk_src+0x3a>
 8020112:	2c01      	cmp	r4, #1
 8020114:	d007      	beq.n	8020126 <llhwc_cmn_le_select_slp_clk_src+0x42>
 8020116:	b96c      	cbnz	r4, 8020134 <llhwc_cmn_le_select_slp_clk_src+0x50>
 8020118:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 802011c:	e001      	b.n	8020122 <llhwc_cmn_le_select_slp_clk_src+0x3e>
 802011e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8020122:	8030      	strh	r0, [r6, #0]
 8020124:	e003      	b.n	802012e <llhwc_cmn_le_select_slp_clk_src+0x4a>
 8020126:	2001      	movs	r0, #1
 8020128:	4631      	mov	r1, r6
 802012a:	f7fe fd6f 	bl	801ec0c <llhwc_cmn_initial_rco_clbr>
 802012e:	2000      	movs	r0, #0
 8020130:	752c      	strb	r4, [r5, #20]
 8020132:	bd70      	pop	{r4, r5, r6, pc}
 8020134:	2012      	movs	r0, #18
 8020136:	bd70      	pop	{r4, r5, r6, pc}

08020138 <llhwc_cmn_hw_rco_clbr_enable>:
 8020138:	b510      	push	{r4, lr}
 802013a:	2800      	cmp	r0, #0
 802013c:	f240 4484 	movw	r4, #1156	@ 0x484
 8020140:	f247 302c 	movw	r0, #29484	@ 0x732c
 8020144:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8020148:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802014c:	d015      	beq.n	802017a <llhwc_cmn_hw_rco_clbr_enable+0x42>
 802014e:	2101      	movs	r1, #1
 8020150:	6001      	str	r1, [r0, #0]
 8020152:	2000      	movs	r0, #0
 8020154:	f7fb fc17 	bl	801b986 <bsp_rco_clbr_not>
 8020158:	2001      	movs	r0, #1
 802015a:	2105      	movs	r1, #5
 802015c:	f7ff fd92 	bl	801fc84 <llhwc_cmn_control_aclk>
 8020160:	f247 301c 	movw	r0, #29468	@ 0x731c
 8020164:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020168:	6800      	ldr	r0, [r0, #0]
 802016a:	2102      	movs	r1, #2
 802016c:	f7ff f842 	bl	801f1f4 <llhwc_slptmr_polling>
 8020170:	6820      	ldr	r0, [r4, #0]
 8020172:	f040 0001 	orr.w	r0, r0, #1
 8020176:	6020      	str	r0, [r4, #0]
 8020178:	bd10      	pop	{r4, pc}
 802017a:	2100      	movs	r1, #0
 802017c:	6001      	str	r1, [r0, #0]
 802017e:	2001      	movs	r0, #1
 8020180:	f7fb fc01 	bl	801b986 <bsp_rco_clbr_not>
 8020184:	6820      	ldr	r0, [r4, #0]
 8020186:	f247 311c 	movw	r1, #29468	@ 0x731c
 802018a:	f020 0001 	bic.w	r0, r0, #1
 802018e:	6020      	str	r0, [r4, #0]
 8020190:	f64f 3090 	movw	r0, #64400	@ 0xfb90
 8020194:	f6cf 70ff 	movt	r0, #65535	@ 0xffff
 8020198:	5820      	ldr	r0, [r4, r0]
 802019a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802019e:	3001      	adds	r0, #1
 80201a0:	6008      	str	r0, [r1, #0]
 80201a2:	bd10      	pop	{r4, pc}

080201a4 <llhwc_cmn_hw_rco_compnstn_enable>:
 80201a4:	2114      	movs	r1, #20
 80201a6:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80201aa:	690a      	ldr	r2, [r1, #16]
 80201ac:	2801      	cmp	r0, #1
 80201ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80201b2:	610a      	str	r2, [r1, #16]
 80201b4:	680a      	ldr	r2, [r1, #0]
 80201b6:	f102 0301 	add.w	r3, r2, #1
 80201ba:	f247 3220 	movw	r2, #29472	@ 0x7320
 80201be:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80201c2:	6013      	str	r3, [r2, #0]
 80201c4:	bf18      	it	ne
 80201c6:	4770      	bxne	lr
 80201c8:	f247 3cb0 	movw	ip, #29616	@ 0x73b0
 80201cc:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 80201d0:	e9dc 3000 	ldrd	r3, r0, [ip]
 80201d4:	fbb3 f0f0 	udiv	r0, r3, r0
 80201d8:	60c8      	str	r0, [r1, #12]
 80201da:	f89c 3020 	ldrb.w	r3, [ip, #32]
 80201de:	b133      	cbz	r3, 80201ee <llhwc_cmn_hw_rco_compnstn_enable+0x4a>
 80201e0:	2b01      	cmp	r3, #1
 80201e2:	d109      	bne.n	80201f8 <llhwc_cmn_hw_rco_compnstn_enable+0x54>
 80201e4:	690b      	ldr	r3, [r1, #16]
 80201e6:	2001      	movs	r0, #1
 80201e8:	f360 030f 	bfi	r3, r0, #0, #16
 80201ec:	e009      	b.n	8020202 <llhwc_cmn_hw_rco_compnstn_enable+0x5e>
 80201ee:	6908      	ldr	r0, [r1, #16]
 80201f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80201f4:	4303      	orrs	r3, r0
 80201f6:	e004      	b.n	8020202 <llhwc_cmn_hw_rco_compnstn_enable+0x5e>
 80201f8:	6908      	ldr	r0, [r1, #16]
 80201fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80201fe:	ea20 0303 	bic.w	r3, r0, r3
 8020202:	610b      	str	r3, [r1, #16]
 8020204:	6810      	ldr	r0, [r2, #0]
 8020206:	1c82      	adds	r2, r0, #2
 8020208:	6808      	ldr	r0, [r1, #0]
 802020a:	3001      	adds	r0, #1
 802020c:	4290      	cmp	r0, r2
 802020e:	d9fb      	bls.n	8020208 <llhwc_cmn_hw_rco_compnstn_enable+0x64>
 8020210:	6908      	ldr	r0, [r1, #16]
 8020212:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8020216:	6108      	str	r0, [r1, #16]
 8020218:	6808      	ldr	r0, [r1, #0]
 802021a:	f247 3124 	movw	r1, #29476	@ 0x7324
 802021e:	3001      	adds	r0, #1
 8020220:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020224:	6008      	str	r0, [r1, #0]
 8020226:	2001      	movs	r0, #1
 8020228:	f88c 001a 	strb.w	r0, [ip, #26]
 802022c:	4770      	bx	lr

0802022e <llhwc_cmn_set_os_timer_activity>:
 802022e:	b5b0      	push	{r4, r5, r7, lr}
 8020230:	f248 15e8 	movw	r5, #33256	@ 0x81e8
 8020234:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020238:	6829      	ldr	r1, [r5, #0]
 802023a:	4604      	mov	r4, r0
 802023c:	4608      	mov	r0, r1
 802023e:	f04f 31ff 	mov.w	r1, #4294967295
 8020242:	f7fb fbd0 	bl	801b9e6 <os_rcrsv_mutex_wait>
 8020246:	f247 3128 	movw	r1, #29480	@ 0x7328
 802024a:	6828      	ldr	r0, [r5, #0]
 802024c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020250:	700c      	strb	r4, [r1, #0]
 8020252:	f7fb fbce 	bl	801b9f2 <os_rcrsv_mutex_release>
 8020256:	f247 3088 	movw	r0, #29576	@ 0x7388
 802025a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802025e:	7d00      	ldrb	r0, [r0, #20]
 8020260:	2801      	cmp	r0, #1
 8020262:	bf18      	it	ne
 8020264:	bdb0      	popne	{r4, r5, r7, pc}
 8020266:	f247 30b0 	movw	r0, #29616	@ 0x73b0
 802026a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802026e:	6900      	ldr	r0, [r0, #16]
 8020270:	b118      	cbz	r0, 802027a <llhwc_cmn_set_os_timer_activity+0x4c>
 8020272:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8020276:	f7ff be4e 	b.w	801ff16 <llhwc_cmn_start_stop_runtime_rco_clbr>
 802027a:	bdb0      	pop	{r4, r5, r7, pc}

0802027c <llhwc_cmn_hw_rco_clbr>:
 802027c:	b510      	push	{r4, lr}
 802027e:	4604      	mov	r4, r0
 8020280:	f247 302c 	movw	r0, #29484	@ 0x732c
 8020284:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020288:	2100      	movs	r1, #0
 802028a:	6001      	str	r1, [r0, #0]
 802028c:	2001      	movs	r0, #1
 802028e:	f7fb fb7a 	bl	801b986 <bsp_rco_clbr_not>
 8020292:	f240 4048 	movw	r0, #1096	@ 0x448
 8020296:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 802029a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 802029c:	f240 4244 	movw	r2, #1092	@ 0x444
 80202a0:	f021 0101 	bic.w	r1, r1, #1
 80202a4:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80202a6:	f64f 31d0 	movw	r1, #64464	@ 0xfbd0
 80202aa:	f6cf 71ff 	movt	r1, #65535	@ 0xffff
 80202ae:	f6c4 0202 	movt	r2, #18434	@ 0x4802
 80202b2:	5851      	ldr	r1, [r2, r1]
 80202b4:	f247 331c 	movw	r3, #29468	@ 0x731c
 80202b8:	3101      	adds	r1, #1
 80202ba:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80202be:	6019      	str	r1, [r3, #0]
 80202c0:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80202c2:	f364 0147 	bfi	r1, r4, #1, #7
 80202c6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80202c8:	6801      	ldr	r1, [r0, #0]
 80202ca:	f021 0120 	bic.w	r1, r1, #32
 80202ce:	6001      	str	r1, [r0, #0]
 80202d0:	6810      	ldr	r0, [r2, #0]
 80202d2:	f040 0020 	orr.w	r0, r0, #32
 80202d6:	6010      	str	r0, [r2, #0]
 80202d8:	6810      	ldr	r0, [r2, #0]
 80202da:	f020 0120 	bic.w	r1, r0, #32
 80202de:	2001      	movs	r0, #1
 80202e0:	6011      	str	r1, [r2, #0]
 80202e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80202e6:	f7ff bf27 	b.w	8020138 <llhwc_cmn_hw_rco_clbr_enable>

080202ea <llhwc_cmn_update_rco_timer>:
 80202ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80202ee:	b081      	sub	sp, #4
 80202f0:	f247 38b0 	movw	r8, #29616	@ 0x73b0
 80202f4:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80202f8:	e9d8 1200 	ldrd	r1, r2, [r8]
 80202fc:	f898 7008 	ldrb.w	r7, [r8, #8]
 8020300:	4681      	mov	r9, r0
 8020302:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
 8020306:	f8d8 6010 	ldr.w	r6, [r8, #16]
 802030a:	fb07 f500 	mul.w	r5, r7, r0
 802030e:	fbb1 f4f2 	udiv	r4, r1, r2
 8020312:	fb05 f006 	mul.w	r0, r5, r6
 8020316:	fba4 2309 	umull	r2, r3, r4, r9
 802031a:	2100      	movs	r1, #0
 802031c:	f7df ff8e 	bl	800023c <__aeabi_uldivmod>
 8020320:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8020324:	fb04 f000 	mul.w	r0, r4, r0
 8020328:	f247 3224 	movw	r2, #29476	@ 0x7324
 802032c:	eba0 0091 	sub.w	r0, r0, r1, lsr #2
 8020330:	2114      	movs	r1, #20
 8020332:	fb00 f009 	mul.w	r0, r0, r9
 8020336:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 802033a:	6809      	ldr	r1, [r1, #0]
 802033c:	fbb0 f0f5 	udiv	r0, r0, r5
 8020340:	43c9      	mvns	r1, r1
 8020342:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8020346:	6812      	ldr	r2, [r2, #0]
 8020348:	eb01 1040 	add.w	r0, r1, r0, lsl #5
 802034c:	1884      	adds	r4, r0, r2
 802034e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020352:	ebb4 1f46 	cmp.w	r4, r6, lsl #5
 8020356:	bf28      	it	cs
 8020358:	0174      	lslcs	r4, r6, #5
 802035a:	f7fd feab 	bl	801e0b4 <os_timer_stop>
 802035e:	fab0 f080 	clz	r0, r0
 8020362:	0940      	lsrs	r0, r0, #5
 8020364:	2101      	movs	r1, #1
 8020366:	f7fb fada 	bl	801b91e <bsp_assert>
 802036a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 802036e:	4621      	mov	r1, r4
 8020370:	f7fd fde3 	bl	801df3a <os_timer_start>
 8020374:	fab0 f080 	clz	r0, r0
 8020378:	0940      	lsrs	r0, r0, #5
 802037a:	2101      	movs	r1, #1
 802037c:	b001      	add	sp, #4
 802037e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020382:	f7fb bacc 	b.w	801b91e <bsp_assert>

08020386 <llhwc_cmn_rco_clbr_timer_cbk>:
 8020386:	b580      	push	{r7, lr}
 8020388:	2070      	movs	r0, #112	@ 0x70
 802038a:	f7fb fb0f 	bl	801b9ac <bsp_debug_gpio_set>
 802038e:	f247 31b0 	movw	r1, #29616	@ 0x73b0
 8020392:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020396:	7a08      	ldrb	r0, [r1, #8]
 8020398:	2202      	movs	r2, #2
 802039a:	760a      	strb	r2, [r1, #24]
 802039c:	f7ff ff6e 	bl	802027c <llhwc_cmn_hw_rco_clbr>
 80203a0:	2070      	movs	r0, #112	@ 0x70
 80203a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80203a6:	f7fb bb03 	b.w	801b9b0 <bsp_debug_gpio_clear>

080203aa <llhwc_cmn_evnt_notify>:
 80203aa:	b5b0      	push	{r4, r5, r7, lr}
 80203ac:	4604      	mov	r4, r0
 80203ae:	2000      	movs	r0, #0
 80203b0:	2101      	movs	r1, #1
 80203b2:	2c02      	cmp	r4, #2
 80203b4:	bf38      	it	cc
 80203b6:	2001      	movcc	r0, #1
 80203b8:	f7fb fab1 	bl	801b91e <bsp_assert>
 80203bc:	f247 3530 	movw	r5, #29488	@ 0x7330
 80203c0:	2c01      	cmp	r4, #1
 80203c2:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80203c6:	d102      	bne.n	80203ce <llhwc_cmn_evnt_notify+0x24>
 80203c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80203ca:	b100      	cbz	r0, 80203ce <llhwc_cmn_evnt_notify+0x24>
 80203cc:	4780      	blx	r0
 80203ce:	f895 004f 	ldrb.w	r0, [r5, #79]	@ 0x4f
 80203d2:	42a0      	cmp	r0, r4
 80203d4:	d00e      	beq.n	80203f4 <llhwc_cmn_evnt_notify+0x4a>
 80203d6:	f084 0101 	eor.w	r1, r4, #1
 80203da:	f080 0002 	eor.w	r0, r0, #2
 80203de:	4308      	orrs	r0, r1
 80203e0:	fab0 f080 	clz	r0, r0
 80203e4:	0940      	lsrs	r0, r0, #5
 80203e6:	bf18      	it	ne
 80203e8:	bdb0      	popne	{r4, r5, r7, pc}
 80203ea:	4620      	mov	r0, r4
 80203ec:	f7fb faba 	bl	801b964 <bsp_evnt_not>
 80203f0:	f885 404f 	strb.w	r4, [r5, #79]	@ 0x4f
 80203f4:	bdb0      	pop	{r4, r5, r7, pc}

080203f6 <llhwc_cmn_sys_configure_ll_ctx>:
 80203f6:	b5b0      	push	{r4, r5, r7, lr}
 80203f8:	460c      	mov	r4, r1
 80203fa:	4605      	mov	r5, r0
 80203fc:	f000 fb23 	bl	8020a46 <os_wrapper_is_rtos_used>
 8020400:	2200      	movs	r2, #0
 8020402:	2d01      	cmp	r5, #1
 8020404:	bf88      	it	hi
 8020406:	2201      	movhi	r2, #1
 8020408:	4601      	mov	r1, r0
 802040a:	2c01      	cmp	r4, #1
 802040c:	f04f 0012 	mov.w	r0, #18
 8020410:	d80c      	bhi.n	802042c <llhwc_cmn_sys_configure_ll_ctx+0x36>
 8020412:	fab1 f181 	clz	r1, r1
 8020416:	0949      	lsrs	r1, r1, #5
 8020418:	4011      	ands	r1, r2
 802041a:	bf18      	it	ne
 802041c:	bdb0      	popne	{r4, r5, r7, pc}
 802041e:	f247 30a4 	movw	r0, #29604	@ 0x73a4
 8020422:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020426:	7005      	strb	r5, [r0, #0]
 8020428:	7044      	strb	r4, [r0, #1]
 802042a:	2000      	movs	r0, #0
 802042c:	bdb0      	pop	{r4, r5, r7, pc}

0802042e <llhwc_cmn_pta_set_params>:
 802042e:	b570      	push	{r4, r5, r6, lr}
 8020430:	4606      	mov	r6, r0
 8020432:	2047      	movs	r0, #71	@ 0x47
 8020434:	4614      	mov	r4, r2
 8020436:	460d      	mov	r5, r1
 8020438:	f7fb fab8 	bl	801b9ac <bsp_debug_gpio_set>
 802043c:	f240 4188 	movw	r1, #1160	@ 0x488
 8020440:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8020444:	6808      	ldr	r0, [r1, #0]
 8020446:	42ae      	cmp	r6, r5
 8020448:	f366 1045 	bfi	r0, r6, #5, #1
 802044c:	6008      	str	r0, [r1, #0]
 802044e:	6808      	ldr	r0, [r1, #0]
 8020450:	f020 6000 	bic.w	r0, r0, #134217728	@ 0x8000000
 8020454:	bf18      	it	ne
 8020456:	f100 6000 	addne.w	r0, r0, #134217728	@ 0x8000000
 802045a:	6008      	str	r0, [r1, #0]
 802045c:	680a      	ldr	r2, [r1, #0]
 802045e:	2047      	movs	r0, #71	@ 0x47
 8020460:	f364 0204 	bfi	r2, r4, #0, #5
 8020464:	600a      	str	r2, [r1, #0]
 8020466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802046a:	f7fb baa1 	b.w	801b9b0 <bsp_debug_gpio_clear>

0802046e <llhwc_cmn_pta_get_tx_reject_counter>:
 802046e:	f240 4088 	movw	r0, #1160	@ 0x488
 8020472:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8020476:	6800      	ldr	r0, [r0, #0]
 8020478:	f3c0 2004 	ubfx	r0, r0, #8, #5
 802047c:	4770      	bx	lr

0802047e <llhwc_cmn_pta_get_rx_reject_counter>:
 802047e:	f240 4088 	movw	r0, #1160	@ 0x488
 8020482:	f6c4 0002 	movt	r0, #18434	@ 0x4802
 8020486:	6800      	ldr	r0, [r0, #0]
 8020488:	f3c0 3044 	ubfx	r0, r0, #13, #5
 802048c:	4770      	bx	lr

0802048e <llhwc_cmn_pta_set_enable>:
 802048e:	b510      	push	{r4, lr}
 8020490:	4604      	mov	r4, r0
 8020492:	2046      	movs	r0, #70	@ 0x46
 8020494:	f7fb fa8a 	bl	801b9ac <bsp_debug_gpio_set>
 8020498:	f240 4188 	movw	r1, #1160	@ 0x488
 802049c:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80204a0:	680a      	ldr	r2, [r1, #0]
 80204a2:	2046      	movs	r0, #70	@ 0x46
 80204a4:	f364 12c7 	bfi	r2, r4, #7, #1
 80204a8:	600a      	str	r2, [r1, #0]
 80204aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204ae:	f7fb ba7f 	b.w	801b9b0 <bsp_debug_gpio_clear>

080204b2 <llhwc_cmn_set_temperature_sensor_state>:
 80204b2:	f247 30a8 	movw	r0, #29608	@ 0x73a8
 80204b6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80204ba:	78c2      	ldrb	r2, [r0, #3]
 80204bc:	2101      	movs	r1, #1
 80204be:	7081      	strb	r1, [r0, #2]
 80204c0:	f042 0102 	orr.w	r1, r2, #2
 80204c4:	70c1      	strb	r1, [r0, #3]
 80204c6:	f7fb ba6f 	b.w	801b9a8 <bsp_request_temperature>

080204ca <llhwc_cmn_request_temperature>:
 80204ca:	f247 30a8 	movw	r0, #29608	@ 0x73a8
 80204ce:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80204d2:	7881      	ldrb	r1, [r0, #2]
 80204d4:	2901      	cmp	r1, #1
 80204d6:	bf18      	it	ne
 80204d8:	4770      	bxne	lr
 80204da:	78c0      	ldrb	r0, [r0, #3]
 80204dc:	0780      	lsls	r0, r0, #30
 80204de:	bf48      	it	mi
 80204e0:	f7fb ba62 	bmi.w	801b9a8 <bsp_request_temperature>
 80204e4:	4770      	bx	lr

080204e6 <llhwc_cmn_set_temperature_value>:
 80204e6:	b5b0      	push	{r4, r5, r7, lr}
 80204e8:	f247 35a8 	movw	r5, #29608	@ 0x73a8
 80204ec:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80204f0:	78a9      	ldrb	r1, [r5, #2]
 80204f2:	2901      	cmp	r1, #1
 80204f4:	bf02      	ittt	eq
 80204f6:	4604      	moveq	r4, r0
 80204f8:	78e8      	ldrbeq	r0, [r5, #3]
 80204fa:	ea5f 71c0 	movseq.w	r1, r0, lsl #31
 80204fe:	d001      	beq.n	8020504 <llhwc_cmn_set_temperature_value+0x1e>
 8020500:	2000      	movs	r0, #0
 8020502:	bdb0      	pop	{r4, r5, r7, pc}
 8020504:	8829      	ldrh	r1, [r5, #0]
 8020506:	29ff      	cmp	r1, #255	@ 0xff
 8020508:	d10c      	bne.n	8020524 <llhwc_cmn_set_temperature_value+0x3e>
 802050a:	2000      	movs	r0, #0
 802050c:	f7ff ff4d 	bl	80203aa <llhwc_cmn_evnt_notify>
 8020510:	f7fc f886 	bl	801c620 <llhwc_phy_init_clbr>
 8020514:	2001      	movs	r0, #1
 8020516:	f7ff ff48 	bl	80203aa <llhwc_cmn_evnt_notify>
 802051a:	2000      	movs	r0, #0
 802051c:	f7fb fab4 	bl	801ba88 <llhwc_phy_set_phy_clbr_state>
 8020520:	802c      	strh	r4, [r5, #0]
 8020522:	e7ed      	b.n	8020500 <llhwc_cmn_set_temperature_value+0x1a>
 8020524:	1a62      	subs	r2, r4, r1
 8020526:	bf38      	it	cc
 8020528:	1b0a      	subcc	r2, r1, r4
 802052a:	2100      	movs	r1, #0
 802052c:	2a05      	cmp	r2, #5
 802052e:	bfc8      	it	gt
 8020530:	2101      	movgt	r1, #1
 8020532:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8020536:	4408      	add	r0, r1
 8020538:	2a06      	cmp	r2, #6
 802053a:	70e8      	strb	r0, [r5, #3]
 802053c:	dbe0      	blt.n	8020500 <llhwc_cmn_set_temperature_value+0x1a>
 802053e:	f000 00fd 	and.w	r0, r0, #253	@ 0xfd
 8020542:	70e8      	strb	r0, [r5, #3]
 8020544:	802c      	strh	r4, [r5, #0]
 8020546:	f7ec f8bb 	bl	800c6c0 <evnt_schdlr_hndl_next_evnt>
 802054a:	e7d9      	b.n	8020500 <llhwc_cmn_set_temperature_value+0x1a>

0802054c <llhwc_cmn_get_aligned_us_now>:
 802054c:	f240 0c14 	movw	ip, #20
 8020550:	f6c4 0c02 	movt	ip, #18434	@ 0x4802
 8020554:	f8dc 3000 	ldr.w	r3, [ip]
 8020558:	f8dc 2000 	ldr.w	r2, [ip]
 802055c:	4293      	cmp	r3, r2
 802055e:	d0fb      	beq.n	8020558 <llhwc_cmn_get_aligned_us_now+0xc>
 8020560:	f247 3c88 	movw	ip, #29576	@ 0x7388
 8020564:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8020568:	f89c 3014 	ldrb.w	r3, [ip, #20]
 802056c:	2b02      	cmp	r3, #2
 802056e:	d00b      	beq.n	8020588 <llhwc_cmn_get_aligned_us_now+0x3c>
 8020570:	2b01      	cmp	r3, #1
 8020572:	d10e      	bne.n	8020592 <llhwc_cmn_get_aligned_us_now+0x46>
 8020574:	f8dc c000 	ldr.w	ip, [ip]
 8020578:	237d      	movs	r3, #125	@ 0x7d
 802057a:	fb0c f303 	mul.w	r3, ip, r3
 802057e:	f24c 0c60 	movw	ip, #49248	@ 0xc060
 8020582:	f2c0 0c07 	movt	ip, #7
 8020586:	e007      	b.n	8020598 <llhwc_cmn_get_aligned_us_now+0x4c>
 8020588:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 802058c:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8020590:	e002      	b.n	8020598 <llhwc_cmn_get_aligned_us_now+0x4c>
 8020592:	f04f 0c04 	mov.w	ip, #4
 8020596:	237d      	movs	r3, #125	@ 0x7d
 8020598:	6003      	str	r3, [r0, #0]
 802059a:	1c50      	adds	r0, r2, #1
 802059c:	f8c1 c000 	str.w	ip, [r1]
 80205a0:	4770      	bx	lr

080205a2 <llhwc_cmn_rgstr_evnt_schdlr_timing_update_cb>:
 80205a2:	f247 3130 	movw	r1, #29488	@ 0x7330
 80205a6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80205aa:	6488      	str	r0, [r1, #72]	@ 0x48
 80205ac:	4770      	bx	lr
	...

080205b0 <llhwc_cmn_get_desc>:
 80205b0:	b570      	push	{r4, r5, r6, lr}
 80205b2:	2101      	movs	r1, #1
 80205b4:	4604      	mov	r4, r0
 80205b6:	2800      	cmp	r0, #0
 80205b8:	bf18      	it	ne
 80205ba:	2001      	movne	r0, #1
 80205bc:	2601      	movs	r6, #1
 80205be:	f7fb f9ae 	bl	801b91e <bsp_assert>
 80205c2:	f247 31d8 	movw	r1, #29656	@ 0x73d8
 80205c6:	2000      	movs	r0, #0
 80205c8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80205cc:	2500      	movs	r5, #0
 80205ce:	bf00      	nop
 80205d0:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 80205d4:	7912      	ldrb	r2, [r2, #4]
 80205d6:	2a01      	cmp	r2, #1
 80205d8:	d103      	bne.n	80205e2 <llhwc_cmn_get_desc+0x32>
 80205da:	f851 2030 	ldr.w	r2, [r1, r0, lsl #3]
 80205de:	42a2      	cmp	r2, r4
 80205e0:	d005      	beq.n	80205ee <llhwc_cmn_get_desc+0x3e>
 80205e2:	2001      	movs	r0, #1
 80205e4:	07f2      	lsls	r2, r6, #31
 80205e6:	f04f 0600 	mov.w	r6, #0
 80205ea:	d1f1      	bne.n	80205d0 <llhwc_cmn_get_desc+0x20>
 80205ec:	e007      	b.n	80205fe <llhwc_cmn_get_desc+0x4e>
 80205ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80205f2:	f248 2148 	movw	r1, #33352	@ 0x8248
 80205f6:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 80205fa:	ea41 1500 	orr.w	r5, r1, r0, lsl #4
 80205fe:	4628      	mov	r0, r5
 8020600:	2101      	movs	r1, #1
 8020602:	2d00      	cmp	r5, #0
 8020604:	bf18      	it	ne
 8020606:	2001      	movne	r0, #1
 8020608:	f7fb f989 	bl	801b91e <bsp_assert>
 802060c:	4628      	mov	r0, r5
 802060e:	bd70      	pop	{r4, r5, r6, pc}

08020610 <llhwc_cmn_get_enc_desc>:
 8020610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020614:	2101      	movs	r1, #1
 8020616:	4680      	mov	r8, r0
 8020618:	2800      	cmp	r0, #0
 802061a:	bf18      	it	ne
 802061c:	2001      	movne	r0, #1
 802061e:	2501      	movs	r5, #1
 8020620:	f7fb f97d 	bl	801b91e <bsp_assert>
 8020624:	f247 37d8 	movw	r7, #29656	@ 0x73d8
 8020628:	2600      	movs	r6, #0
 802062a:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 802062e:	bf00      	nop
 8020630:	eb07 04c6 	add.w	r4, r7, r6, lsl #3
 8020634:	7920      	ldrb	r0, [r4, #4]
 8020636:	2801      	cmp	r0, #1
 8020638:	d10c      	bne.n	8020654 <llhwc_cmn_get_enc_desc+0x44>
 802063a:	f857 0036 	ldr.w	r0, [r7, r6, lsl #3]
 802063e:	4540      	cmp	r0, r8
 8020640:	d108      	bne.n	8020654 <llhwc_cmn_get_enc_desc+0x44>
 8020642:	f814 0f05 	ldrb.w	r0, [r4, #5]!
 8020646:	2802      	cmp	r0, #2
 8020648:	d20d      	bcs.n	8020666 <llhwc_cmn_get_enc_desc+0x56>
 802064a:	2000      	movs	r0, #0
 802064c:	2101      	movs	r1, #1
 802064e:	f7fb f966 	bl	801b91e <bsp_assert>
 8020652:	bf00      	nop
 8020654:	2000      	movs	r0, #0
 8020656:	2601      	movs	r6, #1
 8020658:	07e9      	lsls	r1, r5, #31
 802065a:	f04f 0500 	mov.w	r5, #0
 802065e:	bf08      	it	eq
 8020660:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020664:	e7e4      	b.n	8020630 <llhwc_cmn_get_enc_desc+0x20>
 8020666:	2101      	movs	r1, #1
 8020668:	ea21 0000 	bic.w	r0, r1, r0
 802066c:	2101      	movs	r1, #1
 802066e:	f7fb f956 	bl	801b91e <bsp_assert>
 8020672:	7820      	ldrb	r0, [r4, #0]
 8020674:	f248 2148 	movw	r1, #33352	@ 0x8248
 8020678:	eb06 0050 	add.w	r0, r6, r0, lsr #1
 802067c:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 8020680:	b2c0      	uxtb	r0, r0
 8020682:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020686:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 802068a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802068e <ll_mem_init>:
 802068e:	b580      	push	{r7, lr}
 8020690:	b082      	sub	sp, #8
 8020692:	f247 400c 	movw	r0, #29708	@ 0x740c
 8020696:	f247 4114 	movw	r1, #29716	@ 0x7414
 802069a:	f04f 0c00 	mov.w	ip, #0
 802069e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80206a2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80206a6:	220c      	movs	r2, #12
 80206a8:	2335      	movs	r3, #53	@ 0x35
 80206aa:	f8cd c000 	str.w	ip, [sp]
 80206ae:	f000 f833 	bl	8020718 <mem_pool_init>
 80206b2:	f247 7064 	movw	r0, #30564	@ 0x7764
 80206b6:	f247 716c 	movw	r1, #30572	@ 0x776c
 80206ba:	f04f 0c01 	mov.w	ip, #1
 80206be:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80206c2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80206c6:	2218      	movs	r2, #24
 80206c8:	2324      	movs	r3, #36	@ 0x24
 80206ca:	f8cd c000 	str.w	ip, [sp]
 80206ce:	f000 f823 	bl	8020718 <mem_pool_init>
 80206d2:	f647 305c 	movw	r0, #31580	@ 0x7b5c
 80206d6:	f647 3164 	movw	r1, #31588	@ 0x7b64
 80206da:	f04f 0c02 	mov.w	ip, #2
 80206de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80206e2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80206e6:	2210      	movs	r2, #16
 80206e8:	2301      	movs	r3, #1
 80206ea:	f8cd c000 	str.w	ip, [sp]
 80206ee:	f000 f813 	bl	8020718 <mem_pool_init>
 80206f2:	f647 3078 	movw	r0, #31608	@ 0x7b78
 80206f6:	f647 3180 	movw	r1, #31616	@ 0x7b80
 80206fa:	f04f 0c03 	mov.w	ip, #3
 80206fe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020702:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020706:	f240 1201 	movw	r2, #257	@ 0x101
 802070a:	2306      	movs	r3, #6
 802070c:	f8cd c000 	str.w	ip, [sp]
 8020710:	f000 f802 	bl	8020718 <mem_pool_init>
 8020714:	b002      	add	sp, #8
 8020716:	bd80      	pop	{r7, pc}

08020718 <mem_pool_init>:
 8020718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802071c:	460e      	mov	r6, r1
 802071e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020722:	2101      	movs	r1, #1
 8020724:	461d      	mov	r5, r3
 8020726:	4690      	mov	r8, r2
 8020728:	4604      	mov	r4, r0
 802072a:	2800      	cmp	r0, #0
 802072c:	bf18      	it	ne
 802072e:	2001      	movne	r0, #1
 8020730:	f7fb f8f5 	bl	801b91e <bsp_assert>
 8020734:	2000      	movs	r0, #0
 8020736:	2101      	movs	r1, #1
 8020738:	f04f 0a00 	mov.w	sl, #0
 802073c:	f1b9 0f0e 	cmp.w	r9, #14
 8020740:	bf38      	it	cc
 8020742:	2001      	movcc	r0, #1
 8020744:	f7fb f8eb 	bl	801b91e <bsp_assert>
 8020748:	f647 50ff 	movw	r0, #32255	@ 0x7dff
 802074c:	f2cb 70fd 	movt	r0, #47101	@ 0xb7fd
 8020750:	4430      	add	r0, r6
 8020752:	f108 0107 	add.w	r1, r8, #7
 8020756:	f643 52fe 	movw	r2, #15870	@ 0x3dfe
 802075a:	4290      	cmp	r0, r2
 802075c:	f021 0703 	bic.w	r7, r1, #3
 8020760:	d80d      	bhi.n	802077e <mem_pool_init+0x66>
 8020762:	fb07 6005 	mla	r0, r7, r5, r6
 8020766:	f24c 0101 	movw	r1, #49153	@ 0xc001
 802076a:	f6c4 0102 	movt	r1, #18434	@ 0x4802
 802076e:	4288      	cmp	r0, r1
 8020770:	bf38      	it	cc
 8020772:	f04f 0a01 	movcc.w	sl, #1
 8020776:	4650      	mov	r0, sl
 8020778:	2101      	movs	r1, #1
 802077a:	f7fb f8d0 	bl	801b91e <bsp_assert>
 802077e:	6027      	str	r7, [r4, #0]
 8020780:	b19d      	cbz	r5, 80207aa <mem_pool_init+0x92>
 8020782:	ea4f 4009 	mov.w	r0, r9, lsl #16
 8020786:	f100 402a 	add.w	r0, r0, #2852126720	@ 0xaa000000
 802078a:	6066      	str	r6, [r4, #4]
 802078c:	19f1      	adds	r1, r6, r7
 802078e:	e9c6 0100 	strd	r0, r1, [r6]
 8020792:	3d01      	subs	r5, #1
 8020794:	460e      	mov	r6, r1
 8020796:	d1f9      	bne.n	802078c <mem_pool_init+0x74>
 8020798:	1bc8      	subs	r0, r1, r7
 802079a:	2100      	movs	r1, #0
 802079c:	6041      	str	r1, [r0, #4]
 802079e:	f248 10b0 	movw	r0, #33200	@ 0x81b0
 80207a2:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80207a6:	f840 4029 	str.w	r4, [r0, r9, lsl #2]
 80207aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080207ae <mem_pool_alloc>:
 80207ae:	b570      	push	{r4, r5, r6, lr}
 80207b0:	2101      	movs	r1, #1
 80207b2:	4605      	mov	r5, r0
 80207b4:	2800      	cmp	r0, #0
 80207b6:	bf18      	it	ne
 80207b8:	2001      	movne	r0, #1
 80207ba:	f7fb f8b0 	bl	801b91e <bsp_assert>
 80207be:	f7fb f90e 	bl	801b9de <os_disable_isr>
 80207c2:	686e      	ldr	r6, [r5, #4]
 80207c4:	2400      	movs	r4, #0
 80207c6:	b1ae      	cbz	r6, 80207f4 <mem_pool_alloc+0x46>
 80207c8:	6830      	ldr	r0, [r6, #0]
 80207ca:	2101      	movs	r1, #1
 80207cc:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 80207d0:	f100 40ac 	add.w	r0, r0, #1442840576	@ 0x56000000
 80207d4:	fab0 f080 	clz	r0, r0
 80207d8:	0940      	lsrs	r0, r0, #5
 80207da:	f7fb f8a0 	bl	801b91e <bsp_assert>
 80207de:	4630      	mov	r0, r6
 80207e0:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80207e4:	22ee      	movs	r2, #238	@ 0xee
 80207e6:	6069      	str	r1, [r5, #4]
 80207e8:	6831      	ldr	r1, [r6, #0]
 80207ea:	f362 611f 	bfi	r1, r2, #24, #8
 80207ee:	6031      	str	r1, [r6, #0]
 80207f0:	6004      	str	r4, [r0, #0]
 80207f2:	4604      	mov	r4, r0
 80207f4:	f7fb f8f5 	bl	801b9e2 <os_enable_isr>
 80207f8:	4620      	mov	r0, r4
 80207fa:	bd70      	pop	{r4, r5, r6, pc}

080207fc <mem_pool_free>:
 80207fc:	b570      	push	{r4, r5, r6, lr}
 80207fe:	4605      	mov	r5, r0
 8020800:	4604      	mov	r4, r0
 8020802:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 8020806:	f248 12b0 	movw	r2, #33200	@ 0x81b0
 802080a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802080e:	f000 407f 	and.w	r0, r0, #4278190080	@ 0xff000000
 8020812:	f100 5090 	add.w	r0, r0, #301989888	@ 0x12000000
 8020816:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802081a:	fab0 f080 	clz	r0, r0
 802081e:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 8020822:	0940      	lsrs	r0, r0, #5
 8020824:	2101      	movs	r1, #1
 8020826:	f7fb f87a 	bl	801b91e <bsp_assert>
 802082a:	f7fb f8d8 	bl	801b9de <os_disable_isr>
 802082e:	6870      	ldr	r0, [r6, #4]
 8020830:	6075      	str	r5, [r6, #4]
 8020832:	6020      	str	r0, [r4, #0]
 8020834:	20aa      	movs	r0, #170	@ 0xaa
 8020836:	f804 0c01 	strb.w	r0, [r4, #-1]
 802083a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802083e:	f7fb b8d0 	b.w	801b9e2 <os_enable_isr>
	...

08020844 <ble_memcpy>:
 8020844:	b570      	push	{r4, r5, r6, lr}
 8020846:	2a00      	cmp	r2, #0
 8020848:	d041      	beq.n	80208ce <ble_memcpy+0x8a>
 802084a:	f000 0303 	and.w	r3, r0, #3
 802084e:	f1c3 0404 	rsb	r4, r3, #4
 8020852:	42a2      	cmp	r2, r4
 8020854:	4625      	mov	r5, r4
 8020856:	bf38      	it	cc
 8020858:	4615      	movcc	r5, r2
 802085a:	2a04      	cmp	r2, #4
 802085c:	bf28      	it	cs
 802085e:	4625      	movcs	r5, r4
 8020860:	f1b5 0e04 	subs.w	lr, r5, #4
 8020864:	bf18      	it	ne
 8020866:	46ae      	movne	lr, r5
 8020868:	f001 0503 	and.w	r5, r1, #3
 802086c:	429d      	cmp	r5, r3
 802086e:	d130      	bne.n	80208d2 <ble_memcpy+0x8e>
 8020870:	eba2 020e 	sub.w	r2, r2, lr
 8020874:	eb02 7392 	add.w	r3, r2, r2, lsr #30
 8020878:	ea5f 650e 	movs.w	r5, lr, lsl #24
 802087c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8020880:	d008      	beq.n	8020894 <ble_memcpy+0x50>
 8020882:	4673      	mov	r3, lr
 8020884:	4604      	mov	r4, r0
 8020886:	460d      	mov	r5, r1
 8020888:	f815 6b01 	ldrb.w	r6, [r5], #1
 802088c:	3b01      	subs	r3, #1
 802088e:	f804 6b01 	strb.w	r6, [r4], #1
 8020892:	d1f9      	bne.n	8020888 <ble_memcpy+0x44>
 8020894:	fa1f fc8c 	uxth.w	ip, ip
 8020898:	f002 0203 	and.w	r2, r2, #3
 802089c:	f1bc 0f00 	cmp.w	ip, #0
 80208a0:	d00a      	beq.n	80208b8 <ble_memcpy+0x74>
 80208a2:	eb00 030e 	add.w	r3, r0, lr
 80208a6:	eb01 040e 	add.w	r4, r1, lr
 80208aa:	4665      	mov	r5, ip
 80208ac:	f854 6b04 	ldr.w	r6, [r4], #4
 80208b0:	3d01      	subs	r5, #1
 80208b2:	f843 6b04 	str.w	r6, [r3], #4
 80208b6:	d1f9      	bne.n	80208ac <ble_memcpy+0x68>
 80208b8:	b19a      	cbz	r2, 80208e2 <ble_memcpy+0x9e>
 80208ba:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80208be:	4473      	add	r3, lr
 80208c0:	5cce      	ldrb	r6, [r1, r3]
 80208c2:	3a01      	subs	r2, #1
 80208c4:	54c6      	strb	r6, [r0, r3]
 80208c6:	f103 0301 	add.w	r3, r3, #1
 80208ca:	d1f9      	bne.n	80208c0 <ble_memcpy+0x7c>
 80208cc:	e009      	b.n	80208e2 <ble_memcpy+0x9e>
 80208ce:	2000      	movs	r0, #0
 80208d0:	bd70      	pop	{r4, r5, r6, pc}
 80208d2:	2300      	movs	r3, #0
 80208d4:	5cce      	ldrb	r6, [r1, r3]
 80208d6:	3a01      	subs	r2, #1
 80208d8:	54c6      	strb	r6, [r0, r3]
 80208da:	0416      	lsls	r6, r2, #16
 80208dc:	f103 0301 	add.w	r3, r3, #1
 80208e0:	d1f8      	bne.n	80208d4 <ble_memcpy+0x90>
 80208e2:	bd70      	pop	{r4, r5, r6, pc}

080208e4 <ble_memset>:
 80208e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208e8:	4604      	mov	r4, r0
 80208ea:	f000 0003 	and.w	r0, r0, #3
 80208ee:	f1c0 0004 	rsb	r0, r0, #4
 80208f2:	4282      	cmp	r2, r0
 80208f4:	4603      	mov	r3, r0
 80208f6:	bf38      	it	cc
 80208f8:	4613      	movcc	r3, r2
 80208fa:	2a04      	cmp	r2, #4
 80208fc:	bf28      	it	cs
 80208fe:	4603      	movcs	r3, r0
 8020900:	1f1e      	subs	r6, r3, #4
 8020902:	bf18      	it	ne
 8020904:	461e      	movne	r6, r3
 8020906:	1b97      	subs	r7, r2, r6
 8020908:	eb07 7597 	add.w	r5, r7, r7, lsr #30
 802090c:	4688      	mov	r8, r1
 802090e:	b126      	cbz	r6, 802091a <ble_memset+0x36>
 8020910:	4620      	mov	r0, r4
 8020912:	4631      	mov	r1, r6
 8020914:	4642      	mov	r2, r8
 8020916:	f7df fc43 	bl	80001a0 <__aeabi_memset>
 802091a:	1cf8      	adds	r0, r7, #3
 802091c:	ea4f 0ca5 	mov.w	ip, r5, asr #2
 8020920:	f007 0103 	and.w	r1, r7, #3
 8020924:	2807      	cmp	r0, #7
 8020926:	eb04 0706 	add.w	r7, r4, r6
 802092a:	d309      	bcc.n	8020940 <ble_memset+0x5c>
 802092c:	f04f 3001 	mov.w	r0, #16843009	@ 0x1010101
 8020930:	fb08 f300 	mul.w	r3, r8, r0
 8020934:	4660      	mov	r0, ip
 8020936:	463a      	mov	r2, r7
 8020938:	f842 3b04 	str.w	r3, [r2], #4
 802093c:	3801      	subs	r0, #1
 802093e:	d1fb      	bne.n	8020938 <ble_memset+0x54>
 8020940:	b121      	cbz	r1, 802094c <ble_memset+0x68>
 8020942:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 8020946:	4642      	mov	r2, r8
 8020948:	f7df fc2a 	bl	80001a0 <__aeabi_memset>
 802094c:	4620      	mov	r0, r4
 802094e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08020954 <ble_memcmp>:
 8020954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020956:	f000 0303 	and.w	r3, r0, #3
 802095a:	f1c3 0404 	rsb	r4, r3, #4
 802095e:	42a2      	cmp	r2, r4
 8020960:	4625      	mov	r5, r4
 8020962:	bf38      	it	cc
 8020964:	4615      	movcc	r5, r2
 8020966:	2a04      	cmp	r2, #4
 8020968:	bf28      	it	cs
 802096a:	4625      	movcs	r5, r4
 802096c:	f1b5 0e04 	subs.w	lr, r5, #4
 8020970:	bf18      	it	ne
 8020972:	46ae      	movne	lr, r5
 8020974:	f001 0503 	and.w	r5, r1, #3
 8020978:	429d      	cmp	r5, r3
 802097a:	d141      	bne.n	8020a00 <ble_memcmp+0xac>
 802097c:	ea5f 630e 	movs.w	r3, lr, lsl #24
 8020980:	d010      	beq.n	80209a4 <ble_memcmp+0x50>
 8020982:	fa5f fc8e 	uxtb.w	ip, lr
 8020986:	2300      	movs	r3, #0
 8020988:	4604      	mov	r4, r0
 802098a:	460d      	mov	r5, r1
 802098c:	7826      	ldrb	r6, [r4, #0]
 802098e:	782f      	ldrb	r7, [r5, #0]
 8020990:	42be      	cmp	r6, r7
 8020992:	d343      	bcc.n	8020a1c <ble_memcmp+0xc8>
 8020994:	d844      	bhi.n	8020a20 <ble_memcmp+0xcc>
 8020996:	3301      	adds	r3, #1
 8020998:	b29e      	uxth	r6, r3
 802099a:	3501      	adds	r5, #1
 802099c:	4566      	cmp	r6, ip
 802099e:	f104 0401 	add.w	r4, r4, #1
 80209a2:	d3f3      	bcc.n	802098c <ble_memcmp+0x38>
 80209a4:	eba2 0c0e 	sub.w	ip, r2, lr
 80209a8:	eb0c 729c 	add.w	r2, ip, ip, lsr #30
 80209ac:	eb00 040e 	add.w	r4, r0, lr
 80209b0:	1092      	asrs	r2, r2, #2
 80209b2:	b292      	uxth	r2, r2
 80209b4:	eb01 050e 	add.w	r5, r1, lr
 80209b8:	b16a      	cbz	r2, 80209d6 <ble_memcmp+0x82>
 80209ba:	2300      	movs	r3, #0
 80209bc:	4620      	mov	r0, r4
 80209be:	4629      	mov	r1, r5
 80209c0:	6807      	ldr	r7, [r0, #0]
 80209c2:	680e      	ldr	r6, [r1, #0]
 80209c4:	42b7      	cmp	r7, r6
 80209c6:	d329      	bcc.n	8020a1c <ble_memcmp+0xc8>
 80209c8:	d82a      	bhi.n	8020a20 <ble_memcmp+0xcc>
 80209ca:	3301      	adds	r3, #1
 80209cc:	3104      	adds	r1, #4
 80209ce:	4293      	cmp	r3, r2
 80209d0:	f100 0004 	add.w	r0, r0, #4
 80209d4:	d3f4      	bcc.n	80209c0 <ble_memcmp+0x6c>
 80209d6:	f01c 0303 	ands.w	r3, ip, #3
 80209da:	d01d      	beq.n	8020a18 <ble_memcmp+0xc4>
 80209dc:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 80209e0:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 80209e4:	2200      	movs	r2, #0
 80209e6:	bf00      	nop
 80209e8:	7807      	ldrb	r7, [r0, #0]
 80209ea:	780e      	ldrb	r6, [r1, #0]
 80209ec:	42b7      	cmp	r7, r6
 80209ee:	d315      	bcc.n	8020a1c <ble_memcmp+0xc8>
 80209f0:	d816      	bhi.n	8020a20 <ble_memcmp+0xcc>
 80209f2:	3201      	adds	r2, #1
 80209f4:	3101      	adds	r1, #1
 80209f6:	429a      	cmp	r2, r3
 80209f8:	f100 0001 	add.w	r0, r0, #1
 80209fc:	d3f4      	bcc.n	80209e8 <ble_memcmp+0x94>
 80209fe:	e00b      	b.n	8020a18 <ble_memcmp+0xc4>
 8020a00:	b152      	cbz	r2, 8020a18 <ble_memcmp+0xc4>
 8020a02:	2300      	movs	r3, #0
 8020a04:	5cc7      	ldrb	r7, [r0, r3]
 8020a06:	5cce      	ldrb	r6, [r1, r3]
 8020a08:	42b7      	cmp	r7, r6
 8020a0a:	d307      	bcc.n	8020a1c <ble_memcmp+0xc8>
 8020a0c:	d808      	bhi.n	8020a20 <ble_memcmp+0xcc>
 8020a0e:	3a01      	subs	r2, #1
 8020a10:	0417      	lsls	r7, r2, #16
 8020a12:	f103 0301 	add.w	r3, r3, #1
 8020a16:	d1f5      	bne.n	8020a04 <ble_memcmp+0xb0>
 8020a18:	2000      	movs	r0, #0
 8020a1a:	e002      	b.n	8020a22 <ble_memcmp+0xce>
 8020a1c:	20ff      	movs	r0, #255	@ 0xff
 8020a1e:	e000      	b.n	8020a22 <ble_memcmp+0xce>
 8020a20:	2001      	movs	r0, #1
 8020a22:	b240      	sxtb	r0, r0
 8020a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020a26 <intr_hndlr_reg>:
 8020a26:	f248 12ec 	movw	r2, #33260	@ 0x81ec
 8020a2a:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8020a2e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 8020a32:	4770      	bx	lr

08020a34 <os_process_isr>:
 8020a34:	f248 11ec 	movw	r1, #33260	@ 0x81ec
 8020a38:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020a3c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8020a40:	4700      	bx	r0

08020a42 <os_wrapper_init>:
 8020a42:	f7fd b923 	b.w	801dc8c <os_timer_init>

08020a46 <os_wrapper_is_rtos_used>:
 8020a46:	2000      	movs	r0, #0
 8020a48:	4770      	bx	lr
	...

08020a4c <pta_init_acl>:
 8020a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a4e:	b081      	sub	sp, #4
 8020a50:	f248 2508 	movw	r5, #33288	@ 0x8208
 8020a54:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020a58:	7e69      	ldrb	r1, [r5, #25]
 8020a5a:	b1e9      	cbz	r1, 8020a98 <pta_init_acl+0x4c>
 8020a5c:	4604      	mov	r4, r0
 8020a5e:	2000      	movs	r0, #0
 8020a60:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8020a64:	5c69      	ldrb	r1, [r5, r1]
 8020a66:	b139      	cbz	r1, 8020a78 <pta_init_acl+0x2c>
 8020a68:	3001      	adds	r0, #1
 8020a6a:	2808      	cmp	r0, #8
 8020a6c:	d1f8      	bne.n	8020a60 <pta_init_acl+0x14>
 8020a6e:	2000      	movs	r0, #0
 8020a70:	2101      	movs	r1, #1
 8020a72:	f7fa ff54 	bl	801b91e <bsp_assert>
 8020a76:	2008      	movs	r0, #8
 8020a78:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8020a7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020a80:	2201      	movs	r2, #1
 8020a82:	182e      	adds	r6, r5, r0
 8020a84:	546a      	strb	r2, [r5, r1]
 8020a86:	1c75      	adds	r5, r6, #1
 8020a88:	4628      	mov	r0, r5
 8020a8a:	2100      	movs	r1, #0
 8020a8c:	2202      	movs	r2, #2
 8020a8e:	2702      	movs	r7, #2
 8020a90:	f7ff ff28 	bl	80208e4 <ble_memset>
 8020a94:	7077      	strb	r7, [r6, #1]
 8020a96:	6025      	str	r5, [r4, #0]
 8020a98:	b001      	add	sp, #4
 8020a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020a9c <pta_configure_acl_params>:
 8020a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a9e:	b081      	sub	sp, #4
 8020aa0:	f248 2208 	movw	r2, #33288	@ 0x8208
 8020aa4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8020aa8:	7e53      	ldrb	r3, [r2, #25]
 8020aaa:	b143      	cbz	r3, 8020abe <pta_configure_acl_params+0x22>
 8020aac:	2901      	cmp	r1, #1
 8020aae:	d008      	beq.n	8020ac2 <pta_configure_acl_params+0x26>
 8020ab0:	b971      	cbnz	r1, 8020ad0 <pta_configure_acl_params+0x34>
 8020ab2:	7e10      	ldrb	r0, [r2, #24]
 8020ab4:	f3c0 04c0 	ubfx	r4, r0, #3, #1
 8020ab8:	2200      	movs	r2, #0
 8020aba:	4621      	mov	r1, r4
 8020abc:	e060      	b.n	8020b80 <pta_configure_acl_params+0xe4>
 8020abe:	b001      	add	sp, #4
 8020ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	b150      	cbz	r0, 8020adc <pta_configure_acl_params+0x40>
 8020ac6:	6820      	ldr	r0, [r4, #0]
 8020ac8:	2800      	cmp	r0, #0
 8020aca:	bf18      	it	ne
 8020acc:	2001      	movne	r0, #1
 8020ace:	e006      	b.n	8020ade <pta_configure_acl_params+0x42>
 8020ad0:	2000      	movs	r0, #0
 8020ad2:	2101      	movs	r1, #1
 8020ad4:	2400      	movs	r4, #0
 8020ad6:	f7fa ff22 	bl	801b91e <bsp_assert>
 8020ada:	e04f      	b.n	8020b7c <pta_configure_acl_params+0xe0>
 8020adc:	2000      	movs	r0, #0
 8020ade:	2101      	movs	r1, #1
 8020ae0:	f7fa ff1d 	bl	801b91e <bsp_assert>
 8020ae4:	6825      	ldr	r5, [r4, #0]
 8020ae6:	7828      	ldrb	r0, [r5, #0]
 8020ae8:	2804      	cmp	r0, #4
 8020aea:	d12b      	bne.n	8020b44 <pta_configure_acl_params+0xa8>
 8020aec:	786f      	ldrb	r7, [r5, #1]
 8020aee:	2001      	movs	r0, #1
 8020af0:	2101      	movs	r1, #1
 8020af2:	2601      	movs	r6, #1
 8020af4:	f7fa ff13 	bl	801b91e <bsp_assert>
 8020af8:	68a0      	ldr	r0, [r4, #8]
 8020afa:	f242 7110 	movw	r1, #10000	@ 0x2710
 8020afe:	fb07 f000 	mul.w	r0, r7, r0
 8020b02:	6862      	ldr	r2, [r4, #4]
 8020b04:	fb00 f101 	mul.w	r1, r0, r1
 8020b08:	f248 501f 	movw	r0, #34079	@ 0x851f
 8020b0c:	f2c5 10eb 	movt	r0, #20971	@ 0x51eb
 8020b10:	fba1 1300 	umull	r1, r3, r1, r0
 8020b14:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8020b18:	d212      	bcs.n	8020b40 <pta_configure_acl_params+0xa4>
 8020b1a:	6921      	ldr	r1, [r4, #16]
 8020b1c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8020b20:	fb01 f102 	mul.w	r1, r1, r2
 8020b24:	f06f 0295 	mvn.w	r2, #149	@ 0x95
 8020b28:	eb02 0151 	add.w	r1, r2, r1, lsr #1
 8020b2c:	68e2      	ldr	r2, [r4, #12]
 8020b2e:	fb01 f107 	mul.w	r1, r1, r7
 8020b32:	2600      	movs	r6, #0
 8020b34:	fba1 0100 	umull	r0, r1, r1, r0
 8020b38:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8020b3c:	bf28      	it	cs
 8020b3e:	2601      	movcs	r6, #1
 8020b40:	7828      	ldrb	r0, [r5, #0]
 8020b42:	e000      	b.n	8020b46 <pta_configure_acl_params+0xaa>
 8020b44:	2600      	movs	r6, #0
 8020b46:	2801      	cmp	r0, #1
 8020b48:	d101      	bne.n	8020b4e <pta_configure_acl_params+0xb2>
 8020b4a:	2401      	movs	r4, #1
 8020b4c:	e006      	b.n	8020b5c <pta_configure_acl_params+0xc0>
 8020b4e:	2804      	cmp	r0, #4
 8020b50:	f04f 0400 	mov.w	r4, #0
 8020b54:	d102      	bne.n	8020b5c <pta_configure_acl_params+0xc0>
 8020b56:	2e00      	cmp	r6, #0
 8020b58:	bf18      	it	ne
 8020b5a:	2401      	movne	r4, #1
 8020b5c:	2802      	cmp	r0, #2
 8020b5e:	d00c      	beq.n	8020b7a <pta_configure_acl_params+0xde>
 8020b60:	2804      	cmp	r0, #4
 8020b62:	bf08      	it	eq
 8020b64:	2e00      	cmpeq	r6, #0
 8020b66:	d008      	beq.n	8020b7a <pta_configure_acl_params+0xde>
 8020b68:	2803      	cmp	r0, #3
 8020b6a:	d1a5      	bne.n	8020ab8 <pta_configure_acl_params+0x1c>
 8020b6c:	786a      	ldrb	r2, [r5, #1]
 8020b6e:	2100      	movs	r1, #0
 8020b70:	4614      	mov	r4, r2
 8020b72:	2a00      	cmp	r2, #0
 8020b74:	bf18      	it	ne
 8020b76:	2401      	movne	r4, #1
 8020b78:	e002      	b.n	8020b80 <pta_configure_acl_params+0xe4>
 8020b7a:	2400      	movs	r4, #0
 8020b7c:	2100      	movs	r1, #0
 8020b7e:	2200      	movs	r2, #0
 8020b80:	4620      	mov	r0, r4
 8020b82:	b001      	add	sp, #4
 8020b84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8020b88:	f7ff bc51 	b.w	802042e <llhwc_cmn_pta_set_params>

08020b8c <pta_configure_adv_params>:
 8020b8c:	f248 2108 	movw	r1, #33288	@ 0x8208
 8020b90:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020b94:	7e4a      	ldrb	r2, [r1, #25]
 8020b96:	b132      	cbz	r2, 8020ba6 <pta_configure_adv_params+0x1a>
 8020b98:	2801      	cmp	r0, #1
 8020b9a:	d005      	beq.n	8020ba8 <pta_configure_adv_params+0x1c>
 8020b9c:	b940      	cbnz	r0, 8020bb0 <pta_configure_adv_params+0x24>
 8020b9e:	7e08      	ldrb	r0, [r1, #24]
 8020ba0:	f000 0001 	and.w	r0, r0, #1
 8020ba4:	e005      	b.n	8020bb2 <pta_configure_adv_params+0x26>
 8020ba6:	4770      	bx	lr
 8020ba8:	7e08      	ldrb	r0, [r1, #24]
 8020baa:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8020bae:	e000      	b.n	8020bb2 <pta_configure_adv_params+0x26>
 8020bb0:	2000      	movs	r0, #0
 8020bb2:	4601      	mov	r1, r0
 8020bb4:	2200      	movs	r2, #0
 8020bb6:	f7ff bc3a 	b.w	802042e <llhwc_cmn_pta_set_params>

08020bba <pta_configure_non_prdc_scan_params>:
 8020bba:	f248 2008 	movw	r0, #33288	@ 0x8208
 8020bbe:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020bc2:	7e41      	ldrb	r1, [r0, #25]
 8020bc4:	2901      	cmp	r1, #1
 8020bc6:	bf18      	it	ne
 8020bc8:	4770      	bxne	lr
 8020bca:	7e00      	ldrb	r0, [r0, #24]
 8020bcc:	2200      	movs	r2, #0
 8020bce:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8020bd2:	4601      	mov	r1, r0
 8020bd4:	f7ff bc2b 	b.w	802042e <llhwc_cmn_pta_set_params>

08020bd8 <pta_configure_init_params>:
 8020bd8:	f248 2008 	movw	r0, #33288	@ 0x8208
 8020bdc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020be0:	7e41      	ldrb	r1, [r0, #25]
 8020be2:	2901      	cmp	r1, #1
 8020be4:	bf18      	it	ne
 8020be6:	4770      	bxne	lr
 8020be8:	7e00      	ldrb	r0, [r0, #24]
 8020bea:	2200      	movs	r2, #0
 8020bec:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8020bf0:	4601      	mov	r1, r0
 8020bf2:	f7ff bc1c 	b.w	802042e <llhwc_cmn_pta_set_params>

08020bf6 <pta_ble_event_complete>:
 8020bf6:	b510      	push	{r4, lr}
 8020bf8:	f248 2408 	movw	r4, #33288	@ 0x8208
 8020bfc:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8020c00:	7e60      	ldrb	r0, [r4, #25]
 8020c02:	2801      	cmp	r0, #1
 8020c04:	bf18      	it	ne
 8020c06:	bd10      	popne	{r4, pc}
 8020c08:	f7ff fc31 	bl	802046e <llhwc_cmn_pta_get_tx_reject_counter>
 8020c0c:	76e0      	strb	r0, [r4, #27]
 8020c0e:	f7ff fc36 	bl	802047e <llhwc_cmn_pta_get_rx_reject_counter>
 8020c12:	7720      	strb	r0, [r4, #28]
 8020c14:	bd10      	pop	{r4, pc}
	...

08020c18 <pta_init_context>:
 8020c18:	b5b0      	push	{r4, r5, r7, lr}
 8020c1a:	f248 2408 	movw	r4, #33288	@ 0x8208
 8020c1e:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8020c22:	4620      	mov	r0, r4
 8020c24:	2100      	movs	r1, #0
 8020c26:	221d      	movs	r2, #29
 8020c28:	2500      	movs	r5, #0
 8020c2a:	f7ff fe5b 	bl	80208e4 <ble_memset>
 8020c2e:	2000      	movs	r0, #0
 8020c30:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8020c34:	3001      	adds	r0, #1
 8020c36:	2808      	cmp	r0, #8
 8020c38:	5465      	strb	r5, [r4, r1]
 8020c3a:	d1f9      	bne.n	8020c30 <pta_init_context+0x18>
 8020c3c:	bdb0      	pop	{r4, r5, r7, pc}

08020c3e <pta_recover_from_deep_sleep>:
 8020c3e:	f248 2008 	movw	r0, #33288	@ 0x8208
 8020c42:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020c46:	7e40      	ldrb	r0, [r0, #25]
 8020c48:	2801      	cmp	r0, #1
 8020c4a:	bf0c      	ite	eq
 8020c4c:	2001      	moveq	r0, #1
 8020c4e:	4770      	bxne	lr
 8020c50:	f7ff bc1d 	b.w	802048e <llhwc_cmn_pta_set_enable>

08020c54 <pta_remove_pta_params>:
 8020c54:	b5b0      	push	{r4, r5, r7, lr}
 8020c56:	f248 2508 	movw	r5, #33288	@ 0x8208
 8020c5a:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8020c5e:	7e69      	ldrb	r1, [r5, #25]
 8020c60:	b339      	cbz	r1, 8020cb2 <pta_remove_pta_params+0x5e>
 8020c62:	2101      	movs	r1, #1
 8020c64:	4604      	mov	r4, r0
 8020c66:	2800      	cmp	r0, #0
 8020c68:	bf18      	it	ne
 8020c6a:	2001      	movne	r0, #1
 8020c6c:	f7fa fe57 	bl	801b91e <bsp_assert>
 8020c70:	f04f 3155 	mov.w	r1, #1431655765	@ 0x55555555
 8020c74:	fb05 f201 	mul.w	r2, r5, r1
 8020c78:	43e8      	mvns	r0, r5
 8020c7a:	fb04 2111 	mls	r1, r4, r1, r2
 8020c7e:	f64a 22ab 	movw	r2, #43691	@ 0xaaab
 8020c82:	4420      	add	r0, r4
 8020c84:	f6ca 22aa 	movt	r2, #43690	@ 0xaaaa
 8020c88:	fb00 f002 	mul.w	r0, r0, r2
 8020c8c:	f101 3155 	add.w	r1, r1, #1431655765	@ 0x55555555
 8020c90:	2200      	movs	r2, #0
 8020c92:	bf00      	nop
 8020c94:	4291      	cmp	r1, r2
 8020c96:	d008      	beq.n	8020caa <pta_remove_pta_params+0x56>
 8020c98:	3201      	adds	r2, #1
 8020c9a:	2a08      	cmp	r2, #8
 8020c9c:	d1fa      	bne.n	8020c94 <pta_remove_pta_params+0x40>
 8020c9e:	2000      	movs	r0, #0
 8020ca0:	2101      	movs	r1, #1
 8020ca2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8020ca6:	f7fa be3a 	b.w	801b91e <bsp_assert>
 8020caa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020cae:	2100      	movs	r1, #0
 8020cb0:	5429      	strb	r1, [r5, r0]
 8020cb2:	bdb0      	pop	{r4, r5, r7, pc}

08020cb4 <sys_shared_init>:
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	f248 2028 	movw	r0, #33320	@ 0x8228
 8020cba:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020cbe:	7801      	ldrb	r1, [r0, #0]
 8020cc0:	b101      	cbz	r1, 8020cc4 <sys_shared_init+0x10>
 8020cc2:	bd80      	pop	{r7, pc}
 8020cc4:	2101      	movs	r1, #1
 8020cc6:	7001      	strb	r1, [r0, #0]
 8020cc8:	f7fa fe14 	bl	801b8f4 <bsp_init>
 8020ccc:	f7ff fcdf 	bl	802068e <ll_mem_init>
 8020cd0:	f7fc fcd0 	bl	801d674 <emngr_init>
 8020cd4:	f7ff feb5 	bl	8020a42 <os_wrapper_init>
 8020cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020cdc:	f7fd be1a 	b.w	801e914 <llhwc_cmn_init>

08020ce0 <ll_intf_cmn_config_ll_ctx_params>:
 8020ce0:	f7ff bb89 	b.w	80203f6 <llhwc_cmn_sys_configure_ll_ctx>

08020ce4 <ll_intf_cmn_le_select_slp_clk_src>:
 8020ce4:	f7ff b9fe 	b.w	80200e4 <llhwc_cmn_le_select_slp_clk_src>

08020ce8 <ll_intf_cmn_select_tx_power_table>:
 8020ce8:	f7ef bdb3 	b.w	8010852 <ll_intf_select_tx_power_table>

08020cec <ll_intf_cmn_set_temperature_sensor_state>:
 8020cec:	f7ff bbe1 	b.w	80204b2 <llhwc_cmn_set_temperature_sensor_state>

08020cf0 <ll_intf_cmn_set_temperature_value>:
 8020cf0:	b580      	push	{r7, lr}
 8020cf2:	b280      	uxth	r0, r0
 8020cf4:	f7ff fbf7 	bl	80204e6 <llhwc_cmn_set_temperature_value>
 8020cf8:	bd80      	pop	{r7, pc}

08020cfa <ll_intf_cmn_le_set_dp_slp_mode>:
 8020cfa:	f7ef bda4 	b.w	8010846 <ll_intf_le_set_dp_slp_mode>

08020cfe <ble_mem_init>:
 8020cfe:	b5b0      	push	{r4, r5, r7, lr}
 8020d00:	b082      	sub	sp, #8
 8020d02:	2004      	movs	r0, #4
 8020d04:	9000      	str	r0, [sp, #0]
 8020d06:	f248 202c 	movw	r0, #33324	@ 0x822c
 8020d0a:	f248 2134 	movw	r1, #33332	@ 0x8234
 8020d0e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d12:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020d16:	2230      	movs	r2, #48	@ 0x30
 8020d18:	2305      	movs	r3, #5
 8020d1a:	2405      	movs	r4, #5
 8020d1c:	f7ff fcfc 	bl	8020718 <mem_pool_init>
 8020d20:	f248 3038 	movw	r0, #33592	@ 0x8338
 8020d24:	f248 3140 	movw	r1, #33600	@ 0x8340
 8020d28:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d2c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020d30:	22a0      	movs	r2, #160	@ 0xa0
 8020d32:	230b      	movs	r3, #11
 8020d34:	9400      	str	r4, [sp, #0]
 8020d36:	f7ff fcef 	bl	8020718 <mem_pool_init>
 8020d3a:	2006      	movs	r0, #6
 8020d3c:	9000      	str	r0, [sp, #0]
 8020d3e:	f648 204c 	movw	r0, #35404	@ 0x8a4c
 8020d42:	f648 2154 	movw	r1, #35412	@ 0x8a54
 8020d46:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d4a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020d4e:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8020d52:	2308      	movs	r3, #8
 8020d54:	2508      	movs	r5, #8
 8020d56:	f7ff fcdf 	bl	8020718 <mem_pool_init>
 8020d5a:	f249 5014 	movw	r0, #38164	@ 0x9514
 8020d5e:	f249 511c 	movw	r1, #38172	@ 0x951c
 8020d62:	2407      	movs	r4, #7
 8020d64:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d68:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020d6c:	2210      	movs	r2, #16
 8020d6e:	237b      	movs	r3, #123	@ 0x7b
 8020d70:	9400      	str	r4, [sp, #0]
 8020d72:	f7ff fcd1 	bl	8020718 <mem_pool_init>
 8020d76:	f649 60b8 	movw	r0, #40632	@ 0x9eb8
 8020d7a:	f649 61c0 	movw	r1, #40640	@ 0x9ec0
 8020d7e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020d82:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020d86:	2218      	movs	r2, #24
 8020d88:	2302      	movs	r3, #2
 8020d8a:	9500      	str	r5, [sp, #0]
 8020d8c:	f7ff fcc4 	bl	8020718 <mem_pool_init>
 8020d90:	b002      	add	sp, #8
 8020d92:	bdb0      	pop	{r4, r5, r7, pc}

08020d94 <ble_mem_shared_reset>:
 8020d94:	b570      	push	{r4, r5, r6, lr}
 8020d96:	b082      	sub	sp, #8
 8020d98:	f248 24a8 	movw	r4, #33448	@ 0x82a8
 8020d9c:	f649 60f8 	movw	r0, #40696	@ 0x9ef8
 8020da0:	f6c4 0402 	movt	r4, #18434	@ 0x4802
 8020da4:	f04f 0c09 	mov.w	ip, #9
 8020da8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020dac:	4621      	mov	r1, r4
 8020dae:	f240 1285 	movw	r2, #389	@ 0x185
 8020db2:	2308      	movs	r3, #8
 8020db4:	f8cd c000 	str.w	ip, [sp]
 8020db8:	f7ff fcae 	bl	8020718 <mem_pool_init>
 8020dbc:	200a      	movs	r0, #10
 8020dbe:	9000      	str	r0, [sp, #0]
 8020dc0:	f649 7000 	movw	r0, #40704	@ 0x9f00
 8020dc4:	f504 6146 	add.w	r1, r4, #3168	@ 0xc60
 8020dc8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020dcc:	2230      	movs	r2, #48	@ 0x30
 8020dce:	230c      	movs	r3, #12
 8020dd0:	260c      	movs	r6, #12
 8020dd2:	f7ff fca1 	bl	8020718 <mem_pool_init>
 8020dd6:	f504 646d 	add.w	r4, r4, #3792	@ 0xed0
 8020dda:	f649 7008 	movw	r0, #40712	@ 0x9f08
 8020dde:	250b      	movs	r5, #11
 8020de0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020de4:	4621      	mov	r1, r4
 8020de6:	2200      	movs	r2, #0
 8020de8:	2300      	movs	r3, #0
 8020dea:	9500      	str	r5, [sp, #0]
 8020dec:	f7ff fc94 	bl	8020718 <mem_pool_init>
 8020df0:	f649 7010 	movw	r0, #40720	@ 0x9f10
 8020df4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020df8:	4621      	mov	r1, r4
 8020dfa:	f44f 7295 	mov.w	r2, #298	@ 0x12a
 8020dfe:	2327      	movs	r3, #39	@ 0x27
 8020e00:	9600      	str	r6, [sp, #0]
 8020e02:	f7ff fc89 	bl	8020718 <mem_pool_init>
 8020e06:	b002      	add	sp, #8
 8020e08:	bd70      	pop	{r4, r5, r6, pc}

08020e0a <conn_mngr_sprvsn_timer_set>:
 8020e0a:	b510      	push	{r4, lr}
 8020e0c:	b082      	sub	sp, #8
 8020e0e:	2101      	movs	r1, #1
 8020e10:	4604      	mov	r4, r0
 8020e12:	2800      	cmp	r0, #0
 8020e14:	bf18      	it	ne
 8020e16:	2001      	movne	r0, #1
 8020e18:	f7fa fd81 	bl	801b91e <bsp_assert>
 8020e1c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8020e20:	2101      	movs	r1, #1
 8020e22:	2800      	cmp	r0, #0
 8020e24:	bf18      	it	ne
 8020e26:	2001      	movne	r0, #1
 8020e28:	f7fa fd79 	bl	801b91e <bsp_assert>
 8020e2c:	f10d 0007 	add.w	r0, sp, #7
 8020e30:	f001 fd23 	bl	802287a <db_get_slp_clk_accuracy>
 8020e34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8020e38:	f7ed ff3d 	bl	800ecb6 <get_sca_ppm>
 8020e3c:	8b61      	ldrh	r1, [r4, #26]
 8020e3e:	f248 521f 	movw	r2, #34079	@ 0x851f
 8020e42:	fb01 f000 	mul.w	r0, r1, r0
 8020e46:	f2c5 12eb 	movt	r2, #20971	@ 0x51eb
 8020e4a:	fba0 0202 	umull	r0, r2, r0, r2
 8020e4e:	f06f 0303 	mvn.w	r3, #3
 8020e52:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 8020e56:	f644 53d3 	movw	r3, #19923	@ 0x4dd3
 8020e5a:	f2c1 0362 	movt	r3, #4194	@ 0x1062
 8020e5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	08da      	lsrs	r2, r3, #3
 8020e68:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8020e6c:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8020e70:	f7fd f9b4 	bl	801e1dc <os_timer_set>
 8020e74:	b002      	add	sp, #8
 8020e76:	bd10      	pop	{r4, pc}

08020e78 <conn_mngr_update_ststic>:
 8020e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e7c:	b082      	sub	sp, #8
 8020e7e:	460d      	mov	r5, r1
 8020e80:	2101      	movs	r1, #1
 8020e82:	4604      	mov	r4, r0
 8020e84:	2800      	cmp	r0, #0
 8020e86:	bf18      	it	ne
 8020e88:	2001      	movne	r0, #1
 8020e8a:	f7fa fd48 	bl	801b91e <bsp_assert>
 8020e8e:	4628      	mov	r0, r5
 8020e90:	2101      	movs	r1, #1
 8020e92:	2d00      	cmp	r5, #0
 8020e94:	bf18      	it	ne
 8020e96:	2001      	movne	r0, #1
 8020e98:	f7fa fd41 	bl	801b91e <bsp_assert>
 8020e9c:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 8020ea0:	2800      	cmp	r0, #0
 8020ea2:	f040 8099 	bne.w	8020fd8 <conn_mngr_update_ststic+0x160>
 8020ea6:	f894 012b 	ldrb.w	r0, [r4, #299]	@ 0x12b
 8020eaa:	3013      	adds	r0, #19
 8020eac:	b2c0      	uxtb	r0, r0
 8020eae:	28c3      	cmp	r0, #195	@ 0xc3
 8020eb0:	f0c0 8092 	bcc.w	8020fd8 <conn_mngr_update_ststic+0x160>
 8020eb4:	f895 002c 	ldrb.w	r0, [r5, #44]	@ 0x2c
 8020eb8:	0780      	lsls	r0, r0, #30
 8020eba:	f140 808d 	bpl.w	8020fd8 <conn_mngr_update_ststic+0x160>
 8020ebe:	f240 5822 	movw	r8, #1314	@ 0x522
 8020ec2:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8020ec6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8020eca:	3001      	adds	r0, #1
 8020ecc:	b281      	uxth	r1, r0
 8020ece:	f8a8 0004 	strh.w	r0, [r8, #4]
 8020ed2:	0949      	lsrs	r1, r1, #5
 8020ed4:	297c      	cmp	r1, #124	@ 0x7c
 8020ed6:	d855      	bhi.n	8020f84 <conn_mngr_update_ststic+0x10c>
 8020ed8:	f898 0000 	ldrb.w	r0, [r8]
 8020edc:	2823      	cmp	r0, #35	@ 0x23
 8020ede:	d251      	bcs.n	8020f84 <conn_mngr_update_ststic+0x10c>
 8020ee0:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
 8020ee4:	eb08 01d2 	add.w	r1, r8, r2, lsr #3
 8020ee8:	f002 0307 	and.w	r3, r2, #7
 8020eec:	7989      	ldrb	r1, [r1, #6]
 8020eee:	40d9      	lsrs	r1, r3
 8020ef0:	07c9      	lsls	r1, r1, #31
 8020ef2:	f649 7140 	movw	r1, #40768	@ 0x9f40
 8020ef6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8020efa:	d00b      	beq.n	8020f14 <conn_mngr_update_ststic+0x9c>
 8020efc:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8020f00:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8020f04:	f8b5 404a 	ldrh.w	r4, [r5, #74]	@ 0x4a
 8020f08:	3301      	adds	r3, #1
 8020f0a:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
 8020f0e:	1c62      	adds	r2, r4, #1
 8020f10:	f8a5 204a 	strh.w	r2, [r5, #74]	@ 0x4a
 8020f14:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 8020f18:	3201      	adds	r2, #1
 8020f1a:	b293      	uxth	r3, r2
 8020f1c:	f8a8 2002 	strh.w	r2, [r8, #2]
 8020f20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8020f24:	d358      	bcc.n	8020fd8 <conn_mngr_update_ststic+0x160>
 8020f26:	2200      	movs	r2, #0
 8020f28:	2300      	movs	r3, #0
 8020f2a:	2400      	movs	r4, #0
 8020f2c:	2b04      	cmp	r3, #4
 8020f2e:	bf98      	it	ls
 8020f30:	2822      	cmpls	r0, #34	@ 0x22
 8020f32:	d819      	bhi.n	8020f68 <conn_mngr_update_ststic+0xf0>
 8020f34:	eb01 0542 	add.w	r5, r1, r2, lsl #1
 8020f38:	f831 6012 	ldrh.w	r6, [r1, r2, lsl #1]
 8020f3c:	f8b5 504a 	ldrh.w	r5, [r5, #74]	@ 0x4a
 8020f40:	ebb5 0f56 	cmp.w	r5, r6, lsr #1
 8020f44:	d90d      	bls.n	8020f62 <conn_mngr_update_ststic+0xea>
 8020f46:	eb08 05d2 	add.w	r5, r8, r2, lsr #3
 8020f4a:	f002 0607 	and.w	r6, r2, #7
 8020f4e:	2401      	movs	r4, #1
 8020f50:	79af      	ldrb	r7, [r5, #6]
 8020f52:	fa04 f606 	lsl.w	r6, r4, r6
 8020f56:	3001      	adds	r0, #1
 8020f58:	3301      	adds	r3, #1
 8020f5a:	43b7      	bics	r7, r6
 8020f5c:	f888 0000 	strb.w	r0, [r8]
 8020f60:	71af      	strb	r7, [r5, #6]
 8020f62:	3201      	adds	r2, #1
 8020f64:	2a25      	cmp	r2, #37	@ 0x25
 8020f66:	d1e1      	bne.n	8020f2c <conn_mngr_update_ststic+0xb4>
 8020f68:	f649 7040 	movw	r0, #40768	@ 0x9f40
 8020f6c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020f70:	2100      	movs	r1, #0
 8020f72:	2294      	movs	r2, #148	@ 0x94
 8020f74:	2500      	movs	r5, #0
 8020f76:	f7ff fcb5 	bl	80208e4 <ble_memset>
 8020f7a:	2c01      	cmp	r4, #1
 8020f7c:	f8a8 5002 	strh.w	r5, [r8, #2]
 8020f80:	d026      	beq.n	8020fd0 <conn_mngr_update_ststic+0x158>
 8020f82:	e029      	b.n	8020fd8 <conn_mngr_update_ststic+0x160>
 8020f84:	f10d 0503 	add.w	r5, sp, #3
 8020f88:	4628      	mov	r0, r5
 8020f8a:	f001 fbdd 	bl	8022748 <db_get_local_chnl_classification>
 8020f8e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8020f92:	2100      	movs	r1, #0
 8020f94:	5c6a      	ldrb	r2, [r5, r1]
 8020f96:	5c43      	ldrb	r3, [r0, r1]
 8020f98:	429a      	cmp	r2, r3
 8020f9a:	d103      	bne.n	8020fa4 <conn_mngr_update_ststic+0x12c>
 8020f9c:	3101      	adds	r1, #1
 8020f9e:	2905      	cmp	r1, #5
 8020fa0:	d1f8      	bne.n	8020f94 <conn_mngr_update_ststic+0x11c>
 8020fa2:	e019      	b.n	8020fd8 <conn_mngr_update_ststic+0x160>
 8020fa4:	f108 0006 	add.w	r0, r8, #6
 8020fa8:	f10d 0103 	add.w	r1, sp, #3
 8020fac:	2205      	movs	r2, #5
 8020fae:	f7ff fc49 	bl	8020844 <ble_memcpy>
 8020fb2:	f649 7040 	movw	r0, #40768	@ 0x9f40
 8020fb6:	2400      	movs	r4, #0
 8020fb8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8020fbc:	2100      	movs	r1, #0
 8020fbe:	2294      	movs	r2, #148	@ 0x94
 8020fc0:	f888 4000 	strb.w	r4, [r8]
 8020fc4:	f8a8 4004 	strh.w	r4, [r8, #4]
 8020fc8:	f7ff fc8c 	bl	80208e4 <ble_memset>
 8020fcc:	f8a8 4002 	strh.w	r4, [r8, #2]
 8020fd0:	f108 0006 	add.w	r0, r8, #6
 8020fd4:	f7f0 ff5e 	bl	8011e94 <llcp_update_chnl_map>
 8020fd8:	2000      	movs	r0, #0
 8020fda:	b002      	add	sp, #8
 8020fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08020fe0 <conn_mngr_check_conn_id>:
 8020fe0:	2800      	cmp	r0, #0
 8020fe2:	bf0f      	iteee	eq
 8020fe4:	2000      	moveq	r0, #0
 8020fe6:	6800      	ldrne	r0, [r0, #0]
 8020fe8:	1a40      	subne	r0, r0, r1
 8020fea:	fab0 f080 	clzne	r0, r0
 8020fee:	bf18      	it	ne
 8020ff0:	0940      	lsrne	r0, r0, #5
 8020ff2:	4770      	bx	lr

08020ff4 <conn_mngr_init>:
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	f241 021d 	movw	r2, #4125	@ 0x101d
 8020ffa:	2002      	movs	r0, #2
 8020ffc:	f6c0 0202 	movt	r2, #2050	@ 0x802
 8021000:	2108      	movs	r1, #8
 8021002:	f7fc fb5f 	bl	801d6c4 <emngr_handle_init>
 8021006:	f241 32bf 	movw	r2, #5055	@ 0x13bf
 802100a:	2003      	movs	r0, #3
 802100c:	f6c0 0202 	movt	r2, #2050	@ 0x802
 8021010:	2101      	movs	r1, #1
 8021012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021016:	f7fc bb55 	b.w	801d6c4 <emngr_handle_init>
	...

0802101c <conn_mngr_process_evnt_clbk>:
 802101c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802101e:	b089      	sub	sp, #36	@ 0x24
 8021020:	4605      	mov	r5, r0
 8021022:	6804      	ldr	r4, [r0, #0]
 8021024:	208d      	movs	r0, #141	@ 0x8d
 8021026:	f7fa fcc1 	bl	801b9ac <bsp_debug_gpio_set>
 802102a:	7928      	ldrb	r0, [r5, #4]
 802102c:	280d      	cmp	r0, #13
 802102e:	f200 81bf 	bhi.w	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 8021032:	e8df f010 	tbh	[pc, r0, lsl #1]
 8021036:	0011      	.short	0x0011
 8021038:	001b000e 	.word	0x001b000e
 802103c:	00450037 	.word	0x00450037
 8021040:	00690058 	.word	0x00690058
 8021044:	00d5000e 	.word	0x00d5000e
 8021048:	00920079 	.word	0x00920079
 802104c:	00b601bd 	.word	0x00b601bd
 8021050:	00cf      	.short	0x00cf
 8021052:	4620      	mov	r0, r4
 8021054:	2122      	movs	r1, #34	@ 0x22
 8021056:	e0cd      	b.n	80211f4 <conn_mngr_process_evnt_clbk+0x1d8>
 8021058:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 802105c:	f7ee fae1 	bl	800f622 <evnt_util_is_connect_setup>
 8021060:	2108      	movs	r1, #8
 8021062:	2800      	cmp	r0, #0
 8021064:	bf08      	it	eq
 8021066:	213e      	moveq	r1, #62	@ 0x3e
 8021068:	4620      	mov	r0, r4
 802106a:	e0c3      	b.n	80211f4 <conn_mngr_process_evnt_clbk+0x1d8>
 802106c:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 8021070:	f7fd f89e 	bl	801e1b0 <os_timer_stop_free>
 8021074:	f894 012a 	ldrb.w	r0, [r4, #298]	@ 0x12a
 8021078:	2828      	cmp	r0, #40	@ 0x28
 802107a:	d01c      	beq.n	80210b6 <conn_mngr_process_evnt_clbk+0x9a>
 802107c:	8ae0      	ldrh	r0, [r4, #22]
 802107e:	f8b4 108e 	ldrh.w	r1, [r4, #142]	@ 0x8e
 8021082:	4288      	cmp	r0, r1
 8021084:	f040 812d 	bne.w	80212e2 <conn_mngr_process_evnt_clbk+0x2c6>
 8021088:	8b20      	ldrh	r0, [r4, #24]
 802108a:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 802108e:	4290      	cmp	r0, r2
 8021090:	f040 812e 	bne.w	80212f0 <conn_mngr_process_evnt_clbk+0x2d4>
 8021094:	8b61      	ldrh	r1, [r4, #26]
 8021096:	f8b4 2082 	ldrh.w	r2, [r4, #130]	@ 0x82
 802109a:	4291      	cmp	r1, r2
 802109c:	f040 8127 	bne.w	80212ee <conn_mngr_process_evnt_clbk+0x2d2>
 80210a0:	2601      	movs	r6, #1
 80210a2:	e129      	b.n	80212f8 <conn_mngr_process_evnt_clbk+0x2dc>
 80210a4:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 80210a8:	f7fd f882 	bl	801e1b0 <os_timer_stop_free>
 80210ac:	f894 012a 	ldrb.w	r0, [r4, #298]	@ 0x12a
 80210b0:	2828      	cmp	r0, #40	@ 0x28
 80210b2:	f040 80a2 	bne.w	80211fa <conn_mngr_process_evnt_clbk+0x1de>
 80210b6:	4620      	mov	r0, r4
 80210b8:	2128      	movs	r1, #40	@ 0x28
 80210ba:	f000 fe03 	bl	8021cc4 <conn_mngr_disconnect>
 80210be:	e175      	b.n	80213ac <conn_mngr_process_evnt_clbk+0x390>
 80210c0:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80210c4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80210c8:	6800      	ldr	r0, [r0, #0]
 80210ca:	6906      	ldr	r6, [r0, #16]
 80210cc:	b1c6      	cbz	r6, 8021100 <conn_mngr_process_evnt_clbk+0xe4>
 80210ce:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80210d2:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80210d6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 80210da:	f8b4 7042 	ldrh.w	r7, [r4, #66]	@ 0x42
 80210de:	2000      	movs	r0, #0
 80210e0:	9700      	str	r7, [sp, #0]
 80210e2:	47b0      	blx	r6
 80210e4:	e00c      	b.n	8021100 <conn_mngr_process_evnt_clbk+0xe4>
 80210e6:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80210ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80210ee:	6800      	ldr	r0, [r0, #0]
 80210f0:	6943      	ldr	r3, [r0, #20]
 80210f2:	b12b      	cbz	r3, 8021100 <conn_mngr_process_evnt_clbk+0xe4>
 80210f4:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80210f8:	f104 0246 	add.w	r2, r4, #70	@ 0x46
 80210fc:	2000      	movs	r0, #0
 80210fe:	4798      	blx	r3
 8021100:	2000      	movs	r0, #0
 8021102:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 8021106:	e153      	b.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 8021108:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 802110c:	f7fc ffd2 	bl	801e0b4 <os_timer_stop>
 8021110:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8021114:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021118:	6800      	ldr	r0, [r0, #0]
 802111a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 802111c:	2900      	cmp	r1, #0
 802111e:	f000 8147 	beq.w	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 8021122:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8021126:	e053      	b.n	80211d0 <conn_mngr_process_evnt_clbk+0x1b4>
 8021128:	f646 5048 	movw	r0, #27976	@ 0x6d48
 802112c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021130:	6800      	ldr	r0, [r0, #0]
 8021132:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8021134:	b16e      	cbz	r6, 8021152 <conn_mngr_process_evnt_clbk+0x136>
 8021136:	f894 212e 	ldrb.w	r2, [r4, #302]	@ 0x12e
 802113a:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 802113e:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8021142:	2a04      	cmp	r2, #4
 8021144:	bf08      	it	eq
 8021146:	2203      	moveq	r2, #3
 8021148:	2000      	movs	r0, #0
 802114a:	2b04      	cmp	r3, #4
 802114c:	bf08      	it	eq
 802114e:	2303      	moveq	r3, #3
 8021150:	47b0      	blx	r6
 8021152:	2000      	movs	r0, #0
 8021154:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
 8021158:	e12a      	b.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 802115a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 802115e:	f7fc ffa9 	bl	801e0b4 <os_timer_stop>
 8021162:	8ae0      	ldrh	r0, [r4, #22]
 8021164:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	@ 0xd8
 8021168:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802116c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8021170:	0880      	lsrs	r0, r0, #2
 8021172:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021176:	0040      	lsls	r0, r0, #1
 8021178:	eba0 0241 	sub.w	r2, r0, r1, lsl #1
 802117c:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
 8021180:	bf88      	it	hi
 8021182:	f06f 0204 	mvnhi.w	r2, #4
 8021186:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 802118a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 802118e:	0149      	lsls	r1, r1, #5
 8021190:	f7fc fed3 	bl	801df3a <os_timer_start>
 8021194:	2006      	movs	r0, #6
 8021196:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 802119a:	4620      	mov	r0, r4
 802119c:	f7f0 f86a 	bl	8011274 <llcp_ping_req>
 80211a0:	e106      	b.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80211a2:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80211a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80211aa:	6805      	ldr	r5, [r0, #0]
 80211ac:	68e8      	ldr	r0, [r5, #12]
 80211ae:	2800      	cmp	r0, #0
 80211b0:	f000 80fe 	beq.w	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80211b4:	ac02      	add	r4, sp, #8
 80211b6:	1d20      	adds	r0, r4, #4
 80211b8:	2118      	movs	r1, #24
 80211ba:	f00a fbd1 	bl	802b960 <__aeabi_memclr>
 80211be:	2002      	movs	r0, #2
 80211c0:	9002      	str	r0, [sp, #8]
 80211c2:	20ff      	movs	r0, #255	@ 0xff
 80211c4:	f8ad 001a 	strh.w	r0, [sp, #26]
 80211c8:	2000      	movs	r0, #0
 80211ca:	68e9      	ldr	r1, [r5, #12]
 80211cc:	9004      	str	r0, [sp, #16]
 80211ce:	4620      	mov	r0, r4
 80211d0:	4788      	blx	r1
 80211d2:	e0ed      	b.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80211d4:	2016      	movs	r0, #22
 80211d6:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
 80211da:	4620      	mov	r0, r4
 80211dc:	2116      	movs	r1, #22
 80211de:	e009      	b.n	80211f4 <conn_mngr_process_evnt_clbk+0x1d8>
 80211e0:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 80211e4:	f7fc ffe4 	bl	801e1b0 <os_timer_stop_free>
 80211e8:	f894 012a 	ldrb.w	r0, [r4, #298]	@ 0x12a
 80211ec:	2828      	cmp	r0, #40	@ 0x28
 80211ee:	d114      	bne.n	802121a <conn_mngr_process_evnt_clbk+0x1fe>
 80211f0:	4620      	mov	r0, r4
 80211f2:	2128      	movs	r1, #40	@ 0x28
 80211f4:	f000 fd66 	bl	8021cc4 <conn_mngr_disconnect>
 80211f8:	e0da      	b.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80211fa:	4620      	mov	r0, r4
 80211fc:	f7ff fe05 	bl	8020e0a <conn_mngr_sprvsn_timer_set>
 8021200:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8021204:	f04f 31ff 	mov.w	r1, #4294967295
 8021208:	2800      	cmp	r0, #0
 802120a:	f04f 0000 	mov.w	r0, #0
 802120e:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 8021212:	d069      	beq.n	80212e8 <conn_mngr_process_evnt_clbk+0x2cc>
 8021214:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8021218:	e0c8      	b.n	80213ac <conn_mngr_process_evnt_clbk+0x390>
 802121a:	4620      	mov	r0, r4
 802121c:	f7ff fdf5 	bl	8020e0a <conn_mngr_sprvsn_timer_set>
 8021220:	f894 0074 	ldrb.w	r0, [r4, #116]	@ 0x74
 8021224:	f04f 31ff 	mov.w	r1, #4294967295
 8021228:	2804      	cmp	r0, #4
 802122a:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 802122e:	d00c      	beq.n	802124a <conn_mngr_process_evnt_clbk+0x22e>
 8021230:	f894 1075 	ldrb.w	r1, [r4, #117]	@ 0x75
 8021234:	2904      	cmp	r1, #4
 8021236:	d008      	beq.n	802124a <conn_mngr_process_evnt_clbk+0x22e>
 8021238:	f894 112e 	ldrb.w	r1, [r4, #302]	@ 0x12e
 802123c:	2904      	cmp	r1, #4
 802123e:	d004      	beq.n	802124a <conn_mngr_process_evnt_clbk+0x22e>
 8021240:	f894 112f 	ldrb.w	r1, [r4, #303]	@ 0x12f
 8021244:	2904      	cmp	r1, #4
 8021246:	f040 80b8 	bne.w	80213ba <conn_mngr_process_evnt_clbk+0x39e>
 802124a:	2504      	movs	r5, #4
 802124c:	b108      	cbz	r0, 8021252 <conn_mngr_process_evnt_clbk+0x236>
 802124e:	f884 012e 	strb.w	r0, [r4, #302]	@ 0x12e
 8021252:	f894 0075 	ldrb.w	r0, [r4, #117]	@ 0x75
 8021256:	2600      	movs	r6, #0
 8021258:	2800      	cmp	r0, #0
 802125a:	bf14      	ite	ne
 802125c:	f884 012f 	strbne.w	r0, [r4, #303]	@ 0x12f
 8021260:	f894 012f 	ldrbeq.w	r0, [r4, #303]	@ 0x12f
 8021264:	f894 112e 	ldrb.w	r1, [r4, #302]	@ 0x12e
 8021268:	22b0      	movs	r2, #176	@ 0xb0
 802126a:	f884 6136 	strb.w	r6, [r4, #310]	@ 0x136
 802126e:	2904      	cmp	r1, #4
 8021270:	bf08      	it	eq
 8021272:	22b2      	moveq	r2, #178	@ 0xb2
 8021274:	5aa1      	ldrh	r1, [r4, r2]
 8021276:	22b4      	movs	r2, #180	@ 0xb4
 8021278:	2804      	cmp	r0, #4
 802127a:	bf08      	it	eq
 802127c:	22b6      	moveq	r2, #182	@ 0xb6
 802127e:	5aa2      	ldrh	r2, [r4, r2]
 8021280:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8021284:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8021288:	4411      	add	r1, r2
 802128a:	f8a4 20aa 	strh.w	r2, [r4, #170]	@ 0xaa
 802128e:	f7ed fa4f 	bl	800e730 <evnt_schdlr_updt_conn_evnt_durn>
 8021292:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8021296:	f884 513a 	strb.w	r5, [r4, #314]	@ 0x13a
 802129a:	280c      	cmp	r0, #12
 802129c:	bf08      	it	eq
 802129e:	f884 6123 	strbeq.w	r6, [r4, #291]	@ 0x123
 80212a2:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 80212a6:	2100      	movs	r1, #0
 80212a8:	280c      	cmp	r0, #12
 80212aa:	bf04      	itt	eq
 80212ac:	2000      	moveq	r0, #0
 80212ae:	f884 0124 	strbeq.w	r0, [r4, #292]	@ 0x124
 80212b2:	f894 0139 	ldrb.w	r0, [r4, #313]	@ 0x139
 80212b6:	f884 1078 	strb.w	r1, [r4, #120]	@ 0x78
 80212ba:	2801      	cmp	r0, #1
 80212bc:	d178      	bne.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80212be:	f894 012f 	ldrb.w	r0, [r4, #303]	@ 0x12f
 80212c2:	f894 1137 	ldrb.w	r1, [r4, #311]	@ 0x137
 80212c6:	4201      	tst	r1, r0
 80212c8:	d072      	beq.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80212ca:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80212ce:	f000 fc85 	bl	8021bdc <conn_mngr_calc_num_of_used_data_chnls>
 80212d2:	f894 1138 	ldrb.w	r1, [r4, #312]	@ 0x138
 80212d6:	4288      	cmp	r0, r1
 80212d8:	d26a      	bcs.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80212da:	4620      	mov	r0, r4
 80212dc:	f7f0 fd90 	bl	8011e00 <llcp_update_chnl_map_per_connection>
 80212e0:	e066      	b.n	80213b0 <conn_mngr_process_evnt_clbk+0x394>
 80212e2:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 80212e6:	e003      	b.n	80212f0 <conn_mngr_process_evnt_clbk+0x2d4>
 80212e8:	f884 0123 	strb.w	r0, [r4, #291]	@ 0x123
 80212ec:	e05e      	b.n	80213ac <conn_mngr_process_evnt_clbk+0x390>
 80212ee:	4602      	mov	r2, r0
 80212f0:	f8b4 1082 	ldrh.w	r1, [r4, #130]	@ 0x82
 80212f4:	2600      	movs	r6, #0
 80212f6:	4610      	mov	r0, r2
 80212f8:	8320      	strh	r0, [r4, #24]
 80212fa:	f04f 30ff 	mov.w	r0, #4294967295
 80212fe:	f8a4 00dc 	strh.w	r0, [r4, #220]	@ 0xdc
 8021302:	f894 0090 	ldrb.w	r0, [r4, #144]	@ 0x90
 8021306:	8361      	strh	r1, [r4, #26]
 8021308:	f8b4 1088 	ldrh.w	r1, [r4, #136]	@ 0x88
 802130c:	f884 0020 	strb.w	r0, [r4, #32]
 8021310:	4620      	mov	r0, r4
 8021312:	8221      	strh	r1, [r4, #16]
 8021314:	f7ff fd79 	bl	8020e0a <conn_mngr_sprvsn_timer_set>
 8021318:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 802131c:	2105      	movs	r1, #5
 802131e:	f7fa fa85 	bl	801b82c <state_mngr_update_state>
 8021322:	b2c0      	uxtb	r0, r0
 8021324:	fab0 f080 	clz	r0, r0
 8021328:	0940      	lsrs	r0, r0, #5
 802132a:	2101      	movs	r1, #1
 802132c:	2701      	movs	r7, #1
 802132e:	f7fa faf6 	bl	801b91e <bsp_assert>
 8021332:	b90e      	cbnz	r6, 8021338 <conn_mngr_process_evnt_clbk+0x31c>
 8021334:	f884 713a 	strb.w	r7, [r4, #314]	@ 0x13a
 8021338:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	@ 0xb2
 802133c:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	@ 0xb8
 8021340:	4288      	cmp	r0, r1
 8021342:	d012      	beq.n	802136a <conn_mngr_process_evnt_clbk+0x34e>
 8021344:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8021348:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802134c:	6800      	ldr	r0, [r0, #0]
 802134e:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8021350:	b15e      	cbz	r6, 802136a <conn_mngr_process_evnt_clbk+0x34e>
 8021352:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 8021356:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	@ 0xac
 802135a:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 802135e:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8021362:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	@ 0xaa
 8021366:	9700      	str	r7, [sp, #0]
 8021368:	47b0      	blx	r6
 802136a:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 802136e:	280a      	cmp	r0, #10
 8021370:	d10b      	bne.n	802138a <conn_mngr_process_evnt_clbk+0x36e>
 8021372:	2000      	movs	r0, #0
 8021374:	f884 0124 	strb.w	r0, [r4, #292]	@ 0x124
 8021378:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 802137c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8021380:	2801      	cmp	r0, #1
 8021382:	f8a4 10b8 	strh.w	r1, [r4, #184]	@ 0xb8
 8021386:	d008      	beq.n	802139a <conn_mngr_process_evnt_clbk+0x37e>
 8021388:	e010      	b.n	80213ac <conn_mngr_process_evnt_clbk+0x390>
 802138a:	f894 1123 	ldrb.w	r1, [r4, #291]	@ 0x123
 802138e:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	@ 0xb2
 8021392:	2901      	cmp	r1, #1
 8021394:	f8a4 20b8 	strh.w	r2, [r4, #184]	@ 0xb8
 8021398:	d104      	bne.n	80213a4 <conn_mngr_process_evnt_clbk+0x388>
 802139a:	f204 1023 	addw	r0, r4, #291	@ 0x123
 802139e:	2100      	movs	r1, #0
 80213a0:	7001      	strb	r1, [r0, #0]
 80213a2:	e003      	b.n	80213ac <conn_mngr_process_evnt_clbk+0x390>
 80213a4:	2801      	cmp	r0, #1
 80213a6:	d101      	bne.n	80213ac <conn_mngr_process_evnt_clbk+0x390>
 80213a8:	2000      	movs	r0, #0
 80213aa:	e733      	b.n	8021214 <conn_mngr_process_evnt_clbk+0x1f8>
 80213ac:	200b      	movs	r0, #11
 80213ae:	7128      	strb	r0, [r5, #4]
 80213b0:	208d      	movs	r0, #141	@ 0x8d
 80213b2:	f7fa fafd 	bl	801b9b0 <bsp_debug_gpio_clear>
 80213b6:	b009      	add	sp, #36	@ 0x24
 80213b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213ba:	2503      	movs	r5, #3
 80213bc:	e746      	b.n	802124c <conn_mngr_process_evnt_clbk+0x230>

080213be <conn_mngr_updt_conn_param_evnt_clbk>:
 80213be:	b510      	push	{r4, lr}
 80213c0:	b084      	sub	sp, #16
 80213c2:	4604      	mov	r4, r0
 80213c4:	208e      	movs	r0, #142	@ 0x8e
 80213c6:	f7fa faf1 	bl	801b9ac <bsp_debug_gpio_set>
 80213ca:	8ae0      	ldrh	r0, [r4, #22]
 80213cc:	f8ad 0000 	strh.w	r0, [sp]
 80213d0:	f8ad 0002 	strh.w	r0, [sp, #2]
 80213d4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80213d8:	9001      	str	r0, [sp, #4]
 80213da:	2011      	movs	r0, #17
 80213dc:	f88d 000e 	strb.w	r0, [sp, #14]
 80213e0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80213e4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80213e8:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 80213ec:	9102      	str	r1, [sp, #8]
 80213ee:	4669      	mov	r1, sp
 80213f0:	f7f0 fb91 	bl	8011b16 <llcp_update_param_req>
 80213f4:	b128      	cbz	r0, 8021402 <conn_mngr_updt_conn_param_evnt_clbk+0x44>
 80213f6:	f646 6015 	movw	r0, #28181	@ 0x6e15
 80213fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80213fe:	2100      	movs	r1, #0
 8021400:	7001      	strb	r1, [r0, #0]
 8021402:	208e      	movs	r0, #142	@ 0x8e
 8021404:	f7fa fad4 	bl	801b9b0 <bsp_debug_gpio_clear>
 8021408:	b004      	add	sp, #16
 802140a:	bd10      	pop	{r4, pc}

0802140c <conn_mngr_reset>:
 802140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021410:	f649 783c 	movw	r8, #40764	@ 0x9f3c
 8021414:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 8021418:	f649 7040 	movw	r0, #40768	@ 0x9f40
 802141c:	f8d8 4000 	ldr.w	r4, [r8]
 8021420:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021424:	2100      	movs	r1, #0
 8021426:	2294      	movs	r2, #148	@ 0x94
 8021428:	2700      	movs	r7, #0
 802142a:	f7ff fa5b 	bl	80208e4 <ble_memset>
 802142e:	f240 5522 	movw	r5, #1314	@ 0x522
 8021432:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021436:	4628      	mov	r0, r5
 8021438:	2100      	movs	r1, #0
 802143a:	220c      	movs	r2, #12
 802143c:	f7ff fa52 	bl	80208e4 <ble_memset>
 8021440:	f24e 61bc 	movw	r1, #59068	@ 0xe6bc
 8021444:	1da8      	adds	r0, r5, #6
 8021446:	f6c0 0102 	movt	r1, #2050	@ 0x802
 802144a:	2205      	movs	r2, #5
 802144c:	f7ff f9fa 	bl	8020844 <ble_memcpy>
 8021450:	f649 7618 	movw	r6, #40728	@ 0x9f18
 8021454:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021458:	f856 5027 	ldr.w	r5, [r6, r7, lsl #2]
 802145c:	b155      	cbz	r5, 8021474 <conn_mngr_reset+0x68>
 802145e:	f8d5 00c0 	ldr.w	r0, [r5, #192]	@ 0xc0
 8021462:	b108      	cbz	r0, 8021468 <conn_mngr_reset+0x5c>
 8021464:	f7ed f814 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8021468:	4628      	mov	r0, r5
 802146a:	f000 f830 	bl	80214ce <conn_mngr_free_all_timers>
 802146e:	4628      	mov	r0, r5
 8021470:	f7fc fb24 	bl	801dabc <os_mem_pool_free>
 8021474:	3701      	adds	r7, #1
 8021476:	2f08      	cmp	r7, #8
 8021478:	d1ee      	bne.n	8021458 <conn_mngr_reset+0x4c>
 802147a:	2002      	movs	r0, #2
 802147c:	f7fc f92e 	bl	801d6dc <emngr_handle_remove>
 8021480:	f649 70d4 	movw	r0, #40916	@ 0x9fd4
 8021484:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021488:	2100      	movs	r1, #0
 802148a:	7001      	strb	r1, [r0, #0]
 802148c:	f649 7038 	movw	r0, #40760	@ 0x9f38
 8021490:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021494:	2100      	movs	r1, #0
 8021496:	2204      	movs	r2, #4
 8021498:	f7ff fa24 	bl	80208e4 <ble_memset>
 802149c:	f649 7018 	movw	r0, #40728	@ 0x9f18
 80214a0:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80214a4:	2100      	movs	r1, #0
 80214a6:	2220      	movs	r2, #32
 80214a8:	f7ff fa1c 	bl	80208e4 <ble_memset>
 80214ac:	b16c      	cbz	r4, 80214ca <conn_mngr_reset+0xbe>
 80214ae:	f8d8 0000 	ldr.w	r0, [r8]
 80214b2:	bf00      	nop
 80214b4:	6940      	ldr	r0, [r0, #20]
 80214b6:	f8c8 0000 	str.w	r0, [r8]
 80214ba:	4620      	mov	r0, r4
 80214bc:	f7fc fafe 	bl	801dabc <os_mem_pool_free>
 80214c0:	f8d8 0000 	ldr.w	r0, [r8]
 80214c4:	2800      	cmp	r0, #0
 80214c6:	4604      	mov	r4, r0
 80214c8:	d1f4      	bne.n	80214b4 <conn_mngr_reset+0xa8>
 80214ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080214ce <conn_mngr_free_all_timers>:
 80214ce:	b510      	push	{r4, lr}
 80214d0:	4604      	mov	r4, r0
 80214d2:	f850 1fc4 	ldr.w	r1, [r0, #196]!
 80214d6:	b109      	cbz	r1, 80214dc <conn_mngr_free_all_timers+0xe>
 80214d8:	f7fc fe6a 	bl	801e1b0 <os_timer_stop_free>
 80214dc:	4620      	mov	r0, r4
 80214de:	f850 1fc8 	ldr.w	r1, [r0, #200]!
 80214e2:	b109      	cbz	r1, 80214e8 <conn_mngr_free_all_timers+0x1a>
 80214e4:	f7fc fe64 	bl	801e1b0 <os_timer_stop_free>
 80214e8:	4620      	mov	r0, r4
 80214ea:	f850 1fd0 	ldr.w	r1, [r0, #208]!
 80214ee:	b109      	cbz	r1, 80214f4 <conn_mngr_free_all_timers+0x26>
 80214f0:	f7fc fe5e 	bl	801e1b0 <os_timer_stop_free>
 80214f4:	4620      	mov	r0, r4
 80214f6:	f850 1fcc 	ldr.w	r1, [r0, #204]!
 80214fa:	b109      	cbz	r1, 8021500 <conn_mngr_free_all_timers+0x32>
 80214fc:	f7fc fe58 	bl	801e1b0 <os_timer_stop_free>
 8021500:	f854 0fd4 	ldr.w	r0, [r4, #212]!
 8021504:	b120      	cbz	r0, 8021510 <conn_mngr_free_all_timers+0x42>
 8021506:	4620      	mov	r0, r4
 8021508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802150c:	f7fc be50 	b.w	801e1b0 <os_timer_stop_free>
 8021510:	bd10      	pop	{r4, pc}
	...

08021514 <conn_mngr_alloc_handle>:
 8021514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021516:	b081      	sub	sp, #4
 8021518:	f648 204c 	movw	r0, #35404	@ 0x8a4c
 802151c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021520:	f7fc faca 	bl	801dab8 <os_mem_pool_alloc>
 8021524:	4605      	mov	r5, r0
 8021526:	4604      	mov	r4, r0
 8021528:	2800      	cmp	r0, #0
 802152a:	bf18      	it	ne
 802152c:	2501      	movne	r5, #1
 802152e:	4628      	mov	r0, r5
 8021530:	2101      	movs	r1, #1
 8021532:	f7fa f9f4 	bl	801b91e <bsp_assert>
 8021536:	4628      	mov	r0, r5
 8021538:	2101      	movs	r1, #1
 802153a:	f7fa f9f0 	bl	801b91e <bsp_assert>
 802153e:	2c00      	cmp	r4, #0
 8021540:	d07b      	beq.n	802163a <conn_mngr_alloc_handle+0x126>
 8021542:	200b      	movs	r0, #11
 8021544:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
 8021548:	4620      	mov	r0, r4
 802154a:	2100      	movs	r1, #0
 802154c:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8021550:	2700      	movs	r7, #0
 8021552:	f7ff f9c7 	bl	80208e4 <ble_memset>
 8021556:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 802155a:	f894 104a 	ldrb.w	r1, [r4, #74]	@ 0x4a
 802155e:	f040 0004 	orr.w	r0, r0, #4
 8021562:	f884 0048 	strb.w	r0, [r4, #72]	@ 0x48
 8021566:	f041 0002 	orr.w	r0, r1, #2
 802156a:	f884 004a 	strb.w	r0, [r4, #74]	@ 0x4a
 802156e:	201b      	movs	r0, #27
 8021570:	f2c0 1048 	movt	r0, #328	@ 0x148
 8021574:	4621      	mov	r1, r4
 8021576:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
 802157a:	f841 0fa0 	str.w	r0, [r1, #160]!
 802157e:	f240 1048 	movw	r0, #328	@ 0x148
 8021582:	f6c0 2090 	movt	r0, #2704	@ 0xa90
 8021586:	e9c4 002c 	strd	r0, r0, [r4, #176]	@ 0xb0
 802158a:	f44f 6029 	mov.w	r0, #2704	@ 0xa90
 802158e:	f8a4 00b8 	strh.w	r0, [r4, #184]	@ 0xb8
 8021592:	f104 00a8 	add.w	r0, r4, #168	@ 0xa8
 8021596:	2208      	movs	r2, #8
 8021598:	f104 0646 	add.w	r6, r4, #70	@ 0x46
 802159c:	f104 0550 	add.w	r5, r4, #80	@ 0x50
 80215a0:	6524      	str	r4, [r4, #80]	@ 0x50
 80215a2:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 80215a6:	f7ff f94d 	bl	8020844 <ble_memcpy>
 80215aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80215ae:	f8a4 00d8 	strh.w	r0, [r4, #216]	@ 0xd8
 80215b2:	200a      	movs	r0, #10
 80215b4:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 80215b8:	4630      	mov	r0, r6
 80215ba:	66a4      	str	r4, [r4, #104]	@ 0x68
 80215bc:	f001 f980 	bl	80228c0 <db_get_le_feature_info>
 80215c0:	207b      	movs	r0, #123	@ 0x7b
 80215c2:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 80215c6:	f242 103d 	movw	r0, #8509	@ 0x213d
 80215ca:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80215ce:	2100      	movs	r1, #0
 80215d0:	462a      	mov	r2, r5
 80215d2:	f7fc fc39 	bl	801de48 <os_timer_create>
 80215d6:	2101      	movs	r1, #1
 80215d8:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 80215dc:	2800      	cmp	r0, #0
 80215de:	bf18      	it	ne
 80215e0:	2001      	movne	r0, #1
 80215e2:	f7fa f99c 	bl	801b91e <bsp_assert>
 80215e6:	f649 7018 	movw	r0, #40728	@ 0x9f18
 80215ea:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80215ee:	bf00      	nop
 80215f0:	f850 1027 	ldr.w	r1, [r0, r7, lsl #2]
 80215f4:	b121      	cbz	r1, 8021600 <conn_mngr_alloc_handle+0xec>
 80215f6:	3701      	adds	r7, #1
 80215f8:	2f08      	cmp	r7, #8
 80215fa:	d1f9      	bne.n	80215f0 <conn_mngr_alloc_handle+0xdc>
 80215fc:	2000      	movs	r0, #0
 80215fe:	e008      	b.n	8021612 <conn_mngr_alloc_handle+0xfe>
 8021600:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 8021604:	b2f8      	uxtb	r0, r7
 8021606:	f8a4 00de 	strh.w	r0, [r4, #222]	@ 0xde
 802160a:	f1b7 0008 	subs.w	r0, r7, #8
 802160e:	bf18      	it	ne
 8021610:	2001      	movne	r0, #1
 8021612:	2101      	movs	r1, #1
 8021614:	2501      	movs	r5, #1
 8021616:	f7fa f982 	bl	801b91e <bsp_assert>
 802161a:	f240 1001 	movw	r0, #257	@ 0x101
 802161e:	f8a4 012e 	strh.w	r0, [r4, #302]	@ 0x12e
 8021622:	2000      	movs	r0, #0
 8021624:	f8a4 0132 	strh.w	r0, [r4, #306]	@ 0x132
 8021628:	f884 0136 	strb.w	r0, [r4, #310]	@ 0x136
 802162c:	20ff      	movs	r0, #255	@ 0xff
 802162e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8021632:	f884 0147 	strb.w	r0, [r4, #327]	@ 0x147
 8021636:	f884 0146 	strb.w	r0, [r4, #326]	@ 0x146
 802163a:	4620      	mov	r0, r4
 802163c:	b001      	add	sp, #4
 802163e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021640 <conn_mngr_start_connection>:
 8021640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021644:	b08d      	sub	sp, #52	@ 0x34
 8021646:	4606      	mov	r6, r0
 8021648:	e9dd 8017 	ldrd	r8, r0, [sp, #92]	@ 0x5c
 802164c:	460d      	mov	r5, r1
 802164e:	2101      	movs	r1, #1
 8021650:	461f      	mov	r7, r3
 8021652:	4692      	mov	sl, r2
 8021654:	f88d 1033 	strb.w	r1, [sp, #51]	@ 0x33
 8021658:	2100      	movs	r1, #0
 802165a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802165c:	b138      	cbz	r0, 802166e <conn_mngr_start_connection+0x2e>
 802165e:	f896 b021 	ldrb.w	fp, [r6, #33]	@ 0x21
 8021662:	f04f 0900 	mov.w	r9, #0
 8021666:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802166a:	9203      	str	r2, [sp, #12]
 802166c:	e005      	b.n	802167a <conn_mngr_start_connection+0x3a>
 802166e:	2280      	movs	r2, #128	@ 0x80
 8021670:	9203      	str	r2, [sp, #12]
 8021672:	f04f 0900 	mov.w	r9, #0
 8021676:	f04f 0b00 	mov.w	fp, #0
 802167a:	4634      	mov	r4, r6
 802167c:	f804 1f24 	strb.w	r1, [r4, #36]!
 8021680:	f884 0103 	strb.w	r0, [r4, #259]	@ 0x103
 8021684:	1d21      	adds	r1, r4, #4
 8021686:	4620      	mov	r0, r4
 8021688:	f7f2 f9de 	bl	8013a48 <llhwc_get_ch_idx>
 802168c:	f008 0001 	and.w	r0, r8, #1
 8021690:	f884 0108 	strb.w	r0, [r4, #264]	@ 0x108
 8021694:	f646 5448 	movw	r4, #27976	@ 0x6d48
 8021698:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 802169c:	f649 72d4 	movw	r2, #40916	@ 0x9fd4
 80216a0:	6820      	ldr	r0, [r4, #0]
 80216a2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80216a6:	7813      	ldrb	r3, [r2, #0]
 80216a8:	68c1      	ldr	r1, [r0, #12]
 80216aa:	3301      	adds	r3, #1
 80216ac:	7013      	strb	r3, [r2, #0]
 80216ae:	b319      	cbz	r1, 80216f8 <conn_mngr_start_connection+0xb8>
 80216b0:	f005 00fe 	and.w	r0, r5, #254	@ 0xfe
 80216b4:	2200      	movs	r2, #0
 80216b6:	2802      	cmp	r0, #2
 80216b8:	bf18      	it	ne
 80216ba:	4617      	movne	r7, r2
 80216bc:	f8b6 00de 	ldrh.w	r0, [r6, #222]	@ 0xde
 80216c0:	9204      	str	r2, [sp, #16]
 80216c2:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80216c6:	f896 0127 	ldrb.w	r0, [r6, #295]	@ 0x127
 80216ca:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 80216ce:	f88d 0020 	strb.w	r0, [sp, #32]
 80216d2:	8af0      	ldrh	r0, [r6, #22]
 80216d4:	f88d 202a 	strb.w	r2, [sp, #42]	@ 0x2a
 80216d8:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 80216dc:	8b30      	ldrh	r0, [r6, #24]
 80216de:	8b72      	ldrh	r2, [r6, #26]
 80216e0:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 80216e4:	a804      	add	r0, sp, #16
 80216e6:	e9cd 6a05 	strd	r6, sl, [sp, #20]
 80216ea:	9707      	str	r7, [sp, #28]
 80216ec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80216f0:	f88d b02b 	strb.w	fp, [sp, #43]	@ 0x2b
 80216f4:	4788      	blx	r1
 80216f6:	6820      	ldr	r0, [r4, #0]
 80216f8:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80216fa:	b122      	cbz	r2, 8021706 <conn_mngr_start_connection+0xc6>
 80216fc:	f8b6 00de 	ldrh.w	r0, [r6, #222]	@ 0xde
 8021700:	f896 112c 	ldrb.w	r1, [r6, #300]	@ 0x12c
 8021704:	4790      	blx	r2
 8021706:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 802170a:	2a01      	cmp	r2, #1
 802170c:	d114      	bne.n	8021738 <conn_mngr_start_connection+0xf8>
 802170e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021710:	2801      	cmp	r0, #1
 8021712:	d111      	bne.n	8021738 <conn_mngr_start_connection+0xf8>
 8021714:	7970      	ldrb	r0, [r6, #5]
 8021716:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 802171a:	2840      	cmp	r0, #64	@ 0x40
 802171c:	d10c      	bne.n	8021738 <conn_mngr_start_connection+0xf8>
 802171e:	f10d 0333 	add.w	r3, sp, #51	@ 0x33
 8021722:	2003      	movs	r0, #3
 8021724:	2101      	movs	r1, #1
 8021726:	4632      	mov	r2, r6
 8021728:	f7f2 fa4b 	bl	8013bc2 <llhwc_lst_search>
 802172c:	4605      	mov	r5, r0
 802172e:	2800      	cmp	r0, #0
 8021730:	d14d      	bne.n	80217ce <conn_mngr_start_connection+0x18e>
 8021732:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 8021736:	e011      	b.n	802175c <conn_mngr_start_connection+0x11c>
 8021738:	2700      	movs	r7, #0
 802173a:	2000      	movs	r0, #0
 802173c:	2101      	movs	r1, #1
 802173e:	4633      	mov	r3, r6
 8021740:	9700      	str	r7, [sp, #0]
 8021742:	f7f2 fae1 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 8021746:	aa0b      	add	r2, sp, #44	@ 0x2c
 8021748:	2002      	movs	r0, #2
 802174a:	4631      	mov	r1, r6
 802174c:	2300      	movs	r3, #0
 802174e:	f7f9 fd31 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 8021752:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021754:	b148      	cbz	r0, 802176a <conn_mngr_start_connection+0x12a>
 8021756:	6800      	ldr	r0, [r0, #0]
 8021758:	f88d 0033 	strb.w	r0, [sp, #51]	@ 0x33
 802175c:	07c1      	lsls	r1, r0, #31
 802175e:	d104      	bne.n	802176a <conn_mngr_start_connection+0x12a>
 8021760:	b2c1      	uxtb	r1, r0
 8021762:	2001      	movs	r0, #1
 8021764:	2200      	movs	r2, #0
 8021766:	f7f2 fc62 	bl	801402e <llhwc_lst_edit_indicators>
 802176a:	8af0      	ldrh	r0, [r6, #22]
 802176c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021770:	0880      	lsrs	r0, r0, #2
 8021772:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8021776:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
 802177a:	0189      	lsls	r1, r1, #6
 802177c:	f7fc fd2e 	bl	801e1dc <os_timer_set>
 8021780:	f7f3 ffce 	bl	8015720 <llhwc_is_in_augmented_mode>
 8021784:	b110      	cbz	r0, 802178c <conn_mngr_start_connection+0x14c>
 8021786:	2001      	movs	r0, #1
 8021788:	f886 0129 	strb.w	r0, [r6, #297]	@ 0x129
 802178c:	f506 70a6 	add.w	r0, r6, #332	@ 0x14c
 8021790:	f7ff f95c 	bl	8020a4c <pta_init_acl>
 8021794:	9803      	ldr	r0, [sp, #12]
 8021796:	f242 1359 	movw	r3, #8537	@ 0x2159
 802179a:	2500      	movs	r5, #0
 802179c:	4649      	mov	r1, r9
 802179e:	f6c0 0302 	movt	r3, #2050	@ 0x802
 80217a2:	4632      	mov	r2, r6
 80217a4:	e9cd 6500 	strd	r6, r5, [sp]
 80217a8:	9502      	str	r5, [sp, #8]
 80217aa:	f7ec f876 	bl	800d89a <evnt_schdlr_rgstr_evnt>
 80217ae:	2101      	movs	r1, #1
 80217b0:	f8c6 00c0 	str.w	r0, [r6, #192]	@ 0xc0
 80217b4:	2800      	cmp	r0, #0
 80217b6:	bf18      	it	ne
 80217b8:	2001      	movne	r0, #1
 80217ba:	f7fa f8b0 	bl	801b91e <bsp_assert>
 80217be:	f8d6 10c0 	ldr.w	r1, [r6, #192]	@ 0xc0
 80217c2:	f242 40c3 	movw	r0, #9411	@ 0x24c3
 80217c6:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80217ca:	f7ec ffff 	bl	800e7cc <evnt_schdlr_rgstr_error_cbk_evnt_cmplt>
 80217ce:	4628      	mov	r0, r5
 80217d0:	b00d      	add	sp, #52	@ 0x34
 80217d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080217d6 <conn_mngr_slave_start_connection>:
 80217d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217da:	b083      	sub	sp, #12
 80217dc:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	@ 0x3c
 80217e0:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80217e4:	469b      	mov	fp, r3
 80217e6:	4690      	mov	r8, r2
 80217e8:	460e      	mov	r6, r1
 80217ea:	4604      	mov	r4, r0
 80217ec:	f7fa f870 	bl	801b8d0 <state_mngr_get_state_type>
 80217f0:	3805      	subs	r0, #5
 80217f2:	fab0 f080 	clz	r0, r0
 80217f6:	0940      	lsrs	r0, r0, #5
 80217f8:	2101      	movs	r1, #1
 80217fa:	f7fa f890 	bl	801b91e <bsp_assert>
 80217fe:	4630      	mov	r0, r6
 8021800:	2101      	movs	r1, #1
 8021802:	2e00      	cmp	r6, #0
 8021804:	bf18      	it	ne
 8021806:	2001      	movne	r0, #1
 8021808:	f7fa f889 	bl	801b91e <bsp_assert>
 802180c:	f7ff fe82 	bl	8021514 <conn_mngr_alloc_handle>
 8021810:	2101      	movs	r1, #1
 8021812:	4607      	mov	r7, r0
 8021814:	2800      	cmp	r0, #0
 8021816:	bf18      	it	ne
 8021818:	2001      	movne	r0, #1
 802181a:	f7fa f880 	bl	801b91e <bsp_assert>
 802181e:	b115      	cbz	r5, 8021826 <conn_mngr_slave_start_connection+0x50>
 8021820:	f897 00de 	ldrb.w	r0, [r7, #222]	@ 0xde
 8021824:	7028      	strb	r0, [r5, #0]
 8021826:	4638      	mov	r0, r7
 8021828:	4631      	mov	r1, r6
 802182a:	2238      	movs	r2, #56	@ 0x38
 802182c:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 8021830:	f7ff f808 	bl	8020844 <ble_memcpy>
 8021834:	8a38      	ldrh	r0, [r7, #16]
 8021836:	f897 1020 	ldrb.w	r1, [r7, #32]
 802183a:	2203      	movs	r2, #3
 802183c:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 8021840:	f107 0008 	add.w	r0, r7, #8
 8021844:	f7fb fe0e 	bl	801d464 <ble_time_add_uint>
 8021848:	f241 7059 	movw	r0, #5977	@ 0x1759
 802184c:	f2cd 10b7 	movt	r0, #53687	@ 0xd1b7
 8021850:	8a39      	ldrh	r1, [r7, #16]
 8021852:	fbaa 0200 	umull	r0, r2, sl, r0
 8021856:	eb01 2092 	add.w	r0, r1, r2, lsr #10
 802185a:	f106 0108 	add.w	r1, r6, #8
 802185e:	8238      	strh	r0, [r7, #16]
 8021860:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8021864:	f7fb fdd9 	bl	801d41a <ble_time_set>
 8021868:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 802186c:	f001 f805 	bl	802287a <db_get_slp_clk_accuracy>
 8021870:	f1b9 0f01 	cmp.w	r9, #1
 8021874:	f04f 0200 	mov.w	r2, #0
 8021878:	d10b      	bne.n	8021892 <conn_mngr_slave_start_connection+0xbc>
 802187a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802187c:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8021880:	2802      	cmp	r0, #2
 8021882:	d106      	bne.n	8021892 <conn_mngr_slave_start_connection+0xbc>
 8021884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021886:	7950      	ldrb	r0, [r2, #5]
 8021888:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 802188c:	2840      	cmp	r0, #64	@ 0x40
 802188e:	bf18      	it	ne
 8021890:	2200      	movne	r2, #0
 8021892:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 8021896:	f896 1023 	ldrb.w	r1, [r6, #35]	@ 0x23
 802189a:	2601      	movs	r6, #1
 802189c:	e9cd b000 	strd	fp, r0, [sp]
 80218a0:	4638      	mov	r0, r7
 80218a2:	4643      	mov	r3, r8
 80218a4:	9602      	str	r6, [sp, #8]
 80218a6:	f7ff fecb 	bl	8021640 <conn_mngr_start_connection>
 80218aa:	b003      	add	sp, #12
 80218ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218b0 <conn_mngr_send_pkt>:
 80218b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218b4:	b087      	sub	sp, #28
 80218b6:	2808      	cmp	r0, #8
 80218b8:	460f      	mov	r7, r1
 80218ba:	d815      	bhi.n	80218e8 <conn_mngr_send_pkt+0x38>
 80218bc:	d01c      	beq.n	80218f8 <conn_mngr_send_pkt+0x48>
 80218be:	f649 7118 	movw	r1, #40728	@ 0x9f18
 80218c2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80218c6:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80218ca:	b1ae      	cbz	r6, 80218f8 <conn_mngr_send_pkt+0x48>
 80218cc:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 80218d0:	b190      	cbz	r0, 80218f8 <conn_mngr_send_pkt+0x48>
 80218d2:	f896 0148 	ldrb.w	r0, [r6, #328]	@ 0x148
 80218d6:	2801      	cmp	r0, #1
 80218d8:	d116      	bne.n	8021908 <conn_mngr_send_pkt+0x58>
 80218da:	7bb8      	ldrb	r0, [r7, #14]
 80218dc:	b1e8      	cbz	r0, 802191a <conn_mngr_send_pkt+0x6a>
 80218de:	2000      	movs	r0, #0
 80218e0:	2100      	movs	r1, #0
 80218e2:	f7fa f81c 	bl	801b91e <bsp_assert>
 80218e6:	e01a      	b.n	802191e <conn_mngr_send_pkt+0x6e>
 80218e8:	4638      	mov	r0, r7
 80218ea:	f7f9 f801 	bl	801a8f0 <free_buff_hdr>
 80218ee:	2042      	movs	r0, #66	@ 0x42
 80218f0:	f7fa f860 	bl	801b9b4 <bsp_debug_gpio_toggle>
 80218f4:	2507      	movs	r5, #7
 80218f6:	e003      	b.n	8021900 <conn_mngr_send_pkt+0x50>
 80218f8:	4638      	mov	r0, r7
 80218fa:	f7f8 fff9 	bl	801a8f0 <free_buff_hdr>
 80218fe:	2502      	movs	r5, #2
 8021900:	4628      	mov	r0, r5
 8021902:	b007      	add	sp, #28
 8021904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021908:	89b8      	ldrh	r0, [r7, #12]
 802190a:	b958      	cbnz	r0, 8021924 <conn_mngr_send_pkt+0x74>
 802190c:	2001      	movs	r0, #1
 802190e:	f886 0148 	strb.w	r0, [r6, #328]	@ 0x148
 8021912:	4638      	mov	r0, r7
 8021914:	f7f8 ffec 	bl	801a8f0 <free_buff_hdr>
 8021918:	e15b      	b.n	8021bd2 <conn_mngr_send_pkt+0x322>
 802191a:	2001      	movs	r0, #1
 802191c:	73b8      	strb	r0, [r7, #14]
 802191e:	2000      	movs	r0, #0
 8021920:	f886 0148 	strb.w	r0, [r6, #328]	@ 0x148
 8021924:	f896 0136 	ldrb.w	r0, [r6, #310]	@ 0x136
 8021928:	b1e8      	cbz	r0, 8021966 <conn_mngr_send_pkt+0xb6>
 802192a:	2001      	movs	r0, #1
 802192c:	2101      	movs	r1, #1
 802192e:	f7f9 fff6 	bl	801b91e <bsp_assert>
 8021932:	2001      	movs	r0, #1
 8021934:	2101      	movs	r1, #1
 8021936:	f7f9 fff2 	bl	801b91e <bsp_assert>
 802193a:	f896 1136 	ldrb.w	r1, [r6, #310]	@ 0x136
 802193e:	f896 512e 	ldrb.w	r5, [r6, #302]	@ 0x12e
 8021942:	2905      	cmp	r1, #5
 8021944:	d851      	bhi.n	80219ea <conn_mngr_send_pkt+0x13a>
 8021946:	f896 0074 	ldrb.w	r0, [r6, #116]	@ 0x74
 802194a:	e8df f001 	tbb	[pc, r1]
 802194e:	0352      	.short	0x0352
 8021950:	52523e33 	.word	0x52523e33
 8021954:	f896 1127 	ldrb.w	r1, [r6, #295]	@ 0x127
 8021958:	b109      	cbz	r1, 802195e <conn_mngr_send_pkt+0xae>
 802195a:	f896 0075 	ldrb.w	r0, [r6, #117]	@ 0x75
 802195e:	2800      	cmp	r0, #0
 8021960:	bf18      	it	ne
 8021962:	4605      	movne	r5, r0
 8021964:	e045      	b.n	80219f2 <conn_mngr_send_pkt+0x142>
 8021966:	f896 112e 	ldrb.w	r1, [r6, #302]	@ 0x12e
 802196a:	f8b6 00ae 	ldrh.w	r0, [r6, #174]	@ 0xae
 802196e:	f896 4122 	ldrb.w	r4, [r6, #290]	@ 0x122
 8021972:	2904      	cmp	r1, #4
 8021974:	d008      	beq.n	8021988 <conn_mngr_send_pkt+0xd8>
 8021976:	2902      	cmp	r1, #2
 8021978:	d011      	beq.n	802199e <conn_mngr_send_pkt+0xee>
 802197a:	2901      	cmp	r1, #1
 802197c:	d114      	bne.n	80219a8 <conn_mngr_send_pkt+0xf8>
 802197e:	f06f 010d 	mvn.w	r1, #13
 8021982:	eb01 05d0 	add.w	r5, r1, r0, lsr #3
 8021986:	e07f      	b.n	8021a88 <conn_mngr_send_pkt+0x1d8>
 8021988:	f8b6 1130 	ldrh.w	r1, [r6, #304]	@ 0x130
 802198c:	2902      	cmp	r1, #2
 802198e:	d175      	bne.n	8021a7c <conn_mngr_send_pkt+0x1cc>
 8021990:	f64f 4130 	movw	r1, #64560	@ 0xfc30
 8021994:	f2c0 013f 	movt	r1, #63	@ 0x3f
 8021998:	4408      	add	r0, r1
 802199a:	0985      	lsrs	r5, r0, #6
 802199c:	e074      	b.n	8021a88 <conn_mngr_send_pkt+0x1d8>
 802199e:	f06f 010e 	mvn.w	r1, #14
 80219a2:	eb01 0590 	add.w	r5, r1, r0, lsr #2
 80219a6:	e06f      	b.n	8021a88 <conn_mngr_send_pkt+0x1d8>
 80219a8:	2000      	movs	r0, #0
 80219aa:	2101      	movs	r1, #1
 80219ac:	2500      	movs	r5, #0
 80219ae:	f7f9 ffb6 	bl	801b91e <bsp_assert>
 80219b2:	e069      	b.n	8021a88 <conn_mngr_send_pkt+0x1d8>
 80219b4:	f896 1127 	ldrb.w	r1, [r6, #295]	@ 0x127
 80219b8:	2901      	cmp	r1, #1
 80219ba:	d11a      	bne.n	80219f2 <conn_mngr_send_pkt+0x142>
 80219bc:	f24e 61b4 	movw	r1, #59060	@ 0xe6b4
 80219c0:	4328      	orrs	r0, r5
 80219c2:	f6c0 0102 	movt	r1, #2050	@ 0x802
 80219c6:	5c0d      	ldrb	r5, [r1, r0]
 80219c8:	e013      	b.n	80219f2 <conn_mngr_send_pkt+0x142>
 80219ca:	f896 1127 	ldrb.w	r1, [r6, #295]	@ 0x127
 80219ce:	2901      	cmp	r1, #1
 80219d0:	d10b      	bne.n	80219ea <conn_mngr_send_pkt+0x13a>
 80219d2:	f896 1075 	ldrb.w	r1, [r6, #117]	@ 0x75
 80219d6:	ea11 0200 	ands.w	r2, r1, r0
 80219da:	f24e 60b4 	movw	r0, #59060	@ 0xe6b4
 80219de:	f6c0 0002 	movt	r0, #2050	@ 0x802
 80219e2:	f000 80f8 	beq.w	8021bd6 <conn_mngr_send_pkt+0x326>
 80219e6:	5c85      	ldrb	r5, [r0, r2]
 80219e8:	e003      	b.n	80219f2 <conn_mngr_send_pkt+0x142>
 80219ea:	2000      	movs	r0, #0
 80219ec:	2101      	movs	r1, #1
 80219ee:	f7f9 ff96 	bl	801b91e <bsp_assert>
 80219f2:	1e68      	subs	r0, r5, #1
 80219f4:	2802      	cmp	r0, #2
 80219f6:	d204      	bcs.n	8021a02 <conn_mngr_send_pkt+0x152>
 80219f8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80219fc:	f8a6 00ae 	strh.w	r0, [r6, #174]	@ 0xae
 8021a00:	e00e      	b.n	8021a20 <conn_mngr_send_pkt+0x170>
 8021a02:	2d04      	cmp	r5, #4
 8021a04:	d106      	bne.n	8021a14 <conn_mngr_send_pkt+0x164>
 8021a06:	f8b6 00b2 	ldrh.w	r0, [r6, #178]	@ 0xb2
 8021a0a:	f896 8122 	ldrb.w	r8, [r6, #290]	@ 0x122
 8021a0e:	f8a6 00ae 	strh.w	r0, [r6, #174]	@ 0xae
 8021a12:	e012      	b.n	8021a3a <conn_mngr_send_pkt+0x18a>
 8021a14:	2000      	movs	r0, #0
 8021a16:	2101      	movs	r1, #1
 8021a18:	f7f9 ff81 	bl	801b91e <bsp_assert>
 8021a1c:	f8b6 00ae 	ldrh.w	r0, [r6, #174]	@ 0xae
 8021a20:	f896 8122 	ldrb.w	r8, [r6, #290]	@ 0x122
 8021a24:	2d04      	cmp	r5, #4
 8021a26:	d008      	beq.n	8021a3a <conn_mngr_send_pkt+0x18a>
 8021a28:	2d02      	cmp	r5, #2
 8021a2a:	d018      	beq.n	8021a5e <conn_mngr_send_pkt+0x1ae>
 8021a2c:	2d01      	cmp	r5, #1
 8021a2e:	d11b      	bne.n	8021a68 <conn_mngr_send_pkt+0x1b8>
 8021a30:	f06f 010d 	mvn.w	r1, #13
 8021a34:	eb01 04d0 	add.w	r4, r1, r0, lsr #3
 8021a38:	e01b      	b.n	8021a72 <conn_mngr_send_pkt+0x1c2>
 8021a3a:	f8b6 1130 	ldrh.w	r1, [r6, #304]	@ 0x130
 8021a3e:	2902      	cmp	r1, #2
 8021a40:	d106      	bne.n	8021a50 <conn_mngr_send_pkt+0x1a0>
 8021a42:	f64f 4130 	movw	r1, #64560	@ 0xfc30
 8021a46:	f2c0 013f 	movt	r1, #63	@ 0x3f
 8021a4a:	4408      	add	r0, r1
 8021a4c:	0984      	lsrs	r4, r0, #6
 8021a4e:	e010      	b.n	8021a72 <conn_mngr_send_pkt+0x1c2>
 8021a50:	f64f 51f2 	movw	r1, #65010	@ 0xfdf2
 8021a54:	f2c0 010f 	movt	r1, #15
 8021a58:	4408      	add	r0, r1
 8021a5a:	0904      	lsrs	r4, r0, #4
 8021a5c:	e009      	b.n	8021a72 <conn_mngr_send_pkt+0x1c2>
 8021a5e:	f06f 010e 	mvn.w	r1, #14
 8021a62:	eb01 0490 	add.w	r4, r1, r0, lsr #2
 8021a66:	e004      	b.n	8021a72 <conn_mngr_send_pkt+0x1c2>
 8021a68:	2000      	movs	r0, #0
 8021a6a:	2101      	movs	r1, #1
 8021a6c:	2400      	movs	r4, #0
 8021a6e:	f7f9 ff56 	bl	801b91e <bsp_assert>
 8021a72:	fab8 f088 	clz	r0, r8
 8021a76:	0940      	lsrs	r0, r0, #5
 8021a78:	0085      	lsls	r5, r0, #2
 8021a7a:	e009      	b.n	8021a90 <conn_mngr_send_pkt+0x1e0>
 8021a7c:	f64f 51f2 	movw	r1, #65010	@ 0xfdf2
 8021a80:	f2c0 010f 	movt	r1, #15
 8021a84:	4408      	add	r0, r1
 8021a86:	0905      	lsrs	r5, r0, #4
 8021a88:	fab4 f084 	clz	r0, r4
 8021a8c:	0940      	lsrs	r0, r0, #5
 8021a8e:	0084      	lsls	r4, r0, #2
 8021a90:	1928      	adds	r0, r5, r4
 8021a92:	b280      	uxth	r0, r0
 8021a94:	f8b6 40ac 	ldrh.w	r4, [r6, #172]	@ 0xac
 8021a98:	89b9      	ldrh	r1, [r7, #12]
 8021a9a:	42a0      	cmp	r0, r4
 8021a9c:	bf38      	it	cc
 8021a9e:	4604      	movcc	r4, r0
 8021aa0:	42a1      	cmp	r1, r4
 8021aa2:	d969      	bls.n	8021b78 <conn_mngr_send_pkt+0x2c8>
 8021aa4:	4620      	mov	r0, r4
 8021aa6:	2101      	movs	r1, #1
 8021aa8:	2c00      	cmp	r4, #0
 8021aaa:	bf18      	it	ne
 8021aac:	2001      	movne	r0, #1
 8021aae:	f7f9 ff36 	bl	801b91e <bsp_assert>
 8021ab2:	89b8      	ldrh	r0, [r7, #12]
 8021ab4:	2500      	movs	r5, #0
 8021ab6:	1821      	adds	r1, r4, r0
 8021ab8:	3901      	subs	r1, #1
 8021aba:	42a1      	cmp	r1, r4
 8021abc:	f4ff af20 	bcc.w	8021900 <conn_mngr_send_pkt+0x50>
 8021ac0:	fbb1 f9f4 	udiv	r9, r1, r4
 8021ac4:	1ce1      	adds	r1, r4, #3
 8021ac6:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8021aca:	4011      	ands	r1, r2
 8021acc:	683a      	ldr	r2, [r7, #0]
 8021ace:	897b      	ldrh	r3, [r7, #10]
 8021ad0:	310c      	adds	r1, #12
 8021ad2:	9102      	str	r1, [sp, #8]
 8021ad4:	18d1      	adds	r1, r2, r3
 8021ad6:	f1a9 0301 	sub.w	r3, r9, #1
 8021ada:	fb03 1804 	mla	r8, r3, r4, r1
 8021ade:	fb03 0a14 	mls	sl, r3, r4, r0
 8021ae2:	9601      	str	r6, [sp, #4]
 8021ae4:	9706      	str	r7, [sp, #24]
 8021ae6:	4260      	negs	r0, r4
 8021ae8:	f1a2 0b01 	sub.w	fp, r2, #1
 8021aec:	2700      	movs	r7, #0
 8021aee:	2600      	movs	r6, #0
 8021af0:	9405      	str	r4, [sp, #20]
 8021af2:	9003      	str	r0, [sp, #12]
 8021af4:	f8cd 9010 	str.w	r9, [sp, #16]
 8021af8:	f1b9 0401 	subs.w	r4, r9, #1
 8021afc:	d01f      	beq.n	8021b3e <conn_mngr_send_pkt+0x28e>
 8021afe:	f249 5014 	movw	r0, #38164	@ 0x9514
 8021b02:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021b06:	f7fb ffd7 	bl	801dab8 <os_mem_pool_alloc>
 8021b0a:	2800      	cmp	r0, #0
 8021b0c:	d03f      	beq.n	8021b8e <conn_mngr_send_pkt+0x2de>
 8021b0e:	9906      	ldr	r1, [sp, #24]
 8021b10:	9a02      	ldr	r2, [sp, #8]
 8021b12:	8949      	ldrh	r1, [r1, #10]
 8021b14:	f1ba 0f00 	cmp.w	sl, #0
 8021b18:	fb04 1102 	mla	r1, r4, r2, r1
 8021b1c:	7385      	strb	r5, [r0, #14]
 8021b1e:	f101 0104 	add.w	r1, r1, #4
 8021b22:	6047      	str	r7, [r0, #4]
 8021b24:	8141      	strh	r1, [r0, #10]
 8021b26:	d00c      	beq.n	8021b42 <conn_mngr_send_pkt+0x292>
 8021b28:	4651      	mov	r1, sl
 8021b2a:	bf00      	nop
 8021b2c:	1e4a      	subs	r2, r1, #1
 8021b2e:	8943      	ldrh	r3, [r0, #10]
 8021b30:	f818 7002 	ldrb.w	r7, [r8, r2]
 8021b34:	445b      	add	r3, fp
 8021b36:	545f      	strb	r7, [r3, r1]
 8021b38:	4611      	mov	r1, r2
 8021b3a:	d1f7      	bne.n	8021b2c <conn_mngr_send_pkt+0x27c>
 8021b3c:	e001      	b.n	8021b42 <conn_mngr_send_pkt+0x292>
 8021b3e:	9806      	ldr	r0, [sp, #24]
 8021b40:	6047      	str	r7, [r0, #4]
 8021b42:	4607      	mov	r7, r0
 8021b44:	9804      	ldr	r0, [sp, #16]
 8021b46:	4581      	cmp	r9, r0
 8021b48:	d003      	beq.n	8021b52 <conn_mngr_send_pkt+0x2a2>
 8021b4a:	7bb8      	ldrb	r0, [r7, #14]
 8021b4c:	f040 0004 	orr.w	r0, r0, #4
 8021b50:	73b8      	strb	r0, [r7, #14]
 8021b52:	9806      	ldr	r0, [sp, #24]
 8021b54:	f8a7 a00c 	strh.w	sl, [r7, #12]
 8021b58:	6800      	ldr	r0, [r0, #0]
 8021b5a:	6038      	str	r0, [r7, #0]
 8021b5c:	4638      	mov	r0, r7
 8021b5e:	f7f8 fa8f 	bl	801a080 <pdu_trnsprt_hndlr_form_data_pdu>
 8021b62:	9803      	ldr	r0, [sp, #12]
 8021b64:	f8dd a014 	ldr.w	sl, [sp, #20]
 8021b68:	3601      	adds	r6, #1
 8021b6a:	4480      	add	r8, r0
 8021b6c:	2c00      	cmp	r4, #0
 8021b6e:	46a1      	mov	r9, r4
 8021b70:	d1c2      	bne.n	8021af8 <conn_mngr_send_pkt+0x248>
 8021b72:	9c06      	ldr	r4, [sp, #24]
 8021b74:	2701      	movs	r7, #1
 8021b76:	e010      	b.n	8021b9a <conn_mngr_send_pkt+0x2ea>
 8021b78:	4638      	mov	r0, r7
 8021b7a:	f7f8 fa81 	bl	801a080 <pdu_trnsprt_hndlr_form_data_pdu>
 8021b7e:	f8d6 10c0 	ldr.w	r1, [r6, #192]	@ 0xc0
 8021b82:	4605      	mov	r5, r0
 8021b84:	4608      	mov	r0, r1
 8021b86:	4639      	mov	r1, r7
 8021b88:	f7ec fd19 	bl	800e5be <evnt_schdlr_add_data_pkt>
 8021b8c:	e6b8      	b.n	8021900 <conn_mngr_send_pkt+0x50>
 8021b8e:	9c06      	ldr	r4, [sp, #24]
 8021b90:	6820      	ldr	r0, [r4, #0]
 8021b92:	3804      	subs	r0, #4
 8021b94:	f7fb ff92 	bl	801dabc <os_mem_pool_free>
 8021b98:	2700      	movs	r7, #0
 8021b9a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8021b9e:	b1c6      	cbz	r6, 8021bd2 <conn_mngr_send_pkt+0x322>
 8021ba0:	2500      	movs	r5, #0
 8021ba2:	bf00      	nop
 8021ba4:	4620      	mov	r0, r4
 8021ba6:	2c00      	cmp	r4, #0
 8021ba8:	bf18      	it	ne
 8021baa:	2001      	movne	r0, #1
 8021bac:	4038      	ands	r0, r7
 8021bae:	2801      	cmp	r0, #1
 8021bb0:	d105      	bne.n	8021bbe <conn_mngr_send_pkt+0x30e>
 8021bb2:	f8d8 00c0 	ldr.w	r0, [r8, #192]	@ 0xc0
 8021bb6:	4621      	mov	r1, r4
 8021bb8:	f7ec fd01 	bl	800e5be <evnt_schdlr_add_data_pkt>
 8021bbc:	e003      	b.n	8021bc6 <conn_mngr_send_pkt+0x316>
 8021bbe:	b134      	cbz	r4, 8021bce <conn_mngr_send_pkt+0x31e>
 8021bc0:	4620      	mov	r0, r4
 8021bc2:	f7fb ff7b 	bl	801dabc <os_mem_pool_free>
 8021bc6:	6864      	ldr	r4, [r4, #4]
 8021bc8:	3e01      	subs	r6, #1
 8021bca:	d1eb      	bne.n	8021ba4 <conn_mngr_send_pkt+0x2f4>
 8021bcc:	e698      	b.n	8021900 <conn_mngr_send_pkt+0x50>
 8021bce:	2400      	movs	r4, #0
 8021bd0:	e7fa      	b.n	8021bc8 <conn_mngr_send_pkt+0x318>
 8021bd2:	2500      	movs	r5, #0
 8021bd4:	e694      	b.n	8021900 <conn_mngr_send_pkt+0x50>
 8021bd6:	5c45      	ldrb	r5, [r0, r1]
 8021bd8:	e70b      	b.n	80219f2 <conn_mngr_send_pkt+0x142>
	...

08021bdc <conn_mngr_calc_num_of_used_data_chnls>:
 8021bdc:	b570      	push	{r4, r5, r6, lr}
 8021bde:	b082      	sub	sp, #8
 8021be0:	2101      	movs	r1, #1
 8021be2:	4605      	mov	r5, r0
 8021be4:	2800      	cmp	r0, #0
 8021be6:	bf18      	it	ne
 8021be8:	2001      	movne	r0, #1
 8021bea:	2601      	movs	r6, #1
 8021bec:	f7f9 fe97 	bl	801b91e <bsp_assert>
 8021bf0:	466c      	mov	r4, sp
 8021bf2:	4620      	mov	r0, r4
 8021bf4:	4629      	mov	r1, r5
 8021bf6:	2205      	movs	r2, #5
 8021bf8:	f7fe fe24 	bl	8020844 <ble_memcpy>
 8021bfc:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8021c00:	f04f 3c55 	mov.w	ip, #1431655765	@ 0x55555555
 8021c04:	9001      	str	r0, [sp, #4]
 8021c06:	2000      	movs	r0, #0
 8021c08:	f04f 3e33 	mov.w	lr, #858993459	@ 0x33333333
 8021c0c:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8021c10:	2500      	movs	r5, #0
 8021c12:	bf00      	nop
 8021c14:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8021c18:	ea0c 0251 	and.w	r2, ip, r1, lsr #1
 8021c1c:	1a89      	subs	r1, r1, r2
 8021c1e:	ea0e 0291 	and.w	r2, lr, r1, lsr #2
 8021c22:	f021 31cc 	bic.w	r1, r1, #3435973836	@ 0xcccccccc
 8021c26:	4411      	add	r1, r2
 8021c28:	eb01 1211 	add.w	r2, r1, r1, lsr #4
 8021c2c:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 8021c30:	f022 32f0 	bic.w	r2, r2, #4042322160	@ 0xf0f0f0f0
 8021c34:	fb02 f203 	mul.w	r2, r2, r3
 8021c38:	2001      	movs	r0, #1
 8021c3a:	eb05 6512 	add.w	r5, r5, r2, lsr #24
 8021c3e:	07f1      	lsls	r1, r6, #31
 8021c40:	f04f 0600 	mov.w	r6, #0
 8021c44:	d1e6      	bne.n	8021c14 <conn_mngr_calc_num_of_used_data_chnls+0x38>
 8021c46:	b2e8      	uxtb	r0, r5
 8021c48:	b002      	add	sp, #8
 8021c4a:	bd70      	pop	{r4, r5, r6, pc}

08021c4c <conn_mngr_get_run_conn_no>:
 8021c4c:	f649 70d4 	movw	r0, #40916	@ 0x9fd4
 8021c50:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021c54:	7800      	ldrb	r0, [r0, #0]
 8021c56:	4770      	bx	lr

08021c58 <conn_mngr_get_ping_timeout_value>:
 8021c58:	8ac2      	ldrh	r2, [r0, #22]
 8021c5a:	f8b0 00d8 	ldrh.w	r0, [r0, #216]	@ 0xd8
 8021c5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8021c62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021c66:	0892      	lsrs	r2, r2, #2
 8021c68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021c6c:	0040      	lsls	r0, r0, #1
 8021c6e:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
 8021c72:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
 8021c76:	f04f 0000 	mov.w	r0, #0
 8021c7a:	bf38      	it	cc
 8021c7c:	2205      	movcc	r2, #5
 8021c7e:	600a      	str	r2, [r1, #0]
 8021c80:	4770      	bx	lr

08021c82 <conn_mngr_free_handle>:
 8021c82:	b570      	push	{r4, r5, r6, lr}
 8021c84:	2807      	cmp	r0, #7
 8021c86:	d81a      	bhi.n	8021cbe <conn_mngr_free_handle+0x3c>
 8021c88:	f649 7618 	movw	r6, #40728	@ 0x9f18
 8021c8c:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 8021c90:	f856 5020 	ldr.w	r5, [r6, r0, lsl #2]
 8021c94:	4604      	mov	r4, r0
 8021c96:	b195      	cbz	r5, 8021cbe <conn_mngr_free_handle+0x3c>
 8021c98:	f8d5 014c 	ldr.w	r0, [r5, #332]	@ 0x14c
 8021c9c:	f7fe ffda 	bl	8020c54 <pta_remove_pta_params>
 8021ca0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	@ 0xc0
 8021ca4:	b108      	cbz	r0, 8021caa <conn_mngr_free_handle+0x28>
 8021ca6:	f7ec fbf3 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8021caa:	4628      	mov	r0, r5
 8021cac:	f7ff fc0f 	bl	80214ce <conn_mngr_free_all_timers>
 8021cb0:	4628      	mov	r0, r5
 8021cb2:	f7fb ff03 	bl	801dabc <os_mem_pool_free>
 8021cb6:	2000      	movs	r0, #0
 8021cb8:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8021cbc:	bd70      	pop	{r4, r5, r6, pc}
 8021cbe:	2002      	movs	r0, #2
 8021cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08021cc4 <conn_mngr_disconnect>:
 8021cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021cc8:	b085      	sub	sp, #20
 8021cca:	4688      	mov	r8, r1
 8021ccc:	2101      	movs	r1, #1
 8021cce:	4606      	mov	r6, r0
 8021cd0:	2800      	cmp	r0, #0
 8021cd2:	bf18      	it	ne
 8021cd4:	2001      	movne	r0, #1
 8021cd6:	2701      	movs	r7, #1
 8021cd8:	f7f9 fe21 	bl	801b91e <bsp_assert>
 8021cdc:	f8d6 00bc 	ldr.w	r0, [r6, #188]	@ 0xbc
 8021ce0:	2400      	movs	r4, #0
 8021ce2:	f8b6 90de 	ldrh.w	r9, [r6, #222]	@ 0xde
 8021ce6:	f88d 7013 	strb.w	r7, [sp, #19]
 8021cea:	9403      	str	r4, [sp, #12]
 8021cec:	f7f9 fdf0 	bl	801b8d0 <state_mngr_get_state_type>
 8021cf0:	2805      	cmp	r0, #5
 8021cf2:	d007      	beq.n	8021d04 <conn_mngr_disconnect+0x40>
 8021cf4:	f8d6 00bc 	ldr.w	r0, [r6, #188]	@ 0xbc
 8021cf8:	f7f9 fdea 	bl	801b8d0 <state_mngr_get_state_type>
 8021cfc:	3806      	subs	r0, #6
 8021cfe:	fab0 f080 	clz	r0, r0
 8021d02:	0947      	lsrs	r7, r0, #5
 8021d04:	4638      	mov	r0, r7
 8021d06:	2101      	movs	r1, #1
 8021d08:	f7f9 fe09 	bl	801b91e <bsp_assert>
 8021d0c:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 8021d10:	2101      	movs	r1, #1
 8021d12:	2800      	cmp	r0, #0
 8021d14:	bf18      	it	ne
 8021d16:	2001      	movne	r0, #1
 8021d18:	f7f9 fe01 	bl	801b91e <bsp_assert>
 8021d1c:	f8d6 00c0 	ldr.w	r0, [r6, #192]	@ 0xc0
 8021d20:	f7ec fbb6 	bl	800e490 <evnt_schdlr_unrgstr_evnt>
 8021d24:	f8d6 00bc 	ldr.w	r0, [r6, #188]	@ 0xbc
 8021d28:	2100      	movs	r1, #0
 8021d2a:	f8c6 40c0 	str.w	r4, [r6, #192]	@ 0xc0
 8021d2e:	f7f9 fd7d 	bl	801b82c <state_mngr_update_state>
 8021d32:	fab0 f080 	clz	r0, r0
 8021d36:	0940      	lsrs	r0, r0, #5
 8021d38:	2101      	movs	r1, #1
 8021d3a:	f7f9 fdf0 	bl	801b91e <bsp_assert>
 8021d3e:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
 8021d42:	2101      	movs	r1, #1
 8021d44:	2800      	cmp	r0, #0
 8021d46:	bf18      	it	ne
 8021d48:	2001      	movne	r0, #1
 8021d4a:	f7f9 fde8 	bl	801b91e <bsp_assert>
 8021d4e:	4630      	mov	r0, r6
 8021d50:	f7ff fbbd 	bl	80214ce <conn_mngr_free_all_timers>
 8021d54:	f896 0123 	ldrb.w	r0, [r6, #291]	@ 0x123
 8021d58:	2810      	cmp	r0, #16
 8021d5a:	bf04      	itt	eq
 8021d5c:	2000      	moveq	r0, #0
 8021d5e:	f000 f88d 	bleq	8021e7c <conn_mngr_update_local_clk_acc>
 8021d62:	f7f9 fc0b 	bl	801b57c <get_addr_rsl_enable>
 8021d66:	f896 2023 	ldrb.w	r2, [r6, #35]	@ 0x23
 8021d6a:	2a01      	cmp	r2, #1
 8021d6c:	d106      	bne.n	8021d7c <conn_mngr_disconnect+0xb8>
 8021d6e:	7971      	ldrb	r1, [r6, #5]
 8021d70:	f001 01c0 	and.w	r1, r1, #192	@ 0xc0
 8021d74:	2940      	cmp	r1, #64	@ 0x40
 8021d76:	bf08      	it	eq
 8021d78:	2801      	cmpeq	r0, #1
 8021d7a:	d015      	beq.n	8021da8 <conn_mngr_disconnect+0xe4>
 8021d7c:	2700      	movs	r7, #0
 8021d7e:	2001      	movs	r0, #1
 8021d80:	2101      	movs	r1, #1
 8021d82:	4633      	mov	r3, r6
 8021d84:	9700      	str	r7, [sp, #0]
 8021d86:	f7f1 ffbf 	bl	8013d08 <llhwc_lst_add_rmv_dev>
 8021d8a:	4607      	mov	r7, r0
 8021d8c:	2800      	cmp	r0, #0
 8021d8e:	d171      	bne.n	8021e74 <conn_mngr_disconnect+0x1b0>
 8021d90:	aa03      	add	r2, sp, #12
 8021d92:	2002      	movs	r0, #2
 8021d94:	4631      	mov	r1, r6
 8021d96:	2300      	movs	r3, #0
 8021d98:	f7f9 fa0c 	bl	801b1b4 <prvcy_mngr_srch_fw_reslvng_list>
 8021d9c:	9803      	ldr	r0, [sp, #12]
 8021d9e:	b1b0      	cbz	r0, 8021dce <conn_mngr_disconnect+0x10a>
 8021da0:	6800      	ldr	r0, [r0, #0]
 8021da2:	f88d 0013 	strb.w	r0, [sp, #19]
 8021da6:	e00b      	b.n	8021dc0 <conn_mngr_disconnect+0xfc>
 8021da8:	f10d 0313 	add.w	r3, sp, #19
 8021dac:	2003      	movs	r0, #3
 8021dae:	2101      	movs	r1, #1
 8021db0:	4632      	mov	r2, r6
 8021db2:	f7f1 ff06 	bl	8013bc2 <llhwc_lst_search>
 8021db6:	4607      	mov	r7, r0
 8021db8:	2800      	cmp	r0, #0
 8021dba:	d15b      	bne.n	8021e74 <conn_mngr_disconnect+0x1b0>
 8021dbc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8021dc0:	07c1      	lsls	r1, r0, #31
 8021dc2:	d104      	bne.n	8021dce <conn_mngr_disconnect+0x10a>
 8021dc4:	b2c1      	uxtb	r1, r0
 8021dc6:	2001      	movs	r0, #1
 8021dc8:	2201      	movs	r2, #1
 8021dca:	f7f2 f930 	bl	801402e <llhwc_lst_edit_indicators>
 8021dce:	2000      	movs	r0, #0
 8021dd0:	f249 33ef 	movw	r3, #37871	@ 0x93ef
 8021dd4:	f886 0136 	strb.w	r0, [r6, #310]	@ 0x136
 8021dd8:	f88d 0008 	strb.w	r0, [sp, #8]
 8021ddc:	aa02      	add	r2, sp, #8
 8021dde:	2007      	movs	r0, #7
 8021de0:	2100      	movs	r1, #0
 8021de2:	f6c0 0301 	movt	r3, #2049	@ 0x801
 8021de6:	f8ad 900a 	strh.w	r9, [sp, #10]
 8021dea:	f7fb fe0f 	bl	801da0c <emngr_remove_conditional_event>
 8021dee:	4648      	mov	r0, r9
 8021df0:	f7ff ff47 	bl	8021c82 <conn_mngr_free_handle>
 8021df4:	f649 70d4 	movw	r0, #40916	@ 0x9fd4
 8021df8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021dfc:	7801      	ldrb	r1, [r0, #0]
 8021dfe:	3901      	subs	r1, #1
 8021e00:	7001      	strb	r1, [r0, #0]
 8021e02:	2003      	movs	r0, #3
 8021e04:	f7f9 fde9 	bl	801b9da <disable_specific_irq>
 8021e08:	f649 773c 	movw	r7, #40764	@ 0x9f3c
 8021e0c:	f2c2 0700 	movt	r7, #8192	@ 0x2000
 8021e10:	6838      	ldr	r0, [r7, #0]
 8021e12:	b1b0      	cbz	r0, 8021e42 <conn_mngr_disconnect+0x17e>
 8021e14:	2400      	movs	r4, #0
 8021e16:	bf00      	nop
 8021e18:	8841      	ldrh	r1, [r0, #2]
 8021e1a:	4549      	cmp	r1, r9
 8021e1c:	d10c      	bne.n	8021e38 <conn_mngr_disconnect+0x174>
 8021e1e:	6839      	ldr	r1, [r7, #0]
 8021e20:	4281      	cmp	r1, r0
 8021e22:	d101      	bne.n	8021e28 <conn_mngr_disconnect+0x164>
 8021e24:	6941      	ldr	r1, [r0, #20]
 8021e26:	6039      	str	r1, [r7, #0]
 8021e28:	b10c      	cbz	r4, 8021e2e <conn_mngr_disconnect+0x16a>
 8021e2a:	6941      	ldr	r1, [r0, #20]
 8021e2c:	6161      	str	r1, [r4, #20]
 8021e2e:	6945      	ldr	r5, [r0, #20]
 8021e30:	f7fb fe44 	bl	801dabc <os_mem_pool_free>
 8021e34:	e002      	b.n	8021e3c <conn_mngr_disconnect+0x178>
 8021e36:	bf00      	nop
 8021e38:	6945      	ldr	r5, [r0, #20]
 8021e3a:	4604      	mov	r4, r0
 8021e3c:	2d00      	cmp	r5, #0
 8021e3e:	4628      	mov	r0, r5
 8021e40:	d1ea      	bne.n	8021e18 <conn_mngr_disconnect+0x154>
 8021e42:	2003      	movs	r0, #3
 8021e44:	f7f9 fdc7 	bl	801b9d6 <enable_specific_irq>
 8021e48:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 8021e4c:	2002      	movs	r0, #2
 8021e4e:	2100      	movs	r1, #0
 8021e50:	f6c0 0302 	movt	r3, #2050	@ 0x802
 8021e54:	4632      	mov	r2, r6
 8021e56:	2700      	movs	r7, #0
 8021e58:	f7fb fdd8 	bl	801da0c <emngr_remove_conditional_event>
 8021e5c:	f646 5048 	movw	r0, #27976	@ 0x6d48
 8021e60:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8021e64:	6800      	ldr	r0, [r0, #0]
 8021e66:	6883      	ldr	r3, [r0, #8]
 8021e68:	b123      	cbz	r3, 8021e74 <conn_mngr_disconnect+0x1b0>
 8021e6a:	2000      	movs	r0, #0
 8021e6c:	4649      	mov	r1, r9
 8021e6e:	4642      	mov	r2, r8
 8021e70:	2700      	movs	r7, #0
 8021e72:	4798      	blx	r3
 8021e74:	4638      	mov	r0, r7
 8021e76:	b005      	add	sp, #20
 8021e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08021e7c <conn_mngr_update_local_clk_acc>:
 8021e7c:	b510      	push	{r4, lr}
 8021e7e:	b082      	sub	sp, #8
 8021e80:	f649 7438 	movw	r4, #40760	@ 0x9f38
 8021e84:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 8021e88:	78e2      	ldrb	r2, [r4, #3]
 8021e8a:	4601      	mov	r1, r0
 8021e8c:	2000      	movs	r0, #0
 8021e8e:	f88d 0007 	strb.w	r0, [sp, #7]
 8021e92:	b10a      	cbz	r2, 8021e98 <conn_mngr_update_local_clk_acc+0x1c>
 8021e94:	4608      	mov	r0, r1
 8021e96:	70e1      	strb	r1, [r4, #3]
 8021e98:	7822      	ldrb	r2, [r4, #0]
 8021e9a:	7861      	ldrb	r1, [r4, #1]
 8021e9c:	3a01      	subs	r2, #1
 8021e9e:	0613      	lsls	r3, r2, #24
 8021ea0:	7022      	strb	r2, [r4, #0]
 8021ea2:	bf08      	it	eq
 8021ea4:	2901      	cmpeq	r1, #1
 8021ea6:	d116      	bne.n	8021ed6 <conn_mngr_update_local_clk_acc+0x5a>
 8021ea8:	f646 5148 	movw	r1, #27976	@ 0x6d48
 8021eac:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8021eb0:	6809      	ldr	r1, [r1, #0]
 8021eb2:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8021eb4:	b10a      	cbz	r2, 8021eba <conn_mngr_update_local_clk_acc+0x3e>
 8021eb6:	78a1      	ldrb	r1, [r4, #2]
 8021eb8:	4790      	blx	r2
 8021eba:	2000      	movs	r0, #0
 8021ebc:	7060      	strb	r0, [r4, #1]
 8021ebe:	70e0      	strb	r0, [r4, #3]
 8021ec0:	f10d 0007 	add.w	r0, sp, #7
 8021ec4:	f000 fcd9 	bl	802287a <db_get_slp_clk_accuracy>
 8021ec8:	78a0      	ldrb	r0, [r4, #2]
 8021eca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8021ece:	4288      	cmp	r0, r1
 8021ed0:	bf38      	it	cc
 8021ed2:	f7ed fbb1 	blcc	800f638 <evnt_utils_update_sleep_clock_accuracy>
 8021ed6:	b002      	add	sp, #8
 8021ed8:	bd10      	pop	{r4, pc}
	...

08021edc <conn_mngr_trigger_sleep_clock_accuracy_update>:
 8021edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ede:	b081      	sub	sp, #4
 8021ee0:	f649 72d4 	movw	r2, #40916	@ 0x9fd4
 8021ee4:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8021ee8:	7812      	ldrb	r2, [r2, #0]
 8021eea:	b3ca      	cbz	r2, 8021f60 <conn_mngr_trigger_sleep_clock_accuracy_update+0x84>
 8021eec:	f649 7518 	movw	r5, #40728	@ 0x9f18
 8021ef0:	4604      	mov	r4, r0
 8021ef2:	4288      	cmp	r0, r1
 8021ef4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8021ef8:	d20d      	bcs.n	8021f16 <conn_mngr_trigger_sleep_clock_accuracy_update+0x3a>
 8021efa:	2000      	movs	r0, #0
 8021efc:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
 8021f00:	b131      	cbz	r1, 8021f10 <conn_mngr_trigger_sleep_clock_accuracy_update+0x34>
 8021f02:	f891 204e 	ldrb.w	r2, [r1, #78]	@ 0x4e
 8021f06:	b3b2      	cbz	r2, 8021f76 <conn_mngr_trigger_sleep_clock_accuracy_update+0x9a>
 8021f08:	f891 1049 	ldrb.w	r1, [r1, #73]	@ 0x49
 8021f0c:	0749      	lsls	r1, r1, #29
 8021f0e:	d532      	bpl.n	8021f76 <conn_mngr_trigger_sleep_clock_accuracy_update+0x9a>
 8021f10:	3001      	adds	r0, #1
 8021f12:	2808      	cmp	r0, #8
 8021f14:	d1f2      	bne.n	8021efc <conn_mngr_trigger_sleep_clock_accuracy_update+0x20>
 8021f16:	2600      	movs	r6, #0
 8021f18:	2710      	movs	r7, #16
 8021f1a:	2000      	movs	r0, #0
 8021f1c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
 8021f20:	b1d1      	cbz	r1, 8021f58 <conn_mngr_trigger_sleep_clock_accuracy_update+0x7c>
 8021f22:	b2b0      	uxth	r0, r6
 8021f24:	4621      	mov	r1, r4
 8021f26:	f7f0 fe6e 	bl	8012c06 <llcp_clock_accuracy_req>
 8021f2a:	283a      	cmp	r0, #58	@ 0x3a
 8021f2c:	d114      	bne.n	8021f58 <conn_mngr_trigger_sleep_clock_accuracy_update+0x7c>
 8021f2e:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8021f32:	2200      	movs	r2, #0
 8021f34:	2101      	movs	r1, #1
 8021f36:	bf00      	nop
 8021f38:	4402      	add	r2, r0
 8021f3a:	f892 3146 	ldrb.w	r3, [r2, #326]	@ 0x146
 8021f3e:	2bff      	cmp	r3, #255	@ 0xff
 8021f40:	d006      	beq.n	8021f50 <conn_mngr_trigger_sleep_clock_accuracy_update+0x74>
 8021f42:	07c9      	lsls	r1, r1, #31
 8021f44:	f04f 0201 	mov.w	r2, #1
 8021f48:	f04f 0100 	mov.w	r1, #0
 8021f4c:	d1f4      	bne.n	8021f38 <conn_mngr_trigger_sleep_clock_accuracy_update+0x5c>
 8021f4e:	e009      	b.n	8021f64 <conn_mngr_trigger_sleep_clock_accuracy_update+0x88>
 8021f50:	f502 70a3 	add.w	r0, r2, #326	@ 0x146
 8021f54:	7007      	strb	r7, [r0, #0]
 8021f56:	2000      	movs	r0, #0
 8021f58:	3601      	adds	r6, #1
 8021f5a:	2e08      	cmp	r6, #8
 8021f5c:	d1de      	bne.n	8021f1c <conn_mngr_trigger_sleep_clock_accuracy_update+0x40>
 8021f5e:	e002      	b.n	8021f66 <conn_mngr_trigger_sleep_clock_accuracy_update+0x8a>
 8021f60:	2002      	movs	r0, #2
 8021f62:	e00c      	b.n	8021f7e <conn_mngr_trigger_sleep_clock_accuracy_update+0xa2>
 8021f64:	203a      	movs	r0, #58	@ 0x3a
 8021f66:	f649 7138 	movw	r1, #40760	@ 0x9f38
 8021f6a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8021f6e:	2201      	movs	r2, #1
 8021f70:	708c      	strb	r4, [r1, #2]
 8021f72:	704a      	strb	r2, [r1, #1]
 8021f74:	e003      	b.n	8021f7e <conn_mngr_trigger_sleep_clock_accuracy_update+0xa2>
 8021f76:	2043      	movs	r0, #67	@ 0x43
 8021f78:	f7f9 fd1c 	bl	801b9b4 <bsp_debug_gpio_toggle>
 8021f7c:	200c      	movs	r0, #12
 8021f7e:	b001      	add	sp, #4
 8021f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08021f84 <conn_mngr_update_sca_for_running_conn>:
 8021f84:	f649 7c18 	movw	ip, #40728	@ 0x9f18
 8021f88:	2100      	movs	r1, #0
 8021f8a:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8021f8e:	bf00      	nop
 8021f90:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
 8021f94:	b13b      	cbz	r3, 8021fa6 <conn_mngr_update_sca_for_running_conn+0x22>
 8021f96:	f893 2127 	ldrb.w	r2, [r3, #295]	@ 0x127
 8021f9a:	2a01      	cmp	r2, #1
 8021f9c:	bf14      	ite	ne
 8021f9e:	f883 0021 	strbne.w	r0, [r3, #33]	@ 0x21
 8021fa2:	f883 0128 	strbeq.w	r0, [r3, #296]	@ 0x128
 8021fa6:	3101      	adds	r1, #1
 8021fa8:	2908      	cmp	r1, #8
 8021faa:	bf08      	it	eq
 8021fac:	4770      	bxeq	lr
 8021fae:	e7ef      	b.n	8021f90 <conn_mngr_update_sca_for_running_conn+0xc>

08021fb0 <conn_mngr_send_le_phy_update_complete_event>:
 8021fb0:	b510      	push	{r4, lr}
 8021fb2:	f646 5c48 	movw	ip, #27976	@ 0x6d48
 8021fb6:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8021fba:	f8dc e000 	ldr.w	lr, [ip]
 8021fbe:	f8de 4038 	ldr.w	r4, [lr, #56]	@ 0x38
 8021fc2:	b18c      	cbz	r4, 8021fe8 <conn_mngr_send_le_phy_update_complete_event+0x38>
 8021fc4:	4694      	mov	ip, r2
 8021fc6:	460a      	mov	r2, r1
 8021fc8:	2a04      	cmp	r2, #4
 8021fca:	f8b0 10de 	ldrh.w	r1, [r0, #222]	@ 0xde
 8021fce:	bf08      	it	eq
 8021fd0:	2203      	moveq	r2, #3
 8021fd2:	f1bc 0f04 	cmp.w	ip, #4
 8021fd6:	bf08      	it	eq
 8021fd8:	f04f 0c03 	moveq.w	ip, #3
 8021fdc:	4618      	mov	r0, r3
 8021fde:	4663      	mov	r3, ip
 8021fe0:	46a4      	mov	ip, r4
 8021fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fe6:	4760      	bx	ip
 8021fe8:	bd10      	pop	{r4, pc}

08021fea <conn_mngr_set_conn_tx_power_level>:
 8021fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021fee:	b082      	sub	sp, #8
 8021ff0:	4605      	mov	r5, r0
 8021ff2:	2000      	movs	r0, #0
 8021ff4:	460c      	mov	r4, r1
 8021ff6:	f88d 0007 	strb.w	r0, [sp, #7]
 8021ffa:	f88d 0006 	strb.w	r0, [sp, #6]
 8021ffe:	4628      	mov	r0, r5
 8022000:	2101      	movs	r1, #1
 8022002:	2d00      	cmp	r5, #0
 8022004:	bf18      	it	ne
 8022006:	2001      	movne	r0, #1
 8022008:	f7f9 fc89 	bl	801b91e <bsp_assert>
 802200c:	4620      	mov	r0, r4
 802200e:	2101      	movs	r1, #1
 8022010:	2c00      	cmp	r4, #0
 8022012:	bf18      	it	ne
 8022014:	2001      	movne	r0, #1
 8022016:	f7f9 fc82 	bl	801b91e <bsp_assert>
 802201a:	8828      	ldrh	r0, [r5, #0]
 802201c:	2807      	cmp	r0, #7
 802201e:	d81a      	bhi.n	8022056 <conn_mngr_set_conn_tx_power_level+0x6c>
 8022020:	f649 7118 	movw	r1, #40728	@ 0x9f18
 8022024:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022028:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 802202c:	b198      	cbz	r0, 8022056 <conn_mngr_set_conn_tx_power_level+0x6c>
 802202e:	78a9      	ldrb	r1, [r5, #2]
 8022030:	1e4a      	subs	r2, r1, #1
 8022032:	2a03      	cmp	r2, #3
 8022034:	d813      	bhi.n	802205e <conn_mngr_set_conn_tx_power_level+0x74>
 8022036:	f890 212e 	ldrb.w	r2, [r0, #302]	@ 0x12e
 802203a:	4291      	cmp	r1, r2
 802203c:	d011      	beq.n	8022062 <conn_mngr_set_conn_tx_power_level+0x78>
 802203e:	f081 0303 	eor.w	r3, r1, #3
 8022042:	f082 0204 	eor.w	r2, r2, #4
 8022046:	431a      	orrs	r2, r3
 8022048:	fab2 f282 	clz	r2, r2
 802204c:	0952      	lsrs	r2, r2, #5
 802204e:	d108      	bne.n	8022062 <conn_mngr_set_conn_tx_power_level+0x78>
 8022050:	207e      	movs	r0, #126	@ 0x7e
 8022052:	7020      	strb	r0, [r4, #0]
 8022054:	e02b      	b.n	80220ae <conn_mngr_set_conn_tx_power_level+0xc4>
 8022056:	2002      	movs	r0, #2
 8022058:	b002      	add	sp, #8
 802205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802205e:	2011      	movs	r0, #17
 8022060:	e7fa      	b.n	8022058 <conn_mngr_set_conn_tx_power_level+0x6e>
 8022062:	f500 78a2 	add.w	r8, r0, #324	@ 0x144
 8022066:	f200 1745 	addw	r7, r0, #325	@ 0x145
 802206a:	4640      	mov	r0, r8
 802206c:	2903      	cmp	r1, #3
 802206e:	bf08      	it	eq
 8022070:	4638      	moveq	r0, r7
 8022072:	7806      	ldrb	r6, [r0, #0]
 8022074:	f10d 0007 	add.w	r0, sp, #7
 8022078:	f10d 0106 	add.w	r1, sp, #6
 802207c:	f7fc f957 	bl	801e32e <ll_tx_pwr_if_get_min_max_supprtd_tx_power_levels>
 8022080:	78e8      	ldrb	r0, [r5, #3]
 8022082:	4286      	cmp	r6, r0
 8022084:	d00c      	beq.n	80220a0 <conn_mngr_set_conn_tx_power_level+0xb6>
 8022086:	b240      	sxtb	r0, r0
 8022088:	2100      	movs	r1, #0
 802208a:	2201      	movs	r2, #1
 802208c:	f7fc f962 	bl	801e354 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 8022090:	f247 3104 	movw	r1, #29444	@ 0x7304
 8022094:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022098:	6809      	ldr	r1, [r1, #0]
 802209a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802209e:	78c6      	ldrb	r6, [r0, #3]
 80220a0:	7026      	strb	r6, [r4, #0]
 80220a2:	78a8      	ldrb	r0, [r5, #2]
 80220a4:	2803      	cmp	r0, #3
 80220a6:	bf14      	ite	ne
 80220a8:	f888 6000 	strbne.w	r6, [r8]
 80220ac:	703e      	strbeq	r6, [r7, #0]
 80220ae:	2000      	movs	r0, #0
 80220b0:	e7d2      	b.n	8022058 <conn_mngr_set_conn_tx_power_level+0x6e>
	...

080220b4 <conn_mngr_get_link_status>:
 80220b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220b8:	f649 7518 	movw	r5, #40728	@ 0x9f18
 80220bc:	4614      	mov	r4, r2
 80220be:	4688      	mov	r8, r1
 80220c0:	4606      	mov	r6, r0
 80220c2:	2700      	movs	r7, #0
 80220c4:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 80220c8:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 80220cc:	b381      	cbz	r1, 8022130 <conn_mngr_get_link_status+0x7c>
 80220ce:	7820      	ldrb	r0, [r4, #0]
 80220d0:	5c32      	ldrb	r2, [r6, r0]
 80220d2:	b18a      	cbz	r2, 80220f8 <conn_mngr_get_link_status+0x44>
 80220d4:	3001      	adds	r0, #1
 80220d6:	b2c1      	uxtb	r1, r0
 80220d8:	7020      	strb	r0, [r4, #0]
 80220da:	290a      	cmp	r1, #10
 80220dc:	f04f 0000 	mov.w	r0, #0
 80220e0:	f04f 0101 	mov.w	r1, #1
 80220e4:	bf38      	it	cc
 80220e6:	2001      	movcc	r0, #1
 80220e8:	f7f9 fc19 	bl	801b91e <bsp_assert>
 80220ec:	7820      	ldrb	r0, [r4, #0]
 80220ee:	5c31      	ldrb	r1, [r6, r0]
 80220f0:	2900      	cmp	r1, #0
 80220f2:	d1ef      	bne.n	80220d4 <conn_mngr_get_link_status+0x20>
 80220f4:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
 80220f8:	f891 1127 	ldrb.w	r1, [r1, #295]	@ 0x127
 80220fc:	b121      	cbz	r1, 8022108 <conn_mngr_get_link_status+0x54>
 80220fe:	2901      	cmp	r1, #1
 8022100:	d104      	bne.n	802210c <conn_mngr_get_link_status+0x58>
 8022102:	2102      	movs	r1, #2
 8022104:	e001      	b.n	802210a <conn_mngr_get_link_status+0x56>
 8022106:	bf00      	nop
 8022108:	2105      	movs	r1, #5
 802210a:	5431      	strb	r1, [r6, r0]
 802210c:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8022110:	7821      	ldrb	r1, [r4, #0]
 8022112:	f890 00de 	ldrb.w	r0, [r0, #222]	@ 0xde
 8022116:	f808 0011 	strb.w	r0, [r8, r1, lsl #1]
 802211a:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 802211e:	7821      	ldrb	r1, [r4, #0]
 8022120:	f890 00df 	ldrb.w	r0, [r0, #223]	@ 0xdf
 8022124:	eb08 0141 	add.w	r1, r8, r1, lsl #1
 8022128:	7048      	strb	r0, [r1, #1]
 802212a:	7820      	ldrb	r0, [r4, #0]
 802212c:	3001      	adds	r0, #1
 802212e:	7020      	strb	r0, [r4, #0]
 8022130:	3701      	adds	r7, #1
 8022132:	2f08      	cmp	r7, #8
 8022134:	bf08      	it	eq
 8022136:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 802213a:	e7c5      	b.n	80220c8 <conn_mngr_get_link_status+0x14>

0802213c <conn_mngr_post_timer_evnt_clbk>:
 802213c:	b510      	push	{r4, lr}
 802213e:	4604      	mov	r4, r0
 8022140:	205e      	movs	r0, #94	@ 0x5e
 8022142:	f7f9 fc33 	bl	801b9ac <bsp_debug_gpio_set>
 8022146:	2002      	movs	r0, #2
 8022148:	4621      	mov	r1, r4
 802214a:	f7fb fae0 	bl	801d70e <emngr_post_event>
 802214e:	205e      	movs	r0, #94	@ 0x5e
 8022150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022154:	f7f9 bc2c 	b.w	801b9b0 <bsp_debug_gpio_clear>

08022158 <conn_mngr_pkt_transmited_received_cbk>:
 8022158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802215c:	b083      	sub	sp, #12
 802215e:	4604      	mov	r4, r0
 8022160:	2000      	movs	r0, #0
 8022162:	f8ad 000a 	strh.w	r0, [sp, #10]
 8022166:	207c      	movs	r0, #124	@ 0x7c
 8022168:	460f      	mov	r7, r1
 802216a:	f7f9 fc1f 	bl	801b9ac <bsp_debug_gpio_set>
 802216e:	2c00      	cmp	r4, #0
 8022170:	f000 80ea 	beq.w	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 8022174:	f897 0020 	ldrb.w	r0, [r7, #32]
 8022178:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 802217c:	7f3a      	ldrb	r2, [r7, #28]
 802217e:	4626      	mov	r6, r4
 8022180:	4408      	add	r0, r1
 8022182:	f836 bfde 	ldrh.w	fp, [r6, #222]!
 8022186:	4290      	cmp	r0, r2
 8022188:	bf88      	it	hi
 802218a:	4602      	movhi	r2, r0
 802218c:	b2d1      	uxtb	r1, r2
 802218e:	4620      	mov	r0, r4
 8022190:	f7ef fa10 	bl	80115b4 <llcp_check_update_prcdur>
 8022194:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 8022198:	f104 0908 	add.w	r9, r4, #8
 802219c:	f884 0152 	strb.w	r0, [r4, #338]	@ 0x152
 80221a0:	4648      	mov	r0, r9
 80221a2:	4639      	mov	r1, r7
 80221a4:	f7fb f939 	bl	801d41a <ble_time_set>
 80221a8:	f894 013a 	ldrb.w	r0, [r4, #314]	@ 0x13a
 80221ac:	b110      	cbz	r0, 80221b4 <conn_mngr_pkt_transmited_received_cbk+0x5c>
 80221ae:	4620      	mov	r0, r4
 80221b0:	f000 f9d6 	bl	8022560 <conn_mngr_send_inst_cntrl_hci_evnt>
 80221b4:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 80221b8:	287f      	cmp	r0, #127	@ 0x7f
 80221ba:	bf08      	it	eq
 80221bc:	f897 0023 	ldrbeq.w	r0, [r7, #35]	@ 0x23
 80221c0:	f884 012b 	strb.w	r0, [r4, #299]	@ 0x12b
 80221c4:	4620      	mov	r0, r4
 80221c6:	f7fe fe20 	bl	8020e0a <conn_mngr_sprvsn_timer_set>
 80221ca:	46ba      	mov	sl, r7
 80221cc:	f81a 0f27 	ldrb.w	r0, [sl, #39]!
 80221d0:	f81a 1c0b 	ldrb.w	r1, [sl, #-11]
 80221d4:	1a08      	subs	r0, r1, r0
 80221d6:	d00d      	beq.n	80221f4 <conn_mngr_pkt_transmited_received_cbk+0x9c>
 80221d8:	f646 5148 	movw	r1, #27976	@ 0x6d48
 80221dc:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80221e0:	6809      	ldr	r1, [r1, #0]
 80221e2:	6a0b      	ldr	r3, [r1, #32]
 80221e4:	b133      	cbz	r3, 80221f4 <conn_mngr_pkt_transmited_received_cbk+0x9c>
 80221e6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80221ea:	f10d 020a 	add.w	r2, sp, #10
 80221ee:	2001      	movs	r0, #1
 80221f0:	4631      	mov	r1, r6
 80221f2:	4798      	blx	r3
 80221f4:	7f78      	ldrb	r0, [r7, #29]
 80221f6:	f649 7818 	movw	r8, #40728	@ 0x9f18
 80221fa:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 80221fe:	b930      	cbnz	r0, 802220e <conn_mngr_pkt_transmited_received_cbk+0xb6>
 8022200:	f897 1020 	ldrb.w	r1, [r7, #32]
 8022204:	b919      	cbnz	r1, 802220e <conn_mngr_pkt_transmited_received_cbk+0xb6>
 8022206:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 802220a:	2900      	cmp	r1, #0
 802220c:	d067      	beq.n	80222de <conn_mngr_pkt_transmited_received_cbk+0x186>
 802220e:	f8b4 10dc 	ldrh.w	r1, [r4, #220]	@ 0xdc
 8022212:	b931      	cbnz	r1, 8022222 <conn_mngr_pkt_transmited_received_cbk+0xca>
 8022214:	f894 1124 	ldrb.w	r1, [r4, #292]	@ 0x124
 8022218:	2902      	cmp	r1, #2
 802221a:	bf04      	itt	eq
 802221c:	8b21      	ldrheq	r1, [r4, #24]
 802221e:	f8a4 10dc 	strheq.w	r1, [r4, #220]	@ 0xdc
 8022222:	b140      	cbz	r0, 8022236 <conn_mngr_pkt_transmited_received_cbk+0xde>
 8022224:	f894 1122 	ldrb.w	r1, [r4, #290]	@ 0x122
 8022228:	2901      	cmp	r1, #1
 802222a:	d104      	bne.n	8022236 <conn_mngr_pkt_transmited_received_cbk+0xde>
 802222c:	f8d4 10e8 	ldr.w	r1, [r4, #232]	@ 0xe8
 8022230:	4408      	add	r0, r1
 8022232:	f8c4 00e8 	str.w	r0, [r4, #232]	@ 0xe8
 8022236:	f897 0020 	ldrb.w	r0, [r7, #32]
 802223a:	b918      	cbnz	r0, 8022244 <conn_mngr_pkt_transmited_received_cbk+0xec>
 802223c:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8022240:	2900      	cmp	r1, #0
 8022242:	d04c      	beq.n	80222de <conn_mngr_pkt_transmited_received_cbk+0x186>
 8022244:	f894 1122 	ldrb.w	r1, [r4, #290]	@ 0x122
 8022248:	3901      	subs	r1, #1
 802224a:	2901      	cmp	r1, #1
 802224c:	d843      	bhi.n	80222d6 <conn_mngr_pkt_transmited_received_cbk+0x17e>
 802224e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8022252:	b338      	cbz	r0, 80222a4 <conn_mngr_pkt_transmited_received_cbk+0x14c>
 8022254:	4298      	cmp	r0, r3
 8022256:	d125      	bne.n	80222a4 <conn_mngr_pkt_transmited_received_cbk+0x14c>
 8022258:	f8d4 10ec 	ldr.w	r1, [r4, #236]	@ 0xec
 802225c:	f894 2123 	ldrb.w	r2, [r4, #291]	@ 0x123
 8022260:	4408      	add	r0, r1
 8022262:	2a06      	cmp	r2, #6
 8022264:	f8c4 00ec 	str.w	r0, [r4, #236]	@ 0xec
 8022268:	d035      	beq.n	80222d6 <conn_mngr_pkt_transmited_received_cbk+0x17e>
 802226a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 802226e:	b390      	cbz	r0, 80222d6 <conn_mngr_pkt_transmited_received_cbk+0x17e>
 8022270:	f7fb ff20 	bl	801e0b4 <os_timer_stop>
 8022274:	8ae0      	ldrh	r0, [r4, #22]
 8022276:	f8b4 10d8 	ldrh.w	r1, [r4, #216]	@ 0xd8
 802227a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802227e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8022282:	0880      	lsrs	r0, r0, #2
 8022284:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8022288:	0049      	lsls	r1, r1, #1
 802228a:	eba1 0342 	sub.w	r3, r1, r2, lsl #1
 802228e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	@ 0xd4
 8022292:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8022296:	ea4f 1143 	mov.w	r1, r3, lsl #5
 802229a:	bf38      	it	cc
 802229c:	21a0      	movcc	r1, #160	@ 0xa0
 802229e:	f7fb fe4c 	bl	801df3a <os_timer_start>
 80222a2:	e018      	b.n	80222d6 <conn_mngr_pkt_transmited_received_cbk+0x17e>
 80222a4:	b1b8      	cbz	r0, 80222d6 <conn_mngr_pkt_transmited_received_cbk+0x17e>
 80222a6:	f894 0124 	ldrb.w	r0, [r4, #292]	@ 0x124
 80222aa:	2808      	cmp	r0, #8
 80222ac:	d105      	bne.n	80222ba <conn_mngr_pkt_transmited_received_cbk+0x162>
 80222ae:	4620      	mov	r0, r4
 80222b0:	2100      	movs	r1, #0
 80222b2:	4652      	mov	r2, sl
 80222b4:	f7ef fe81 	bl	8011fba <llcp_process_pkt>
 80222b8:	e00d      	b.n	80222d6 <conn_mngr_pkt_transmited_received_cbk+0x17e>
 80222ba:	68b8      	ldr	r0, [r7, #8]
 80222bc:	b138      	cbz	r0, 80222ce <conn_mngr_pkt_transmited_received_cbk+0x176>
 80222be:	bf00      	nop
 80222c0:	f7f8 fb16 	bl	801a8f0 <free_buff_hdr>
 80222c4:	68b8      	ldr	r0, [r7, #8]
 80222c6:	6840      	ldr	r0, [r0, #4]
 80222c8:	2800      	cmp	r0, #0
 80222ca:	60b8      	str	r0, [r7, #8]
 80222cc:	d1f8      	bne.n	80222c0 <conn_mngr_pkt_transmited_received_cbk+0x168>
 80222ce:	4620      	mov	r0, r4
 80222d0:	213d      	movs	r1, #61	@ 0x3d
 80222d2:	f7ff fcf7 	bl	8021cc4 <conn_mngr_disconnect>
 80222d6:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 80222da:	42a0      	cmp	r0, r4
 80222dc:	d047      	beq.n	802236e <conn_mngr_pkt_transmited_received_cbk+0x216>
 80222de:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 80222e2:	42a0      	cmp	r0, r4
 80222e4:	d12d      	bne.n	8022342 <conn_mngr_pkt_transmited_received_cbk+0x1ea>
 80222e6:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	@ 0xdc
 80222ea:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80222ee:	42a8      	cmp	r0, r5
 80222f0:	d104      	bne.n	80222fc <conn_mngr_pkt_transmited_received_cbk+0x1a4>
 80222f2:	7fb8      	ldrb	r0, [r7, #30]
 80222f4:	b110      	cbz	r0, 80222fc <conn_mngr_pkt_transmited_received_cbk+0x1a4>
 80222f6:	8b20      	ldrh	r0, [r4, #24]
 80222f8:	f8a4 00dc 	strh.w	r0, [r4, #220]	@ 0xdc
 80222fc:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8022300:	f7f9 fae6 	bl	801b8d0 <state_mngr_get_state_type>
 8022304:	2805      	cmp	r0, #5
 8022306:	d118      	bne.n	802233a <conn_mngr_pkt_transmited_received_cbk+0x1e2>
 8022308:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 802230c:	2106      	movs	r1, #6
 802230e:	f7f9 fa8d 	bl	801b82c <state_mngr_update_state>
 8022312:	b9c8      	cbnz	r0, 8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 8022314:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 8022318:	2801      	cmp	r0, #1
 802231a:	d10e      	bne.n	802233a <conn_mngr_pkt_transmited_received_cbk+0x1e2>
 802231c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8022320:	4649      	mov	r1, r9
 8022322:	f7fb f87a 	bl	801d41a <ble_time_set>
 8022326:	2000      	movs	r0, #0
 8022328:	f884 0020 	strb.w	r0, [r4, #32]
 802232c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8022330:	210c      	movs	r1, #12
 8022332:	f8a4 50dc 	strh.w	r5, [r4, #220]	@ 0xdc
 8022336:	f7ec f9da 	bl	800e6ee <evnt_schdlr_conn_params_updtd>
 802233a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 802233e:	f7ec fa05 	bl	800e74c <evnt_schdlr_evnt_updtd>
 8022342:	f894 0123 	ldrb.w	r0, [r4, #291]	@ 0x123
 8022346:	b128      	cbz	r0, 8022354 <conn_mngr_pkt_transmited_received_cbk+0x1fc>
 8022348:	207c      	movs	r0, #124	@ 0x7c
 802234a:	f7f9 fb31 	bl	801b9b0 <bsp_debug_gpio_clear>
 802234e:	b003      	add	sp, #12
 8022350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022354:	f649 783c 	movw	r8, #40764	@ 0x9f3c
 8022358:	f2c2 0800 	movt	r8, #8192	@ 0x2000
 802235c:	f8d8 5000 	ldr.w	r5, [r8]
 8022360:	2d00      	cmp	r5, #0
 8022362:	d06f      	beq.n	8022444 <conn_mngr_pkt_transmited_received_cbk+0x2ec>
 8022364:	8868      	ldrh	r0, [r5, #2]
 8022366:	4558      	cmp	r0, fp
 8022368:	d15e      	bne.n	8022428 <conn_mngr_pkt_transmited_received_cbk+0x2d0>
 802236a:	2700      	movs	r7, #0
 802236c:	e065      	b.n	802243a <conn_mngr_pkt_transmited_received_cbk+0x2e2>
 802236e:	f8cd 9000 	str.w	r9, [sp]
 8022372:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8022376:	8835      	ldrh	r5, [r6, #0]
 8022378:	9601      	str	r6, [sp, #4]
 802237a:	bf00      	nop
 802237c:	f1b9 0f00 	cmp.w	r9, #0
 8022380:	d03e      	beq.n	8022400 <conn_mngr_pkt_transmited_received_cbk+0x2a8>
 8022382:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8022386:	464e      	mov	r6, r9
 8022388:	42a0      	cmp	r0, r4
 802238a:	d133      	bne.n	80223f4 <conn_mngr_pkt_transmited_received_cbk+0x29c>
 802238c:	8971      	ldrh	r1, [r6, #10]
 802238e:	6832      	ldr	r2, [r6, #0]
 8022390:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8022394:	5c50      	ldrb	r0, [r2, r1]
 8022396:	f000 0003 	and.w	r0, r0, #3
 802239a:	2803      	cmp	r0, #3
 802239c:	d108      	bne.n	80223b0 <conn_mngr_pkt_transmited_received_cbk+0x258>
 802239e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80223a2:	4620      	mov	r0, r4
 80223a4:	4631      	mov	r1, r6
 80223a6:	4652      	mov	r2, sl
 80223a8:	f7ef fe07 	bl	8011fba <llcp_process_pkt>
 80223ac:	e7e6      	b.n	802237c <conn_mngr_pkt_transmited_received_cbk+0x224>
 80223ae:	bf00      	nop
 80223b0:	4411      	add	r1, r2
 80223b2:	7849      	ldrb	r1, [r1, #1]
 80223b4:	b1d1      	cbz	r1, 80223ec <conn_mngr_pkt_transmited_received_cbk+0x294>
 80223b6:	1e41      	subs	r1, r0, #1
 80223b8:	2902      	cmp	r1, #2
 80223ba:	d217      	bcs.n	80223ec <conn_mngr_pkt_transmited_received_cbk+0x294>
 80223bc:	f894 111f 	ldrb.w	r1, [r4, #287]	@ 0x11f
 80223c0:	29aa      	cmp	r1, #170	@ 0xaa
 80223c2:	d077      	beq.n	80224b4 <conn_mngr_pkt_transmited_received_cbk+0x35c>
 80223c4:	f646 5148 	movw	r1, #27976	@ 0x6d48
 80223c8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80223cc:	6809      	ldr	r1, [r1, #0]
 80223ce:	3802      	subs	r0, #2
 80223d0:	fab0 f080 	clz	r0, r0
 80223d4:	7bb3      	ldrb	r3, [r6, #14]
 80223d6:	69ca      	ldr	r2, [r1, #28]
 80223d8:	0940      	lsrs	r0, r0, #5
 80223da:	4318      	orrs	r0, r3
 80223dc:	2a00      	cmp	r2, #0
 80223de:	73b0      	strb	r0, [r6, #14]
 80223e0:	d0cc      	beq.n	802237c <conn_mngr_pkt_transmited_received_cbk+0x224>
 80223e2:	4628      	mov	r0, r5
 80223e4:	4631      	mov	r1, r6
 80223e6:	4790      	blx	r2
 80223e8:	e7c8      	b.n	802237c <conn_mngr_pkt_transmited_received_cbk+0x224>
 80223ea:	bf00      	nop
 80223ec:	4630      	mov	r0, r6
 80223ee:	f7f8 fa7f 	bl	801a8f0 <free_buff_hdr>
 80223f2:	e7c3      	b.n	802237c <conn_mngr_pkt_transmited_received_cbk+0x224>
 80223f4:	4630      	mov	r0, r6
 80223f6:	f7f8 fa7b 	bl	801a8f0 <free_buff_hdr>
 80223fa:	6876      	ldr	r6, [r6, #4]
 80223fc:	2e00      	cmp	r6, #0
 80223fe:	d1f9      	bne.n	80223f4 <conn_mngr_pkt_transmited_received_cbk+0x29c>
 8022400:	e9dd 9600 	ldrd	r9, r6, [sp]
 8022404:	f89a 0000 	ldrb.w	r0, [sl]
 8022408:	2800      	cmp	r0, #0
 802240a:	f43f af68 	beq.w	80222de <conn_mngr_pkt_transmited_received_cbk+0x186>
 802240e:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8022412:	42a0      	cmp	r0, r4
 8022414:	f47f af63 	bne.w	80222de <conn_mngr_pkt_transmited_received_cbk+0x186>
 8022418:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 802241c:	4620      	mov	r0, r4
 802241e:	2100      	movs	r1, #0
 8022420:	4652      	mov	r2, sl
 8022422:	f7ef fdca 	bl	8011fba <llcp_process_pkt>
 8022426:	e75a      	b.n	80222de <conn_mngr_pkt_transmited_received_cbk+0x186>
 8022428:	4628      	mov	r0, r5
 802242a:	bf00      	nop
 802242c:	6945      	ldr	r5, [r0, #20]
 802242e:	b14d      	cbz	r5, 8022444 <conn_mngr_pkt_transmited_received_cbk+0x2ec>
 8022430:	8869      	ldrh	r1, [r5, #2]
 8022432:	4607      	mov	r7, r0
 8022434:	4559      	cmp	r1, fp
 8022436:	4628      	mov	r0, r5
 8022438:	d1f8      	bne.n	802242c <conn_mngr_pkt_transmited_received_cbk+0x2d4>
 802243a:	4628      	mov	r0, r5
 802243c:	f7f0 fc32 	bl	8012ca4 <llcp_re_exec_host_control>
 8022440:	283a      	cmp	r0, #58	@ 0x3a
 8022442:	d11b      	bne.n	802247c <conn_mngr_pkt_transmited_received_cbk+0x324>
 8022444:	f894 0146 	ldrb.w	r0, [r4, #326]	@ 0x146
 8022448:	28ff      	cmp	r0, #255	@ 0xff
 802244a:	f43f af7d 	beq.w	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 802244e:	f894 1147 	ldrb.w	r1, [r4, #327]	@ 0x147
 8022452:	22ff      	movs	r2, #255	@ 0xff
 8022454:	29ff      	cmp	r1, #255	@ 0xff
 8022456:	bf1a      	itte	ne
 8022458:	f884 1146 	strbne.w	r1, [r4, #326]	@ 0x146
 802245c:	2101      	movne	r1, #1
 802245e:	2100      	moveq	r1, #0
 8022460:	4421      	add	r1, r4
 8022462:	2802      	cmp	r0, #2
 8022464:	f881 2146 	strb.w	r2, [r1, #326]	@ 0x146
 8022468:	d017      	beq.n	802249a <conn_mngr_pkt_transmited_received_cbk+0x342>
 802246a:	2810      	cmp	r0, #16
 802246c:	d019      	beq.n	80224a2 <conn_mngr_pkt_transmited_received_cbk+0x34a>
 802246e:	2803      	cmp	r0, #3
 8022470:	f47f af6a 	bne.w	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 8022474:	8830      	ldrh	r0, [r6, #0]
 8022476:	f7ee ff3d 	bl	80112f4 <llcp_read_remote_version>
 802247a:	e765      	b.n	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 802247c:	b10f      	cbz	r7, 8022482 <conn_mngr_pkt_transmited_received_cbk+0x32a>
 802247e:	6968      	ldr	r0, [r5, #20]
 8022480:	6178      	str	r0, [r7, #20]
 8022482:	4628      	mov	r0, r5
 8022484:	f7fb fb1a 	bl	801dabc <os_mem_pool_free>
 8022488:	f8d8 0000 	ldr.w	r0, [r8]
 802248c:	42a8      	cmp	r0, r5
 802248e:	f47f af5b 	bne.w	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 8022492:	6968      	ldr	r0, [r5, #20]
 8022494:	f8c8 0000 	str.w	r0, [r8]
 8022498:	e756      	b.n	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 802249a:	4620      	mov	r0, r4
 802249c:	f7ef fcb0 	bl	8011e00 <llcp_update_chnl_map_per_connection>
 80224a0:	e752      	b.n	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 80224a2:	f649 7138 	movw	r1, #40760	@ 0x9f38
 80224a6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80224aa:	8830      	ldrh	r0, [r6, #0]
 80224ac:	7889      	ldrb	r1, [r1, #2]
 80224ae:	f7f0 fbaa 	bl	8012c06 <llcp_clock_accuracy_req>
 80224b2:	e749      	b.n	8022348 <conn_mngr_pkt_transmited_received_cbk+0x1f0>
 80224b4:	4620      	mov	r0, r4
 80224b6:	213d      	movs	r1, #61	@ 0x3d
 80224b8:	f7ff fc04 	bl	8021cc4 <conn_mngr_disconnect>
 80224bc:	e9dd 9600 	ldrd	r9, r6, [sp]
 80224c0:	e70d      	b.n	80222de <conn_mngr_pkt_transmited_received_cbk+0x186>

080224c2 <conn_mngr_error_cbk>:
 80224c2:	b570      	push	{r4, r5, r6, lr}
 80224c4:	4604      	mov	r4, r0
 80224c6:	f8b0 00de 	ldrh.w	r0, [r0, #222]	@ 0xde
 80224ca:	f649 7218 	movw	r2, #40728	@ 0x9f18
 80224ce:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80224d2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80224d6:	42a0      	cmp	r0, r4
 80224d8:	d000      	beq.n	80224dc <conn_mngr_error_cbk+0x1a>
 80224da:	bd70      	pop	{r4, r5, r6, pc}
 80224dc:	f891 002c 	ldrb.w	r0, [r1, #44]	@ 0x2c
 80224e0:	460e      	mov	r6, r1
 80224e2:	b370      	cbz	r0, 8022542 <conn_mngr_error_cbk+0x80>
 80224e4:	0780      	lsls	r0, r0, #30
 80224e6:	d52f      	bpl.n	8022548 <conn_mngr_error_cbk+0x86>
 80224e8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80224ec:	f7f9 f9f0 	bl	801b8d0 <state_mngr_get_state_type>
 80224f0:	2805      	cmp	r0, #5
 80224f2:	d129      	bne.n	8022548 <conn_mngr_error_cbk+0x86>
 80224f4:	f104 0508 	add.w	r5, r4, #8
 80224f8:	4628      	mov	r0, r5
 80224fa:	4631      	mov	r1, r6
 80224fc:	f7fa ff8d 	bl	801d41a <ble_time_set>
 8022500:	4620      	mov	r0, r4
 8022502:	f7fe fc82 	bl	8020e0a <conn_mngr_sprvsn_timer_set>
 8022506:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 802250a:	2106      	movs	r1, #6
 802250c:	f7f9 f98e 	bl	801b82c <state_mngr_update_state>
 8022510:	2800      	cmp	r0, #0
 8022512:	bf18      	it	ne
 8022514:	bd70      	popne	{r4, r5, r6, pc}
 8022516:	f894 0127 	ldrb.w	r0, [r4, #295]	@ 0x127
 802251a:	2801      	cmp	r0, #1
 802251c:	d114      	bne.n	8022548 <conn_mngr_error_cbk+0x86>
 802251e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8022522:	4629      	mov	r1, r5
 8022524:	f7fa ff79 	bl	801d41a <ble_time_set>
 8022528:	2000      	movs	r0, #0
 802252a:	f884 0020 	strb.w	r0, [r4, #32]
 802252e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8022532:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8022536:	f8a4 10dc 	strh.w	r1, [r4, #220]	@ 0xdc
 802253a:	210c      	movs	r1, #12
 802253c:	f7ec f8d7 	bl	800e6ee <evnt_schdlr_conn_params_updtd>
 8022540:	e002      	b.n	8022548 <conn_mngr_error_cbk+0x86>
 8022542:	4620      	mov	r0, r4
 8022544:	f7fe fc61 	bl	8020e0a <conn_mngr_sprvsn_timer_set>
 8022548:	f894 013a 	ldrb.w	r0, [r4, #314]	@ 0x13a
 802254c:	b110      	cbz	r0, 8022554 <conn_mngr_error_cbk+0x92>
 802254e:	4620      	mov	r0, r4
 8022550:	f000 f806 	bl	8022560 <conn_mngr_send_inst_cntrl_hci_evnt>
 8022554:	f8d4 00c0 	ldr.w	r0, [r4, #192]	@ 0xc0
 8022558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802255c:	f7ec b8f6 	b.w	800e74c <evnt_schdlr_evnt_updtd>

08022560 <conn_mngr_send_inst_cntrl_hci_evnt>:
 8022560:	b570      	push	{r4, r5, r6, lr}
 8022562:	b082      	sub	sp, #8
 8022564:	4604      	mov	r4, r0
 8022566:	f890 013a 	ldrb.w	r0, [r0, #314]	@ 0x13a
 802256a:	2801      	cmp	r0, #1
 802256c:	d019      	beq.n	80225a2 <conn_mngr_send_inst_cntrl_hci_evnt+0x42>
 802256e:	2804      	cmp	r0, #4
 8022570:	d025      	beq.n	80225be <conn_mngr_send_inst_cntrl_hci_evnt+0x5e>
 8022572:	2803      	cmp	r0, #3
 8022574:	d147      	bne.n	8022606 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 8022576:	f646 5048 	movw	r0, #27976	@ 0x6d48
 802257a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802257e:	6800      	ldr	r0, [r0, #0]
 8022580:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8022582:	2e00      	cmp	r6, #0
 8022584:	d03f      	beq.n	8022606 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 8022586:	f894 212e 	ldrb.w	r2, [r4, #302]	@ 0x12e
 802258a:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 802258e:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 8022592:	2a04      	cmp	r2, #4
 8022594:	bf08      	it	eq
 8022596:	2203      	moveq	r2, #3
 8022598:	2b04      	cmp	r3, #4
 802259a:	bf08      	it	eq
 802259c:	2303      	moveq	r3, #3
 802259e:	2000      	movs	r0, #0
 80225a0:	e030      	b.n	8022604 <conn_mngr_send_inst_cntrl_hci_evnt+0xa4>
 80225a2:	f646 5048 	movw	r0, #27976	@ 0x6d48
 80225a6:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80225aa:	6800      	ldr	r0, [r0, #0]
 80225ac:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 80225ae:	b356      	cbz	r6, 8022606 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 80225b0:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80225b4:	8ae2      	ldrh	r2, [r4, #22]
 80225b6:	8b23      	ldrh	r3, [r4, #24]
 80225b8:	8b65      	ldrh	r5, [r4, #26]
 80225ba:	2000      	movs	r0, #0
 80225bc:	e021      	b.n	8022602 <conn_mngr_send_inst_cntrl_hci_evnt+0xa2>
 80225be:	f646 5648 	movw	r6, #27976	@ 0x6d48
 80225c2:	f2c2 0600 	movt	r6, #8192	@ 0x2000
 80225c6:	6830      	ldr	r0, [r6, #0]
 80225c8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80225ca:	b175      	cbz	r5, 80225ea <conn_mngr_send_inst_cntrl_hci_evnt+0x8a>
 80225cc:	f894 212e 	ldrb.w	r2, [r4, #302]	@ 0x12e
 80225d0:	f894 312f 	ldrb.w	r3, [r4, #303]	@ 0x12f
 80225d4:	f8b4 10de 	ldrh.w	r1, [r4, #222]	@ 0xde
 80225d8:	2a04      	cmp	r2, #4
 80225da:	bf08      	it	eq
 80225dc:	2203      	moveq	r2, #3
 80225de:	2000      	movs	r0, #0
 80225e0:	2b04      	cmp	r3, #4
 80225e2:	bf08      	it	eq
 80225e4:	2303      	moveq	r3, #3
 80225e6:	47a8      	blx	r5
 80225e8:	6830      	ldr	r0, [r6, #0]
 80225ea:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 80225ec:	b15e      	cbz	r6, 8022606 <conn_mngr_send_inst_cntrl_hci_evnt+0xa6>
 80225ee:	f8b4 00de 	ldrh.w	r0, [r4, #222]	@ 0xde
 80225f2:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	@ 0xac
 80225f6:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	@ 0xae
 80225fa:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80225fe:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	@ 0xaa
 8022602:	9500      	str	r5, [sp, #0]
 8022604:	47b0      	blx	r6
 8022606:	2000      	movs	r0, #0
 8022608:	f884 013a 	strb.w	r0, [r4, #314]	@ 0x13a
 802260c:	b002      	add	sp, #8
 802260e:	bd70      	pop	{r4, r5, r6, pc}

08022610 <db_reset>:
 8022610:	b5b0      	push	{r4, r5, r7, lr}
 8022612:	f649 70da 	movw	r0, #40922	@ 0x9fda
 8022616:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802261a:	2101      	movs	r1, #1
 802261c:	7001      	strb	r1, [r0, #0]
 802261e:	f649 70dc 	movw	r0, #40924	@ 0x9fdc
 8022622:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022626:	7001      	strb	r1, [r0, #0]
 8022628:	f649 70d6 	movw	r0, #40918	@ 0x9fd6
 802262c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022630:	211b      	movs	r1, #27
 8022632:	8001      	strh	r1, [r0, #0]
 8022634:	f649 70d8 	movw	r0, #40920	@ 0x9fd8
 8022638:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802263c:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8022640:	8001      	strh	r1, [r0, #0]
 8022642:	200a      	movs	r0, #10
 8022644:	2100      	movs	r1, #0
 8022646:	2201      	movs	r2, #1
 8022648:	2500      	movs	r5, #0
 802264a:	f7fb fe83 	bl	801e354 <ll_tx_pwr_if_get_tx_pwr_table_offset>
 802264e:	f247 3104 	movw	r1, #29444	@ 0x7304
 8022652:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022656:	6809      	ldr	r1, [r1, #0]
 8022658:	f24e 64bc 	movw	r4, #59068	@ 0xe6bc
 802265c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8022660:	f649 71dd 	movw	r1, #40925	@ 0x9fdd
 8022664:	78c0      	ldrb	r0, [r0, #3]
 8022666:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 802266a:	7008      	strb	r0, [r1, #0]
 802266c:	f649 70de 	movw	r0, #40926	@ 0x9fde
 8022670:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022674:	8005      	strh	r5, [r0, #0]
 8022676:	f649 70e0 	movw	r0, #40928	@ 0x9fe0
 802267a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802267e:	8005      	strh	r5, [r0, #0]
 8022680:	f649 70e2 	movw	r0, #40930	@ 0x9fe2
 8022684:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022688:	7005      	strb	r5, [r0, #0]
 802268a:	f240 502e 	movw	r0, #1326	@ 0x52e
 802268e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022692:	2107      	movs	r1, #7
 8022694:	7001      	strb	r1, [r0, #0]
 8022696:	f240 502f 	movw	r0, #1327	@ 0x52f
 802269a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802269e:	7001      	strb	r1, [r0, #0]
 80226a0:	f240 5030 	movw	r0, #1328	@ 0x530
 80226a4:	f6c0 0402 	movt	r4, #2050	@ 0x802
 80226a8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80226ac:	4621      	mov	r1, r4
 80226ae:	2205      	movs	r2, #5
 80226b0:	f7fe f8c8 	bl	8020844 <ble_memcpy>
 80226b4:	f240 5035 	movw	r0, #1333	@ 0x535
 80226b8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80226bc:	4621      	mov	r1, r4
 80226be:	2205      	movs	r2, #5
 80226c0:	f7fe f8c0 	bl	8020844 <ble_memcpy>
 80226c4:	f649 70e3 	movw	r0, #40931	@ 0x9fe3
 80226c8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80226cc:	2100      	movs	r1, #0
 80226ce:	2206      	movs	r2, #6
 80226d0:	f7fe f908 	bl	80208e4 <ble_memset>
 80226d4:	f649 70e9 	movw	r0, #40937	@ 0x9fe9
 80226d8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80226dc:	7005      	strb	r5, [r0, #0]
 80226de:	bdb0      	pop	{r4, r5, r7, pc}

080226e0 <db_get_src_address>:
 80226e0:	b570      	push	{r4, r5, r6, lr}
 80226e2:	460c      	mov	r4, r1
 80226e4:	4605      	mov	r5, r0
 80226e6:	2900      	cmp	r1, #0
 80226e8:	4608      	mov	r0, r1
 80226ea:	f04f 0100 	mov.w	r1, #0
 80226ee:	bf18      	it	ne
 80226f0:	2001      	movne	r0, #1
 80226f2:	2600      	movs	r6, #0
 80226f4:	f7f9 f913 	bl	801b91e <bsp_assert>
 80226f8:	2d02      	cmp	r5, #2
 80226fa:	bf38      	it	cc
 80226fc:	2601      	movcc	r6, #1
 80226fe:	4630      	mov	r0, r6
 8022700:	2100      	movs	r1, #0
 8022702:	f7f9 f90c 	bl	801b91e <bsp_assert>
 8022706:	2d01      	cmp	r5, #1
 8022708:	f04f 0012 	mov.w	r0, #18
 802270c:	d810      	bhi.n	8022730 <db_get_src_address+0x50>
 802270e:	b17c      	cbz	r4, 8022730 <db_get_src_address+0x50>
 8022710:	2d01      	cmp	r5, #1
 8022712:	d10e      	bne.n	8022732 <db_get_src_address+0x52>
 8022714:	f649 75e3 	movw	r5, #40931	@ 0x9fe3
 8022718:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 802271c:	f24e 61c1 	movw	r1, #59073	@ 0xe6c1
 8022720:	f6c0 0102 	movt	r1, #2050	@ 0x802
 8022724:	4628      	mov	r0, r5
 8022726:	2206      	movs	r2, #6
 8022728:	f7fe f914 	bl	8020954 <ble_memcmp>
 802272c:	b928      	cbnz	r0, 802273a <db_get_src_address+0x5a>
 802272e:	2012      	movs	r0, #18
 8022730:	bd70      	pop	{r4, r5, r6, pc}
 8022732:	f240 553a 	movw	r5, #1338	@ 0x53a
 8022736:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 802273a:	4620      	mov	r0, r4
 802273c:	4629      	mov	r1, r5
 802273e:	2206      	movs	r2, #6
 8022740:	f7fe f880 	bl	8020844 <ble_memcpy>
 8022744:	2000      	movs	r0, #0
 8022746:	bd70      	pop	{r4, r5, r6, pc}

08022748 <db_get_local_chnl_classification>:
 8022748:	b510      	push	{r4, lr}
 802274a:	2101      	movs	r1, #1
 802274c:	4604      	mov	r4, r0
 802274e:	2800      	cmp	r0, #0
 8022750:	bf18      	it	ne
 8022752:	2001      	movne	r0, #1
 8022754:	f7f9 f8e3 	bl	801b91e <bsp_assert>
 8022758:	f240 5130 	movw	r1, #1328	@ 0x530
 802275c:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 8022760:	4620      	mov	r0, r4
 8022762:	2205      	movs	r2, #5
 8022764:	f7fe f86e 	bl	8020844 <ble_memcpy>
 8022768:	2000      	movs	r0, #0
 802276a:	bd10      	pop	{r4, pc}

0802276c <db_get_advertising_channel_tx_power>:
 802276c:	b510      	push	{r4, lr}
 802276e:	2100      	movs	r1, #0
 8022770:	4604      	mov	r4, r0
 8022772:	2800      	cmp	r0, #0
 8022774:	bf18      	it	ne
 8022776:	2001      	movne	r0, #1
 8022778:	f7f9 f8d1 	bl	801b91e <bsp_assert>
 802277c:	b17c      	cbz	r4, 802279e <db_get_advertising_channel_tx_power+0x32>
 802277e:	f649 70dd 	movw	r0, #40925	@ 0x9fdd
 8022782:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022786:	f990 0000 	ldrsb.w	r0, [r0]
 802278a:	b2c1      	uxtb	r1, r0
 802278c:	2980      	cmp	r1, #128	@ 0x80
 802278e:	bf08      	it	eq
 8022790:	2181      	moveq	r1, #129	@ 0x81
 8022792:	2814      	cmp	r0, #20
 8022794:	bfc8      	it	gt
 8022796:	2114      	movgt	r1, #20
 8022798:	2000      	movs	r0, #0
 802279a:	7021      	strb	r1, [r4, #0]
 802279c:	bd10      	pop	{r4, pc}
 802279e:	2012      	movs	r0, #18
 80227a0:	bd10      	pop	{r4, pc}

080227a2 <db_get_tx_power_value>:
 80227a2:	4601      	mov	r1, r0
 80227a4:	f649 70dd 	movw	r0, #40925	@ 0x9fdd
 80227a8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80227ac:	7802      	ldrb	r2, [r0, #0]
 80227ae:	2000      	movs	r0, #0
 80227b0:	700a      	strb	r2, [r1, #0]
 80227b2:	4770      	bx	lr

080227b4 <db_set_tx_power_value>:
 80227b4:	f649 72dd 	movw	r2, #40925	@ 0x9fdd
 80227b8:	4601      	mov	r1, r0
 80227ba:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80227be:	2000      	movs	r0, #0
 80227c0:	7011      	strb	r1, [r2, #0]
 80227c2:	4770      	bx	lr

080227c4 <db_calc_rssi_compensated_value>:
 80227c4:	f990 1000 	ldrsb.w	r1, [r0]
 80227c8:	297f      	cmp	r1, #127	@ 0x7f
 80227ca:	d016      	beq.n	80227fa <db_calc_rssi_compensated_value+0x36>
 80227cc:	f649 72e0 	movw	r2, #40928	@ 0x9fe0
 80227d0:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80227d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80227d8:	f246 6367 	movw	r3, #26215	@ 0x6667
 80227dc:	fb02 f203 	mul.w	r2, r2, r3
 80227e0:	1493      	asrs	r3, r2, #18
 80227e2:	eb03 72d2 	add.w	r2, r3, r2, lsr #31
 80227e6:	4411      	add	r1, r2
 80227e8:	f111 0f7f 	cmn.w	r1, #127	@ 0x7f
 80227ec:	bfd8      	it	le
 80227ee:	f06f 017e 	mvnle.w	r1, #126	@ 0x7e
 80227f2:	2914      	cmp	r1, #20
 80227f4:	bfa8      	it	ge
 80227f6:	2114      	movge	r1, #20
 80227f8:	7001      	strb	r1, [r0, #0]
 80227fa:	2000      	movs	r0, #0
 80227fc:	4770      	bx	lr

080227fe <db_get_radiative_tx_pwr>:
 80227fe:	f649 72de 	movw	r2, #40926	@ 0x9fde
 8022802:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8022806:	f9b2 2000 	ldrsh.w	r2, [r2]
 802280a:	f246 6367 	movw	r3, #26215	@ 0x6667
 802280e:	fb02 f203 	mul.w	r2, r2, r3
 8022812:	1493      	asrs	r3, r2, #18
 8022814:	eb03 72d2 	add.w	r2, r3, r2, lsr #31
 8022818:	4410      	add	r0, r2
 802281a:	f110 0f7f 	cmn.w	r0, #127	@ 0x7f
 802281e:	4602      	mov	r2, r0
 8022820:	bfb8      	it	lt
 8022822:	f06f 027e 	mvnlt.w	r2, #126	@ 0x7e
 8022826:	287f      	cmp	r0, #127	@ 0x7f
 8022828:	f04f 0000 	mov.w	r0, #0
 802282c:	bfc8      	it	gt
 802282e:	227f      	movgt	r2, #127	@ 0x7f
 8022830:	700a      	strb	r2, [r1, #0]
 8022832:	4770      	bx	lr

08022834 <db_get_phy_conf_tx_pwr>:
 8022834:	f649 72de 	movw	r2, #40926	@ 0x9fde
 8022838:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 802283c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8022840:	f246 6367 	movw	r3, #26215	@ 0x6667
 8022844:	fb02 f203 	mul.w	r2, r2, r3
 8022848:	1493      	asrs	r3, r2, #18
 802284a:	eb03 72d2 	add.w	r2, r3, r2, lsr #31
 802284e:	1a80      	subs	r0, r0, r2
 8022850:	f110 0f7f 	cmn.w	r0, #127	@ 0x7f
 8022854:	4602      	mov	r2, r0
 8022856:	bfb8      	it	lt
 8022858:	f06f 027e 	mvnlt.w	r2, #126	@ 0x7e
 802285c:	287f      	cmp	r0, #127	@ 0x7f
 802285e:	f04f 0000 	mov.w	r0, #0
 8022862:	bfc8      	it	gt
 8022864:	227f      	movgt	r2, #127	@ 0x7f
 8022866:	700a      	strb	r2, [r1, #0]
 8022868:	4770      	bx	lr

0802286a <db_set_slp_clk_accuracy>:
 802286a:	f649 72e9 	movw	r2, #40937	@ 0x9fe9
 802286e:	4601      	mov	r1, r0
 8022870:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8022874:	2000      	movs	r0, #0
 8022876:	7011      	strb	r1, [r2, #0]
 8022878:	4770      	bx	lr

0802287a <db_get_slp_clk_accuracy>:
 802287a:	b510      	push	{r4, lr}
 802287c:	2101      	movs	r1, #1
 802287e:	4604      	mov	r4, r0
 8022880:	2800      	cmp	r0, #0
 8022882:	bf18      	it	ne
 8022884:	2001      	movne	r0, #1
 8022886:	f7f9 f84a 	bl	801b91e <bsp_assert>
 802288a:	f649 70e9 	movw	r0, #40937	@ 0x9fe9
 802288e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022892:	7801      	ldrb	r1, [r0, #0]
 8022894:	2000      	movs	r0, #0
 8022896:	7021      	strb	r1, [r4, #0]
 8022898:	bd10      	pop	{r4, pc}

0802289a <db_get_local_vrsn_info>:
 802289a:	b510      	push	{r4, lr}
 802289c:	2101      	movs	r1, #1
 802289e:	4604      	mov	r4, r0
 80228a0:	2800      	cmp	r0, #0
 80228a2:	bf18      	it	ne
 80228a4:	2001      	movne	r0, #1
 80228a6:	f7f9 f83a 	bl	801b91e <bsp_assert>
 80228aa:	f44f 40c0 	mov.w	r0, #24576	@ 0x6000
 80228ae:	f640 510d 	movw	r1, #3341	@ 0xd0d
 80228b2:	8020      	strh	r0, [r4, #0]
 80228b4:	80e1      	strh	r1, [r4, #6]
 80228b6:	80a0      	strh	r0, [r4, #4]
 80228b8:	2130      	movs	r1, #48	@ 0x30
 80228ba:	2000      	movs	r0, #0
 80228bc:	8061      	strh	r1, [r4, #2]
 80228be:	bd10      	pop	{r4, pc}

080228c0 <db_get_le_feature_info>:
 80228c0:	b510      	push	{r4, lr}
 80228c2:	2101      	movs	r1, #1
 80228c4:	4604      	mov	r4, r0
 80228c6:	2800      	cmp	r0, #0
 80228c8:	bf18      	it	ne
 80228ca:	2001      	movne	r0, #1
 80228cc:	f7f9 f827 	bl	801b91e <bsp_assert>
 80228d0:	f7fb fd92 	bl	801e3f8 <ll_tx_pwr_if_is_le_power_class_1_supported>
 80228d4:	f240 5140 	movw	r1, #1344	@ 0x540
 80228d8:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80228dc:	b128      	cbz	r0, 80228ea <db_get_le_feature_info+0x2a>
 80228de:	2801      	cmp	r0, #1
 80228e0:	d107      	bne.n	80228f2 <db_get_le_feature_info+0x32>
 80228e2:	7848      	ldrb	r0, [r1, #1]
 80228e4:	f060 007f 	orn	r0, r0, #127	@ 0x7f
 80228e8:	e002      	b.n	80228f0 <db_get_le_feature_info+0x30>
 80228ea:	7848      	ldrb	r0, [r1, #1]
 80228ec:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80228f0:	7048      	strb	r0, [r1, #1]
 80228f2:	f240 5140 	movw	r1, #1344	@ 0x540
 80228f6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80228fa:	4620      	mov	r0, r4
 80228fc:	2208      	movs	r2, #8
 80228fe:	f7fd ffa1 	bl	8020844 <ble_memcpy>
 8022902:	2000      	movs	r0, #0
 8022904:	bd10      	pop	{r4, pc}

08022906 <db_check_encryption>:
 8022906:	f240 5040 	movw	r0, #1344	@ 0x540
 802290a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802290e:	7800      	ldrb	r0, [r0, #0]
 8022910:	2800      	cmp	r0, #0
 8022912:	bf18      	it	ne
 8022914:	2001      	movne	r0, #1
 8022916:	4770      	bx	lr

08022918 <db_set_bd_address>:
 8022918:	b510      	push	{r4, lr}
 802291a:	2100      	movs	r1, #0
 802291c:	4604      	mov	r4, r0
 802291e:	2800      	cmp	r0, #0
 8022920:	bf18      	it	ne
 8022922:	2001      	movne	r0, #1
 8022924:	f7f8 fffb 	bl	801b91e <bsp_assert>
 8022928:	b14c      	cbz	r4, 802293e <db_set_bd_address+0x26>
 802292a:	f240 503a 	movw	r0, #1338	@ 0x53a
 802292e:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8022932:	4621      	mov	r1, r4
 8022934:	2206      	movs	r2, #6
 8022936:	f7fd ff85 	bl	8020844 <ble_memcpy>
 802293a:	2000      	movs	r0, #0
 802293c:	bd10      	pop	{r4, pc}
 802293e:	2012      	movs	r0, #18
 8022940:	bd10      	pop	{r4, pc}

08022942 <db_set_random_address>:
 8022942:	b510      	push	{r4, lr}
 8022944:	2100      	movs	r1, #0
 8022946:	4604      	mov	r4, r0
 8022948:	2800      	cmp	r0, #0
 802294a:	bf18      	it	ne
 802294c:	2001      	movne	r0, #1
 802294e:	f7f8 ffe6 	bl	801b91e <bsp_assert>
 8022952:	b14c      	cbz	r4, 8022968 <db_set_random_address+0x26>
 8022954:	f649 70e3 	movw	r0, #40931	@ 0x9fe3
 8022958:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 802295c:	4621      	mov	r1, r4
 802295e:	2206      	movs	r2, #6
 8022960:	f7fd ff70 	bl	8020844 <ble_memcpy>
 8022964:	2000      	movs	r0, #0
 8022966:	bd10      	pop	{r4, pc}
 8022968:	2012      	movs	r0, #18
 802296a:	bd10      	pop	{r4, pc}

0802296c <db_le_set_default_phy_cmd>:
 802296c:	f649 7ce2 	movw	ip, #40930	@ 0x9fe2
 8022970:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8022974:	07c3      	lsls	r3, r0, #31
 8022976:	f88c 0000 	strb.w	r0, [ip]
 802297a:	bf02      	ittt	eq
 802297c:	f240 532e 	movweq	r3, #1326	@ 0x52e
 8022980:	f2c2 0300 	movteq	r3, #8192	@ 0x2000
 8022984:	7019      	strbeq	r1, [r3, #0]
 8022986:	0780      	lsls	r0, r0, #30
 8022988:	bf5e      	ittt	pl
 802298a:	f240 502f 	movwpl	r0, #1327	@ 0x52f
 802298e:	f2c2 0000 	movtpl	r0, #8192	@ 0x2000
 8022992:	7002      	strbpl	r2, [r0, #0]
 8022994:	2000      	movs	r0, #0
 8022996:	4770      	bx	lr

08022998 <db_le_get_default_phy_cmd>:
 8022998:	f649 73e2 	movw	r3, #40930	@ 0x9fe2
 802299c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80229a0:	781b      	ldrb	r3, [r3, #0]
 80229a2:	7003      	strb	r3, [r0, #0]
 80229a4:	f240 502e 	movw	r0, #1326	@ 0x52e
 80229a8:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80229ac:	7800      	ldrb	r0, [r0, #0]
 80229ae:	7008      	strb	r0, [r1, #0]
 80229b0:	f240 502f 	movw	r0, #1327	@ 0x52f
 80229b4:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80229b8:	7801      	ldrb	r1, [r0, #0]
 80229ba:	2000      	movs	r0, #0
 80229bc:	7011      	strb	r1, [r2, #0]
 80229be:	4770      	bx	lr

080229c0 <hw_ll_timer_init>:
 80229c0:	b510      	push	{r4, lr}
 80229c2:	2101      	movs	r1, #1
 80229c4:	4604      	mov	r4, r0
 80229c6:	2800      	cmp	r0, #0
 80229c8:	bf18      	it	ne
 80229ca:	2001      	movne	r0, #1
 80229cc:	f7f8 ffa7 	bl	801b91e <bsp_assert>
 80229d0:	4620      	mov	r0, r4
 80229d2:	f7fb fd6c 	bl	801e4ae <llhwc_slptmr_init>
 80229d6:	2000      	movs	r0, #0
 80229d8:	bd10      	pop	{r4, pc}

080229da <hw_ll_timer_start>:
 80229da:	b580      	push	{r7, lr}
 80229dc:	b082      	sub	sp, #8
 80229de:	9000      	str	r0, [sp, #0]
 80229e0:	2000      	movs	r0, #0
 80229e2:	f8ad 0004 	strh.w	r0, [sp, #4]
 80229e6:	f88d 1006 	strb.w	r1, [sp, #6]
 80229ea:	4669      	mov	r1, sp
 80229ec:	2001      	movs	r0, #1
 80229ee:	f7fc f9e9 	bl	801edc4 <llhwc_slptmr_set>
 80229f2:	2000      	movs	r0, #0
 80229f4:	b002      	add	sp, #8
 80229f6:	bd80      	pop	{r7, pc}

080229f8 <hw_ll_timer_stop>:
 80229f8:	b580      	push	{r7, lr}
 80229fa:	2001      	movs	r0, #1
 80229fc:	f7fc fc14 	bl	801f228 <llhwc_slptmr_stop>
 8022a00:	2000      	movs	r0, #0
 8022a02:	bd80      	pop	{r7, pc}

08022a04 <get_current_time>:
 8022a04:	b580      	push	{r7, lr}
 8022a06:	b082      	sub	sp, #8
 8022a08:	a801      	add	r0, sp, #4
 8022a0a:	f7fb fd5e 	bl	801e4ca <llhwc_slptmr_get>
 8022a0e:	9801      	ldr	r0, [sp, #4]
 8022a10:	b002      	add	sp, #8
 8022a12:	bd80      	pop	{r7, pc}

08022a14 <HCI_DISCONNECTION_COMPLETE_EVENT>:
 8022a14:	b580      	push	{r7, lr}
 8022a16:	b0c2      	sub	sp, #264	@ 0x108
 8022a18:	f000 fdb5 	bl	8023586 <OUTLINED_FUNCTION_50>
 8022a1c:	2005      	movs	r0, #5
 8022a1e:	f000 fddc 	bl	80235da <OUTLINED_FUNCTION_62>
 8022a22:	f10d 0006 	add.w	r0, sp, #6
 8022a26:	f000 f802 	bl	8022a2e <hci_event>
 8022a2a:	b042      	add	sp, #264	@ 0x108
 8022a2c:	bd80      	pop	{r7, pc}

08022a2e <hci_event>:
 8022a2e:	3101      	adds	r1, #1
 8022a30:	2204      	movs	r2, #4
 8022a32:	2300      	movs	r3, #0
 8022a34:	7002      	strb	r2, [r0, #0]
 8022a36:	b289      	uxth	r1, r1
 8022a38:	2200      	movs	r2, #0
 8022a3a:	f7df b8e1 	b.w	8001c00 <BLECB_Indication>

08022a3e <HCI_ENCRYPTION_CHANGE_EVENT>:
 8022a3e:	b580      	push	{r7, lr}
 8022a40:	b0c2      	sub	sp, #264	@ 0x108
 8022a42:	f000 fda0 	bl	8023586 <OUTLINED_FUNCTION_50>
 8022a46:	2008      	movs	r0, #8
 8022a48:	f000 fdc7 	bl	80235da <OUTLINED_FUNCTION_62>
 8022a4c:	f10d 0006 	add.w	r0, sp, #6
 8022a50:	f7ff ffed 	bl	8022a2e <hci_event>
 8022a54:	b042      	add	sp, #264	@ 0x108
 8022a56:	bd80      	pop	{r7, pc}

08022a58 <HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT>:
 8022a58:	b580      	push	{r7, lr}
 8022a5a:	b0c2      	sub	sp, #264	@ 0x108
 8022a5c:	f88d 0009 	strb.w	r0, [sp, #9]
 8022a60:	2008      	movs	r0, #8
 8022a62:	f88d 100a 	strb.w	r1, [sp, #10]
 8022a66:	f88d 200c 	strb.w	r2, [sp, #12]
 8022a6a:	f88d 300d 	strb.w	r3, [sp, #13]
 8022a6e:	f88d 0008 	strb.w	r0, [sp, #8]
 8022a72:	200c      	movs	r0, #12
 8022a74:	f88d 0007 	strb.w	r0, [sp, #7]
 8022a78:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8022a7a:	f88d 000f 	strb.w	r0, [sp, #15]
 8022a7e:	0a00      	lsrs	r0, r0, #8
 8022a80:	f88d 0010 	strb.w	r0, [sp, #16]
 8022a84:	0a18      	lsrs	r0, r3, #8
 8022a86:	f88d 000e 	strb.w	r0, [sp, #14]
 8022a8a:	0a08      	lsrs	r0, r1, #8
 8022a8c:	210b      	movs	r1, #11
 8022a8e:	f88d 000b 	strb.w	r0, [sp, #11]
 8022a92:	f10d 0006 	add.w	r0, sp, #6
 8022a96:	f7ff ffca 	bl	8022a2e <hci_event>
 8022a9a:	b042      	add	sp, #264	@ 0x108
 8022a9c:	bd80      	pop	{r7, pc}

08022a9e <HCI_HARDWARE_ERROR_EVENT>:
 8022a9e:	b580      	push	{r7, lr}
 8022aa0:	b0c2      	sub	sp, #264	@ 0x108
 8022aa2:	2101      	movs	r1, #1
 8022aa4:	f88d 0009 	strb.w	r0, [sp, #9]
 8022aa8:	f10d 0006 	add.w	r0, sp, #6
 8022aac:	f88d 1008 	strb.w	r1, [sp, #8]
 8022ab0:	2110      	movs	r1, #16
 8022ab2:	f88d 1007 	strb.w	r1, [sp, #7]
 8022ab6:	2104      	movs	r1, #4
 8022ab8:	f7ff ffb9 	bl	8022a2e <hci_event>
 8022abc:	b042      	add	sp, #264	@ 0x108
 8022abe:	bd80      	pop	{r7, pc}

08022ac0 <HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT>:
 8022ac0:	b580      	push	{r7, lr}
 8022ac2:	b0c2      	sub	sp, #264	@ 0x108
 8022ac4:	f88d 0009 	strb.w	r0, [sp, #9]
 8022ac8:	2003      	movs	r0, #3
 8022aca:	f88d 100a 	strb.w	r1, [sp, #10]
 8022ace:	f88d 0008 	strb.w	r0, [sp, #8]
 8022ad2:	2030      	movs	r0, #48	@ 0x30
 8022ad4:	f88d 0007 	strb.w	r0, [sp, #7]
 8022ad8:	0a08      	lsrs	r0, r1, #8
 8022ada:	2106      	movs	r1, #6
 8022adc:	f88d 000b 	strb.w	r0, [sp, #11]
 8022ae0:	f10d 0006 	add.w	r0, sp, #6
 8022ae4:	f7ff ffa3 	bl	8022a2e <hci_event>
 8022ae8:	b042      	add	sp, #264	@ 0x108
 8022aea:	bd80      	pop	{r7, pc}

08022aec <HCI_LE_CONNECTION_COMPLETE_EVENT>:
 8022aec:	b510      	push	{r4, lr}
 8022aee:	b0c2      	sub	sp, #264	@ 0x108
 8022af0:	f88d 000a 	strb.w	r0, [sp, #10]
 8022af4:	0a08      	lsrs	r0, r1, #8
 8022af6:	f10d 0406 	add.w	r4, sp, #6
 8022afa:	f88d 200d 	strb.w	r2, [sp, #13]
 8022afe:	f88d 100b 	strb.w	r1, [sp, #11]
 8022b02:	9944      	ldr	r1, [sp, #272]	@ 0x110
 8022b04:	f000 fd5a 	bl	80235bc <OUTLINED_FUNCTION_55>
 8022b08:	f7fd fe9c 	bl	8020844 <ble_memcpy>
 8022b0c:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8022b0e:	2116      	movs	r1, #22
 8022b10:	f88d 001b 	strb.w	r0, [sp, #27]
 8022b14:	2001      	movs	r0, #1
 8022b16:	f88d 0009 	strb.w	r0, [sp, #9]
 8022b1a:	2013      	movs	r0, #19
 8022b1c:	f000 fcf2 	bl	8023504 <OUTLINED_FUNCTION_31>
 8022b20:	9847      	ldr	r0, [sp, #284]	@ 0x11c
 8022b22:	f88d 0019 	strb.w	r0, [sp, #25]
 8022b26:	0a00      	lsrs	r0, r0, #8
 8022b28:	f88d 001a 	strb.w	r0, [sp, #26]
 8022b2c:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8022b2e:	f88d 0017 	strb.w	r0, [sp, #23]
 8022b32:	0a00      	lsrs	r0, r0, #8
 8022b34:	f88d 0018 	strb.w	r0, [sp, #24]
 8022b38:	9845      	ldr	r0, [sp, #276]	@ 0x114
 8022b3a:	f88d 0015 	strb.w	r0, [sp, #21]
 8022b3e:	0a00      	lsrs	r0, r0, #8
 8022b40:	f88d 0016 	strb.w	r0, [sp, #22]
 8022b44:	4620      	mov	r0, r4
 8022b46:	f7ff ff72 	bl	8022a2e <hci_event>
 8022b4a:	b042      	add	sp, #264	@ 0x108
 8022b4c:	bd10      	pop	{r4, pc}
	...

08022b50 <HCI_LE_ADVERTISING_REPORT_EVENT>:
 8022b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b54:	b0c2      	sub	sp, #264	@ 0x108
 8022b56:	4604      	mov	r4, r0
 8022b58:	f88d 000a 	strb.w	r0, [sp, #10]
 8022b5c:	f10d 0006 	add.w	r0, sp, #6
 8022b60:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8022bec <__arm_cp.7_0>
 8022b64:	f101 0708 	add.w	r7, r1, #8
 8022b68:	f04f 0a00 	mov.w	sl, #0
 8022b6c:	f100 0804 	add.w	r8, r0, #4
 8022b70:	b344      	cbz	r4, 8022bc4 <HCI_LE_ADVERTISING_REPORT_EVENT+0x74>
 8022b72:	f817 0c08 	ldrb.w	r0, [r7, #-8]
 8022b76:	f817 1c07 	ldrb.w	r1, [r7, #-7]
 8022b7a:	eb08 050a 	add.w	r5, r8, sl
 8022b7e:	2206      	movs	r2, #6
 8022b80:	7068      	strb	r0, [r5, #1]
 8022b82:	70a9      	strb	r1, [r5, #2]
 8022b84:	1ce8      	adds	r0, r5, #3
 8022b86:	1fb9      	subs	r1, r7, #6
 8022b88:	47c8      	blx	r9
 8022b8a:	4639      	mov	r1, r7
 8022b8c:	78b8      	ldrb	r0, [r7, #2]
 8022b8e:	783a      	ldrb	r2, [r7, #0]
 8022b90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022b94:	726a      	strb	r2, [r5, #9]
 8022b96:	350a      	adds	r5, #10
 8022b98:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8022b9c:	788b      	ldrb	r3, [r1, #2]
 8022b9e:	78c9      	ldrb	r1, [r1, #3]
 8022ba0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8022ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8022ba8:	4628      	mov	r0, r5
 8022baa:	47c8      	blx	r9
 8022bac:	783e      	ldrb	r6, [r7, #0]
 8022bae:	1d79      	adds	r1, r7, #5
 8022bb0:	2201      	movs	r2, #1
 8022bb2:	19a8      	adds	r0, r5, r6
 8022bb4:	47c8      	blx	r9
 8022bb6:	eb0a 0006 	add.w	r0, sl, r6
 8022bba:	370e      	adds	r7, #14
 8022bbc:	3c01      	subs	r4, #1
 8022bbe:	f100 0a0a 	add.w	sl, r0, #10
 8022bc2:	e7d5      	b.n	8022b70 <HCI_LE_ADVERTISING_REPORT_EVENT+0x20>
 8022bc4:	2002      	movs	r0, #2
 8022bc6:	f88d 0009 	strb.w	r0, [sp, #9]
 8022bca:	203e      	movs	r0, #62	@ 0x3e
 8022bcc:	f88d 0007 	strb.w	r0, [sp, #7]
 8022bd0:	f10a 0002 	add.w	r0, sl, #2
 8022bd4:	f88d 0008 	strb.w	r0, [sp, #8]
 8022bd8:	b2c0      	uxtb	r0, r0
 8022bda:	1cc1      	adds	r1, r0, #3
 8022bdc:	f10d 0006 	add.w	r0, sp, #6
 8022be0:	f7ff ff25 	bl	8022a2e <hci_event>
 8022be4:	b042      	add	sp, #264	@ 0x108
 8022be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bea:	bf00      	nop

08022bec <__arm_cp.7_0>:
 8022bec:	08020845 	.word	0x08020845

08022bf0 <HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT>:
 8022bf0:	b580      	push	{r7, lr}
 8022bf2:	b0c2      	sub	sp, #264	@ 0x108
 8022bf4:	f88d 000a 	strb.w	r0, [sp, #10]
 8022bf8:	2003      	movs	r0, #3
 8022bfa:	f88d 100b 	strb.w	r1, [sp, #11]
 8022bfe:	f88d 300f 	strb.w	r3, [sp, #15]
 8022c02:	f88d 200d 	strb.w	r2, [sp, #13]
 8022c06:	f88d 0009 	strb.w	r0, [sp, #9]
 8022c0a:	200a      	movs	r0, #10
 8022c0c:	f000 fc7a 	bl	8023504 <OUTLINED_FUNCTION_31>
 8022c10:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8022c12:	f88d 0011 	strb.w	r0, [sp, #17]
 8022c16:	0a00      	lsrs	r0, r0, #8
 8022c18:	f88d 0012 	strb.w	r0, [sp, #18]
 8022c1c:	0a18      	lsrs	r0, r3, #8
 8022c1e:	f88d 0010 	strb.w	r0, [sp, #16]
 8022c22:	0a10      	lsrs	r0, r2, #8
 8022c24:	f88d 000e 	strb.w	r0, [sp, #14]
 8022c28:	0a08      	lsrs	r0, r1, #8
 8022c2a:	210d      	movs	r1, #13
 8022c2c:	f88d 000c 	strb.w	r0, [sp, #12]
 8022c30:	f10d 0006 	add.w	r0, sp, #6
 8022c34:	f7ff fefb 	bl	8022a2e <hci_event>
 8022c38:	b042      	add	sp, #264	@ 0x108
 8022c3a:	bd80      	pop	{r7, pc}

08022c3c <HCI_LE_READ_REMOTE_FEATURES_COMPLETE_EVENT>:
 8022c3c:	b510      	push	{r4, lr}
 8022c3e:	b0c2      	sub	sp, #264	@ 0x108
 8022c40:	f88d 000a 	strb.w	r0, [sp, #10]
 8022c44:	0a08      	lsrs	r0, r1, #8
 8022c46:	f10d 0406 	add.w	r4, sp, #6
 8022c4a:	f88d 100b 	strb.w	r1, [sp, #11]
 8022c4e:	4611      	mov	r1, r2
 8022c50:	2208      	movs	r2, #8
 8022c52:	f88d 000c 	strb.w	r0, [sp, #12]
 8022c56:	1de0      	adds	r0, r4, #7
 8022c58:	f7fd fdf4 	bl	8020844 <ble_memcpy>
 8022c5c:	2004      	movs	r0, #4
 8022c5e:	210f      	movs	r1, #15
 8022c60:	f88d 0009 	strb.w	r0, [sp, #9]
 8022c64:	200c      	movs	r0, #12
 8022c66:	f000 fc86 	bl	8023576 <OUTLINED_FUNCTION_49>
 8022c6a:	b042      	add	sp, #264	@ 0x108
 8022c6c:	bd10      	pop	{r4, pc}

08022c6e <HCI_LE_LONG_TERM_KEY_REQUEST_EVENT>:
 8022c6e:	b5b0      	push	{r4, r5, r7, lr}
 8022c70:	b0c2      	sub	sp, #264	@ 0x108
 8022c72:	f88d 000a 	strb.w	r0, [sp, #10]
 8022c76:	0a00      	lsrs	r0, r0, #8
 8022c78:	f10d 0506 	add.w	r5, sp, #6
 8022c7c:	4614      	mov	r4, r2
 8022c7e:	2208      	movs	r2, #8
 8022c80:	f88d 000b 	strb.w	r0, [sp, #11]
 8022c84:	1da8      	adds	r0, r5, #6
 8022c86:	f7fd fddd 	bl	8020844 <ble_memcpy>
 8022c8a:	2005      	movs	r0, #5
 8022c8c:	2110      	movs	r1, #16
 8022c8e:	f88d 4014 	strb.w	r4, [sp, #20]
 8022c92:	f88d 0009 	strb.w	r0, [sp, #9]
 8022c96:	200d      	movs	r0, #13
 8022c98:	f000 fc34 	bl	8023504 <OUTLINED_FUNCTION_31>
 8022c9c:	0a20      	lsrs	r0, r4, #8
 8022c9e:	f88d 0015 	strb.w	r0, [sp, #21]
 8022ca2:	4628      	mov	r0, r5
 8022ca4:	f7ff fec3 	bl	8022a2e <hci_event>
 8022ca8:	b042      	add	sp, #264	@ 0x108
 8022caa:	bdb0      	pop	{r4, r5, r7, pc}

08022cac <HCI_LE_DATA_LENGTH_CHANGE_EVENT>:
 8022cac:	b510      	push	{r4, lr}
 8022cae:	b0c2      	sub	sp, #264	@ 0x108
 8022cb0:	2407      	movs	r4, #7
 8022cb2:	f88d 100c 	strb.w	r1, [sp, #12]
 8022cb6:	0a09      	lsrs	r1, r1, #8
 8022cb8:	f88d 000a 	strb.w	r0, [sp, #10]
 8022cbc:	0a00      	lsrs	r0, r0, #8
 8022cbe:	f88d 3010 	strb.w	r3, [sp, #16]
 8022cc2:	0a1b      	lsrs	r3, r3, #8
 8022cc4:	f88d 200e 	strb.w	r2, [sp, #14]
 8022cc8:	0a12      	lsrs	r2, r2, #8
 8022cca:	f88d 4009 	strb.w	r4, [sp, #9]
 8022cce:	240b      	movs	r4, #11
 8022cd0:	f000 fc69 	bl	80235a6 <OUTLINED_FUNCTION_53>
 8022cd4:	f10d 0006 	add.w	r0, sp, #6
 8022cd8:	210e      	movs	r1, #14
 8022cda:	f88d 3011 	strb.w	r3, [sp, #17]
 8022cde:	f88d 200f 	strb.w	r2, [sp, #15]
 8022ce2:	f88d 4008 	strb.w	r4, [sp, #8]
 8022ce6:	243e      	movs	r4, #62	@ 0x3e
 8022ce8:	f88d 4007 	strb.w	r4, [sp, #7]
 8022cec:	9c44      	ldr	r4, [sp, #272]	@ 0x110
 8022cee:	f88d 4012 	strb.w	r4, [sp, #18]
 8022cf2:	0a24      	lsrs	r4, r4, #8
 8022cf4:	f88d 4013 	strb.w	r4, [sp, #19]
 8022cf8:	f7ff fe99 	bl	8022a2e <hci_event>
 8022cfc:	b042      	add	sp, #264	@ 0x108
 8022cfe:	bd10      	pop	{r4, pc}

08022d00 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT>:
 8022d00:	b510      	push	{r4, lr}
 8022d02:	b0c2      	sub	sp, #264	@ 0x108
 8022d04:	f10d 0406 	add.w	r4, sp, #6
 8022d08:	f88d 000a 	strb.w	r0, [sp, #10]
 8022d0c:	2240      	movs	r2, #64	@ 0x40
 8022d0e:	1d60      	adds	r0, r4, #5
 8022d10:	f7fd fd98 	bl	8020844 <ble_memcpy>
 8022d14:	2008      	movs	r0, #8
 8022d16:	2145      	movs	r1, #69	@ 0x45
 8022d18:	f88d 0009 	strb.w	r0, [sp, #9]
 8022d1c:	2042      	movs	r0, #66	@ 0x42
 8022d1e:	f000 fc2a 	bl	8023576 <OUTLINED_FUNCTION_49>
 8022d22:	b042      	add	sp, #264	@ 0x108
 8022d24:	bd10      	pop	{r4, pc}
	...

08022d28 <HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT>:
 8022d28:	b5b0      	push	{r4, r5, r7, lr}
 8022d2a:	b0c2      	sub	sp, #264	@ 0x108
 8022d2c:	f88d 000a 	strb.w	r0, [sp, #10]
 8022d30:	0a08      	lsrs	r0, r1, #8
 8022d32:	f10d 0406 	add.w	r4, sp, #6
 8022d36:	4d1a      	ldr	r5, [pc, #104]	@ (8022da0 <__arm_cp.13_0>)
 8022d38:	f88d 200d 	strb.w	r2, [sp, #13]
 8022d3c:	f88d 100b 	strb.w	r1, [sp, #11]
 8022d40:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8022d42:	f000 fc3b 	bl	80235bc <OUTLINED_FUNCTION_55>
 8022d46:	47a8      	blx	r5
 8022d48:	f104 000f 	add.w	r0, r4, #15
 8022d4c:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8022d4e:	2206      	movs	r2, #6
 8022d50:	47a8      	blx	r5
 8022d52:	f104 0015 	add.w	r0, r4, #21
 8022d56:	9948      	ldr	r1, [sp, #288]	@ 0x120
 8022d58:	2206      	movs	r2, #6
 8022d5a:	47a8      	blx	r5
 8022d5c:	984c      	ldr	r0, [sp, #304]	@ 0x130
 8022d5e:	2122      	movs	r1, #34	@ 0x22
 8022d60:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
 8022d64:	200a      	movs	r0, #10
 8022d66:	f88d 0009 	strb.w	r0, [sp, #9]
 8022d6a:	201f      	movs	r0, #31
 8022d6c:	f000 fbca 	bl	8023504 <OUTLINED_FUNCTION_31>
 8022d70:	984b      	ldr	r0, [sp, #300]	@ 0x12c
 8022d72:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8022d76:	0a00      	lsrs	r0, r0, #8
 8022d78:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8022d7c:	984a      	ldr	r0, [sp, #296]	@ 0x128
 8022d7e:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23
 8022d82:	0a00      	lsrs	r0, r0, #8
 8022d84:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
 8022d88:	9849      	ldr	r0, [sp, #292]	@ 0x124
 8022d8a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8022d8e:	0a00      	lsrs	r0, r0, #8
 8022d90:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8022d94:	4620      	mov	r0, r4
 8022d96:	f7ff fe4a 	bl	8022a2e <hci_event>
 8022d9a:	b042      	add	sp, #264	@ 0x108
 8022d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8022d9e:	bf00      	nop

08022da0 <__arm_cp.13_0>:
 8022da0:	08020845 	.word	0x08020845

08022da4 <HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT>:
 8022da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022da8:	b0c1      	sub	sp, #260	@ 0x104
 8022daa:	460c      	mov	r4, r1
 8022dac:	ea4f 1900 	mov.w	r9, r0, lsl #4
 8022db0:	2600      	movs	r6, #0
 8022db2:	f10d 0802 	add.w	r8, sp, #2
 8022db6:	f88d 0006 	strb.w	r0, [sp, #6]
 8022dba:	45b1      	cmp	r9, r6
 8022dbc:	d018      	beq.n	8022df0 <HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT+0x4c>
 8022dbe:	19a5      	adds	r5, r4, r6
 8022dc0:	eb08 0706 	add.w	r7, r8, r6
 8022dc4:	5da0      	ldrb	r0, [r4, r6]
 8022dc6:	2206      	movs	r2, #6
 8022dc8:	7178      	strb	r0, [r7, #5]
 8022dca:	7868      	ldrb	r0, [r5, #1]
 8022dcc:	1ca9      	adds	r1, r5, #2
 8022dce:	71b8      	strb	r0, [r7, #6]
 8022dd0:	1df8      	adds	r0, r7, #7
 8022dd2:	f7fd fd37 	bl	8020844 <ble_memcpy>
 8022dd6:	7a28      	ldrb	r0, [r5, #8]
 8022dd8:	f105 0109 	add.w	r1, r5, #9
 8022ddc:	2206      	movs	r2, #6
 8022dde:	7378      	strb	r0, [r7, #13]
 8022de0:	f107 000e 	add.w	r0, r7, #14
 8022de4:	f7fd fd2e 	bl	8020844 <ble_memcpy>
 8022de8:	7be8      	ldrb	r0, [r5, #15]
 8022dea:	3610      	adds	r6, #16
 8022dec:	7538      	strb	r0, [r7, #20]
 8022dee:	e7e4      	b.n	8022dba <HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT+0x16>
 8022df0:	200b      	movs	r0, #11
 8022df2:	f88d 0005 	strb.w	r0, [sp, #5]
 8022df6:	203e      	movs	r0, #62	@ 0x3e
 8022df8:	f88d 0003 	strb.w	r0, [sp, #3]
 8022dfc:	f109 0002 	add.w	r0, r9, #2
 8022e00:	f88d 0004 	strb.w	r0, [sp, #4]
 8022e04:	f109 0005 	add.w	r0, r9, #5
 8022e08:	b2c1      	uxtb	r1, r0
 8022e0a:	f10d 0002 	add.w	r0, sp, #2
 8022e0e:	f7ff fe0e 	bl	8022a2e <hci_event>
 8022e12:	b041      	add	sp, #260	@ 0x104
 8022e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08022e18 <HCI_LE_PHY_UPDATE_COMPLETE_EVENT>:
 8022e18:	b580      	push	{r7, lr}
 8022e1a:	b0c2      	sub	sp, #264	@ 0x108
 8022e1c:	f88d 000a 	strb.w	r0, [sp, #10]
 8022e20:	200c      	movs	r0, #12
 8022e22:	f88d 100b 	strb.w	r1, [sp, #11]
 8022e26:	f88d 300e 	strb.w	r3, [sp, #14]
 8022e2a:	f88d 200d 	strb.w	r2, [sp, #13]
 8022e2e:	f88d 0009 	strb.w	r0, [sp, #9]
 8022e32:	2006      	movs	r0, #6
 8022e34:	f000 fb66 	bl	8023504 <OUTLINED_FUNCTION_31>
 8022e38:	0a08      	lsrs	r0, r1, #8
 8022e3a:	2109      	movs	r1, #9
 8022e3c:	f88d 000c 	strb.w	r0, [sp, #12]
 8022e40:	f10d 0006 	add.w	r0, sp, #6
 8022e44:	f7ff fdf3 	bl	8022a2e <hci_event>
 8022e48:	b042      	add	sp, #264	@ 0x108
 8022e4a:	bd80      	pop	{r7, pc}

08022e4c <HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT>:
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b0c2      	sub	sp, #264	@ 0x108
 8022e50:	f88d 100c 	strb.w	r1, [sp, #12]
 8022e54:	2114      	movs	r1, #20
 8022e56:	f88d 000a 	strb.w	r0, [sp, #10]
 8022e5a:	0a00      	lsrs	r0, r0, #8
 8022e5c:	f88d 1009 	strb.w	r1, [sp, #9]
 8022e60:	2104      	movs	r1, #4
 8022e62:	f88d 000b 	strb.w	r0, [sp, #11]
 8022e66:	f10d 0006 	add.w	r0, sp, #6
 8022e6a:	f88d 1008 	strb.w	r1, [sp, #8]
 8022e6e:	213e      	movs	r1, #62	@ 0x3e
 8022e70:	f000 fafe 	bl	8023470 <OUTLINED_FUNCTION_14>
 8022e74:	b042      	add	sp, #264	@ 0x108
 8022e76:	bd80      	pop	{r7, pc}

08022e78 <ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT>:
 8022e78:	b510      	push	{r4, lr}
 8022e7a:	b0c2      	sub	sp, #264	@ 0x108
 8022e7c:	f88d 000b 	strb.w	r0, [sp, #11]
 8022e80:	2000      	movs	r0, #0
 8022e82:	9c44      	ldr	r4, [sp, #272]	@ 0x110
 8022e84:	f88d 100c 	strb.w	r1, [sp, #12]
 8022e88:	210d      	movs	r1, #13
 8022e8a:	f88d 3011 	strb.w	r3, [sp, #17]
 8022e8e:	f88d 200d 	strb.w	r2, [sp, #13]
 8022e92:	f88d 000a 	strb.w	r0, [sp, #10]
 8022e96:	2004      	movs	r0, #4
 8022e98:	f88d 4012 	strb.w	r4, [sp, #18]
 8022e9c:	f88d 0009 	strb.w	r0, [sp, #9]
 8022ea0:	200a      	movs	r0, #10
 8022ea2:	f000 fb48 	bl	8023536 <OUTLINED_FUNCTION_37>
 8022ea6:	0e10      	lsrs	r0, r2, #24
 8022ea8:	f88d 0010 	strb.w	r0, [sp, #16]
 8022eac:	0c10      	lsrs	r0, r2, #16
 8022eae:	f88d 000f 	strb.w	r0, [sp, #15]
 8022eb2:	0a10      	lsrs	r0, r2, #8
 8022eb4:	f88d 000e 	strb.w	r0, [sp, #14]
 8022eb8:	f10d 0006 	add.w	r0, sp, #6
 8022ebc:	f7ff fdb7 	bl	8022a2e <hci_event>
 8022ec0:	b042      	add	sp, #264	@ 0x108
 8022ec2:	bd10      	pop	{r4, pc}

08022ec4 <ACI_HAL_FW_ERROR_EVENT>:
 8022ec4:	b5b0      	push	{r4, r5, r7, lr}
 8022ec6:	b0c2      	sub	sp, #264	@ 0x108
 8022ec8:	460c      	mov	r4, r1
 8022eca:	f10d 0506 	add.w	r5, sp, #6
 8022ece:	f88d 100c 	strb.w	r1, [sp, #12]
 8022ed2:	f88d 000b 	strb.w	r0, [sp, #11]
 8022ed6:	4611      	mov	r1, r2
 8022ed8:	1de8      	adds	r0, r5, #7
 8022eda:	4622      	mov	r2, r4
 8022edc:	f7fd fcb2 	bl	8020844 <ble_memcpy>
 8022ee0:	2000      	movs	r0, #0
 8022ee2:	f88d 000a 	strb.w	r0, [sp, #10]
 8022ee6:	2006      	movs	r0, #6
 8022ee8:	f000 fb62 	bl	80235b0 <OUTLINED_FUNCTION_54>
 8022eec:	1d20      	adds	r0, r4, #4
 8022eee:	f000 fa89 	bl	8023404 <OUTLINED_FUNCTION_1>
 8022ef2:	b042      	add	sp, #264	@ 0x108
 8022ef4:	bdb0      	pop	{r4, r5, r7, pc}

08022ef6 <ACI_GAP_LIMITED_DISCOVERABLE_EVENT>:
 8022ef6:	b580      	push	{r7, lr}
 8022ef8:	b0c2      	sub	sp, #264	@ 0x108
 8022efa:	f000 fb75 	bl	80235e8 <OUTLINED_FUNCTION_63>
 8022efe:	2000      	movs	r0, #0
 8022f00:	f88d 0009 	strb.w	r0, [sp, #9]
 8022f04:	2002      	movs	r0, #2
 8022f06:	f000 fb16 	bl	8023536 <OUTLINED_FUNCTION_37>
 8022f0a:	f10d 0006 	add.w	r0, sp, #6
 8022f0e:	f7ff fd8e 	bl	8022a2e <hci_event>
 8022f12:	b042      	add	sp, #264	@ 0x108
 8022f14:	bd80      	pop	{r7, pc}

08022f16 <ACI_GAP_PAIRING_COMPLETE_EVENT>:
 8022f16:	b580      	push	{r7, lr}
 8022f18:	b0c2      	sub	sp, #264	@ 0x108
 8022f1a:	f88d 100d 	strb.w	r1, [sp, #13]
 8022f1e:	2104      	movs	r1, #4
 8022f20:	f000 faec 	bl	80234fc <OUTLINED_FUNCTION_30>
 8022f24:	f88d 200e 	strb.w	r2, [sp, #14]
 8022f28:	f88d 100a 	strb.w	r1, [sp, #10]
 8022f2c:	2101      	movs	r1, #1
 8022f2e:	f88d 000c 	strb.w	r0, [sp, #12]
 8022f32:	f10d 0006 	add.w	r0, sp, #6
 8022f36:	f88d 1009 	strb.w	r1, [sp, #9]
 8022f3a:	2106      	movs	r1, #6
 8022f3c:	f000 fb2d 	bl	802359a <OUTLINED_FUNCTION_51>
 8022f40:	2109      	movs	r1, #9
 8022f42:	f7ff fd74 	bl	8022a2e <hci_event>
 8022f46:	b042      	add	sp, #264	@ 0x108
 8022f48:	bd80      	pop	{r7, pc}

08022f4a <ACI_GAP_PASS_KEY_REQ_EVENT>:
 8022f4a:	b580      	push	{r7, lr}
 8022f4c:	b0c2      	sub	sp, #264	@ 0x108
 8022f4e:	2104      	movs	r1, #4
 8022f50:	f000 fad4 	bl	80234fc <OUTLINED_FUNCTION_30>
 8022f54:	2202      	movs	r2, #2
 8022f56:	f000 fae6 	bl	8023526 <OUTLINED_FUNCTION_34>
 8022f5a:	f10d 0006 	add.w	r0, sp, #6
 8022f5e:	f88d 2009 	strb.w	r2, [sp, #9]
 8022f62:	f000 fa85 	bl	8023470 <OUTLINED_FUNCTION_14>
 8022f66:	b042      	add	sp, #264	@ 0x108
 8022f68:	bd80      	pop	{r7, pc}

08022f6a <ACI_GAP_AUTHORIZATION_REQ_EVENT>:
 8022f6a:	b580      	push	{r7, lr}
 8022f6c:	b0c2      	sub	sp, #264	@ 0x108
 8022f6e:	2104      	movs	r1, #4
 8022f70:	f000 fac4 	bl	80234fc <OUTLINED_FUNCTION_30>
 8022f74:	2203      	movs	r2, #3
 8022f76:	f000 fad6 	bl	8023526 <OUTLINED_FUNCTION_34>
 8022f7a:	f10d 0006 	add.w	r0, sp, #6
 8022f7e:	f88d 2009 	strb.w	r2, [sp, #9]
 8022f82:	f000 fa75 	bl	8023470 <OUTLINED_FUNCTION_14>
 8022f86:	b042      	add	sp, #264	@ 0x108
 8022f88:	bd80      	pop	{r7, pc}

08022f8a <ACI_GAP_PERIPHERAL_SECURITY_INITIATED_EVENT>:
 8022f8a:	b580      	push	{r7, lr}
 8022f8c:	b0c2      	sub	sp, #264	@ 0x108
 8022f8e:	f000 fb2b 	bl	80235e8 <OUTLINED_FUNCTION_63>
 8022f92:	f88d 0009 	strb.w	r0, [sp, #9]
 8022f96:	2002      	movs	r0, #2
 8022f98:	f000 facd 	bl	8023536 <OUTLINED_FUNCTION_37>
 8022f9c:	f10d 0006 	add.w	r0, sp, #6
 8022fa0:	f7ff fd45 	bl	8022a2e <hci_event>
 8022fa4:	b042      	add	sp, #264	@ 0x108
 8022fa6:	bd80      	pop	{r7, pc}

08022fa8 <ACI_GAP_BOND_LOST_EVENT>:
 8022fa8:	b580      	push	{r7, lr}
 8022faa:	b0c2      	sub	sp, #264	@ 0x108
 8022fac:	f000 fb1c 	bl	80235e8 <OUTLINED_FUNCTION_63>
 8022fb0:	2002      	movs	r0, #2
 8022fb2:	f000 fac0 	bl	8023536 <OUTLINED_FUNCTION_37>
 8022fb6:	2005      	movs	r0, #5
 8022fb8:	f88d 0009 	strb.w	r0, [sp, #9]
 8022fbc:	f10d 0006 	add.w	r0, sp, #6
 8022fc0:	f7ff fd35 	bl	8022a2e <hci_event>
 8022fc4:	b042      	add	sp, #264	@ 0x108
 8022fc6:	bd80      	pop	{r7, pc}

08022fc8 <ACI_GAP_PROC_COMPLETE_EVENT>:
 8022fc8:	b5b0      	push	{r4, r5, r7, lr}
 8022fca:	b0c2      	sub	sp, #264	@ 0x108
 8022fcc:	f10d 0506 	add.w	r5, sp, #6
 8022fd0:	f88d 100c 	strb.w	r1, [sp, #12]
 8022fd4:	f88d 000b 	strb.w	r0, [sp, #11]
 8022fd8:	4619      	mov	r1, r3
 8022fda:	4614      	mov	r4, r2
 8022fdc:	f88d 200d 	strb.w	r2, [sp, #13]
 8022fe0:	f105 0008 	add.w	r0, r5, #8
 8022fe4:	f7fd fc2e 	bl	8020844 <ble_memcpy>
 8022fe8:	2004      	movs	r0, #4
 8022fea:	f88d 000a 	strb.w	r0, [sp, #10]
 8022fee:	2007      	movs	r0, #7
 8022ff0:	f88d 0009 	strb.w	r0, [sp, #9]
 8022ff4:	20ff      	movs	r0, #255	@ 0xff
 8022ff6:	f88d 0007 	strb.w	r0, [sp, #7]
 8022ffa:	1d60      	adds	r0, r4, #5
 8022ffc:	f000 fa02 	bl	8023404 <OUTLINED_FUNCTION_1>
 8023000:	b042      	add	sp, #264	@ 0x108
 8023002:	bdb0      	pop	{r4, r5, r7, pc}

08023004 <ACI_GAP_ADDR_NOT_RESOLVED_EVENT>:
 8023004:	b580      	push	{r7, lr}
 8023006:	b0c2      	sub	sp, #264	@ 0x108
 8023008:	2104      	movs	r1, #4
 802300a:	f000 fa77 	bl	80234fc <OUTLINED_FUNCTION_30>
 802300e:	2208      	movs	r2, #8
 8023010:	f000 fa89 	bl	8023526 <OUTLINED_FUNCTION_34>
 8023014:	f10d 0006 	add.w	r0, sp, #6
 8023018:	f88d 2009 	strb.w	r2, [sp, #9]
 802301c:	f000 fa28 	bl	8023470 <OUTLINED_FUNCTION_14>
 8023020:	b042      	add	sp, #264	@ 0x108
 8023022:	bd80      	pop	{r7, pc}

08023024 <ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT>:
 8023024:	b580      	push	{r7, lr}
 8023026:	b0c2      	sub	sp, #264	@ 0x108
 8023028:	2204      	movs	r2, #4
 802302a:	f000 fa67 	bl	80234fc <OUTLINED_FUNCTION_30>
 802302e:	f88d 100d 	strb.w	r1, [sp, #13]
 8023032:	f88d 200a 	strb.w	r2, [sp, #10]
 8023036:	2209      	movs	r2, #9
 8023038:	f88d 000c 	strb.w	r0, [sp, #12]
 802303c:	f10d 0006 	add.w	r0, sp, #6
 8023040:	f88d 2009 	strb.w	r2, [sp, #9]
 8023044:	2208      	movs	r2, #8
 8023046:	f88d 2008 	strb.w	r2, [sp, #8]
 802304a:	22ff      	movs	r2, #255	@ 0xff
 802304c:	f88d 2007 	strb.w	r2, [sp, #7]
 8023050:	0e0a      	lsrs	r2, r1, #24
 8023052:	f88d 2010 	strb.w	r2, [sp, #16]
 8023056:	0c0a      	lsrs	r2, r1, #16
 8023058:	0a09      	lsrs	r1, r1, #8
 802305a:	f88d 100e 	strb.w	r1, [sp, #14]
 802305e:	210b      	movs	r1, #11
 8023060:	f88d 200f 	strb.w	r2, [sp, #15]
 8023064:	f7ff fce3 	bl	8022a2e <hci_event>
 8023068:	b042      	add	sp, #264	@ 0x108
 802306a:	bd80      	pop	{r7, pc}

0802306c <ACI_GAP_KEYPRESS_NOTIFICATION_EVENT>:
 802306c:	b580      	push	{r7, lr}
 802306e:	b0c2      	sub	sp, #264	@ 0x108
 8023070:	f88d 100d 	strb.w	r1, [sp, #13]
 8023074:	2104      	movs	r1, #4
 8023076:	f88d 000b 	strb.w	r0, [sp, #11]
 802307a:	0a00      	lsrs	r0, r0, #8
 802307c:	f88d 100a 	strb.w	r1, [sp, #10]
 8023080:	210a      	movs	r1, #10
 8023082:	f88d 000c 	strb.w	r0, [sp, #12]
 8023086:	f10d 0006 	add.w	r0, sp, #6
 802308a:	f000 fa41 	bl	8023510 <OUTLINED_FUNCTION_32>
 802308e:	b042      	add	sp, #264	@ 0x108
 8023090:	bd80      	pop	{r7, pc}

08023092 <ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT>:
 8023092:	b580      	push	{r7, lr}
 8023094:	b0c2      	sub	sp, #264	@ 0x108
 8023096:	2208      	movs	r2, #8
 8023098:	f000 fa27 	bl	80234ea <OUTLINED_FUNCTION_29>
 802309c:	2200      	movs	r2, #0
 802309e:	f000 fa50 	bl	8023542 <OUTLINED_FUNCTION_38>
 80230a2:	f10d 0006 	add.w	r0, sp, #6
 80230a6:	f000 f9e8 	bl	802347a <OUTLINED_FUNCTION_19>
 80230aa:	b042      	add	sp, #264	@ 0x108
 80230ac:	bd80      	pop	{r7, pc}

080230ae <ACI_L2CAP_PROC_TIMEOUT_EVENT>:
 80230ae:	b5b0      	push	{r4, r5, r7, lr}
 80230b0:	b0c2      	sub	sp, #264	@ 0x108
 80230b2:	f000 fa23 	bl	80234fc <OUTLINED_FUNCTION_30>
 80230b6:	460c      	mov	r4, r1
 80230b8:	f10d 0506 	add.w	r5, sp, #6
 80230bc:	f88d 100d 	strb.w	r1, [sp, #13]
 80230c0:	4611      	mov	r1, r2
 80230c2:	f88d 000c 	strb.w	r0, [sp, #12]
 80230c6:	f105 0008 	add.w	r0, r5, #8
 80230ca:	4622      	mov	r2, r4
 80230cc:	f7fd fbba 	bl	8020844 <ble_memcpy>
 80230d0:	2008      	movs	r0, #8
 80230d2:	f88d 000a 	strb.w	r0, [sp, #10]
 80230d6:	f000 fa79 	bl	80235cc <OUTLINED_FUNCTION_60>
 80230da:	1d60      	adds	r0, r4, #5
 80230dc:	f000 f992 	bl	8023404 <OUTLINED_FUNCTION_1>
 80230e0:	b042      	add	sp, #264	@ 0x108
 80230e2:	bdb0      	pop	{r4, r5, r7, pc}

080230e4 <ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT>:
 80230e4:	b580      	push	{r7, lr}
 80230e6:	b0c2      	sub	sp, #264	@ 0x108
 80230e8:	f88d 100d 	strb.w	r1, [sp, #13]
 80230ec:	2108      	movs	r1, #8
 80230ee:	f000 fa38 	bl	8023562 <OUTLINED_FUNCTION_48>
 80230f2:	2102      	movs	r1, #2
 80230f4:	f88d 000c 	strb.w	r0, [sp, #12]
 80230f8:	f10d 0006 	add.w	r0, sp, #6
 80230fc:	f88d 1009 	strb.w	r1, [sp, #9]
 8023100:	210f      	movs	r1, #15
 8023102:	f000 fa4a 	bl	802359a <OUTLINED_FUNCTION_51>
 8023106:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8023108:	f88d 1016 	strb.w	r1, [sp, #22]
 802310c:	0a09      	lsrs	r1, r1, #8
 802310e:	f88d 1017 	strb.w	r1, [sp, #23]
 8023112:	9945      	ldr	r1, [sp, #276]	@ 0x114
 8023114:	f88d 1014 	strb.w	r1, [sp, #20]
 8023118:	0a09      	lsrs	r1, r1, #8
 802311a:	f88d 1015 	strb.w	r1, [sp, #21]
 802311e:	9944      	ldr	r1, [sp, #272]	@ 0x110
 8023120:	f88d 1012 	strb.w	r1, [sp, #18]
 8023124:	0a09      	lsrs	r1, r1, #8
 8023126:	f88d 1013 	strb.w	r1, [sp, #19]
 802312a:	0a19      	lsrs	r1, r3, #8
 802312c:	f88d 1011 	strb.w	r1, [sp, #17]
 8023130:	0a11      	lsrs	r1, r2, #8
 8023132:	f88d 100f 	strb.w	r1, [sp, #15]
 8023136:	2112      	movs	r1, #18
 8023138:	f7ff fc79 	bl	8022a2e <hci_event>
 802313c:	b042      	add	sp, #264	@ 0x108
 802313e:	bd80      	pop	{r7, pc}

08023140 <ACI_L2CAP_COMMAND_REJECT_EVENT>:
 8023140:	b5b0      	push	{r4, r5, r7, lr}
 8023142:	b0c2      	sub	sp, #264	@ 0x108
 8023144:	f88d 100d 	strb.w	r1, [sp, #13]
 8023148:	0a11      	lsrs	r1, r2, #8
 802314a:	f000 f9d7 	bl	80234fc <OUTLINED_FUNCTION_30>
 802314e:	f10d 0506 	add.w	r5, sp, #6
 8023152:	f88d 200e 	strb.w	r2, [sp, #14]
 8023156:	461a      	mov	r2, r3
 8023158:	461c      	mov	r4, r3
 802315a:	f88d 3010 	strb.w	r3, [sp, #16]
 802315e:	f88d 100f 	strb.w	r1, [sp, #15]
 8023162:	f88d 000c 	strb.w	r0, [sp, #12]
 8023166:	f105 000b 	add.w	r0, r5, #11
 802316a:	9946      	ldr	r1, [sp, #280]	@ 0x118
 802316c:	f7fd fb6a 	bl	8020844 <ble_memcpy>
 8023170:	2008      	movs	r0, #8
 8023172:	f88d 000a 	strb.w	r0, [sp, #10]
 8023176:	200a      	movs	r0, #10
 8023178:	f88d 0009 	strb.w	r0, [sp, #9]
 802317c:	20ff      	movs	r0, #255	@ 0xff
 802317e:	f88d 0007 	strb.w	r0, [sp, #7]
 8023182:	f104 0008 	add.w	r0, r4, #8
 8023186:	f000 f93d 	bl	8023404 <OUTLINED_FUNCTION_1>
 802318a:	b042      	add	sp, #264	@ 0x108
 802318c:	bdb0      	pop	{r4, r5, r7, pc}

0802318e <ACI_GATT_ATTRIBUTE_MODIFIED_EVENT>:
 802318e:	b5b0      	push	{r4, r5, r7, lr}
 8023190:	b0c2      	sub	sp, #264	@ 0x108
 8023192:	f000 f982 	bl	802349a <OUTLINED_FUNCTION_23>
 8023196:	f10d 0506 	add.w	r5, sp, #6
 802319a:	f000 f940 	bl	802341e <OUTLINED_FUNCTION_7>
 802319e:	f000 f9dc 	bl	802355a <OUTLINED_FUNCTION_47>
 80231a2:	f000 fa13 	bl	80235cc <OUTLINED_FUNCTION_60>
 80231a6:	f104 000a 	add.w	r0, r4, #10
 80231aa:	f000 f92b 	bl	8023404 <OUTLINED_FUNCTION_1>
 80231ae:	b042      	add	sp, #264	@ 0x108
 80231b0:	bdb0      	pop	{r4, r5, r7, pc}

080231b2 <ACI_GATT_PROC_TIMEOUT_EVENT>:
 80231b2:	b580      	push	{r7, lr}
 80231b4:	b0c2      	sub	sp, #264	@ 0x108
 80231b6:	f000 f97b 	bl	80234b0 <OUTLINED_FUNCTION_24>
 80231ba:	2102      	movs	r1, #2
 80231bc:	f88d 000c 	strb.w	r0, [sp, #12]
 80231c0:	f10d 0006 	add.w	r0, sp, #6
 80231c4:	f000 f93c 	bl	8023440 <OUTLINED_FUNCTION_9>
 80231c8:	b042      	add	sp, #264	@ 0x108
 80231ca:	bd80      	pop	{r7, pc}

080231cc <ACI_ATT_EXCHANGE_MTU_RESP_EVENT>:
 80231cc:	b580      	push	{r7, lr}
 80231ce:	b0c2      	sub	sp, #264	@ 0x108
 80231d0:	220c      	movs	r2, #12
 80231d2:	f000 f98a 	bl	80234ea <OUTLINED_FUNCTION_29>
 80231d6:	2203      	movs	r2, #3
 80231d8:	f000 f9b3 	bl	8023542 <OUTLINED_FUNCTION_38>
 80231dc:	f10d 0006 	add.w	r0, sp, #6
 80231e0:	f000 f94b 	bl	802347a <OUTLINED_FUNCTION_19>
 80231e4:	b042      	add	sp, #264	@ 0x108
 80231e6:	bd80      	pop	{r7, pc}

080231e8 <ACI_GATT_INDICATION_EVENT>:
 80231e8:	b5b0      	push	{r4, r5, r7, lr}
 80231ea:	b0c2      	sub	sp, #264	@ 0x108
 80231ec:	2af8      	cmp	r2, #248	@ 0xf8
 80231ee:	4614      	mov	r4, r2
 80231f0:	bf28      	it	cs
 80231f2:	22f8      	movcs	r2, #248	@ 0xf8
 80231f4:	f000 f9d7 	bl	80235a6 <OUTLINED_FUNCTION_53>
 80231f8:	f10d 0506 	add.w	r5, sp, #6
 80231fc:	f000 f92b 	bl	8023456 <OUTLINED_FUNCTION_12>
 8023200:	f000 f946 	bl	8023490 <OUTLINED_FUNCTION_22>
 8023204:	200e      	movs	r0, #14
 8023206:	f000 f9a1 	bl	802354c <OUTLINED_FUNCTION_43>
 802320a:	bf38      	it	cc
 802320c:	4601      	movcc	r1, r0
 802320e:	f000 f900 	bl	8023412 <OUTLINED_FUNCTION_5>
 8023212:	b042      	add	sp, #264	@ 0x108
 8023214:	bdb0      	pop	{r4, r5, r7, pc}

08023216 <ACI_GATT_NOTIFICATION_EVENT>:
 8023216:	b5b0      	push	{r4, r5, r7, lr}
 8023218:	b0c2      	sub	sp, #264	@ 0x108
 802321a:	2af8      	cmp	r2, #248	@ 0xf8
 802321c:	4614      	mov	r4, r2
 802321e:	bf28      	it	cs
 8023220:	22f8      	movcs	r2, #248	@ 0xf8
 8023222:	f000 f9c0 	bl	80235a6 <OUTLINED_FUNCTION_53>
 8023226:	f10d 0506 	add.w	r5, sp, #6
 802322a:	f000 f914 	bl	8023456 <OUTLINED_FUNCTION_12>
 802322e:	f000 f92f 	bl	8023490 <OUTLINED_FUNCTION_22>
 8023232:	200f      	movs	r0, #15
 8023234:	f000 f98a 	bl	802354c <OUTLINED_FUNCTION_43>
 8023238:	bf38      	it	cc
 802323a:	4601      	movcc	r1, r0
 802323c:	f000 f8e9 	bl	8023412 <OUTLINED_FUNCTION_5>
 8023240:	b042      	add	sp, #264	@ 0x108
 8023242:	bdb0      	pop	{r4, r5, r7, pc}

08023244 <ACI_GATT_PROC_COMPLETE_EVENT>:
 8023244:	b580      	push	{r7, lr}
 8023246:	b0c2      	sub	sp, #264	@ 0x108
 8023248:	f88d 100d 	strb.w	r1, [sp, #13]
 802324c:	f000 f930 	bl	80234b0 <OUTLINED_FUNCTION_24>
 8023250:	2110      	movs	r1, #16
 8023252:	f88d 000c 	strb.w	r0, [sp, #12]
 8023256:	f10d 0006 	add.w	r0, sp, #6
 802325a:	f000 f959 	bl	8023510 <OUTLINED_FUNCTION_32>
 802325e:	b042      	add	sp, #264	@ 0x108
 8023260:	bd80      	pop	{r7, pc}

08023262 <ACI_GATT_WRITE_PERMIT_REQ_EVENT>:
 8023262:	b5b0      	push	{r4, r5, r7, lr}
 8023264:	b0c2      	sub	sp, #264	@ 0x108
 8023266:	f000 f92a 	bl	80234be <OUTLINED_FUNCTION_25>
 802326a:	f10d 0506 	add.w	r5, sp, #6
 802326e:	4614      	mov	r4, r2
 8023270:	f88d 200f 	strb.w	r2, [sp, #15]
 8023274:	f88d 100e 	strb.w	r1, [sp, #14]
 8023278:	f88d 000c 	strb.w	r0, [sp, #12]
 802327c:	f105 000a 	add.w	r0, r5, #10
 8023280:	4619      	mov	r1, r3
 8023282:	f7fd fadf 	bl	8020844 <ble_memcpy>
 8023286:	f000 f968 	bl	802355a <OUTLINED_FUNCTION_47>
 802328a:	2013      	movs	r0, #19
 802328c:	f000 f990 	bl	80235b0 <OUTLINED_FUNCTION_54>
 8023290:	1de0      	adds	r0, r4, #7
 8023292:	f000 f8b7 	bl	8023404 <OUTLINED_FUNCTION_1>
 8023296:	b042      	add	sp, #264	@ 0x108
 8023298:	bdb0      	pop	{r4, r5, r7, pc}

0802329a <ACI_GATT_READ_PERMIT_REQ_EVENT>:
 802329a:	b580      	push	{r7, lr}
 802329c:	b0c2      	sub	sp, #264	@ 0x108
 802329e:	230c      	movs	r3, #12
 80232a0:	f000 f90d 	bl	80234be <OUTLINED_FUNCTION_25>
 80232a4:	f88d 200f 	strb.w	r2, [sp, #15]
 80232a8:	0a12      	lsrs	r2, r2, #8
 80232aa:	f88d 300a 	strb.w	r3, [sp, #10]
 80232ae:	2314      	movs	r3, #20
 80232b0:	f000 f947 	bl	8023542 <OUTLINED_FUNCTION_38>
 80232b4:	f10d 0006 	add.w	r0, sp, #6
 80232b8:	210b      	movs	r1, #11
 80232ba:	f88d 2010 	strb.w	r2, [sp, #16]
 80232be:	f88d 3009 	strb.w	r3, [sp, #9]
 80232c2:	2308      	movs	r3, #8
 80232c4:	f88d 3008 	strb.w	r3, [sp, #8]
 80232c8:	23ff      	movs	r3, #255	@ 0xff
 80232ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80232ce:	f7ff fbae 	bl	8022a2e <hci_event>
 80232d2:	b042      	add	sp, #264	@ 0x108
 80232d4:	bd80      	pop	{r7, pc}

080232d6 <ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT>:
 80232d6:	b5b0      	push	{r4, r5, r7, lr}
 80232d8:	b0c2      	sub	sp, #264	@ 0x108
 80232da:	f000 f90f 	bl	80234fc <OUTLINED_FUNCTION_30>
 80232de:	f10d 0306 	add.w	r3, sp, #6
 80232e2:	f88d 100d 	strb.w	r1, [sp, #13]
 80232e6:	f88d 000c 	strb.w	r0, [sp, #12]
 80232ea:	2000      	movs	r0, #0
 80232ec:	4281      	cmp	r1, r0
 80232ee:	d00a      	beq.n	8023306 <ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT+0x30>
 80232f0:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 80232f4:	f812 5010 	ldrb.w	r5, [r2, r0, lsl #1]
 80232f8:	7225      	strb	r5, [r4, #8]
 80232fa:	eb02 0540 	add.w	r5, r2, r0, lsl #1
 80232fe:	3001      	adds	r0, #1
 8023300:	786d      	ldrb	r5, [r5, #1]
 8023302:	7265      	strb	r5, [r4, #9]
 8023304:	e7f2      	b.n	80232ec <ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT+0x16>
 8023306:	f000 f928 	bl	802355a <OUTLINED_FUNCTION_47>
 802330a:	2015      	movs	r0, #21
 802330c:	f000 f950 	bl	80235b0 <OUTLINED_FUNCTION_54>
 8023310:	2005      	movs	r0, #5
 8023312:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023316:	f88d 0008 	strb.w	r0, [sp, #8]
 802331a:	b2c0      	uxtb	r0, r0
 802331c:	1cc1      	adds	r1, r0, #3
 802331e:	f10d 0006 	add.w	r0, sp, #6
 8023322:	f7ff fb84 	bl	8022a2e <hci_event>
 8023326:	b042      	add	sp, #264	@ 0x108
 8023328:	bdb0      	pop	{r4, r5, r7, pc}

0802332a <ACI_GATT_TX_POOL_AVAILABLE_EVENT>:
 802332a:	b580      	push	{r7, lr}
 802332c:	b0c2      	sub	sp, #264	@ 0x108
 802332e:	220c      	movs	r2, #12
 8023330:	f000 f8db 	bl	80234ea <OUTLINED_FUNCTION_29>
 8023334:	2216      	movs	r2, #22
 8023336:	f000 f904 	bl	8023542 <OUTLINED_FUNCTION_38>
 802333a:	f10d 0006 	add.w	r0, sp, #6
 802333e:	f000 f89c 	bl	802347a <OUTLINED_FUNCTION_19>
 8023342:	b042      	add	sp, #264	@ 0x108
 8023344:	bd80      	pop	{r7, pc}

08023346 <ACI_GATT_SERVER_CONFIRMATION_EVENT>:
 8023346:	b580      	push	{r7, lr}
 8023348:	b0c2      	sub	sp, #264	@ 0x108
 802334a:	f000 f8b1 	bl	80234b0 <OUTLINED_FUNCTION_24>
 802334e:	2117      	movs	r1, #23
 8023350:	f88d 000c 	strb.w	r0, [sp, #12]
 8023354:	f10d 0006 	add.w	r0, sp, #6
 8023358:	f000 f872 	bl	8023440 <OUTLINED_FUNCTION_9>
 802335c:	b042      	add	sp, #264	@ 0x108
 802335e:	bd80      	pop	{r7, pc}

08023360 <ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT>:
 8023360:	b5b0      	push	{r4, r5, r7, lr}
 8023362:	b0c2      	sub	sp, #264	@ 0x108
 8023364:	f88d 200f 	strb.w	r2, [sp, #15]
 8023368:	0a12      	lsrs	r2, r2, #8
 802336a:	f000 f8a8 	bl	80234be <OUTLINED_FUNCTION_25>
 802336e:	f10d 0506 	add.w	r5, sp, #6
 8023372:	f000 f8ab 	bl	80234cc <OUTLINED_FUNCTION_26>
 8023376:	f000 f8f0 	bl	802355a <OUTLINED_FUNCTION_47>
 802337a:	2018      	movs	r0, #24
 802337c:	f88d 0009 	strb.w	r0, [sp, #9]
 8023380:	20ff      	movs	r0, #255	@ 0xff
 8023382:	f88d 0007 	strb.w	r0, [sp, #7]
 8023386:	f104 0009 	add.w	r0, r4, #9
 802338a:	f000 f83b 	bl	8023404 <OUTLINED_FUNCTION_1>
 802338e:	b042      	add	sp, #264	@ 0x108
 8023390:	bdb0      	pop	{r4, r5, r7, pc}

08023392 <ACI_GATT_NOTIFICATION_COMPLETE_EVENT>:
 8023392:	b580      	push	{r7, lr}
 8023394:	b0c2      	sub	sp, #264	@ 0x108
 8023396:	f000 f88b 	bl	80234b0 <OUTLINED_FUNCTION_24>
 802339a:	211b      	movs	r1, #27
 802339c:	f88d 000c 	strb.w	r0, [sp, #12]
 80233a0:	f10d 0006 	add.w	r0, sp, #6
 80233a4:	f000 f84c 	bl	8023440 <OUTLINED_FUNCTION_9>
 80233a8:	b042      	add	sp, #264	@ 0x108
 80233aa:	bd80      	pop	{r7, pc}

080233ac <ACI_GATT_INDICATION_EXT_EVENT>:
 80233ac:	b5b0      	push	{r4, r5, r7, lr}
 80233ae:	b0c2      	sub	sp, #264	@ 0x108
 80233b0:	f000 f873 	bl	802349a <OUTLINED_FUNCTION_23>
 80233b4:	f10d 0506 	add.w	r5, sp, #6
 80233b8:	f000 f831 	bl	802341e <OUTLINED_FUNCTION_7>
 80233bc:	f000 f8cd 	bl	802355a <OUTLINED_FUNCTION_47>
 80233c0:	201e      	movs	r0, #30
 80233c2:	f88d 0009 	strb.w	r0, [sp, #9]
 80233c6:	20ff      	movs	r0, #255	@ 0xff
 80233c8:	f88d 0007 	strb.w	r0, [sp, #7]
 80233cc:	f104 000a 	add.w	r0, r4, #10
 80233d0:	f000 f818 	bl	8023404 <OUTLINED_FUNCTION_1>
 80233d4:	b042      	add	sp, #264	@ 0x108
 80233d6:	bdb0      	pop	{r4, r5, r7, pc}

080233d8 <ACI_GATT_NOTIFICATION_EXT_EVENT>:
 80233d8:	b5b0      	push	{r4, r5, r7, lr}
 80233da:	b0c2      	sub	sp, #264	@ 0x108
 80233dc:	f000 f85d 	bl	802349a <OUTLINED_FUNCTION_23>
 80233e0:	f10d 0506 	add.w	r5, sp, #6
 80233e4:	f000 f81b 	bl	802341e <OUTLINED_FUNCTION_7>
 80233e8:	f000 f8b7 	bl	802355a <OUTLINED_FUNCTION_47>
 80233ec:	201f      	movs	r0, #31
 80233ee:	f88d 0009 	strb.w	r0, [sp, #9]
 80233f2:	20ff      	movs	r0, #255	@ 0xff
 80233f4:	f88d 0007 	strb.w	r0, [sp, #7]
 80233f8:	f104 000a 	add.w	r0, r4, #10
 80233fc:	f000 f802 	bl	8023404 <OUTLINED_FUNCTION_1>
 8023400:	b042      	add	sp, #264	@ 0x108
 8023402:	bdb0      	pop	{r4, r5, r7, pc}

08023404 <OUTLINED_FUNCTION_1>:
 8023404:	f88d 0008 	strb.w	r0, [sp, #8]
 8023408:	b2c0      	uxtb	r0, r0
 802340a:	1cc1      	adds	r1, r0, #3
 802340c:	4628      	mov	r0, r5
 802340e:	f7ff bb0e 	b.w	8022a2e <hci_event>

08023412 <OUTLINED_FUNCTION_5>:
 8023412:	f88d 1008 	strb.w	r1, [sp, #8]
 8023416:	4628      	mov	r0, r5
 8023418:	3103      	adds	r1, #3
 802341a:	f7ff bb08 	b.w	8022a2e <hci_event>

0802341e <OUTLINED_FUNCTION_7>:
 802341e:	f88d 3011 	strb.w	r3, [sp, #17]
 8023422:	0a1b      	lsrs	r3, r3, #8
 8023424:	f88d 2010 	strb.w	r2, [sp, #16]
 8023428:	f88d 100e 	strb.w	r1, [sp, #14]
 802342c:	f88d 000c 	strb.w	r0, [sp, #12]
 8023430:	f105 000d 	add.w	r0, r5, #13
 8023434:	9946      	ldr	r1, [sp, #280]	@ 0x118
 8023436:	4622      	mov	r2, r4
 8023438:	f88d 3012 	strb.w	r3, [sp, #18]
 802343c:	f7fd ba02 	b.w	8020844 <ble_memcpy>

08023440 <OUTLINED_FUNCTION_9>:
 8023440:	f88d 1009 	strb.w	r1, [sp, #9]
 8023444:	2104      	movs	r1, #4
 8023446:	f88d 1008 	strb.w	r1, [sp, #8]
 802344a:	21ff      	movs	r1, #255	@ 0xff
 802344c:	f88d 1007 	strb.w	r1, [sp, #7]
 8023450:	2107      	movs	r1, #7
 8023452:	f7ff baec 	b.w	8022a2e <hci_event>

08023456 <OUTLINED_FUNCTION_12>:
 8023456:	f88d 200f 	strb.w	r2, [sp, #15]
 802345a:	0a09      	lsrs	r1, r1, #8
 802345c:	0a00      	lsrs	r0, r0, #8
 802345e:	f88d 100e 	strb.w	r1, [sp, #14]
 8023462:	f88d 000c 	strb.w	r0, [sp, #12]
 8023466:	f105 000a 	add.w	r0, r5, #10
 802346a:	4619      	mov	r1, r3
 802346c:	f7fd b9ea 	b.w	8020844 <ble_memcpy>

08023470 <OUTLINED_FUNCTION_14>:
 8023470:	f88d 1007 	strb.w	r1, [sp, #7]
 8023474:	2107      	movs	r1, #7
 8023476:	f7ff bada 	b.w	8022a2e <hci_event>

0802347a <OUTLINED_FUNCTION_19>:
 802347a:	2109      	movs	r1, #9
 802347c:	f88d 2009 	strb.w	r2, [sp, #9]
 8023480:	2206      	movs	r2, #6
 8023482:	f88d 2008 	strb.w	r2, [sp, #8]
 8023486:	22ff      	movs	r2, #255	@ 0xff
 8023488:	f88d 2007 	strb.w	r2, [sp, #7]
 802348c:	f7ff bacf 	b.w	8022a2e <hci_event>

08023490 <OUTLINED_FUNCTION_22>:
 8023490:	200c      	movs	r0, #12
 8023492:	21ff      	movs	r1, #255	@ 0xff
 8023494:	f88d 000a 	strb.w	r0, [sp, #10]
 8023498:	4770      	bx	lr

0802349a <OUTLINED_FUNCTION_23>:
 802349a:	f88d 200f 	strb.w	r2, [sp, #15]
 802349e:	0a12      	lsrs	r2, r2, #8
 80234a0:	f88d 100d 	strb.w	r1, [sp, #13]
 80234a4:	0a09      	lsrs	r1, r1, #8
 80234a6:	f88d 000b 	strb.w	r0, [sp, #11]
 80234aa:	0a00      	lsrs	r0, r0, #8
 80234ac:	461c      	mov	r4, r3
 80234ae:	4770      	bx	lr

080234b0 <OUTLINED_FUNCTION_24>:
 80234b0:	210c      	movs	r1, #12
 80234b2:	f88d 000b 	strb.w	r0, [sp, #11]
 80234b6:	0a00      	lsrs	r0, r0, #8
 80234b8:	f88d 100a 	strb.w	r1, [sp, #10]
 80234bc:	4770      	bx	lr

080234be <OUTLINED_FUNCTION_25>:
 80234be:	f88d 100d 	strb.w	r1, [sp, #13]
 80234c2:	0a09      	lsrs	r1, r1, #8
 80234c4:	f88d 000b 	strb.w	r0, [sp, #11]
 80234c8:	0a00      	lsrs	r0, r0, #8
 80234ca:	4770      	bx	lr

080234cc <OUTLINED_FUNCTION_26>:
 80234cc:	461c      	mov	r4, r3
 80234ce:	f88d 3011 	strb.w	r3, [sp, #17]
 80234d2:	f88d 2010 	strb.w	r2, [sp, #16]
 80234d6:	f88d 100e 	strb.w	r1, [sp, #14]
 80234da:	f88d 000c 	strb.w	r0, [sp, #12]
 80234de:	f105 000c 	add.w	r0, r5, #12
 80234e2:	9946      	ldr	r1, [sp, #280]	@ 0x118
 80234e4:	461a      	mov	r2, r3
 80234e6:	f7fd b9ad 	b.w	8020844 <ble_memcpy>

080234ea <OUTLINED_FUNCTION_29>:
 80234ea:	f88d 100d 	strb.w	r1, [sp, #13]
 80234ee:	0a09      	lsrs	r1, r1, #8
 80234f0:	f88d 000b 	strb.w	r0, [sp, #11]
 80234f4:	0a00      	lsrs	r0, r0, #8
 80234f6:	f88d 200a 	strb.w	r2, [sp, #10]
 80234fa:	4770      	bx	lr

080234fc <OUTLINED_FUNCTION_30>:
 80234fc:	f88d 000b 	strb.w	r0, [sp, #11]
 8023500:	0a00      	lsrs	r0, r0, #8
 8023502:	4770      	bx	lr

08023504 <OUTLINED_FUNCTION_31>:
 8023504:	f88d 0008 	strb.w	r0, [sp, #8]
 8023508:	203e      	movs	r0, #62	@ 0x3e
 802350a:	f88d 0007 	strb.w	r0, [sp, #7]
 802350e:	4770      	bx	lr

08023510 <OUTLINED_FUNCTION_32>:
 8023510:	f88d 1009 	strb.w	r1, [sp, #9]
 8023514:	2105      	movs	r1, #5
 8023516:	f88d 1008 	strb.w	r1, [sp, #8]
 802351a:	21ff      	movs	r1, #255	@ 0xff
 802351c:	f88d 1007 	strb.w	r1, [sp, #7]
 8023520:	2108      	movs	r1, #8
 8023522:	f7ff ba84 	b.w	8022a2e <hci_event>

08023526 <OUTLINED_FUNCTION_34>:
 8023526:	f88d 100a 	strb.w	r1, [sp, #10]
 802352a:	f88d 1008 	strb.w	r1, [sp, #8]
 802352e:	21ff      	movs	r1, #255	@ 0xff
 8023530:	f88d 000c 	strb.w	r0, [sp, #12]
 8023534:	4770      	bx	lr

08023536 <OUTLINED_FUNCTION_37>:
 8023536:	f88d 0008 	strb.w	r0, [sp, #8]
 802353a:	20ff      	movs	r0, #255	@ 0xff
 802353c:	f88d 0007 	strb.w	r0, [sp, #7]
 8023540:	4770      	bx	lr

08023542 <OUTLINED_FUNCTION_38>:
 8023542:	f88d 100e 	strb.w	r1, [sp, #14]
 8023546:	f88d 000c 	strb.w	r0, [sp, #12]
 802354a:	4770      	bx	lr

0802354c <OUTLINED_FUNCTION_43>:
 802354c:	f88d 1007 	strb.w	r1, [sp, #7]
 8023550:	f88d 0009 	strb.w	r0, [sp, #9]
 8023554:	1de0      	adds	r0, r4, #7
 8023556:	28ff      	cmp	r0, #255	@ 0xff
 8023558:	4770      	bx	lr

0802355a <OUTLINED_FUNCTION_47>:
 802355a:	200c      	movs	r0, #12
 802355c:	f88d 000a 	strb.w	r0, [sp, #10]
 8023560:	4770      	bx	lr

08023562 <OUTLINED_FUNCTION_48>:
 8023562:	f88d 000b 	strb.w	r0, [sp, #11]
 8023566:	0a00      	lsrs	r0, r0, #8
 8023568:	f88d 3010 	strb.w	r3, [sp, #16]
 802356c:	f88d 200e 	strb.w	r2, [sp, #14]
 8023570:	f88d 100a 	strb.w	r1, [sp, #10]
 8023574:	4770      	bx	lr

08023576 <OUTLINED_FUNCTION_49>:
 8023576:	f88d 0008 	strb.w	r0, [sp, #8]
 802357a:	203e      	movs	r0, #62	@ 0x3e
 802357c:	f88d 0007 	strb.w	r0, [sp, #7]
 8023580:	4620      	mov	r0, r4
 8023582:	f7ff ba54 	b.w	8022a2e <hci_event>

08023586 <OUTLINED_FUNCTION_50>:
 8023586:	f88d 0009 	strb.w	r0, [sp, #9]
 802358a:	2004      	movs	r0, #4
 802358c:	f88d 100a 	strb.w	r1, [sp, #10]
 8023590:	f88d 200c 	strb.w	r2, [sp, #12]
 8023594:	f88d 0008 	strb.w	r0, [sp, #8]
 8023598:	4770      	bx	lr

0802359a <OUTLINED_FUNCTION_51>:
 802359a:	f88d 1008 	strb.w	r1, [sp, #8]
 802359e:	21ff      	movs	r1, #255	@ 0xff
 80235a0:	f88d 1007 	strb.w	r1, [sp, #7]
 80235a4:	4770      	bx	lr

080235a6 <OUTLINED_FUNCTION_53>:
 80235a6:	f88d 100d 	strb.w	r1, [sp, #13]
 80235aa:	f88d 000b 	strb.w	r0, [sp, #11]
 80235ae:	4770      	bx	lr

080235b0 <OUTLINED_FUNCTION_54>:
 80235b0:	f88d 0009 	strb.w	r0, [sp, #9]
 80235b4:	20ff      	movs	r0, #255	@ 0xff
 80235b6:	f88d 0007 	strb.w	r0, [sp, #7]
 80235ba:	4770      	bx	lr

080235bc <OUTLINED_FUNCTION_55>:
 80235bc:	2206      	movs	r2, #6
 80235be:	f88d 300e 	strb.w	r3, [sp, #14]
 80235c2:	f88d 000c 	strb.w	r0, [sp, #12]
 80235c6:	f104 0009 	add.w	r0, r4, #9
 80235ca:	4770      	bx	lr

080235cc <OUTLINED_FUNCTION_60>:
 80235cc:	2001      	movs	r0, #1
 80235ce:	f88d 0009 	strb.w	r0, [sp, #9]
 80235d2:	20ff      	movs	r0, #255	@ 0xff
 80235d4:	f88d 0007 	strb.w	r0, [sp, #7]
 80235d8:	4770      	bx	lr

080235da <OUTLINED_FUNCTION_62>:
 80235da:	f88d 0007 	strb.w	r0, [sp, #7]
 80235de:	0a08      	lsrs	r0, r1, #8
 80235e0:	2107      	movs	r1, #7
 80235e2:	f88d 000b 	strb.w	r0, [sp, #11]
 80235e6:	4770      	bx	lr

080235e8 <OUTLINED_FUNCTION_63>:
 80235e8:	2004      	movs	r0, #4
 80235ea:	2105      	movs	r1, #5
 80235ec:	f88d 000a 	strb.w	r0, [sp, #10]
 80235f0:	4770      	bx	lr
	...

080235f4 <BleStack_Init>:
 80235f4:	b580      	push	{r7, lr}
 80235f6:	4601      	mov	r1, r0
 80235f8:	4804      	ldr	r0, [pc, #16]	@ (802360c <__arm_cp.0_0>)
 80235fa:	2228      	movs	r2, #40	@ 0x28
 80235fc:	f7fd f922 	bl	8020844 <ble_memcpy>
 8023600:	f000 fab6 	bl	8023b70 <LECTRL_LL_Init>
 8023604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023608:	f000 b802 	b.w	8023610 <HCI_RESET>

0802360c <__arm_cp.0_0>:
 802360c:	20009fec 	.word	0x20009fec

08023610 <HCI_RESET>:
 8023610:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 8023612:	f7de fe6b 	bl	80022ec <BLEPLAT_Init>
 8023616:	4826      	ldr	r0, [pc, #152]	@ (80236b0 <__arm_cp.1_0>)
 8023618:	2100      	movs	r1, #0
 802361a:	f44f 720d 	mov.w	r2, #564	@ 0x234
 802361e:	f7fd f961 	bl	80208e4 <ble_memset>
 8023622:	f000 fa8f 	bl	8023b44 <SLP_Init>
 8023626:	f000 ffdf 	bl	80245e8 <CfgData_Init>
 802362a:	f000 fab1 	bl	8023b90 <LECTRL_Reset>
 802362e:	b100      	cbz	r0, 8023632 <HCI_RESET+0x22>
 8023630:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 8023632:	4d20      	ldr	r5, [pc, #128]	@ (80236b4 <__arm_cp.1_1>)
 8023634:	2100      	movs	r1, #0
 8023636:	682c      	ldr	r4, [r5, #0]
 8023638:	88aa      	ldrh	r2, [r5, #4]
 802363a:	4620      	mov	r0, r4
 802363c:	9400      	str	r4, [sp, #0]
 802363e:	f7fd f951 	bl	80208e4 <ble_memset>
 8023642:	6868      	ldr	r0, [r5, #4]
 8023644:	f5b0 7f0d 	cmp.w	r0, #564	@ 0x234
 8023648:	d30e      	bcc.n	8023668 <HCI_RESET+0x58>
 802364a:	466c      	mov	r4, sp
 802364c:	4620      	mov	r0, r4
 802364e:	f005 f803 	bl	8028658 <ACL_MemAlloc>
 8023652:	4620      	mov	r0, r4
 8023654:	f001 fc3c 	bl	8024ed0 <GATT_MemAlloc>
 8023658:	4620      	mov	r0, r4
 802365a:	f005 fe2b 	bl	80292b4 <SMP_MemAlloc>
 802365e:	4620      	mov	r0, r4
 8023660:	f004 fda0 	bl	80281a4 <L2C_MemAlloc>
 8023664:	6868      	ldr	r0, [r5, #4]
 8023666:	9c00      	ldr	r4, [sp, #0]
 8023668:	6829      	ldr	r1, [r5, #0]
 802366a:	1a61      	subs	r1, r4, r1
 802366c:	4281      	cmp	r1, r0
 802366e:	dc0e      	bgt.n	802368e <HCI_RESET+0x7e>
 8023670:	68a8      	ldr	r0, [r5, #8]
 8023672:	89aa      	ldrh	r2, [r5, #12]
 8023674:	2100      	movs	r1, #0
 8023676:	9001      	str	r0, [sp, #4]
 8023678:	f7fd f934 	bl	80208e4 <ble_memset>
 802367c:	a801      	add	r0, sp, #4
 802367e:	f002 f869 	bl	8025754 <GATT_Db_MemAlloc>
 8023682:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8023686:	9a01      	ldr	r2, [sp, #4]
 8023688:	1a10      	subs	r0, r2, r0
 802368a:	4288      	cmp	r0, r1
 802368c:	dd01      	ble.n	8023692 <HCI_RESET+0x82>
 802368e:	2007      	movs	r0, #7
 8023690:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 8023692:	f004 fff7 	bl	8028684 <ACL_Init>
 8023696:	f004 fd93 	bl	80281c0 <L2C_Init>
 802369a:	f005 fe19 	bl	80292d0 <SMP_Init>
 802369e:	f001 fc31 	bl	8024f04 <GATT_Init>
 80236a2:	f001 f871 	bl	8024788 <GAP_Init>
 80236a6:	f000 f833 	bl	8023710 <EVT_Init>
 80236aa:	2000      	movs	r0, #0
 80236ac:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80236ae:	bf00      	nop

080236b0 <__arm_cp.1_0>:
 80236b0:	2000a014 	.word	0x2000a014

080236b4 <__arm_cp.1_1>:
 80236b4:	20009fec 	.word	0x20009fec

080236b8 <BleStack_Process>:
 80236b8:	b580      	push	{r7, lr}
 80236ba:	f001 fd2d 	bl	8025118 <GATT_Process>
 80236be:	f005 fecb 	bl	8029458 <SMP_Process>
 80236c2:	f000 fa9d 	bl	8023c00 <LECTRL_Process>
 80236c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80236ca:	f000 ba43 	b.w	8023b54 <SLP_SleepCheck>
	...

080236d0 <BLEPLATCB_TimerExpiry>:
 80236d0:	f04f 31ff 	mov.w	r1, #4294967295
 80236d4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80236d8:	290c      	cmp	r1, #12
 80236da:	d80c      	bhi.n	80236f6 <BLEPLATCB_TimerExpiry+0x26>
 80236dc:	e8df f001 	tbb	[pc, r1]
 80236e0:	0c0b0907 	.word	0x0c0b0907
 80236e4:	0f0b0b0b 	.word	0x0f0b0b0b
 80236e8:	120b0b0b 	.word	0x120b0b0b
 80236ec:	0015      	.short	0x0015
 80236ee:	f001 b9eb 	b.w	8024ac8 <GAP_Adv_Lim_Disc_Timeout_Cb>
 80236f2:	f001 bbc7 	b.w	8024e84 <GAP_Scan_Disc_Proc_Timeout_Cb>
 80236f6:	4770      	bx	lr
 80236f8:	b2c0      	uxtb	r0, r0
 80236fa:	f004 be93 	b.w	8028424 <L2C_Timeout_Cb>
 80236fe:	b2c0      	uxtb	r0, r0
 8023700:	f001 bef8 	b.w	80254f4 <GATT_Timeout_Cb>
 8023704:	b2c0      	uxtb	r0, r0
 8023706:	f007 b92f 	b.w	802a968 <SMP_Timeout_Cb>
 802370a:	b2c0      	uxtb	r0, r0
 802370c:	f007 bbbe 	b.w	802ae8c <SMP_Rep_Attempts_Timeout_Cb>

08023710 <EVT_Init>:
 8023710:	4804      	ldr	r0, [pc, #16]	@ (8023724 <__arm_cp.0_0>)
 8023712:	4905      	ldr	r1, [pc, #20]	@ (8023728 <__arm_cp.0_1>)
 8023714:	f8c0 122c 	str.w	r1, [r0, #556]	@ 0x22c
 8023718:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 802371c:	f8a0 1228 	strh.w	r1, [r0, #552]	@ 0x228
 8023720:	4770      	bx	lr
 8023722:	bf00      	nop

08023724 <__arm_cp.0_0>:
 8023724:	2000a014 	.word	0x2000a014

08023728 <__arm_cp.0_1>:
 8023728:	0003ffff 	.word	0x0003ffff

0802372c <EVT_aci_hal_fw_error>:
 802372c:	b580      	push	{r7, lr}
 802372e:	f7ff fbc9 	bl	8022ec4 <ACI_HAL_FW_ERROR_EVENT>
 8023732:	2000      	movs	r0, #0
 8023734:	bd80      	pop	{r7, pc}
	...

08023738 <EVT_aci_l2cap_connection_update_resp>:
 8023738:	b580      	push	{r7, lr}
 802373a:	4805      	ldr	r0, [pc, #20]	@ (8023750 <__arm_cp.2_0>)
 802373c:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 8023740:	0580      	lsls	r0, r0, #22
 8023742:	d503      	bpl.n	802374c <EVT_aci_l2cap_connection_update_resp+0x14>
 8023744:	4608      	mov	r0, r1
 8023746:	4611      	mov	r1, r2
 8023748:	f7ff fca3 	bl	8023092 <ACI_L2CAP_CONNECTION_UPDATE_RESP_EVENT>
 802374c:	2000      	movs	r0, #0
 802374e:	bd80      	pop	{r7, pc}

08023750 <__arm_cp.2_0>:
 8023750:	2000a014 	.word	0x2000a014

08023754 <EVT_aci_l2cap_connection_update_req>:
 8023754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8023756:	480b      	ldr	r0, [pc, #44]	@ (8023784 <__arm_cp.3_0>)
 8023758:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 802375c:	05c0      	lsls	r0, r0, #23
 802375e:	d50d      	bpl.n	802377c <EVT_aci_l2cap_connection_update_req+0x28>
 8023760:	6a10      	ldr	r0, [r2, #32]
 8023762:	7944      	ldrb	r4, [r0, #5]
 8023764:	88c2      	ldrh	r2, [r0, #6]
 8023766:	8903      	ldrh	r3, [r0, #8]
 8023768:	8945      	ldrh	r5, [r0, #10]
 802376a:	8986      	ldrh	r6, [r0, #12]
 802376c:	89c0      	ldrh	r0, [r0, #14]
 802376e:	9002      	str	r0, [sp, #8]
 8023770:	4608      	mov	r0, r1
 8023772:	4621      	mov	r1, r4
 8023774:	e9cd 5600 	strd	r5, r6, [sp]
 8023778:	f7ff fcb4 	bl	80230e4 <ACI_L2CAP_CONNECTION_UPDATE_REQ_EVENT>
 802377c:	2000      	movs	r0, #0
 802377e:	b004      	add	sp, #16
 8023780:	bd70      	pop	{r4, r5, r6, pc}
 8023782:	bf00      	nop

08023784 <__arm_cp.3_0>:
 8023784:	2000a014 	.word	0x2000a014

08023788 <EVT_aci_l2cap_command_reject>:
 8023788:	b5e0      	push	{r5, r6, r7, lr}
 802378a:	4608      	mov	r0, r1
 802378c:	6a11      	ldr	r1, [r2, #32]
 802378e:	f10d 0307 	add.w	r3, sp, #7
 8023792:	88ca      	ldrh	r2, [r1, #6]
 8023794:	7949      	ldrb	r1, [r1, #5]
 8023796:	9300      	str	r3, [sp, #0]
 8023798:	2300      	movs	r3, #0
 802379a:	f7ff fcd1 	bl	8023140 <ACI_L2CAP_COMMAND_REJECT_EVENT>
 802379e:	2000      	movs	r0, #0
 80237a0:	bd8c      	pop	{r2, r3, r7, pc}
	...

080237a4 <EVT_aci_l2cap_proc_timeout>:
 80237a4:	b580      	push	{r7, lr}
 80237a6:	b0c0      	sub	sp, #256	@ 0x100
 80237a8:	4806      	ldr	r0, [pc, #24]	@ (80237c4 <__arm_cp.5_0>)
 80237aa:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 80237ae:	0540      	lsls	r0, r0, #21
 80237b0:	d504      	bpl.n	80237bc <EVT_aci_l2cap_proc_timeout+0x18>
 80237b2:	4608      	mov	r0, r1
 80237b4:	466a      	mov	r2, sp
 80237b6:	2100      	movs	r1, #0
 80237b8:	f7ff fc79 	bl	80230ae <ACI_L2CAP_PROC_TIMEOUT_EVENT>
 80237bc:	2000      	movs	r0, #0
 80237be:	b040      	add	sp, #256	@ 0x100
 80237c0:	bd80      	pop	{r7, pc}
 80237c2:	bf00      	nop

080237c4 <__arm_cp.5_0>:
 80237c4:	2000a014 	.word	0x2000a014

080237c8 <EVT_aci_gap_limited_discoverable>:
 80237c8:	4803      	ldr	r0, [pc, #12]	@ (80237d8 <__arm_cp.6_0>)
 80237ca:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 80237ce:	07c0      	lsls	r0, r0, #31
 80237d0:	bf18      	it	ne
 80237d2:	f7ff bb90 	bne.w	8022ef6 <ACI_GAP_LIMITED_DISCOVERABLE_EVENT>
 80237d6:	4770      	bx	lr

080237d8 <__arm_cp.6_0>:
 80237d8:	2000a014 	.word	0x2000a014

080237dc <EVT_aci_gap_proc_complete>:
 80237dc:	4805      	ldr	r0, [pc, #20]	@ (80237f4 <__arm_cp.7_0>)
 80237de:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 80237e2:	0600      	lsls	r0, r0, #24
 80237e4:	bf58      	it	pl
 80237e6:	4770      	bxpl	lr
 80237e8:	4608      	mov	r0, r1
 80237ea:	4611      	mov	r1, r2
 80237ec:	2200      	movs	r2, #0
 80237ee:	2300      	movs	r3, #0
 80237f0:	f7ff bbea 	b.w	8022fc8 <ACI_GAP_PROC_COMPLETE_EVENT>

080237f4 <__arm_cp.7_0>:
 80237f4:	2000a014 	.word	0x2000a014

080237f8 <EVT_aci_gap_pass_key_req>:
 80237f8:	4804      	ldr	r0, [pc, #16]	@ (802380c <__arm_cp.8_0>)
 80237fa:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 80237fe:	0740      	lsls	r0, r0, #29
 8023800:	bf44      	itt	mi
 8023802:	4608      	movmi	r0, r1
 8023804:	f7ff bba1 	bmi.w	8022f4a <ACI_GAP_PASS_KEY_REQ_EVENT>
 8023808:	4770      	bx	lr
 802380a:	bf00      	nop

0802380c <__arm_cp.8_0>:
 802380c:	2000a014 	.word	0x2000a014

08023810 <EVT_aci_gap_numeric_comparison_value>:
 8023810:	4804      	ldr	r0, [pc, #16]	@ (8023824 <__arm_cp.9_0>)
 8023812:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 8023816:	0480      	lsls	r0, r0, #18
 8023818:	bf58      	it	pl
 802381a:	4770      	bxpl	lr
 802381c:	4608      	mov	r0, r1
 802381e:	4611      	mov	r1, r2
 8023820:	f7ff bc00 	b.w	8023024 <ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT>

08023824 <__arm_cp.9_0>:
 8023824:	2000a014 	.word	0x2000a014

08023828 <EVT_aci_gap_keypress_notification>:
 8023828:	4804      	ldr	r0, [pc, #16]	@ (802383c <__arm_cp.10_0>)
 802382a:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 802382e:	0440      	lsls	r0, r0, #17
 8023830:	bf58      	it	pl
 8023832:	4770      	bxpl	lr
 8023834:	4608      	mov	r0, r1
 8023836:	4611      	mov	r1, r2
 8023838:	f7ff bc18 	b.w	802306c <ACI_GAP_KEYPRESS_NOTIFICATION_EVENT>

0802383c <__arm_cp.10_0>:
 802383c:	2000a014 	.word	0x2000a014

08023840 <EVT_aci_gap_addr_not_resolved>:
 8023840:	4804      	ldr	r0, [pc, #16]	@ (8023854 <__arm_cp.11_0>)
 8023842:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 8023846:	0500      	lsls	r0, r0, #20
 8023848:	bf44      	itt	mi
 802384a:	4608      	movmi	r0, r1
 802384c:	f7ff bbda 	bmi.w	8023004 <ACI_GAP_ADDR_NOT_RESOLVED_EVENT>
 8023850:	4770      	bx	lr
 8023852:	bf00      	nop

08023854 <__arm_cp.11_0>:
 8023854:	2000a014 	.word	0x2000a014

08023858 <EVT_aci_gap_peripheral_security_initiated>:
 8023858:	4803      	ldr	r0, [pc, #12]	@ (8023868 <__arm_cp.12_0>)
 802385a:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 802385e:	06c0      	lsls	r0, r0, #27
 8023860:	bf48      	it	mi
 8023862:	f7ff bb92 	bmi.w	8022f8a <ACI_GAP_PERIPHERAL_SECURITY_INITIATED_EVENT>
 8023866:	4770      	bx	lr

08023868 <__arm_cp.12_0>:
 8023868:	2000a014 	.word	0x2000a014

0802386c <EVT_aci_gap_bond_lost>:
 802386c:	4803      	ldr	r0, [pc, #12]	@ (802387c <__arm_cp.13_0>)
 802386e:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 8023872:	0680      	lsls	r0, r0, #26
 8023874:	bf48      	it	mi
 8023876:	f7ff bb97 	bmi.w	8022fa8 <ACI_GAP_BOND_LOST_EVENT>
 802387a:	4770      	bx	lr

0802387c <__arm_cp.13_0>:
 802387c:	2000a014 	.word	0x2000a014

08023880 <EVT_aci_gap_pairing_complete>:
 8023880:	4805      	ldr	r0, [pc, #20]	@ (8023898 <__arm_cp.14_0>)
 8023882:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 8023886:	0780      	lsls	r0, r0, #30
 8023888:	bf58      	it	pl
 802388a:	4770      	bxpl	lr
 802388c:	4608      	mov	r0, r1
 802388e:	4611      	mov	r1, r2
 8023890:	461a      	mov	r2, r3
 8023892:	f7ff bb40 	b.w	8022f16 <ACI_GAP_PAIRING_COMPLETE_EVENT>
 8023896:	bf00      	nop

08023898 <__arm_cp.14_0>:
 8023898:	2000a014 	.word	0x2000a014

0802389c <EVT_aci_gap_authorization_req>:
 802389c:	4804      	ldr	r0, [pc, #16]	@ (80238b0 <__arm_cp.15_0>)
 802389e:	f8b0 0228 	ldrh.w	r0, [r0, #552]	@ 0x228
 80238a2:	0700      	lsls	r0, r0, #28
 80238a4:	bf44      	itt	mi
 80238a6:	4608      	movmi	r0, r1
 80238a8:	f7ff bb5f 	bmi.w	8022f6a <ACI_GAP_AUTHORIZATION_REQ_EVENT>
 80238ac:	4770      	bx	lr
 80238ae:	bf00      	nop

080238b0 <__arm_cp.15_0>:
 80238b0:	2000a014 	.word	0x2000a014

080238b4 <EVT_aci_gatt_tx_pool_available>:
 80238b4:	4608      	mov	r0, r1
 80238b6:	4611      	mov	r1, r2
 80238b8:	f7ff bd37 	b.w	802332a <ACI_GATT_TX_POOL_AVAILABLE_EVENT>

080238bc <EVT_aci_gatt_server_confirmation>:
 80238bc:	4608      	mov	r0, r1
 80238be:	f7ff bd42 	b.w	8023346 <ACI_GATT_SERVER_CONFIRMATION_EVENT>
	...

080238c4 <EVT_aci_gatt_proc_complete>:
 80238c4:	4805      	ldr	r0, [pc, #20]	@ (80238dc <__arm_cp.18_0>)
 80238c6:	f890 022e 	ldrb.w	r0, [r0, #558]	@ 0x22e
 80238ca:	07c0      	lsls	r0, r0, #31
 80238cc:	bf04      	itt	eq
 80238ce:	2000      	moveq	r0, #0
 80238d0:	4770      	bxeq	lr
 80238d2:	4608      	mov	r0, r1
 80238d4:	4611      	mov	r1, r2
 80238d6:	f7ff bcb5 	b.w	8023244 <ACI_GATT_PROC_COMPLETE_EVENT>
 80238da:	bf00      	nop

080238dc <__arm_cp.18_0>:
 80238dc:	2000a014 	.word	0x2000a014

080238e0 <EVT_aci_gatt_proc_timeout>:
 80238e0:	4804      	ldr	r0, [pc, #16]	@ (80238f4 <__arm_cp.19_0>)
 80238e2:	f890 022c 	ldrb.w	r0, [r0, #556]	@ 0x22c
 80238e6:	0780      	lsls	r0, r0, #30
 80238e8:	bf44      	itt	mi
 80238ea:	4608      	movmi	r0, r1
 80238ec:	f7ff bc61 	bmi.w	80231b2 <ACI_GATT_PROC_TIMEOUT_EVENT>
 80238f0:	2000      	movs	r0, #0
 80238f2:	4770      	bx	lr

080238f4 <__arm_cp.19_0>:
 80238f4:	2000a014 	.word	0x2000a014

080238f8 <EVT_aci_gatt_read_permit_req>:
 80238f8:	4608      	mov	r0, r1
 80238fa:	4611      	mov	r1, r2
 80238fc:	461a      	mov	r2, r3
 80238fe:	f7ff bccc 	b.w	802329a <ACI_GATT_READ_PERMIT_REQ_EVENT>

08023902 <EVT_aci_gatt_read_multi_permit_req>:
 8023902:	4608      	mov	r0, r1
 8023904:	0851      	lsrs	r1, r2, #1
 8023906:	461a      	mov	r2, r3
 8023908:	f7ff bce5 	b.w	80232d6 <ACI_GATT_READ_MULTI_PERMIT_REQ_EVENT>

0802390c <EVT_aci_gatt_write_permit_req>:
 802390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802390e:	b0c1      	sub	sp, #260	@ 0x104
 8023910:	e9dd 6046 	ldrd	r6, r0, [sp, #280]	@ 0x118
 8023914:	af01      	add	r7, sp, #4
 8023916:	4614      	mov	r4, r2
 8023918:	460d      	mov	r5, r1
 802391a:	1d19      	adds	r1, r3, #4
 802391c:	463b      	mov	r3, r7
 802391e:	4632      	mov	r2, r6
 8023920:	f004 ff81 	bl	8028826 <ACL_Get_Data>
 8023924:	4628      	mov	r0, r5
 8023926:	4621      	mov	r1, r4
 8023928:	4632      	mov	r2, r6
 802392a:	463b      	mov	r3, r7
 802392c:	f7ff fc99 	bl	8023262 <ACI_GATT_WRITE_PERMIT_REQ_EVENT>
 8023930:	b041      	add	sp, #260	@ 0x104
 8023932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023934 <EVT_aci_gatt_prepare_write_permit_req>:
 8023934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023938:	b0c2      	sub	sp, #264	@ 0x108
 802393a:	9848      	ldr	r0, [sp, #288]	@ 0x120
 802393c:	460e      	mov	r6, r1
 802393e:	af02      	add	r7, sp, #8
 8023940:	461c      	mov	r4, r3
 8023942:	4615      	mov	r5, r2
 8023944:	1d01      	adds	r1, r0, #4
 8023946:	e9dd 8049 	ldrd	r8, r0, [sp, #292]	@ 0x124
 802394a:	463b      	mov	r3, r7
 802394c:	4642      	mov	r2, r8
 802394e:	f004 ff6a 	bl	8028826 <ACL_Get_Data>
 8023952:	4630      	mov	r0, r6
 8023954:	4629      	mov	r1, r5
 8023956:	4622      	mov	r2, r4
 8023958:	4643      	mov	r3, r8
 802395a:	9700      	str	r7, [sp, #0]
 802395c:	f7ff fd00 	bl	8023360 <ACI_GATT_PREPARE_WRITE_PERMIT_REQ_EVENT>
 8023960:	b042      	add	sp, #264	@ 0x108
 8023962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08023968 <EVT_aci_att_exchange_mtu_resp>:
 8023968:	4805      	ldr	r0, [pc, #20]	@ (8023980 <__arm_cp.26_0>)
 802396a:	f890 022c 	ldrb.w	r0, [r0, #556]	@ 0x22c
 802396e:	0740      	lsls	r0, r0, #29
 8023970:	bf5c      	itt	pl
 8023972:	2000      	movpl	r0, #0
 8023974:	4770      	bxpl	lr
 8023976:	4608      	mov	r0, r1
 8023978:	4611      	mov	r1, r2
 802397a:	f7ff bc27 	b.w	80231cc <ACI_ATT_EXCHANGE_MTU_RESP_EVENT>
 802397e:	bf00      	nop

08023980 <__arm_cp.26_0>:
 8023980:	2000a014 	.word	0x2000a014

08023984 <EVT_aci_gatt_notification_complete>:
 8023984:	4608      	mov	r0, r1
 8023986:	f7ff bd04 	b.w	8023392 <ACI_GATT_NOTIFICATION_COMPLETE_EVENT>
	...

0802398c <EVT_GATT_Attribute_Modified>:
 802398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023990:	b0c3      	sub	sp, #268	@ 0x10c
 8023992:	4604      	mov	r4, r0
 8023994:	481d      	ldr	r0, [pc, #116]	@ (8023a0c <__arm_cp.34_0>)
 8023996:	f890 022c 	ldrb.w	r0, [r0, #556]	@ 0x22c
 802399a:	07c0      	lsls	r0, r0, #31
 802399c:	d031      	beq.n	8023a02 <EVT_GATT_Attribute_Modified+0x76>
 802399e:	4615      	mov	r5, r2
 80239a0:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
 80239a4:	f04f 0b00 	mov.w	fp, #0
 80239a8:	4688      	mov	r8, r1
 80239aa:	9304      	str	r3, [sp, #16]
 80239ac:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80239b0:	fa1f f885 	uxth.w	r8, r5
 80239b4:	46a9      	mov	r9, r5
 80239b6:	fa1f fa8b 	uxth.w	sl, fp
 80239ba:	f10d 0417 	add.w	r4, sp, #23
 80239be:	4620      	mov	r0, r4
 80239c0:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 80239c4:	bf28      	it	cs
 80239c6:	f04f 09f5 	movcs.w	r9, #245	@ 0xf5
 80239ca:	fa1f f689 	uxth.w	r6, r9
 80239ce:	eb03 010a 	add.w	r1, r3, sl
 80239d2:	4632      	mov	r2, r6
 80239d4:	f7fc ff36 	bl	8020844 <ble_memcpy>
 80239d8:	9400      	str	r4, [sp, #0]
 80239da:	e9dd 4102 	ldrd	r4, r1, [sp, #8]
 80239de:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 80239e2:	bf38      	it	cc
 80239e4:	2700      	movcc	r7, #0
 80239e6:	ea47 000b 	orr.w	r0, r7, fp
 80239ea:	4633      	mov	r3, r6
 80239ec:	b282      	uxth	r2, r0
 80239ee:	4620      	mov	r0, r4
 80239f0:	f7ff fbcd 	bl	802318e <ACI_GATT_ATTRIBUTE_MODIFIED_EVENT>
 80239f4:	eba5 0509 	sub.w	r5, r5, r9
 80239f8:	9b04      	ldr	r3, [sp, #16]
 80239fa:	eb0a 0b06 	add.w	fp, sl, r6
 80239fe:	0428      	lsls	r0, r5, #16
 8023a00:	d1d6      	bne.n	80239b0 <EVT_GATT_Attribute_Modified+0x24>
 8023a02:	2000      	movs	r0, #0
 8023a04:	b043      	add	sp, #268	@ 0x10c
 8023a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a0a:	bf00      	nop

08023a0c <__arm_cp.34_0>:
 8023a0c:	2000a014 	.word	0x2000a014

08023a10 <EVT_GATT_Indication>:
 8023a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a14:	b0c0      	sub	sp, #256	@ 0x100
 8023a16:	4604      	mov	r4, r0
 8023a18:	480c      	ldr	r0, [pc, #48]	@ (8023a4c <__arm_cp.39_0>)
 8023a1a:	f890 022d 	ldrb.w	r0, [r0, #557]	@ 0x22d
 8023a1e:	0680      	lsls	r0, r0, #26
 8023a20:	d507      	bpl.n	8023a32 <EVT_GATT_Indication+0x22>
 8023a22:	88a0      	ldrh	r0, [r4, #4]
 8023a24:	1fc6      	subs	r6, r0, #7
 8023a26:	b2b2      	uxth	r2, r6
 8023a28:	2af5      	cmp	r2, #245	@ 0xf5
 8023a2a:	d304      	bcc.n	8023a36 <EVT_GATT_Indication+0x26>
 8023a2c:	4620      	mov	r0, r4
 8023a2e:	f000 f80f 	bl	8023a50 <EVT_GATT_Ext_B>
 8023a32:	2000      	movs	r0, #0
 8023a34:	e007      	b.n	8023a46 <EVT_GATT_Indication+0x36>
 8023a36:	6a20      	ldr	r0, [r4, #32]
 8023a38:	46e8      	mov	r8, sp
 8023a3a:	f000 f86d 	bl	8023b18 <OUTLINED_FUNCTION_2>
 8023a3e:	f000 f879 	bl	8023b34 <OUTLINED_FUNCTION_6>
 8023a42:	f7ff fbd1 	bl	80231e8 <ACI_GATT_INDICATION_EVENT>
 8023a46:	b040      	add	sp, #256	@ 0x100
 8023a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023a4c <__arm_cp.39_0>:
 8023a4c:	2000a014 	.word	0x2000a014

08023a50 <EVT_GATT_Ext_B>:
 8023a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a54:	b0c3      	sub	sp, #268	@ 0x10c
 8023a56:	4682      	mov	sl, r0
 8023a58:	8880      	ldrh	r0, [r0, #4]
 8023a5a:	f44f 4b00 	mov.w	fp, #32768	@ 0x8000
 8023a5e:	2400      	movs	r4, #0
 8023a60:	f10d 090c 	add.w	r9, sp, #12
 8023a64:	1fc7      	subs	r7, r0, #7
 8023a66:	f8da 0020 	ldr.w	r0, [sl, #32]
 8023a6a:	7941      	ldrb	r1, [r0, #5]
 8023a6c:	7980      	ldrb	r0, [r0, #6]
 8023a6e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8023a72:	9002      	str	r0, [sp, #8]
 8023a74:	fa1f f887 	uxth.w	r8, r7
 8023a78:	4620      	mov	r0, r4
 8023a7a:	463d      	mov	r5, r7
 8023a7c:	464b      	mov	r3, r9
 8023a7e:	f36f 30df 	bfc	r0, #15, #17
 8023a82:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 8023a86:	bf28      	it	cs
 8023a88:	25f5      	movcs	r5, #245	@ 0xf5
 8023a8a:	b2ae      	uxth	r6, r5
 8023a8c:	1dc1      	adds	r1, r0, #7
 8023a8e:	4650      	mov	r0, sl
 8023a90:	4632      	mov	r2, r6
 8023a92:	f004 fec8 	bl	8028826 <ACL_Get_Data>
 8023a96:	f1b8 0ff6 	cmp.w	r8, #246	@ 0xf6
 8023a9a:	bf38      	it	cc
 8023a9c:	f04f 0b00 	movcc.w	fp, #0
 8023aa0:	f8da 1020 	ldr.w	r1, [sl, #32]
 8023aa4:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 8023aa8:	ea4b 0204 	orr.w	r2, fp, r4
 8023aac:	7909      	ldrb	r1, [r1, #4]
 8023aae:	291d      	cmp	r1, #29
 8023ab0:	d104      	bne.n	8023abc <EVT_GATT_Ext_B+0x6c>
 8023ab2:	f000 f838 	bl	8023b26 <OUTLINED_FUNCTION_3>
 8023ab6:	f7ff fc79 	bl	80233ac <ACI_GATT_INDICATION_EXT_EVENT>
 8023aba:	e003      	b.n	8023ac4 <EVT_GATT_Ext_B+0x74>
 8023abc:	f000 f833 	bl	8023b26 <OUTLINED_FUNCTION_3>
 8023ac0:	f7ff fc8a 	bl	80233d8 <ACI_GATT_NOTIFICATION_EXT_EVENT>
 8023ac4:	b2a0      	uxth	r0, r4
 8023ac6:	1b7f      	subs	r7, r7, r5
 8023ac8:	1984      	adds	r4, r0, r6
 8023aca:	0438      	lsls	r0, r7, #16
 8023acc:	bf04      	itt	eq
 8023ace:	b043      	addeq	sp, #268	@ 0x10c
 8023ad0:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ad4:	e7ce      	b.n	8023a74 <EVT_GATT_Ext_B+0x24>
	...

08023ad8 <EVT_GATT_Notification>:
 8023ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023adc:	b0c0      	sub	sp, #256	@ 0x100
 8023ade:	4604      	mov	r4, r0
 8023ae0:	480c      	ldr	r0, [pc, #48]	@ (8023b14 <__arm_cp.41_0>)
 8023ae2:	f890 022d 	ldrb.w	r0, [r0, #557]	@ 0x22d
 8023ae6:	0640      	lsls	r0, r0, #25
 8023ae8:	d507      	bpl.n	8023afa <EVT_GATT_Notification+0x22>
 8023aea:	88a0      	ldrh	r0, [r4, #4]
 8023aec:	1fc6      	subs	r6, r0, #7
 8023aee:	b2b2      	uxth	r2, r6
 8023af0:	2af5      	cmp	r2, #245	@ 0xf5
 8023af2:	d304      	bcc.n	8023afe <EVT_GATT_Notification+0x26>
 8023af4:	4620      	mov	r0, r4
 8023af6:	f7ff ffab 	bl	8023a50 <EVT_GATT_Ext_B>
 8023afa:	2000      	movs	r0, #0
 8023afc:	e007      	b.n	8023b0e <EVT_GATT_Notification+0x36>
 8023afe:	6a20      	ldr	r0, [r4, #32]
 8023b00:	46e8      	mov	r8, sp
 8023b02:	f000 f809 	bl	8023b18 <OUTLINED_FUNCTION_2>
 8023b06:	f000 f815 	bl	8023b34 <OUTLINED_FUNCTION_6>
 8023b0a:	f7ff fb84 	bl	8023216 <ACI_GATT_NOTIFICATION_EVENT>
 8023b0e:	b040      	add	sp, #256	@ 0x100
 8023b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023b14 <__arm_cp.41_0>:
 8023b14:	2000a014 	.word	0x2000a014

08023b18 <OUTLINED_FUNCTION_2>:
 8023b18:	2107      	movs	r1, #7
 8023b1a:	7947      	ldrb	r7, [r0, #5]
 8023b1c:	7985      	ldrb	r5, [r0, #6]
 8023b1e:	4620      	mov	r0, r4
 8023b20:	4643      	mov	r3, r8
 8023b22:	f004 be80 	b.w	8028826 <ACL_Get_Data>

08023b26 <OUTLINED_FUNCTION_3>:
 8023b26:	9902      	ldr	r1, [sp, #8]
 8023b28:	b292      	uxth	r2, r2
 8023b2a:	4633      	mov	r3, r6
 8023b2c:	f8cd 9000 	str.w	r9, [sp]
 8023b30:	b289      	uxth	r1, r1
 8023b32:	4770      	bx	lr

08023b34 <OUTLINED_FUNCTION_6>:
 8023b34:	ea47 2105 	orr.w	r1, r7, r5, lsl #8
 8023b38:	8920      	ldrh	r0, [r4, #8]
 8023b3a:	b2f2      	uxtb	r2, r6
 8023b3c:	4643      	mov	r3, r8
 8023b3e:	b289      	uxth	r1, r1
 8023b40:	4770      	bx	lr
	...

08023b44 <SLP_Init>:
 8023b44:	4802      	ldr	r0, [pc, #8]	@ (8023b50 <__arm_cp.0_0>)
 8023b46:	2106      	movs	r1, #6
 8023b48:	f880 103a 	strb.w	r1, [r0, #58]	@ 0x3a
 8023b4c:	4770      	bx	lr
 8023b4e:	bf00      	nop

08023b50 <__arm_cp.0_0>:
 8023b50:	2000a014 	.word	0x2000a014

08023b54 <SLP_SleepCheck>:
 8023b54:	4805      	ldr	r0, [pc, #20]	@ (8023b6c <__arm_cp.1_0>)
 8023b56:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8023b5a:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 8023b5e:	4001      	ands	r1, r0
 8023b60:	1a08      	subs	r0, r1, r0
 8023b62:	fab0 f080 	clz	r0, r0
 8023b66:	0940      	lsrs	r0, r0, #5
 8023b68:	4770      	bx	lr
 8023b6a:	bf00      	nop

08023b6c <__arm_cp.1_0>:
 8023b6c:	2000a014 	.word	0x2000a014

08023b70 <LECTRL_LL_Init>:
 8023b70:	b510      	push	{r4, lr}
 8023b72:	4c05      	ldr	r4, [pc, #20]	@ (8023b88 <__arm_cp.0_0>)
 8023b74:	7820      	ldrb	r0, [r4, #0]
 8023b76:	b100      	cbz	r0, 8023b7a <LECTRL_LL_Init+0xa>
 8023b78:	bd10      	pop	{r4, pc}
 8023b7a:	4804      	ldr	r0, [pc, #16]	@ (8023b8c <__arm_cp.0_1>)
 8023b7c:	f7e8 f94a 	bl	800be14 <ll_sys_ble_cntrl_init>
 8023b80:	2001      	movs	r0, #1
 8023b82:	7020      	strb	r0, [r4, #0]
 8023b84:	bd10      	pop	{r4, pc}
 8023b86:	bf00      	nop

08023b88 <__arm_cp.0_0>:
 8023b88:	2000a248 	.word	0x2000a248

08023b8c <__arm_cp.0_1>:
 8023b8c:	08023fb9 	.word	0x08023fb9

08023b90 <LECTRL_Reset>:
 8023b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b94:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8023bec <__arm_cp.1_0>
 8023b98:	4915      	ldr	r1, [pc, #84]	@ (8023bf0 <__arm_cp.1_1>)
 8023b9a:	4f16      	ldr	r7, [pc, #88]	@ (8023bf4 <__arm_cp.1_2>)
 8023b9c:	2208      	movs	r2, #8
 8023b9e:	f108 0403 	add.w	r4, r8, #3
 8023ba2:	4620      	mov	r0, r4
 8023ba4:	47b8      	blx	r7
 8023ba6:	f108 050b 	add.w	r5, r8, #11
 8023baa:	4913      	ldr	r1, [pc, #76]	@ (8023bf8 <__arm_cp.1_3>)
 8023bac:	2208      	movs	r2, #8
 8023bae:	4628      	mov	r0, r5
 8023bb0:	47b8      	blx	r7
 8023bb2:	f108 0613 	add.w	r6, r8, #19
 8023bb6:	4911      	ldr	r1, [pc, #68]	@ (8023bfc <__arm_cp.1_4>)
 8023bb8:	2208      	movs	r2, #8
 8023bba:	4630      	mov	r0, r6
 8023bbc:	47b8      	blx	r7
 8023bbe:	4620      	mov	r0, r4
 8023bc0:	f7ec fec3 	bl	801094a <ll_intf_set_event_mask>
 8023bc4:	4630      	mov	r0, r6
 8023bc6:	f7ec fec2 	bl	801094e <ll_intf_set_event_mask_page2>
 8023bca:	4628      	mov	r0, r5
 8023bcc:	f7ec fec1 	bl	8010952 <ll_intf_set_le_event_mask>
 8023bd0:	2014      	movs	r0, #20
 8023bd2:	f7ec fed6 	bl	8010982 <ll_intf_set_custom_event_mask>
 8023bd6:	200a      	movs	r0, #10
 8023bd8:	f888 0001 	strb.w	r0, [r8, #1]
 8023bdc:	f7ec fcd8 	bl	8010590 <ll_intf_reset>
 8023be0:	4604      	mov	r4, r0
 8023be2:	f7de feb3 	bl	800294c <ll_sys_reset>
 8023be6:	b2e0      	uxtb	r0, r4
 8023be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023bec <__arm_cp.1_0>:
 8023bec:	2000a248 	.word	0x2000a248

08023bf0 <__arm_cp.1_1>:
 8023bf0:	0802e6c7 	.word	0x0802e6c7

08023bf4 <__arm_cp.1_2>:
 8023bf4:	08020845 	.word	0x08020845

08023bf8 <__arm_cp.1_3>:
 8023bf8:	0802e6cf 	.word	0x0802e6cf

08023bfc <__arm_cp.1_4>:
 8023bfc:	0802e6d7 	.word	0x0802e6d7

08023c00 <LECTRL_Process>:
 8023c00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023c04:	4d14      	ldr	r5, [pc, #80]	@ (8023c58 <__arm_cp.2_0>)
 8023c06:	78a8      	ldrb	r0, [r5, #2]
 8023c08:	b120      	cbz	r0, 8023c14 <LECTRL_Process+0x14>
 8023c0a:	2000      	movs	r0, #0
 8023c0c:	70a8      	strb	r0, [r5, #2]
 8023c0e:	2002      	movs	r0, #2
 8023c10:	f7ec fe84 	bl	801091c <ll_intf_chng_evnt_hndlr_state>
 8023c14:	2000      	movs	r0, #0
 8023c16:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8023c18:	f10d 0803 	add.w	r8, sp, #3
 8023c1c:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8023c20:	9003      	str	r0, [sp, #12]
 8023c22:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8023c26:	f88d 0003 	strb.w	r0, [sp, #3]
 8023c2a:	ac01      	add	r4, sp, #4
 8023c2c:	b197      	cbz	r7, 8023c54 <LECTRL_Process+0x54>
 8023c2e:	88b8      	ldrh	r0, [r7, #4]
 8023c30:	4621      	mov	r1, r4
 8023c32:	4642      	mov	r2, r8
 8023c34:	683d      	ldr	r5, [r7, #0]
 8023c36:	f000 f835 	bl	8023ca4 <LECTRL_AllocateACLDataInLL>
 8023c3a:	b958      	cbnz	r0, 8023c54 <LECTRL_Process+0x54>
 8023c3c:	4630      	mov	r0, r6
 8023c3e:	4639      	mov	r1, r7
 8023c40:	f004 fecc 	bl	80289dc <ACL_List_Remove>
 8023c44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8023c48:	4638      	mov	r0, r7
 8023c4a:	4621      	mov	r1, r4
 8023c4c:	f000 f888 	bl	8023d60 <LECTRL_SendAclDataToLL>
 8023c50:	462f      	mov	r7, r5
 8023c52:	e7eb      	b.n	8023c2c <LECTRL_Process+0x2c>
 8023c54:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}

08023c58 <__arm_cp.2_0>:
 8023c58:	2000a248 	.word	0x2000a248

08023c5c <LECTRL_SendAclDataFromHostToController>:
 8023c5c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 8023c5e:	4d10      	ldr	r5, [pc, #64]	@ (8023ca0 <__arm_cp.4_0>)
 8023c60:	4604      	mov	r4, r0
 8023c62:	2000      	movs	r0, #0
 8023c64:	9003      	str	r0, [sp, #12]
 8023c66:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8023c6a:	f88d 0003 	strb.w	r0, [sp, #3]
 8023c6e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8023c70:	b930      	cbnz	r0, 8023c80 <LECTRL_SendAclDataFromHostToController+0x24>
 8023c72:	88a0      	ldrh	r0, [r4, #4]
 8023c74:	a901      	add	r1, sp, #4
 8023c76:	f10d 0203 	add.w	r2, sp, #3
 8023c7a:	f000 f813 	bl	8023ca4 <LECTRL_AllocateACLDataInLL>
 8023c7e:	b138      	cbz	r0, 8023c90 <LECTRL_SendAclDataFromHostToController+0x34>
 8023c80:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8023c84:	4621      	mov	r1, r4
 8023c86:	f004 fe99 	bl	80289bc <ACL_List_Insert_Tail>
 8023c8a:	2000      	movs	r0, #0
 8023c8c:	b004      	add	sp, #16
 8023c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8023c90:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8023c94:	a901      	add	r1, sp, #4
 8023c96:	4620      	mov	r0, r4
 8023c98:	f000 f862 	bl	8023d60 <LECTRL_SendAclDataToLL>
 8023c9c:	e7f6      	b.n	8023c8c <LECTRL_SendAclDataFromHostToController+0x30>
 8023c9e:	bf00      	nop

08023ca0 <__arm_cp.4_0>:
 8023ca0:	2000a248 	.word	0x2000a248

08023ca4 <LECTRL_AllocateACLDataInLL>:
 8023ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023ca8:	b280      	uxth	r0, r0
 8023caa:	460c      	mov	r4, r1
 8023cac:	21fb      	movs	r1, #251	@ 0xfb
 8023cae:	2700      	movs	r7, #0
 8023cb0:	4690      	mov	r8, r2
 8023cb2:	30fa      	adds	r0, #250	@ 0xfa
 8023cb4:	fbb0 f9f1 	udiv	r9, r0, r1
 8023cb8:	2000      	movs	r0, #0
 8023cba:	fa5f f589 	uxtb.w	r5, r9
 8023cbe:	2d04      	cmp	r5, #4
 8023cc0:	bf38      	it	cc
 8023cc2:	2001      	movcc	r0, #1
 8023cc4:	2101      	movs	r1, #1
 8023cc6:	f7f7 fe2a 	bl	801b91e <bsp_assert>
 8023cca:	4e24      	ldr	r6, [pc, #144]	@ (8023d5c <__arm_cp.5_0>)
 8023ccc:	42bd      	cmp	r5, r7
 8023cce:	d014      	beq.n	8023cfa <LECTRL_AllocateACLDataInLL+0x56>
 8023cd0:	4630      	mov	r0, r6
 8023cd2:	f7f9 fef1 	bl	801dab8 <os_mem_pool_alloc>
 8023cd6:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
 8023cda:	b198      	cbz	r0, 8023d04 <LECTRL_AllocateACLDataInLL+0x60>
 8023cdc:	2100      	movs	r1, #0
 8023cde:	2210      	movs	r2, #16
 8023ce0:	f7fc fe00 	bl	80208e4 <ble_memset>
 8023ce4:	f7ec fdc3 	bl	801086e <ll_intf_alloc_ll_pkt>
 8023ce8:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 8023cec:	6008      	str	r0, [r1, #0]
 8023cee:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8023cf2:	6800      	ldr	r0, [r0, #0]
 8023cf4:	b1d0      	cbz	r0, 8023d2c <LECTRL_AllocateACLDataInLL+0x88>
 8023cf6:	3701      	adds	r7, #1
 8023cf8:	e7e8      	b.n	8023ccc <LECTRL_AllocateACLDataInLL+0x28>
 8023cfa:	2000      	movs	r0, #0
 8023cfc:	f888 9000 	strb.w	r9, [r8]
 8023d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d04:	2500      	movs	r5, #0
 8023d06:	2600      	movs	r6, #0
 8023d08:	42b7      	cmp	r7, r6
 8023d0a:	d023      	beq.n	8023d54 <LECTRL_AllocateACLDataInLL+0xb0>
 8023d0c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8023d10:	6801      	ldr	r1, [r0, #0]
 8023d12:	b139      	cbz	r1, 8023d24 <LECTRL_AllocateACLDataInLL+0x80>
 8023d14:	1f08      	subs	r0, r1, #4
 8023d16:	f7f9 fed1 	bl	801dabc <os_mem_pool_free>
 8023d1a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8023d1e:	6005      	str	r5, [r0, #0]
 8023d20:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8023d24:	f7f9 feca 	bl	801dabc <os_mem_pool_free>
 8023d28:	3601      	adds	r6, #1
 8023d2a:	e7ed      	b.n	8023d08 <LECTRL_AllocateACLDataInLL+0x64>
 8023d2c:	2500      	movs	r5, #0
 8023d2e:	2600      	movs	r6, #0
 8023d30:	42be      	cmp	r6, r7
 8023d32:	d80f      	bhi.n	8023d54 <LECTRL_AllocateACLDataInLL+0xb0>
 8023d34:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8023d38:	6801      	ldr	r1, [r0, #0]
 8023d3a:	b139      	cbz	r1, 8023d4c <LECTRL_AllocateACLDataInLL+0xa8>
 8023d3c:	1f08      	subs	r0, r1, #4
 8023d3e:	f7f9 febd 	bl	801dabc <os_mem_pool_free>
 8023d42:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8023d46:	6005      	str	r5, [r0, #0]
 8023d48:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8023d4c:	f7f9 feb6 	bl	801dabc <os_mem_pool_free>
 8023d50:	3601      	adds	r6, #1
 8023d52:	e7ed      	b.n	8023d30 <LECTRL_AllocateACLDataInLL+0x8c>
 8023d54:	2007      	movs	r0, #7
 8023d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d5a:	bf00      	nop

08023d5c <__arm_cp.5_0>:
 8023d5c:	20009514 	.word	0x20009514

08023d60 <LECTRL_SendAclDataToLL>:
 8023d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d64:	f8b0 a004 	ldrh.w	sl, [r0, #4]
 8023d68:	4690      	mov	r8, r2
 8023d6a:	460e      	mov	r6, r1
 8023d6c:	4681      	mov	r9, r0
 8023d6e:	f04f 0b00 	mov.w	fp, #0
 8023d72:	27fb      	movs	r7, #251	@ 0xfb
 8023d74:	2501      	movs	r5, #1
 8023d76:	2400      	movs	r4, #0
 8023d78:	45a0      	cmp	r8, r4
 8023d7a:	d046      	beq.n	8023e0a <LECTRL_SendAclDataToLL+0xaa>
 8023d7c:	b2b8      	uxth	r0, r7
 8023d7e:	fa1f f78a 	uxth.w	r7, sl
 8023d82:	fa1f f18b 	uxth.w	r1, fp
 8023d86:	42b8      	cmp	r0, r7
 8023d88:	bf38      	it	cc
 8023d8a:	4607      	movcc	r7, r0
 8023d8c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8023d90:	463a      	mov	r2, r7
 8023d92:	6800      	ldr	r0, [r0, #0]
 8023d94:	1d03      	adds	r3, r0, #4
 8023d96:	4648      	mov	r0, r9
 8023d98:	f004 fd45 	bl	8028826 <ACL_Get_Data>
 8023d9c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8023da0:	2004      	movs	r0, #4
 8023da2:	8148      	strh	r0, [r1, #10]
 8023da4:	07e8      	lsls	r0, r5, #31
 8023da6:	818f      	strh	r7, [r1, #12]
 8023da8:	d005      	beq.n	8023db6 <LECTRL_SendAclDataToLL+0x56>
 8023daa:	f899 000a 	ldrb.w	r0, [r9, #10]
 8023dae:	3801      	subs	r0, #1
 8023db0:	bf18      	it	ne
 8023db2:	2001      	movne	r0, #1
 8023db4:	e000      	b.n	8023db8 <LECTRL_SendAclDataToLL+0x58>
 8023db6:	2000      	movs	r0, #0
 8023db8:	7388      	strb	r0, [r1, #14]
 8023dba:	f8b9 0008 	ldrh.w	r0, [r9, #8]
 8023dbe:	3801      	subs	r0, #1
 8023dc0:	b280      	uxth	r0, r0
 8023dc2:	f7ec fca2 	bl	801070a <ll_intf_acl_data_from_host_to_cntrlr>
 8023dc6:	4605      	mov	r5, r0
 8023dc8:	0600      	lsls	r0, r0, #24
 8023dca:	d105      	bne.n	8023dd8 <LECTRL_SendAclDataToLL+0x78>
 8023dcc:	44bb      	add	fp, r7
 8023dce:	ebaa 0a07 	sub.w	sl, sl, r7
 8023dd2:	3401      	adds	r4, #1
 8023dd4:	2500      	movs	r5, #0
 8023dd6:	e7cf      	b.n	8023d78 <LECTRL_SendAclDataToLL+0x18>
 8023dd8:	f1a8 0701 	sub.w	r7, r8, #1
 8023ddc:	f04f 0a00 	mov.w	sl, #0
 8023de0:	42a7      	cmp	r7, r4
 8023de2:	dd10      	ble.n	8023e06 <LECTRL_SendAclDataToLL+0xa6>
 8023de4:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8023de8:	6801      	ldr	r1, [r0, #0]
 8023dea:	b141      	cbz	r1, 8023dfe <LECTRL_SendAclDataToLL+0x9e>
 8023dec:	1f08      	subs	r0, r1, #4
 8023dee:	f7f9 fe65 	bl	801dabc <os_mem_pool_free>
 8023df2:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8023df6:	f8c0 a000 	str.w	sl, [r0]
 8023dfa:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8023dfe:	f7f9 fe5d 	bl	801dabc <os_mem_pool_free>
 8023e02:	3f01      	subs	r7, #1
 8023e04:	e7ec      	b.n	8023de0 <LECTRL_SendAclDataToLL+0x80>
 8023e06:	4544      	cmp	r4, r8
 8023e08:	d305      	bcc.n	8023e16 <LECTRL_SendAclDataToLL+0xb6>
 8023e0a:	4804      	ldr	r0, [pc, #16]	@ (8023e1c <__arm_cp.6_0>)
 8023e0c:	4649      	mov	r1, r9
 8023e0e:	301c      	adds	r0, #28
 8023e10:	f004 fdd4 	bl	80289bc <ACL_List_Insert_Tail>
 8023e14:	2500      	movs	r5, #0
 8023e16:	b2e8      	uxtb	r0, r5
 8023e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e1c <__arm_cp.6_0>:
 8023e1c:	2000a248 	.word	0x2000a248

08023e20 <HCI_LE_SET_ADVERTISING_PARAMETERS>:
 8023e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023e22:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023e24:	f8ad 1002 	strh.w	r1, [sp, #2]
 8023e28:	f8ad 0000 	strh.w	r0, [sp]
 8023e2c:	4668      	mov	r0, sp
 8023e2e:	f88d 3005 	strb.w	r3, [sp, #5]
 8023e32:	f88d 2004 	strb.w	r2, [sp, #4]
 8023e36:	f88d 400e 	strb.w	r4, [sp, #14]
 8023e3a:	9c08      	ldr	r4, [sp, #32]
 8023e3c:	3007      	adds	r0, #7
 8023e3e:	f88d 400d 	strb.w	r4, [sp, #13]
 8023e42:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8023e46:	b119      	cbz	r1, 8023e50 <HCI_LE_SET_ADVERTISING_PARAMETERS+0x30>
 8023e48:	2206      	movs	r2, #6
 8023e4a:	f7fc fcfb 	bl	8020844 <ble_memcpy>
 8023e4e:	e003      	b.n	8023e58 <HCI_LE_SET_ADVERTISING_PARAMETERS+0x38>
 8023e50:	2100      	movs	r1, #0
 8023e52:	2206      	movs	r2, #6
 8023e54:	f7fc fd46 	bl	80208e4 <ble_memset>
 8023e58:	4668      	mov	r0, sp
 8023e5a:	f88d 4006 	strb.w	r4, [sp, #6]
 8023e5e:	f7ec fb35 	bl	80104cc <ll_intf_le_set_adv_params>
 8023e62:	b2c0      	uxtb	r0, r0
 8023e64:	b004      	add	sp, #16
 8023e66:	bd10      	pop	{r4, pc}

08023e68 <HCI_LE_SET_ADVERTISING_DATA>:
 8023e68:	b580      	push	{r7, lr}
 8023e6a:	f7ec fb25 	bl	80104b8 <ll_intf_le_set_adv_data>
 8023e6e:	b2c0      	uxtb	r0, r0
 8023e70:	bd80      	pop	{r7, pc}

08023e72 <HCI_LE_SET_ADVERTISING_ENABLE>:
 8023e72:	b580      	push	{r7, lr}
 8023e74:	f7ec fb17 	bl	80104a6 <ll_intf_le_set_adv_enable>
 8023e78:	b2c0      	uxtb	r0, r0
 8023e7a:	bd80      	pop	{r7, pc}

08023e7c <HCI_LE_SET_SCAN_ENABLE>:
 8023e7c:	b580      	push	{r7, lr}
 8023e7e:	f7ec fc03 	bl	8010688 <ll_intf_le_set_scan_enable>
 8023e82:	b2c0      	uxtb	r0, r0
 8023e84:	bd80      	pop	{r7, pc}

08023e86 <HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE>:
 8023e86:	b580      	push	{r7, lr}
 8023e88:	f7ec fbe2 	bl	8010650 <ll_intf_le_set_addr_rsln_enble>
 8023e8c:	b2c0      	uxtb	r0, r0
 8023e8e:	bd80      	pop	{r7, pc}

08023e90 <HCI_LE_CLEAR_FILTER_ACCEPT_LIST>:
 8023e90:	b580      	push	{r7, lr}
 8023e92:	f7ec fc13 	bl	80106bc <ll_intf_le_clear_white_list>
 8023e96:	b2c0      	uxtb	r0, r0
 8023e98:	bd80      	pop	{r7, pc}

08023e9a <HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST>:
 8023e9a:	b580      	push	{r7, lr}
 8023e9c:	f7ec fc01 	bl	80106a2 <ll_intf_le_add_device_white_list>
 8023ea0:	b2c0      	uxtb	r0, r0
 8023ea2:	bd80      	pop	{r7, pc}

08023ea4 <HCI_LE_SET_DEFAULT_PHY>:
 8023ea4:	b580      	push	{r7, lr}
 8023ea6:	f7ec fc19 	bl	80106dc <ll_intf_le_set_default_phy_cmd>
 8023eaa:	b2c0      	uxtb	r0, r0
 8023eac:	bd80      	pop	{r7, pc}

08023eae <HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER>:
 8023eae:	b580      	push	{r7, lr}
 8023eb0:	f7ec fbd4 	bl	801065c <ll_intf_le_read_adv_channel_tx_power>
 8023eb4:	b2c0      	uxtb	r0, r0
 8023eb6:	bd80      	pop	{r7, pc}

08023eb8 <HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY>:
 8023eb8:	b580      	push	{r7, lr}
 8023eba:	3801      	subs	r0, #1
 8023ebc:	2100      	movs	r1, #0
 8023ebe:	b280      	uxth	r0, r0
 8023ec0:	f7ec fbb4 	bl	801062c <ll_intf_rcvd_long_trm_key>
 8023ec4:	b2c0      	uxtb	r0, r0
 8023ec6:	bd80      	pop	{r7, pc}

08023ec8 <HCI_LE_LONG_TERM_KEY_REQUEST_REPLY>:
 8023ec8:	b580      	push	{r7, lr}
 8023eca:	3801      	subs	r0, #1
 8023ecc:	b280      	uxth	r0, r0
 8023ece:	f7ec fbad 	bl	801062c <ll_intf_rcvd_long_trm_key>
 8023ed2:	b2c0      	uxtb	r0, r0
 8023ed4:	bd80      	pop	{r7, pc}

08023ed6 <HCI_LE_ENABLE_ENCRYPTION>:
 8023ed6:	b580      	push	{r7, lr}
 8023ed8:	3801      	subs	r0, #1
 8023eda:	b280      	uxth	r0, r0
 8023edc:	f7ec fbad 	bl	801063a <ll_intf_le_strt_encrpt>
 8023ee0:	b2c0      	uxtb	r0, r0
 8023ee2:	bd80      	pop	{r7, pc}

08023ee4 <HCI_LE_SET_RANDOM_ADDRESS>:
 8023ee4:	b580      	push	{r7, lr}
 8023ee6:	f7ec fbf3 	bl	80106d0 <ll_intf_le_set_random_addr>
 8023eea:	b2c0      	uxtb	r0, r0
 8023eec:	bd80      	pop	{r7, pc}
	...

08023ef0 <LECTRL_Enhanced_Conn_Complete_Event_Unmask>:
 8023ef0:	4803      	ldr	r0, [pc, #12]	@ (8023f00 <__arm_cp.74_0>)
 8023ef2:	7b01      	ldrb	r1, [r0, #12]
 8023ef4:	f041 0102 	orr.w	r1, r1, #2
 8023ef8:	7301      	strb	r1, [r0, #12]
 8023efa:	300b      	adds	r0, #11
 8023efc:	f7ec bd29 	b.w	8010952 <ll_intf_set_le_event_mask>

08023f00 <__arm_cp.74_0>:
 8023f00:	2000a248 	.word	0x2000a248

08023f04 <ACI_HAL_WRITE_CONFIG_DATA>:
 8023f04:	b570      	push	{r4, r5, r6, lr}
 8023f06:	4614      	mov	r4, r2
 8023f08:	460d      	mov	r5, r1
 8023f0a:	4606      	mov	r6, r0
 8023f0c:	b910      	cbnz	r0, 8023f14 <ACI_HAL_WRITE_CONFIG_DATA+0x10>
 8023f0e:	4620      	mov	r0, r4
 8023f10:	f7ec fac1 	bl	8010496 <ll_intf_write_bd_addr>
 8023f14:	4630      	mov	r0, r6
 8023f16:	4629      	mov	r1, r5
 8023f18:	4622      	mov	r2, r4
 8023f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023f1e:	f000 bb87 	b.w	8024630 <CfgData_Write>
	...

08023f24 <ACI_HAL_SET_TX_POWER_LEVEL>:
 8023f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023f28:	b093      	sub	sp, #76	@ 0x4c
 8023f2a:	481f      	ldr	r0, [pc, #124]	@ (8023fa8 <__arm_cp.77_0>)
 8023f2c:	f06f 0513 	mvn.w	r5, #19
 8023f30:	2904      	cmp	r1, #4
 8023f32:	bf88      	it	hi
 8023f34:	f1a1 0519 	subhi.w	r5, r1, #25
 8023f38:	7045      	strb	r5, [r0, #1]
 8023f3a:	b268      	sxtb	r0, r5
 8023f3c:	f7ec fc33 	bl	80107a6 <ll_intf_le_write_tx_pwr>
 8023f40:	0601      	lsls	r1, r0, #24
 8023f42:	d12d      	bne.n	8023fa0 <ACI_HAL_SET_TX_POWER_LEVEL+0x7c>
 8023f44:	f10d 0931 	add.w	r9, sp, #49	@ 0x31
 8023f48:	f10d 0805 	add.w	r8, sp, #5
 8023f4c:	4648      	mov	r0, r9
 8023f4e:	4641      	mov	r1, r8
 8023f50:	f7ec fc98 	bl	8010884 <ll_intf_get_link_status>
 8023f54:	f88d 504b 	strb.w	r5, [sp, #75]	@ 0x4b
 8023f58:	2500      	movs	r5, #0
 8023f5a:	ae12      	add	r6, sp, #72	@ 0x48
 8023f5c:	f10d 0747 	add.w	r7, sp, #71	@ 0x47
 8023f60:	b2ec      	uxtb	r4, r5
 8023f62:	f7e7 ff39 	bl	800bdd8 <ll_sys_get_concurrent_state_machines_num>
 8023f66:	3002      	adds	r0, #2
 8023f68:	42a0      	cmp	r0, r4
 8023f6a:	d918      	bls.n	8023f9e <ACI_HAL_SET_TX_POWER_LEVEL+0x7a>
 8023f6c:	f819 0004 	ldrb.w	r0, [r9, r4]
 8023f70:	2805      	cmp	r0, #5
 8023f72:	bf18      	it	ne
 8023f74:	2802      	cmpne	r0, #2
 8023f76:	d110      	bne.n	8023f9a <ACI_HAL_SET_TX_POWER_LEVEL+0x76>
 8023f78:	f818 0014 	ldrb.w	r0, [r8, r4, lsl #1]
 8023f7c:	2401      	movs	r4, #1
 8023f7e:	ea40 2000 	orr.w	r0, r0, r0, lsl #8
 8023f82:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8023f86:	2c04      	cmp	r4, #4
 8023f88:	d807      	bhi.n	8023f9a <ACI_HAL_SET_TX_POWER_LEVEL+0x76>
 8023f8a:	4630      	mov	r0, r6
 8023f8c:	4639      	mov	r1, r7
 8023f8e:	f88d 404a 	strb.w	r4, [sp, #74]	@ 0x4a
 8023f92:	f7ec fbea 	bl	801076a <ll_intf_set_conn_tx_power_level>
 8023f96:	3401      	adds	r4, #1
 8023f98:	e7f5      	b.n	8023f86 <ACI_HAL_SET_TX_POWER_LEVEL+0x62>
 8023f9a:	3501      	adds	r5, #1
 8023f9c:	e7e0      	b.n	8023f60 <ACI_HAL_SET_TX_POWER_LEVEL+0x3c>
 8023f9e:	2000      	movs	r0, #0
 8023fa0:	b2c0      	uxtb	r0, r0
 8023fa2:	b013      	add	sp, #76	@ 0x4c
 8023fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08023fa8 <__arm_cp.77_0>:
 8023fa8:	2000a248 	.word	0x2000a248

08023fac <ACI_HAL_SET_RADIO_ACTIVITY_MASK>:
 8023fac:	b580      	push	{r7, lr}
 8023fae:	f7ec fc64 	bl	801087a <ll_intf_set_end_of_activity_mask>
 8023fb2:	b2c0      	uxtb	r0, r0
 8023fb4:	bd80      	pop	{r7, pc}
	...

08023fb8 <LECTRL_UpperLayerCallback>:
 8023fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fbc:	4604      	mov	r4, r0
 8023fbe:	2800      	cmp	r0, #0
 8023fc0:	d073      	beq.n	80240aa <LECTRL_UpperLayerCallback+0xf2>
 8023fc2:	89a0      	ldrh	r0, [r4, #12]
 8023fc4:	2802      	cmp	r0, #2
 8023fc6:	d370      	bcc.n	80240aa <LECTRL_UpperLayerCallback+0xf2>
 8023fc8:	7ba1      	ldrb	r1, [r4, #14]
 8023fca:	2910      	cmp	r1, #16
 8023fcc:	d01b      	beq.n	8024006 <LECTRL_UpperLayerCallback+0x4e>
 8023fce:	2908      	cmp	r1, #8
 8023fd0:	d16b      	bne.n	80240aa <LECTRL_UpperLayerCallback+0xf2>
 8023fd2:	8960      	ldrh	r0, [r4, #10]
 8023fd4:	6821      	ldr	r1, [r4, #0]
 8023fd6:	5c0a      	ldrb	r2, [r1, r0]
 8023fd8:	180b      	adds	r3, r1, r0
 8023fda:	7859      	ldrb	r1, [r3, #1]
 8023fdc:	2aff      	cmp	r2, #255	@ 0xff
 8023fde:	d045      	beq.n	802406c <LECTRL_UpperLayerCallback+0xb4>
 8023fe0:	2a3e      	cmp	r2, #62	@ 0x3e
 8023fe2:	d152      	bne.n	802408a <LECTRL_UpperLayerCallback+0xd2>
 8023fe4:	4d3a      	ldr	r5, [pc, #232]	@ (80240d0 <__arm_cp.0_1>)
 8023fe6:	1cd8      	adds	r0, r3, #3
 8023fe8:	789a      	ldrb	r2, [r3, #2]
 8023fea:	2300      	movs	r3, #0
 8023fec:	2b0b      	cmp	r3, #11
 8023fee:	d05c      	beq.n	80240aa <LECTRL_UpperLayerCallback+0xf2>
 8023ff0:	f815 6033 	ldrb.w	r6, [r5, r3, lsl #3]
 8023ff4:	42b2      	cmp	r2, r6
 8023ff6:	d104      	bne.n	8024002 <LECTRL_UpperLayerCallback+0x4a>
 8023ff8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 8023ffc:	7877      	ldrb	r7, [r6, #1]
 8023ffe:	428f      	cmp	r7, r1
 8024000:	d25f      	bcs.n	80240c2 <LECTRL_UpperLayerCallback+0x10a>
 8024002:	3301      	adds	r3, #1
 8024004:	e7f2      	b.n	8023fec <LECTRL_UpperLayerCallback+0x34>
 8024006:	2804      	cmp	r0, #4
 8024008:	d34f      	bcc.n	80240aa <LECTRL_UpperLayerCallback+0xf2>
 802400a:	8961      	ldrh	r1, [r4, #10]
 802400c:	6822      	ldr	r2, [r4, #0]
 802400e:	f1a0 0b04 	sub.w	fp, r0, #4
 8024012:	2000      	movs	r0, #0
 8024014:	2500      	movs	r5, #0
 8024016:	eb02 0901 	add.w	r9, r2, r1
 802401a:	5c53      	ldrb	r3, [r2, r1]
 802401c:	fa1f f88b 	uxth.w	r8, fp
 8024020:	f899 a001 	ldrb.w	sl, [r9, #1]
 8024024:	4642      	mov	r2, r8
 8024026:	ea43 210a 	orr.w	r1, r3, sl, lsl #8
 802402a:	1c4f      	adds	r7, r1, #1
 802402c:	f36f 371f 	bfc	r7, #12, #20
 8024030:	4639      	mov	r1, r7
 8024032:	f004 fb55 	bl	80286e0 <ACL_New>
 8024036:	b1a8      	cbz	r0, 8024064 <LECTRL_UpperLayerCallback+0xac>
 8024038:	4606      	mov	r6, r0
 802403a:	6005      	str	r5, [r0, #0]
 802403c:	f8a0 b004 	strh.w	fp, [r0, #4]
 8024040:	8107      	strh	r7, [r0, #8]
 8024042:	ea4f 101a 	mov.w	r0, sl, lsr #4
 8024046:	f109 0304 	add.w	r3, r9, #4
 802404a:	2100      	movs	r1, #0
 802404c:	4642      	mov	r2, r8
 802404e:	72b0      	strb	r0, [r6, #10]
 8024050:	4630      	mov	r0, r6
 8024052:	f004 fc08 	bl	8028866 <ACL_Set_Data>
 8024056:	4630      	mov	r0, r6
 8024058:	f004 f8c2 	bl	80281e0 <L2C_Rx_Data_Handler>
 802405c:	b330      	cbz	r0, 80240ac <LECTRL_UpperLayerCallback+0xf4>
 802405e:	4630      	mov	r0, r6
 8024060:	f004 fb74 	bl	802874c <ACL_Release>
 8024064:	4819      	ldr	r0, [pc, #100]	@ (80240cc <__arm_cp.0_0>)
 8024066:	2501      	movs	r5, #1
 8024068:	7085      	strb	r5, [r0, #2]
 802406a:	e01f      	b.n	80240ac <LECTRL_UpperLayerCallback+0xf4>
 802406c:	7898      	ldrb	r0, [r3, #2]
 802406e:	2500      	movs	r5, #0
 8024070:	2805      	cmp	r0, #5
 8024072:	d11b      	bne.n	80240ac <LECTRL_UpperLayerCallback+0xf4>
 8024074:	2909      	cmp	r1, #9
 8024076:	d819      	bhi.n	80240ac <LECTRL_UpperLayerCallback+0xf4>
 8024078:	2200      	movs	r2, #0
 802407a:	78d8      	ldrb	r0, [r3, #3]
 802407c:	7959      	ldrb	r1, [r3, #5]
 802407e:	2300      	movs	r3, #0
 8024080:	9200      	str	r2, [sp, #0]
 8024082:	2200      	movs	r2, #0
 8024084:	f7fe fef8 	bl	8022e78 <ACI_HAL_END_OF_RADIO_ACTIVITY_EVENT>
 8024088:	e01d      	b.n	80240c6 <LECTRL_UpperLayerCallback+0x10e>
 802408a:	4d12      	ldr	r5, [pc, #72]	@ (80240d4 <__arm_cp.0_2>)
 802408c:	1c98      	adds	r0, r3, #2
 802408e:	2300      	movs	r3, #0
 8024090:	2b08      	cmp	r3, #8
 8024092:	d00a      	beq.n	80240aa <LECTRL_UpperLayerCallback+0xf2>
 8024094:	f815 6033 	ldrb.w	r6, [r5, r3, lsl #3]
 8024098:	42b2      	cmp	r2, r6
 802409a:	d104      	bne.n	80240a6 <LECTRL_UpperLayerCallback+0xee>
 802409c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
 80240a0:	7877      	ldrb	r7, [r6, #1]
 80240a2:	428f      	cmp	r7, r1
 80240a4:	d20d      	bcs.n	80240c2 <LECTRL_UpperLayerCallback+0x10a>
 80240a6:	3301      	adds	r3, #1
 80240a8:	e7f2      	b.n	8024090 <LECTRL_UpperLayerCallback+0xd8>
 80240aa:	2500      	movs	r5, #0
 80240ac:	fab5 f085 	clz	r0, r5
 80240b0:	0940      	lsrs	r0, r0, #5
 80240b2:	b124      	cbz	r4, 80240be <LECTRL_UpperLayerCallback+0x106>
 80240b4:	b91d      	cbnz	r5, 80240be <LECTRL_UpperLayerCallback+0x106>
 80240b6:	4620      	mov	r0, r4
 80240b8:	f7ec fb40 	bl	801073c <ll_intf_free_ll_pkt_hndlr>
 80240bc:	2001      	movs	r0, #1
 80240be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240c2:	6871      	ldr	r1, [r6, #4]
 80240c4:	4788      	blx	r1
 80240c6:	4605      	mov	r5, r0
 80240c8:	e7f0      	b.n	80240ac <LECTRL_UpperLayerCallback+0xf4>
 80240ca:	bf00      	nop

080240cc <__arm_cp.0_0>:
 80240cc:	2000a248 	.word	0x2000a248

080240d0 <__arm_cp.0_1>:
 80240d0:	0802e6e0 	.word	0x0802e6e0

080240d4 <__arm_cp.0_2>:
 80240d4:	0802e738 	.word	0x0802e738

080240d8 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent>:
 80240d8:	b5b0      	push	{r4, r5, r7, lr}
 80240da:	460d      	mov	r5, r1
 80240dc:	4608      	mov	r0, r1
 80240de:	4611      	mov	r1, r2
 80240e0:	4614      	mov	r4, r2
 80240e2:	f006 ff9b 	bl	802b01c <SMP_Read_Local_P256key_Complete_Handler>
 80240e6:	4808      	ldr	r0, [pc, #32]	@ (8024108 <__arm_cp.1_0>)
 80240e8:	7a81      	ldrb	r1, [r0, #10]
 80240ea:	0689      	lsls	r1, r1, #26
 80240ec:	d504      	bpl.n	80240f8 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent+0x20>
 80240ee:	f990 000b 	ldrsb.w	r0, [r0, #11]
 80240f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80240f6:	dd00      	ble.n	80240fa <LECTRL_LeReadLocalP256PublicKeyCompleteEvent+0x22>
 80240f8:	bdb0      	pop	{r4, r5, r7, pc}
 80240fa:	4628      	mov	r0, r5
 80240fc:	4621      	mov	r1, r4
 80240fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8024102:	f7fe bdfd 	b.w	8022d00 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_EVENT>
 8024106:	bf00      	nop

08024108 <__arm_cp.1_0>:
 8024108:	2000a248 	.word	0x2000a248

0802410c <LECTRL_LeGeneratedDHKeyCompleteEvent>:
 802410c:	4608      	mov	r0, r1
 802410e:	4611      	mov	r1, r2
 8024110:	f006 bfea 	b.w	802b0e8 <SMP_Generate_DHkey_Complete_Handler>

08024114 <LECTRL_LeConnectionCompleteEvent>:
 8024114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024118:	b089      	sub	sp, #36	@ 0x24
 802411a:	7ac1      	ldrb	r1, [r0, #11]
 802411c:	7882      	ldrb	r2, [r0, #2]
 802411e:	f890 800e 	ldrb.w	r8, [r0, #14]
 8024122:	f890 900f 	ldrb.w	r9, [r0, #15]
 8024126:	f890 a010 	ldrb.w	sl, [r0, #16]
 802412a:	7904      	ldrb	r4, [r0, #4]
 802412c:	7805      	ldrb	r5, [r0, #0]
 802412e:	78c6      	ldrb	r6, [r0, #3]
 8024130:	f100 0b05 	add.w	fp, r0, #5
 8024134:	2300      	movs	r3, #0
 8024136:	9108      	str	r1, [sp, #32]
 8024138:	7b01      	ldrb	r1, [r0, #12]
 802413a:	9106      	str	r1, [sp, #24]
 802413c:	7b41      	ldrb	r1, [r0, #13]
 802413e:	9105      	str	r1, [sp, #20]
 8024140:	7c41      	ldrb	r1, [r0, #17]
 8024142:	9107      	str	r1, [sp, #28]
 8024144:	7841      	ldrb	r1, [r0, #1]
 8024146:	e9cd b300 	strd	fp, r3, [sp]
 802414a:	4623      	mov	r3, r4
 802414c:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 8024150:	4632      	mov	r2, r6
 8024152:	3001      	adds	r0, #1
 8024154:	b287      	uxth	r7, r0
 8024156:	4628      	mov	r0, r5
 8024158:	4639      	mov	r1, r7
 802415a:	f000 fb49 	bl	80247f0 <GAP_Connection_Complete_Handler>
 802415e:	9905      	ldr	r1, [sp, #20]
 8024160:	ea49 200a 	orr.w	r0, r9, sl, lsl #8
 8024164:	9a08      	ldr	r2, [sp, #32]
 8024166:	9b06      	ldr	r3, [sp, #24]
 8024168:	ea41 2108 	orr.w	r1, r1, r8, lsl #8
 802416c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8024170:	4623      	mov	r3, r4
 8024172:	b280      	uxth	r0, r0
 8024174:	b289      	uxth	r1, r1
 8024176:	b292      	uxth	r2, r2
 8024178:	e9cd 1002 	strd	r1, r0, [sp, #8]
 802417c:	9807      	ldr	r0, [sp, #28]
 802417e:	e9cd b200 	strd	fp, r2, [sp]
 8024182:	4639      	mov	r1, r7
 8024184:	4632      	mov	r2, r6
 8024186:	9004      	str	r0, [sp, #16]
 8024188:	4628      	mov	r0, r5
 802418a:	f7fe fcaf 	bl	8022aec <HCI_LE_CONNECTION_COMPLETE_EVENT>
 802418e:	b009      	add	sp, #36	@ 0x24
 8024190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024194 <LECTRL_LeAdvertisingReportEvent>:
 8024194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024198:	b085      	sub	sp, #20
 802419a:	f10d 0804 	add.w	r8, sp, #4
 802419e:	f890 a000 	ldrb.w	sl, [r0]
 80241a2:	4604      	mov	r4, r0
 80241a4:	f04f 0b00 	mov.w	fp, #0
 80241a8:	2701      	movs	r7, #1
 80241aa:	2600      	movs	r6, #0
 80241ac:	2500      	movs	r5, #0
 80241ae:	f108 0902 	add.w	r9, r8, #2
 80241b2:	4555      	cmp	r5, sl
 80241b4:	d23b      	bcs.n	802422e <LECTRL_LeAdvertisingReportEvent+0x9a>
 80241b6:	b2f8      	uxtb	r0, r7
 80241b8:	2206      	movs	r2, #6
 80241ba:	5c20      	ldrb	r0, [r4, r0]
 80241bc:	f88d 0004 	strb.w	r0, [sp, #4]
 80241c0:	1c78      	adds	r0, r7, #1
 80241c2:	b2c0      	uxtb	r0, r0
 80241c4:	5c20      	ldrb	r0, [r4, r0]
 80241c6:	f88d 0005 	strb.w	r0, [sp, #5]
 80241ca:	1cb8      	adds	r0, r7, #2
 80241cc:	b2c0      	uxtb	r0, r0
 80241ce:	1821      	adds	r1, r4, r0
 80241d0:	4648      	mov	r0, r9
 80241d2:	f7fc fb37 	bl	8020844 <ble_memcpy>
 80241d6:	f107 0008 	add.w	r0, r7, #8
 80241da:	b2c0      	uxtb	r0, r0
 80241dc:	5c22      	ldrb	r2, [r4, r0]
 80241de:	f107 0009 	add.w	r0, r7, #9
 80241e2:	b2c1      	uxtb	r1, r0
 80241e4:	1817      	adds	r7, r2, r0
 80241e6:	f88d 200c 	strb.w	r2, [sp, #12]
 80241ea:	1863      	adds	r3, r4, r1
 80241ec:	b2f8      	uxtb	r0, r7
 80241ee:	0e19      	lsrs	r1, r3, #24
 80241f0:	5c20      	ldrb	r0, [r4, r0]
 80241f2:	f88d 300d 	strb.w	r3, [sp, #13]
 80241f6:	f88d 1010 	strb.w	r1, [sp, #16]
 80241fa:	0c19      	lsrs	r1, r3, #16
 80241fc:	f88d 0011 	strb.w	r0, [sp, #17]
 8024200:	2000      	movs	r0, #0
 8024202:	f88d 100f 	strb.w	r1, [sp, #15]
 8024206:	0a19      	lsrs	r1, r3, #8
 8024208:	f88d 100e 	strb.w	r1, [sp, #14]
 802420c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8024210:	f000 fd7a 	bl	8024d08 <GAP_Advertising_Report_Handler>
 8024214:	b140      	cbz	r0, 8024228 <LECTRL_LeAdvertisingReportEvent+0x94>
 8024216:	2001      	movs	r0, #1
 8024218:	4641      	mov	r1, r8
 802421a:	f7fe fc99 	bl	8022b50 <HCI_LE_ADVERTISING_REPORT_EVENT>
 802421e:	4683      	mov	fp, r0
 8024220:	b108      	cbz	r0, 8024226 <LECTRL_LeAdvertisingReportEvent+0x92>
 8024222:	0630      	lsls	r0, r6, #24
 8024224:	d003      	beq.n	802422e <LECTRL_LeAdvertisingReportEvent+0x9a>
 8024226:	3601      	adds	r6, #1
 8024228:	3701      	adds	r7, #1
 802422a:	3501      	adds	r5, #1
 802422c:	e7c1      	b.n	80241b2 <LECTRL_LeAdvertisingReportEvent+0x1e>
 802422e:	fa5f f08b 	uxtb.w	r0, fp
 8024232:	b005      	add	sp, #20
 8024234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024238 <LECTRL_LeConnectionUpdateCompleteEvent>:
 8024238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802423a:	7a01      	ldrb	r1, [r0, #8]
 802423c:	79c2      	ldrb	r2, [r0, #7]
 802423e:	7943      	ldrb	r3, [r0, #5]
 8024240:	7985      	ldrb	r5, [r0, #6]
 8024242:	7804      	ldrb	r4, [r0, #0]
 8024244:	7846      	ldrb	r6, [r0, #1]
 8024246:	7887      	ldrb	r7, [r0, #2]
 8024248:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802424c:	7902      	ldrb	r2, [r0, #4]
 802424e:	78c0      	ldrb	r0, [r0, #3]
 8024250:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8024254:	b289      	uxth	r1, r1
 8024256:	b282      	uxth	r2, r0
 8024258:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
 802425c:	9100      	str	r1, [sp, #0]
 802425e:	b283      	uxth	r3, r0
 8024260:	ea46 2007 	orr.w	r0, r6, r7, lsl #8
 8024264:	3001      	adds	r0, #1
 8024266:	b281      	uxth	r1, r0
 8024268:	4620      	mov	r0, r4
 802426a:	f7fe fcc1 	bl	8022bf0 <HCI_LE_CONNECTION_UPDATE_COMPLETE_EVENT>
 802426e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024270 <LECTRL_LeReadRemoteUsedFeaturesCompleteEvent>:
 8024270:	1cc2      	adds	r2, r0, #3
 8024272:	7803      	ldrb	r3, [r0, #0]
 8024274:	7841      	ldrb	r1, [r0, #1]
 8024276:	7880      	ldrb	r0, [r0, #2]
 8024278:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 802427c:	3001      	adds	r0, #1
 802427e:	b281      	uxth	r1, r0
 8024280:	4618      	mov	r0, r3
 8024282:	f7fe bcdb 	b.w	8022c3c <HCI_LE_READ_REMOTE_FEATURES_COMPLETE_EVENT>

08024286 <LECTRL_LeLongTermKeyRequestEvent>:
 8024286:	b570      	push	{r4, r5, r6, lr}
 8024288:	4604      	mov	r4, r0
 802428a:	f814 0b02 	ldrb.w	r0, [r4], #2
 802428e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8024292:	7a22      	ldrb	r2, [r4, #8]
 8024294:	7a63      	ldrb	r3, [r4, #9]
 8024296:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 802429a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 802429e:	4621      	mov	r1, r4
 80242a0:	b295      	uxth	r5, r2
 80242a2:	3001      	adds	r0, #1
 80242a4:	462a      	mov	r2, r5
 80242a6:	b286      	uxth	r6, r0
 80242a8:	4630      	mov	r0, r6
 80242aa:	f006 fa29 	bl	802a700 <SMP_LTK_Request_Handler>
 80242ae:	b130      	cbz	r0, 80242be <LECTRL_LeLongTermKeyRequestEvent+0x38>
 80242b0:	4630      	mov	r0, r6
 80242b2:	4621      	mov	r1, r4
 80242b4:	462a      	mov	r2, r5
 80242b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80242ba:	f7fe bcd8 	b.w	8022c6e <HCI_LE_LONG_TERM_KEY_REQUEST_EVENT>
 80242be:	2000      	movs	r0, #0
 80242c0:	bd70      	pop	{r4, r5, r6, pc}

080242c2 <LECTRL_LeRemoteConnParamReqEvent>:
 80242c2:	2000      	movs	r0, #0
 80242c4:	4770      	bx	lr

080242c6 <LECTRL_LeDataLengthChangeEvent>:
 80242c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80242c8:	7a41      	ldrb	r1, [r0, #9]
 80242ca:	7a02      	ldrb	r2, [r0, #8]
 80242cc:	f890 c000 	ldrb.w	ip, [r0]
 80242d0:	7845      	ldrb	r5, [r0, #1]
 80242d2:	7886      	ldrb	r6, [r0, #2]
 80242d4:	78c7      	ldrb	r7, [r0, #3]
 80242d6:	7983      	ldrb	r3, [r0, #6]
 80242d8:	79c4      	ldrb	r4, [r0, #7]
 80242da:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80242de:	7902      	ldrb	r2, [r0, #4]
 80242e0:	7940      	ldrb	r0, [r0, #5]
 80242e2:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80242e6:	b289      	uxth	r1, r1
 80242e8:	b282      	uxth	r2, r0
 80242ea:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 80242ee:	9100      	str	r1, [sp, #0]
 80242f0:	b283      	uxth	r3, r0
 80242f2:	ea46 2007 	orr.w	r0, r6, r7, lsl #8
 80242f6:	b281      	uxth	r1, r0
 80242f8:	ea4c 2005 	orr.w	r0, ip, r5, lsl #8
 80242fc:	3001      	adds	r0, #1
 80242fe:	b280      	uxth	r0, r0
 8024300:	f7fe fcd4 	bl	8022cac <HCI_LE_DATA_LENGTH_CHANGE_EVENT>
 8024304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024306 <LECTRL_LeEnhancedConnectionCompleteEvent>:
 8024306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802430a:	b08d      	sub	sp, #52	@ 0x34
 802430c:	7dc1      	ldrb	r1, [r0, #23]
 802430e:	7906      	ldrb	r6, [r0, #4]
 8024310:	f890 a01c 	ldrb.w	sl, [r0, #28]
 8024314:	7804      	ldrb	r4, [r0, #0]
 8024316:	7882      	ldrb	r2, [r0, #2]
 8024318:	78c5      	ldrb	r5, [r0, #3]
 802431a:	f100 0b0b 	add.w	fp, r0, #11
 802431e:	f100 0805 	add.w	r8, r0, #5
 8024322:	f100 0911 	add.w	r9, r0, #17
 8024326:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024328:	7e01      	ldrb	r1, [r0, #24]
 802432a:	4633      	mov	r3, r6
 802432c:	910a      	str	r1, [sp, #40]	@ 0x28
 802432e:	7e41      	ldrb	r1, [r0, #25]
 8024330:	9109      	str	r1, [sp, #36]	@ 0x24
 8024332:	7e81      	ldrb	r1, [r0, #26]
 8024334:	9108      	str	r1, [sp, #32]
 8024336:	7ec1      	ldrb	r1, [r0, #27]
 8024338:	9107      	str	r1, [sp, #28]
 802433a:	7f41      	ldrb	r1, [r0, #29]
 802433c:	910c      	str	r1, [sp, #48]	@ 0x30
 802433e:	7841      	ldrb	r1, [r0, #1]
 8024340:	07b0      	lsls	r0, r6, #30
 8024342:	4648      	mov	r0, r9
 8024344:	bf58      	it	pl
 8024346:	4640      	movpl	r0, r8
 8024348:	e9cd 0b00 	strd	r0, fp, [sp]
 802434c:	2e00      	cmp	r6, #0
 802434e:	bf18      	it	ne
 8024350:	2301      	movne	r3, #1
 8024352:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 8024356:	462a      	mov	r2, r5
 8024358:	3001      	adds	r0, #1
 802435a:	b287      	uxth	r7, r0
 802435c:	4620      	mov	r0, r4
 802435e:	4639      	mov	r1, r7
 8024360:	f000 fa46 	bl	80247f0 <GAP_Connection_Complete_Handler>
 8024364:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8024368:	9807      	ldr	r0, [sp, #28]
 802436a:	e9cd 8b00 	strd	r8, fp, [sp]
 802436e:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
 8024372:	b280      	uxth	r0, r0
 8024374:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8024378:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
 802437c:	b289      	uxth	r1, r1
 802437e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8024382:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024384:	4639      	mov	r1, r7
 8024386:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 802438a:	9006      	str	r0, [sp, #24]
 802438c:	4620      	mov	r0, r4
 802438e:	4633      	mov	r3, r6
 8024390:	b292      	uxth	r2, r2
 8024392:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8024396:	462a      	mov	r2, r5
 8024398:	f7fe fcc6 	bl	8022d28 <HCI_LE_ENHANCED_CONNECTION_COMPLETE_EVENT>
 802439c:	b00d      	add	sp, #52	@ 0x34
 802439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080243a2 <LECTRL_LeDirectedAdvertisingReportEvent>:
 80243a2:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 80243a4:	4604      	mov	r4, r0
 80243a6:	7840      	ldrb	r0, [r0, #1]
 80243a8:	466d      	mov	r5, sp
 80243aa:	2206      	movs	r2, #6
 80243ac:	78a1      	ldrb	r1, [r4, #2]
 80243ae:	f88d 0000 	strb.w	r0, [sp]
 80243b2:	1ca8      	adds	r0, r5, #2
 80243b4:	f88d 1001 	strb.w	r1, [sp, #1]
 80243b8:	1ce1      	adds	r1, r4, #3
 80243ba:	f7fc fa43 	bl	8020844 <ble_memcpy>
 80243be:	7a60      	ldrb	r0, [r4, #9]
 80243c0:	f104 010a 	add.w	r1, r4, #10
 80243c4:	2206      	movs	r2, #6
 80243c6:	f88d 0008 	strb.w	r0, [sp, #8]
 80243ca:	f105 0009 	add.w	r0, r5, #9
 80243ce:	f7fc fa39 	bl	8020844 <ble_memcpy>
 80243d2:	7c20      	ldrb	r0, [r4, #16]
 80243d4:	4629      	mov	r1, r5
 80243d6:	f88d 000f 	strb.w	r0, [sp, #15]
 80243da:	2001      	movs	r0, #1
 80243dc:	f7fe fce2 	bl	8022da4 <HCI_LE_DIRECTED_ADVERTISING_REPORT_EVENT>
 80243e0:	b004      	add	sp, #16
 80243e2:	bdb0      	pop	{r4, r5, r7, pc}

080243e4 <LECTRL_LePhyUpdateCompleteEvent>:
 80243e4:	b5b0      	push	{r4, r5, r7, lr}
 80243e6:	7841      	ldrb	r1, [r0, #1]
 80243e8:	7885      	ldrb	r5, [r0, #2]
 80243ea:	7903      	ldrb	r3, [r0, #4]
 80243ec:	7804      	ldrb	r4, [r0, #0]
 80243ee:	78c2      	ldrb	r2, [r0, #3]
 80243f0:	ea41 2005 	orr.w	r0, r1, r5, lsl #8
 80243f4:	3001      	adds	r0, #1
 80243f6:	b281      	uxth	r1, r0
 80243f8:	4620      	mov	r0, r4
 80243fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80243fe:	f7fe bd0b 	b.w	8022e18 <HCI_LE_PHY_UPDATE_COMPLETE_EVENT>

08024402 <LECTRL_LeChannelSelectionAlgorithmEvent>:
 8024402:	7802      	ldrb	r2, [r0, #0]
 8024404:	7843      	ldrb	r3, [r0, #1]
 8024406:	7881      	ldrb	r1, [r0, #2]
 8024408:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 802440c:	3001      	adds	r0, #1
 802440e:	b280      	uxth	r0, r0
 8024410:	f7fe bd1c 	b.w	8022e4c <HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT>

08024414 <LECTRL_DisconnectionComplete>:
 8024414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024418:	7841      	ldrb	r1, [r0, #1]
 802441a:	7882      	ldrb	r2, [r0, #2]
 802441c:	4c12      	ldr	r4, [pc, #72]	@ (8024468 <__arm_cp.14_0>)
 802441e:	f890 8000 	ldrb.w	r8, [r0]
 8024422:	78c5      	ldrb	r5, [r0, #3]
 8024424:	2301      	movs	r3, #1
 8024426:	ea41 2702 	orr.w	r7, r1, r2, lsl #8
 802442a:	2200      	movs	r2, #0
 802442c:	f104 001c 	add.w	r0, r4, #28
 8024430:	1c79      	adds	r1, r7, #1
 8024432:	b28e      	uxth	r6, r1
 8024434:	4631      	mov	r1, r6
 8024436:	f000 f8a1 	bl	802457c <LECTRL_AclPacketTransmitted>
 802443a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 802443e:	4631      	mov	r1, r6
 8024440:	2200      	movs	r2, #0
 8024442:	2301      	movs	r3, #1
 8024444:	f000 f89a 	bl	802457c <LECTRL_AclPacketTransmitted>
 8024448:	4630      	mov	r0, r6
 802444a:	f000 f9f3 	bl	8024834 <GAP_Disconnection_Complete_Handler>
 802444e:	4640      	mov	r0, r8
 8024450:	4631      	mov	r1, r6
 8024452:	462a      	mov	r2, r5
 8024454:	f7fe fade 	bl	8022a14 <HCI_DISCONNECTION_COMPLETE_EVENT>
 8024458:	4604      	mov	r4, r0
 802445a:	b910      	cbnz	r0, 8024462 <LECTRL_DisconnectionComplete+0x4e>
 802445c:	b2b8      	uxth	r0, r7
 802445e:	f7ec fa7a 	bl	8010956 <ll_intf_clear_event>
 8024462:	4620      	mov	r0, r4
 8024464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08024468 <__arm_cp.14_0>:
 8024468:	2000a248 	.word	0x2000a248

0802446c <LECTRL_EncryptionChangeEvent>:
 802446c:	b570      	push	{r4, r5, r6, lr}
 802446e:	7841      	ldrb	r1, [r0, #1]
 8024470:	7882      	ldrb	r2, [r0, #2]
 8024472:	78c5      	ldrb	r5, [r0, #3]
 8024474:	7804      	ldrb	r4, [r0, #0]
 8024476:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 802447a:	4621      	mov	r1, r4
 802447c:	462b      	mov	r3, r5
 802447e:	3001      	adds	r0, #1
 8024480:	b286      	uxth	r6, r0
 8024482:	2000      	movs	r0, #0
 8024484:	4632      	mov	r2, r6
 8024486:	f006 f97e 	bl	802a786 <SMP_Encryption_Update_Handler>
 802448a:	4620      	mov	r0, r4
 802448c:	4631      	mov	r1, r6
 802448e:	462a      	mov	r2, r5
 8024490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024494:	f7fe bad3 	b.w	8022a3e <HCI_ENCRYPTION_CHANGE_EVENT>

08024498 <LECTRL_ReadRemoteVersionInformationComplete>:
 8024498:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802449a:	79c1      	ldrb	r1, [r0, #7]
 802449c:	7982      	ldrb	r2, [r0, #6]
 802449e:	7804      	ldrb	r4, [r0, #0]
 80244a0:	7845      	ldrb	r5, [r0, #1]
 80244a2:	7886      	ldrb	r6, [r0, #2]
 80244a4:	7903      	ldrb	r3, [r0, #4]
 80244a6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80244aa:	78c2      	ldrb	r2, [r0, #3]
 80244ac:	7940      	ldrb	r0, [r0, #5]
 80244ae:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80244b2:	b289      	uxth	r1, r1
 80244b4:	b283      	uxth	r3, r0
 80244b6:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 80244ba:	9100      	str	r1, [sp, #0]
 80244bc:	3001      	adds	r0, #1
 80244be:	b281      	uxth	r1, r0
 80244c0:	4620      	mov	r0, r4
 80244c2:	f7fe fac9 	bl	8022a58 <HCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT>
 80244c6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

080244c8 <LECTRL_HwErrorEvent>:
 80244c8:	7800      	ldrb	r0, [r0, #0]
 80244ca:	f7fe bae8 	b.w	8022a9e <HCI_HARDWARE_ERROR_EVENT>
	...

080244d0 <LECTRL_NumberOfCompletedPacketsEvent>:
 80244d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244d4:	b0bf      	sub	sp, #252	@ 0xfc
 80244d6:	46e8      	mov	r8, sp
 80244d8:	4681      	mov	r9, r0
 80244da:	7804      	ldrb	r4, [r0, #0]
 80244dc:	2100      	movs	r1, #0
 80244de:	22fc      	movs	r2, #252	@ 0xfc
 80244e0:	2700      	movs	r7, #0
 80244e2:	4640      	mov	r0, r8
 80244e4:	f7fc f9fe 	bl	80208e4 <ble_memset>
 80244e8:	f004 007f 	and.w	r0, r4, #127	@ 0x7f
 80244ec:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80244f0:	2502      	movs	r5, #2
 80244f2:	eb09 0a40 	add.w	sl, r9, r0, lsl #1
 80244f6:	4814      	ldr	r0, [pc, #80]	@ (8024548 <__arm_cp.18_0>)
 80244f8:	f100 061c 	add.w	r6, r0, #28
 80244fc:	45bb      	cmp	fp, r7
 80244fe:	d01f      	beq.n	8024540 <LECTRL_NumberOfCompletedPacketsEvent+0x70>
 8024500:	eb09 0107 	add.w	r1, r9, r7
 8024504:	eb0a 0007 	add.w	r0, sl, r7
 8024508:	eb08 0305 	add.w	r3, r8, r5
 802450c:	784c      	ldrb	r4, [r1, #1]
 802450e:	7889      	ldrb	r1, [r1, #2]
 8024510:	7842      	ldrb	r2, [r0, #1]
 8024512:	7880      	ldrb	r0, [r0, #2]
 8024514:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
 8024518:	f808 2005 	strb.w	r2, [r8, r5]
 802451c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8024520:	7058      	strb	r0, [r3, #1]
 8024522:	4630      	mov	r0, r6
 8024524:	3101      	adds	r1, #1
 8024526:	f803 1c02 	strb.w	r1, [r3, #-2]
 802452a:	f36f 311f 	bfc	r1, #12, #20
 802452e:	0a0c      	lsrs	r4, r1, #8
 8024530:	f803 4c01 	strb.w	r4, [r3, #-1]
 8024534:	2300      	movs	r3, #0
 8024536:	f000 f821 	bl	802457c <LECTRL_AclPacketTransmitted>
 802453a:	3504      	adds	r5, #4
 802453c:	3702      	adds	r7, #2
 802453e:	e7dd      	b.n	80244fc <LECTRL_NumberOfCompletedPacketsEvent+0x2c>
 8024540:	2000      	movs	r0, #0
 8024542:	b03f      	add	sp, #252	@ 0xfc
 8024544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024548 <__arm_cp.18_0>:
 8024548:	2000a248 	.word	0x2000a248

0802454c <LECTRL_DataBufferOverflowEvent>:
 802454c:	2000      	movs	r0, #0
 802454e:	4770      	bx	lr

08024550 <LECTRL_EncryptionKeyRefreshCompleteEvent>:
 8024550:	b5b0      	push	{r4, r5, r7, lr}
 8024552:	7804      	ldrb	r4, [r0, #0]
 8024554:	7841      	ldrb	r1, [r0, #1]
 8024556:	7880      	ldrb	r0, [r0, #2]
 8024558:	2301      	movs	r3, #1
 802455a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 802455e:	4621      	mov	r1, r4
 8024560:	3001      	adds	r0, #1
 8024562:	b285      	uxth	r5, r0
 8024564:	2001      	movs	r0, #1
 8024566:	462a      	mov	r2, r5
 8024568:	f006 f90d 	bl	802a786 <SMP_Encryption_Update_Handler>
 802456c:	4620      	mov	r0, r4
 802456e:	4629      	mov	r1, r5
 8024570:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8024574:	f7fe baa4 	b.w	8022ac0 <HCI_ENCRYPTION_KEY_REFRESH_COMPLETE_EVENT>

08024578 <LECTRL_AutPayloadTimeoutEvent>:
 8024578:	2000      	movs	r0, #0
 802457a:	4770      	bx	lr

0802457c <LECTRL_AclPacketTransmitted>:
 802457c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024580:	4680      	mov	r8, r0
 8024582:	6805      	ldr	r5, [r0, #0]
 8024584:	4618      	mov	r0, r3
 8024586:	2b00      	cmp	r3, #0
 8024588:	461c      	mov	r4, r3
 802458a:	4692      	mov	sl, r2
 802458c:	460e      	mov	r6, r1
 802458e:	f04f 0b00 	mov.w	fp, #0
 8024592:	bf18      	it	ne
 8024594:	2001      	movne	r0, #1
 8024596:	ea4f 0980 	mov.w	r9, r0, lsl #2
 802459a:	fa5f f08b 	uxtb.w	r0, fp
 802459e:	4621      	mov	r1, r4
 80245a0:	4550      	cmp	r0, sl
 80245a2:	f04f 0000 	mov.w	r0, #0
 80245a6:	bf38      	it	cc
 80245a8:	2001      	movcc	r0, #1
 80245aa:	2c00      	cmp	r4, #0
 80245ac:	bf18      	it	ne
 80245ae:	2101      	movne	r1, #1
 80245b0:	4308      	orrs	r0, r1
 80245b2:	b1bd      	cbz	r5, 80245e4 <LECTRL_AclPacketTransmitted+0x68>
 80245b4:	f090 0101 	eors.w	r1, r0, #1
 80245b8:	d114      	bne.n	80245e4 <LECTRL_AclPacketTransmitted+0x68>
 80245ba:	462f      	mov	r7, r5
 80245bc:	682d      	ldr	r5, [r5, #0]
 80245be:	8939      	ldrh	r1, [r7, #8]
 80245c0:	42b1      	cmp	r1, r6
 80245c2:	d1f6      	bne.n	80245b2 <LECTRL_AclPacketTransmitted+0x36>
 80245c4:	79b8      	ldrb	r0, [r7, #6]
 80245c6:	4639      	mov	r1, r7
 80245c8:	f000 00fb 	and.w	r0, r0, #251	@ 0xfb
 80245cc:	ea40 0009 	orr.w	r0, r0, r9
 80245d0:	71b8      	strb	r0, [r7, #6]
 80245d2:	4640      	mov	r0, r8
 80245d4:	f004 fa02 	bl	80289dc <ACL_List_Remove>
 80245d8:	4638      	mov	r0, r7
 80245da:	f003 fed7 	bl	802838c <L2C_Tx_Data_Conplete_Handler>
 80245de:	f10b 0b01 	add.w	fp, fp, #1
 80245e2:	e7da      	b.n	802459a <LECTRL_AclPacketTransmitted+0x1e>
 80245e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080245e8 <CfgData_Init>:
 80245e8:	b510      	push	{r4, lr}
 80245ea:	4c0f      	ldr	r4, [pc, #60]	@ (8024628 <__arm_cp.0_0>)
 80245ec:	f44f 7020 	mov.w	r0, #640	@ 0x280
 80245f0:	80a0      	strh	r0, [r4, #4]
 80245f2:	20e1      	movs	r0, #225	@ 0xe1
 80245f4:	70e0      	strb	r0, [r4, #3]
 80245f6:	480d      	ldr	r0, [pc, #52]	@ (802462c <__arm_cp.0_1>)
 80245f8:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 80245fc:	06c0      	lsls	r0, r0, #27
 80245fe:	bf58      	it	pl
 8024600:	bd10      	poppl	{r4, pc}
 8024602:	f104 0008 	add.w	r0, r4, #8
 8024606:	21dd      	movs	r1, #221	@ 0xdd
 8024608:	2210      	movs	r2, #16
 802460a:	f7fc f96b 	bl	80208e4 <ble_memset>
 802460e:	f104 0018 	add.w	r0, r4, #24
 8024612:	21aa      	movs	r1, #170	@ 0xaa
 8024614:	2210      	movs	r2, #16
 8024616:	f7fc f965 	bl	80208e4 <ble_memset>
 802461a:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 802461e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024622:	f007 b86f 	b.w	802b704 <RndAddr_Generate_Static_Address>
 8024626:	bf00      	nop

08024628 <__arm_cp.0_0>:
 8024628:	2000a014 	.word	0x2000a014

0802462c <__arm_cp.0_1>:
 802462c:	20009fec 	.word	0x20009fec

08024630 <CfgData_Write>:
 8024630:	b580      	push	{r7, lr}
 8024632:	460b      	mov	r3, r1
 8024634:	b908      	cbnz	r0, 802463a <CfgData_Write+0xa>
 8024636:	2b06      	cmp	r3, #6
 8024638:	d01c      	beq.n	8024674 <CfgData_Write+0x44>
 802463a:	2808      	cmp	r0, #8
 802463c:	bf08      	it	eq
 802463e:	2b10      	cmpeq	r3, #16
 8024640:	d018      	beq.n	8024674 <CfgData_Write+0x44>
 8024642:	2818      	cmp	r0, #24
 8024644:	bf08      	it	eq
 8024646:	2b10      	cmpeq	r3, #16
 8024648:	d014      	beq.n	8024674 <CfgData_Write+0x44>
 802464a:	282e      	cmp	r0, #46	@ 0x2e
 802464c:	bf08      	it	eq
 802464e:	2b06      	cmpeq	r3, #6
 8024650:	d010      	beq.n	8024674 <CfgData_Write+0x44>
 8024652:	2834      	cmp	r0, #52	@ 0x34
 8024654:	bf08      	it	eq
 8024656:	2b01      	cmpeq	r3, #1
 8024658:	d00c      	beq.n	8024674 <CfgData_Write+0x44>
 802465a:	2835      	cmp	r0, #53	@ 0x35
 802465c:	bf08      	it	eq
 802465e:	2b01      	cmpeq	r3, #1
 8024660:	d008      	beq.n	8024674 <CfgData_Write+0x44>
 8024662:	28b0      	cmp	r0, #176	@ 0xb0
 8024664:	bf1c      	itt	ne
 8024666:	2012      	movne	r0, #18
 8024668:	bd80      	popne	{r7, pc}
 802466a:	4906      	ldr	r1, [pc, #24]	@ (8024684 <__arm_cp.1_0>)
 802466c:	7810      	ldrb	r0, [r2, #0]
 802466e:	f881 0094 	strb.w	r0, [r1, #148]	@ 0x94
 8024672:	e005      	b.n	8024680 <CfgData_Write+0x50>
 8024674:	4903      	ldr	r1, [pc, #12]	@ (8024684 <__arm_cp.1_0>)
 8024676:	4408      	add	r0, r1
 8024678:	4611      	mov	r1, r2
 802467a:	461a      	mov	r2, r3
 802467c:	f7fc f8e2 	bl	8020844 <ble_memcpy>
 8024680:	2000      	movs	r0, #0
 8024682:	bd80      	pop	{r7, pc}

08024684 <__arm_cp.1_0>:
 8024684:	2000a014 	.word	0x2000a014

08024688 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY>:
 8024688:	b570      	push	{r4, r5, r6, lr}
 802468a:	4e14      	ldr	r6, [pc, #80]	@ (80246dc <__arm_cp.1_0>)
 802468c:	f896 005c 	ldrb.w	r0, [r6, #92]	@ 0x5c
 8024690:	b9e8      	cbnz	r0, 80246ce <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY+0x46>
 8024692:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 8024696:	b130      	cbz	r0, 80246a6 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY+0x1e>
 8024698:	4911      	ldr	r1, [pc, #68]	@ (80246e0 <__arm_cp.1_1>)
 802469a:	f106 003c 	add.w	r0, r6, #60	@ 0x3c
 802469e:	2220      	movs	r2, #32
 80246a0:	f7fc f8d0 	bl	8020844 <ble_memcpy>
 80246a4:	e00e      	b.n	80246c4 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY+0x3c>
 80246a6:	4d0f      	ldr	r5, [pc, #60]	@ (80246e4 <__arm_cp.1_2>)
 80246a8:	f106 043c 	add.w	r4, r6, #60	@ 0x3c
 80246ac:	2008      	movs	r0, #8
 80246ae:	4621      	mov	r1, r4
 80246b0:	f7dd fe3a 	bl	8002328 <BLEPLAT_RngGet>
 80246b4:	4620      	mov	r0, r4
 80246b6:	4629      	mov	r1, r5
 80246b8:	2220      	movs	r2, #32
 80246ba:	f007 f89c 	bl	802b7f6 <Memcmp_Rev>
 80246be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80246c2:	dcf3      	bgt.n	80246ac <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY+0x24>
 80246c4:	f106 003c 	add.w	r0, r6, #60	@ 0x3c
 80246c8:	f7dd fe38 	bl	800233c <BLEPLAT_PkaStartP256Key>
 80246cc:	b108      	cbz	r0, 80246d2 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY+0x4a>
 80246ce:	203a      	movs	r0, #58	@ 0x3a
 80246d0:	bd70      	pop	{r4, r5, r6, pc}
 80246d2:	2001      	movs	r0, #1
 80246d4:	f886 005c 	strb.w	r0, [r6, #92]	@ 0x5c
 80246d8:	2000      	movs	r0, #0
 80246da:	bd70      	pop	{r4, r5, r6, pc}

080246dc <__arm_cp.1_0>:
 80246dc:	2000a014 	.word	0x2000a014

080246e0 <__arm_cp.1_1>:
 80246e0:	0802e778 	.word	0x0802e778

080246e4 <__arm_cp.1_2>:
 80246e4:	0802e798 	.word	0x0802e798

080246e8 <HCI_LE_GENERATE_DHKEY>:
 80246e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80246ea:	b091      	sub	sp, #68	@ 0x44
 80246ec:	4f10      	ldr	r7, [pc, #64]	@ (8024730 <__arm_cp.2_0>)
 80246ee:	4604      	mov	r4, r0
 80246f0:	f897 005c 	ldrb.w	r0, [r7, #92]	@ 0x5c
 80246f4:	b108      	cbz	r0, 80246fa <HCI_LE_GENERATE_DHKEY+0x12>
 80246f6:	203a      	movs	r0, #58	@ 0x3a
 80246f8:	e007      	b.n	802470a <HCI_LE_GENERATE_DHKEY+0x22>
 80246fa:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80246fe:	2120      	movs	r1, #32
 8024700:	4628      	mov	r0, r5
 8024702:	f007 f862 	bl	802b7ca <Is_Empty>
 8024706:	b110      	cbz	r0, 802470e <HCI_LE_GENERATE_DHKEY+0x26>
 8024708:	201f      	movs	r0, #31
 802470a:	b011      	add	sp, #68	@ 0x44
 802470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802470e:	ae01      	add	r6, sp, #4
 8024710:	4621      	mov	r1, r4
 8024712:	2240      	movs	r2, #64	@ 0x40
 8024714:	4630      	mov	r0, r6
 8024716:	f7fc f895 	bl	8020844 <ble_memcpy>
 802471a:	4628      	mov	r0, r5
 802471c:	4631      	mov	r1, r6
 802471e:	f7dd fe11 	bl	8002344 <BLEPLAT_PkaStartDhKey>
 8024722:	2800      	cmp	r0, #0
 8024724:	d1e7      	bne.n	80246f6 <HCI_LE_GENERATE_DHKEY+0xe>
 8024726:	2002      	movs	r0, #2
 8024728:	f887 005c 	strb.w	r0, [r7, #92]	@ 0x5c
 802472c:	2000      	movs	r0, #0
 802472e:	e7ec      	b.n	802470a <HCI_LE_GENERATE_DHKEY+0x22>

08024730 <__arm_cp.2_0>:
 8024730:	2000a014 	.word	0x2000a014

08024734 <BLEPLATCB_PkaComplete>:
 8024734:	b5b0      	push	{r4, r5, r7, lr}
 8024736:	b090      	sub	sp, #64	@ 0x40
 8024738:	4d12      	ldr	r5, [pc, #72]	@ (8024784 <__arm_cp.3_0>)
 802473a:	f895 005c 	ldrb.w	r0, [r5, #92]	@ 0x5c
 802473e:	2802      	cmp	r0, #2
 8024740:	d00b      	beq.n	802475a <BLEPLATCB_PkaComplete+0x26>
 8024742:	2801      	cmp	r0, #1
 8024744:	d119      	bne.n	802477a <BLEPLATCB_PkaComplete+0x46>
 8024746:	466c      	mov	r4, sp
 8024748:	4620      	mov	r0, r4
 802474a:	f7dd fdf9 	bl	8002340 <BLEPLAT_PkaReadP256Key>
 802474e:	2000      	movs	r0, #0
 8024750:	2100      	movs	r1, #0
 8024752:	4622      	mov	r2, r4
 8024754:	f7ff fcc0 	bl	80240d8 <LECTRL_LeReadLocalP256PublicKeyCompleteEvent>
 8024758:	e00f      	b.n	802477a <BLEPLATCB_PkaComplete+0x46>
 802475a:	4668      	mov	r0, sp
 802475c:	f7dd fdf4 	bl	8002348 <BLEPLAT_PkaReadDhKey>
 8024760:	b130      	cbz	r0, 8024770 <BLEPLATCB_PkaComplete+0x3c>
 8024762:	4668      	mov	r0, sp
 8024764:	21ff      	movs	r1, #255	@ 0xff
 8024766:	2220      	movs	r2, #32
 8024768:	f7fc f8bc 	bl	80208e4 <ble_memset>
 802476c:	2112      	movs	r1, #18
 802476e:	e000      	b.n	8024772 <BLEPLATCB_PkaComplete+0x3e>
 8024770:	2100      	movs	r1, #0
 8024772:	466a      	mov	r2, sp
 8024774:	2000      	movs	r0, #0
 8024776:	f7ff fcc9 	bl	802410c <LECTRL_LeGeneratedDHKeyCompleteEvent>
 802477a:	2000      	movs	r0, #0
 802477c:	f885 005c 	strb.w	r0, [r5, #92]	@ 0x5c
 8024780:	b010      	add	sp, #64	@ 0x40
 8024782:	bdb0      	pop	{r4, r5, r7, pc}

08024784 <__arm_cp.3_0>:
 8024784:	2000a014 	.word	0x2000a014

08024788 <GAP_Init>:
 8024788:	4770      	bx	lr
	...

0802478c <ACI_GAP_INIT>:
 802478c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8024790:	4d16      	ldr	r5, [pc, #88]	@ (80247ec <__arm_cp.1_0>)
 8024792:	4607      	mov	r7, r0
 8024794:	f895 01a0 	ldrb.w	r0, [r5, #416]	@ 0x1a0
 8024798:	b110      	cbz	r0, 80247a0 <ACI_GAP_INIT+0x14>
 802479a:	200c      	movs	r0, #12
 802479c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80247a0:	f017 080f 	ands.w	r8, r7, #15
 80247a4:	bf04      	itt	eq
 80247a6:	2092      	moveq	r0, #146	@ 0x92
 80247a8:	e8bd 81fc 	ldmiaeq.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80247ac:	4608      	mov	r0, r1
 80247ae:	461c      	mov	r4, r3
 80247b0:	4616      	mov	r6, r2
 80247b2:	f000 fad1 	bl	8024d58 <GAP_Enable_Privacy>
 80247b6:	b110      	cbz	r0, 80247be <ACI_GAP_INIT+0x32>
 80247b8:	2097      	movs	r0, #151	@ 0x97
 80247ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 80247be:	f895 0037 	ldrb.w	r0, [r5, #55]	@ 0x37
 80247c2:	b108      	cbz	r0, 80247c8 <ACI_GAP_INIT+0x3c>
 80247c4:	f7ff fb94 	bl	8023ef0 <LECTRL_Enhanced_Conn_Complete_Event_Unmask>
 80247c8:	f017 0f05 	tst.w	r7, #5
 80247cc:	d009      	beq.n	80247e2 <ACI_GAP_INIT+0x56>
 80247ce:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 80247d2:	4631      	mov	r1, r6
 80247d4:	4622      	mov	r2, r4
 80247d6:	9000      	str	r0, [sp, #0]
 80247d8:	4640      	mov	r0, r8
 80247da:	f003 f833 	bl	8027844 <GATT_Gap_Add_Service>
 80247de:	2800      	cmp	r0, #0
 80247e0:	d1ea      	bne.n	80247b8 <ACI_GAP_INIT+0x2c>
 80247e2:	2000      	movs	r0, #0
 80247e4:	f885 81a0 	strb.w	r8, [r5, #416]	@ 0x1a0
 80247e8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

080247ec <__arm_cp.1_0>:
 80247ec:	2000a014 	.word	0x2000a014

080247f0 <GAP_Connection_Complete_Handler>:
 80247f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80247f2:	4614      	mov	r4, r2
 80247f4:	b980      	cbnz	r0, 8024818 <GAP_Connection_Complete_Handler+0x28>
 80247f6:	e9dd 6006 	ldrd	r6, r0, [sp, #24]
 80247fa:	461a      	mov	r2, r3
 80247fc:	460d      	mov	r5, r1
 80247fe:	4633      	mov	r3, r6
 8024800:	9000      	str	r0, [sp, #0]
 8024802:	4608      	mov	r0, r1
 8024804:	4621      	mov	r1, r4
 8024806:	f004 fd7b 	bl	8029300 <SMP_Connection_Complete_Handler>
 802480a:	4628      	mov	r0, r5
 802480c:	f000 fee6 	bl	80255dc <GATT_Connection_Complete_Handler>
 8024810:	4628      	mov	r0, r5
 8024812:	4621      	mov	r1, r4
 8024814:	f003 fdbc 	bl	8028390 <L2C_Connection_Complete_Handler>
 8024818:	4805      	ldr	r0, [pc, #20]	@ (8024830 <__arm_cp.2_0>)
 802481a:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 802481e:	b11c      	cbz	r4, 8024828 <GAP_Connection_Complete_Handler+0x38>
 8024820:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
 8024824:	f000 b962 	b.w	8024aec <GAP_Adv_Connection_Complete_Handler>
 8024828:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
 802482c:	f000 bb3e 	b.w	8024eac <GAP_Proc_Connection_Complete_Handler>

08024830 <__arm_cp.2_0>:
 8024830:	2000a014 	.word	0x2000a014

08024834 <GAP_Disconnection_Complete_Handler>:
 8024834:	b510      	push	{r4, lr}
 8024836:	4604      	mov	r4, r0
 8024838:	f000 fef2 	bl	8025620 <GATT_Disconnection_Complete_Handler>
 802483c:	4620      	mov	r0, r4
 802483e:	f004 fdb7 	bl	80293b0 <SMP_Disconnection_Complete_Handler>
 8024842:	4620      	mov	r0, r4
 8024844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024848:	f003 bdb3 	b.w	80283b2 <L2C_Disconnection_Complete_Handler>

0802484c <GAP_Adv_Start>:
 802484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024850:	b08f      	sub	sp, #60	@ 0x3c
 8024852:	f10d 0818 	add.w	r8, sp, #24
 8024856:	460d      	mov	r5, r1
 8024858:	4604      	mov	r4, r0
 802485a:	211f      	movs	r1, #31
 802485c:	461e      	mov	r6, r3
 802485e:	4617      	mov	r7, r2
 8024860:	4640      	mov	r0, r8
 8024862:	f007 f87d 	bl	802b960 <__aeabi_memclr>
 8024866:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8024a64 <__arm_cp.1_0>
 802486a:	f89a 01a1 	ldrb.w	r0, [sl, #417]	@ 0x1a1
 802486e:	b108      	cbz	r0, 8024874 <GAP_Adv_Start+0x28>
 8024870:	200c      	movs	r0, #12
 8024872:	e03f      	b.n	80248f4 <GAP_Adv_Start+0xa8>
 8024874:	1f29      	subs	r1, r5, #4
 8024876:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8024878:	b2c9      	uxtb	r1, r1
 802487a:	29fd      	cmp	r1, #253	@ 0xfd
 802487c:	d803      	bhi.n	8024886 <GAP_Adv_Start+0x3a>
 802487e:	2803      	cmp	r0, #3
 8024880:	d101      	bne.n	8024886 <GAP_Adv_Start+0x3a>
 8024882:	2092      	movs	r0, #146	@ 0x92
 8024884:	e036      	b.n	80248f4 <GAP_Adv_Start+0xa8>
 8024886:	ea56 0107 	orrs.w	r1, r6, r7
 802488a:	d10b      	bne.n	80248a4 <GAP_Adv_Start+0x58>
 802488c:	2d04      	cmp	r5, #4
 802488e:	d807      	bhi.n	80248a0 <GAP_Adv_Start+0x54>
 8024890:	4a75      	ldr	r2, [pc, #468]	@ (8024a68 <__arm_cp.1_1>)
 8024892:	b269      	sxtb	r1, r5
 8024894:	f832 7011 	ldrh.w	r7, [r2, r1, lsl #1]
 8024898:	4a74      	ldr	r2, [pc, #464]	@ (8024a6c <__arm_cp.1_2>)
 802489a:	f832 6011 	ldrh.w	r6, [r2, r1, lsl #1]
 802489e:	e001      	b.n	80248a4 <GAP_Adv_Start+0x58>
 80248a0:	2606      	movs	r6, #6
 80248a2:	2706      	movs	r7, #6
 80248a4:	f89a 11a0 	ldrb.w	r1, [sl, #416]	@ 0x1a0
 80248a8:	2c40      	cmp	r4, #64	@ 0x40
 80248aa:	d102      	bne.n	80248b2 <GAP_Adv_Start+0x66>
 80248ac:	0789      	lsls	r1, r1, #30
 80248ae:	d5df      	bpl.n	8024870 <GAP_Adv_Start+0x24>
 80248b0:	e00a      	b.n	80248c8 <GAP_Adv_Start+0x7c>
 80248b2:	07c9      	lsls	r1, r1, #31
 80248b4:	d0dc      	beq.n	8024870 <GAP_Adv_Start+0x24>
 80248b6:	2c20      	cmp	r4, #32
 80248b8:	d00c      	beq.n	80248d4 <GAP_Adv_Start+0x88>
 80248ba:	2c04      	cmp	r4, #4
 80248bc:	d00e      	beq.n	80248dc <GAP_Adv_Start+0x90>
 80248be:	2c02      	cmp	r4, #2
 80248c0:	d102      	bne.n	80248c8 <GAP_Adv_Start+0x7c>
 80248c2:	f04f 0b05 	mov.w	fp, #5
 80248c6:	e00b      	b.n	80248e0 <GAP_Adv_Start+0x94>
 80248c8:	2101      	movs	r1, #1
 80248ca:	f04f 0b00 	mov.w	fp, #0
 80248ce:	f04f 0901 	mov.w	r9, #1
 80248d2:	e008      	b.n	80248e6 <GAP_Adv_Start+0x9a>
 80248d4:	2101      	movs	r1, #1
 80248d6:	f04f 0b04 	mov.w	fp, #4
 80248da:	e002      	b.n	80248e2 <GAP_Adv_Start+0x96>
 80248dc:	f04f 0b06 	mov.w	fp, #6
 80248e0:	2100      	movs	r1, #0
 80248e2:	f04f 0900 	mov.w	r9, #0
 80248e6:	9104      	str	r1, [sp, #16]
 80248e8:	f10d 0117 	add.w	r1, sp, #23
 80248ec:	2200      	movs	r2, #0
 80248ee:	f000 fa5b 	bl	8024da8 <GAP_Set_Own_Address>
 80248f2:	b110      	cbz	r0, 80248fa <GAP_Adv_Start+0xae>
 80248f4:	b00f      	add	sp, #60	@ 0x3c
 80248f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248fa:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	@ 0x78
 80248fe:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024900:	f1b9 0f00 	cmp.w	r9, #0
 8024904:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8024908:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 802490c:	d002      	beq.n	8024914 <GAP_Adv_Start+0xc8>
 802490e:	f04f 0b00 	mov.w	fp, #0
 8024912:	e007      	b.n	8024924 <GAP_Adv_Start+0xd8>
 8024914:	f88d b01a 	strb.w	fp, [sp, #26]
 8024918:	f44f 7081 	mov.w	r0, #258	@ 0x102
 802491c:	f04f 0b03 	mov.w	fp, #3
 8024920:	f8ad 0018 	strh.w	r0, [sp, #24]
 8024924:	b1a2      	cbz	r2, 8024950 <GAP_Adv_Start+0x104>
 8024926:	f89a 0037 	ldrb.w	r0, [sl, #55]	@ 0x37
 802492a:	b988      	cbnz	r0, 8024950 <GAP_Adv_Start+0x104>
 802492c:	eb0b 0002 	add.w	r0, fp, r2
 8024930:	281e      	cmp	r0, #30
 8024932:	d8a6      	bhi.n	8024882 <GAP_Adv_Start+0x36>
 8024934:	eb08 000b 	add.w	r0, r8, fp
 8024938:	f10b 0901 	add.w	r9, fp, #1
 802493c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802493e:	4693      	mov	fp, r2
 8024940:	7002      	strb	r2, [r0, #0]
 8024942:	eb08 0009 	add.w	r0, r8, r9
 8024946:	f7fb ff7d 	bl	8020844 <ble_memcpy>
 802494a:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	@ 0x78
 802494e:	44cb      	add	fp, r9
 8024950:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
 8024954:	f1b9 0f00 	cmp.w	r9, #0
 8024958:	d014      	beq.n	8024984 <GAP_Adv_Start+0x138>
 802495a:	fa5f f08b 	uxtb.w	r0, fp
 802495e:	eb00 0109 	add.w	r1, r0, r9
 8024962:	291e      	cmp	r1, #30
 8024964:	f63f af8d 	bhi.w	8024882 <GAP_Adv_Start+0x36>
 8024968:	f10b 0b01 	add.w	fp, fp, #1
 802496c:	f808 9000 	strb.w	r9, [r8, r0]
 8024970:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024972:	464a      	mov	r2, r9
 8024974:	fa5f f08b 	uxtb.w	r0, fp
 8024978:	4440      	add	r0, r8
 802497a:	f7fb ff63 	bl	8020844 <ble_memcpy>
 802497e:	e9dd 311e 	ldrd	r3, r1, [sp, #120]	@ 0x78
 8024982:	44cb      	add	fp, r9
 8024984:	b1f3      	cbz	r3, 80249c4 <GAP_Adv_Start+0x178>
 8024986:	b1e9      	cbz	r1, 80249c4 <GAP_Adv_Start+0x178>
 8024988:	fa5f f08b 	uxtb.w	r0, fp
 802498c:	281a      	cmp	r0, #26
 802498e:	f63f af78 	bhi.w	8024882 <GAP_Adv_Start+0x36>
 8024992:	2105      	movs	r1, #5
 8024994:	2202      	movs	r2, #2
 8024996:	f808 1000 	strb.w	r1, [r8, r0]
 802499a:	4440      	add	r0, r8
 802499c:	2112      	movs	r1, #18
 802499e:	7041      	strb	r1, [r0, #1]
 80249a0:	f10b 0002 	add.w	r0, fp, #2
 80249a4:	f10d 013a 	add.w	r1, sp, #58	@ 0x3a
 80249a8:	b2c0      	uxtb	r0, r0
 80249aa:	eb08 0900 	add.w	r9, r8, r0
 80249ae:	4648      	mov	r0, r9
 80249b0:	f7fb ff48 	bl	8020844 <ble_memcpy>
 80249b4:	f109 0002 	add.w	r0, r9, #2
 80249b8:	a90e      	add	r1, sp, #56	@ 0x38
 80249ba:	2202      	movs	r2, #2
 80249bc:	f7fb ff42 	bl	8020844 <ble_memcpy>
 80249c0:	f10b 0b06 	add.w	fp, fp, #6
 80249c4:	9804      	ldr	r0, [sp, #16]
 80249c6:	b990      	cbnz	r0, 80249ee <GAP_Adv_Start+0x1a2>
 80249c8:	fa5f f08b 	uxtb.w	r0, fp
 80249cc:	281c      	cmp	r0, #28
 80249ce:	f63f af58 	bhi.w	8024882 <GAP_Adv_Start+0x36>
 80249d2:	2102      	movs	r1, #2
 80249d4:	f808 1000 	strb.w	r1, [r8, r0]
 80249d8:	4440      	add	r0, r8
 80249da:	210a      	movs	r1, #10
 80249dc:	7041      	strb	r1, [r0, #1]
 80249de:	f10b 0002 	add.w	r0, fp, #2
 80249e2:	b2c0      	uxtb	r0, r0
 80249e4:	4440      	add	r0, r8
 80249e6:	f7ff fa62 	bl	8023eae <HCI_LE_READ_ADVERTISING_PHYSICAL_CHANNEL_TX_POWER>
 80249ea:	f10b 0b03 	add.w	fp, fp, #3
 80249ee:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80249f0:	b15a      	cbz	r2, 8024a0a <GAP_Adv_Start+0x1be>
 80249f2:	fa5f f08b 	uxtb.w	r0, fp
 80249f6:	eb00 0b02 	add.w	fp, r0, r2
 80249fa:	f1bb 0f1f 	cmp.w	fp, #31
 80249fe:	f63f af40 	bhi.w	8024882 <GAP_Adv_Start+0x36>
 8024a02:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8024a04:	4440      	add	r0, r8
 8024a06:	f7fb ff1d 	bl	8020844 <ble_memcpy>
 8024a0a:	fa5f f08b 	uxtb.w	r0, fp
 8024a0e:	a906      	add	r1, sp, #24
 8024a10:	f000 f8ee 	bl	8024bf0 <GAP_Adv_SetData>
 8024a14:	2800      	cmp	r0, #0
 8024a16:	f47f af6d 	bne.w	80248f4 <GAP_Adv_Start+0xa8>
 8024a1a:	e9dd e020 	ldrd	lr, r0, [sp, #128]	@ 0x80
 8024a1e:	2107      	movs	r1, #7
 8024a20:	f89a 21c4 	ldrb.w	r2, [sl, #452]	@ 0x1c4
 8024a24:	f8dd c064 	ldr.w	ip, [sp, #100]	@ 0x64
 8024a28:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8024a2c:	2800      	cmp	r0, #0
 8024a2e:	bf0c      	ite	eq
 8024a30:	f20a 10c5 	addweq	r0, sl, #453	@ 0x1c5
 8024a34:	4672      	movne	r2, lr
 8024a36:	e9cd 1c02 	strd	r1, ip, [sp, #8]
 8024a3a:	4631      	mov	r1, r6
 8024a3c:	b2d2      	uxtb	r2, r2
 8024a3e:	e9cd 2000 	strd	r2, r0, [sp]
 8024a42:	4638      	mov	r0, r7
 8024a44:	462a      	mov	r2, r5
 8024a46:	f7ff f9eb 	bl	8023e20 <HCI_LE_SET_ADVERTISING_PARAMETERS>
 8024a4a:	2800      	cmp	r0, #0
 8024a4c:	f47f af52 	bne.w	80248f4 <GAP_Adv_Start+0xa8>
 8024a50:	2001      	movs	r0, #1
 8024a52:	f7ff fa0e 	bl	8023e72 <HCI_LE_SET_ADVERTISING_ENABLE>
 8024a56:	2800      	cmp	r0, #0
 8024a58:	f47f af4c 	bne.w	80248f4 <GAP_Adv_Start+0xa8>
 8024a5c:	2000      	movs	r0, #0
 8024a5e:	f88a 41a1 	strb.w	r4, [sl, #417]	@ 0x1a1
 8024a62:	e747      	b.n	80248f4 <GAP_Adv_Start+0xa8>

08024a64 <__arm_cp.1_0>:
 8024a64:	2000a014 	.word	0x2000a014

08024a68 <__arm_cp.1_1>:
 8024a68:	0802e7c2 	.word	0x0802e7c2

08024a6c <__arm_cp.1_2>:
 8024a6c:	0802e7b8 	.word	0x0802e7b8

08024a70 <GAP_Adv_DiscParamsCheck>:
 8024a70:	ea52 0301 	orrs.w	r3, r2, r1
 8024a74:	d00b      	beq.n	8024a8e <GAP_Adv_DiscParamsCheck+0x1e>
 8024a76:	428a      	cmp	r2, r1
 8024a78:	bf28      	it	cs
 8024a7a:	2906      	cmpcs	r1, #6
 8024a7c:	d201      	bcs.n	8024a82 <GAP_Adv_DiscParamsCheck+0x12>
 8024a7e:	2192      	movs	r1, #146	@ 0x92
 8024a80:	e00e      	b.n	8024aa0 <GAP_Adv_DiscParamsCheck+0x30>
 8024a82:	f6a2 4181 	subw	r1, r2, #3201	@ 0xc81
 8024a86:	f24f 327e 	movw	r2, #62334	@ 0xf37e
 8024a8a:	4291      	cmp	r1, r2
 8024a8c:	d3f7      	bcc.n	8024a7e <GAP_Adv_DiscParamsCheck+0xe>
 8024a8e:	2100      	movs	r1, #0
 8024a90:	2804      	cmp	r0, #4
 8024a92:	bf08      	it	eq
 8024a94:	f06f 016d 	mvneq.w	r1, #109	@ 0x6d
 8024a98:	2801      	cmp	r0, #1
 8024a9a:	bf08      	it	eq
 8024a9c:	f06f 016d 	mvneq.w	r1, #109	@ 0x6d
 8024aa0:	b2c8      	uxtb	r0, r1
 8024aa2:	4770      	bx	lr

08024aa4 <ACI_GAP_SET_DISCOVERABLE>:
 8024aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024aa8:	b08d      	sub	sp, #52	@ 0x34
 8024aaa:	f000 f917 	bl	8024cdc <OUTLINED_FUNCTION_2>
 8024aae:	d108      	bne.n	8024ac2 <ACI_GAP_SET_DISCOVERABLE+0x1e>
 8024ab0:	f000 f906 	bl	8024cc0 <OUTLINED_FUNCTION_0>
 8024ab4:	2004      	movs	r0, #4
 8024ab6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8024aba:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8024abe:	f000 f91d 	bl	8024cfc <OUTLINED_FUNCTION_3>
 8024ac2:	b00d      	add	sp, #52	@ 0x34
 8024ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08024ac8 <GAP_Adv_Lim_Disc_Timeout_Cb>:
 8024ac8:	b5b0      	push	{r4, r5, r7, lr}
 8024aca:	4c07      	ldr	r4, [pc, #28]	@ (8024ae8 <__arm_cp.8_0>)
 8024acc:	f894 01a1 	ldrb.w	r0, [r4, #417]	@ 0x1a1
 8024ad0:	0780      	lsls	r0, r0, #30
 8024ad2:	d508      	bpl.n	8024ae6 <GAP_Adv_Lim_Disc_Timeout_Cb+0x1e>
 8024ad4:	2000      	movs	r0, #0
 8024ad6:	2500      	movs	r5, #0
 8024ad8:	f7ff f9cb 	bl	8023e72 <HCI_LE_SET_ADVERTISING_ENABLE>
 8024adc:	2001      	movs	r0, #1
 8024ade:	f7fe fe73 	bl	80237c8 <EVT_aci_gap_limited_discoverable>
 8024ae2:	f884 51a1 	strb.w	r5, [r4, #417]	@ 0x1a1
 8024ae6:	bdb0      	pop	{r4, r5, r7, pc}

08024ae8 <__arm_cp.8_0>:
 8024ae8:	2000a014 	.word	0x2000a014

08024aec <GAP_Adv_Connection_Complete_Handler>:
 8024aec:	f000 b800 	b.w	8024af0 <GAP_Adv_Reset_State>

08024af0 <GAP_Adv_Reset_State>:
 8024af0:	b510      	push	{r4, lr}
 8024af2:	4604      	mov	r4, r0
 8024af4:	7840      	ldrb	r0, [r0, #1]
 8024af6:	0780      	lsls	r0, r0, #30
 8024af8:	bf44      	itt	mi
 8024afa:	f44f 7080 	movmi.w	r0, #256	@ 0x100
 8024afe:	f7dd fc2f 	blmi	8002360 <BLEPLAT_TimerStop>
 8024b02:	2000      	movs	r0, #0
 8024b04:	7060      	strb	r0, [r4, #1]
 8024b06:	bd10      	pop	{r4, pc}

08024b08 <ACI_GAP_UPDATE_ADV_DATA>:
 8024b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b0c:	b089      	sub	sp, #36	@ 0x24
 8024b0e:	281f      	cmp	r0, #31
 8024b10:	d903      	bls.n	8024b1a <ACI_GAP_UPDATE_ADV_DATA+0x12>
 8024b12:	2092      	movs	r0, #146	@ 0x92
 8024b14:	b009      	add	sp, #36	@ 0x24
 8024b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b1a:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8024bec <__arm_cp.11_0>
 8024b1e:	4605      	mov	r5, r0
 8024b20:	f10d 0005 	add.w	r0, sp, #5
 8024b24:	460c      	mov	r4, r1
 8024b26:	462a      	mov	r2, r5
 8024b28:	f898 a1a3 	ldrb.w	sl, [r8, #419]	@ 0x1a3
 8024b2c:	f7fb fe8a 	bl	8020844 <ble_memcpy>
 8024b30:	f04f 0b00 	mov.w	fp, #0
 8024b34:	46a9      	mov	r9, r5
 8024b36:	ea5f 600a 	movs.w	r0, sl, lsl #24
 8024b3a:	d03c      	beq.n	8024bb6 <ACI_GAP_UPDATE_ADV_DATA+0xae>
 8024b3c:	fa5f fc8b 	uxtb.w	ip, fp
 8024b40:	2300      	movs	r3, #0
 8024b42:	462a      	mov	r2, r5
 8024b44:	f10c 0101 	add.w	r1, ip, #1
 8024b48:	b2db      	uxtb	r3, r3
 8024b4a:	42ab      	cmp	r3, r5
 8024b4c:	d212      	bcs.n	8024b74 <ACI_GAP_UPDATE_ADV_DATA+0x6c>
 8024b4e:	5ce7      	ldrb	r7, [r4, r3]
 8024b50:	b2d0      	uxtb	r0, r2
 8024b52:	4287      	cmp	r7, r0
 8024b54:	d8dd      	bhi.n	8024b12 <ACI_GAP_UPDATE_ADV_DATA+0xa>
 8024b56:	d101      	bne.n	8024b5c <ACI_GAP_UPDATE_ADV_DATA+0x54>
 8024b58:	0610      	lsls	r0, r2, #24
 8024b5a:	d1da      	bne.n	8024b12 <ACI_GAP_UPDATE_ADV_DATA+0xa>
 8024b5c:	eb08 0001 	add.w	r0, r8, r1
 8024b60:	191e      	adds	r6, r3, r4
 8024b62:	f890 01a4 	ldrb.w	r0, [r0, #420]	@ 0x1a4
 8024b66:	7876      	ldrb	r6, [r6, #1]
 8024b68:	4286      	cmp	r6, r0
 8024b6a:	d01b      	beq.n	8024ba4 <ACI_GAP_UPDATE_ADV_DATA+0x9c>
 8024b6c:	1c78      	adds	r0, r7, #1
 8024b6e:	4403      	add	r3, r0
 8024b70:	1a12      	subs	r2, r2, r0
 8024b72:	e7e9      	b.n	8024b48 <ACI_GAP_UPDATE_ADV_DATA+0x40>
 8024b74:	eb08 000c 	add.w	r0, r8, ip
 8024b78:	fa5f f289 	uxtb.w	r2, r9
 8024b7c:	f890 11a4 	ldrb.w	r1, [r0, #420]	@ 0x1a4
 8024b80:	188b      	adds	r3, r1, r2
 8024b82:	2b1e      	cmp	r3, #30
 8024b84:	d82b      	bhi.n	8024bde <ACI_GAP_UPDATE_ADV_DATA+0xd6>
 8024b86:	f500 77d2 	add.w	r7, r0, #420	@ 0x1a4
 8024b8a:	f10d 0005 	add.w	r0, sp, #5
 8024b8e:	4410      	add	r0, r2
 8024b90:	1c4a      	adds	r2, r1, #1
 8024b92:	4639      	mov	r1, r7
 8024b94:	f7fb fe56 	bl	8020844 <ble_memcpy>
 8024b98:	7838      	ldrb	r0, [r7, #0]
 8024b9a:	eb09 0100 	add.w	r1, r9, r0
 8024b9e:	f101 0901 	add.w	r9, r1, #1
 8024ba2:	e003      	b.n	8024bac <ACI_GAP_UPDATE_ADV_DATA+0xa4>
 8024ba4:	eb08 000c 	add.w	r0, r8, ip
 8024ba8:	f890 01a4 	ldrb.w	r0, [r0, #420]	@ 0x1a4
 8024bac:	3001      	adds	r0, #1
 8024bae:	4483      	add	fp, r0
 8024bb0:	ebaa 0a00 	sub.w	sl, sl, r0
 8024bb4:	e7bf      	b.n	8024b36 <ACI_GAP_UPDATE_ADV_DATA+0x2e>
 8024bb6:	2100      	movs	r1, #0
 8024bb8:	4628      	mov	r0, r5
 8024bba:	b2c9      	uxtb	r1, r1
 8024bbc:	42a9      	cmp	r1, r5
 8024bbe:	d20a      	bcs.n	8024bd6 <ACI_GAP_UPDATE_ADV_DATA+0xce>
 8024bc0:	5c62      	ldrb	r2, [r4, r1]
 8024bc2:	b2c3      	uxtb	r3, r0
 8024bc4:	429a      	cmp	r2, r3
 8024bc6:	d8a4      	bhi.n	8024b12 <ACI_GAP_UPDATE_ADV_DATA+0xa>
 8024bc8:	d101      	bne.n	8024bce <ACI_GAP_UPDATE_ADV_DATA+0xc6>
 8024bca:	0603      	lsls	r3, r0, #24
 8024bcc:	d1a1      	bne.n	8024b12 <ACI_GAP_UPDATE_ADV_DATA+0xa>
 8024bce:	3201      	adds	r2, #1
 8024bd0:	4411      	add	r1, r2
 8024bd2:	1a80      	subs	r0, r0, r2
 8024bd4:	e7f1      	b.n	8024bba <ACI_GAP_UPDATE_ADV_DATA+0xb2>
 8024bd6:	fa5f f089 	uxtb.w	r0, r9
 8024bda:	281f      	cmp	r0, #31
 8024bdc:	d901      	bls.n	8024be2 <ACI_GAP_UPDATE_ADV_DATA+0xda>
 8024bde:	2091      	movs	r0, #145	@ 0x91
 8024be0:	e798      	b.n	8024b14 <ACI_GAP_UPDATE_ADV_DATA+0xc>
 8024be2:	f10d 0105 	add.w	r1, sp, #5
 8024be6:	f000 f803 	bl	8024bf0 <GAP_Adv_SetData>
 8024bea:	e793      	b.n	8024b14 <ACI_GAP_UPDATE_ADV_DATA+0xc>

08024bec <__arm_cp.11_0>:
 8024bec:	2000a014 	.word	0x2000a014

08024bf0 <GAP_Adv_SetData>:
 8024bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024bf2:	460d      	mov	r5, r1
 8024bf4:	4604      	mov	r4, r0
 8024bf6:	f7ff f937 	bl	8023e68 <HCI_LE_SET_ADVERTISING_DATA>
 8024bfa:	4606      	mov	r6, r0
 8024bfc:	b940      	cbnz	r0, 8024c10 <GAP_Adv_SetData+0x20>
 8024bfe:	4f05      	ldr	r7, [pc, #20]	@ (8024c14 <__arm_cp.12_0>)
 8024c00:	4629      	mov	r1, r5
 8024c02:	4622      	mov	r2, r4
 8024c04:	f507 70d2 	add.w	r0, r7, #420	@ 0x1a4
 8024c08:	f7fb fe1c 	bl	8020844 <ble_memcpy>
 8024c0c:	f887 41a3 	strb.w	r4, [r7, #419]	@ 0x1a3
 8024c10:	4630      	mov	r0, r6
 8024c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024c14 <__arm_cp.12_0>:
 8024c14:	2000a014 	.word	0x2000a014

08024c18 <ACI_GAP_DELETE_AD_TYPE>:
 8024c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024c1c:	b089      	sub	sp, #36	@ 0x24
 8024c1e:	f8df 906c 	ldr.w	r9, [pc, #108]	@ 8024c8c <__arm_cp.13_0>
 8024c22:	f10d 0805 	add.w	r8, sp, #5
 8024c26:	4606      	mov	r6, r0
 8024c28:	4640      	mov	r0, r8
 8024c2a:	f899 51a3 	ldrb.w	r5, [r9, #419]	@ 0x1a3
 8024c2e:	f509 71d2 	add.w	r1, r9, #420	@ 0x1a4
 8024c32:	462a      	mov	r2, r5
 8024c34:	f7fb fe06 	bl	8020844 <ble_memcpy>
 8024c38:	2100      	movs	r1, #0
 8024c3a:	2000      	movs	r0, #0
 8024c3c:	4604      	mov	r4, r0
 8024c3e:	0628      	lsls	r0, r5, #24
 8024c40:	d01f      	beq.n	8024c82 <ACI_GAP_DELETE_AD_TYPE+0x6a>
 8024c42:	b2c9      	uxtb	r1, r1
 8024c44:	eb09 0201 	add.w	r2, r9, r1
 8024c48:	f892 01a4 	ldrb.w	r0, [r2, #420]	@ 0x1a4
 8024c4c:	1c43      	adds	r3, r0, #1
 8024c4e:	b2e8      	uxtb	r0, r5
 8024c50:	b2df      	uxtb	r7, r3
 8024c52:	42b8      	cmp	r0, r7
 8024c54:	d315      	bcc.n	8024c82 <ACI_GAP_DELETE_AD_TYPE+0x6a>
 8024c56:	f892 21a5 	ldrb.w	r2, [r2, #421]	@ 0x1a5
 8024c5a:	1918      	adds	r0, r3, r4
 8024c5c:	1aed      	subs	r5, r5, r3
 8024c5e:	4439      	add	r1, r7
 8024c60:	42b2      	cmp	r2, r6
 8024c62:	d1eb      	bne.n	8024c3c <ACI_GAP_DELETE_AD_TYPE+0x24>
 8024c64:	b2c9      	uxtb	r1, r1
 8024c66:	b2e0      	uxtb	r0, r4
 8024c68:	b2ea      	uxtb	r2, r5
 8024c6a:	4449      	add	r1, r9
 8024c6c:	4440      	add	r0, r8
 8024c6e:	f501 71d2 	add.w	r1, r1, #420	@ 0x1a4
 8024c72:	f7fb fde7 	bl	8020844 <ble_memcpy>
 8024c76:	1928      	adds	r0, r5, r4
 8024c78:	4641      	mov	r1, r8
 8024c7a:	b2c0      	uxtb	r0, r0
 8024c7c:	f7ff ffb8 	bl	8024bf0 <GAP_Adv_SetData>
 8024c80:	e000      	b.n	8024c84 <ACI_GAP_DELETE_AD_TYPE+0x6c>
 8024c82:	201f      	movs	r0, #31
 8024c84:	b009      	add	sp, #36	@ 0x24
 8024c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024c8a:	bf00      	nop

08024c8c <__arm_cp.13_0>:
 8024c8c:	2000a014 	.word	0x2000a014

08024c90 <ACI_GAP_SET_NON_DISCOVERABLE>:
 8024c90:	b510      	push	{r4, lr}
 8024c92:	4c0a      	ldr	r4, [pc, #40]	@ (8024cbc <__arm_cp.14_0>)
 8024c94:	f894 01a1 	ldrb.w	r0, [r4, #417]	@ 0x1a1
 8024c98:	b120      	cbz	r0, 8024ca4 <ACI_GAP_SET_NON_DISCOVERABLE+0x14>
 8024c9a:	2000      	movs	r0, #0
 8024c9c:	f7ff f8e9 	bl	8023e72 <HCI_LE_SET_ADVERTISING_ENABLE>
 8024ca0:	b110      	cbz	r0, 8024ca8 <ACI_GAP_SET_NON_DISCOVERABLE+0x18>
 8024ca2:	bd10      	pop	{r4, pc}
 8024ca4:	200c      	movs	r0, #12
 8024ca6:	bd10      	pop	{r4, pc}
 8024ca8:	2001      	movs	r0, #1
 8024caa:	f7ff ffb5 	bl	8024c18 <ACI_GAP_DELETE_AD_TYPE>
 8024cae:	f504 70d0 	add.w	r0, r4, #416	@ 0x1a0
 8024cb2:	f7ff ff1d 	bl	8024af0 <GAP_Adv_Reset_State>
 8024cb6:	2000      	movs	r0, #0
 8024cb8:	bd10      	pop	{r4, pc}
 8024cba:	bf00      	nop

08024cbc <__arm_cp.14_0>:
 8024cbc:	2000a014 	.word	0x2000a014

08024cc0 <OUTLINED_FUNCTION_0>:
 8024cc0:	e9dd 1c17 	ldrd	r1, ip, [sp, #92]	@ 0x5c
 8024cc4:	e9dd 3215 	ldrd	r3, r2, [sp, #84]	@ 0x54
 8024cc8:	2000      	movs	r0, #0
 8024cca:	e9cd 7906 	strd	r7, r9, [sp, #24]
 8024cce:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8024cd2:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8024cd6:	e9cd 4000 	strd	r4, r0, [sp]
 8024cda:	4770      	bx	lr

08024cdc <OUTLINED_FUNCTION_2>:
 8024cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8024ce0:	e9dd 791b 	ldrd	r7, r9, [sp, #108]	@ 0x6c
 8024ce4:	4690      	mov	r8, r2
 8024ce6:	460d      	mov	r5, r1
 8024ce8:	461c      	mov	r4, r3
 8024cea:	4606      	mov	r6, r0
 8024cec:	4639      	mov	r1, r7
 8024cee:	464a      	mov	r2, r9
 8024cf0:	f7ff febe 	bl	8024a70 <GAP_Adv_DiscParamsCheck>
 8024cf4:	2800      	cmp	r0, #0
 8024cf6:	f85d eb08 	ldr.w	lr, [sp], #8
 8024cfa:	4770      	bx	lr

08024cfc <OUTLINED_FUNCTION_3>:
 8024cfc:	4631      	mov	r1, r6
 8024cfe:	462a      	mov	r2, r5
 8024d00:	4643      	mov	r3, r8
 8024d02:	f7ff bda3 	b.w	802484c <GAP_Adv_Start>
	...

08024d08 <GAP_Advertising_Report_Handler>:
 8024d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024d0a:	4812      	ldr	r0, [pc, #72]	@ (8024d54 <__arm_cp.0_0>)
 8024d0c:	f890 01a2 	ldrb.w	r0, [r0, #418]	@ 0x1a2
 8024d10:	f010 0fb3 	tst.w	r0, #179	@ 0xb3
 8024d14:	d01b      	beq.n	8024d4e <GAP_Advertising_Report_Handler+0x46>
 8024d16:	0784      	lsls	r4, r0, #30
 8024d18:	bf18      	it	ne
 8024d1a:	2904      	cmpne	r1, #4
 8024d1c:	d101      	bne.n	8024d22 <GAP_Advertising_Report_Handler+0x1a>
 8024d1e:	2001      	movs	r0, #1
 8024d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d22:	2500      	movs	r5, #0
 8024d24:	1ca9      	adds	r1, r5, #2
 8024d26:	4291      	cmp	r1, r2
 8024d28:	d211      	bcs.n	8024d4e <GAP_Advertising_Report_Handler+0x46>
 8024d2a:	5d5e      	ldrb	r6, [r3, r5]
 8024d2c:	b17e      	cbz	r6, 8024d4e <GAP_Advertising_Report_Handler+0x46>
 8024d2e:	1c6f      	adds	r7, r5, #1
 8024d30:	19bd      	adds	r5, r7, r6
 8024d32:	5dde      	ldrb	r6, [r3, r7]
 8024d34:	2e01      	cmp	r6, #1
 8024d36:	d1f5      	bne.n	8024d24 <GAP_Advertising_Report_Handler+0x1c>
 8024d38:	07c0      	lsls	r0, r0, #31
 8024d3a:	d105      	bne.n	8024d48 <GAP_Advertising_Report_Handler+0x40>
 8024d3c:	2c00      	cmp	r4, #0
 8024d3e:	d506      	bpl.n	8024d4e <GAP_Advertising_Report_Handler+0x46>
 8024d40:	5c58      	ldrb	r0, [r3, r1]
 8024d42:	0780      	lsls	r0, r0, #30
 8024d44:	d1eb      	bne.n	8024d1e <GAP_Advertising_Report_Handler+0x16>
 8024d46:	e002      	b.n	8024d4e <GAP_Advertising_Report_Handler+0x46>
 8024d48:	5c58      	ldrb	r0, [r3, r1]
 8024d4a:	07c0      	lsls	r0, r0, #31
 8024d4c:	d1e7      	bne.n	8024d1e <GAP_Advertising_Report_Handler+0x16>
 8024d4e:	2000      	movs	r0, #0
 8024d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d52:	bf00      	nop

08024d54 <__arm_cp.0_0>:
 8024d54:	2000a014 	.word	0x2000a014

08024d58 <GAP_Enable_Privacy>:
 8024d58:	4904      	ldr	r1, [pc, #16]	@ (8024d6c <__arm_cp.0_0>)
 8024d5a:	f881 0037 	strb.w	r0, [r1, #55]	@ 0x37
 8024d5e:	b110      	cbz	r0, 8024d66 <GAP_Enable_Privacy+0xe>
 8024d60:	2001      	movs	r0, #1
 8024d62:	f7ff b890 	b.w	8023e86 <HCI_LE_SET_ADDRESS_RESOLUTION_ENABLE>
 8024d66:	2000      	movs	r0, #0
 8024d68:	4770      	bx	lr
 8024d6a:	bf00      	nop

08024d6c <__arm_cp.0_0>:
 8024d6c:	2000a014 	.word	0x2000a014

08024d70 <ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST>:
 8024d70:	b5b0      	push	{r4, r5, r7, lr}
 8024d72:	b094      	sub	sp, #80	@ 0x50
 8024d74:	f7ff f88c 	bl	8023e90 <HCI_LE_CLEAR_FILTER_ACCEPT_LIST>
 8024d78:	b9a0      	cbnz	r0, 8024da4 <ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST+0x34>
 8024d7a:	466c      	mov	r4, sp
 8024d7c:	2100      	movs	r1, #0
 8024d7e:	f104 053e 	add.w	r5, r4, #62	@ 0x3e
 8024d82:	b2c8      	uxtb	r0, r1
 8024d84:	4621      	mov	r1, r4
 8024d86:	f003 fe3e 	bl	8028a06 <SDB_Get_Sec_Record>
 8024d8a:	b950      	cbnz	r0, 8024da2 <ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST+0x32>
 8024d8c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8024d90:	4629      	mov	r1, r5
 8024d92:	f000 0001 	and.w	r0, r0, #1
 8024d96:	f7ff f880 	bl	8023e9a <HCI_LE_ADD_DEVICE_TO_FILTER_ACCEPT_LIST>
 8024d9a:	2101      	movs	r1, #1
 8024d9c:	2800      	cmp	r0, #0
 8024d9e:	d0f0      	beq.n	8024d82 <ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST+0x12>
 8024da0:	e000      	b.n	8024da4 <ACI_GAP_CONFIGURE_FILTER_ACCEPT_LIST+0x34>
 8024da2:	2000      	movs	r0, #0
 8024da4:	b014      	add	sp, #80	@ 0x50
 8024da6:	bdb0      	pop	{r4, r5, r7, pc}

08024da8 <GAP_Set_Own_Address>:
 8024da8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8024dac:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8024e60 <__arm_cp.4_0>
 8024db0:	f10d 0406 	add.w	r4, sp, #6
 8024db4:	2a00      	cmp	r2, #0
 8024db6:	4605      	mov	r5, r0
 8024db8:	4616      	mov	r6, r2
 8024dba:	460f      	mov	r7, r1
 8024dbc:	bf18      	it	ne
 8024dbe:	4614      	movne	r4, r2
 8024dc0:	f899 0037 	ldrb.w	r0, [r9, #55]	@ 0x37
 8024dc4:	b180      	cbz	r0, 8024de8 <GAP_Set_Own_Address+0x40>
 8024dc6:	1f28      	subs	r0, r5, #4
 8024dc8:	f110 0f02 	cmn.w	r0, #2
 8024dcc:	d31d      	bcc.n	8024e0a <GAP_Set_Own_Address+0x62>
 8024dce:	f004 fa91 	bl	80292f4 <SMP_Get_Identity_Address_Type>
 8024dd2:	4680      	mov	r8, r0
 8024dd4:	2d03      	cmp	r5, #3
 8024dd6:	d11b      	bne.n	8024e10 <GAP_Set_Own_Address+0x68>
 8024dd8:	2001      	movs	r0, #1
 8024dda:	7038      	strb	r0, [r7, #0]
 8024ddc:	4620      	mov	r0, r4
 8024dde:	f006 fca3 	bl	802b728 <RndAddr_Generate_Non_Resolvable_Address>
 8024de2:	bbc6      	cbnz	r6, 8024e56 <GAP_Set_Own_Address+0xae>
 8024de4:	2503      	movs	r5, #3
 8024de6:	e024      	b.n	8024e32 <GAP_Set_Own_Address+0x8a>
 8024de8:	2d01      	cmp	r5, #1
 8024dea:	d80e      	bhi.n	8024e0a <GAP_Set_Own_Address+0x62>
 8024dec:	f899 01a1 	ldrb.w	r0, [r9, #417]	@ 0x1a1
 8024df0:	f899 11a2 	ldrb.w	r1, [r9, #418]	@ 0x1a2
 8024df4:	4308      	orrs	r0, r1
 8024df6:	d003      	beq.n	8024e00 <GAP_Set_Own_Address+0x58>
 8024df8:	f899 0036 	ldrb.w	r0, [r9, #54]	@ 0x36
 8024dfc:	42a8      	cmp	r0, r5
 8024dfe:	d104      	bne.n	8024e0a <GAP_Set_Own_Address+0x62>
 8024e00:	b1ed      	cbz	r5, 8024e3e <GAP_Set_Own_Address+0x96>
 8024e02:	2001      	movs	r0, #1
 8024e04:	f04f 0801 	mov.w	r8, #1
 8024e08:	e006      	b.n	8024e18 <GAP_Set_Own_Address+0x70>
 8024e0a:	2092      	movs	r0, #146	@ 0x92
 8024e0c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8024e10:	f1b8 0f00 	cmp.w	r8, #0
 8024e14:	d018      	beq.n	8024e48 <GAP_Set_Own_Address+0xa0>
 8024e16:	2003      	movs	r0, #3
 8024e18:	7038      	strb	r0, [r7, #0]
 8024e1a:	f109 012e 	add.w	r1, r9, #46	@ 0x2e
 8024e1e:	4620      	mov	r0, r4
 8024e20:	2206      	movs	r2, #6
 8024e22:	f7fb fd0f 	bl	8020844 <ble_memcpy>
 8024e26:	b9b6      	cbnz	r6, 8024e56 <GAP_Set_Own_Address+0xae>
 8024e28:	f899 01c3 	ldrb.w	r0, [r9, #451]	@ 0x1c3
 8024e2c:	2801      	cmp	r0, #1
 8024e2e:	d012      	beq.n	8024e56 <GAP_Set_Own_Address+0xae>
 8024e30:	2501      	movs	r5, #1
 8024e32:	4620      	mov	r0, r4
 8024e34:	f7ff f856 	bl	8023ee4 <HCI_LE_SET_RANDOM_ADDRESS>
 8024e38:	b158      	cbz	r0, 8024e52 <GAP_Set_Own_Address+0xaa>
 8024e3a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8024e3e:	f04f 0800 	mov.w	r8, #0
 8024e42:	f887 8000 	strb.w	r8, [r7]
 8024e46:	e006      	b.n	8024e56 <GAP_Set_Own_Address+0xae>
 8024e48:	2002      	movs	r0, #2
 8024e4a:	f04f 0800 	mov.w	r8, #0
 8024e4e:	7038      	strb	r0, [r7, #0]
 8024e50:	e001      	b.n	8024e56 <GAP_Set_Own_Address+0xae>
 8024e52:	f889 51c3 	strb.w	r5, [r9, #451]	@ 0x1c3
 8024e56:	2000      	movs	r0, #0
 8024e58:	f889 8036 	strb.w	r8, [r9, #54]	@ 0x36
 8024e5c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08024e60 <__arm_cp.4_0>:
 8024e60:	2000a014 	.word	0x2000a014

08024e64 <GAP_Stop_Scan>:
 8024e64:	b580      	push	{r7, lr}
 8024e66:	2000      	movs	r0, #0
 8024e68:	2100      	movs	r1, #0
 8024e6a:	f7ff f807 	bl	8023e7c <HCI_LE_SET_SCAN_ENABLE>
 8024e6e:	4904      	ldr	r1, [pc, #16]	@ (8024e80 <__arm_cp.9_0>)
 8024e70:	f891 21a2 	ldrb.w	r2, [r1, #418]	@ 0x1a2
 8024e74:	f002 024c 	and.w	r2, r2, #76	@ 0x4c
 8024e78:	f881 21a2 	strb.w	r2, [r1, #418]	@ 0x1a2
 8024e7c:	bd80      	pop	{r7, pc}
 8024e7e:	bf00      	nop

08024e80 <__arm_cp.9_0>:
 8024e80:	2000a014 	.word	0x2000a014

08024e84 <GAP_Scan_Disc_Proc_Timeout_Cb>:
 8024e84:	b510      	push	{r4, lr}
 8024e86:	4808      	ldr	r0, [pc, #32]	@ (8024ea8 <__arm_cp.13_0>)
 8024e88:	f890 01a2 	ldrb.w	r0, [r0, #418]	@ 0x1a2
 8024e8c:	f010 0403 	ands.w	r4, r0, #3
 8024e90:	bf08      	it	eq
 8024e92:	bd10      	popeq	{r4, pc}
 8024e94:	f7ff ffe6 	bl	8024e64 <GAP_Stop_Scan>
 8024e98:	2001      	movs	r0, #1
 8024e9a:	4621      	mov	r1, r4
 8024e9c:	2200      	movs	r2, #0
 8024e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ea2:	f7fe bc9b 	b.w	80237dc <EVT_aci_gap_proc_complete>
 8024ea6:	bf00      	nop

08024ea8 <__arm_cp.13_0>:
 8024ea8:	2000a014 	.word	0x2000a014

08024eac <GAP_Proc_Connection_Complete_Handler>:
 8024eac:	4807      	ldr	r0, [pc, #28]	@ (8024ecc <__arm_cp.14_0>)
 8024eae:	f890 21a2 	ldrb.w	r2, [r0, #418]	@ 0x1a2
 8024eb2:	f012 014c 	ands.w	r1, r2, #76	@ 0x4c
 8024eb6:	bf08      	it	eq
 8024eb8:	4770      	bxeq	lr
 8024eba:	f002 02b3 	and.w	r2, r2, #179	@ 0xb3
 8024ebe:	f880 21a2 	strb.w	r2, [r0, #418]	@ 0x1a2
 8024ec2:	2000      	movs	r0, #0
 8024ec4:	2200      	movs	r2, #0
 8024ec6:	f7fe bc89 	b.w	80237dc <EVT_aci_gap_proc_complete>
 8024eca:	bf00      	nop

08024ecc <__arm_cp.14_0>:
 8024ecc:	2000a014 	.word	0x2000a014

08024ed0 <GATT_MemAlloc>:
 8024ed0:	b5b0      	push	{r4, r5, r7, lr}
 8024ed2:	4604      	mov	r4, r0
 8024ed4:	4809      	ldr	r0, [pc, #36]	@ (8024efc <__arm_cp.0_0>)
 8024ed6:	4d0a      	ldr	r5, [pc, #40]	@ (8024f00 <__arm_cp.0_1>)
 8024ed8:	2224      	movs	r2, #36	@ 0x24
 8024eda:	7d81      	ldrb	r1, [r0, #22]
 8024edc:	4620      	mov	r0, r4
 8024ede:	f885 11cd 	strb.w	r1, [r5, #461]	@ 0x1cd
 8024ee2:	f006 fc96 	bl	802b812 <Mem_Assign>
 8024ee6:	f8c5 01f0 	str.w	r0, [r5, #496]	@ 0x1f0
 8024eea:	4620      	mov	r0, r4
 8024eec:	2101      	movs	r1, #1
 8024eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8024ef2:	f006 fc8e 	bl	802b812 <Mem_Assign>
 8024ef6:	f8c5 0224 	str.w	r0, [r5, #548]	@ 0x224
 8024efa:	bdb0      	pop	{r4, r5, r7, pc}

08024efc <__arm_cp.0_0>:
 8024efc:	20009fec 	.word	0x20009fec

08024f00 <__arm_cp.0_1>:
 8024f00:	2000a014 	.word	0x2000a014

08024f04 <GATT_Init>:
 8024f04:	480d      	ldr	r0, [pc, #52]	@ (8024f3c <__arm_cp.1_0>)
 8024f06:	2317      	movs	r3, #23
 8024f08:	f8d0 21f0 	ldr.w	r2, [r0, #496]	@ 0x1f0
 8024f0c:	f890 11cd 	ldrb.w	r1, [r0, #461]	@ 0x1cd
 8024f10:	3202      	adds	r2, #2
 8024f12:	b119      	cbz	r1, 8024f1c <GATT_Init+0x18>
 8024f14:	f822 3b24 	strh.w	r3, [r2], #36
 8024f18:	3901      	subs	r1, #1
 8024f1a:	e7fa      	b.n	8024f12 <GATT_Init+0xe>
 8024f1c:	4908      	ldr	r1, [pc, #32]	@ (8024f40 <__arm_cp.1_1>)
 8024f1e:	8b49      	ldrh	r1, [r1, #26]
 8024f20:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8024f24:	f8a0 11ce 	strh.w	r1, [r0, #462]	@ 0x1ce
 8024f28:	d902      	bls.n	8024f30 <GATT_Init+0x2c>
 8024f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8024f2e:	e002      	b.n	8024f36 <GATT_Init+0x32>
 8024f30:	2916      	cmp	r1, #22
 8024f32:	d802      	bhi.n	8024f3a <GATT_Init+0x36>
 8024f34:	2117      	movs	r1, #23
 8024f36:	f8a0 11ce 	strh.w	r1, [r0, #462]	@ 0x1ce
 8024f3a:	4770      	bx	lr

08024f3c <__arm_cp.1_0>:
 8024f3c:	2000a014 	.word	0x2000a014

08024f40 <__arm_cp.1_1>:
 8024f40:	20009fec 	.word	0x20009fec

08024f44 <GATT_L2cap_Data_Handler>:
 8024f44:	b570      	push	{r4, r5, r6, lr}
 8024f46:	4604      	mov	r4, r0
 8024f48:	f000 f8b2 	bl	80250b0 <GATT_Get_Packet_Bearer>
 8024f4c:	4605      	mov	r5, r0
 8024f4e:	79a0      	ldrb	r0, [r4, #6]
 8024f50:	b180      	cbz	r0, 8024f74 <GATT_L2cap_Data_Handler+0x30>
 8024f52:	0740      	lsls	r0, r0, #29
 8024f54:	bf48      	it	mi
 8024f56:	2500      	movmi	r5, #0
 8024f58:	6a20      	ldr	r0, [r4, #32]
 8024f5a:	7900      	ldrb	r0, [r0, #4]
 8024f5c:	281b      	cmp	r0, #27
 8024f5e:	d021      	beq.n	8024fa4 <GATT_L2cap_Data_Handler+0x60>
 8024f60:	281d      	cmp	r0, #29
 8024f62:	d126      	bne.n	8024fb2 <GATT_L2cap_Data_Handler+0x6e>
 8024f64:	b11d      	cbz	r5, 8024f6e <GATT_L2cap_Data_Handler+0x2a>
 8024f66:	4628      	mov	r0, r5
 8024f68:	2101      	movs	r1, #1
 8024f6a:	f000 f8c3 	bl	80250f4 <GATT_Start_Timer>
 8024f6e:	2001      	movs	r0, #1
 8024f70:	2102      	movs	r1, #2
 8024f72:	e019      	b.n	8024fa8 <GATT_L2cap_Data_Handler+0x64>
 8024f74:	2d00      	cmp	r5, #0
 8024f76:	d04d      	beq.n	8025014 <GATT_L2cap_Data_Handler+0xd0>
 8024f78:	88a0      	ldrh	r0, [r4, #4]
 8024f7a:	1f01      	subs	r1, r0, #4
 8024f7c:	0408      	lsls	r0, r1, #16
 8024f7e:	d049      	beq.n	8025014 <GATT_L2cap_Data_Handler+0xd0>
 8024f80:	6868      	ldr	r0, [r5, #4]
 8024f82:	0742      	lsls	r2, r0, #29
 8024f84:	d41d      	bmi.n	8024fc2 <GATT_L2cap_Data_Handler+0x7e>
 8024f86:	6a22      	ldr	r2, [r4, #32]
 8024f88:	7916      	ldrb	r6, [r2, #4]
 8024f8a:	0672      	lsls	r2, r6, #25
 8024f8c:	d433      	bmi.n	8024ff6 <GATT_L2cap_Data_Handler+0xb2>
 8024f8e:	2e1b      	cmp	r6, #27
 8024f90:	bf18      	it	ne
 8024f92:	2e1d      	cmpne	r6, #29
 8024f94:	d155      	bne.n	8025042 <GATT_L2cap_Data_Handler+0xfe>
 8024f96:	b288      	uxth	r0, r1
 8024f98:	2803      	cmp	r0, #3
 8024f9a:	d33b      	bcc.n	8025014 <GATT_L2cap_Data_Handler+0xd0>
 8024f9c:	4843      	ldr	r0, [pc, #268]	@ (80250ac <__arm_cp.2_0>)
 8024f9e:	f500 70fe 	add.w	r0, r0, #508	@ 0x1fc
 8024fa2:	e033      	b.n	802500c <GATT_L2cap_Data_Handler+0xc8>
 8024fa4:	2001      	movs	r0, #1
 8024fa6:	2101      	movs	r1, #1
 8024fa8:	4622      	mov	r2, r4
 8024faa:	f001 faa7 	bl	80264fc <GATT_Send_Notif_Or_Ind>
 8024fae:	bb98      	cbnz	r0, 8025018 <GATT_L2cap_Data_Handler+0xd4>
 8024fb0:	e011      	b.n	8024fd6 <GATT_L2cap_Data_Handler+0x92>
 8024fb2:	b185      	cbz	r5, 8024fd6 <GATT_L2cap_Data_Handler+0x92>
 8024fb4:	07c1      	lsls	r1, r0, #31
 8024fb6:	d106      	bne.n	8024fc6 <GATT_L2cap_Data_Handler+0x82>
 8024fb8:	281e      	cmp	r0, #30
 8024fba:	d130      	bne.n	802501e <GATT_L2cap_Data_Handler+0xda>
 8024fbc:	4628      	mov	r0, r5
 8024fbe:	2103      	movs	r1, #3
 8024fc0:	e007      	b.n	8024fd2 <GATT_L2cap_Data_Handler+0x8e>
 8024fc2:	2495      	movs	r4, #149	@ 0x95
 8024fc4:	e029      	b.n	802501a <GATT_L2cap_Data_Handler+0xd6>
 8024fc6:	6868      	ldr	r0, [r5, #4]
 8024fc8:	2100      	movs	r1, #0
 8024fca:	f020 0010 	bic.w	r0, r0, #16
 8024fce:	6068      	str	r0, [r5, #4]
 8024fd0:	4628      	mov	r0, r5
 8024fd2:	f000 f871 	bl	80250b8 <GATT_Stop_Timer>
 8024fd6:	f000 fb73 	bl	80256c0 <OUTLINED_FUNCTION_1>
 8024fda:	4834      	ldr	r0, [pc, #208]	@ (80250ac <__arm_cp.2_0>)
 8024fdc:	f990 01cc 	ldrsb.w	r0, [r0, #460]	@ 0x1cc
 8024fe0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024fe4:	dc18      	bgt.n	8025018 <GATT_L2cap_Data_Handler+0xd4>
 8024fe6:	4831      	ldr	r0, [pc, #196]	@ (80250ac <__arm_cp.2_0>)
 8024fe8:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8024fec:	f001 01fd 	and.w	r1, r1, #253	@ 0xfd
 8024ff0:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8024ff4:	e010      	b.n	8025018 <GATT_L2cap_Data_Handler+0xd4>
 8024ff6:	8868      	ldrh	r0, [r5, #2]
 8024ff8:	b289      	uxth	r1, r1
 8024ffa:	4281      	cmp	r1, r0
 8024ffc:	d80a      	bhi.n	8025014 <GATT_L2cap_Data_Handler+0xd0>
 8024ffe:	f046 0080 	orr.w	r0, r6, #128	@ 0x80
 8025002:	28d2      	cmp	r0, #210	@ 0xd2
 8025004:	d106      	bne.n	8025014 <GATT_L2cap_Data_Handler+0xd0>
 8025006:	4829      	ldr	r0, [pc, #164]	@ (80250ac <__arm_cp.2_0>)
 8025008:	f500 70fa 	add.w	r0, r0, #500	@ 0x1f4
 802500c:	4621      	mov	r1, r4
 802500e:	f003 fcd5 	bl	80289bc <ACL_List_Insert_Tail>
 8025012:	e7e8      	b.n	8024fe6 <GATT_L2cap_Data_Handler+0xa2>
 8025014:	f000 fb54 	bl	80256c0 <OUTLINED_FUNCTION_1>
 8025018:	2400      	movs	r4, #0
 802501a:	4620      	mov	r0, r4
 802501c:	bd70      	pop	{r4, r5, r6, pc}
 802501e:	6869      	ldr	r1, [r5, #4]
 8025020:	f021 0040 	bic.w	r0, r1, #64	@ 0x40
 8025024:	0509      	lsls	r1, r1, #20
 8025026:	6068      	str	r0, [r5, #4]
 8025028:	d5d5      	bpl.n	8024fd6 <GATT_L2cap_Data_Handler+0x92>
 802502a:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 802502e:	2102      	movs	r1, #2
 8025030:	6068      	str	r0, [r5, #4]
 8025032:	4628      	mov	r0, r5
 8025034:	f000 f85e 	bl	80250f4 <GATT_Start_Timer>
 8025038:	6868      	ldr	r0, [r5, #4]
 802503a:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 802503e:	6068      	str	r0, [r5, #4]
 8025040:	e7c9      	b.n	8024fd6 <GATT_L2cap_Data_Handler+0x92>
 8025042:	2e1e      	cmp	r6, #30
 8025044:	d111      	bne.n	802506a <GATT_L2cap_Data_Handler+0x126>
 8025046:	f000 fb3b 	bl	80256c0 <OUTLINED_FUNCTION_1>
 802504a:	6868      	ldr	r0, [r5, #4]
 802504c:	0701      	lsls	r1, r0, #28
 802504e:	d5e3      	bpl.n	8025018 <GATT_L2cap_Data_Handler+0xd4>
 8025050:	f020 0008 	bic.w	r0, r0, #8
 8025054:	2101      	movs	r1, #1
 8025056:	6068      	str	r0, [r5, #4]
 8025058:	4628      	mov	r0, r5
 802505a:	f000 f82d 	bl	80250b8 <GATT_Stop_Timer>
 802505e:	8829      	ldrh	r1, [r5, #0]
 8025060:	2000      	movs	r0, #0
 8025062:	2400      	movs	r4, #0
 8025064:	f7fe fc2a 	bl	80238bc <EVT_aci_gatt_server_confirmation>
 8025068:	e7d7      	b.n	802501a <GATT_L2cap_Data_Handler+0xd6>
 802506a:	07f1      	lsls	r1, r6, #31
 802506c:	bf18      	it	ne
 802506e:	2e15      	cmpne	r6, #21
 8025070:	d109      	bne.n	8025086 <GATT_L2cap_Data_Handler+0x142>
 8025072:	06c1      	lsls	r1, r0, #27
 8025074:	d410      	bmi.n	8025098 <GATT_L2cap_Data_Handler+0x154>
 8025076:	f040 0010 	orr.w	r0, r0, #16
 802507a:	2100      	movs	r1, #0
 802507c:	6068      	str	r0, [r5, #4]
 802507e:	4628      	mov	r0, r5
 8025080:	f000 f838 	bl	80250f4 <GATT_Start_Timer>
 8025084:	e78a      	b.n	8024f9c <GATT_L2cap_Data_Handler+0x58>
 8025086:	2e19      	cmp	r6, #25
 8025088:	d8f3      	bhi.n	8025072 <GATT_L2cap_Data_Handler+0x12e>
 802508a:	0541      	lsls	r1, r0, #21
 802508c:	d40c      	bmi.n	80250a8 <GATT_L2cap_Data_Handler+0x164>
 802508e:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8025092:	622c      	str	r4, [r5, #32]
 8025094:	6068      	str	r0, [r5, #4]
 8025096:	e7a6      	b.n	8024fe6 <GATT_L2cap_Data_Handler+0xa2>
 8025098:	f000 fb12 	bl	80256c0 <OUTLINED_FUNCTION_1>
 802509c:	8828      	ldrh	r0, [r5, #0]
 802509e:	4631      	mov	r1, r6
 80250a0:	2201      	movs	r2, #1
 80250a2:	f000 f81b 	bl	80250dc <GATT_ReportUnexpectedMsg>
 80250a6:	e7b7      	b.n	8025018 <GATT_L2cap_Data_Handler+0xd4>
 80250a8:	2491      	movs	r4, #145	@ 0x91
 80250aa:	e7b6      	b.n	802501a <GATT_L2cap_Data_Handler+0xd6>

080250ac <__arm_cp.2_0>:
 80250ac:	2000a014 	.word	0x2000a014

080250b0 <GATT_Get_Packet_Bearer>:
 80250b0:	8900      	ldrh	r0, [r0, #8]
 80250b2:	f000 bac5 	b.w	8025640 <GATT_Get_Root_Bearer>
	...

080250b8 <GATT_Stop_Timer>:
 80250b8:	4a06      	ldr	r2, [pc, #24]	@ (80250d4 <__arm_cp.4_0>)
 80250ba:	f8d2 21f0 	ldr.w	r2, [r2, #496]	@ 0x1f0
 80250be:	1a80      	subs	r0, r0, r2
 80250c0:	2224      	movs	r2, #36	@ 0x24
 80250c2:	fb90 f0f2 	sdiv	r0, r0, r2
 80250c6:	b2c0      	uxtb	r0, r0
 80250c8:	ea41 0080 	orr.w	r0, r1, r0, lsl #2
 80250cc:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 80250d0:	f7dd b946 	b.w	8002360 <BLEPLAT_TimerStop>

080250d4 <__arm_cp.4_0>:
 80250d4:	2000a014 	.word	0x2000a014

080250d8 <GATT_Evt_Handle>:
 80250d8:	8800      	ldrh	r0, [r0, #0]
 80250da:	4770      	bx	lr

080250dc <GATT_ReportUnexpectedMsg>:
 80250dc:	b5e0      	push	{r5, r6, r7, lr}
 80250de:	0612      	lsls	r2, r2, #24
 80250e0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80250e4:	4408      	add	r0, r1
 80250e6:	2104      	movs	r1, #4
 80250e8:	9001      	str	r0, [sp, #4]
 80250ea:	aa01      	add	r2, sp, #4
 80250ec:	2002      	movs	r0, #2
 80250ee:	f7fe fb1d 	bl	802372c <EVT_aci_hal_fw_error>
 80250f2:	bd8c      	pop	{r2, r3, r7, pc}

080250f4 <GATT_Start_Timer>:
 80250f4:	4a07      	ldr	r2, [pc, #28]	@ (8025114 <__arm_cp.7_0>)
 80250f6:	f8d2 21f0 	ldr.w	r2, [r2, #496]	@ 0x1f0
 80250fa:	1a80      	subs	r0, r0, r2
 80250fc:	2224      	movs	r2, #36	@ 0x24
 80250fe:	fb90 f0f2 	sdiv	r0, r0, r2
 8025102:	b2c0      	uxtb	r0, r0
 8025104:	ea41 0080 	orr.w	r0, r1, r0, lsl #2
 8025108:	f247 5130 	movw	r1, #30000	@ 0x7530
 802510c:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 8025110:	f7dd b924 	b.w	800235c <BLEPLAT_TimerStart>

08025114 <__arm_cp.7_0>:
 8025114:	2000a014 	.word	0x2000a014

08025118 <GATT_Process>:
 8025118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802511c:	b085      	sub	sp, #20
 802511e:	f8df a398 	ldr.w	sl, [pc, #920]	@ 80254b8 <__arm_cp.8_0>
 8025122:	f89a 0039 	ldrb.w	r0, [sl, #57]	@ 0x39
 8025126:	f89a 11cc 	ldrb.w	r1, [sl, #460]	@ 0x1cc
 802512a:	f040 0002 	orr.w	r0, r0, #2
 802512e:	f88a 0039 	strb.w	r0, [sl, #57]	@ 0x39
 8025132:	07c8      	lsls	r0, r1, #31
 8025134:	f000 81bc 	beq.w	80254b0 <GATT_Process+0x398>
 8025138:	2500      	movs	r5, #0
 802513a:	2600      	movs	r6, #0
 802513c:	f89a 01cd 	ldrb.w	r0, [sl, #461]	@ 0x1cd
 8025140:	4286      	cmp	r6, r0
 8025142:	d21c      	bcs.n	802517e <GATT_Process+0x66>
 8025144:	f8da 01f0 	ldr.w	r0, [sl, #496]	@ 0x1f0
 8025148:	5b41      	ldrh	r1, [r0, r5]
 802514a:	b1a9      	cbz	r1, 8025178 <GATT_Process+0x60>
 802514c:	1944      	adds	r4, r0, r5
 802514e:	6860      	ldr	r0, [r4, #4]
 8025150:	0242      	lsls	r2, r0, #9
 8025152:	d40e      	bmi.n	8025172 <GATT_Process+0x5a>
 8025154:	0282      	lsls	r2, r0, #10
 8025156:	d409      	bmi.n	802516c <GATT_Process+0x54>
 8025158:	0740      	lsls	r0, r0, #29
 802515a:	d50d      	bpl.n	8025178 <GATT_Process+0x60>
 802515c:	4620      	mov	r0, r4
 802515e:	f001 f995 	bl	802648c <GATT_Check_For_Service_Change>
 8025162:	6860      	ldr	r0, [r4, #4]
 8025164:	f020 0004 	bic.w	r0, r0, #4
 8025168:	6060      	str	r0, [r4, #4]
 802516a:	e005      	b.n	8025178 <GATT_Process+0x60>
 802516c:	2001      	movs	r0, #1
 802516e:	f7fe fbb7 	bl	80238e0 <EVT_aci_gatt_proc_timeout>
 8025172:	4620      	mov	r0, r4
 8025174:	f000 f9a2 	bl	80254bc <GATT_Reset_To_Closed_State>
 8025178:	3524      	adds	r5, #36	@ 0x24
 802517a:	3601      	adds	r6, #1
 802517c:	e7de      	b.n	802513c <GATT_Process+0x24>
 802517e:	f04f 0800 	mov.w	r8, #0
 8025182:	f04f 0900 	mov.w	r9, #0
 8025186:	4581      	cmp	r9, r0
 8025188:	f080 8080 	bcs.w	802528c <GATT_Process+0x174>
 802518c:	eb09 01c9 	add.w	r1, r9, r9, lsl #3
 8025190:	f8da 21f0 	ldr.w	r2, [sl, #496]	@ 0x1f0
 8025194:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8025198:	2b00      	cmp	r3, #0
 802519a:	d074      	beq.n	8025286 <GATT_Process+0x16e>
 802519c:	eb02 0481 	add.w	r4, r2, r1, lsl #2
 80251a0:	4627      	mov	r7, r4
 80251a2:	f857 0f20 	ldr.w	r0, [r7, #32]!
 80251a6:	b3b8      	cbz	r0, 8025218 <GATT_Process+0x100>
 80251a8:	4626      	mov	r6, r4
 80251aa:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80251ae:	05ca      	lsls	r2, r1, #23
 80251b0:	6a02      	ldr	r2, [r0, #32]
 80251b2:	7915      	ldrb	r5, [r2, #4]
 80251b4:	d523      	bpl.n	80251fe <GATT_Process+0xe6>
 80251b6:	054b      	lsls	r3, r1, #21
 80251b8:	d521      	bpl.n	80251fe <GATT_Process+0xe6>
 80251ba:	f894 c01a 	ldrb.w	ip, [r4, #26]
 80251be:	4565      	cmp	r5, ip
 80251c0:	d114      	bne.n	80251ec <GATT_Process+0xd4>
 80251c2:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 80251c6:	2102      	movs	r1, #2
 80251c8:	6030      	str	r0, [r6, #0]
 80251ca:	4620      	mov	r0, r4
 80251cc:	f7ff ff74 	bl	80250b8 <GATT_Stop_Timer>
 80251d0:	6830      	ldr	r0, [r6, #0]
 80251d2:	69e1      	ldr	r1, [r4, #28]
 80251d4:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80251d8:	6030      	str	r0, [r6, #0]
 80251da:	4620      	mov	r0, r4
 80251dc:	4788      	blx	r1
 80251de:	2895      	cmp	r0, #149	@ 0x95
 80251e0:	bf02      	ittt	eq
 80251e2:	6830      	ldreq	r0, [r6, #0]
 80251e4:	f440 6080 	orreq.w	r0, r0, #1024	@ 0x400
 80251e8:	6030      	streq	r0, [r6, #0]
 80251ea:	e015      	b.n	8025218 <GATT_Process+0x100>
 80251ec:	2d01      	cmp	r5, #1
 80251ee:	d106      	bne.n	80251fe <GATT_Process+0xe6>
 80251f0:	8883      	ldrh	r3, [r0, #4]
 80251f2:	2b06      	cmp	r3, #6
 80251f4:	d303      	bcc.n	80251fe <GATT_Process+0xe6>
 80251f6:	7952      	ldrb	r2, [r2, #5]
 80251f8:	3201      	adds	r2, #1
 80251fa:	4562      	cmp	r2, ip
 80251fc:	d0e1      	beq.n	80251c2 <GATT_Process+0xaa>
 80251fe:	f003 faa5 	bl	802874c <ACL_Release>
 8025202:	6830      	ldr	r0, [r6, #0]
 8025204:	4629      	mov	r1, r5
 8025206:	2200      	movs	r2, #0
 8025208:	f8c7 8000 	str.w	r8, [r7]
 802520c:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 8025210:	6030      	str	r0, [r6, #0]
 8025212:	8820      	ldrh	r0, [r4, #0]
 8025214:	f7ff ff62 	bl	80250dc <GATT_ReportUnexpectedMsg>
 8025218:	f8da 71fc 	ldr.w	r7, [sl, #508]	@ 0x1fc
 802521c:	1d26      	adds	r6, r4, #4
 802521e:	b387      	cbz	r7, 8025282 <GATT_Process+0x16a>
 8025220:	8938      	ldrh	r0, [r7, #8]
 8025222:	8821      	ldrh	r1, [r4, #0]
 8025224:	463d      	mov	r5, r7
 8025226:	683f      	ldr	r7, [r7, #0]
 8025228:	4288      	cmp	r0, r1
 802522a:	d1f8      	bne.n	802521e <GATT_Process+0x106>
 802522c:	6a29      	ldr	r1, [r5, #32]
 802522e:	7909      	ldrb	r1, [r1, #4]
 8025230:	291d      	cmp	r1, #29
 8025232:	d112      	bne.n	802525a <GATT_Process+0x142>
 8025234:	7871      	ldrb	r1, [r6, #1]
 8025236:	06c9      	lsls	r1, r1, #27
 8025238:	d416      	bmi.n	8025268 <GATT_Process+0x150>
 802523a:	4628      	mov	r0, r5
 802523c:	f7fe fbe8 	bl	8023a10 <EVT_GATT_Indication>
 8025240:	8821      	ldrh	r1, [r4, #0]
 8025242:	2800      	cmp	r0, #0
 8025244:	8129      	strh	r1, [r5, #8]
 8025246:	d1ea      	bne.n	802521e <GATT_Process+0x106>
 8025248:	6830      	ldr	r0, [r6, #0]
 802524a:	2103      	movs	r1, #3
 802524c:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8025250:	6030      	str	r0, [r6, #0]
 8025252:	4620      	mov	r0, r4
 8025254:	f7ff ff4e 	bl	80250f4 <GATT_Start_Timer>
 8025258:	e00a      	b.n	8025270 <GATT_Process+0x158>
 802525a:	4620      	mov	r0, r4
 802525c:	4629      	mov	r1, r5
 802525e:	f000 f93b 	bl	80254d8 <GATT_Handle_Notif>
 8025262:	2800      	cmp	r0, #0
 8025264:	d1db      	bne.n	802521e <GATT_Process+0x106>
 8025266:	e003      	b.n	8025270 <GATT_Process+0x158>
 8025268:	211d      	movs	r1, #29
 802526a:	2202      	movs	r2, #2
 802526c:	f7ff ff36 	bl	80250dc <GATT_ReportUnexpectedMsg>
 8025270:	f50a 70fe 	add.w	r0, sl, #508	@ 0x1fc
 8025274:	4629      	mov	r1, r5
 8025276:	f003 fbb1 	bl	80289dc <ACL_List_Remove>
 802527a:	4628      	mov	r0, r5
 802527c:	f003 fa66 	bl	802874c <ACL_Release>
 8025280:	e7cd      	b.n	802521e <GATT_Process+0x106>
 8025282:	f89a 01cd 	ldrb.w	r0, [sl, #461]	@ 0x1cd
 8025286:	f109 0901 	add.w	r9, r9, #1
 802528a:	e77c      	b.n	8025186 <GATT_Process+0x6e>
 802528c:	f8da b1fc 	ldr.w	fp, [sl, #508]	@ 0x1fc
 8025290:	f50a 78fe 	add.w	r8, sl, #508	@ 0x1fc
 8025294:	f1bb 0f00 	cmp.w	fp, #0
 8025298:	f000 809d 	beq.w	80253d6 <GATT_Process+0x2be>
 802529c:	465d      	mov	r5, fp
 802529e:	f8db b000 	ldr.w	fp, [fp]
 80252a2:	6a28      	ldr	r0, [r5, #32]
 80252a4:	7904      	ldrb	r4, [r0, #4]
 80252a6:	4628      	mov	r0, r5
 80252a8:	f7ff ff02 	bl	80250b0 <GATT_Get_Packet_Bearer>
 80252ac:	b1c0      	cbz	r0, 80252e0 <GATT_Process+0x1c8>
 80252ae:	211c      	movs	r1, #28
 80252b0:	4607      	mov	r7, r0
 80252b2:	f000 f9df 	bl	8025674 <GATT_New_PDU>
 80252b6:	2800      	cmp	r0, #0
 80252b8:	f000 808d 	beq.w	80253d6 <GATT_Process+0x2be>
 80252bc:	88a9      	ldrh	r1, [r5, #4]
 80252be:	4606      	mov	r6, r0
 80252c0:	8878      	ldrh	r0, [r7, #2]
 80252c2:	3904      	subs	r1, #4
 80252c4:	4281      	cmp	r1, r0
 80252c6:	dd11      	ble.n	80252ec <GATT_Process+0x1d4>
 80252c8:	2004      	movs	r0, #4
 80252ca:	e023      	b.n	8025314 <GATT_Process+0x1fc>
 80252cc:	6878      	ldr	r0, [r7, #4]
 80252ce:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80252d2:	6078      	str	r0, [r7, #4]
 80252d4:	4630      	mov	r0, r6
 80252d6:	f000 f9d5 	bl	8025684 <GATT_Send_Packet>
 80252da:	f1b9 0f00 	cmp.w	r9, #0
 80252de:	d1d9      	bne.n	8025294 <GATT_Process+0x17c>
 80252e0:	4640      	mov	r0, r8
 80252e2:	4629      	mov	r1, r5
 80252e4:	f003 fb7a 	bl	80289dc <ACL_List_Remove>
 80252e8:	462e      	mov	r6, r5
 80252ea:	e069      	b.n	80253c0 <GATT_Process+0x2a8>
 80252ec:	1ea1      	subs	r1, r4, #2
 80252ee:	2006      	movs	r0, #6
 80252f0:	291b      	cmp	r1, #27
 80252f2:	d80f      	bhi.n	8025314 <GATT_Process+0x1fc>
 80252f4:	e8df f001 	tbb	[pc, r1]
 80252f8:	0e1b0e16 	.word	0x0e1b0e16
 80252fc:	0e250e20 	.word	0x0e250e20
 8025300:	0e350e2d 	.word	0x0e350e2d
 8025304:	0e450e3d 	.word	0x0e450e3d
 8025308:	0e0e0e4a 	.word	0x0e0e0e4a
 802530c:	0e5a0e52 	.word	0x0e5a0e52
 8025310:	640e0e0e 	.word	0x640e0e0e
 8025314:	4621      	mov	r1, r4
 8025316:	2200      	movs	r2, #0
 8025318:	4633      	mov	r3, r6
 802531a:	f04f 0900 	mov.w	r9, #0
 802531e:	f001 fa69 	bl	80267f4 <ATT_Build_Error_Rsp>
 8025322:	e7d3      	b.n	80252cc <GATT_Process+0x1b4>
 8025324:	f000 f9c8 	bl	80256b8 <OUTLINED_FUNCTION_0>
 8025328:	f002 fa1c 	bl	8027764 <ATT_Build_Exchg_Mtu_Rsp>
 802532c:	e042      	b.n	80253b4 <GATT_Process+0x29c>
 802532e:	f000 f9c3 	bl	80256b8 <OUTLINED_FUNCTION_0>
 8025332:	f002 f945 	bl	80275c0 <ATT_Build_Find_Info_Rsp>
 8025336:	e03d      	b.n	80253b4 <GATT_Process+0x29c>
 8025338:	f000 f9be 	bl	80256b8 <OUTLINED_FUNCTION_0>
 802533c:	f001 f968 	bl	8026610 <ATT_Build_Find_By_Type_Val_Rsp>
 8025340:	e038      	b.n	80253b4 <GATT_Process+0x29c>
 8025342:	79b8      	ldrb	r0, [r7, #6]
 8025344:	0700      	lsls	r0, r0, #28
 8025346:	d43b      	bmi.n	80253c0 <GATT_Process+0x2a8>
 8025348:	f000 f9b6 	bl	80256b8 <OUTLINED_FUNCTION_0>
 802534c:	f001 fae2 	bl	8026914 <ATT_Build_Read_By_Type_Rsp>
 8025350:	e030      	b.n	80253b4 <GATT_Process+0x29c>
 8025352:	79b8      	ldrb	r0, [r7, #6]
 8025354:	0700      	lsls	r0, r0, #28
 8025356:	d433      	bmi.n	80253c0 <GATT_Process+0x2a8>
 8025358:	f000 f9ae 	bl	80256b8 <OUTLINED_FUNCTION_0>
 802535c:	f001 fc76 	bl	8026c4c <ATT_Build_Read_Rsp>
 8025360:	e028      	b.n	80253b4 <GATT_Process+0x29c>
 8025362:	79b8      	ldrb	r0, [r7, #6]
 8025364:	0700      	lsls	r0, r0, #28
 8025366:	d42b      	bmi.n	80253c0 <GATT_Process+0x2a8>
 8025368:	f000 f9a6 	bl	80256b8 <OUTLINED_FUNCTION_0>
 802536c:	f001 fceb 	bl	8026d46 <ATT_Build_Read_Blob_Rsp>
 8025370:	e020      	b.n	80253b4 <GATT_Process+0x29c>
 8025372:	79b8      	ldrb	r0, [r7, #6]
 8025374:	0700      	lsls	r0, r0, #28
 8025376:	d423      	bmi.n	80253c0 <GATT_Process+0x2a8>
 8025378:	f000 f99e 	bl	80256b8 <OUTLINED_FUNCTION_0>
 802537c:	f001 fd58 	bl	8026e30 <ATT_Build_Read_Multi_Rsp>
 8025380:	e018      	b.n	80253b4 <GATT_Process+0x29c>
 8025382:	f000 f999 	bl	80256b8 <OUTLINED_FUNCTION_0>
 8025386:	f001 fdf7 	bl	8026f78 <ATT_Build_Read_By_Grp_Type_Rsp>
 802538a:	e013      	b.n	80253b4 <GATT_Process+0x29c>
 802538c:	79b8      	ldrb	r0, [r7, #6]
 802538e:	0780      	lsls	r0, r0, #30
 8025390:	d416      	bmi.n	80253c0 <GATT_Process+0x2a8>
 8025392:	f000 f991 	bl	80256b8 <OUTLINED_FUNCTION_0>
 8025396:	f001 fecb 	bl	8027130 <ATT_Build_Write_Rsp>
 802539a:	e00b      	b.n	80253b4 <GATT_Process+0x29c>
 802539c:	79b8      	ldrb	r0, [r7, #6]
 802539e:	0780      	lsls	r0, r0, #30
 80253a0:	d40e      	bmi.n	80253c0 <GATT_Process+0x2a8>
 80253a2:	f000 f989 	bl	80256b8 <OUTLINED_FUNCTION_0>
 80253a6:	f001 ff65 	bl	8027274 <ATT_Build_Prepare_Write_Rsp>
 80253aa:	e003      	b.n	80253b4 <GATT_Process+0x29c>
 80253ac:	f000 f984 	bl	80256b8 <OUTLINED_FUNCTION_0>
 80253b0:	f001 ffda 	bl	8027368 <ATT_Build_Exec_Write_Rsp>
 80253b4:	4681      	mov	r9, r0
 80253b6:	280c      	cmp	r0, #12
 80253b8:	bf18      	it	ne
 80253ba:	f1b9 0f69 	cmpne.w	r9, #105	@ 0x69
 80253be:	d103      	bne.n	80253c8 <GATT_Process+0x2b0>
 80253c0:	4630      	mov	r0, r6
 80253c2:	f003 f9c3 	bl	802874c <ACL_Release>
 80253c6:	e765      	b.n	8025294 <GATT_Process+0x17c>
 80253c8:	f1b9 0f95 	cmp.w	r9, #149	@ 0x95
 80253cc:	f47f af7e 	bne.w	80252cc <GATT_Process+0x1b4>
 80253d0:	4630      	mov	r0, r6
 80253d2:	f003 f9bb 	bl	802874c <ACL_Release>
 80253d6:	f8da 71f4 	ldr.w	r7, [sl, #500]	@ 0x1f4
 80253da:	f50a 74fa 	add.w	r4, sl, #500	@ 0x1f4
 80253de:	b1ff      	cbz	r7, 8025420 <GATT_Process+0x308>
 80253e0:	463d      	mov	r5, r7
 80253e2:	683f      	ldr	r7, [r7, #0]
 80253e4:	4628      	mov	r0, r5
 80253e6:	f7ff fe63 	bl	80250b0 <GATT_Get_Packet_Bearer>
 80253ea:	b188      	cbz	r0, 8025410 <GATT_Process+0x2f8>
 80253ec:	4606      	mov	r6, r0
 80253ee:	6a28      	ldr	r0, [r5, #32]
 80253f0:	7900      	ldrb	r0, [r0, #4]
 80253f2:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80253f6:	28d2      	cmp	r0, #210	@ 0xd2
 80253f8:	d107      	bne.n	802540a <GATT_Process+0x2f2>
 80253fa:	79b0      	ldrb	r0, [r6, #6]
 80253fc:	0740      	lsls	r0, r0, #29
 80253fe:	d404      	bmi.n	802540a <GATT_Process+0x2f2>
 8025400:	4630      	mov	r0, r6
 8025402:	4629      	mov	r1, r5
 8025404:	2201      	movs	r2, #1
 8025406:	f002 f876 	bl	80274f6 <ATT_Handle_Write_Cmd>
 802540a:	79b0      	ldrb	r0, [r6, #6]
 802540c:	0740      	lsls	r0, r0, #29
 802540e:	d4e6      	bmi.n	80253de <GATT_Process+0x2c6>
 8025410:	4620      	mov	r0, r4
 8025412:	4629      	mov	r1, r5
 8025414:	f003 fae2 	bl	80289dc <ACL_List_Remove>
 8025418:	4628      	mov	r0, r5
 802541a:	f003 f997 	bl	802874c <ACL_Release>
 802541e:	e7de      	b.n	80253de <GATT_Process+0x2c6>
 8025420:	46eb      	mov	fp, sp
 8025422:	2114      	movs	r1, #20
 8025424:	4658      	mov	r0, fp
 8025426:	f006 fa9b 	bl	802b960 <__aeabi_memclr>
 802542a:	f8da 7210 	ldr.w	r7, [sl, #528]	@ 0x210
 802542e:	f04f 0924 	mov.w	r9, #36	@ 0x24
 8025432:	f50a 7504 	add.w	r5, sl, #528	@ 0x210
 8025436:	f04f 0801 	mov.w	r8, #1
 802543a:	b307      	cbz	r7, 802547e <GATT_Process+0x366>
 802543c:	463e      	mov	r6, r7
 802543e:	683f      	ldr	r7, [r7, #0]
 8025440:	4630      	mov	r0, r6
 8025442:	f7ff fe35 	bl	80250b0 <GATT_Get_Packet_Bearer>
 8025446:	2800      	cmp	r0, #0
 8025448:	d0f7      	beq.n	802543a <GATT_Process+0x322>
 802544a:	f8da 11f0 	ldr.w	r1, [sl, #496]	@ 0x1f0
 802544e:	1a40      	subs	r0, r0, r1
 8025450:	fb90 f0f9 	sdiv	r0, r0, r9
 8025454:	b2c4      	uxtb	r4, r0
 8025456:	f81b 0004 	ldrb.w	r0, [fp, r4]
 802545a:	2800      	cmp	r0, #0
 802545c:	d1ed      	bne.n	802543a <GATT_Process+0x322>
 802545e:	4628      	mov	r0, r5
 8025460:	4631      	mov	r1, r6
 8025462:	f003 fabb 	bl	80289dc <ACL_List_Remove>
 8025466:	4630      	mov	r0, r6
 8025468:	f000 f920 	bl	80256ac <GATT_Send_Packet_Once>
 802546c:	2800      	cmp	r0, #0
 802546e:	d0e4      	beq.n	802543a <GATT_Process+0x322>
 8025470:	4628      	mov	r0, r5
 8025472:	4631      	mov	r1, r6
 8025474:	f003 faac 	bl	80289d0 <ACL_List_Insert_Head>
 8025478:	f80b 8004 	strb.w	r8, [fp, r4]
 802547c:	e7dd      	b.n	802543a <GATT_Process+0x322>
 802547e:	f99a 01cc 	ldrsb.w	r0, [sl, #460]	@ 0x1cc
 8025482:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025486:	dc13      	bgt.n	80254b0 <GATT_Process+0x398>
 8025488:	f8da 01fc 	ldr.w	r0, [sl, #508]	@ 0x1fc
 802548c:	b980      	cbnz	r0, 80254b0 <GATT_Process+0x398>
 802548e:	f8ba 01ce 	ldrh.w	r0, [sl, #462]	@ 0x1ce
 8025492:	f003 fa5d 	bl	8028950 <ACL_Tx_Pool_Size>
 8025496:	b158      	cbz	r0, 80254b0 <GATT_Process+0x398>
 8025498:	4602      	mov	r2, r0
 802549a:	2000      	movs	r0, #0
 802549c:	2100      	movs	r1, #0
 802549e:	f7fe fa09 	bl	80238b4 <EVT_aci_gatt_tx_pool_available>
 80254a2:	b928      	cbnz	r0, 80254b0 <GATT_Process+0x398>
 80254a4:	f89a 01cc 	ldrb.w	r0, [sl, #460]	@ 0x1cc
 80254a8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80254ac:	f88a 01cc 	strb.w	r0, [sl, #460]	@ 0x1cc
 80254b0:	b005      	add	sp, #20
 80254b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80254b6:	bf00      	nop

080254b8 <__arm_cp.8_0>:
 80254b8:	2000a014 	.word	0x2000a014

080254bc <GATT_Reset_To_Closed_State>:
 80254bc:	b5b0      	push	{r4, r5, r7, lr}
 80254be:	2101      	movs	r1, #1
 80254c0:	4604      	mov	r4, r0
 80254c2:	f002 fd81 	bl	8027fc8 <GATT_Store_Server_Database>
 80254c6:	4620      	mov	r0, r4
 80254c8:	8825      	ldrh	r5, [r4, #0]
 80254ca:	f000 f831 	bl	8025530 <GATT_Reset_Bearer>
 80254ce:	4628      	mov	r0, r5
 80254d0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80254d4:	f004 b863 	b.w	802959e <SMP_Forget_Device>

080254d8 <GATT_Handle_Notif>:
 80254d8:	b580      	push	{r7, lr}
 80254da:	6a0a      	ldr	r2, [r1, #32]
 80254dc:	7912      	ldrb	r2, [r2, #4]
 80254de:	2a1b      	cmp	r2, #27
 80254e0:	bf1c      	itt	ne
 80254e2:	2091      	movne	r0, #145	@ 0x91
 80254e4:	bd80      	popne	{r7, pc}
 80254e6:	8800      	ldrh	r0, [r0, #0]
 80254e8:	8108      	strh	r0, [r1, #8]
 80254ea:	4608      	mov	r0, r1
 80254ec:	f7fe faf4 	bl	8023ad8 <EVT_GATT_Notification>
 80254f0:	2000      	movs	r0, #0
 80254f2:	bd80      	pop	{r7, pc}

080254f4 <GATT_Timeout_Cb>:
 80254f4:	4907      	ldr	r1, [pc, #28]	@ (8025514 <__arm_cp.11_0>)
 80254f6:	0880      	lsrs	r0, r0, #2
 80254f8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80254fc:	f8d1 11f0 	ldr.w	r1, [r1, #496]	@ 0x1f0
 8025500:	f831 2020 	ldrh.w	r2, [r1, r0, lsl #2]
 8025504:	b12a      	cbz	r2, 8025512 <GATT_Timeout_Cb+0x1e>
 8025506:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802550a:	6841      	ldr	r1, [r0, #4]
 802550c:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8025510:	6041      	str	r1, [r0, #4]
 8025512:	4770      	bx	lr

08025514 <__arm_cp.11_0>:
 8025514:	2000a014 	.word	0x2000a014

08025518 <GATT_Bearer_Index>:
 8025518:	4904      	ldr	r1, [pc, #16]	@ (802552c <__arm_cp.12_0>)
 802551a:	f8d1 11f0 	ldr.w	r1, [r1, #496]	@ 0x1f0
 802551e:	1a40      	subs	r0, r0, r1
 8025520:	2124      	movs	r1, #36	@ 0x24
 8025522:	fb90 f0f1 	sdiv	r0, r0, r1
 8025526:	b2c0      	uxtb	r0, r0
 8025528:	4770      	bx	lr
 802552a:	bf00      	nop

0802552c <__arm_cp.12_0>:
 802552c:	2000a014 	.word	0x2000a014

08025530 <GATT_Reset_Bearer>:
 8025530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025532:	4d1d      	ldr	r5, [pc, #116]	@ (80255a8 <__arm_cp.13_0>)
 8025534:	4f1d      	ldr	r7, [pc, #116]	@ (80255ac <__arm_cp.13_1>)
 8025536:	4604      	mov	r4, r0
 8025538:	f505 71fa 	add.w	r1, r5, #500	@ 0x1f4
 802553c:	47b8      	blx	r7
 802553e:	f505 7101 	add.w	r1, r5, #516	@ 0x204
 8025542:	4620      	mov	r0, r4
 8025544:	47b8      	blx	r7
 8025546:	2600      	movs	r6, #0
 8025548:	f505 71fe 	add.w	r1, r5, #508	@ 0x1fc
 802554c:	4620      	mov	r0, r4
 802554e:	f8a5 620c 	strh.w	r6, [r5, #524]	@ 0x20c
 8025552:	47b8      	blx	r7
 8025554:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8025558:	4620      	mov	r0, r4
 802555a:	47b8      	blx	r7
 802555c:	4f14      	ldr	r7, [pc, #80]	@ (80255b0 <__arm_cp.13_2>)
 802555e:	4620      	mov	r0, r4
 8025560:	2100      	movs	r1, #0
 8025562:	47b8      	blx	r7
 8025564:	4620      	mov	r0, r4
 8025566:	2101      	movs	r1, #1
 8025568:	47b8      	blx	r7
 802556a:	4620      	mov	r0, r4
 802556c:	2102      	movs	r1, #2
 802556e:	47b8      	blx	r7
 8025570:	4620      	mov	r0, r4
 8025572:	2103      	movs	r1, #3
 8025574:	47b8      	blx	r7
 8025576:	f8d5 0220 	ldr.w	r0, [r5, #544]	@ 0x220
 802557a:	42a0      	cmp	r0, r4
 802557c:	bf08      	it	eq
 802557e:	f8c5 6220 	streq.w	r6, [r5, #544]	@ 0x220
 8025582:	7960      	ldrb	r0, [r4, #5]
 8025584:	0680      	lsls	r0, r0, #26
 8025586:	d503      	bpl.n	8025590 <GATT_Reset_Bearer+0x60>
 8025588:	4620      	mov	r0, r4
 802558a:	2191      	movs	r1, #145	@ 0x91
 802558c:	f000 f8b8 	bl	8025700 <GATT_Send_Complete_Event>
 8025590:	6a20      	ldr	r0, [r4, #32]
 8025592:	b108      	cbz	r0, 8025598 <GATT_Reset_Bearer+0x68>
 8025594:	f003 f8da 	bl	802874c <ACL_Release>
 8025598:	4620      	mov	r0, r4
 802559a:	2100      	movs	r1, #0
 802559c:	2224      	movs	r2, #36	@ 0x24
 802559e:	f7fb f9a1 	bl	80208e4 <ble_memset>
 80255a2:	2017      	movs	r0, #23
 80255a4:	8060      	strh	r0, [r4, #2]
 80255a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080255a8 <__arm_cp.13_0>:
 80255a8:	2000a014 	.word	0x2000a014

080255ac <__arm_cp.13_1>:
 80255ac:	080255b5 	.word	0x080255b5

080255b0 <__arm_cp.13_2>:
 80255b0:	080250b9 	.word	0x080250b9

080255b4 <GATT_Flush_Acl_List>:
 80255b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255b6:	460c      	mov	r4, r1
 80255b8:	4605      	mov	r5, r0
 80255ba:	680f      	ldr	r7, [r1, #0]
 80255bc:	b16f      	cbz	r7, 80255da <GATT_Flush_Acl_List+0x26>
 80255be:	463e      	mov	r6, r7
 80255c0:	8828      	ldrh	r0, [r5, #0]
 80255c2:	683f      	ldr	r7, [r7, #0]
 80255c4:	8931      	ldrh	r1, [r6, #8]
 80255c6:	4281      	cmp	r1, r0
 80255c8:	d1f8      	bne.n	80255bc <GATT_Flush_Acl_List+0x8>
 80255ca:	4620      	mov	r0, r4
 80255cc:	4631      	mov	r1, r6
 80255ce:	f003 fa05 	bl	80289dc <ACL_List_Remove>
 80255d2:	4630      	mov	r0, r6
 80255d4:	f003 f8ba 	bl	802874c <ACL_Release>
 80255d8:	e7f0      	b.n	80255bc <GATT_Flush_Acl_List+0x8>
 80255da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080255dc <GATT_Connection_Complete_Handler>:
 80255dc:	4a0e      	ldr	r2, [pc, #56]	@ (8025618 <__arm_cp.15_0>)
 80255de:	f892 11cc 	ldrb.w	r1, [r2, #460]	@ 0x1cc
 80255e2:	07cb      	lsls	r3, r1, #31
 80255e4:	d016      	beq.n	8025614 <GATT_Connection_Complete_Handler+0x38>
 80255e6:	f041 0102 	orr.w	r1, r1, #2
 80255ea:	f882 11cc 	strb.w	r1, [r2, #460]	@ 0x1cc
 80255ee:	490b      	ldr	r1, [pc, #44]	@ (802561c <__arm_cp.15_1>)
 80255f0:	f8d2 21f0 	ldr.w	r2, [r2, #496]	@ 0x1f0
 80255f4:	7d89      	ldrb	r1, [r1, #22]
 80255f6:	3a24      	subs	r2, #36	@ 0x24
 80255f8:	3101      	adds	r1, #1
 80255fa:	3901      	subs	r1, #1
 80255fc:	d00a      	beq.n	8025614 <GATT_Connection_Complete_Handler+0x38>
 80255fe:	f102 0324 	add.w	r3, r2, #36	@ 0x24
 8025602:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8025604:	2a00      	cmp	r2, #0
 8025606:	461a      	mov	r2, r3
 8025608:	d1f7      	bne.n	80255fa <GATT_Connection_Complete_Handler+0x1e>
 802560a:	8018      	strh	r0, [r3, #0]
 802560c:	6858      	ldr	r0, [r3, #4]
 802560e:	f040 0004 	orr.w	r0, r0, #4
 8025612:	6058      	str	r0, [r3, #4]
 8025614:	4770      	bx	lr
 8025616:	bf00      	nop

08025618 <__arm_cp.15_0>:
 8025618:	2000a014 	.word	0x2000a014

0802561c <__arm_cp.15_1>:
 802561c:	20009fec 	.word	0x20009fec

08025620 <GATT_Disconnection_Complete_Handler>:
 8025620:	b580      	push	{r7, lr}
 8025622:	4906      	ldr	r1, [pc, #24]	@ (802563c <__arm_cp.16_0>)
 8025624:	f891 11cc 	ldrb.w	r1, [r1, #460]	@ 0x1cc
 8025628:	07c9      	lsls	r1, r1, #31
 802562a:	d006      	beq.n	802563a <GATT_Disconnection_Complete_Handler+0x1a>
 802562c:	f000 f808 	bl	8025640 <GATT_Get_Root_Bearer>
 8025630:	b118      	cbz	r0, 802563a <GATT_Disconnection_Complete_Handler+0x1a>
 8025632:	6841      	ldr	r1, [r0, #4]
 8025634:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8025638:	6041      	str	r1, [r0, #4]
 802563a:	bd80      	pop	{r7, pc}

0802563c <__arm_cp.16_0>:
 802563c:	2000a014 	.word	0x2000a014

08025640 <GATT_Get_Root_Bearer>:
 8025640:	b180      	cbz	r0, 8025664 <GATT_Get_Root_Bearer+0x24>
 8025642:	490a      	ldr	r1, [pc, #40]	@ (802566c <__arm_cp.17_0>)
 8025644:	f8d1 11f0 	ldr.w	r1, [r1, #496]	@ 0x1f0
 8025648:	f1a1 0224 	sub.w	r2, r1, #36	@ 0x24
 802564c:	4908      	ldr	r1, [pc, #32]	@ (8025670 <__arm_cp.17_1>)
 802564e:	7d89      	ldrb	r1, [r1, #22]
 8025650:	1c4b      	adds	r3, r1, #1
 8025652:	3b01      	subs	r3, #1
 8025654:	d006      	beq.n	8025664 <GATT_Get_Root_Bearer+0x24>
 8025656:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 802565a:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 802565c:	4282      	cmp	r2, r0
 802565e:	460a      	mov	r2, r1
 8025660:	d1f7      	bne.n	8025652 <GATT_Get_Root_Bearer+0x12>
 8025662:	e000      	b.n	8025666 <GATT_Get_Root_Bearer+0x26>
 8025664:	2100      	movs	r1, #0
 8025666:	4608      	mov	r0, r1
 8025668:	4770      	bx	lr
 802566a:	bf00      	nop

0802566c <__arm_cp.17_0>:
 802566c:	2000a014 	.word	0x2000a014

08025670 <__arm_cp.17_1>:
 8025670:	20009fec 	.word	0x20009fec

08025674 <GATT_New_PDU>:
 8025674:	8803      	ldrh	r3, [r0, #0]
 8025676:	1d08      	adds	r0, r1, #4
 8025678:	b282      	uxth	r2, r0
 802567a:	2001      	movs	r0, #1
 802567c:	4619      	mov	r1, r3
 802567e:	f003 b82f 	b.w	80286e0 <ACL_New>
	...

08025684 <GATT_Send_Packet>:
 8025684:	b5b0      	push	{r4, r5, r7, lr}
 8025686:	4d08      	ldr	r5, [pc, #32]	@ (80256a8 <__arm_cp.19_0>)
 8025688:	4604      	mov	r4, r0
 802568a:	f8d5 0210 	ldr.w	r0, [r5, #528]	@ 0x210
 802568e:	b918      	cbnz	r0, 8025698 <GATT_Send_Packet+0x14>
 8025690:	4620      	mov	r0, r4
 8025692:	f000 f80b 	bl	80256ac <GATT_Send_Packet_Once>
 8025696:	b130      	cbz	r0, 80256a6 <GATT_Send_Packet+0x22>
 8025698:	f505 7004 	add.w	r0, r5, #528	@ 0x210
 802569c:	4621      	mov	r1, r4
 802569e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80256a2:	f003 b98b 	b.w	80289bc <ACL_List_Insert_Tail>
 80256a6:	bdb0      	pop	{r4, r5, r7, pc}

080256a8 <__arm_cp.19_0>:
 80256a8:	2000a014 	.word	0x2000a014

080256ac <GATT_Send_Packet_Once>:
 80256ac:	4601      	mov	r1, r0
 80256ae:	2004      	movs	r0, #4
 80256b0:	f002 bd87 	b.w	80281c2 <L2C_Send_Data>

080256b4 <GATT_Get_Bearer>:
 80256b4:	f7ff bfc4 	b.w	8025640 <GATT_Get_Root_Bearer>

080256b8 <OUTLINED_FUNCTION_0>:
 80256b8:	4638      	mov	r0, r7
 80256ba:	4629      	mov	r1, r5
 80256bc:	4632      	mov	r2, r6
 80256be:	4770      	bx	lr

080256c0 <OUTLINED_FUNCTION_1>:
 80256c0:	4620      	mov	r0, r4
 80256c2:	f003 b843 	b.w	802874c <ACL_Release>

080256c6 <GATT_New_Client_PDU>:
 80256c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80256c8:	461c      	mov	r4, r3
 80256ca:	4615      	mov	r5, r2
 80256cc:	460f      	mov	r7, r1
 80256ce:	f7ff fff1 	bl	80256b4 <GATT_Get_Bearer>
 80256d2:	b188      	cbz	r0, 80256f8 <GATT_New_Client_PDU+0x32>
 80256d4:	4606      	mov	r6, r0
 80256d6:	6840      	ldr	r0, [r0, #4]
 80256d8:	2f02      	cmp	r7, #2
 80256da:	d10a      	bne.n	80256f2 <GATT_New_Client_PDU+0x2c>
 80256dc:	04c0      	lsls	r0, r0, #19
 80256de:	d50b      	bpl.n	80256f8 <GATT_New_Client_PDU+0x32>
 80256e0:	4630      	mov	r0, r6
 80256e2:	211c      	movs	r1, #28
 80256e4:	f7ff ffc6 	bl	8025674 <GATT_New_PDU>
 80256e8:	b140      	cbz	r0, 80256fc <GATT_New_Client_PDU+0x36>
 80256ea:	602e      	str	r6, [r5, #0]
 80256ec:	6020      	str	r0, [r4, #0]
 80256ee:	2000      	movs	r0, #0
 80256f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80256f2:	f410 5f05 	tst.w	r0, #8512	@ 0x2140
 80256f6:	d0f3      	beq.n	80256e0 <GATT_New_Client_PDU+0x1a>
 80256f8:	200c      	movs	r0, #12
 80256fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80256fc:	2064      	movs	r0, #100	@ 0x64
 80256fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08025700 <GATT_Send_Complete_Event>:
 8025700:	b510      	push	{r4, lr}
 8025702:	460c      	mov	r4, r1
 8025704:	f7ff fce8 	bl	80250d8 <GATT_Evt_Handle>
 8025708:	4601      	mov	r1, r0
 802570a:	2001      	movs	r0, #1
 802570c:	4622      	mov	r2, r4
 802570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025712:	f7fe b8d7 	b.w	80238c4 <EVT_aci_gatt_proc_complete>

08025716 <ACI_GATT_CONFIRM_INDICATION>:
 8025716:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8025718:	aa01      	add	r2, sp, #4
 802571a:	466b      	mov	r3, sp
 802571c:	2102      	movs	r1, #2
 802571e:	f7ff ffd2 	bl	80256c6 <GATT_New_Client_PDU>
 8025722:	4604      	mov	r4, r0
 8025724:	b960      	cbnz	r0, 8025740 <ACI_GATT_CONFIRM_INDICATION+0x2a>
 8025726:	e9dd 5600 	ldrd	r5, r6, [sp]
 802572a:	4629      	mov	r1, r5
 802572c:	4630      	mov	r0, r6
 802572e:	f000 f809 	bl	8025744 <ATT_Build_Confirmation>
 8025732:	4628      	mov	r0, r5
 8025734:	f7ff ffa6 	bl	8025684 <GATT_Send_Packet>
 8025738:	6870      	ldr	r0, [r6, #4]
 802573a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 802573e:	6070      	str	r0, [r6, #4]
 8025740:	4620      	mov	r0, r4
 8025742:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08025744 <ATT_Build_Confirmation>:
 8025744:	6a08      	ldr	r0, [r1, #32]
 8025746:	221e      	movs	r2, #30
 8025748:	7102      	strb	r2, [r0, #4]
 802574a:	2005      	movs	r0, #5
 802574c:	8088      	strh	r0, [r1, #4]
 802574e:	2000      	movs	r0, #0
 8025750:	4770      	bx	lr
	...

08025754 <GATT_Db_MemAlloc>:
 8025754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025758:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80257d4 <__arm_cp.0_0>
 802575c:	4e1e      	ldr	r6, [pc, #120]	@ (80257d8 <__arm_cp.0_1>)
 802575e:	2101      	movs	r1, #1
 8025760:	4604      	mov	r4, r0
 8025762:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8025766:	47b0      	blx	r6
 8025768:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80257dc <__arm_cp.0_2>
 802576c:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 8025770:	2228      	movs	r2, #40	@ 0x28
 8025772:	f8c8 01d4 	str.w	r0, [r8, #468]	@ 0x1d4
 8025776:	4620      	mov	r0, r4
 8025778:	47b0      	blx	r6
 802577a:	f8b9 1012 	ldrh.w	r1, [r9, #18]
 802577e:	4605      	mov	r5, r0
 8025780:	4620      	mov	r0, r4
 8025782:	2230      	movs	r2, #48	@ 0x30
 8025784:	47b0      	blx	r6
 8025786:	4604      	mov	r4, r0
 8025788:	f508 70ec 	add.w	r0, r8, #472	@ 0x1d8
 802578c:	f508 76f4 	add.w	r6, r8, #488	@ 0x1e8
 8025790:	2700      	movs	r7, #0
 8025792:	e9c8 0076 	strd	r0, r0, [r8, #472]	@ 0x1d8
 8025796:	e9c8 667a 	strd	r6, r6, [r8, #488]	@ 0x1e8
 802579a:	f8b9 0010 	ldrh.w	r0, [r9, #16]
 802579e:	4287      	cmp	r7, r0
 80257a0:	d205      	bcs.n	80257ae <GATT_Db_MemAlloc+0x5a>
 80257a2:	4630      	mov	r0, r6
 80257a4:	f000 ff2c 	bl	8026600 <OUTLINED_FUNCTION_0>
 80257a8:	3528      	adds	r5, #40	@ 0x28
 80257aa:	3701      	adds	r7, #1
 80257ac:	e7f5      	b.n	802579a <GATT_Db_MemAlloc+0x46>
 80257ae:	f508 75f0 	add.w	r5, r8, #480	@ 0x1e0
 80257b2:	2600      	movs	r6, #0
 80257b4:	e9c8 5578 	strd	r5, r5, [r8, #480]	@ 0x1e0
 80257b8:	f8b9 0012 	ldrh.w	r0, [r9, #18]
 80257bc:	4286      	cmp	r6, r0
 80257be:	bf28      	it	cs
 80257c0:	e8bd 83f8 	ldmiacs.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80257c4:	4628      	mov	r0, r5
 80257c6:	4621      	mov	r1, r4
 80257c8:	f005 ff85 	bl	802b6d6 <CList_Insert>
 80257cc:	3430      	adds	r4, #48	@ 0x30
 80257ce:	3601      	adds	r6, #1
 80257d0:	e7f2      	b.n	80257b8 <GATT_Db_MemAlloc+0x64>
 80257d2:	bf00      	nop

080257d4 <__arm_cp.0_0>:
 80257d4:	20009fec 	.word	0x20009fec

080257d8 <__arm_cp.0_1>:
 80257d8:	0802b813 	.word	0x0802b813

080257dc <__arm_cp.0_2>:
 80257dc:	2000a014 	.word	0x2000a014

080257e0 <GATT_Is_Multiple_Val_Attr>:
 80257e0:	2801      	cmp	r0, #1
 80257e2:	bf1c      	itt	ne
 80257e4:	2000      	movne	r0, #0
 80257e6:	4770      	bxne	lr
 80257e8:	8808      	ldrh	r0, [r1, #0]
 80257ea:	f642 1102 	movw	r1, #10498	@ 0x2902
 80257ee:	4288      	cmp	r0, r1
 80257f0:	bf04      	itt	eq
 80257f2:	2001      	moveq	r0, #1
 80257f4:	4770      	bxeq	lr
 80257f6:	f642 3129 	movw	r1, #11049	@ 0x2b29
 80257fa:	1a40      	subs	r0, r0, r1
 80257fc:	fab0 f080 	clz	r0, r0
 8025800:	0940      	lsrs	r0, r0, #5
 8025802:	4770      	bx	lr

08025804 <GATT_Attr_Val>:
 8025804:	b510      	push	{r4, lr}
 8025806:	4604      	mov	r4, r0
 8025808:	f000 f805 	bl	8025816 <GATT_Val_Index>
 802580c:	69a1      	ldr	r1, [r4, #24]
 802580e:	8c22      	ldrh	r2, [r4, #32]
 8025810:	fb02 1000 	mla	r0, r2, r0, r1
 8025814:	bd10      	pop	{r4, pc}

08025816 <GATT_Val_Index>:
 8025816:	b160      	cbz	r0, 8025832 <GATT_Val_Index+0x1c>
 8025818:	f890 2023 	ldrb.w	r2, [r0, #35]	@ 0x23
 802581c:	2a01      	cmp	r2, #1
 802581e:	d10b      	bne.n	8025838 <GATT_Val_Index+0x22>
 8025820:	8900      	ldrh	r0, [r0, #8]
 8025822:	f642 3229 	movw	r2, #11049	@ 0x2b29
 8025826:	4290      	cmp	r0, r2
 8025828:	d003      	beq.n	8025832 <GATT_Val_Index+0x1c>
 802582a:	f642 1202 	movw	r2, #10498	@ 0x2902
 802582e:	4290      	cmp	r0, r2
 8025830:	d102      	bne.n	8025838 <GATT_Val_Index+0x22>
 8025832:	4608      	mov	r0, r1
 8025834:	f7ff be70 	b.w	8025518 <GATT_Bearer_Index>
 8025838:	2000      	movs	r0, #0
 802583a:	4770      	bx	lr

0802583c <ACI_GATT_INIT>:
 802583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802583e:	b08f      	sub	sp, #60	@ 0x3c
 8025840:	4e2a      	ldr	r6, [pc, #168]	@ (80258ec <__arm_cp.4_0>)
 8025842:	f896 01cc 	ldrb.w	r0, [r6, #460]	@ 0x1cc
 8025846:	07c0      	lsls	r0, r0, #31
 8025848:	d11a      	bne.n	8025880 <ACI_GATT_INIT+0x44>
 802584a:	4f29      	ldr	r7, [pc, #164]	@ (80258f0 <__arm_cp.4_1>)
 802584c:	f641 0001 	movw	r0, #6145	@ 0x1801
 8025850:	2501      	movs	r5, #1
 8025852:	f10d 013a 	add.w	r1, sp, #58	@ 0x3a
 8025856:	2301      	movs	r3, #1
 8025858:	f8ad 000c 	strh.w	r0, [sp, #12]
 802585c:	f886 51cc 	strb.w	r5, [r6, #460]	@ 0x1cc
 8025860:	9100      	str	r1, [sp, #0]
 8025862:	8c38      	ldrh	r0, [r7, #32]
 8025864:	0780      	lsls	r0, r0, #30
 8025866:	bf58      	it	pl
 8025868:	2304      	movpl	r3, #4
 802586a:	a903      	add	r1, sp, #12
 802586c:	2001      	movs	r0, #1
 802586e:	2201      	movs	r2, #1
 8025870:	f000 f842 	bl	80258f8 <ACI_GATT_ADD_SERVICE>
 8025874:	b140      	cbz	r0, 8025888 <ACI_GATT_INIT+0x4c>
 8025876:	2000      	movs	r0, #0
 8025878:	2497      	movs	r4, #151	@ 0x97
 802587a:	f886 01cc 	strb.w	r0, [r6, #460]	@ 0x1cc
 802587e:	e000      	b.n	8025882 <ACI_GATT_INIT+0x46>
 8025880:	2462      	movs	r4, #98	@ 0x62
 8025882:	4620      	mov	r0, r4
 8025884:	b00f      	add	sp, #60	@ 0x3c
 8025886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025888:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
 802588c:	2400      	movs	r4, #0
 802588e:	f88d 501e 	strb.w	r5, [sp, #30]
 8025892:	f8bd 503a 	ldrh.w	r5, [sp, #58]	@ 0x3a
 8025896:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 802589a:	f897 0020 	ldrb.w	r0, [r7, #32]
 802589e:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
 80258a2:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80258a6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80258aa:	0780      	lsls	r0, r0, #30
 80258ac:	d4e9      	bmi.n	8025882 <ACI_GATT_INIT+0x46>
 80258ae:	2020      	movs	r0, #32
 80258b0:	f88d 0032 	strb.w	r0, [sp, #50]	@ 0x32
 80258b4:	2004      	movs	r0, #4
 80258b6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80258ba:	f642 2005 	movw	r0, #10757	@ 0x2a05
 80258be:	f8ad 0020 	strh.w	r0, [sp, #32]
 80258c2:	a80e      	add	r0, sp, #56	@ 0x38
 80258c4:	a907      	add	r1, sp, #28
 80258c6:	f000 f8b5 	bl	8025a34 <GATT_Add_Char_Core>
 80258ca:	2800      	cmp	r0, #0
 80258cc:	d1d3      	bne.n	8025876 <ACI_GATT_INIT+0x3a>
 80258ce:	4809      	ldr	r0, [pc, #36]	@ (80258f4 <__arm_cp.4_2>)
 80258d0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 80258d4:	2200      	movs	r2, #0
 80258d6:	2304      	movs	r3, #4
 80258d8:	2400      	movs	r4, #0
 80258da:	9002      	str	r0, [sp, #8]
 80258dc:	a802      	add	r0, sp, #8
 80258de:	9000      	str	r0, [sp, #0]
 80258e0:	4628      	mov	r0, r5
 80258e2:	f000 fa49 	bl	8025d78 <ACI_GATT_UPDATE_CHAR_VALUE>
 80258e6:	2800      	cmp	r0, #0
 80258e8:	d1c5      	bne.n	8025876 <ACI_GATT_INIT+0x3a>
 80258ea:	e7ca      	b.n	8025882 <ACI_GATT_INIT+0x46>

080258ec <__arm_cp.4_0>:
 80258ec:	2000a014 	.word	0x2000a014

080258f0 <__arm_cp.4_1>:
 80258f0:	20009fec 	.word	0x20009fec

080258f4 <__arm_cp.4_2>:
 80258f4:	ffff0001 	.word	0xffff0001

080258f8 <ACI_GATT_ADD_SERVICE>:
 80258f8:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258fc:	469b      	mov	fp, r3
 80258fe:	4617      	mov	r7, r2
 8025900:	460e      	mov	r6, r1
 8025902:	4605      	mov	r5, r0
 8025904:	f000 fa68 	bl	8025dd8 <GATT_Server_Db_Check>
 8025908:	b108      	cbz	r0, 802590e <ACI_GATT_ADD_SERVICE+0x16>
 802590a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802590e:	f1bb 0f00 	cmp.w	fp, #0
 8025912:	d057      	beq.n	80259c4 <ACI_GATT_ADD_SERVICE+0xcc>
 8025914:	f8df a118 	ldr.w	sl, [pc, #280]	@ 8025a30 <__arm_cp.5_0>
 8025918:	f8da 11e0 	ldr.w	r1, [sl, #480]	@ 0x1e0
 802591c:	f50a 70f0 	add.w	r0, sl, #480	@ 0x1e0
 8025920:	4281      	cmp	r1, r0
 8025922:	d00b      	beq.n	802593c <ACI_GATT_ADD_SERVICE+0x44>
 8025924:	f50a 70f4 	add.w	r0, sl, #488	@ 0x1e8
 8025928:	f10d 010a 	add.w	r1, sp, #10
 802592c:	f005 fee0 	bl	802b6f0 <CList_Get_Size>
 8025930:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8025934:	f1ab 0401 	sub.w	r4, fp, #1
 8025938:	4284      	cmp	r4, r0
 802593a:	d902      	bls.n	8025942 <ACI_GATT_ADD_SERVICE+0x4a>
 802593c:	2098      	movs	r0, #152	@ 0x98
 802593e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025942:	f50a 79ec 	add.w	r9, sl, #472	@ 0x1d8
 8025946:	a902      	add	r1, sp, #8
 8025948:	4648      	mov	r0, r9
 802594a:	f005 fed1 	bl	802b6f0 <CList_Get_Size>
 802594e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8025952:	b1b8      	cbz	r0, 8025984 <ACI_GATT_ADD_SERVICE+0x8c>
 8025954:	f8da 81dc 	ldr.w	r8, [sl, #476]	@ 0x1dc
 8025958:	f10d 010a 	add.w	r1, sp, #10
 802595c:	f108 0018 	add.w	r0, r8, #24
 8025960:	f005 fec6 	bl	802b6f0 <CList_Get_Size>
 8025964:	f108 0020 	add.w	r0, r8, #32
 8025968:	a902      	add	r1, sp, #8
 802596a:	f005 fec1 	bl	802b6f0 <CList_Get_Size>
 802596e:	f8b8 0028 	ldrh.w	r0, [r8, #40]	@ 0x28
 8025972:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8025976:	4408      	add	r0, r1
 8025978:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802597c:	4408      	add	r0, r1
 802597e:	f100 0801 	add.w	r8, r0, #1
 8025982:	e001      	b.n	8025988 <ACI_GATT_ADD_SERVICE+0x90>
 8025984:	f04f 0801 	mov.w	r8, #1
 8025988:	ea6f 0008 	mvn.w	r0, r8
 802598c:	b280      	uxth	r0, r0
 802598e:	3001      	adds	r0, #1
 8025990:	4558      	cmp	r0, fp
 8025992:	bf3c      	itt	cc
 8025994:	2061      	movcc	r0, #97	@ 0x61
 8025996:	e8bd 8ffe 	ldmiacc.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802599a:	f8cd 9004 	str.w	r9, [sp, #4]
 802599e:	f8da 91e0 	ldr.w	r9, [sl, #480]	@ 0x1e0
 80259a2:	2f01      	cmp	r7, #1
 80259a4:	d004      	beq.n	80259b0 <ACI_GATT_ADD_SERVICE+0xb8>
 80259a6:	2f02      	cmp	r7, #2
 80259a8:	d10c      	bne.n	80259c4 <ACI_GATT_ADD_SERVICE+0xcc>
 80259aa:	f642 0001 	movw	r0, #10241	@ 0x2801
 80259ae:	e001      	b.n	80259b4 <ACI_GATT_ADD_SERVICE+0xbc>
 80259b0:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 80259b4:	2d01      	cmp	r5, #1
 80259b6:	f8a9 002a 	strh.w	r0, [r9, #42]	@ 0x2a
 80259ba:	d006      	beq.n	80259ca <ACI_GATT_ADD_SERVICE+0xd2>
 80259bc:	2d02      	cmp	r5, #2
 80259be:	d101      	bne.n	80259c4 <ACI_GATT_ADD_SERVICE+0xcc>
 80259c0:	2210      	movs	r2, #16
 80259c2:	e003      	b.n	80259cc <ACI_GATT_ADD_SERVICE+0xd4>
 80259c4:	2092      	movs	r0, #146	@ 0x92
 80259c6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259ca:	2202      	movs	r2, #2
 80259cc:	f109 0008 	add.w	r0, r9, #8
 80259d0:	4631      	mov	r1, r6
 80259d2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80259d4:	f7fa ff36 	bl	8020844 <ble_memcpy>
 80259d8:	4648      	mov	r0, r9
 80259da:	f8a7 8000 	strh.w	r8, [r7]
 80259de:	f889 502c 	strb.w	r5, [r9, #44]	@ 0x2c
 80259e2:	f8a9 8028 	strh.w	r8, [r9, #40]	@ 0x28
 80259e6:	f005 fe7d 	bl	802b6e4 <CList_Remove>
 80259ea:	9801      	ldr	r0, [sp, #4]
 80259ec:	4649      	mov	r1, r9
 80259ee:	f005 fe72 	bl	802b6d6 <CList_Insert>
 80259f2:	f109 0518 	add.w	r5, r9, #24
 80259f6:	f109 0020 	add.w	r0, r9, #32
 80259fa:	e9c9 5506 	strd	r5, r5, [r9, #24]
 80259fe:	e9c9 0008 	strd	r0, r0, [r9, #32]
 8025a02:	2c00      	cmp	r4, #0
 8025a04:	dd0a      	ble.n	8025a1c <ACI_GATT_ADD_SERVICE+0x124>
 8025a06:	f8da 61e8 	ldr.w	r6, [sl, #488]	@ 0x1e8
 8025a0a:	4630      	mov	r0, r6
 8025a0c:	f005 fe6a 	bl	802b6e4 <CList_Remove>
 8025a10:	4628      	mov	r0, r5
 8025a12:	4631      	mov	r1, r6
 8025a14:	f005 fe5f 	bl	802b6d6 <CList_Insert>
 8025a18:	3c01      	subs	r4, #1
 8025a1a:	e7f2      	b.n	8025a02 <ACI_GATT_ADD_SERVICE+0x10a>
 8025a1c:	8838      	ldrh	r0, [r7, #0]
 8025a1e:	eb0b 0100 	add.w	r1, fp, r0
 8025a22:	3901      	subs	r1, #1
 8025a24:	b289      	uxth	r1, r1
 8025a26:	f000 f9eb 	bl	8025e00 <GATT_Notify_Service_Change>
 8025a2a:	2000      	movs	r0, #0
 8025a2c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025a30 <__arm_cp.5_0>:
 8025a30:	2000a014 	.word	0x2000a014

08025a34 <GATT_Add_Char_Core>:
 8025a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a38:	b0a1      	sub	sp, #132	@ 0x84
 8025a3a:	460e      	mov	r6, r1
 8025a3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025a3e:	f891 8002 	ldrb.w	r8, [r1, #2]
 8025a42:	2210      	movs	r2, #16
 8025a44:	f836 9b04 	ldrh.w	r9, [r6], #4
 8025a48:	a81d      	add	r0, sp, #116	@ 0x74
 8025a4a:	4631      	mov	r1, r6
 8025a4c:	f005 ff86 	bl	802b95c <__aeabi_memcpy>
 8025a50:	2000      	movs	r0, #0
 8025a52:	8a34      	ldrh	r4, [r6, #16]
 8025a54:	7cf5      	ldrb	r5, [r6, #19]
 8025a56:	7d37      	ldrb	r7, [r6, #20]
 8025a58:	f896 a015 	ldrb.w	sl, [r6, #21]
 8025a5c:	f896 b016 	ldrb.w	fp, [r6, #22]
 8025a60:	f996 6012 	ldrsb.w	r6, [r6, #18]
 8025a64:	f8ad 006e 	strh.w	r0, [sp, #110]	@ 0x6e
 8025a68:	f000 f9b6 	bl	8025dd8 <GATT_Server_Db_Check>
 8025a6c:	2800      	cmp	r0, #0
 8025a6e:	f040 817a 	bne.w	8025d66 <GATT_Add_Char_Core+0x332>
 8025a72:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8025a76:	e9cd ba09 	strd	fp, sl, [sp, #36]	@ 0x24
 8025a7a:	e9cd 890d 	strd	r8, r9, [sp, #52]	@ 0x34
 8025a7e:	e9cd 750b 	strd	r7, r5, [sp, #44]	@ 0x2c
 8025a82:	d901      	bls.n	8025a88 <GATT_Add_Char_Core+0x54>
 8025a84:	2092      	movs	r0, #146	@ 0x92
 8025a86:	e16e      	b.n	8025d66 <GATT_Add_Char_Core+0x332>
 8025a88:	a91c      	add	r1, sp, #112	@ 0x70
 8025a8a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025a8c:	f000 f9be 	bl	8025e0c <GATT_Search_Service_Handle>
 8025a90:	b108      	cbz	r0, 8025a96 <GATT_Add_Char_Core+0x62>
 8025a92:	2060      	movs	r0, #96	@ 0x60
 8025a94:	e167      	b.n	8025d66 <GATT_Add_Char_Core+0x332>
 8025a96:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8025a9a:	f8df b2d0 	ldr.w	fp, [pc, #720]	@ 8025d6c <__arm_cp.6_0>
 8025a9e:	f10d 016a 	add.w	r1, sp, #106	@ 0x6a
 8025aa2:	b2f7      	uxtb	r7, r6
 8025aa4:	f10a 0518 	add.w	r5, sl, #24
 8025aa8:	f89b 9016 	ldrb.w	r9, [fp, #22]
 8025aac:	4628      	mov	r0, r5
 8025aae:	f005 fe1f 	bl	802b6f0 <CList_Get_Size>
 8025ab2:	f017 0830 	ands.w	r8, r7, #48	@ 0x30
 8025ab6:	4630      	mov	r0, r6
 8025ab8:	4646      	mov	r6, r8
 8025aba:	4641      	mov	r1, r8
 8025abc:	bf18      	it	ne
 8025abe:	ea4f 0649 	movne.w	r6, r9, lsl #1
 8025ac2:	f017 0201 	ands.w	r2, r7, #1
 8025ac6:	bf18      	it	ne
 8025ac8:	3602      	addne	r6, #2
 8025aca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025ace:	9008      	str	r0, [sp, #32]
 8025ad0:	bfd8      	it	le
 8025ad2:	3602      	addle	r6, #2
 8025ad4:	2002      	movs	r0, #2
 8025ad6:	f1b8 0f00 	cmp.w	r8, #0
 8025ada:	bf0c      	ite	eq
 8025adc:	2001      	moveq	r0, #1
 8025ade:	2101      	movne	r1, #1
 8025ae0:	2a00      	cmp	r2, #0
 8025ae2:	bf18      	it	ne
 8025ae4:	4601      	movne	r1, r0
 8025ae6:	eb01 19d7 	add.w	r9, r1, r7, lsr #7
 8025aea:	f8bd 006a 	ldrh.w	r0, [sp, #106]	@ 0x6a
 8025aee:	f109 0702 	add.w	r7, r9, #2
 8025af2:	4287      	cmp	r7, r0
 8025af4:	d901      	bls.n	8025afa <GATT_Add_Char_Core+0xc6>
 8025af6:	2098      	movs	r0, #152	@ 0x98
 8025af8:	e135      	b.n	8025d66 <GATT_Add_Char_Core+0x332>
 8025afa:	9206      	str	r2, [sp, #24]
 8025afc:	f10a 0020 	add.w	r0, sl, #32
 8025b00:	a91a      	add	r1, sp, #104	@ 0x68
 8025b02:	9007      	str	r0, [sp, #28]
 8025b04:	f005 fdf4 	bl	802b6f0 <CList_Get_Size>
 8025b08:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 8025b0c:	b168      	cbz	r0, 8025b2a <GATT_Add_Char_Core+0xf6>
 8025b0e:	f8ba 1028 	ldrh.w	r1, [sl, #40]	@ 0x28
 8025b12:	4408      	add	r0, r1
 8025b14:	f8bd 106a 	ldrh.w	r1, [sp, #106]	@ 0x6a
 8025b18:	4408      	add	r0, r1
 8025b1a:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8025b1e:	8b89      	ldrh	r1, [r1, #28]
 8025b20:	1a40      	subs	r0, r0, r1
 8025b22:	42b8      	cmp	r0, r7
 8025b24:	d201      	bcs.n	8025b2a <GATT_Add_Char_Core+0xf6>
 8025b26:	2061      	movs	r0, #97	@ 0x61
 8025b28:	e11d      	b.n	8025d66 <GATT_Add_Char_Core+0x332>
 8025b2a:	6829      	ldr	r1, [r5, #0]
 8025b2c:	465b      	mov	r3, fp
 8025b2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025b30:	f8cd a014 	str.w	sl, [sp, #20]
 8025b34:	f8d1 b000 	ldr.w	fp, [r1]
 8025b38:	2801      	cmp	r0, #1
 8025b3a:	d10d      	bne.n	8025b58 <GATT_Add_Char_Core+0x124>
 8025b3c:	2005      	movs	r0, #5
 8025b3e:	9103      	str	r1, [sp, #12]
 8025b40:	83c8      	strh	r0, [r1, #30]
 8025b42:	f8bd 0074 	ldrh.w	r0, [sp, #116]	@ 0x74
 8025b46:	b281      	uxth	r1, r0
 8025b48:	f642 1002 	movw	r0, #10498	@ 0x2902
 8025b4c:	4281      	cmp	r1, r0
 8025b4e:	d109      	bne.n	8025b64 <GATT_Add_Char_Core+0x130>
 8025b50:	461d      	mov	r5, r3
 8025b52:	7d99      	ldrb	r1, [r3, #22]
 8025b54:	2005      	movs	r0, #5
 8025b56:	e00f      	b.n	8025b78 <GATT_Add_Char_Core+0x144>
 8025b58:	2802      	cmp	r0, #2
 8025b5a:	d193      	bne.n	8025a84 <GATT_Add_Char_Core+0x50>
 8025b5c:	2013      	movs	r0, #19
 8025b5e:	9103      	str	r1, [sp, #12]
 8025b60:	83c8      	strh	r0, [r1, #30]
 8025b62:	e007      	b.n	8025b74 <GATT_Add_Char_Core+0x140>
 8025b64:	2005      	movs	r0, #5
 8025b66:	f642 3229 	movw	r2, #11049	@ 0x2b29
 8025b6a:	4291      	cmp	r1, r2
 8025b6c:	d102      	bne.n	8025b74 <GATT_Add_Char_Core+0x140>
 8025b6e:	461d      	mov	r5, r3
 8025b70:	7d99      	ldrb	r1, [r3, #22]
 8025b72:	e001      	b.n	8025b78 <GATT_Add_Char_Core+0x144>
 8025b74:	2101      	movs	r1, #1
 8025b76:	461d      	mov	r5, r3
 8025b78:	4a7d      	ldr	r2, [pc, #500]	@ (8025d70 <__arm_cp.6_1>)
 8025b7a:	4430      	add	r0, r6
 8025b7c:	8aaf      	ldrh	r7, [r5, #20]
 8025b7e:	fb04 0001 	mla	r0, r4, r1, r0
 8025b82:	f8b2 31d2 	ldrh.w	r3, [r2, #466]	@ 0x1d2
 8025b86:	b286      	uxth	r6, r0
 8025b88:	2098      	movs	r0, #152	@ 0x98
 8025b8a:	1afb      	subs	r3, r7, r3
 8025b8c:	42b3      	cmp	r3, r6
 8025b8e:	f2c0 80ea 	blt.w	8025d66 <GATT_Add_Char_Core+0x332>
 8025b92:	f8d2 21d4 	ldr.w	r2, [r2, #468]	@ 0x1d4
 8025b96:	2a00      	cmp	r2, #0
 8025b98:	f000 80e5 	beq.w	8025d66 <GATT_Add_Char_Core+0x332>
 8025b9c:	fb04 f501 	mul.w	r5, r4, r1
 8025ba0:	a91a      	add	r1, sp, #104	@ 0x68
 8025ba2:	9807      	ldr	r0, [sp, #28]
 8025ba4:	f005 fda4 	bl	802b6f0 <CList_Get_Size>
 8025ba8:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 8025bac:	f8cd 9010 	str.w	r9, [sp, #16]
 8025bb0:	e9cd 8501 	strd	r8, r5, [sp, #4]
 8025bb4:	465e      	mov	r6, fp
 8025bb6:	46a2      	mov	sl, r4
 8025bb8:	2800      	cmp	r0, #0
 8025bba:	9805      	ldr	r0, [sp, #20]
 8025bbc:	bf0e      	itee	eq
 8025bbe:	3028      	addeq	r0, #40	@ 0x28
 8025bc0:	6a40      	ldrne	r0, [r0, #36]	@ 0x24
 8025bc2:	301c      	addne	r0, #28
 8025bc4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8025bc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8025bca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025bcc:	8800      	ldrh	r0, [r0, #0]
 8025bce:	3001      	adds	r0, #1
 8025bd0:	8008      	strh	r0, [r1, #0]
 8025bd2:	f8a8 001c 	strh.w	r0, [r8, #28]
 8025bd6:	2000      	movs	r0, #0
 8025bd8:	f888 0026 	strb.w	r0, [r8, #38]	@ 0x26
 8025bdc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8025be0:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8025be4:	8808      	ldrh	r0, [r1, #0]
 8025be6:	3001      	adds	r0, #1
 8025be8:	f826 0f1c 	strh.w	r0, [r6, #28]!
 8025bec:	f642 0003 	movw	r0, #10243	@ 0x2803
 8025bf0:	f8a8 0008 	strh.w	r0, [r8, #8]
 8025bf4:	f8b8 001e 	ldrh.w	r0, [r8, #30]
 8025bf8:	f000 f91c 	bl	8025e34 <GATT_New_Value>
 8025bfc:	f8b8 101e 	ldrh.w	r1, [r8, #30]
 8025c00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025c04:	f8c8 0018 	str.w	r0, [r8, #24]
 8025c08:	4f5a      	ldr	r7, [pc, #360]	@ (8025d74 <__arm_cp.6_2>)
 8025c0a:	2202      	movs	r2, #2
 8025c0c:	f8a8 1020 	strh.w	r1, [r8, #32]
 8025c10:	f880 9000 	strb.w	r9, [r0]
 8025c14:	4631      	mov	r1, r6
 8025c16:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8025c1a:	3001      	adds	r0, #1
 8025c1c:	47b8      	blx	r7
 8025c1e:	2610      	movs	r6, #16
 8025c20:	2c01      	cmp	r4, #1
 8025c22:	bf08      	it	eq
 8025c24:	2602      	moveq	r6, #2
 8025c26:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8025c2a:	ad1d      	add	r5, sp, #116	@ 0x74
 8025c2c:	4632      	mov	r2, r6
 8025c2e:	4629      	mov	r1, r5
 8025c30:	3003      	adds	r0, #3
 8025c32:	47b8      	blx	r7
 8025c34:	f10b 0008 	add.w	r0, fp, #8
 8025c38:	4629      	mov	r1, r5
 8025c3a:	4632      	mov	r2, r6
 8025c3c:	47b8      	blx	r7
 8025c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c40:	f88b 4023 	strb.w	r4, [fp, #35]	@ 0x23
 8025c44:	f8ab a01e 	strh.w	sl, [fp, #30]
 8025c48:	f8ab a020 	strh.w	sl, [fp, #32]
 8025c4c:	f88b 0022 	strb.w	r0, [fp, #34]	@ 0x22
 8025c50:	9802      	ldr	r0, [sp, #8]
 8025c52:	b286      	uxth	r6, r0
 8025c54:	4630      	mov	r0, r6
 8025c56:	f000 f8ed 	bl	8025e34 <GATT_New_Value>
 8025c5a:	4632      	mov	r2, r6
 8025c5c:	2100      	movs	r1, #0
 8025c5e:	f8cb 0018 	str.w	r0, [fp, #24]
 8025c62:	464e      	mov	r6, r9
 8025c64:	f7fa fe3e 	bl	80208e4 <ble_memset>
 8025c68:	2501      	movs	r5, #1
 8025c6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025c6c:	2110      	movs	r1, #16
 8025c6e:	f3c9 0240 	ubfx	r2, r9, #1, #1
 8025c72:	2807      	cmp	r0, #7
 8025c74:	f8a8 5024 	strh.w	r5, [r8, #36]	@ 0x24
 8025c78:	bf98      	it	ls
 8025c7a:	2007      	movls	r0, #7
 8025c7c:	2810      	cmp	r0, #16
 8025c7e:	bf28      	it	cs
 8025c80:	4608      	movcs	r0, r1
 8025c82:	f88b 0027 	strb.w	r0, [fp, #39]	@ 0x27
 8025c86:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025c88:	2102      	movs	r1, #2
 8025c8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8025c8c:	f88b 7025 	strb.w	r7, [fp, #37]	@ 0x25
 8025c90:	ea01 0199 	and.w	r1, r1, r9, lsr #2
 8025c94:	f88b 0026 	strb.w	r0, [fp, #38]	@ 0x26
 8025c98:	2008      	movs	r0, #8
 8025c9a:	ea00 00d9 	and.w	r0, r0, r9, lsr #3
 8025c9e:	4411      	add	r1, r2
 8025ca0:	f009 0204 	and.w	r2, r9, #4
 8025ca4:	4411      	add	r1, r2
 8025ca6:	4408      	add	r0, r1
 8025ca8:	f88b 0024 	strb.w	r0, [fp, #36]	@ 0x24
 8025cac:	4640      	mov	r0, r8
 8025cae:	f005 fd19 	bl	802b6e4 <CList_Remove>
 8025cb2:	9c07      	ldr	r4, [sp, #28]
 8025cb4:	4641      	mov	r1, r8
 8025cb6:	4620      	mov	r0, r4
 8025cb8:	f005 fd0d 	bl	802b6d6 <CList_Insert>
 8025cbc:	4658      	mov	r0, fp
 8025cbe:	f005 fd11 	bl	802b6e4 <CList_Remove>
 8025cc2:	4620      	mov	r0, r4
 8025cc4:	4659      	mov	r1, fp
 8025cc6:	f005 fd06 	bl	802b6d6 <CList_Insert>
 8025cca:	9804      	ldr	r0, [sp, #16]
 8025ccc:	2800      	cmp	r0, #0
 8025cce:	d041      	beq.n	8025d54 <GATT_Add_Char_Core+0x320>
 8025cd0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025cd2:	f88d 5062 	strb.w	r5, [sp, #98]	@ 0x62
 8025cd6:	f88d 5058 	strb.w	r5, [sp, #88]	@ 0x58
 8025cda:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8025cde:	f10d 006e 	add.w	r0, sp, #110	@ 0x6e
 8025ce2:	9017      	str	r0, [sp, #92]	@ 0x5c
 8025ce4:	f04f 1002 	mov.w	r0, #131074	@ 0x20002
 8025ce8:	9015      	str	r0, [sp, #84]	@ 0x54
 8025cea:	200f      	movs	r0, #15
 8025cec:	f88d 0061 	strb.w	r0, [sp, #97]	@ 0x61
 8025cf0:	2000      	movs	r0, #0
 8025cf2:	f88d 0064 	strb.w	r0, [sp, #100]	@ 0x64
 8025cf6:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 8025cfa:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 8025cfe:	f007 0038 	and.w	r0, r7, #56	@ 0x38
 8025d02:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 8025d06:	f89b 0027 	ldrb.w	r0, [fp, #39]	@ 0x27
 8025d0a:	f88d 0063 	strb.w	r0, [sp, #99]	@ 0x63
 8025d0e:	9806      	ldr	r0, [sp, #24]
 8025d10:	b138      	cbz	r0, 8025d22 <GATT_Add_Char_Core+0x2ee>
 8025d12:	f642 1003 	movw	r0, #10499	@ 0x2903
 8025d16:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8025d1a:	a81b      	add	r0, sp, #108	@ 0x6c
 8025d1c:	a910      	add	r1, sp, #64	@ 0x40
 8025d1e:	f000 f8a1 	bl	8025e64 <GATT_Add_Char_Desc_Core>
 8025d22:	9801      	ldr	r0, [sp, #4]
 8025d24:	b138      	cbz	r0, 8025d36 <GATT_Add_Char_Core+0x302>
 8025d26:	f642 1002 	movw	r0, #10498	@ 0x2902
 8025d2a:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8025d2e:	a81b      	add	r0, sp, #108	@ 0x6c
 8025d30:	a910      	add	r1, sp, #64	@ 0x40
 8025d32:	f000 f897 	bl	8025e64 <GATT_Add_Char_Desc_Core>
 8025d36:	f1b6 3fff 	cmp.w	r6, #4294967295
 8025d3a:	dc0b      	bgt.n	8025d54 <GATT_Add_Char_Core+0x320>
 8025d3c:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 8025d40:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8025d44:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8025d48:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
 8025d4c:	a81b      	add	r0, sp, #108	@ 0x6c
 8025d4e:	a910      	add	r1, sp, #64	@ 0x40
 8025d50:	f000 f888 	bl	8025e64 <GATT_Add_Char_Desc_Core>
 8025d54:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8025d56:	9904      	ldr	r1, [sp, #16]
 8025d58:	8800      	ldrh	r0, [r0, #0]
 8025d5a:	4401      	add	r1, r0
 8025d5c:	3101      	adds	r1, #1
 8025d5e:	b289      	uxth	r1, r1
 8025d60:	f000 f84e 	bl	8025e00 <GATT_Notify_Service_Change>
 8025d64:	2000      	movs	r0, #0
 8025d66:	b021      	add	sp, #132	@ 0x84
 8025d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025d6c <__arm_cp.6_0>:
 8025d6c:	20009fec 	.word	0x20009fec

08025d70 <__arm_cp.6_1>:
 8025d70:	2000a014 	.word	0x2000a014

08025d74 <__arm_cp.6_2>:
 8025d74:	08020845 	.word	0x08020845

08025d78 <ACI_GATT_UPDATE_CHAR_VALUE>:
 8025d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025d7a:	b087      	sub	sp, #28
 8025d7c:	4605      	mov	r5, r0
 8025d7e:	4815      	ldr	r0, [pc, #84]	@ (8025dd4 <__arm_cp.7_0>)
 8025d80:	f890 01cc 	ldrb.w	r0, [r0, #460]	@ 0x1cc
 8025d84:	07c0      	lsls	r0, r0, #31
 8025d86:	d101      	bne.n	8025d8c <ACI_GATT_UPDATE_CHAR_VALUE+0x14>
 8025d88:	2097      	movs	r0, #151	@ 0x97
 8025d8a:	e00e      	b.n	8025daa <ACI_GATT_UPDATE_CHAR_VALUE+0x32>
 8025d8c:	460c      	mov	r4, r1
 8025d8e:	a906      	add	r1, sp, #24
 8025d90:	4628      	mov	r0, r5
 8025d92:	461e      	mov	r6, r3
 8025d94:	4617      	mov	r7, r2
 8025d96:	f000 f839 	bl	8025e0c <GATT_Search_Service_Handle>
 8025d9a:	b928      	cbnz	r0, 8025da8 <ACI_GATT_UPDATE_CHAR_VALUE+0x30>
 8025d9c:	9906      	ldr	r1, [sp, #24]
 8025d9e:	aa05      	add	r2, sp, #20
 8025da0:	4620      	mov	r0, r4
 8025da2:	f000 f9c6 	bl	8026132 <GATT_Search_Handle>
 8025da6:	b110      	cbz	r0, 8025dae <ACI_GATT_UPDATE_CHAR_VALUE+0x36>
 8025da8:	2060      	movs	r0, #96	@ 0x60
 8025daa:	b007      	add	sp, #28
 8025dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025dae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8025db0:	b11f      	cbz	r7, 8025dba <ACI_GATT_UPDATE_CHAR_VALUE+0x42>
 8025db2:	9905      	ldr	r1, [sp, #20]
 8025db4:	6809      	ldr	r1, [r1, #0]
 8025db6:	8c09      	ldrh	r1, [r1, #32]
 8025db8:	e000      	b.n	8025dbc <ACI_GATT_UPDATE_CHAR_VALUE+0x44>
 8025dba:	4631      	mov	r1, r6
 8025dbc:	e9cd 1700 	strd	r1, r7, [sp]
 8025dc0:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8025dc4:	2000      	movs	r0, #0
 8025dc6:	4629      	mov	r1, r5
 8025dc8:	4622      	mov	r2, r4
 8025dca:	2303      	movs	r3, #3
 8025dcc:	f000 f9c0 	bl	8026150 <GATT_Update_Char_Value_Core>
 8025dd0:	e7eb      	b.n	8025daa <ACI_GATT_UPDATE_CHAR_VALUE+0x32>
 8025dd2:	bf00      	nop

08025dd4 <__arm_cp.7_0>:
 8025dd4:	2000a014 	.word	0x2000a014

08025dd8 <GATT_Server_Db_Check>:
 8025dd8:	b580      	push	{r7, lr}
 8025dda:	4808      	ldr	r0, [pc, #32]	@ (8025dfc <__arm_cp.8_0>)
 8025ddc:	f890 01cc 	ldrb.w	r0, [r0, #460]	@ 0x1cc
 8025de0:	07c1      	lsls	r1, r0, #31
 8025de2:	bf04      	itt	eq
 8025de4:	2097      	moveq	r0, #151	@ 0x97
 8025de6:	bd80      	popeq	{r7, pc}
 8025de8:	0780      	lsls	r0, r0, #30
 8025dea:	d503      	bpl.n	8025df4 <GATT_Server_Db_Check+0x1c>
 8025dec:	201c      	movs	r0, #28
 8025dee:	f002 fdaf 	bl	8028950 <ACL_Tx_Pool_Size>
 8025df2:	b108      	cbz	r0, 8025df8 <GATT_Server_Db_Check+0x20>
 8025df4:	2000      	movs	r0, #0
 8025df6:	bd80      	pop	{r7, pc}
 8025df8:	2064      	movs	r0, #100	@ 0x64
 8025dfa:	bd80      	pop	{r7, pc}

08025dfc <__arm_cp.8_0>:
 8025dfc:	2000a014 	.word	0x2000a014

08025e00 <GATT_Notify_Service_Change>:
 8025e00:	460b      	mov	r3, r1
 8025e02:	4602      	mov	r2, r0
 8025e04:	2000      	movs	r0, #0
 8025e06:	2100      	movs	r1, #0
 8025e08:	f000 bb50 	b.w	80264ac <GATT_Update_For_Service_Change>

08025e0c <GATT_Search_Service_Handle>:
 8025e0c:	b510      	push	{r4, lr}
 8025e0e:	4a08      	ldr	r2, [pc, #32]	@ (8025e30 <__arm_cp.11_0>)
 8025e10:	f502 72ec 	add.w	r2, r2, #472	@ 0x1d8
 8025e14:	4613      	mov	r3, r2
 8025e16:	681b      	ldr	r3, [r3, #0]
 8025e18:	4293      	cmp	r3, r2
 8025e1a:	bf04      	itt	eq
 8025e1c:	2091      	moveq	r0, #145	@ 0x91
 8025e1e:	bd10      	popeq	{r4, pc}
 8025e20:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8025e22:	4284      	cmp	r4, r0
 8025e24:	bf02      	ittt	eq
 8025e26:	600b      	streq	r3, [r1, #0]
 8025e28:	2000      	moveq	r0, #0
 8025e2a:	bd10      	popeq	{r4, pc}
 8025e2c:	e7f3      	b.n	8025e16 <GATT_Search_Service_Handle+0xa>
 8025e2e:	bf00      	nop

08025e30 <__arm_cp.11_0>:
 8025e30:	2000a014 	.word	0x2000a014

08025e34 <GATT_New_Value>:
 8025e34:	b510      	push	{r4, lr}
 8025e36:	4a09      	ldr	r2, [pc, #36]	@ (8025e5c <__arm_cp.12_0>)
 8025e38:	4909      	ldr	r1, [pc, #36]	@ (8025e60 <__arm_cp.12_1>)
 8025e3a:	f8b2 31d2 	ldrh.w	r3, [r2, #466]	@ 0x1d2
 8025e3e:	8a89      	ldrh	r1, [r1, #20]
 8025e40:	1acc      	subs	r4, r1, r3
 8025e42:	f8d2 11d4 	ldr.w	r1, [r2, #468]	@ 0x1d4
 8025e46:	4284      	cmp	r4, r0
 8025e48:	4419      	add	r1, r3
 8025e4a:	bfb8      	it	lt
 8025e4c:	2100      	movlt	r1, #0
 8025e4e:	b111      	cbz	r1, 8025e56 <GATT_New_Value+0x22>
 8025e50:	4418      	add	r0, r3
 8025e52:	f8a2 01d2 	strh.w	r0, [r2, #466]	@ 0x1d2
 8025e56:	4608      	mov	r0, r1
 8025e58:	bd10      	pop	{r4, pc}
 8025e5a:	bf00      	nop

08025e5c <__arm_cp.12_0>:
 8025e5c:	2000a014 	.word	0x2000a014

08025e60 <__arm_cp.12_1>:
 8025e60:	20009fec 	.word	0x20009fec

08025e64 <GATT_Add_Char_Desc_Core>:
 8025e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e68:	b097      	sub	sp, #92	@ 0x5c
 8025e6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025e6c:	f891 0024 	ldrb.w	r0, [r1, #36]	@ 0x24
 8025e70:	e9d1 6a01 	ldrd	r6, sl, [r1, #4]
 8025e74:	e9d1 4803 	ldrd	r4, r8, [r1, #12]
 8025e78:	f8b1 b002 	ldrh.w	fp, [r1, #2]
 8025e7c:	f8b1 9000 	ldrh.w	r9, [r1]
 8025e80:	8acf      	ldrh	r7, [r1, #22]
 8025e82:	8a8d      	ldrh	r5, [r1, #20]
 8025e84:	900e      	str	r0, [sp, #56]	@ 0x38
 8025e86:	f891 0023 	ldrb.w	r0, [r1, #35]	@ 0x23
 8025e8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8025e8c:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 8025e90:	900a      	str	r0, [sp, #40]	@ 0x28
 8025e92:	f891 0021 	ldrb.w	r0, [r1, #33]	@ 0x21
 8025e96:	9009      	str	r0, [sp, #36]	@ 0x24
 8025e98:	f891 0020 	ldrb.w	r0, [r1, #32]
 8025e9c:	9008      	str	r0, [sp, #32]
 8025e9e:	69c8      	ldr	r0, [r1, #28]
 8025ea0:	900d      	str	r0, [sp, #52]	@ 0x34
 8025ea2:	7e08      	ldrb	r0, [r1, #24]
 8025ea4:	900c      	str	r0, [sp, #48]	@ 0x30
 8025ea6:	f7ff ff97 	bl	8025dd8 <GATT_Server_Db_Check>
 8025eaa:	b978      	cbnz	r0, 8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025eac:	464a      	mov	r2, r9
 8025eae:	e9cd 8402 	strd	r8, r4, [sp, #8]
 8025eb2:	e9cd a604 	strd	sl, r6, [sp, #16]
 8025eb6:	e9cd b706 	strd	fp, r7, [sp, #24]
 8025eba:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8025ebe:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8025ec2:	bf9c      	itt	ls
 8025ec4:	9807      	ldrls	r0, [sp, #28]
 8025ec6:	4285      	cmpls	r5, r0
 8025ec8:	d903      	bls.n	8025ed2 <GATT_Add_Char_Desc_Core+0x6e>
 8025eca:	2092      	movs	r0, #146	@ 0x92
 8025ecc:	b017      	add	sp, #92	@ 0x5c
 8025ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ed2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025ed4:	b909      	cbnz	r1, 8025eda <GATT_Add_Char_Desc_Core+0x76>
 8025ed6:	4285      	cmp	r5, r0
 8025ed8:	d1f7      	bne.n	8025eca <GATT_Add_Char_Desc_Core+0x66>
 8025eda:	a912      	add	r1, sp, #72	@ 0x48
 8025edc:	4610      	mov	r0, r2
 8025ede:	f7ff ff95 	bl	8025e0c <GATT_Search_Service_Handle>
 8025ee2:	b930      	cbnz	r0, 8025ef2 <GATT_Add_Char_Desc_Core+0x8e>
 8025ee4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025ee6:	aa11      	add	r2, sp, #68	@ 0x44
 8025ee8:	9806      	ldr	r0, [sp, #24]
 8025eea:	4621      	mov	r1, r4
 8025eec:	f000 f921 	bl	8026132 <GATT_Search_Handle>
 8025ef0:	b108      	cbz	r0, 8025ef6 <GATT_Add_Char_Desc_Core+0x92>
 8025ef2:	2060      	movs	r0, #96	@ 0x60
 8025ef4:	e7ea      	b.n	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025ef6:	f104 0718 	add.w	r7, r4, #24
 8025efa:	f10d 0142 	add.w	r1, sp, #66	@ 0x42
 8025efe:	4638      	mov	r0, r7
 8025f00:	f005 fbf6 	bl	802b6f0 <CList_Get_Size>
 8025f04:	f8bd 0042 	ldrh.w	r0, [sp, #66]	@ 0x42
 8025f08:	2800      	cmp	r0, #0
 8025f0a:	f000 8089 	beq.w	8026020 <GATT_Add_Char_Desc_Core+0x1bc>
 8025f0e:	f104 0020 	add.w	r0, r4, #32
 8025f12:	a910      	add	r1, sp, #64	@ 0x40
 8025f14:	4680      	mov	r8, r0
 8025f16:	f005 fbeb 	bl	802b6f0 <CList_Get_Size>
 8025f1a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8025f1e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8025f20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8025f22:	4408      	add	r0, r1
 8025f24:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8025f28:	4408      	add	r0, r1
 8025f2a:	8b99      	ldrh	r1, [r3, #28]
 8025f2c:	4288      	cmp	r0, r1
 8025f2e:	d101      	bne.n	8025f34 <GATT_Add_Char_Desc_Core+0xd0>
 8025f30:	2061      	movs	r0, #97	@ 0x61
 8025f32:	e7cb      	b.n	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025f34:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8025f36:	f642 0203 	movw	r2, #10243	@ 0x2803
 8025f3a:	8901      	ldrh	r1, [r0, #8]
 8025f3c:	4291      	cmp	r1, r2
 8025f3e:	d1c4      	bne.n	8025eca <GATT_Add_Char_Desc_Core+0x66>
 8025f40:	f890 1023 	ldrb.w	r1, [r0, #35]	@ 0x23
 8025f44:	2901      	cmp	r1, #1
 8025f46:	d1c0      	bne.n	8025eca <GATT_Add_Char_Desc_Core+0x66>
 8025f48:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 8025f4c:	e9dd a602 	ldrd	sl, r6, [sp, #8]
 8025f50:	6800      	ldr	r0, [r0, #0]
 8025f52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025f54:	9306      	str	r3, [sp, #24]
 8025f56:	6804      	ldr	r4, [r0, #0]
 8025f58:	2a01      	cmp	r2, #1
 8025f5a:	d131      	bne.n	8025fc0 <GATT_Add_Char_Desc_Core+0x15c>
 8025f5c:	fa1f f08c 	uxth.w	r0, ip
 8025f60:	f5a0 5024 	sub.w	r0, r0, #10496	@ 0x2900
 8025f64:	2805      	cmp	r0, #5
 8025f66:	d82b      	bhi.n	8025fc0 <GATT_Add_Char_Desc_Core+0x15c>
 8025f68:	e8df f000 	tbb	[pc, r0]
 8025f6c:	03032a03 	.word	0x03032a03
 8025f70:	0906      	.short	0x0906
 8025f72:	2d02      	cmp	r5, #2
 8025f74:	d1a9      	bne.n	8025eca <GATT_Add_Char_Desc_Core+0x66>
 8025f76:	e023      	b.n	8025fc0 <GATT_Add_Char_Desc_Core+0x15c>
 8025f78:	2d07      	cmp	r5, #7
 8025f7a:	d1a6      	bne.n	8025eca <GATT_Add_Char_Desc_Core+0x66>
 8025f7c:	e020      	b.n	8025fc0 <GATT_Add_Char_Desc_Core+0x15c>
 8025f7e:	2092      	movs	r0, #146	@ 0x92
 8025f80:	9501      	str	r5, [sp, #4]
 8025f82:	2d04      	cmp	r5, #4
 8025f84:	d3a2      	bcc.n	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025f86:	e9dd ec04 	ldrd	lr, ip, [sp, #16]
 8025f8a:	e9dd a602 	ldrd	sl, r6, [sp, #8]
 8025f8e:	9d01      	ldr	r5, [sp, #4]
 8025f90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025f92:	f015 0101 	ands.w	r1, r5, #1
 8025f96:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025f98:	f47f af98 	bne.w	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025f9c:	b181      	cbz	r1, 8025fc0 <GATT_Add_Char_Desc_Core+0x15c>
 8025f9e:	2092      	movs	r0, #146	@ 0x92
 8025fa0:	9907      	ldr	r1, [sp, #28]
 8025fa2:	2904      	cmp	r1, #4
 8025fa4:	f4ff af92 	bcc.w	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025fa8:	e9dd 6e03 	ldrd	r6, lr, [sp, #12]
 8025fac:	e9dd 5a01 	ldrd	r5, sl, [sp, #4]
 8025fb0:	9907      	ldr	r1, [sp, #28]
 8025fb2:	f8dd c014 	ldr.w	ip, [sp, #20]
 8025fb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025fb8:	f011 0101 	ands.w	r1, r1, #1
 8025fbc:	f47f af86 	bne.w	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8025fc0:	fa1f f18c 	uxth.w	r1, ip
 8025fc4:	e9cd 6a15 	strd	r6, sl, [sp, #84]	@ 0x54
 8025fc8:	46ab      	mov	fp, r5
 8025fca:	2a01      	cmp	r2, #1
 8025fcc:	e9cd ce13 	strd	ip, lr, [sp, #76]	@ 0x4c
 8025fd0:	468a      	mov	sl, r1
 8025fd2:	d10a      	bne.n	8025fea <GATT_Add_Char_Desc_Core+0x186>
 8025fd4:	f642 1002 	movw	r0, #10498	@ 0x2902
 8025fd8:	4281      	cmp	r1, r0
 8025fda:	bf1c      	itt	ne
 8025fdc:	f642 3029 	movwne	r0, #11049	@ 0x2b29
 8025fe0:	4281      	cmpne	r1, r0
 8025fe2:	d102      	bne.n	8025fea <GATT_Add_Char_Desc_Core+0x186>
 8025fe4:	4837      	ldr	r0, [pc, #220]	@ (80260c4 <__arm_cp.13_0>)
 8025fe6:	7d85      	ldrb	r5, [r0, #22]
 8025fe8:	e000      	b.n	8025fec <GATT_Add_Char_Desc_Core+0x188>
 8025fea:	2501      	movs	r5, #1
 8025fec:	9807      	ldr	r0, [sp, #28]
 8025fee:	4368      	muls	r0, r5
 8025ff0:	b280      	uxth	r0, r0
 8025ff2:	f7ff ff1f 	bl	8025e34 <GATT_New_Value>
 8025ff6:	b198      	cbz	r0, 8026020 <GATT_Add_Char_Desc_Core+0x1bc>
 8025ff8:	4606      	mov	r6, r0
 8025ffa:	4642      	mov	r2, r8
 8025ffc:	4653      	mov	r3, sl
 8025ffe:	4294      	cmp	r4, r2
 8026000:	d010      	beq.n	8026024 <GATT_Add_Char_Desc_Core+0x1c0>
 8026002:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8026006:	2801      	cmp	r0, #1
 8026008:	d108      	bne.n	802601c <GATT_Add_Char_Desc_Core+0x1b8>
 802600a:	8920      	ldrh	r0, [r4, #8]
 802600c:	f5a0 5124 	sub.w	r1, r0, #10496	@ 0x2900
 8026010:	2905      	cmp	r1, #5
 8026012:	d803      	bhi.n	802601c <GATT_Add_Char_Desc_Core+0x1b8>
 8026014:	2904      	cmp	r1, #4
 8026016:	d001      	beq.n	802601c <GATT_Add_Char_Desc_Core+0x1b8>
 8026018:	4298      	cmp	r0, r3
 802601a:	d051      	beq.n	80260c0 <GATT_Add_Char_Desc_Core+0x25c>
 802601c:	6824      	ldr	r4, [r4, #0]
 802601e:	e7ee      	b.n	8025ffe <GATT_Add_Char_Desc_Core+0x19a>
 8026020:	2098      	movs	r0, #152	@ 0x98
 8026022:	e753      	b.n	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 8026024:	683f      	ldr	r7, [r7, #0]
 8026026:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8026028:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802602a:	f887 0022 	strb.w	r0, [r7, #34]	@ 0x22
 802602e:	9807      	ldr	r0, [sp, #28]
 8026030:	f8a7 b01e 	strh.w	fp, [r7, #30]
 8026034:	8438      	strh	r0, [r7, #32]
 8026036:	9806      	ldr	r0, [sp, #24]
 8026038:	8b80      	ldrh	r0, [r0, #28]
 802603a:	3001      	adds	r0, #1
 802603c:	83b8      	strh	r0, [r7, #28]
 802603e:	f107 0008 	add.w	r0, r7, #8
 8026042:	2c01      	cmp	r4, #1
 8026044:	d104      	bne.n	8026050 <GATT_Add_Char_Desc_Core+0x1ec>
 8026046:	ac13      	add	r4, sp, #76	@ 0x4c
 8026048:	cc1e      	ldmia	r4, {r1, r2, r3, r4}
 802604a:	c01e      	stmia	r0!, {r1, r2, r3, r4}
 802604c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802604e:	e003      	b.n	8026058 <GATT_Add_Char_Desc_Core+0x1f4>
 8026050:	a913      	add	r1, sp, #76	@ 0x4c
 8026052:	2210      	movs	r2, #16
 8026054:	f7fa fbf6 	bl	8020844 <ble_memcpy>
 8026058:	f887 4023 	strb.w	r4, [r7, #35]	@ 0x23
 802605c:	2400      	movs	r4, #0
 802605e:	61be      	str	r6, [r7, #24]
 8026060:	b14d      	cbz	r5, 8026076 <GATT_Add_Char_Desc_Core+0x212>
 8026062:	69b8      	ldr	r0, [r7, #24]
 8026064:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026066:	465a      	mov	r2, fp
 8026068:	4420      	add	r0, r4
 802606a:	f7fa fbeb 	bl	8020844 <ble_memcpy>
 802606e:	9807      	ldr	r0, [sp, #28]
 8026070:	3d01      	subs	r5, #1
 8026072:	4404      	add	r4, r0
 8026074:	e7f4      	b.n	8026060 <GATT_Add_Char_Desc_Core+0x1fc>
 8026076:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026078:	f887 0026 	strb.w	r0, [r7, #38]	@ 0x26
 802607c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802607e:	f887 0024 	strb.w	r0, [r7, #36]	@ 0x24
 8026082:	9808      	ldr	r0, [sp, #32]
 8026084:	f887 0025 	strb.w	r0, [r7, #37]	@ 0x25
 8026088:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802608a:	2807      	cmp	r0, #7
 802608c:	bf98      	it	ls
 802608e:	2007      	movls	r0, #7
 8026090:	2810      	cmp	r0, #16
 8026092:	bf28      	it	cs
 8026094:	2010      	movcs	r0, #16
 8026096:	f887 0027 	strb.w	r0, [r7, #39]	@ 0x27
 802609a:	4638      	mov	r0, r7
 802609c:	f005 fb22 	bl	802b6e4 <CList_Remove>
 80260a0:	4640      	mov	r0, r8
 80260a2:	4639      	mov	r1, r7
 80260a4:	f005 fb17 	bl	802b6d6 <CList_Insert>
 80260a8:	8bb8      	ldrh	r0, [r7, #28]
 80260aa:	f642 1102 	movw	r1, #10498	@ 0x2902
 80260ae:	f8a9 0000 	strh.w	r0, [r9]
 80260b2:	458a      	cmp	sl, r1
 80260b4:	bf1c      	itt	ne
 80260b6:	4601      	movne	r1, r0
 80260b8:	f7ff fea2 	blne	8025e00 <GATT_Notify_Service_Change>
 80260bc:	2000      	movs	r0, #0
 80260be:	e705      	b.n	8025ecc <GATT_Add_Char_Desc_Core+0x68>
 80260c0:	2062      	movs	r0, #98	@ 0x62
 80260c2:	e703      	b.n	8025ecc <GATT_Add_Char_Desc_Core+0x68>

080260c4 <__arm_cp.13_0>:
 80260c4:	20009fec 	.word	0x20009fec

080260c8 <ACI_GATT_ADD_CHAR>:
 80260c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260ca:	b087      	sub	sp, #28
 80260cc:	460c      	mov	r4, r1
 80260ce:	4606      	mov	r6, r0
 80260d0:	4668      	mov	r0, sp
 80260d2:	4611      	mov	r1, r2
 80260d4:	461d      	mov	r5, r3
 80260d6:	3004      	adds	r0, #4
 80260d8:	4622      	mov	r2, r4
 80260da:	f000 f81c 	bl	8026116 <GATT_Set_UUID>
 80260de:	b9c0      	cbnz	r0, 8026112 <ACI_GATT_ADD_CHAR+0x4a>
 80260e0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 80260e4:	e9dd c70c 	ldrd	ip, r7, [sp, #48]	@ 0x30
 80260e8:	e9dd 1010 	ldrd	r1, r0, [sp, #64]	@ 0x40
 80260ec:	f8ad 5014 	strh.w	r5, [sp, #20]
 80260f0:	f8ad 6000 	strh.w	r6, [sp]
 80260f4:	f88d 4002 	strb.w	r4, [sp, #2]
 80260f8:	f88d 101a 	strb.w	r1, [sp, #26]
 80260fc:	4669      	mov	r1, sp
 80260fe:	f88d 3018 	strb.w	r3, [sp, #24]
 8026102:	f88d c016 	strb.w	ip, [sp, #22]
 8026106:	f88d 2019 	strb.w	r2, [sp, #25]
 802610a:	f88d 7017 	strb.w	r7, [sp, #23]
 802610e:	f7ff fc91 	bl	8025a34 <GATT_Add_Char_Core>
 8026112:	b007      	add	sp, #28
 8026114:	bdf0      	pop	{r4, r5, r6, r7, pc}

08026116 <GATT_Set_UUID>:
 8026116:	2a01      	cmp	r2, #1
 8026118:	d005      	beq.n	8026126 <GATT_Set_UUID+0x10>
 802611a:	2a02      	cmp	r2, #2
 802611c:	bf1c      	itt	ne
 802611e:	2092      	movne	r0, #146	@ 0x92
 8026120:	4770      	bxne	lr
 8026122:	2210      	movs	r2, #16
 8026124:	e000      	b.n	8026128 <GATT_Set_UUID+0x12>
 8026126:	2202      	movs	r2, #2
 8026128:	b580      	push	{r7, lr}
 802612a:	f7fa fb8b 	bl	8020844 <ble_memcpy>
 802612e:	2000      	movs	r0, #0
 8026130:	bd80      	pop	{r7, pc}

08026132 <GATT_Search_Handle>:
 8026132:	b510      	push	{r4, lr}
 8026134:	3120      	adds	r1, #32
 8026136:	460b      	mov	r3, r1
 8026138:	681b      	ldr	r3, [r3, #0]
 802613a:	428b      	cmp	r3, r1
 802613c:	bf04      	itt	eq
 802613e:	2091      	moveq	r0, #145	@ 0x91
 8026140:	bd10      	popeq	{r4, pc}
 8026142:	8b9c      	ldrh	r4, [r3, #28]
 8026144:	4284      	cmp	r4, r0
 8026146:	bf02      	ittt	eq
 8026148:	6013      	streq	r3, [r2, #0]
 802614a:	2000      	moveq	r0, #0
 802614c:	bd10      	popeq	{r4, pc}
 802614e:	e7f3      	b.n	8026138 <GATT_Search_Handle+0x6>

08026150 <GATT_Update_Char_Value_Core>:
 8026150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026154:	b093      	sub	sp, #76	@ 0x4c
 8026156:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 802615a:	460d      	mov	r5, r1
 802615c:	4606      	mov	r6, r0
 802615e:	2114      	movs	r1, #20
 8026160:	461c      	mov	r4, r3
 8026162:	4617      	mov	r7, r2
 8026164:	4640      	mov	r0, r8
 8026166:	f005 fbfb 	bl	802b960 <__aeabi_memclr>
 802616a:	f8df a31c 	ldr.w	sl, [pc, #796]	@ 8026488 <__arm_cp.19_0>
 802616e:	f89a 01cc 	ldrb.w	r0, [sl, #460]	@ 0x1cc
 8026172:	07c0      	lsls	r0, r0, #31
 8026174:	d101      	bne.n	802617a <GATT_Update_Char_Value_Core+0x2a>
 8026176:	2797      	movs	r7, #151	@ 0x97
 8026178:	e00c      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 802617a:	a912      	add	r1, sp, #72	@ 0x48
 802617c:	4628      	mov	r0, r5
 802617e:	f7ff fe45 	bl	8025e0c <GATT_Search_Service_Handle>
 8026182:	b930      	cbnz	r0, 8026192 <GATT_Update_Char_Value_Core+0x42>
 8026184:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8026186:	aa11      	add	r2, sp, #68	@ 0x44
 8026188:	4638      	mov	r0, r7
 802618a:	4629      	mov	r1, r5
 802618c:	f7ff ffd1 	bl	8026132 <GATT_Search_Handle>
 8026190:	b120      	cbz	r0, 802619c <GATT_Update_Char_Value_Core+0x4c>
 8026192:	2760      	movs	r7, #96	@ 0x60
 8026194:	b2f8      	uxtb	r0, r7
 8026196:	b013      	add	sp, #76	@ 0x4c
 8026198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802619c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802619e:	f890 1023 	ldrb.w	r1, [r0, #35]	@ 0x23
 80261a2:	2901      	cmp	r1, #1
 80261a4:	d117      	bne.n	80261d6 <GATT_Update_Char_Value_Core+0x86>
 80261a6:	8901      	ldrh	r1, [r0, #8]
 80261a8:	f642 0203 	movw	r2, #10243	@ 0x2803
 80261ac:	4291      	cmp	r1, r2
 80261ae:	d112      	bne.n	80261d6 <GATT_Update_Char_Value_Core+0x86>
 80261b0:	e9dd c21d 	ldrd	ip, r2, [sp, #116]	@ 0x74
 80261b4:	f8d0 9000 	ldr.w	r9, [r0]
 80261b8:	f8b9 7020 	ldrh.w	r7, [r9, #32]
 80261bc:	eb02 010c 	add.w	r1, r2, ip
 80261c0:	42b9      	cmp	r1, r7
 80261c2:	d808      	bhi.n	80261d6 <GATT_Update_Char_Value_Core+0x86>
 80261c4:	f899 3022 	ldrb.w	r3, [r9, #34]	@ 0x22
 80261c8:	b13b      	cbz	r3, 80261da <GATT_Update_Char_Value_Core+0x8a>
 80261ca:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
 80261ce:	455f      	cmp	r7, fp
 80261d0:	d301      	bcc.n	80261d6 <GATT_Update_Char_Value_Core+0x86>
 80261d2:	4559      	cmp	r1, fp
 80261d4:	d903      	bls.n	80261de <GATT_Update_Char_Value_Core+0x8e>
 80261d6:	2792      	movs	r7, #146	@ 0x92
 80261d8:	e7dc      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 80261da:	f8b9 b01e 	ldrh.w	fp, [r9, #30]
 80261de:	07e1      	lsls	r1, r4, #31
 80261e0:	bf0f      	iteee	eq
 80261e2:	2700      	moveq	r7, #0
 80261e4:	6981      	ldrne	r1, [r0, #24]
 80261e6:	7809      	ldrbne	r1, [r1, #0]
 80261e8:	f3c1 1700 	ubfxne	r7, r1, #4, #1
 80261ec:	07a1      	lsls	r1, r4, #30
 80261ee:	bf51      	iteee	pl
 80261f0:	2100      	movpl	r1, #0
 80261f2:	6980      	ldrmi	r0, [r0, #24]
 80261f4:	7800      	ldrbmi	r0, [r0, #0]
 80261f6:	f3c0 1140 	ubfxmi	r1, r0, #5, #1
 80261fa:	ea47 0001 	orr.w	r0, r7, r1
 80261fe:	2801      	cmp	r0, #1
 8026200:	d103      	bne.n	802620a <GATT_Update_Char_Value_Core+0xba>
 8026202:	f89a 01cc 	ldrb.w	r0, [sl, #460]	@ 0x1cc
 8026206:	0780      	lsls	r0, r0, #30
 8026208:	d458      	bmi.n	80262bc <GATT_Update_Char_Value_Core+0x16c>
 802620a:	970b      	str	r7, [sp, #44]	@ 0x2c
 802620c:	2000      	movs	r0, #0
 802620e:	2501      	movs	r5, #1
 8026210:	2700      	movs	r7, #0
 8026212:	2600      	movs	r6, #0
 8026214:	f04f 0800 	mov.w	r8, #0
 8026218:	2400      	movs	r4, #0
 802621a:	900a      	str	r0, [sp, #40]	@ 0x28
 802621c:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8026220:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8026222:	4460      	add	r0, ip
 8026224:	f7fa fb0e 	bl	8020844 <ble_memcpy>
 8026228:	f899 0022 	ldrb.w	r0, [r9, #34]	@ 0x22
 802622c:	b108      	cbz	r0, 8026232 <GATT_Update_Char_Value_Core+0xe2>
 802622e:	f8a9 b01e 	strh.w	fp, [r9, #30]
 8026232:	b135      	cbz	r5, 8026242 <GATT_Update_Char_Value_Core+0xf2>
 8026234:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8026236:	2800      	cmp	r0, #0
 8026238:	d0ac      	beq.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 802623a:	4648      	mov	r0, r9
 802623c:	f000 f9b4 	bl	80265a8 <GATT_Send_Notification_Complete_Event>
 8026240:	e7a8      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 8026242:	f8da 11f0 	ldr.w	r1, [sl, #496]	@ 0x1f0
 8026246:	f89a 01cd 	ldrb.w	r0, [sl, #461]	@ 0x1cd
 802624a:	46a4      	mov	ip, r4
 802624c:	aa0c      	add	r2, sp, #48	@ 0x30
 802624e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026250:	3104      	adds	r1, #4
 8026252:	b150      	cbz	r0, 802626a <GATT_Update_Char_Value_Core+0x11a>
 8026254:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 8026258:	b11b      	cbz	r3, 8026262 <GATT_Update_Char_Value_Core+0x112>
 802625a:	7813      	ldrb	r3, [r2, #0]
 802625c:	680d      	ldr	r5, [r1, #0]
 802625e:	432b      	orrs	r3, r5
 8026260:	600b      	str	r3, [r1, #0]
 8026262:	3201      	adds	r2, #1
 8026264:	3124      	adds	r1, #36	@ 0x24
 8026266:	3801      	subs	r0, #1
 8026268:	e7f3      	b.n	8026252 <GATT_Update_Char_Value_Core+0x102>
 802626a:	07a0      	lsls	r0, r4, #30
 802626c:	d510      	bpl.n	8026290 <GATT_Update_Char_Value_Core+0x140>
 802626e:	1cf0      	adds	r0, r6, #3
 8026270:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8026274:	f8b9 101c 	ldrh.w	r1, [r9, #28]
 8026278:	4665      	mov	r5, ip
 802627a:	f8cd c000 	str.w	ip, [sp]
 802627e:	b282      	uxth	r2, r0
 8026280:	2002      	movs	r0, #2
 8026282:	f001 faa9 	bl	80277d8 <ATT_Build_Notif_Or_Ind>
 8026286:	2000      	movs	r0, #0
 8026288:	2102      	movs	r1, #2
 802628a:	462a      	mov	r2, r5
 802628c:	f000 f936 	bl	80264fc <GATT_Send_Notif_Or_Ind>
 8026290:	07e0      	lsls	r0, r4, #31
 8026292:	f43f af7f 	beq.w	8026194 <GATT_Update_Char_Value_Core+0x44>
 8026296:	f8ca 921c 	str.w	r9, [sl, #540]	@ 0x21c
 802629a:	1cf0      	adds	r0, r6, #3
 802629c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80262a0:	f8b9 101c 	ldrh.w	r1, [r9, #28]
 80262a4:	b282      	uxth	r2, r0
 80262a6:	2001      	movs	r0, #1
 80262a8:	f8cd 8000 	str.w	r8, [sp]
 80262ac:	f001 fa94 	bl	80277d8 <ATT_Build_Notif_Or_Ind>
 80262b0:	2000      	movs	r0, #0
 80262b2:	2101      	movs	r1, #1
 80262b4:	4642      	mov	r2, r8
 80262b6:	f000 f921 	bl	80264fc <GATT_Send_Notif_Or_Ind>
 80262ba:	e76b      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 80262bc:	9107      	str	r1, [sp, #28]
 80262be:	f105 0020 	add.w	r0, r5, #32
 80262c2:	f642 0103 	movw	r1, #10243	@ 0x2803
 80262c6:	f642 1202 	movw	r2, #10498	@ 0x2902
 80262ca:	464c      	mov	r4, r9
 80262cc:	6824      	ldr	r4, [r4, #0]
 80262ce:	4284      	cmp	r4, r0
 80262d0:	f43f af81 	beq.w	80261d6 <GATT_Update_Char_Value_Core+0x86>
 80262d4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80262d8:	2b01      	cmp	r3, #1
 80262da:	d1f7      	bne.n	80262cc <GATT_Update_Char_Value_Core+0x17c>
 80262dc:	8923      	ldrh	r3, [r4, #8]
 80262de:	428b      	cmp	r3, r1
 80262e0:	f43f af79 	beq.w	80261d6 <GATT_Update_Char_Value_Core+0x86>
 80262e4:	4293      	cmp	r3, r2
 80262e6:	d1f1      	bne.n	80262cc <GATT_Update_Char_Value_Core+0x17c>
 80262e8:	4630      	mov	r0, r6
 80262ea:	970b      	str	r7, [sp, #44]	@ 0x2c
 80262ec:	e9cd 9b02 	strd	r9, fp, [sp, #8]
 80262f0:	f7ff f9e0 	bl	80256b4 <GATT_Get_Bearer>
 80262f4:	4601      	mov	r1, r0
 80262f6:	2000      	movs	r0, #0
 80262f8:	f04f 0900 	mov.w	r9, #0
 80262fc:	2200      	movs	r2, #0
 80262fe:	2700      	movs	r7, #0
 8026300:	f04f 0b00 	mov.w	fp, #0
 8026304:	900a      	str	r0, [sp, #40]	@ 0x28
 8026306:	4608      	mov	r0, r1
 8026308:	9106      	str	r1, [sp, #24]
 802630a:	9108      	str	r1, [sp, #32]
 802630c:	f89a 01cd 	ldrb.w	r0, [sl, #461]	@ 0x1cd
 8026310:	4583      	cmp	fp, r0
 8026312:	d259      	bcs.n	80263c8 <GATT_Update_Char_Value_Core+0x278>
 8026314:	f8da 01f0 	ldr.w	r0, [sl, #496]	@ 0x1f0
 8026318:	f830 1009 	ldrh.w	r1, [r0, r9]
 802631c:	2900      	cmp	r1, #0
 802631e:	d04d      	beq.n	80263bc <GATT_Update_Char_Value_Core+0x26c>
 8026320:	eb00 0509 	add.w	r5, r0, r9
 8026324:	b116      	cbz	r6, 802632c <GATT_Update_Char_Value_Core+0x1dc>
 8026326:	9806      	ldr	r0, [sp, #24]
 8026328:	4285      	cmp	r5, r0
 802632a:	d147      	bne.n	80263bc <GATT_Update_Char_Value_Core+0x26c>
 802632c:	4628      	mov	r0, r5
 802632e:	9209      	str	r2, [sp, #36]	@ 0x24
 8026330:	f7ff f8f2 	bl	8025518 <GATT_Bearer_Index>
 8026334:	69a1      	ldr	r1, [r4, #24]
 8026336:	f811 0010 	ldrb.w	r0, [r1, r0, lsl #1]
 802633a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802633c:	ea10 0201 	ands.w	r2, r0, r1
 8026340:	f000 0002 	and.w	r0, r0, #2
 8026344:	9907      	ldr	r1, [sp, #28]
 8026346:	ea01 0050 	and.w	r0, r1, r0, lsr #1
 802634a:	bf08      	it	eq
 802634c:	2800      	cmpeq	r0, #0
 802634e:	d00a      	beq.n	8026366 <GATT_Update_Char_Value_Core+0x216>
 8026350:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8026354:	4628      	mov	r0, r5
 8026356:	4621      	mov	r1, r4
 8026358:	2202      	movs	r2, #2
 802635a:	f000 fa74 	bl	8026846 <ATT_Check_Perm>
 802635e:	b128      	cbz	r0, 802636c <GATT_Update_Char_Value_Core+0x21c>
 8026360:	2765      	movs	r7, #101	@ 0x65
 8026362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026364:	e02a      	b.n	80263bc <GATT_Update_Char_Value_Core+0x26c>
 8026366:	e9dd 5208 	ldrd	r5, r2, [sp, #32]
 802636a:	e025      	b.n	80263b8 <GATT_Update_Char_Value_Core+0x268>
 802636c:	9805      	ldr	r0, [sp, #20]
 802636e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026370:	b178      	cbz	r0, 8026392 <GATT_Update_Char_Value_Core+0x242>
 8026372:	f818 000b 	ldrb.w	r0, [r8, fp]
 8026376:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026378:	f041 0101 	orr.w	r1, r1, #1
 802637c:	f040 0001 	orr.w	r0, r0, #1
 8026380:	910a      	str	r1, [sp, #40]	@ 0x28
 8026382:	b291      	uxth	r1, r2
 8026384:	f808 000b 	strb.w	r0, [r8, fp]
 8026388:	8868      	ldrh	r0, [r5, #2]
 802638a:	4288      	cmp	r0, r1
 802638c:	d901      	bls.n	8026392 <GATT_Update_Char_Value_Core+0x242>
 802638e:	9508      	str	r5, [sp, #32]
 8026390:	e000      	b.n	8026394 <GATT_Update_Char_Value_Core+0x244>
 8026392:	4610      	mov	r0, r2
 8026394:	9904      	ldr	r1, [sp, #16]
 8026396:	b169      	cbz	r1, 80263b4 <GATT_Update_Char_Value_Core+0x264>
 8026398:	f818 100b 	ldrb.w	r1, [r8, fp]
 802639c:	886a      	ldrh	r2, [r5, #2]
 802639e:	f041 0102 	orr.w	r1, r1, #2
 80263a2:	f808 100b 	strb.w	r1, [r8, fp]
 80263a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80263a8:	f041 0102 	orr.w	r1, r1, #2
 80263ac:	910a      	str	r1, [sp, #40]	@ 0x28
 80263ae:	b281      	uxth	r1, r0
 80263b0:	428a      	cmp	r2, r1
 80263b2:	d801      	bhi.n	80263b8 <GATT_Update_Char_Value_Core+0x268>
 80263b4:	4602      	mov	r2, r0
 80263b6:	9d08      	ldr	r5, [sp, #32]
 80263b8:	b92e      	cbnz	r6, 80263c6 <GATT_Update_Char_Value_Core+0x276>
 80263ba:	9508      	str	r5, [sp, #32]
 80263bc:	f109 0924 	add.w	r9, r9, #36	@ 0x24
 80263c0:	f10b 0b01 	add.w	fp, fp, #1
 80263c4:	e7a2      	b.n	802630c <GATT_Update_Char_Value_Core+0x1bc>
 80263c6:	9508      	str	r5, [sp, #32]
 80263c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80263ca:	b319      	cbz	r1, 8026414 <GATT_Update_Char_Value_Core+0x2c4>
 80263cc:	f99a 01cc 	ldrsb.w	r0, [sl, #460]	@ 0x1cc
 80263d0:	2800      	cmp	r0, #0
 80263d2:	d456      	bmi.n	8026482 <GATT_Update_Char_Value_Core+0x332>
 80263d4:	4694      	mov	ip, r2
 80263d6:	f8da 21f0 	ldr.w	r2, [sl, #496]	@ 0x1f0
 80263da:	f001 0601 	and.w	r6, r1, #1
 80263de:	f001 0002 	and.w	r0, r1, #2
 80263e2:	f89a 11cd 	ldrb.w	r1, [sl, #461]	@ 0x1cd
 80263e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80263e8:	3204      	adds	r2, #4
 80263ea:	b1d1      	cbz	r1, 8026422 <GATT_Update_Char_Value_Core+0x2d2>
 80263ec:	f832 4c04 	ldrh.w	r4, [r2, #-4]
 80263f0:	b164      	cbz	r4, 802640c <GATT_Update_Char_Value_Core+0x2bc>
 80263f2:	b138      	cbz	r0, 8026404 <GATT_Update_Char_Value_Core+0x2b4>
 80263f4:	6814      	ldr	r4, [r2, #0]
 80263f6:	07a5      	lsls	r5, r4, #30
 80263f8:	d41e      	bmi.n	8026438 <GATT_Update_Char_Value_Core+0x2e8>
 80263fa:	781d      	ldrb	r5, [r3, #0]
 80263fc:	07ad      	lsls	r5, r5, #30
 80263fe:	d501      	bpl.n	8026404 <GATT_Update_Char_Value_Core+0x2b4>
 8026400:	0724      	lsls	r4, r4, #28
 8026402:	d431      	bmi.n	8026468 <GATT_Update_Char_Value_Core+0x318>
 8026404:	b116      	cbz	r6, 802640c <GATT_Update_Char_Value_Core+0x2bc>
 8026406:	7814      	ldrb	r4, [r2, #0]
 8026408:	07e4      	lsls	r4, r4, #31
 802640a:	d115      	bne.n	8026438 <GATT_Update_Char_Value_Core+0x2e8>
 802640c:	3301      	adds	r3, #1
 802640e:	3224      	adds	r2, #36	@ 0x24
 8026410:	3901      	subs	r1, #1
 8026412:	e7ea      	b.n	80263ea <GATT_Update_Char_Value_Core+0x29a>
 8026414:	2000      	movs	r0, #0
 8026416:	e9dd c21d 	ldrd	ip, r2, [sp, #116]	@ 0x74
 802641a:	e9dd 9b02 	ldrd	r9, fp, [sp, #8]
 802641e:	2501      	movs	r5, #1
 8026420:	e6f7      	b.n	8026212 <GATT_Update_Char_Value_Core+0xc2>
 8026422:	f1ac 0103 	sub.w	r1, ip, #3
 8026426:	b28c      	uxth	r4, r1
 8026428:	9903      	ldr	r1, [sp, #12]
 802642a:	42a1      	cmp	r1, r4
 802642c:	bf38      	it	cc
 802642e:	460c      	movcc	r4, r1
 8026430:	b920      	cbnz	r0, 802643c <GATT_Update_Char_Value_Core+0x2ec>
 8026432:	2000      	movs	r0, #0
 8026434:	9009      	str	r0, [sp, #36]	@ 0x24
 8026436:	e006      	b.n	8026446 <GATT_Update_Char_Value_Core+0x2f6>
 8026438:	2793      	movs	r7, #147	@ 0x93
 802643a:	e6ab      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 802643c:	f000 f8e3 	bl	8026606 <OUTLINED_FUNCTION_1>
 8026440:	4601      	mov	r1, r0
 8026442:	9009      	str	r0, [sp, #36]	@ 0x24
 8026444:	b1b8      	cbz	r0, 8026476 <GATT_Update_Char_Value_Core+0x326>
 8026446:	b91e      	cbnz	r6, 8026450 <GATT_Update_Char_Value_Core+0x300>
 8026448:	2500      	movs	r5, #0
 802644a:	f04f 0800 	mov.w	r8, #0
 802644e:	e004      	b.n	802645a <GATT_Update_Char_Value_Core+0x30a>
 8026450:	f000 f8d9 	bl	8026606 <OUTLINED_FUNCTION_1>
 8026454:	b150      	cbz	r0, 802646c <GATT_Update_Char_Value_Core+0x31c>
 8026456:	4680      	mov	r8, r0
 8026458:	2500      	movs	r5, #0
 802645a:	e9dd c21d 	ldrd	ip, r2, [sp, #116]	@ 0x74
 802645e:	e9dd 9b02 	ldrd	r9, fp, [sp, #8]
 8026462:	4626      	mov	r6, r4
 8026464:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026466:	e6d9      	b.n	802621c <GATT_Update_Char_Value_Core+0xcc>
 8026468:	270c      	movs	r7, #12
 802646a:	e693      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 802646c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802646e:	b110      	cbz	r0, 8026476 <GATT_Update_Char_Value_Core+0x326>
 8026470:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026472:	f002 f96b 	bl	802874c <ACL_Release>
 8026476:	f89a 01cc 	ldrb.w	r0, [sl, #460]	@ 0x1cc
 802647a:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 802647e:	f88a 01cc 	strb.w	r0, [sl, #460]	@ 0x1cc
 8026482:	2764      	movs	r7, #100	@ 0x64
 8026484:	e686      	b.n	8026194 <GATT_Update_Char_Value_Core+0x44>
 8026486:	bf00      	nop

08026488 <__arm_cp.19_0>:
 8026488:	2000a014 	.word	0x2000a014

0802648c <GATT_Check_For_Service_Change>:
 802648c:	b51c      	push	{r2, r3, r4, lr}
 802648e:	f10d 0106 	add.w	r1, sp, #6
 8026492:	aa01      	add	r2, sp, #4
 8026494:	4604      	mov	r4, r0
 8026496:	f001 fb37 	bl	8027b08 <GATT_Get_Change_Vs_Server_Database>
 802649a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 802649e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80264a2:	4601      	mov	r1, r0
 80264a4:	4620      	mov	r0, r4
 80264a6:	f000 f801 	bl	80264ac <GATT_Update_For_Service_Change>
 80264aa:	bd1c      	pop	{r2, r3, r4, pc}

080264ac <GATT_Update_For_Service_Change>:
 80264ac:	b510      	push	{r4, lr}
 80264ae:	b086      	sub	sp, #24
 80264b0:	4c10      	ldr	r4, [pc, #64]	@ (80264f4 <__arm_cp.32_0>)
 80264b2:	f894 41cc 	ldrb.w	r4, [r4, #460]	@ 0x1cc
 80264b6:	07a4      	lsls	r4, r4, #30
 80264b8:	d519      	bpl.n	80264ee <GATT_Update_For_Service_Change+0x42>
 80264ba:	b9c1      	cbnz	r1, 80264ee <GATT_Update_For_Service_Change+0x42>
 80264bc:	490e      	ldr	r1, [pc, #56]	@ (80264f8 <__arm_cp.32_1>)
 80264be:	8c09      	ldrh	r1, [r1, #32]
 80264c0:	f011 0102 	ands.w	r1, r1, #2
 80264c4:	d113      	bne.n	80264ee <GATT_Update_For_Service_Change+0x42>
 80264c6:	2100      	movs	r1, #0
 80264c8:	b108      	cbz	r0, 80264ce <GATT_Update_For_Service_Change+0x22>
 80264ca:	8800      	ldrh	r0, [r0, #0]
 80264cc:	e000      	b.n	80264d0 <GATT_Update_For_Service_Change+0x24>
 80264ce:	2000      	movs	r0, #0
 80264d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80264d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80264d8:	aa05      	add	r2, sp, #20
 80264da:	2304      	movs	r3, #4
 80264dc:	e9cd 3100 	strd	r3, r1, [sp]
 80264e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80264e4:	2101      	movs	r1, #1
 80264e6:	2202      	movs	r2, #2
 80264e8:	2302      	movs	r3, #2
 80264ea:	f7ff fe31 	bl	8026150 <GATT_Update_Char_Value_Core>
 80264ee:	b006      	add	sp, #24
 80264f0:	bd10      	pop	{r4, pc}
 80264f2:	bf00      	nop

080264f4 <__arm_cp.32_0>:
 80264f4:	2000a014 	.word	0x2000a014

080264f8 <__arm_cp.32_1>:
 80264f8:	20009fec 	.word	0x20009fec

080264fc <GATT_Send_Notif_Or_Ind>:
 80264fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026500:	4691      	mov	r9, r2
 8026502:	460c      	mov	r4, r1
 8026504:	b130      	cbz	r0, 8026514 <GATT_Send_Notif_Or_Ind+0x18>
 8026506:	2c01      	cmp	r4, #1
 8026508:	d104      	bne.n	8026514 <GATT_Send_Notif_Or_Ind+0x18>
 802650a:	4826      	ldr	r0, [pc, #152]	@ (80265a4 <__arm_cp.35_0>)
 802650c:	f8d0 0218 	ldr.w	r0, [r0, #536]	@ 0x218
 8026510:	4548      	cmp	r0, r9
 8026512:	d138      	bne.n	8026586 <GATT_Send_Notif_Or_Ind+0x8a>
 8026514:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80265a4 <__arm_cp.35_0>
 8026518:	2600      	movs	r6, #0
 802651a:	2200      	movs	r2, #0
 802651c:	2700      	movs	r7, #0
 802651e:	f8d8 01f0 	ldr.w	r0, [r8, #496]	@ 0x1f0
 8026522:	f898 11cd 	ldrb.w	r1, [r8, #461]	@ 0x1cd
 8026526:	b161      	cbz	r1, 8026542 <GATT_Send_Notif_Or_Ind+0x46>
 8026528:	6843      	ldr	r3, [r0, #4]
 802652a:	4223      	tst	r3, r4
 802652c:	d006      	beq.n	802653c <GATT_Send_Notif_Or_Ind+0x40>
 802652e:	8843      	ldrh	r3, [r0, #2]
 8026530:	3201      	adds	r2, #1
 8026532:	b2b5      	uxth	r5, r6
 8026534:	42ab      	cmp	r3, r5
 8026536:	bf84      	itt	hi
 8026538:	461e      	movhi	r6, r3
 802653a:	4607      	movhi	r7, r0
 802653c:	3024      	adds	r0, #36	@ 0x24
 802653e:	3901      	subs	r1, #1
 8026540:	e7f1      	b.n	8026526 <GATT_Send_Notif_Or_Ind+0x2a>
 8026542:	2c01      	cmp	r4, #1
 8026544:	d10a      	bne.n	802655c <GATT_Send_Notif_Or_Ind+0x60>
 8026546:	b2d0      	uxtb	r0, r2
 8026548:	2802      	cmp	r0, #2
 802654a:	d207      	bcs.n	802655c <GATT_Send_Notif_Or_Ind+0x60>
 802654c:	f8d8 021c 	ldr.w	r0, [r8, #540]	@ 0x21c
 8026550:	b120      	cbz	r0, 802655c <GATT_Send_Notif_Or_Ind+0x60>
 8026552:	f000 f829 	bl	80265a8 <GATT_Send_Notification_Complete_Event>
 8026556:	2000      	movs	r0, #0
 8026558:	f8c8 021c 	str.w	r0, [r8, #540]	@ 0x21c
 802655c:	b19f      	cbz	r7, 8026586 <GATT_Send_Notif_Or_Ind+0x8a>
 802655e:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8026562:	b2b0      	uxth	r0, r6
 8026564:	3904      	subs	r1, #4
 8026566:	4281      	cmp	r1, r0
 8026568:	bfc4      	itt	gt
 802656a:	1d30      	addgt	r0, r6, #4
 802656c:	f8a9 0004 	strhgt.w	r0, [r9, #4]
 8026570:	8838      	ldrh	r0, [r7, #0]
 8026572:	f8a9 0008 	strh.w	r0, [r9, #8]
 8026576:	4648      	mov	r0, r9
 8026578:	f7ff f884 	bl	8025684 <GATT_Send_Packet>
 802657c:	2c01      	cmp	r4, #1
 802657e:	d105      	bne.n	802658c <GATT_Send_Notif_Or_Ind+0x90>
 8026580:	f8c8 9218 	str.w	r9, [r8, #536]	@ 0x218
 8026584:	e008      	b.n	8026598 <GATT_Send_Notif_Or_Ind+0x9c>
 8026586:	2000      	movs	r0, #0
 8026588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802658c:	2c02      	cmp	r4, #2
 802658e:	bf02      	ittt	eq
 8026590:	6878      	ldreq	r0, [r7, #4]
 8026592:	f040 0008 	orreq.w	r0, r0, #8
 8026596:	6078      	streq	r0, [r7, #4]
 8026598:	6878      	ldr	r0, [r7, #4]
 802659a:	43a0      	bics	r0, r4
 802659c:	6078      	str	r0, [r7, #4]
 802659e:	2093      	movs	r0, #147	@ 0x93
 80265a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080265a4 <__arm_cp.35_0>:
 80265a4:	2000a014 	.word	0x2000a014

080265a8 <GATT_Send_Notification_Complete_Event>:
 80265a8:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 80265ac:	0709      	lsls	r1, r1, #28
 80265ae:	bf58      	it	pl
 80265b0:	4770      	bxpl	lr
 80265b2:	8b81      	ldrh	r1, [r0, #28]
 80265b4:	2001      	movs	r0, #1
 80265b6:	f7fd b9e5 	b.w	8023984 <EVT_aci_gatt_notification_complete>
	...

080265bc <GATT_Find_Srv_Owner_Of_Handle>:
 80265bc:	b510      	push	{r4, lr}
 80265be:	b1d8      	cbz	r0, 80265f8 <GATT_Find_Srv_Owner_Of_Handle+0x3c>
 80265c0:	4601      	mov	r1, r0
 80265c2:	480e      	ldr	r0, [pc, #56]	@ (80265fc <__arm_cp.37_0>)
 80265c4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	@ 0x1d8
 80265c8:	f500 72ec 	add.w	r2, r0, #472	@ 0x1d8
 80265cc:	4618      	mov	r0, r3
 80265ce:	681b      	ldr	r3, [r3, #0]
 80265d0:	4293      	cmp	r3, r2
 80265d2:	d003      	beq.n	80265dc <GATT_Find_Srv_Owner_Of_Handle+0x20>
 80265d4:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 80265d6:	428c      	cmp	r4, r1
 80265d8:	d9f8      	bls.n	80265cc <GATT_Find_Srv_Owner_Of_Handle+0x10>
 80265da:	bd10      	pop	{r4, pc}
 80265dc:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 80265de:	428a      	cmp	r2, r1
 80265e0:	d2fb      	bcs.n	80265da <GATT_Find_Srv_Owner_Of_Handle+0x1e>
 80265e2:	4602      	mov	r2, r0
 80265e4:	f852 3f20 	ldr.w	r3, [r2, #32]!
 80265e8:	429a      	cmp	r2, r3
 80265ea:	d005      	beq.n	80265f8 <GATT_Find_Srv_Owner_Of_Handle+0x3c>
 80265ec:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80265ee:	8b92      	ldrh	r2, [r2, #28]
 80265f0:	428a      	cmp	r2, r1
 80265f2:	bf38      	it	cc
 80265f4:	2000      	movcc	r0, #0
 80265f6:	bd10      	pop	{r4, pc}
 80265f8:	2000      	movs	r0, #0
 80265fa:	bd10      	pop	{r4, pc}

080265fc <__arm_cp.37_0>:
 80265fc:	2000a014 	.word	0x2000a014

08026600 <OUTLINED_FUNCTION_0>:
 8026600:	4629      	mov	r1, r5
 8026602:	f005 b868 	b.w	802b6d6 <CList_Insert>

08026606 <OUTLINED_FUNCTION_1>:
 8026606:	1ce0      	adds	r0, r4, #3
 8026608:	b281      	uxth	r1, r0
 802660a:	9808      	ldr	r0, [sp, #32]
 802660c:	f7ff b832 	b.w	8025674 <GATT_New_PDU>

08026610 <ATT_Build_Find_By_Type_Val_Rsp>:
 8026610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026614:	b089      	sub	sp, #36	@ 0x24
 8026616:	888c      	ldrh	r4, [r1, #4]
 8026618:	4617      	mov	r7, r2
 802661a:	2c0a      	cmp	r4, #10
 802661c:	d807      	bhi.n	802662e <ATT_Build_Find_By_Type_Val_Rsp+0x1e>
 802661e:	2004      	movs	r0, #4
 8026620:	2106      	movs	r1, #6
 8026622:	2200      	movs	r2, #0
 8026624:	463b      	mov	r3, r7
 8026626:	2400      	movs	r4, #0
 8026628:	f000 f8e4 	bl	80267f4 <ATT_Build_Error_Rsp>
 802662c:	e023      	b.n	8026676 <ATT_Build_Find_By_Type_Val_Rsp+0x66>
 802662e:	4606      	mov	r6, r0
 8026630:	6a08      	ldr	r0, [r1, #32]
 8026632:	4689      	mov	r9, r1
 8026634:	7941      	ldrb	r1, [r0, #5]
 8026636:	7982      	ldrb	r2, [r0, #6]
 8026638:	79c3      	ldrb	r3, [r0, #7]
 802663a:	7a05      	ldrb	r5, [r0, #8]
 802663c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8026640:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8026644:	fa1f fb81 	uxth.w	fp, r1
 8026648:	455b      	cmp	r3, fp
 802664a:	d30d      	bcc.n	8026668 <ATT_Build_Find_By_Type_Val_Rsp+0x58>
 802664c:	0409      	lsls	r1, r1, #16
 802664e:	d00b      	beq.n	8026668 <ATT_Build_Find_By_Type_Val_Rsp+0x58>
 8026650:	f890 800a 	ldrb.w	r8, [r0, #10]
 8026654:	f890 a009 	ldrb.w	sl, [r0, #9]
 8026658:	8871      	ldrh	r1, [r6, #2]
 802665a:	4638      	mov	r0, r7
 802665c:	9304      	str	r3, [sp, #16]
 802665e:	f002 f89b 	bl	8028798 <ACL_Resize>
 8026662:	b160      	cbz	r0, 802667e <ATT_Build_Find_By_Type_Val_Rsp+0x6e>
 8026664:	2495      	movs	r4, #149	@ 0x95
 8026666:	e006      	b.n	8026676 <ATT_Build_Find_By_Type_Val_Rsp+0x66>
 8026668:	2001      	movs	r0, #1
 802666a:	2106      	movs	r1, #6
 802666c:	465a      	mov	r2, fp
 802666e:	463b      	mov	r3, r7
 8026670:	f000 f8c0 	bl	80267f4 <ATT_Build_Error_Rsp>
 8026674:	2400      	movs	r4, #0
 8026676:	4620      	mov	r0, r4
 8026678:	b009      	add	sp, #36	@ 0x24
 802667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802667e:	6a38      	ldr	r0, [r7, #32]
 8026680:	2107      	movs	r1, #7
 8026682:	9605      	str	r6, [sp, #20]
 8026684:	7101      	strb	r1, [r0, #4]
 8026686:	2001      	movs	r0, #1
 8026688:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 802668c:	4658      	mov	r0, fp
 802668e:	f7ff ff95 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 8026692:	2800      	cmp	r0, #0
 8026694:	f000 80a9 	beq.w	80267ea <ATT_Build_Find_By_Type_Val_Rsp+0x1da>
 8026698:	ea4a 2108 	orr.w	r1, sl, r8, lsl #8
 802669c:	4605      	mov	r5, r0
 802669e:	f1a4 000b 	sub.w	r0, r4, #11
 80266a2:	9700      	str	r7, [sp, #0]
 80266a4:	b280      	uxth	r0, r0
 80266a6:	9103      	str	r1, [sp, #12]
 80266a8:	f021 0101 	bic.w	r1, r1, #1
 80266ac:	9007      	str	r0, [sp, #28]
 80266ae:	9101      	str	r1, [sp, #4]
 80266b0:	494f      	ldr	r1, [pc, #316]	@ (80267f0 <__arm_cp.0_0>)
 80266b2:	f501 71ec 	add.w	r1, r1, #472	@ 0x1d8
 80266b6:	9102      	str	r1, [sp, #8]
 80266b8:	e9dd 6104 	ldrd	r6, r1, [sp, #16]
 80266bc:	9802      	ldr	r0, [sp, #8]
 80266be:	4285      	cmp	r5, r0
 80266c0:	f000 808b 	beq.w	80267da <ATT_Build_Find_By_Type_Val_Rsp+0x1ca>
 80266c4:	462c      	mov	r4, r5
 80266c6:	f834 3f28 	ldrh.w	r3, [r4, #40]!
 80266ca:	42b3      	cmp	r3, r6
 80266cc:	f200 8085 	bhi.w	80267da <ATT_Build_Find_By_Type_Val_Rsp+0x1ca>
 80266d0:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 80266d4:	884a      	ldrh	r2, [r1, #2]
 80266d6:	1a12      	subs	r2, r2, r0
 80266d8:	2a04      	cmp	r2, #4
 80266da:	f2c0 8080 	blt.w	80267de <ATT_Build_Find_By_Type_Val_Rsp+0x1ce>
 80266de:	9801      	ldr	r0, [sp, #4]
 80266e0:	9506      	str	r5, [sp, #24]
 80266e2:	f5b0 5f20 	cmp.w	r0, #10240	@ 0x2800
 80266e6:	d123      	bne.n	8026730 <ATT_Build_Find_By_Type_Val_Rsp+0x120>
 80266e8:	459b      	cmp	fp, r3
 80266ea:	d874      	bhi.n	80267d6 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 80266ec:	f105 0308 	add.w	r3, r5, #8
 80266f0:	f001 f8a2 	bl	8027838 <OUTLINED_FUNCTION_5>
 80266f4:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 80266f8:	9b03      	ldr	r3, [sp, #12]
 80266fa:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
 80266fc:	4293      	cmp	r3, r2
 80266fe:	d16a      	bne.n	80267d6 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 8026700:	9a07      	ldr	r2, [sp, #28]
 8026702:	2a02      	cmp	r2, #2
 8026704:	bf14      	ite	ne
 8026706:	2a10      	cmpne	r2, #16
 8026708:	2800      	cmpeq	r0, #0
 802670a:	d164      	bne.n	80267d6 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802670c:	4628      	mov	r0, r5
 802670e:	4623      	mov	r3, r4
 8026710:	4622      	mov	r2, r4
 8026712:	f850 1f20 	ldr.w	r1, [r0, #32]!
 8026716:	4288      	cmp	r0, r1
 8026718:	bf1c      	itt	ne
 802671a:	6a68      	ldrne	r0, [r5, #36]	@ 0x24
 802671c:	f100 031c 	addne.w	r3, r0, #28
 8026720:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 8026724:	9800      	ldr	r0, [sp, #0]
 8026726:	f000 f874 	bl	8026812 <ATT_fill_type_val_entry>
 802672a:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 802672e:	e052      	b.n	80267d6 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 8026730:	46a8      	mov	r8, r5
 8026732:	f858 4f20 	ldr.w	r4, [r8, #32]!
 8026736:	45a0      	cmp	r8, r4
 8026738:	d04d      	beq.n	80267d6 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802673a:	4544      	cmp	r4, r8
 802673c:	d04b      	beq.n	80267d6 <ATT_Build_Find_By_Type_Val_Rsp+0x1c6>
 802673e:	46a2      	mov	sl, r4
 8026740:	f83a 0f1c 	ldrh.w	r0, [sl, #28]!
 8026744:	4558      	cmp	r0, fp
 8026746:	d322      	bcc.n	802678e <ATT_Build_Find_By_Type_Val_Rsp+0x17e>
 8026748:	42b0      	cmp	r0, r6
 802674a:	d846      	bhi.n	80267da <ATT_Build_Find_By_Type_Val_Rsp+0x1ca>
 802674c:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8026750:	2801      	cmp	r0, #1
 8026752:	d11c      	bne.n	802678e <ATT_Build_Find_By_Type_Val_Rsp+0x17e>
 8026754:	4620      	mov	r0, r4
 8026756:	460e      	mov	r6, r1
 8026758:	f7ff f854 	bl	8025804 <GATT_Attr_Val>
 802675c:	4603      	mov	r3, r0
 802675e:	f001 f86b 	bl	8027838 <OUTLINED_FUNCTION_5>
 8026762:	4605      	mov	r5, r0
 8026764:	4630      	mov	r0, r6
 8026766:	4621      	mov	r1, r4
 8026768:	f001 f860 	bl	802782c <OUTLINED_FUNCTION_3>
 802676c:	8921      	ldrh	r1, [r4, #8]
 802676e:	9a03      	ldr	r2, [sp, #12]
 8026770:	428a      	cmp	r2, r1
 8026772:	bf08      	it	eq
 8026774:	2800      	cmpeq	r0, #0
 8026776:	d105      	bne.n	8026784 <ATT_Build_Find_By_Type_Val_Rsp+0x174>
 8026778:	8be0      	ldrh	r0, [r4, #30]
 802677a:	9a07      	ldr	r2, [sp, #28]
 802677c:	4290      	cmp	r0, r2
 802677e:	bf08      	it	eq
 8026780:	2d00      	cmpeq	r5, #0
 8026782:	d007      	beq.n	8026794 <ATT_Build_Find_By_Type_Val_Rsp+0x184>
 8026784:	4627      	mov	r7, r4
 8026786:	9e04      	ldr	r6, [sp, #16]
 8026788:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 802678c:	e000      	b.n	8026790 <ATT_Build_Find_By_Type_Val_Rsp+0x180>
 802678e:	4627      	mov	r7, r4
 8026790:	683c      	ldr	r4, [r7, #0]
 8026792:	e7d2      	b.n	802673a <ATT_Build_Find_By_Type_Val_Rsp+0x12a>
 8026794:	9805      	ldr	r0, [sp, #20]
 8026796:	8842      	ldrh	r2, [r0, #2]
 8026798:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 802679c:	1a12      	subs	r2, r2, r0
 802679e:	2a04      	cmp	r2, #4
 80267a0:	db1d      	blt.n	80267de <ATT_Build_Find_By_Type_Val_Rsp+0x1ce>
 80267a2:	f642 0003 	movw	r0, #10243	@ 0x2803
 80267a6:	4281      	cmp	r1, r0
 80267a8:	f642 0103 	movw	r1, #10243	@ 0x2803
 80267ac:	d108      	bne.n	80267c0 <ATT_Build_Find_By_Type_Val_Rsp+0x1b0>
 80267ae:	9e04      	ldr	r6, [sp, #16]
 80267b0:	4627      	mov	r7, r4
 80267b2:	6824      	ldr	r4, [r4, #0]
 80267b4:	4544      	cmp	r4, r8
 80267b6:	bf1c      	itt	ne
 80267b8:	8920      	ldrhne	r0, [r4, #8]
 80267ba:	4288      	cmpne	r0, r1
 80267bc:	d1f8      	bne.n	80267b0 <ATT_Build_Find_By_Type_Val_Rsp+0x1a0>
 80267be:	e001      	b.n	80267c4 <ATT_Build_Find_By_Type_Val_Rsp+0x1b4>
 80267c0:	4627      	mov	r7, r4
 80267c2:	9e04      	ldr	r6, [sp, #16]
 80267c4:	f107 031c 	add.w	r3, r7, #28
 80267c8:	9800      	ldr	r0, [sp, #0]
 80267ca:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 80267ce:	4652      	mov	r2, sl
 80267d0:	f000 f81f 	bl	8026812 <ATT_fill_type_val_entry>
 80267d4:	e7d8      	b.n	8026788 <ATT_Build_Find_By_Type_Val_Rsp+0x178>
 80267d6:	682d      	ldr	r5, [r5, #0]
 80267d8:	e770      	b.n	80266bc <ATT_Build_Find_By_Type_Val_Rsp+0xac>
 80267da:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 80267de:	9f00      	ldr	r7, [sp, #0]
 80267e0:	2802      	cmp	r0, #2
 80267e2:	d302      	bcc.n	80267ea <ATT_Build_Find_By_Type_Val_Rsp+0x1da>
 80267e4:	3004      	adds	r0, #4
 80267e6:	80b8      	strh	r0, [r7, #4]
 80267e8:	e744      	b.n	8026674 <ATT_Build_Find_By_Type_Val_Rsp+0x64>
 80267ea:	200a      	movs	r0, #10
 80267ec:	e73d      	b.n	802666a <ATT_Build_Find_By_Type_Val_Rsp+0x5a>
 80267ee:	bf00      	nop

080267f0 <__arm_cp.0_0>:
 80267f0:	2000a014 	.word	0x2000a014

080267f4 <ATT_Build_Error_Rsp>:
 80267f4:	b5b0      	push	{r4, r5, r7, lr}
 80267f6:	6a1c      	ldr	r4, [r3, #32]
 80267f8:	2501      	movs	r5, #1
 80267fa:	7125      	strb	r5, [r4, #4]
 80267fc:	6a1c      	ldr	r4, [r3, #32]
 80267fe:	7161      	strb	r1, [r4, #5]
 8026800:	0a11      	lsrs	r1, r2, #8
 8026802:	6a1c      	ldr	r4, [r3, #32]
 8026804:	71e1      	strb	r1, [r4, #7]
 8026806:	71a2      	strb	r2, [r4, #6]
 8026808:	6a19      	ldr	r1, [r3, #32]
 802680a:	7208      	strb	r0, [r1, #8]
 802680c:	2009      	movs	r0, #9
 802680e:	8098      	strh	r0, [r3, #4]
 8026810:	bdb0      	pop	{r4, r5, r7, pc}

08026812 <ATT_fill_type_val_entry>:
 8026812:	b570      	push	{r4, r5, r6, lr}
 8026814:	4606      	mov	r6, r0
 8026816:	8808      	ldrh	r0, [r1, #0]
 8026818:	461c      	mov	r4, r3
 802681a:	4613      	mov	r3, r2
 802681c:	460d      	mov	r5, r1
 802681e:	2202      	movs	r2, #2
 8026820:	3004      	adds	r0, #4
 8026822:	b281      	uxth	r1, r0
 8026824:	4630      	mov	r0, r6
 8026826:	f002 f81e 	bl	8028866 <ACL_Set_Data>
 802682a:	8828      	ldrh	r0, [r5, #0]
 802682c:	2202      	movs	r2, #2
 802682e:	4623      	mov	r3, r4
 8026830:	1c81      	adds	r1, r0, #2
 8026832:	3006      	adds	r0, #6
 8026834:	8029      	strh	r1, [r5, #0]
 8026836:	b281      	uxth	r1, r0
 8026838:	4630      	mov	r0, r6
 802683a:	f002 f814 	bl	8028866 <ACL_Set_Data>
 802683e:	8828      	ldrh	r0, [r5, #0]
 8026840:	3002      	adds	r0, #2
 8026842:	8028      	strh	r0, [r5, #0]
 8026844:	bd70      	pop	{r4, r5, r6, pc}

08026846 <ATT_Check_Perm>:
 8026846:	b5b0      	push	{r4, r5, r7, lr}
 8026848:	460c      	mov	r4, r1
 802684a:	f891 1027 	ldrb.w	r1, [r1, #39]	@ 0x27
 802684e:	8800      	ldrh	r0, [r0, #0]
 8026850:	4615      	mov	r5, r2
 8026852:	f002 fe95 	bl	8029580 <SMP_Get_Sec_Status>
 8026856:	2d01      	cmp	r5, #1
 8026858:	d11c      	bne.n	8026894 <ATT_Check_Perm+0x4e>
 802685a:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 802685e:	07ca      	lsls	r2, r1, #31
 8026860:	d004      	beq.n	802686c <ATT_Check_Perm+0x26>
 8026862:	f010 0f60 	tst.w	r0, #96	@ 0x60
 8026866:	d034      	beq.n	80268d2 <ATT_Check_Perm+0x8c>
 8026868:	06c2      	lsls	r2, r0, #27
 802686a:	d532      	bpl.n	80268d2 <ATT_Check_Perm+0x8c>
 802686c:	078a      	lsls	r2, r1, #30
 802686e:	bf44      	itt	mi
 8026870:	b242      	sxtbmi	r2, r0
 8026872:	2a00      	cmpmi	r2, #0
 8026874:	d43b      	bmi.n	80268ee <ATT_Check_Perm+0xa8>
 8026876:	f011 0104 	ands.w	r1, r1, #4
 802687a:	d002      	beq.n	8026882 <ATT_Check_Perm+0x3c>
 802687c:	f010 0210 	ands.w	r2, r0, #16
 8026880:	d01d      	beq.n	80268be <ATT_Check_Perm+0x78>
 8026882:	b109      	cbz	r1, 8026888 <ATT_Check_Perm+0x42>
 8026884:	0700      	lsls	r0, r0, #28
 8026886:	d434      	bmi.n	80268f2 <ATT_Check_Perm+0xac>
 8026888:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 802688c:	2102      	movs	r1, #2
 802688e:	ea21 0040 	bic.w	r0, r1, r0, lsl #1
 8026892:	bdb0      	pop	{r4, r5, r7, pc}
 8026894:	2d08      	cmp	r5, #8
 8026896:	d103      	bne.n	80268a0 <ATT_Check_Perm+0x5a>
 8026898:	06c1      	lsls	r1, r0, #27
 802689a:	bf44      	itt	mi
 802689c:	2004      	movmi	r0, #4
 802689e:	bdb0      	popmi	{r4, r5, r7, pc}
 80268a0:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80268a4:	070a      	lsls	r2, r1, #28
 80268a6:	d40c      	bmi.n	80268c2 <ATT_Check_Perm+0x7c>
 80268a8:	06ca      	lsls	r2, r1, #27
 80268aa:	bf44      	itt	mi
 80268ac:	b242      	sxtbmi	r2, r0
 80268ae:	2a00      	cmpmi	r2, #0
 80268b0:	d41d      	bmi.n	80268ee <ATT_Check_Perm+0xa8>
 80268b2:	f011 0120 	ands.w	r1, r1, #32
 80268b6:	d00e      	beq.n	80268d6 <ATT_Check_Perm+0x90>
 80268b8:	f010 0210 	ands.w	r2, r0, #16
 80268bc:	d10b      	bne.n	80268d6 <ATT_Check_Perm+0x90>
 80268be:	200f      	movs	r0, #15
 80268c0:	bdb0      	pop	{r4, r5, r7, pc}
 80268c2:	f010 0f60 	tst.w	r0, #96	@ 0x60
 80268c6:	d004      	beq.n	80268d2 <ATT_Check_Perm+0x8c>
 80268c8:	2d08      	cmp	r5, #8
 80268ca:	d0ed      	beq.n	80268a8 <ATT_Check_Perm+0x62>
 80268cc:	f010 0210 	ands.w	r2, r0, #16
 80268d0:	d1ea      	bne.n	80268a8 <ATT_Check_Perm+0x62>
 80268d2:	2005      	movs	r0, #5
 80268d4:	bdb0      	pop	{r4, r5, r7, pc}
 80268d6:	b109      	cbz	r1, 80268dc <ATT_Check_Perm+0x96>
 80268d8:	0700      	lsls	r0, r0, #28
 80268da:	d40a      	bmi.n	80268f2 <ATT_Check_Perm+0xac>
 80268dc:	2d04      	cmp	r5, #4
 80268de:	d00a      	beq.n	80268f6 <ATT_Check_Perm+0xb0>
 80268e0:	2d02      	cmp	r5, #2
 80268e2:	d10d      	bne.n	8026900 <ATT_Check_Perm+0xba>
 80268e4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80268e8:	0780      	lsls	r0, r0, #30
 80268ea:	d50f      	bpl.n	802690c <ATT_Check_Perm+0xc6>
 80268ec:	e010      	b.n	8026910 <ATT_Check_Perm+0xca>
 80268ee:	2008      	movs	r0, #8
 80268f0:	bdb0      	pop	{r4, r5, r7, pc}
 80268f2:	200c      	movs	r0, #12
 80268f4:	bdb0      	pop	{r4, r5, r7, pc}
 80268f6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80268fa:	0740      	lsls	r0, r0, #29
 80268fc:	d506      	bpl.n	802690c <ATT_Check_Perm+0xc6>
 80268fe:	e007      	b.n	8026910 <ATT_Check_Perm+0xca>
 8026900:	2d08      	cmp	r5, #8
 8026902:	d105      	bne.n	8026910 <ATT_Check_Perm+0xca>
 8026904:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8026908:	0700      	lsls	r0, r0, #28
 802690a:	d401      	bmi.n	8026910 <ATT_Check_Perm+0xca>
 802690c:	2003      	movs	r0, #3
 802690e:	bdb0      	pop	{r4, r5, r7, pc}
 8026910:	2000      	movs	r0, #0
 8026912:	bdb0      	pop	{r4, r5, r7, pc}

08026914 <ATT_Build_Read_By_Type_Rsp>:
 8026914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026918:	b0d1      	sub	sp, #324	@ 0x144
 802691a:	4605      	mov	r5, r0
 802691c:	8888      	ldrh	r0, [r1, #4]
 802691e:	4614      	mov	r4, r2
 8026920:	460f      	mov	r7, r1
 8026922:	280b      	cmp	r0, #11
 8026924:	bf18      	it	ne
 8026926:	2819      	cmpne	r0, #25
 8026928:	d126      	bne.n	8026978 <ATT_Build_Read_By_Type_Rsp+0x64>
 802692a:	6a38      	ldr	r0, [r7, #32]
 802692c:	7941      	ldrb	r1, [r0, #5]
 802692e:	7982      	ldrb	r2, [r0, #6]
 8026930:	79c3      	ldrb	r3, [r0, #7]
 8026932:	7a00      	ldrb	r0, [r0, #8]
 8026934:	ea43 2b00 	orr.w	fp, r3, r0, lsl #8
 8026938:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 802693c:	fa1f f980 	uxth.w	r9, r0
 8026940:	45cb      	cmp	fp, r9
 8026942:	d311      	bcc.n	8026968 <ATT_Build_Read_By_Type_Rsp+0x54>
 8026944:	0400      	lsls	r0, r0, #16
 8026946:	d00f      	beq.n	8026968 <ATT_Build_Read_By_Type_Rsp+0x54>
 8026948:	49a9      	ldr	r1, [pc, #676]	@ (8026bf0 <__arm_cp.4_0>)
 802694a:	a84d      	add	r0, sp, #308	@ 0x134
 802694c:	2210      	movs	r2, #16
 802694e:	f7f9 ff79 	bl	8020844 <ble_memcpy>
 8026952:	a949      	add	r1, sp, #292	@ 0x124
 8026954:	4638      	mov	r0, r7
 8026956:	f000 f94f 	bl	8026bf8 <ATT_Get_UUID128_From_Read_By_Type_Req>
 802695a:	8869      	ldrh	r1, [r5, #2]
 802695c:	4620      	mov	r0, r4
 802695e:	f001 ff1b 	bl	8028798 <ACL_Resize>
 8026962:	b188      	cbz	r0, 8026988 <ATT_Build_Read_By_Type_Rsp+0x74>
 8026964:	2595      	movs	r5, #149	@ 0x95
 8026966:	e00b      	b.n	8026980 <ATT_Build_Read_By_Type_Rsp+0x6c>
 8026968:	2001      	movs	r0, #1
 802696a:	2108      	movs	r1, #8
 802696c:	464a      	mov	r2, r9
 802696e:	4623      	mov	r3, r4
 8026970:	f7ff ff40 	bl	80267f4 <ATT_Build_Error_Rsp>
 8026974:	2500      	movs	r5, #0
 8026976:	e003      	b.n	8026980 <ATT_Build_Read_By_Type_Rsp+0x6c>
 8026978:	2004      	movs	r0, #4
 802697a:	2108      	movs	r1, #8
 802697c:	f000 ff44 	bl	8027808 <OUTLINED_FUNCTION_0>
 8026980:	4628      	mov	r0, r5
 8026982:	b051      	add	sp, #324	@ 0x144
 8026984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026988:	4648      	mov	r0, r9
 802698a:	f7ff fe17 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 802698e:	2800      	cmp	r0, #0
 8026990:	f000 811c 	beq.w	8026bcc <ATT_Build_Read_By_Type_Rsp+0x2b8>
 8026994:	4607      	mov	r7, r0
 8026996:	a84d      	add	r0, sp, #308	@ 0x134
 8026998:	f04f 0800 	mov.w	r8, #0
 802699c:	9405      	str	r4, [sp, #20]
 802699e:	9508      	str	r5, [sp, #32]
 80269a0:	f8cd b008 	str.w	fp, [sp, #8]
 80269a4:	300c      	adds	r0, #12
 80269a6:	9006      	str	r0, [sp, #24]
 80269a8:	2000      	movs	r0, #0
 80269aa:	9001      	str	r0, [sp, #4]
 80269ac:	2002      	movs	r0, #2
 80269ae:	9009      	str	r0, [sp, #36]	@ 0x24
 80269b0:	4890      	ldr	r0, [pc, #576]	@ (8026bf4 <__arm_cp.4_1>)
 80269b2:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 80269b6:	9003      	str	r0, [sp, #12]
 80269b8:	2000      	movs	r0, #0
 80269ba:	9004      	str	r0, [sp, #16]
 80269bc:	9803      	ldr	r0, [sp, #12]
 80269be:	4287      	cmp	r7, r0
 80269c0:	f000 80f4 	beq.w	8026bac <ATT_Build_Read_By_Type_Rsp+0x298>
 80269c4:	9707      	str	r7, [sp, #28]
 80269c6:	f837 0f28 	ldrh.w	r0, [r7, #40]!
 80269ca:	4558      	cmp	r0, fp
 80269cc:	f200 80ee 	bhi.w	8026bac <ATT_Build_Read_By_Type_Rsp+0x298>
 80269d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80269d2:	8869      	ldrh	r1, [r5, #2]
 80269d4:	fa5f f588 	uxtb.w	r5, r8
 80269d8:	b280      	uxth	r0, r0
 80269da:	1a08      	subs	r0, r1, r0
 80269dc:	42a8      	cmp	r0, r5
 80269de:	f2c0 80e4 	blt.w	8026baa <ATT_Build_Read_By_Type_Rsp+0x296>
 80269e2:	9e07      	ldr	r6, [sp, #28]
 80269e4:	9806      	ldr	r0, [sp, #24]
 80269e6:	2202      	movs	r2, #2
 80269e8:	f106 012a 	add.w	r1, r6, #42	@ 0x2a
 80269ec:	f7f9 ff2a 	bl	8020844 <ble_memcpy>
 80269f0:	a84d      	add	r0, sp, #308	@ 0x134
 80269f2:	a949      	add	r1, sp, #292	@ 0x124
 80269f4:	2210      	movs	r2, #16
 80269f6:	f7f9 ffad 	bl	8020954 <ble_memcmp>
 80269fa:	2800      	cmp	r0, #0
 80269fc:	f000 8095 	beq.w	8026b2a <ATT_Build_Read_By_Type_Rsp+0x216>
 8026a00:	4634      	mov	r4, r6
 8026a02:	f854 7f20 	ldr.w	r7, [r4, #32]!
 8026a06:	42bc      	cmp	r4, r7
 8026a08:	f000 8099 	beq.w	8026b3e <ATT_Build_Read_By_Type_Rsp+0x22a>
 8026a0c:	9d08      	ldr	r5, [sp, #32]
 8026a0e:	42a7      	cmp	r7, r4
 8026a10:	f000 8096 	beq.w	8026b40 <ATT_Build_Read_By_Type_Rsp+0x22c>
 8026a14:	46ba      	mov	sl, r7
 8026a16:	f83a 0f1c 	ldrh.w	r0, [sl, #28]!
 8026a1a:	4548      	cmp	r0, r9
 8026a1c:	f0c0 8083 	bcc.w	8026b26 <ATT_Build_Read_By_Type_Rsp+0x212>
 8026a20:	4558      	cmp	r0, fp
 8026a22:	f200 80c3 	bhi.w	8026bac <ATT_Build_Read_By_Type_Rsp+0x298>
 8026a26:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 8026a2a:	f107 0108 	add.w	r1, r7, #8
 8026a2e:	2801      	cmp	r0, #1
 8026a30:	d104      	bne.n	8026a3c <ATT_Build_Read_By_Type_Rsp+0x128>
 8026a32:	9806      	ldr	r0, [sp, #24]
 8026a34:	2202      	movs	r2, #2
 8026a36:	f7f9 ff05 	bl	8020844 <ble_memcpy>
 8026a3a:	a94d      	add	r1, sp, #308	@ 0x134
 8026a3c:	4608      	mov	r0, r1
 8026a3e:	a949      	add	r1, sp, #292	@ 0x124
 8026a40:	2210      	movs	r2, #16
 8026a42:	f7f9 ff87 	bl	8020954 <ble_memcmp>
 8026a46:	2800      	cmp	r0, #0
 8026a48:	d16d      	bne.n	8026b26 <ATT_Build_Read_By_Type_Rsp+0x212>
 8026a4a:	4628      	mov	r0, r5
 8026a4c:	4639      	mov	r1, r7
 8026a4e:	f000 feed 	bl	802782c <OUTLINED_FUNCTION_3>
 8026a52:	ea5f 6108 	movs.w	r1, r8, lsl #24
 8026a56:	d001      	beq.n	8026a5c <ATT_Build_Read_By_Type_Rsp+0x148>
 8026a58:	8869      	ldrh	r1, [r5, #2]
 8026a5a:	e012      	b.n	8026a82 <ATT_Build_Read_By_Type_Rsp+0x16e>
 8026a5c:	2800      	cmp	r0, #0
 8026a5e:	f040 80c1 	bne.w	8026be4 <ATT_Build_Read_By_Type_Rsp+0x2d0>
 8026a62:	8bfa      	ldrh	r2, [r7, #30]
 8026a64:	f102 0802 	add.w	r8, r2, #2
 8026a68:	4611      	mov	r1, r2
 8026a6a:	9204      	str	r2, [sp, #16]
 8026a6c:	2afd      	cmp	r2, #253	@ 0xfd
 8026a6e:	bf88      	it	hi
 8026a70:	f04f 38ff 	movhi.w	r8, #4294967295
 8026a74:	8869      	ldrh	r1, [r5, #2]
 8026a76:	fa5f f288 	uxtb.w	r2, r8
 8026a7a:	1e8b      	subs	r3, r1, #2
 8026a7c:	4293      	cmp	r3, r2
 8026a7e:	bfb8      	it	lt
 8026a80:	4698      	movlt	r8, r3
 8026a82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026a84:	fa5f f588 	uxtb.w	r5, r8
 8026a88:	b292      	uxth	r2, r2
 8026a8a:	1a89      	subs	r1, r1, r2
 8026a8c:	42a9      	cmp	r1, r5
 8026a8e:	f2c0 808c 	blt.w	8026baa <ATT_Build_Read_By_Type_Rsp+0x296>
 8026a92:	2800      	cmp	r0, #0
 8026a94:	f040 8089 	bne.w	8026baa <ATT_Build_Read_By_Type_Rsp+0x296>
 8026a98:	9804      	ldr	r0, [sp, #16]
 8026a9a:	8bf9      	ldrh	r1, [r7, #30]
 8026a9c:	b280      	uxth	r0, r0
 8026a9e:	4281      	cmp	r1, r0
 8026aa0:	f040 8083 	bne.w	8026baa <ATT_Build_Read_By_Type_Rsp+0x296>
 8026aa4:	9808      	ldr	r0, [sp, #32]
 8026aa6:	7980      	ldrb	r0, [r0, #6]
 8026aa8:	0700      	lsls	r0, r0, #28
 8026aaa:	d410      	bmi.n	8026ace <ATT_Build_Read_By_Type_Rsp+0x1ba>
 8026aac:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8026ab0:	0740      	lsls	r0, r0, #29
 8026ab2:	d50c      	bpl.n	8026ace <ATT_Build_Read_By_Type_Rsp+0x1ba>
 8026ab4:	9a01      	ldr	r2, [sp, #4]
 8026ab6:	f8ba 0000 	ldrh.w	r0, [sl]
 8026aba:	f10d 032a 	add.w	r3, sp, #42	@ 0x2a
 8026abe:	b2d1      	uxtb	r1, r2
 8026ac0:	3201      	adds	r2, #1
 8026ac2:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8026ac6:	b2d0      	uxtb	r0, r2
 8026ac8:	9201      	str	r2, [sp, #4]
 8026aca:	287c      	cmp	r0, #124	@ 0x7c
 8026acc:	d86d      	bhi.n	8026baa <ATT_Build_Read_By_Type_Rsp+0x296>
 8026ace:	464e      	mov	r6, r9
 8026ad0:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8026ad4:	46c3      	mov	fp, r8
 8026ad6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8026ada:	2202      	movs	r2, #2
 8026adc:	4653      	mov	r3, sl
 8026ade:	f109 0004 	add.w	r0, r9, #4
 8026ae2:	b281      	uxth	r1, r0
 8026ae4:	4640      	mov	r0, r8
 8026ae6:	f001 febe 	bl	8028866 <ACL_Set_Data>
 8026aea:	46a2      	mov	sl, r4
 8026aec:	9c08      	ldr	r4, [sp, #32]
 8026aee:	4638      	mov	r0, r7
 8026af0:	4621      	mov	r1, r4
 8026af2:	f7fe fe87 	bl	8025804 <GATT_Attr_Val>
 8026af6:	4603      	mov	r3, r0
 8026af8:	f109 0006 	add.w	r0, r9, #6
 8026afc:	b281      	uxth	r1, r0
 8026afe:	1ea8      	subs	r0, r5, #2
 8026b00:	b282      	uxth	r2, r0
 8026b02:	4640      	mov	r0, r8
 8026b04:	46d8      	mov	r8, fp
 8026b06:	f001 feae 	bl	8028866 <ACL_Set_Data>
 8026b0a:	44a9      	add	r9, r5
 8026b0c:	8861      	ldrh	r1, [r4, #2]
 8026b0e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8026b12:	fa1f f089 	uxth.w	r0, r9
 8026b16:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8026b1a:	46b1      	mov	r9, r6
 8026b1c:	1a08      	subs	r0, r1, r0
 8026b1e:	42a8      	cmp	r0, r5
 8026b20:	4625      	mov	r5, r4
 8026b22:	4654      	mov	r4, sl
 8026b24:	db42      	blt.n	8026bac <ATT_Build_Read_By_Type_Rsp+0x298>
 8026b26:	683f      	ldr	r7, [r7, #0]
 8026b28:	e771      	b.n	8026a0e <ATT_Build_Read_By_Type_Rsp+0xfa>
 8026b2a:	b165      	cbz	r5, 8026b46 <ATT_Build_Read_By_Type_Rsp+0x232>
 8026b2c:	2d04      	cmp	r5, #4
 8026b2e:	d018      	beq.n	8026b62 <ATT_Build_Read_By_Type_Rsp+0x24e>
 8026b30:	2d12      	cmp	r5, #18
 8026b32:	d13a      	bne.n	8026baa <ATT_Build_Read_By_Type_Rsp+0x296>
 8026b34:	9807      	ldr	r0, [sp, #28]
 8026b36:	9d08      	ldr	r5, [sp, #32]
 8026b38:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8026b3c:	e00c      	b.n	8026b58 <ATT_Build_Read_By_Type_Rsp+0x244>
 8026b3e:	9d08      	ldr	r5, [sp, #32]
 8026b40:	9c05      	ldr	r4, [sp, #20]
 8026b42:	9f07      	ldr	r7, [sp, #28]
 8026b44:	e02f      	b.n	8026ba6 <ATT_Build_Read_By_Type_Rsp+0x292>
 8026b46:	9807      	ldr	r0, [sp, #28]
 8026b48:	9d08      	ldr	r5, [sp, #32]
 8026b4a:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8026b4e:	2801      	cmp	r0, #1
 8026b50:	d102      	bne.n	8026b58 <ATT_Build_Read_By_Type_Rsp+0x244>
 8026b52:	f04f 0804 	mov.w	r8, #4
 8026b56:	e00c      	b.n	8026b72 <ATT_Build_Read_By_Type_Rsp+0x25e>
 8026b58:	f04f 0812 	mov.w	r8, #18
 8026b5c:	2802      	cmp	r0, #2
 8026b5e:	d008      	beq.n	8026b72 <ATT_Build_Read_By_Type_Rsp+0x25e>
 8026b60:	e024      	b.n	8026bac <ATT_Build_Read_By_Type_Rsp+0x298>
 8026b62:	9807      	ldr	r0, [sp, #28]
 8026b64:	f04f 0804 	mov.w	r8, #4
 8026b68:	9d08      	ldr	r5, [sp, #32]
 8026b6a:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8026b6e:	2801      	cmp	r0, #1
 8026b70:	d11c      	bne.n	8026bac <ATT_Build_Read_By_Type_Rsp+0x298>
 8026b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026b74:	46c2      	mov	sl, r8
 8026b76:	2202      	movs	r2, #2
 8026b78:	463b      	mov	r3, r7
 8026b7a:	4680      	mov	r8, r0
 8026b7c:	3004      	adds	r0, #4
 8026b7e:	b281      	uxth	r1, r0
 8026b80:	4620      	mov	r0, r4
 8026b82:	f001 fe70 	bl	8028866 <ACL_Set_Data>
 8026b86:	f108 0006 	add.w	r0, r8, #6
 8026b8a:	9f07      	ldr	r7, [sp, #28]
 8026b8c:	b281      	uxth	r1, r0
 8026b8e:	f1aa 0002 	sub.w	r0, sl, #2
 8026b92:	f107 0308 	add.w	r3, r7, #8
 8026b96:	b282      	uxth	r2, r0
 8026b98:	4620      	mov	r0, r4
 8026b9a:	f001 fe64 	bl	8028866 <ACL_Set_Data>
 8026b9e:	44d0      	add	r8, sl
 8026ba0:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8026ba4:	46d0      	mov	r8, sl
 8026ba6:	683f      	ldr	r7, [r7, #0]
 8026ba8:	e708      	b.n	80269bc <ATT_Build_Read_By_Type_Rsp+0xa8>
 8026baa:	9d08      	ldr	r5, [sp, #32]
 8026bac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026bae:	9c05      	ldr	r4, [sp, #20]
 8026bb0:	b280      	uxth	r0, r0
 8026bb2:	2803      	cmp	r0, #3
 8026bb4:	d30a      	bcc.n	8026bcc <ATT_Build_Read_By_Type_Rsp+0x2b8>
 8026bb6:	9901      	ldr	r1, [sp, #4]
 8026bb8:	0608      	lsls	r0, r1, #24
 8026bba:	d009      	beq.n	8026bd0 <ATT_Build_Read_By_Type_Rsp+0x2bc>
 8026bbc:	b2c9      	uxtb	r1, r1
 8026bbe:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 8026bc2:	4628      	mov	r0, r5
 8026bc4:	f000 f836 	bl	8026c34 <GATT_Read_Multi_Permit_Req_Event>
 8026bc8:	2569      	movs	r5, #105	@ 0x69
 8026bca:	e6d9      	b.n	8026980 <ATT_Build_Read_By_Type_Rsp+0x6c>
 8026bcc:	200a      	movs	r0, #10
 8026bce:	e6cc      	b.n	802696a <ATT_Build_Read_By_Type_Rsp+0x56>
 8026bd0:	6a20      	ldr	r0, [r4, #32]
 8026bd2:	2109      	movs	r1, #9
 8026bd4:	7101      	strb	r1, [r0, #4]
 8026bd6:	6a20      	ldr	r0, [r4, #32]
 8026bd8:	f880 8005 	strb.w	r8, [r0, #5]
 8026bdc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026bde:	3004      	adds	r0, #4
 8026be0:	80a0      	strh	r0, [r4, #4]
 8026be2:	e6c7      	b.n	8026974 <ATT_Build_Read_By_Type_Rsp+0x60>
 8026be4:	f8ba 2000 	ldrh.w	r2, [sl]
 8026be8:	2108      	movs	r1, #8
 8026bea:	9b05      	ldr	r3, [sp, #20]
 8026bec:	e6c0      	b.n	8026970 <ATT_Build_Read_By_Type_Rsp+0x5c>
 8026bee:	bf00      	nop

08026bf0 <__arm_cp.4_0>:
 8026bf0:	0802e7cc 	.word	0x0802e7cc

08026bf4 <__arm_cp.4_1>:
 8026bf4:	2000a014 	.word	0x2000a014

08026bf8 <ATT_Get_UUID128_From_Read_By_Type_Req>:
 8026bf8:	b5b0      	push	{r4, r5, r7, lr}
 8026bfa:	4605      	mov	r5, r0
 8026bfc:	8880      	ldrh	r0, [r0, #4]
 8026bfe:	460c      	mov	r4, r1
 8026c00:	280b      	cmp	r0, #11
 8026c02:	d10d      	bne.n	8026c20 <ATT_Get_UUID128_From_Read_By_Type_Req+0x28>
 8026c04:	490a      	ldr	r1, [pc, #40]	@ (8026c30 <__arm_cp.5_0>)
 8026c06:	4620      	mov	r0, r4
 8026c08:	2210      	movs	r2, #16
 8026c0a:	f7f9 fe1b 	bl	8020844 <ble_memcpy>
 8026c0e:	f104 030c 	add.w	r3, r4, #12
 8026c12:	4628      	mov	r0, r5
 8026c14:	2109      	movs	r1, #9
 8026c16:	2202      	movs	r2, #2
 8026c18:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8026c1c:	f001 be03 	b.w	8028826 <ACL_Get_Data>
 8026c20:	4628      	mov	r0, r5
 8026c22:	2109      	movs	r1, #9
 8026c24:	2210      	movs	r2, #16
 8026c26:	4623      	mov	r3, r4
 8026c28:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8026c2c:	f001 bdfb 	b.w	8028826 <ACL_Get_Data>

08026c30 <__arm_cp.5_0>:
 8026c30:	0802e7cc 	.word	0x0802e7cc

08026c34 <GATT_Read_Multi_Permit_Req_Event>:
 8026c34:	b5b0      	push	{r4, r5, r7, lr}
 8026c36:	f000 fdec 	bl	8027812 <OUTLINED_FUNCTION_1>
 8026c3a:	4601      	mov	r1, r0
 8026c3c:	0068      	lsls	r0, r5, #1
 8026c3e:	4623      	mov	r3, r4
 8026c40:	b2c2      	uxtb	r2, r0
 8026c42:	2001      	movs	r0, #1
 8026c44:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8026c48:	f7fc be5b 	b.w	8023902 <EVT_aci_gatt_read_multi_permit_req>

08026c4c <ATT_Build_Read_Rsp>:
 8026c4c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8026c50:	4606      	mov	r6, r0
 8026c52:	8888      	ldrh	r0, [r1, #4]
 8026c54:	4614      	mov	r4, r2
 8026c56:	2807      	cmp	r0, #7
 8026c58:	d121      	bne.n	8026c9e <ATT_Build_Read_Rsp+0x52>
 8026c5a:	6a08      	ldr	r0, [r1, #32]
 8026c5c:	f000 fde1 	bl	8027822 <OUTLINED_FUNCTION_2>
 8026c60:	b285      	uxth	r5, r0
 8026c62:	4628      	mov	r0, r5
 8026c64:	f7ff fcaa 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 8026c68:	b318      	cbz	r0, 8026cb2 <ATT_Build_Read_Rsp+0x66>
 8026c6a:	4601      	mov	r1, r0
 8026c6c:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8026c6e:	42a8      	cmp	r0, r5
 8026c70:	d11a      	bne.n	8026ca8 <ATT_Build_Read_Rsp+0x5c>
 8026c72:	6a20      	ldr	r0, [r4, #32]
 8026c74:	220b      	movs	r2, #11
 8026c76:	f101 0308 	add.w	r3, r1, #8
 8026c7a:	7102      	strb	r2, [r0, #4]
 8026c7c:	2210      	movs	r2, #16
 8026c7e:	4620      	mov	r0, r4
 8026c80:	f891 502c 	ldrb.w	r5, [r1, #44]	@ 0x2c
 8026c84:	2d01      	cmp	r5, #1
 8026c86:	bf08      	it	eq
 8026c88:	2202      	moveq	r2, #2
 8026c8a:	2105      	movs	r1, #5
 8026c8c:	f001 fdeb 	bl	8028866 <ACL_Set_Data>
 8026c90:	2011      	movs	r0, #17
 8026c92:	2d01      	cmp	r5, #1
 8026c94:	bf08      	it	eq
 8026c96:	2003      	moveq	r0, #3
 8026c98:	3004      	adds	r0, #4
 8026c9a:	80a0      	strh	r0, [r4, #4]
 8026c9c:	e00e      	b.n	8026cbc <ATT_Build_Read_Rsp+0x70>
 8026c9e:	2004      	movs	r0, #4
 8026ca0:	210a      	movs	r1, #10
 8026ca2:	f000 fdb1 	bl	8027808 <OUTLINED_FUNCTION_0>
 8026ca6:	e00a      	b.n	8026cbe <ATT_Build_Read_Rsp+0x72>
 8026ca8:	aa01      	add	r2, sp, #4
 8026caa:	4628      	mov	r0, r5
 8026cac:	f7ff fa41 	bl	8026132 <GATT_Search_Handle>
 8026cb0:	b140      	cbz	r0, 8026cc4 <ATT_Build_Read_Rsp+0x78>
 8026cb2:	2001      	movs	r0, #1
 8026cb4:	210a      	movs	r1, #10
 8026cb6:	462a      	mov	r2, r5
 8026cb8:	f000 fdbb 	bl	8027832 <OUTLINED_FUNCTION_4>
 8026cbc:	2500      	movs	r5, #0
 8026cbe:	4628      	mov	r0, r5
 8026cc0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8026cc4:	9901      	ldr	r1, [sp, #4]
 8026cc6:	4630      	mov	r0, r6
 8026cc8:	f000 fdb0 	bl	802782c <OUTLINED_FUNCTION_3>
 8026ccc:	2800      	cmp	r0, #0
 8026cce:	d1f1      	bne.n	8026cb4 <ATT_Build_Read_Rsp+0x68>
 8026cd0:	9901      	ldr	r1, [sp, #4]
 8026cd2:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 8026cd6:	0740      	lsls	r0, r0, #29
 8026cd8:	d508      	bpl.n	8026cec <ATT_Build_Read_Rsp+0xa0>
 8026cda:	79b0      	ldrb	r0, [r6, #6]
 8026cdc:	0700      	lsls	r0, r0, #28
 8026cde:	d405      	bmi.n	8026cec <ATT_Build_Read_Rsp+0xa0>
 8026ce0:	4630      	mov	r0, r6
 8026ce2:	2200      	movs	r2, #0
 8026ce4:	f000 f824 	bl	8026d30 <GATT_Read_Permit_Req_Event>
 8026ce8:	2569      	movs	r5, #105	@ 0x69
 8026cea:	e7e8      	b.n	8026cbe <ATT_Build_Read_Rsp+0x72>
 8026cec:	8871      	ldrh	r1, [r6, #2]
 8026cee:	4620      	mov	r0, r4
 8026cf0:	f001 fd52 	bl	8028798 <ACL_Resize>
 8026cf4:	b108      	cbz	r0, 8026cfa <ATT_Build_Read_Rsp+0xae>
 8026cf6:	2595      	movs	r5, #149	@ 0x95
 8026cf8:	e7e1      	b.n	8026cbe <ATT_Build_Read_Rsp+0x72>
 8026cfa:	6a20      	ldr	r0, [r4, #32]
 8026cfc:	210b      	movs	r1, #11
 8026cfe:	7101      	strb	r1, [r0, #4]
 8026d00:	9801      	ldr	r0, [sp, #4]
 8026d02:	4631      	mov	r1, r6
 8026d04:	f8b6 8002 	ldrh.w	r8, [r6, #2]
 8026d08:	8bc7      	ldrh	r7, [r0, #30]
 8026d0a:	f7fe fd7b 	bl	8025804 <GATT_Attr_Val>
 8026d0e:	4603      	mov	r3, r0
 8026d10:	f1a8 0001 	sub.w	r0, r8, #1
 8026d14:	b280      	uxth	r0, r0
 8026d16:	42b8      	cmp	r0, r7
 8026d18:	bf38      	it	cc
 8026d1a:	4607      	movcc	r7, r0
 8026d1c:	4620      	mov	r0, r4
 8026d1e:	463a      	mov	r2, r7
 8026d20:	2105      	movs	r1, #5
 8026d22:	f001 fda0 	bl	8028866 <ACL_Set_Data>
 8026d26:	1c78      	adds	r0, r7, #1
 8026d28:	b281      	uxth	r1, r0
 8026d2a:	4281      	cmp	r1, r0
 8026d2c:	d0b4      	beq.n	8026c98 <ATT_Build_Read_Rsp+0x4c>
 8026d2e:	e7c0      	b.n	8026cb2 <ATT_Build_Read_Rsp+0x66>

08026d30 <GATT_Read_Permit_Req_Event>:
 8026d30:	b5b0      	push	{r4, r5, r7, lr}
 8026d32:	f000 fd6e 	bl	8027812 <OUTLINED_FUNCTION_1>
 8026d36:	4601      	mov	r1, r0
 8026d38:	8baa      	ldrh	r2, [r5, #28]
 8026d3a:	2001      	movs	r0, #1
 8026d3c:	4623      	mov	r3, r4
 8026d3e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8026d42:	f7fc bdd9 	b.w	80238f8 <EVT_aci_gatt_read_permit_req>

08026d46 <ATT_Build_Read_Blob_Rsp>:
 8026d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026d4a:	4606      	mov	r6, r0
 8026d4c:	8888      	ldrh	r0, [r1, #4]
 8026d4e:	4614      	mov	r4, r2
 8026d50:	2809      	cmp	r0, #9
 8026d52:	d112      	bne.n	8026d7a <ATT_Build_Read_Blob_Rsp+0x34>
 8026d54:	6a08      	ldr	r0, [r1, #32]
 8026d56:	7941      	ldrb	r1, [r0, #5]
 8026d58:	7982      	ldrb	r2, [r0, #6]
 8026d5a:	f890 8007 	ldrb.w	r8, [r0, #7]
 8026d5e:	7a07      	ldrb	r7, [r0, #8]
 8026d60:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 8026d64:	b285      	uxth	r5, r0
 8026d66:	4628      	mov	r0, r5
 8026d68:	f7ff fc28 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 8026d6c:	b178      	cbz	r0, 8026d8e <ATT_Build_Read_Blob_Rsp+0x48>
 8026d6e:	4601      	mov	r1, r0
 8026d70:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8026d72:	42a8      	cmp	r0, r5
 8026d74:	d106      	bne.n	8026d84 <ATT_Build_Read_Blob_Rsp+0x3e>
 8026d76:	200b      	movs	r0, #11
 8026d78:	e00a      	b.n	8026d90 <ATT_Build_Read_Blob_Rsp+0x4a>
 8026d7a:	2004      	movs	r0, #4
 8026d7c:	210c      	movs	r1, #12
 8026d7e:	f000 fd43 	bl	8027808 <OUTLINED_FUNCTION_0>
 8026d82:	e00a      	b.n	8026d9a <ATT_Build_Read_Blob_Rsp+0x54>
 8026d84:	466a      	mov	r2, sp
 8026d86:	4628      	mov	r0, r5
 8026d88:	f7ff f9d3 	bl	8026132 <GATT_Search_Handle>
 8026d8c:	b140      	cbz	r0, 8026da0 <ATT_Build_Read_Blob_Rsp+0x5a>
 8026d8e:	2001      	movs	r0, #1
 8026d90:	210c      	movs	r1, #12
 8026d92:	462a      	mov	r2, r5
 8026d94:	f000 fd4d 	bl	8027832 <OUTLINED_FUNCTION_4>
 8026d98:	2500      	movs	r5, #0
 8026d9a:	4628      	mov	r0, r5
 8026d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026da0:	9900      	ldr	r1, [sp, #0]
 8026da2:	4630      	mov	r0, r6
 8026da4:	f000 fd42 	bl	802782c <OUTLINED_FUNCTION_3>
 8026da8:	2800      	cmp	r0, #0
 8026daa:	d1f1      	bne.n	8026d90 <ATT_Build_Read_Blob_Rsp+0x4a>
 8026dac:	9900      	ldr	r1, [sp, #0]
 8026dae:	8872      	ldrh	r2, [r6, #2]
 8026db0:	8bc8      	ldrh	r0, [r1, #30]
 8026db2:	1ed3      	subs	r3, r2, #3
 8026db4:	4283      	cmp	r3, r0
 8026db6:	dade      	bge.n	8026d76 <ATT_Build_Read_Blob_Rsp+0x30>
 8026db8:	ea48 2707 	orr.w	r7, r8, r7, lsl #8
 8026dbc:	fa1f f887 	uxth.w	r8, r7
 8026dc0:	4580      	cmp	r8, r0
 8026dc2:	d901      	bls.n	8026dc8 <ATT_Build_Read_Blob_Rsp+0x82>
 8026dc4:	2007      	movs	r0, #7
 8026dc6:	e7e3      	b.n	8026d90 <ATT_Build_Read_Blob_Rsp+0x4a>
 8026dc8:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 8026dcc:	0740      	lsls	r0, r0, #29
 8026dce:	d508      	bpl.n	8026de2 <ATT_Build_Read_Blob_Rsp+0x9c>
 8026dd0:	79b0      	ldrb	r0, [r6, #6]
 8026dd2:	0700      	lsls	r0, r0, #28
 8026dd4:	d405      	bmi.n	8026de2 <ATT_Build_Read_Blob_Rsp+0x9c>
 8026dd6:	4630      	mov	r0, r6
 8026dd8:	4642      	mov	r2, r8
 8026dda:	f7ff ffa9 	bl	8026d30 <GATT_Read_Permit_Req_Event>
 8026dde:	2569      	movs	r5, #105	@ 0x69
 8026de0:	e7db      	b.n	8026d9a <ATT_Build_Read_Blob_Rsp+0x54>
 8026de2:	4620      	mov	r0, r4
 8026de4:	4611      	mov	r1, r2
 8026de6:	f001 fcd7 	bl	8028798 <ACL_Resize>
 8026dea:	b108      	cbz	r0, 8026df0 <ATT_Build_Read_Blob_Rsp+0xaa>
 8026dec:	2595      	movs	r5, #149	@ 0x95
 8026dee:	e7d4      	b.n	8026d9a <ATT_Build_Read_Blob_Rsp+0x54>
 8026df0:	6a20      	ldr	r0, [r4, #32]
 8026df2:	210d      	movs	r1, #13
 8026df4:	7101      	strb	r1, [r0, #4]
 8026df6:	9800      	ldr	r0, [sp, #0]
 8026df8:	8bc1      	ldrh	r1, [r0, #30]
 8026dfa:	f8b6 9002 	ldrh.w	r9, [r6, #2]
 8026dfe:	1bc9      	subs	r1, r1, r7
 8026e00:	b28f      	uxth	r7, r1
 8026e02:	4631      	mov	r1, r6
 8026e04:	f7fe fcfe 	bl	8025804 <GATT_Attr_Val>
 8026e08:	f1a9 0101 	sub.w	r1, r9, #1
 8026e0c:	eb00 0308 	add.w	r3, r0, r8
 8026e10:	4620      	mov	r0, r4
 8026e12:	b28e      	uxth	r6, r1
 8026e14:	42b7      	cmp	r7, r6
 8026e16:	bf38      	it	cc
 8026e18:	463e      	movcc	r6, r7
 8026e1a:	4632      	mov	r2, r6
 8026e1c:	2105      	movs	r1, #5
 8026e1e:	f001 fd22 	bl	8028866 <ACL_Set_Data>
 8026e22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8026e26:	4286      	cmp	r6, r0
 8026e28:	d0b1      	beq.n	8026d8e <ATT_Build_Read_Blob_Rsp+0x48>
 8026e2a:	1d70      	adds	r0, r6, #5
 8026e2c:	80a0      	strh	r0, [r4, #4]
 8026e2e:	e7b3      	b.n	8026d98 <ATT_Build_Read_Blob_Rsp+0x52>

08026e30 <ATT_Build_Read_Multi_Rsp>:
 8026e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e34:	b0c3      	sub	sp, #268	@ 0x10c
 8026e36:	4605      	mov	r5, r0
 8026e38:	8888      	ldrh	r0, [r1, #4]
 8026e3a:	4693      	mov	fp, r2
 8026e3c:	2809      	cmp	r0, #9
 8026e3e:	d301      	bcc.n	8026e44 <ATT_Build_Read_Multi_Rsp+0x14>
 8026e40:	07c0      	lsls	r0, r0, #31
 8026e42:	d10a      	bne.n	8026e5a <ATT_Build_Read_Multi_Rsp+0x2a>
 8026e44:	2004      	movs	r0, #4
 8026e46:	210e      	movs	r1, #14
 8026e48:	2200      	movs	r2, #0
 8026e4a:	465b      	mov	r3, fp
 8026e4c:	2500      	movs	r5, #0
 8026e4e:	f7ff fcd1 	bl	80267f4 <ATT_Build_Error_Rsp>
 8026e52:	4628      	mov	r0, r5
 8026e54:	b043      	add	sp, #268	@ 0x10c
 8026e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e5a:	460e      	mov	r6, r1
 8026e5c:	8869      	ldrh	r1, [r5, #2]
 8026e5e:	4658      	mov	r0, fp
 8026e60:	f001 fc9a 	bl	8028798 <ACL_Resize>
 8026e64:	b108      	cbz	r0, 8026e6a <ATT_Build_Read_Multi_Rsp+0x3a>
 8026e66:	2595      	movs	r5, #149	@ 0x95
 8026e68:	e7f3      	b.n	8026e52 <ATT_Build_Read_Multi_Rsp+0x22>
 8026e6a:	88b0      	ldrh	r0, [r6, #4]
 8026e6c:	f50d 7985 	add.w	r9, sp, #266	@ 0x10a
 8026e70:	2401      	movs	r4, #1
 8026e72:	3805      	subs	r0, #5
 8026e74:	fa1f f880 	uxth.w	r8, r0
 8026e78:	2000      	movs	r0, #0
 8026e7a:	9001      	str	r0, [sp, #4]
 8026e7c:	2001      	movs	r0, #1
 8026e7e:	fa1f fa80 	uxth.w	sl, r0
 8026e82:	45c2      	cmp	sl, r8
 8026e84:	d25a      	bcs.n	8026f3c <ATT_Build_Read_Multi_Rsp+0x10c>
 8026e86:	3004      	adds	r0, #4
 8026e88:	2202      	movs	r2, #2
 8026e8a:	464b      	mov	r3, r9
 8026e8c:	b281      	uxth	r1, r0
 8026e8e:	4630      	mov	r0, r6
 8026e90:	f001 fcc9 	bl	8028826 <ACL_Get_Data>
 8026e94:	f8bd 010a 	ldrh.w	r0, [sp, #266]	@ 0x10a
 8026e98:	f7ff fb90 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 8026e9c:	2800      	cmp	r0, #0
 8026e9e:	d049      	beq.n	8026f34 <ATT_Build_Read_Multi_Rsp+0x104>
 8026ea0:	4601      	mov	r1, r0
 8026ea2:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8026ea4:	f8bd 010a 	ldrh.w	r0, [sp, #266]	@ 0x10a
 8026ea8:	4282      	cmp	r2, r0
 8026eaa:	d10c      	bne.n	8026ec6 <ATT_Build_Read_Multi_Rsp+0x96>
 8026eac:	8868      	ldrh	r0, [r5, #2]
 8026eae:	b2a2      	uxth	r2, r4
 8026eb0:	4290      	cmp	r0, r2
 8026eb2:	d93c      	bls.n	8026f2e <ATT_Build_Read_Multi_Rsp+0xfe>
 8026eb4:	f891 202c 	ldrb.w	r2, [r1, #44]	@ 0x2c
 8026eb8:	2710      	movs	r7, #16
 8026eba:	f101 0308 	add.w	r3, r1, #8
 8026ebe:	2a01      	cmp	r2, #1
 8026ec0:	bf08      	it	eq
 8026ec2:	2702      	moveq	r7, #2
 8026ec4:	e027      	b.n	8026f16 <ATT_Build_Read_Multi_Rsp+0xe6>
 8026ec6:	aa41      	add	r2, sp, #260	@ 0x104
 8026ec8:	f7ff f933 	bl	8026132 <GATT_Search_Handle>
 8026ecc:	bb90      	cbnz	r0, 8026f34 <ATT_Build_Read_Multi_Rsp+0x104>
 8026ece:	9941      	ldr	r1, [sp, #260]	@ 0x104
 8026ed0:	4628      	mov	r0, r5
 8026ed2:	f000 fcab 	bl	802782c <OUTLINED_FUNCTION_3>
 8026ed6:	2800      	cmp	r0, #0
 8026ed8:	d13e      	bne.n	8026f58 <ATT_Build_Read_Multi_Rsp+0x128>
 8026eda:	b2a0      	uxth	r0, r4
 8026edc:	8869      	ldrh	r1, [r5, #2]
 8026ede:	4281      	cmp	r1, r0
 8026ee0:	d925      	bls.n	8026f2e <ATT_Build_Read_Multi_Rsp+0xfe>
 8026ee2:	79a8      	ldrb	r0, [r5, #6]
 8026ee4:	0700      	lsls	r0, r0, #28
 8026ee6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8026ee8:	d40f      	bmi.n	8026f0a <ATT_Build_Read_Multi_Rsp+0xda>
 8026eea:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 8026eee:	0749      	lsls	r1, r1, #29
 8026ef0:	d50b      	bpl.n	8026f0a <ATT_Build_Read_Multi_Rsp+0xda>
 8026ef2:	9b01      	ldr	r3, [sp, #4]
 8026ef4:	8b81      	ldrh	r1, [r0, #28]
 8026ef6:	f10d 070a 	add.w	r7, sp, #10
 8026efa:	b2da      	uxtb	r2, r3
 8026efc:	3301      	adds	r3, #1
 8026efe:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
 8026f02:	b2d9      	uxtb	r1, r3
 8026f04:	9301      	str	r3, [sp, #4]
 8026f06:	297c      	cmp	r1, #124	@ 0x7c
 8026f08:	d818      	bhi.n	8026f3c <ATT_Build_Read_Multi_Rsp+0x10c>
 8026f0a:	4629      	mov	r1, r5
 8026f0c:	8bc7      	ldrh	r7, [r0, #30]
 8026f0e:	f7fe fc79 	bl	8025804 <GATT_Attr_Val>
 8026f12:	4603      	mov	r3, r0
 8026f14:	8868      	ldrh	r0, [r5, #2]
 8026f16:	1b00      	subs	r0, r0, r4
 8026f18:	b280      	uxth	r0, r0
 8026f1a:	42b8      	cmp	r0, r7
 8026f1c:	bf38      	it	cc
 8026f1e:	4607      	movcc	r7, r0
 8026f20:	463a      	mov	r2, r7
 8026f22:	1d20      	adds	r0, r4, #4
 8026f24:	b281      	uxth	r1, r0
 8026f26:	4658      	mov	r0, fp
 8026f28:	f001 fc9d 	bl	8028866 <ACL_Set_Data>
 8026f2c:	443c      	add	r4, r7
 8026f2e:	f10a 0002 	add.w	r0, sl, #2
 8026f32:	e7a4      	b.n	8026e7e <ATT_Build_Read_Multi_Rsp+0x4e>
 8026f34:	f8bd 210a 	ldrh.w	r2, [sp, #266]	@ 0x10a
 8026f38:	2001      	movs	r0, #1
 8026f3a:	e00f      	b.n	8026f5c <ATT_Build_Read_Multi_Rsp+0x12c>
 8026f3c:	b2a0      	uxth	r0, r4
 8026f3e:	2802      	cmp	r0, #2
 8026f40:	d310      	bcc.n	8026f64 <ATT_Build_Read_Multi_Rsp+0x134>
 8026f42:	9901      	ldr	r1, [sp, #4]
 8026f44:	0608      	lsls	r0, r1, #24
 8026f46:	d00f      	beq.n	8026f68 <ATT_Build_Read_Multi_Rsp+0x138>
 8026f48:	b2c9      	uxtb	r1, r1
 8026f4a:	f10d 020a 	add.w	r2, sp, #10
 8026f4e:	4628      	mov	r0, r5
 8026f50:	f7ff fe70 	bl	8026c34 <GATT_Read_Multi_Permit_Req_Event>
 8026f54:	2569      	movs	r5, #105	@ 0x69
 8026f56:	e77c      	b.n	8026e52 <ATT_Build_Read_Multi_Rsp+0x22>
 8026f58:	f8bd 210a 	ldrh.w	r2, [sp, #266]	@ 0x10a
 8026f5c:	210e      	movs	r1, #14
 8026f5e:	465b      	mov	r3, fp
 8026f60:	f7ff fc48 	bl	80267f4 <ATT_Build_Error_Rsp>
 8026f64:	2500      	movs	r5, #0
 8026f66:	e774      	b.n	8026e52 <ATT_Build_Read_Multi_Rsp+0x22>
 8026f68:	f8db 0020 	ldr.w	r0, [fp, #32]
 8026f6c:	210f      	movs	r1, #15
 8026f6e:	7101      	strb	r1, [r0, #4]
 8026f70:	1d20      	adds	r0, r4, #4
 8026f72:	f8ab 0004 	strh.w	r0, [fp, #4]
 8026f76:	e7f5      	b.n	8026f64 <ATT_Build_Read_Multi_Rsp+0x134>

08026f78 <ATT_Build_Read_By_Grp_Type_Rsp>:
 8026f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f7c:	b089      	sub	sp, #36	@ 0x24
 8026f7e:	4680      	mov	r8, r0
 8026f80:	8888      	ldrh	r0, [r1, #4]
 8026f82:	4692      	mov	sl, r2
 8026f84:	280b      	cmp	r0, #11
 8026f86:	bf18      	it	ne
 8026f88:	2819      	cmpne	r0, #25
 8026f8a:	d13f      	bne.n	802700c <ATT_Build_Read_By_Grp_Type_Rsp+0x94>
 8026f8c:	6a08      	ldr	r0, [r1, #32]
 8026f8e:	7942      	ldrb	r2, [r0, #5]
 8026f90:	7983      	ldrb	r3, [r0, #6]
 8026f92:	79c4      	ldrb	r4, [r0, #7]
 8026f94:	7a00      	ldrb	r0, [r0, #8]
 8026f96:	ea44 2900 	orr.w	r9, r4, r0, lsl #8
 8026f9a:	ea42 2003 	orr.w	r0, r2, r3, lsl #8
 8026f9e:	b285      	uxth	r5, r0
 8026fa0:	45a9      	cmp	r9, r5
 8026fa2:	d32b      	bcc.n	8026ffc <ATT_Build_Read_By_Grp_Type_Rsp+0x84>
 8026fa4:	0400      	lsls	r0, r0, #16
 8026fa6:	d029      	beq.n	8026ffc <ATT_Build_Read_By_Grp_Type_Rsp+0x84>
 8026fa8:	f10d 0712 	add.w	r7, sp, #18
 8026fac:	4608      	mov	r0, r1
 8026fae:	4639      	mov	r1, r7
 8026fb0:	f7ff fe22 	bl	8026bf8 <ATT_Get_UUID128_From_Read_By_Type_Req>
 8026fb4:	f107 010c 	add.w	r1, r7, #12
 8026fb8:	f10d 0022 	add.w	r0, sp, #34	@ 0x22
 8026fbc:	2202      	movs	r2, #2
 8026fbe:	f7f9 fc41 	bl	8020844 <ble_memcpy>
 8026fc2:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
 8026fc6:	f020 0001 	bic.w	r0, r0, #1
 8026fca:	f5b0 5f20 	cmp.w	r0, #10240	@ 0x2800
 8026fce:	d128      	bne.n	8027022 <ATT_Build_Read_By_Grp_Type_Rsp+0xaa>
 8026fd0:	4856      	ldr	r0, [pc, #344]	@ (802712c <__arm_cp.11_0>)
 8026fd2:	f500 76ec 	add.w	r6, r0, #472	@ 0x1d8
 8026fd6:	4637      	mov	r7, r6
 8026fd8:	683f      	ldr	r7, [r7, #0]
 8026fda:	42b7      	cmp	r7, r6
 8026fdc:	f000 80a4 	beq.w	8027128 <ATT_Build_Read_By_Grp_Type_Rsp+0x1b0>
 8026fe0:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8026fe2:	42a8      	cmp	r0, r5
 8026fe4:	d3f8      	bcc.n	8026fd8 <ATT_Build_Read_By_Grp_Type_Rsp+0x60>
 8026fe6:	2f00      	cmp	r7, #0
 8026fe8:	f000 809e 	beq.w	8027128 <ATT_Build_Read_By_Grp_Type_Rsp+0x1b0>
 8026fec:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8026ff0:	4650      	mov	r0, sl
 8026ff2:	f001 fbd1 	bl	8028798 <ACL_Resize>
 8026ff6:	b1b0      	cbz	r0, 8027026 <ATT_Build_Read_By_Grp_Type_Rsp+0xae>
 8026ff8:	2595      	movs	r5, #149	@ 0x95
 8026ffa:	e00e      	b.n	802701a <ATT_Build_Read_By_Grp_Type_Rsp+0xa2>
 8026ffc:	2001      	movs	r0, #1
 8026ffe:	2110      	movs	r1, #16
 8027000:	462a      	mov	r2, r5
 8027002:	4653      	mov	r3, sl
 8027004:	f7ff fbf6 	bl	80267f4 <ATT_Build_Error_Rsp>
 8027008:	2500      	movs	r5, #0
 802700a:	e006      	b.n	802701a <ATT_Build_Read_By_Grp_Type_Rsp+0xa2>
 802700c:	2004      	movs	r0, #4
 802700e:	2110      	movs	r1, #16
 8027010:	2200      	movs	r2, #0
 8027012:	4653      	mov	r3, sl
 8027014:	2500      	movs	r5, #0
 8027016:	f7ff fbed 	bl	80267f4 <ATT_Build_Error_Rsp>
 802701a:	4628      	mov	r0, r5
 802701c:	b009      	add	sp, #36	@ 0x24
 802701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027022:	2010      	movs	r0, #16
 8027024:	e7eb      	b.n	8026ffe <ATT_Build_Read_By_Grp_Type_Rsp+0x86>
 8027026:	f04f 0b00 	mov.w	fp, #0
 802702a:	2000      	movs	r0, #0
 802702c:	9001      	str	r0, [sp, #4]
 802702e:	42b7      	cmp	r7, r6
 8027030:	d072      	beq.n	8027118 <ATT_Build_Read_By_Grp_Type_Rsp+0x1a0>
 8027032:	463c      	mov	r4, r7
 8027034:	f834 0f28 	ldrh.w	r0, [r4, #40]!
 8027038:	4548      	cmp	r0, r9
 802703a:	d86d      	bhi.n	8027118 <ATT_Build_Read_By_Grp_Type_Rsp+0x1a0>
 802703c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8027040:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8027042:	4288      	cmp	r0, r1
 8027044:	d166      	bne.n	8027114 <ATT_Build_Read_By_Grp_Type_Rsp+0x19c>
 8027046:	ea5f 400b 	movs.w	r0, fp, lsl #16
 802704a:	d10f      	bne.n	802706c <ATT_Build_Read_By_Grp_Type_Rsp+0xf4>
 802704c:	f8da 0020 	ldr.w	r0, [sl, #32]
 8027050:	2111      	movs	r1, #17
 8027052:	f04f 0b02 	mov.w	fp, #2
 8027056:	7101      	strb	r1, [r0, #4]
 8027058:	2114      	movs	r1, #20
 802705a:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 802705e:	2801      	cmp	r0, #1
 8027060:	bf08      	it	eq
 8027062:	2106      	moveq	r1, #6
 8027064:	f8da 0020 	ldr.w	r0, [sl, #32]
 8027068:	9101      	str	r1, [sp, #4]
 802706a:	7141      	strb	r1, [r0, #5]
 802706c:	fa1f f08b 	uxth.w	r0, fp
 8027070:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8027074:	1a08      	subs	r0, r1, r0
 8027076:	2804      	cmp	r0, #4
 8027078:	db51      	blt.n	802711e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 802707a:	9801      	ldr	r0, [sp, #4]
 802707c:	b2c1      	uxtb	r1, r0
 802707e:	2914      	cmp	r1, #20
 8027080:	d006      	beq.n	8027090 <ATT_Build_Read_By_Grp_Type_Rsp+0x118>
 8027082:	2906      	cmp	r1, #6
 8027084:	d14b      	bne.n	802711e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 8027086:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 802708a:	2801      	cmp	r0, #1
 802708c:	d004      	beq.n	8027098 <ATT_Build_Read_By_Grp_Type_Rsp+0x120>
 802708e:	e046      	b.n	802711e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 8027090:	f897 002c 	ldrb.w	r0, [r7, #44]	@ 0x2c
 8027094:	2802      	cmp	r0, #2
 8027096:	d142      	bne.n	802711e <ATT_Build_Read_By_Grp_Type_Rsp+0x1a6>
 8027098:	f10b 0004 	add.w	r0, fp, #4
 802709c:	9103      	str	r1, [sp, #12]
 802709e:	2202      	movs	r2, #2
 80270a0:	4623      	mov	r3, r4
 80270a2:	9002      	str	r0, [sp, #8]
 80270a4:	b281      	uxth	r1, r0
 80270a6:	4650      	mov	r0, sl
 80270a8:	f001 fbdd 	bl	8028866 <ACL_Set_Data>
 80270ac:	4638      	mov	r0, r7
 80270ae:	f850 1f20 	ldr.w	r1, [r0, #32]!
 80270b2:	4288      	cmp	r0, r1
 80270b4:	d007      	beq.n	80270c6 <ATT_Build_Read_By_Grp_Type_Rsp+0x14e>
 80270b6:	f10b 0106 	add.w	r1, fp, #6
 80270ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80270bc:	2202      	movs	r2, #2
 80270be:	f100 031c 	add.w	r3, r0, #28
 80270c2:	b289      	uxth	r1, r1
 80270c4:	e004      	b.n	80270d0 <ATT_Build_Read_By_Grp_Type_Rsp+0x158>
 80270c6:	f10b 0006 	add.w	r0, fp, #6
 80270ca:	2202      	movs	r2, #2
 80270cc:	4623      	mov	r3, r4
 80270ce:	b281      	uxth	r1, r0
 80270d0:	4650      	mov	r0, sl
 80270d2:	f001 fbc8 	bl	8028866 <ACL_Set_Data>
 80270d6:	4659      	mov	r1, fp
 80270d8:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80270dc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80270e0:	f107 0308 	add.w	r3, r7, #8
 80270e4:	eba0 000b 	sub.w	r0, r0, fp
 80270e8:	b284      	uxth	r4, r0
 80270ea:	9803      	ldr	r0, [sp, #12]
 80270ec:	3804      	subs	r0, #4
 80270ee:	b280      	uxth	r0, r0
 80270f0:	42a0      	cmp	r0, r4
 80270f2:	bf38      	it	cc
 80270f4:	4604      	movcc	r4, r0
 80270f6:	f101 0008 	add.w	r0, r1, #8
 80270fa:	4622      	mov	r2, r4
 80270fc:	b281      	uxth	r1, r0
 80270fe:	4650      	mov	r0, sl
 8027100:	f001 fbb1 	bl	8028866 <ACL_Set_Data>
 8027104:	44a3      	add	fp, r4
 8027106:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 802710a:	fa1f f08b 	uxth.w	r0, fp
 802710e:	1a08      	subs	r0, r1, r0
 8027110:	2804      	cmp	r0, #4
 8027112:	db01      	blt.n	8027118 <ATT_Build_Read_By_Grp_Type_Rsp+0x1a0>
 8027114:	683f      	ldr	r7, [r7, #0]
 8027116:	e78a      	b.n	802702e <ATT_Build_Read_By_Grp_Type_Rsp+0xb6>
 8027118:	ea5f 400b 	movs.w	r0, fp, lsl #16
 802711c:	d004      	beq.n	8027128 <ATT_Build_Read_By_Grp_Type_Rsp+0x1b0>
 802711e:	f10b 0004 	add.w	r0, fp, #4
 8027122:	f8aa 0004 	strh.w	r0, [sl, #4]
 8027126:	e76f      	b.n	8027008 <ATT_Build_Read_By_Grp_Type_Rsp+0x90>
 8027128:	200a      	movs	r0, #10
 802712a:	e768      	b.n	8026ffe <ATT_Build_Read_By_Grp_Type_Rsp+0x86>

0802712c <__arm_cp.11_0>:
 802712c:	2000a014 	.word	0x2000a014

08027130 <ATT_Build_Write_Rsp>:
 8027130:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8027134:	4605      	mov	r5, r0
 8027136:	8888      	ldrh	r0, [r1, #4]
 8027138:	4614      	mov	r4, r2
 802713a:	2807      	cmp	r0, #7
 802713c:	d202      	bcs.n	8027144 <ATT_Build_Write_Rsp+0x14>
 802713e:	2700      	movs	r7, #0
 8027140:	2004      	movs	r0, #4
 8027142:	e00c      	b.n	802715e <ATT_Build_Write_Rsp+0x2e>
 8027144:	6a08      	ldr	r0, [r1, #32]
 8027146:	460e      	mov	r6, r1
 8027148:	2302      	movs	r3, #2
 802714a:	7941      	ldrb	r1, [r0, #5]
 802714c:	7980      	ldrb	r0, [r0, #6]
 802714e:	aa01      	add	r2, sp, #4
 8027150:	ea41 2700 	orr.w	r7, r1, r0, lsl #8
 8027154:	4628      	mov	r0, r5
 8027156:	b2b9      	uxth	r1, r7
 8027158:	f000 f84a 	bl	80271f0 <ATT_Find_Attribute_To_Write>
 802715c:	b130      	cbz	r0, 802716c <ATT_Build_Write_Rsp+0x3c>
 802715e:	b2ba      	uxth	r2, r7
 8027160:	2112      	movs	r1, #18
 8027162:	f000 fb66 	bl	8027832 <OUTLINED_FUNCTION_4>
 8027166:	2000      	movs	r0, #0
 8027168:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 802716c:	9901      	ldr	r1, [sp, #4]
 802716e:	88b2      	ldrh	r2, [r6, #4]
 8027170:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 8027174:	f1a2 0807 	sub.w	r8, r2, #7
 8027178:	2801      	cmp	r0, #1
 802717a:	d002      	beq.n	8027182 <ATT_Build_Write_Rsp+0x52>
 802717c:	b940      	cbnz	r0, 8027190 <ATT_Build_Write_Rsp+0x60>
 802717e:	8bc8      	ldrh	r0, [r1, #30]
 8027180:	e000      	b.n	8027184 <ATT_Build_Write_Rsp+0x54>
 8027182:	8c08      	ldrh	r0, [r1, #32]
 8027184:	fa1f f288 	uxth.w	r2, r8
 8027188:	4282      	cmp	r2, r0
 802718a:	d901      	bls.n	8027190 <ATT_Build_Write_Rsp+0x60>
 802718c:	200d      	movs	r0, #13
 802718e:	e7e6      	b.n	802715e <ATT_Build_Write_Rsp+0x2e>
 8027190:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 8027194:	0780      	lsls	r0, r0, #30
 8027196:	d503      	bpl.n	80271a0 <ATT_Build_Write_Rsp+0x70>
 8027198:	88e8      	ldrh	r0, [r5, #6]
 802719a:	f410 7f81 	tst.w	r0, #258	@ 0x102
 802719e:	d01b      	beq.n	80271d8 <ATT_Build_Write_Rsp+0xa8>
 80271a0:	4608      	mov	r0, r1
 80271a2:	4629      	mov	r1, r5
 80271a4:	f7fe fb2e 	bl	8025804 <GATT_Attr_Val>
 80271a8:	4607      	mov	r7, r0
 80271aa:	fa1f f288 	uxth.w	r2, r8
 80271ae:	4630      	mov	r0, r6
 80271b0:	2107      	movs	r1, #7
 80271b2:	463b      	mov	r3, r7
 80271b4:	f001 fb37 	bl	8028826 <ACL_Get_Data>
 80271b8:	9901      	ldr	r1, [sp, #4]
 80271ba:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 80271be:	b108      	cbz	r0, 80271c4 <ATT_Build_Write_Rsp+0x94>
 80271c0:	f8a1 801e 	strh.w	r8, [r1, #30]
 80271c4:	6a20      	ldr	r0, [r4, #32]
 80271c6:	2213      	movs	r2, #19
 80271c8:	7102      	strb	r2, [r0, #4]
 80271ca:	2005      	movs	r0, #5
 80271cc:	463a      	mov	r2, r7
 80271ce:	80a0      	strh	r0, [r4, #4]
 80271d0:	4628      	mov	r0, r5
 80271d2:	f000 f83e 	bl	8027252 <GATT_Attribute_Modified_Event>
 80271d6:	e7c6      	b.n	8027166 <ATT_Build_Write_Rsp+0x36>
 80271d8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80271dc:	fa1f f288 	uxth.w	r2, r8
 80271e0:	4633      	mov	r3, r6
 80271e2:	9000      	str	r0, [sp, #0]
 80271e4:	4628      	mov	r0, r5
 80271e6:	f000 f820 	bl	802722a <GATT_Write_Permit_Req_Event>
 80271ea:	2069      	movs	r0, #105	@ 0x69
 80271ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

080271f0 <ATT_Find_Attribute_To_Write>:
 80271f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80271f2:	4606      	mov	r6, r0
 80271f4:	4608      	mov	r0, r1
 80271f6:	461c      	mov	r4, r3
 80271f8:	4615      	mov	r5, r2
 80271fa:	460f      	mov	r7, r1
 80271fc:	f7ff f9de 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 8027200:	b150      	cbz	r0, 8027218 <ATT_Find_Attribute_To_Write+0x28>
 8027202:	4601      	mov	r1, r0
 8027204:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8027206:	42b8      	cmp	r0, r7
 8027208:	bf04      	itt	eq
 802720a:	2003      	moveq	r0, #3
 802720c:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
 802720e:	4638      	mov	r0, r7
 8027210:	462a      	mov	r2, r5
 8027212:	f7fe ff8e 	bl	8026132 <GATT_Search_Handle>
 8027216:	b108      	cbz	r0, 802721c <ATT_Find_Attribute_To_Write+0x2c>
 8027218:	2001      	movs	r0, #1
 802721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802721c:	6829      	ldr	r1, [r5, #0]
 802721e:	4630      	mov	r0, r6
 8027220:	4622      	mov	r2, r4
 8027222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027226:	f7ff bb0e 	b.w	8026846 <ATT_Check_Perm>

0802722a <GATT_Write_Permit_Req_Event>:
 802722a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802722c:	4615      	mov	r5, r2
 802722e:	460e      	mov	r6, r1
 8027230:	6841      	ldr	r1, [r0, #4]
 8027232:	9a06      	ldr	r2, [sp, #24]
 8027234:	461c      	mov	r4, r3
 8027236:	4311      	orrs	r1, r2
 8027238:	6041      	str	r1, [r0, #4]
 802723a:	f7fd ff4d 	bl	80250d8 <GATT_Evt_Handle>
 802723e:	4601      	mov	r1, r0
 8027240:	b2e8      	uxtb	r0, r5
 8027242:	8bb2      	ldrh	r2, [r6, #28]
 8027244:	2303      	movs	r3, #3
 8027246:	e9cd 0400 	strd	r0, r4, [sp]
 802724a:	2001      	movs	r0, #1
 802724c:	f7fc fb5e 	bl	802390c <EVT_aci_gatt_write_permit_req>
 8027250:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

08027252 <GATT_Attribute_Modified_Event>:
 8027252:	b5b0      	push	{r4, r5, r7, lr}
 8027254:	460d      	mov	r5, r1
 8027256:	f891 1026 	ldrb.w	r1, [r1, #38]	@ 0x26
 802725a:	07c9      	lsls	r1, r1, #31
 802725c:	bf08      	it	eq
 802725e:	bdb0      	popeq	{r4, r5, r7, pc}
 8027260:	4614      	mov	r4, r2
 8027262:	f7fd ff39 	bl	80250d8 <GATT_Evt_Handle>
 8027266:	8bea      	ldrh	r2, [r5, #30]
 8027268:	8ba9      	ldrh	r1, [r5, #28]
 802726a:	4623      	mov	r3, r4
 802726c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8027270:	f7fc bb8c 	b.w	802398c <EVT_GATT_Attribute_Modified>

08027274 <ATT_Build_Prepare_Write_Rsp>:
 8027274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027278:	b085      	sub	sp, #20
 802727a:	4607      	mov	r7, r0
 802727c:	4608      	mov	r0, r1
 802727e:	4615      	mov	r5, r2
 8027280:	460c      	mov	r4, r1
 8027282:	f001 fb93 	bl	80289ac <ACL_Get_Count>
 8027286:	4681      	mov	r9, r0
 8027288:	88a0      	ldrh	r0, [r4, #4]
 802728a:	2809      	cmp	r0, #9
 802728c:	d202      	bcs.n	8027294 <ATT_Build_Prepare_Write_Rsp+0x20>
 802728e:	2600      	movs	r6, #0
 8027290:	2004      	movs	r0, #4
 8027292:	e015      	b.n	80272c0 <ATT_Build_Prepare_Write_Rsp+0x4c>
 8027294:	6a20      	ldr	r0, [r4, #32]
 8027296:	2302      	movs	r3, #2
 8027298:	7941      	ldrb	r1, [r0, #5]
 802729a:	7980      	ldrb	r0, [r0, #6]
 802729c:	aa04      	add	r2, sp, #16
 802729e:	ea41 2600 	orr.w	r6, r1, r0, lsl #8
 80272a2:	4638      	mov	r0, r7
 80272a4:	b2b1      	uxth	r1, r6
 80272a6:	f7ff ffa3 	bl	80271f0 <ATT_Find_Attribute_To_Write>
 80272aa:	b948      	cbnz	r0, 80272c0 <ATT_Build_Prepare_Write_Rsp+0x4c>
 80272ac:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8027360 <__arm_cp.16_0>
 80272b0:	492c      	ldr	r1, [pc, #176]	@ (8027364 <__arm_cp.16_1>)
 80272b2:	f8b8 020c 	ldrh.w	r0, [r8, #524]	@ 0x20c
 80272b6:	7dc9      	ldrb	r1, [r1, #23]
 80272b8:	4448      	add	r0, r9
 80272ba:	4288      	cmp	r0, r1
 80272bc:	d909      	bls.n	80272d2 <ATT_Build_Prepare_Write_Rsp+0x5e>
 80272be:	2009      	movs	r0, #9
 80272c0:	b2b2      	uxth	r2, r6
 80272c2:	2116      	movs	r1, #22
 80272c4:	462b      	mov	r3, r5
 80272c6:	f7ff fa95 	bl	80267f4 <ATT_Build_Error_Rsp>
 80272ca:	2000      	movs	r0, #0
 80272cc:	b005      	add	sp, #20
 80272ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80272d2:	9e04      	ldr	r6, [sp, #16]
 80272d4:	f896 0026 	ldrb.w	r0, [r6, #38]	@ 0x26
 80272d8:	0780      	lsls	r0, r0, #30
 80272da:	d503      	bpl.n	80272e4 <ATT_Build_Prepare_Write_Rsp+0x70>
 80272dc:	6878      	ldr	r0, [r7, #4]
 80272de:	f010 7f81 	tst.w	r0, #16908288	@ 0x1020000
 80272e2:	d020      	beq.n	8027326 <ATT_Build_Prepare_Write_Rsp+0xb2>
 80272e4:	88a0      	ldrh	r0, [r4, #4]
 80272e6:	3804      	subs	r0, #4
 80272e8:	b281      	uxth	r1, r0
 80272ea:	4628      	mov	r0, r5
 80272ec:	f001 fa54 	bl	8028798 <ACL_Resize>
 80272f0:	b108      	cbz	r0, 80272f6 <ATT_Build_Prepare_Write_Rsp+0x82>
 80272f2:	2095      	movs	r0, #149	@ 0x95
 80272f4:	e7ea      	b.n	80272cc <ATT_Build_Prepare_Write_Rsp+0x58>
 80272f6:	4628      	mov	r0, r5
 80272f8:	4621      	mov	r1, r4
 80272fa:	f001 fad3 	bl	80288a4 <ACL_Copy_Data>
 80272fe:	6a28      	ldr	r0, [r5, #32]
 8027300:	2117      	movs	r1, #23
 8027302:	7101      	strb	r1, [r0, #4]
 8027304:	f508 70fe 	add.w	r0, r8, #508	@ 0x1fc
 8027308:	4621      	mov	r1, r4
 802730a:	f001 fb67 	bl	80289dc <ACL_List_Remove>
 802730e:	f508 7001 	add.w	r0, r8, #516	@ 0x204
 8027312:	4621      	mov	r1, r4
 8027314:	f001 fb52 	bl	80289bc <ACL_List_Insert_Tail>
 8027318:	f8b8 020c 	ldrh.w	r0, [r8, #524]	@ 0x20c
 802731c:	4448      	add	r0, r9
 802731e:	f8a8 020c 	strh.w	r0, [r8, #524]	@ 0x20c
 8027322:	2067      	movs	r0, #103	@ 0x67
 8027324:	e7d2      	b.n	80272cc <ATT_Build_Prepare_Write_Rsp+0x58>
 8027326:	6a21      	ldr	r1, [r4, #32]
 8027328:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 802732c:	7925      	ldrb	r5, [r4, #4]
 802732e:	f891 8007 	ldrb.w	r8, [r1, #7]
 8027332:	f891 9008 	ldrb.w	r9, [r1, #8]
 8027336:	6078      	str	r0, [r7, #4]
 8027338:	4638      	mov	r0, r7
 802733a:	f7fd fecd 	bl	80250d8 <GATT_Evt_Handle>
 802733e:	4601      	mov	r1, r0
 8027340:	f1a5 0009 	sub.w	r0, r5, #9
 8027344:	2305      	movs	r3, #5
 8027346:	8bb2      	ldrh	r2, [r6, #28]
 8027348:	9402      	str	r4, [sp, #8]
 802734a:	b2c0      	uxtb	r0, r0
 802734c:	e9cd 3000 	strd	r3, r0, [sp]
 8027350:	ea48 2009 	orr.w	r0, r8, r9, lsl #8
 8027354:	b283      	uxth	r3, r0
 8027356:	2001      	movs	r0, #1
 8027358:	f7fc faec 	bl	8023934 <EVT_aci_gatt_prepare_write_permit_req>
 802735c:	2069      	movs	r0, #105	@ 0x69
 802735e:	e7b5      	b.n	80272cc <ATT_Build_Prepare_Write_Rsp+0x58>

08027360 <__arm_cp.16_0>:
 8027360:	2000a014 	.word	0x2000a014

08027364 <__arm_cp.16_1>:
 8027364:	20009fec 	.word	0x20009fec

08027368 <ATT_Build_Exec_Write_Rsp>:
 8027368:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802736c:	4680      	mov	r8, r0
 802736e:	8888      	ldrh	r0, [r1, #4]
 8027370:	4692      	mov	sl, r2
 8027372:	2806      	cmp	r0, #6
 8027374:	d128      	bne.n	80273c8 <ATT_Build_Exec_Write_Rsp+0x60>
 8027376:	4f56      	ldr	r7, [pc, #344]	@ (80274d0 <__arm_cp.17_0>)
 8027378:	460e      	mov	r6, r1
 802737a:	6a09      	ldr	r1, [r1, #32]
 802737c:	2000      	movs	r0, #0
 802737e:	f10d 0b04 	add.w	fp, sp, #4
 8027382:	7949      	ldrb	r1, [r1, #5]
 8027384:	9001      	str	r0, [sp, #4]
 8027386:	9002      	str	r0, [sp, #8]
 8027388:	f8d7 9204 	ldr.w	r9, [r7, #516]	@ 0x204
 802738c:	f507 7401 	add.w	r4, r7, #516	@ 0x204
 8027390:	9100      	str	r1, [sp, #0]
 8027392:	f1b9 0f00 	cmp.w	r9, #0
 8027396:	d020      	beq.n	80273da <ATT_Build_Exec_Write_Rsp+0x72>
 8027398:	464d      	mov	r5, r9
 802739a:	f8d9 9000 	ldr.w	r9, [r9]
 802739e:	8930      	ldrh	r0, [r6, #8]
 80273a0:	8929      	ldrh	r1, [r5, #8]
 80273a2:	4281      	cmp	r1, r0
 80273a4:	d1f5      	bne.n	8027392 <ATT_Build_Exec_Write_Rsp+0x2a>
 80273a6:	4620      	mov	r0, r4
 80273a8:	4629      	mov	r1, r5
 80273aa:	f001 fb17 	bl	80289dc <ACL_List_Remove>
 80273ae:	4628      	mov	r0, r5
 80273b0:	f001 fafc 	bl	80289ac <ACL_Get_Count>
 80273b4:	f8b7 120c 	ldrh.w	r1, [r7, #524]	@ 0x20c
 80273b8:	1a08      	subs	r0, r1, r0
 80273ba:	4629      	mov	r1, r5
 80273bc:	f8a7 020c 	strh.w	r0, [r7, #524]	@ 0x20c
 80273c0:	4658      	mov	r0, fp
 80273c2:	f001 fafb 	bl	80289bc <ACL_List_Insert_Tail>
 80273c6:	e7e4      	b.n	8027392 <ATT_Build_Exec_Write_Rsp+0x2a>
 80273c8:	2004      	movs	r0, #4
 80273ca:	2118      	movs	r1, #24
 80273cc:	2200      	movs	r2, #0
 80273ce:	4653      	mov	r3, sl
 80273d0:	f7ff fa10 	bl	80267f4 <ATT_Build_Error_Rsp>
 80273d4:	2000      	movs	r0, #0
 80273d6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273da:	f8da 0020 	ldr.w	r0, [sl, #32]
 80273de:	2119      	movs	r1, #25
 80273e0:	9f00      	ldr	r7, [sp, #0]
 80273e2:	7101      	strb	r1, [r0, #4]
 80273e4:	2005      	movs	r0, #5
 80273e6:	2f01      	cmp	r7, #1
 80273e8:	f8aa 0004 	strh.w	r0, [sl, #4]
 80273ec:	d12f      	bne.n	802744e <ATT_Build_Exec_Write_Rsp+0xe6>
 80273ee:	9d01      	ldr	r5, [sp, #4]
 80273f0:	b315      	cbz	r5, 8027438 <ATT_Build_Exec_Write_Rsp+0xd0>
 80273f2:	6a28      	ldr	r0, [r5, #32]
 80273f4:	682c      	ldr	r4, [r5, #0]
 80273f6:	f000 fa14 	bl	8027822 <OUTLINED_FUNCTION_2>
 80273fa:	b286      	uxth	r6, r0
 80273fc:	4630      	mov	r0, r6
 80273fe:	f000 f869 	bl	80274d4 <GATT_Find_Char_Attribute>
 8027402:	b1d8      	cbz	r0, 802743c <ATT_Build_Exec_Write_Rsp+0xd4>
 8027404:	6a2a      	ldr	r2, [r5, #32]
 8027406:	88a9      	ldrh	r1, [r5, #4]
 8027408:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 802740c:	79d5      	ldrb	r5, [r2, #7]
 802740e:	7a12      	ldrb	r2, [r2, #8]
 8027410:	3909      	subs	r1, #9
 8027412:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 8027416:	2b01      	cmp	r3, #1
 8027418:	d004      	beq.n	8027424 <ATT_Build_Exec_Write_Rsp+0xbc>
 802741a:	2b00      	cmp	r3, #0
 802741c:	4625      	mov	r5, r4
 802741e:	d1e7      	bne.n	80273f0 <ATT_Build_Exec_Write_Rsp+0x88>
 8027420:	8bc0      	ldrh	r0, [r0, #30]
 8027422:	e000      	b.n	8027426 <ATT_Build_Exec_Write_Rsp+0xbe>
 8027424:	8c00      	ldrh	r0, [r0, #32]
 8027426:	4290      	cmp	r0, r2
 8027428:	d90a      	bls.n	8027440 <ATT_Build_Exec_Write_Rsp+0xd8>
 802742a:	b289      	uxth	r1, r1
 802742c:	4625      	mov	r5, r4
 802742e:	4411      	add	r1, r2
 8027430:	4281      	cmp	r1, r0
 8027432:	d9dd      	bls.n	80273f0 <ATT_Build_Exec_Write_Rsp+0x88>
 8027434:	200d      	movs	r0, #13
 8027436:	e004      	b.n	8027442 <ATT_Build_Exec_Write_Rsp+0xda>
 8027438:	2701      	movs	r7, #1
 802743a:	e008      	b.n	802744e <ATT_Build_Exec_Write_Rsp+0xe6>
 802743c:	2001      	movs	r0, #1
 802743e:	e000      	b.n	8027442 <ATT_Build_Exec_Write_Rsp+0xda>
 8027440:	2007      	movs	r0, #7
 8027442:	2118      	movs	r1, #24
 8027444:	4632      	mov	r2, r6
 8027446:	4653      	mov	r3, sl
 8027448:	f7ff f9d4 	bl	80267f4 <ATT_Build_Error_Rsp>
 802744c:	2700      	movs	r7, #0
 802744e:	9d01      	ldr	r5, [sp, #4]
 8027450:	9700      	str	r7, [sp, #0]
 8027452:	2d00      	cmp	r5, #0
 8027454:	d0be      	beq.n	80273d4 <ATT_Build_Exec_Write_Rsp+0x6c>
 8027456:	682c      	ldr	r4, [r5, #0]
 8027458:	2f01      	cmp	r7, #1
 802745a:	d133      	bne.n	80274c4 <ATT_Build_Exec_Write_Rsp+0x15c>
 802745c:	6a28      	ldr	r0, [r5, #32]
 802745e:	f000 f9e0 	bl	8027822 <OUTLINED_FUNCTION_2>
 8027462:	fa1f fb80 	uxth.w	fp, r0
 8027466:	4658      	mov	r0, fp
 8027468:	f000 f834 	bl	80274d4 <GATT_Find_Char_Attribute>
 802746c:	4641      	mov	r1, r8
 802746e:	4606      	mov	r6, r0
 8027470:	46c2      	mov	sl, r8
 8027472:	f7fe f9c7 	bl	8025804 <GATT_Attr_Val>
 8027476:	4681      	mov	r9, r0
 8027478:	6a28      	ldr	r0, [r5, #32]
 802747a:	79c1      	ldrb	r1, [r0, #7]
 802747c:	7a00      	ldrb	r0, [r0, #8]
 802747e:	ea41 2700 	orr.w	r7, r1, r0, lsl #8
 8027482:	88a8      	ldrh	r0, [r5, #4]
 8027484:	2109      	movs	r1, #9
 8027486:	f1a0 0809 	sub.w	r8, r0, #9
 802748a:	4628      	mov	r0, r5
 802748c:	fa1f f288 	uxth.w	r2, r8
 8027490:	eb09 0307 	add.w	r3, r9, r7
 8027494:	f001 f9c7 	bl	8028826 <ACL_Get_Data>
 8027498:	f896 0022 	ldrb.w	r0, [r6, #34]	@ 0x22
 802749c:	b110      	cbz	r0, 80274a4 <ATT_Build_Exec_Write_Rsp+0x13c>
 802749e:	eb08 0007 	add.w	r0, r8, r7
 80274a2:	83f0      	strh	r0, [r6, #30]
 80274a4:	b11c      	cbz	r4, 80274ae <ATT_Build_Exec_Write_Rsp+0x146>
 80274a6:	6a20      	ldr	r0, [r4, #32]
 80274a8:	f000 f9bb 	bl	8027822 <OUTLINED_FUNCTION_2>
 80274ac:	e000      	b.n	80274b0 <ATT_Build_Exec_Write_Rsp+0x148>
 80274ae:	2000      	movs	r0, #0
 80274b0:	b280      	uxth	r0, r0
 80274b2:	9f00      	ldr	r7, [sp, #0]
 80274b4:	46d0      	mov	r8, sl
 80274b6:	4583      	cmp	fp, r0
 80274b8:	d004      	beq.n	80274c4 <ATT_Build_Exec_Write_Rsp+0x15c>
 80274ba:	4640      	mov	r0, r8
 80274bc:	4631      	mov	r1, r6
 80274be:	464a      	mov	r2, r9
 80274c0:	f7ff fec7 	bl	8027252 <GATT_Attribute_Modified_Event>
 80274c4:	4628      	mov	r0, r5
 80274c6:	f001 f941 	bl	802874c <ACL_Release>
 80274ca:	4625      	mov	r5, r4
 80274cc:	e7c1      	b.n	8027452 <ATT_Build_Exec_Write_Rsp+0xea>
 80274ce:	bf00      	nop

080274d0 <__arm_cp.17_0>:
 80274d0:	2000a014 	.word	0x2000a014

080274d4 <GATT_Find_Char_Attribute>:
 80274d4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 80274d6:	4605      	mov	r5, r0
 80274d8:	f7ff f870 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 80274dc:	2400      	movs	r4, #0
 80274de:	b140      	cbz	r0, 80274f2 <GATT_Find_Char_Attribute+0x1e>
 80274e0:	4601      	mov	r1, r0
 80274e2:	aa01      	add	r2, sp, #4
 80274e4:	4628      	mov	r0, r5
 80274e6:	f7fe fe24 	bl	8026132 <GATT_Search_Handle>
 80274ea:	9901      	ldr	r1, [sp, #4]
 80274ec:	2800      	cmp	r0, #0
 80274ee:	bf08      	it	eq
 80274f0:	460c      	moveq	r4, r1
 80274f2:	4620      	mov	r0, r4
 80274f4:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

080274f6 <ATT_Handle_Write_Cmd>:
 80274f6:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80274fa:	4681      	mov	r9, r0
 80274fc:	6a08      	ldr	r0, [r1, #32]
 80274fe:	460d      	mov	r5, r1
 8027500:	2608      	movs	r6, #8
 8027502:	210f      	movs	r1, #15
 8027504:	7907      	ldrb	r7, [r0, #4]
 8027506:	2f52      	cmp	r7, #82	@ 0x52
 8027508:	bf08      	it	eq
 802750a:	2604      	moveq	r6, #4
 802750c:	bf08      	it	eq
 802750e:	2103      	moveq	r1, #3
 8027510:	88ab      	ldrh	r3, [r5, #4]
 8027512:	3b04      	subs	r3, #4
 8027514:	428b      	cmp	r3, r1
 8027516:	db0e      	blt.n	8027536 <ATT_Handle_Write_Cmd+0x40>
 8027518:	7941      	ldrb	r1, [r0, #5]
 802751a:	7980      	ldrb	r0, [r0, #6]
 802751c:	ea41 2400 	orr.w	r4, r1, r0, lsl #8
 8027520:	0420      	lsls	r0, r4, #16
 8027522:	d008      	beq.n	8027536 <ATT_Handle_Write_Cmd+0x40>
 8027524:	b14a      	cbz	r2, 802753a <ATT_Handle_Write_Cmd+0x44>
 8027526:	2fd2      	cmp	r7, #210	@ 0xd2
 8027528:	d107      	bne.n	802753a <ATT_Handle_Write_Cmd+0x44>
 802752a:	f8b9 0000 	ldrh.w	r0, [r9]
 802752e:	4629      	mov	r1, r5
 8027530:	f004 f887 	bl	802b642 <SMP_Validate_Signed_Packet>
 8027534:	b108      	cbz	r0, 802753a <ATT_Handle_Write_Cmd+0x44>
 8027536:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 802753a:	b2a1      	uxth	r1, r4
 802753c:	aa02      	add	r2, sp, #8
 802753e:	4648      	mov	r0, r9
 8027540:	4633      	mov	r3, r6
 8027542:	f7ff fe55 	bl	80271f0 <ATT_Find_Attribute_To_Write>
 8027546:	2800      	cmp	r0, #0
 8027548:	d1f5      	bne.n	8027536 <ATT_Handle_Write_Cmd+0x40>
 802754a:	f64f 70ed 	movw	r0, #65517	@ 0xffed
 802754e:	2f52      	cmp	r7, #82	@ 0x52
 8027550:	bf08      	it	eq
 8027552:	f64f 70f9 	movweq	r0, #65529	@ 0xfff9
 8027556:	88a9      	ldrh	r1, [r5, #4]
 8027558:	1847      	adds	r7, r0, r1
 802755a:	9902      	ldr	r1, [sp, #8]
 802755c:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 8027560:	b2be      	uxth	r6, r7
 8027562:	b108      	cbz	r0, 8027568 <ATT_Handle_Write_Cmd+0x72>
 8027564:	8c08      	ldrh	r0, [r1, #32]
 8027566:	e000      	b.n	802756a <ATT_Handle_Write_Cmd+0x74>
 8027568:	8bc8      	ldrh	r0, [r1, #30]
 802756a:	4286      	cmp	r6, r0
 802756c:	d8e3      	bhi.n	8027536 <ATT_Handle_Write_Cmd+0x40>
 802756e:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
 8027572:	0780      	lsls	r0, r0, #30
 8027574:	d50d      	bpl.n	8027592 <ATT_Handle_Write_Cmd+0x9c>
 8027576:	f899 0006 	ldrb.w	r0, [r9, #6]
 802757a:	0740      	lsls	r0, r0, #29
 802757c:	d409      	bmi.n	8027592 <ATT_Handle_Write_Cmd+0x9c>
 802757e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8027582:	4632      	mov	r2, r6
 8027584:	462b      	mov	r3, r5
 8027586:	9000      	str	r0, [sp, #0]
 8027588:	4648      	mov	r0, r9
 802758a:	f7ff fe4e 	bl	802722a <GATT_Write_Permit_Req_Event>
 802758e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8027592:	4608      	mov	r0, r1
 8027594:	4649      	mov	r1, r9
 8027596:	f7fe f935 	bl	8025804 <GATT_Attr_Val>
 802759a:	4680      	mov	r8, r0
 802759c:	4628      	mov	r0, r5
 802759e:	2107      	movs	r1, #7
 80275a0:	4632      	mov	r2, r6
 80275a2:	4643      	mov	r3, r8
 80275a4:	f001 f93f 	bl	8028826 <ACL_Get_Data>
 80275a8:	9902      	ldr	r1, [sp, #8]
 80275aa:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 80275ae:	b100      	cbz	r0, 80275b2 <ATT_Handle_Write_Cmd+0xbc>
 80275b0:	83cf      	strh	r7, [r1, #30]
 80275b2:	4648      	mov	r0, r9
 80275b4:	4642      	mov	r2, r8
 80275b6:	f7ff fe4c 	bl	8027252 <GATT_Attribute_Modified_Event>
 80275ba:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
	...

080275c0 <ATT_Build_Find_Info_Rsp>:
 80275c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80275c4:	b085      	sub	sp, #20
 80275c6:	4683      	mov	fp, r0
 80275c8:	8888      	ldrh	r0, [r1, #4]
 80275ca:	4614      	mov	r4, r2
 80275cc:	2809      	cmp	r0, #9
 80275ce:	d115      	bne.n	80275fc <ATT_Build_Find_Info_Rsp+0x3c>
 80275d0:	6a08      	ldr	r0, [r1, #32]
 80275d2:	7941      	ldrb	r1, [r0, #5]
 80275d4:	7982      	ldrb	r2, [r0, #6]
 80275d6:	79c3      	ldrb	r3, [r0, #7]
 80275d8:	7a00      	ldrb	r0, [r0, #8]
 80275da:	ea43 2700 	orr.w	r7, r3, r0, lsl #8
 80275de:	ea41 2002 	orr.w	r0, r1, r2, lsl #8
 80275e2:	b285      	uxth	r5, r0
 80275e4:	42af      	cmp	r7, r5
 80275e6:	d30e      	bcc.n	8027606 <ATT_Build_Find_Info_Rsp+0x46>
 80275e8:	0400      	lsls	r0, r0, #16
 80275ea:	d00c      	beq.n	8027606 <ATT_Build_Find_Info_Rsp+0x46>
 80275ec:	f8bb 1002 	ldrh.w	r1, [fp, #2]
 80275f0:	4620      	mov	r0, r4
 80275f2:	f001 f8d1 	bl	8028798 <ACL_Resize>
 80275f6:	b188      	cbz	r0, 802761c <ATT_Build_Find_Info_Rsp+0x5c>
 80275f8:	2595      	movs	r5, #149	@ 0x95
 80275fa:	e00b      	b.n	8027614 <ATT_Build_Find_Info_Rsp+0x54>
 80275fc:	2004      	movs	r0, #4
 80275fe:	2104      	movs	r1, #4
 8027600:	f000 f902 	bl	8027808 <OUTLINED_FUNCTION_0>
 8027604:	e006      	b.n	8027614 <ATT_Build_Find_Info_Rsp+0x54>
 8027606:	2001      	movs	r0, #1
 8027608:	2104      	movs	r1, #4
 802760a:	462a      	mov	r2, r5
 802760c:	4623      	mov	r3, r4
 802760e:	f7ff f8f1 	bl	80267f4 <ATT_Build_Error_Rsp>
 8027612:	2500      	movs	r5, #0
 8027614:	4628      	mov	r0, r5
 8027616:	b005      	add	sp, #20
 8027618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802761c:	4628      	mov	r0, r5
 802761e:	9403      	str	r4, [sp, #12]
 8027620:	f7fe ffcc 	bl	80265bc <GATT_Find_Srv_Owner_Of_Handle>
 8027624:	2800      	cmp	r0, #0
 8027626:	f000 808c 	beq.w	8027742 <ATT_Build_Find_Info_Rsp+0x182>
 802762a:	4606      	mov	r6, r0
 802762c:	484c      	ldr	r0, [pc, #304]	@ (8027760 <__arm_cp.20_0>)
 802762e:	2400      	movs	r4, #0
 8027630:	f8cd b004 	str.w	fp, [sp, #4]
 8027634:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8027638:	9002      	str	r0, [sp, #8]
 802763a:	2000      	movs	r0, #0
 802763c:	9902      	ldr	r1, [sp, #8]
 802763e:	428e      	cmp	r6, r1
 8027640:	d07a      	beq.n	8027738 <ATT_Build_Find_Info_Rsp+0x178>
 8027642:	4633      	mov	r3, r6
 8027644:	f833 1f28 	ldrh.w	r1, [r3, #40]!
 8027648:	42a9      	cmp	r1, r5
 802764a:	bf28      	it	cs
 802764c:	428f      	cmpcs	r7, r1
 802764e:	d201      	bcs.n	8027654 <ATT_Build_Find_Info_Rsp+0x94>
 8027650:	46a2      	mov	sl, r4
 8027652:	e023      	b.n	802769c <ATT_Build_Find_Info_Rsp+0xdc>
 8027654:	b2a1      	uxth	r1, r4
 8027656:	2900      	cmp	r1, #0
 8027658:	bf04      	itt	eq
 802765a:	2001      	moveq	r0, #1
 802765c:	2402      	moveq	r4, #2
 802765e:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8027662:	b2a1      	uxth	r1, r4
 8027664:	1a51      	subs	r1, r2, r1
 8027666:	2904      	cmp	r1, #4
 8027668:	db71      	blt.n	802774e <ATT_Build_Find_Info_Rsp+0x18e>
 802766a:	b2c1      	uxtb	r1, r0
 802766c:	2901      	cmp	r1, #1
 802766e:	d16e      	bne.n	802774e <ATT_Build_Find_Info_Rsp+0x18e>
 8027670:	f104 0a04 	add.w	sl, r4, #4
 8027674:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8027678:	2202      	movs	r2, #2
 802767a:	fa1f f18a 	uxth.w	r1, sl
 802767e:	4640      	mov	r0, r8
 8027680:	f001 f8f1 	bl	8028866 <ACL_Set_Data>
 8027684:	1da0      	adds	r0, r4, #6
 8027686:	f106 032a 	add.w	r3, r6, #42	@ 0x2a
 802768a:	2202      	movs	r2, #2
 802768c:	b281      	uxth	r1, r0
 802768e:	4640      	mov	r0, r8
 8027690:	f001 f8e9 	bl	8028866 <ACL_Set_Data>
 8027694:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8027696:	2001      	movs	r0, #1
 8027698:	428f      	cmp	r7, r1
 802769a:	d04e      	beq.n	802773a <ATT_Build_Find_Info_Rsp+0x17a>
 802769c:	f106 0920 	add.w	r9, r6, #32
 80276a0:	464c      	mov	r4, r9
 80276a2:	6824      	ldr	r4, [r4, #0]
 80276a4:	454c      	cmp	r4, r9
 80276a6:	d044      	beq.n	8027732 <ATT_Build_Find_Info_Rsp+0x172>
 80276a8:	8ba1      	ldrh	r1, [r4, #28]
 80276aa:	42a9      	cmp	r1, r5
 80276ac:	d3f9      	bcc.n	80276a2 <ATT_Build_Find_Info_Rsp+0xe2>
 80276ae:	42b9      	cmp	r1, r7
 80276b0:	d843      	bhi.n	802773a <ATT_Build_Find_Info_Rsp+0x17a>
 80276b2:	fa1f f28a 	uxth.w	r2, sl
 80276b6:	f894 8023 	ldrb.w	r8, [r4, #35]	@ 0x23
 80276ba:	9604      	str	r6, [sp, #16]
 80276bc:	b162      	cbz	r2, 80276d8 <ATT_Build_Find_Info_Rsp+0x118>
 80276be:	b2c1      	uxtb	r1, r0
 80276c0:	4588      	cmp	r8, r1
 80276c2:	d143      	bne.n	802774c <ATT_Build_Find_Info_Rsp+0x18c>
 80276c4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80276c8:	1a9a      	subs	r2, r3, r2
 80276ca:	2a04      	cmp	r2, #4
 80276cc:	db07      	blt.n	80276de <ATT_Build_Find_Info_Rsp+0x11e>
 80276ce:	2901      	cmp	r1, #1
 80276d0:	d105      	bne.n	80276de <ATT_Build_Find_Info_Rsp+0x11e>
 80276d2:	f04f 0801 	mov.w	r8, #1
 80276d6:	e008      	b.n	80276ea <ATT_Build_Find_Info_Rsp+0x12a>
 80276d8:	f04f 0a02 	mov.w	sl, #2
 80276dc:	e005      	b.n	80276ea <ATT_Build_Find_Info_Rsp+0x12a>
 80276de:	2a12      	cmp	r2, #18
 80276e0:	db34      	blt.n	802774c <ATT_Build_Find_Info_Rsp+0x18c>
 80276e2:	2902      	cmp	r1, #2
 80276e4:	d132      	bne.n	802774c <ATT_Build_Find_Info_Rsp+0x18c>
 80276e6:	f04f 0802 	mov.w	r8, #2
 80276ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80276ee:	f10a 0604 	add.w	r6, sl, #4
 80276f2:	f104 031c 	add.w	r3, r4, #28
 80276f6:	2202      	movs	r2, #2
 80276f8:	b2b1      	uxth	r1, r6
 80276fa:	4658      	mov	r0, fp
 80276fc:	f001 f8b3 	bl	8028866 <ACL_Set_Data>
 8027700:	f10a 0006 	add.w	r0, sl, #6
 8027704:	f104 0308 	add.w	r3, r4, #8
 8027708:	f1b8 0f01 	cmp.w	r8, #1
 802770c:	b281      	uxth	r1, r0
 802770e:	4658      	mov	r0, fp
 8027710:	d105      	bne.n	802771e <ATT_Build_Find_Info_Rsp+0x15e>
 8027712:	2202      	movs	r2, #2
 8027714:	f001 f8a7 	bl	8028866 <ACL_Set_Data>
 8027718:	2001      	movs	r0, #1
 802771a:	46b2      	mov	sl, r6
 802771c:	e005      	b.n	802772a <ATT_Build_Find_Info_Rsp+0x16a>
 802771e:	2210      	movs	r2, #16
 8027720:	f001 f8a1 	bl	8028866 <ACL_Set_Data>
 8027724:	f10a 0a12 	add.w	sl, sl, #18
 8027728:	4640      	mov	r0, r8
 802772a:	f8dd b004 	ldr.w	fp, [sp, #4]
 802772e:	9e04      	ldr	r6, [sp, #16]
 8027730:	e7b7      	b.n	80276a2 <ATT_Build_Find_Info_Rsp+0xe2>
 8027732:	6836      	ldr	r6, [r6, #0]
 8027734:	4654      	mov	r4, sl
 8027736:	e781      	b.n	802763c <ATT_Build_Find_Info_Rsp+0x7c>
 8027738:	46a2      	mov	sl, r4
 802773a:	ea5f 410a 	movs.w	r1, sl, lsl #16
 802773e:	4654      	mov	r4, sl
 8027740:	d105      	bne.n	802774e <ATT_Build_Find_Info_Rsp+0x18e>
 8027742:	200a      	movs	r0, #10
 8027744:	2104      	movs	r1, #4
 8027746:	462a      	mov	r2, r5
 8027748:	9b03      	ldr	r3, [sp, #12]
 802774a:	e760      	b.n	802760e <ATT_Build_Find_Info_Rsp+0x4e>
 802774c:	4654      	mov	r4, sl
 802774e:	9b03      	ldr	r3, [sp, #12]
 8027750:	2205      	movs	r2, #5
 8027752:	6a19      	ldr	r1, [r3, #32]
 8027754:	710a      	strb	r2, [r1, #4]
 8027756:	6a19      	ldr	r1, [r3, #32]
 8027758:	7148      	strb	r0, [r1, #5]
 802775a:	1d20      	adds	r0, r4, #4
 802775c:	8098      	strh	r0, [r3, #4]
 802775e:	e758      	b.n	8027612 <ATT_Build_Find_Info_Rsp+0x52>

08027760 <__arm_cp.20_0>:
 8027760:	2000a014 	.word	0x2000a014

08027764 <ATT_Build_Exchg_Mtu_Rsp>:
 8027764:	b510      	push	{r4, lr}
 8027766:	4614      	mov	r4, r2
 8027768:	888a      	ldrh	r2, [r1, #4]
 802776a:	2a07      	cmp	r2, #7
 802776c:	d10c      	bne.n	8027788 <ATT_Build_Exchg_Mtu_Rsp+0x24>
 802776e:	6843      	ldr	r3, [r0, #4]
 8027770:	059a      	lsls	r2, r3, #22
 8027772:	d420      	bmi.n	80277b6 <ATT_Build_Exchg_Mtu_Rsp+0x52>
 8027774:	6a09      	ldr	r1, [r1, #32]
 8027776:	794a      	ldrb	r2, [r1, #5]
 8027778:	7989      	ldrb	r1, [r1, #6]
 802777a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802777e:	b28a      	uxth	r2, r1
 8027780:	2a17      	cmp	r2, #23
 8027782:	d207      	bcs.n	8027794 <ATT_Build_Exchg_Mtu_Rsp+0x30>
 8027784:	2217      	movs	r2, #23
 8027786:	e00e      	b.n	80277a6 <ATT_Build_Exchg_Mtu_Rsp+0x42>
 8027788:	2004      	movs	r0, #4
 802778a:	2102      	movs	r1, #2
 802778c:	2200      	movs	r2, #0
 802778e:	f000 f850 	bl	8027832 <OUTLINED_FUNCTION_4>
 8027792:	e01c      	b.n	80277ce <ATT_Build_Exchg_Mtu_Rsp+0x6a>
 8027794:	490f      	ldr	r1, [pc, #60]	@ (80277d4 <__arm_cp.21_0>)
 8027796:	f8b1 11ce 	ldrh.w	r1, [r1, #462]	@ 0x1ce
 802779a:	428a      	cmp	r2, r1
 802779c:	bf28      	it	cs
 802779e:	460a      	movcs	r2, r1
 80277a0:	2917      	cmp	r1, #23
 80277a2:	bf38      	it	cc
 80277a4:	2217      	movcc	r2, #23
 80277a6:	f443 7100 	orr.w	r1, r3, #512	@ 0x200
 80277aa:	8042      	strh	r2, [r0, #2]
 80277ac:	6041      	str	r1, [r0, #4]
 80277ae:	8801      	ldrh	r1, [r0, #0]
 80277b0:	2001      	movs	r0, #1
 80277b2:	f7fc f8d9 	bl	8023968 <EVT_aci_att_exchange_mtu_resp>
 80277b6:	6a20      	ldr	r0, [r4, #32]
 80277b8:	2103      	movs	r1, #3
 80277ba:	7101      	strb	r1, [r0, #4]
 80277bc:	4905      	ldr	r1, [pc, #20]	@ (80277d4 <__arm_cp.21_0>)
 80277be:	6a20      	ldr	r0, [r4, #32]
 80277c0:	f8b1 11ce 	ldrh.w	r1, [r1, #462]	@ 0x1ce
 80277c4:	7141      	strb	r1, [r0, #5]
 80277c6:	0a09      	lsrs	r1, r1, #8
 80277c8:	7181      	strb	r1, [r0, #6]
 80277ca:	2007      	movs	r0, #7
 80277cc:	80a0      	strh	r0, [r4, #4]
 80277ce:	2000      	movs	r0, #0
 80277d0:	bd10      	pop	{r4, pc}
 80277d2:	bf00      	nop

080277d4 <__arm_cp.21_0>:
 80277d4:	2000a014 	.word	0x2000a014

080277d8 <ATT_Build_Notif_Or_Ind>:
 80277d8:	b570      	push	{r4, r5, r6, lr}
 80277da:	9c04      	ldr	r4, [sp, #16]
 80277dc:	b19c      	cbz	r4, 8027806 <ATT_Build_Notif_Or_Ind+0x2e>
 80277de:	4616      	mov	r6, r2
 80277e0:	4605      	mov	r5, r0
 80277e2:	6a20      	ldr	r0, [r4, #32]
 80277e4:	0a0a      	lsrs	r2, r1, #8
 80277e6:	7141      	strb	r1, [r0, #5]
 80277e8:	7182      	strb	r2, [r0, #6]
 80277ea:	1ef0      	subs	r0, r6, #3
 80277ec:	2107      	movs	r1, #7
 80277ee:	b282      	uxth	r2, r0
 80277f0:	4620      	mov	r0, r4
 80277f2:	f001 f838 	bl	8028866 <ACL_Set_Data>
 80277f6:	1d30      	adds	r0, r6, #4
 80277f8:	80a0      	strh	r0, [r4, #4]
 80277fa:	201d      	movs	r0, #29
 80277fc:	2d01      	cmp	r5, #1
 80277fe:	bf08      	it	eq
 8027800:	201b      	moveq	r0, #27
 8027802:	6a21      	ldr	r1, [r4, #32]
 8027804:	7108      	strb	r0, [r1, #4]
 8027806:	bd70      	pop	{r4, r5, r6, pc}

08027808 <OUTLINED_FUNCTION_0>:
 8027808:	2200      	movs	r2, #0
 802780a:	4623      	mov	r3, r4
 802780c:	2500      	movs	r5, #0
 802780e:	f7fe bff1 	b.w	80267f4 <ATT_Build_Error_Rsp>

08027812 <OUTLINED_FUNCTION_1>:
 8027812:	460d      	mov	r5, r1
 8027814:	6841      	ldr	r1, [r0, #4]
 8027816:	4614      	mov	r4, r2
 8027818:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
 802781c:	6041      	str	r1, [r0, #4]
 802781e:	f7fd bc5b 	b.w	80250d8 <GATT_Evt_Handle>

08027822 <OUTLINED_FUNCTION_2>:
 8027822:	7941      	ldrb	r1, [r0, #5]
 8027824:	7980      	ldrb	r0, [r0, #6]
 8027826:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 802782a:	4770      	bx	lr

0802782c <OUTLINED_FUNCTION_3>:
 802782c:	2201      	movs	r2, #1
 802782e:	f7ff b80a 	b.w	8026846 <ATT_Check_Perm>

08027832 <OUTLINED_FUNCTION_4>:
 8027832:	4623      	mov	r3, r4
 8027834:	f7fe bfde 	b.w	80267f4 <ATT_Build_Error_Rsp>

08027838 <OUTLINED_FUNCTION_5>:
 8027838:	4648      	mov	r0, r9
 802783a:	210b      	movs	r1, #11
 802783c:	9a07      	ldr	r2, [sp, #28]
 802783e:	f000 bfd0 	b.w	80287e2 <ACL_Cmp_Data>
	...

08027844 <GATT_Gap_Add_Service>:
 8027844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027848:	b08f      	sub	sp, #60	@ 0x3c
 802784a:	4680      	mov	r8, r0
 802784c:	4866      	ldr	r0, [pc, #408]	@ (80279e8 <__arm_cp.0_0>)
 802784e:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 80279f0 <__arm_cp.0_2>
 8027852:	4617      	mov	r7, r2
 8027854:	460d      	mov	r5, r1
 8027856:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802785a:	461e      	mov	r6, r3
 802785c:	9009      	str	r0, [sp, #36]	@ 0x24
 802785e:	4863      	ldr	r0, [pc, #396]	@ (80279ec <__arm_cp.0_1>)
 8027860:	9200      	str	r2, [sp, #0]
 8027862:	2209      	movs	r2, #9
 8027864:	9008      	str	r0, [sp, #32]
 8027866:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 802786a:	f899 1037 	ldrb.w	r1, [r9, #55]	@ 0x37
 802786e:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8027872:	f899 0034 	ldrb.w	r0, [r9, #52]	@ 0x34
 8027876:	2900      	cmp	r1, #0
 8027878:	bf08      	it	eq
 802787a:	2207      	moveq	r2, #7
 802787c:	a90b      	add	r1, sp, #44	@ 0x2c
 802787e:	4410      	add	r0, r2
 8027880:	2201      	movs	r2, #1
 8027882:	2401      	movs	r4, #1
 8027884:	b2c3      	uxtb	r3, r0
 8027886:	2001      	movs	r0, #1
 8027888:	f7fe f836 	bl	80258f8 <ACI_GATT_ADD_SERVICE>
 802788c:	2800      	cmp	r0, #0
 802788e:	d158      	bne.n	8027942 <GATT_Gap_Add_Service+0xfe>
 8027890:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 8027894:	2100      	movs	r1, #0
 8027896:	f88d 4006 	strb.w	r4, [sp, #6]
 802789a:	f8ad 5018 	strh.w	r5, [sp, #24]
 802789e:	f88d 401e 	strb.w	r4, [sp, #30]
 80278a2:	f88d 101b 	strb.w	r1, [sp, #27]
 80278a6:	8038      	strh	r0, [r7, #0]
 80278a8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80278ac:	f44f 5028 	mov.w	r0, #10752	@ 0x2a00
 80278b0:	4f50      	ldr	r7, [pc, #320]	@ (80279f4 <__arm_cp.0_3>)
 80278b2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80278b6:	f240 7001 	movw	r0, #1793	@ 0x701
 80278ba:	f8ad 001c 	strh.w	r0, [sp, #28]
 80278be:	8c38      	ldrh	r0, [r7, #32]
 80278c0:	0740      	lsls	r0, r0, #29
 80278c2:	f04f 0002 	mov.w	r0, #2
 80278c6:	bf58      	it	pl
 80278c8:	200a      	movpl	r0, #10
 80278ca:	f88d 001a 	strb.w	r0, [sp, #26]
 80278ce:	a80a      	add	r0, sp, #40	@ 0x28
 80278d0:	a901      	add	r1, sp, #4
 80278d2:	f7fe f8af 	bl	8025a34 <GATT_Add_Char_Core>
 80278d6:	bba0      	cbnz	r0, 8027942 <GATT_Gap_Add_Service+0xfe>
 80278d8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80278dc:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 80278e0:	2d08      	cmp	r5, #8
 80278e2:	8031      	strh	r1, [r6, #0]
 80278e4:	ae08      	add	r6, sp, #32
 80278e6:	9600      	str	r6, [sp, #0]
 80278e8:	bf28      	it	cs
 80278ea:	2508      	movcs	r5, #8
 80278ec:	2200      	movs	r2, #0
 80278ee:	462b      	mov	r3, r5
 80278f0:	2400      	movs	r4, #0
 80278f2:	f7fe fa41 	bl	8025d78 <ACI_GATT_UPDATE_CHAR_VALUE>
 80278f6:	bb20      	cbnz	r0, 8027942 <GATT_Gap_Add_Service+0xfe>
 80278f8:	2002      	movs	r0, #2
 80278fa:	f88d 401e 	strb.w	r4, [sp, #30]
 80278fe:	f8ad 0018 	strh.w	r0, [sp, #24]
 8027902:	f642 2001 	movw	r0, #10753	@ 0x2a01
 8027906:	f8ad 0008 	strh.w	r0, [sp, #8]
 802790a:	8c38      	ldrh	r0, [r7, #32]
 802790c:	05c0      	lsls	r0, r0, #23
 802790e:	f04f 000a 	mov.w	r0, #10
 8027912:	bf58      	it	pl
 8027914:	2002      	movpl	r0, #2
 8027916:	f88d 001a 	strb.w	r0, [sp, #26]
 802791a:	a80a      	add	r0, sp, #40	@ 0x28
 802791c:	a901      	add	r1, sp, #4
 802791e:	f7fe f889 	bl	8025a34 <GATT_Add_Char_Core>
 8027922:	b970      	cbnz	r0, 8027942 <GATT_Gap_Add_Service+0xfe>
 8027924:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8027928:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802792a:	2200      	movs	r2, #0
 802792c:	2302      	movs	r3, #2
 802792e:	8001      	strh	r1, [r0, #0]
 8027930:	2000      	movs	r0, #0
 8027932:	9600      	str	r6, [sp, #0]
 8027934:	f8ad 0020 	strh.w	r0, [sp, #32]
 8027938:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 802793c:	f7fe fa1c 	bl	8025d78 <ACI_GATT_UPDATE_CHAR_VALUE>
 8027940:	b118      	cbz	r0, 802794a <GATT_Gap_Add_Service+0x106>
 8027942:	2097      	movs	r0, #151	@ 0x97
 8027944:	b00f      	add	sp, #60	@ 0x3c
 8027946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802794a:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 802794e:	d126      	bne.n	802799e <GATT_Gap_Add_Service+0x15a>
 8027950:	f899 0037 	ldrb.w	r0, [r9, #55]	@ 0x37
 8027954:	b308      	cbz	r0, 802799a <GATT_Gap_Add_Service+0x156>
 8027956:	2000      	movs	r0, #0
 8027958:	2401      	movs	r4, #1
 802795a:	f88d 001e 	strb.w	r0, [sp, #30]
 802795e:	f88d 001c 	strb.w	r0, [sp, #28]
 8027962:	2002      	movs	r0, #2
 8027964:	f8ad 4018 	strh.w	r4, [sp, #24]
 8027968:	f88d 001a 	strb.w	r0, [sp, #26]
 802796c:	f642 20a6 	movw	r0, #10918	@ 0x2aa6
 8027970:	f8ad 0008 	strh.w	r0, [sp, #8]
 8027974:	a80a      	add	r0, sp, #40	@ 0x28
 8027976:	a901      	add	r1, sp, #4
 8027978:	f7fe f85c 	bl	8025a34 <GATT_Add_Char_Core>
 802797c:	2800      	cmp	r0, #0
 802797e:	d1e0      	bne.n	8027942 <GATT_Gap_Add_Service+0xfe>
 8027980:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8027984:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 8027988:	2200      	movs	r2, #0
 802798a:	2301      	movs	r3, #1
 802798c:	f88d 4020 	strb.w	r4, [sp, #32]
 8027990:	9600      	str	r6, [sp, #0]
 8027992:	f7fe f9f1 	bl	8025d78 <ACI_GATT_UPDATE_CHAR_VALUE>
 8027996:	2800      	cmp	r0, #0
 8027998:	d1d3      	bne.n	8027942 <GATT_Gap_Add_Service+0xfe>
 802799a:	2000      	movs	r0, #0
 802799c:	e7d2      	b.n	8027944 <GATT_Gap_Add_Service+0x100>
 802799e:	2000      	movs	r0, #0
 80279a0:	f88d 001c 	strb.w	r0, [sp, #28]
 80279a4:	2002      	movs	r0, #2
 80279a6:	f88d 001a 	strb.w	r0, [sp, #26]
 80279aa:	2008      	movs	r0, #8
 80279ac:	f8ad 0018 	strh.w	r0, [sp, #24]
 80279b0:	f642 2004 	movw	r0, #10756	@ 0x2a04
 80279b4:	f8ad 0008 	strh.w	r0, [sp, #8]
 80279b8:	a80a      	add	r0, sp, #40	@ 0x28
 80279ba:	a901      	add	r1, sp, #4
 80279bc:	f7fe f83a 	bl	8025a34 <GATT_Add_Char_Core>
 80279c0:	2800      	cmp	r0, #0
 80279c2:	d1be      	bne.n	8027942 <GATT_Gap_Add_Service+0xfe>
 80279c4:	f04f 30ff 	mov.w	r0, #4294967295
 80279c8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80279cc:	2200      	movs	r2, #0
 80279ce:	2308      	movs	r3, #8
 80279d0:	9600      	str	r6, [sp, #0]
 80279d2:	9008      	str	r0, [sp, #32]
 80279d4:	4808      	ldr	r0, [pc, #32]	@ (80279f8 <__arm_cp.0_4>)
 80279d6:	9009      	str	r0, [sp, #36]	@ 0x24
 80279d8:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 80279dc:	f7fe f9cc 	bl	8025d78 <ACI_GATT_UPDATE_CHAR_VALUE>
 80279e0:	2800      	cmp	r0, #0
 80279e2:	d1ae      	bne.n	8027942 <GATT_Gap_Add_Service+0xfe>
 80279e4:	e7b4      	b.n	8027950 <GATT_Gap_Add_Service+0x10c>
 80279e6:	bf00      	nop

080279e8 <__arm_cp.0_0>:
 80279e8:	21425732 	.word	0x21425732

080279ec <__arm_cp.0_1>:
 80279ec:	334d5453 	.word	0x334d5453

080279f0 <__arm_cp.0_2>:
 80279f0:	2000a014 	.word	0x2000a014

080279f4 <__arm_cp.0_3>:
 80279f4:	20009fec 	.word	0x20009fec

080279f8 <__arm_cp.0_4>:
 80279f8:	ffff0000 	.word	0xffff0000

080279fc <GATT_Compute_Database_Hash>:
 80279fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a00:	b08b      	sub	sp, #44	@ 0x2c
 8027a02:	2700      	movs	r7, #0
 8027a04:	9201      	str	r2, [sp, #4]
 8027a06:	4606      	mov	r6, r0
 8027a08:	460d      	mov	r5, r1
 8027a0a:	e9cd 7709 	strd	r7, r7, [sp, #36]	@ 0x24
 8027a0e:	e9cd 7707 	strd	r7, r7, [sp, #28]
 8027a12:	a807      	add	r0, sp, #28
 8027a14:	f7da fc8e 	bl	8002334 <BLEPLAT_AesCmacSetKey>
 8027a18:	4c3a      	ldr	r4, [pc, #232]	@ (8027b04 <__arm_cp.0_0>)
 8027a1a:	f106 0908 	add.w	r9, r6, #8
 8027a1e:	f8ad 700c 	strh.w	r7, [sp, #12]
 8027a22:	ae03      	add	r6, sp, #12
 8027a24:	f642 1a01 	movw	sl, #10497	@ 0x2901
 8027a28:	f8cd 9008 	str.w	r9, [sp, #8]
 8027a2c:	f8d9 9000 	ldr.w	r9, [r9]
 8027a30:	9802      	ldr	r0, [sp, #8]
 8027a32:	4581      	cmp	r9, r0
 8027a34:	d052      	beq.n	8027adc <GATT_Compute_Database_Hash+0xe0>
 8027a36:	b2b8      	uxth	r0, r7
 8027a38:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8027a3c:	f000 fb98 	bl	8028170 <OUTLINED_FUNCTION_0>
 8027a40:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027a44:	f109 012a 	add.w	r1, r9, #42	@ 0x2a
 8027a48:	f000 fb92 	bl	8028170 <OUTLINED_FUNCTION_0>
 8027a4c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027a50:	f899 102c 	ldrb.w	r1, [r9, #44]	@ 0x2c
 8027a54:	2210      	movs	r2, #16
 8027a56:	4633      	mov	r3, r6
 8027a58:	2901      	cmp	r1, #1
 8027a5a:	4428      	add	r0, r5
 8027a5c:	f109 0108 	add.w	r1, r9, #8
 8027a60:	bf08      	it	eq
 8027a62:	2202      	moveq	r2, #2
 8027a64:	47a0      	blx	r4
 8027a66:	f109 0820 	add.w	r8, r9, #32
 8027a6a:	4647      	mov	r7, r8
 8027a6c:	683f      	ldr	r7, [r7, #0]
 8027a6e:	4547      	cmp	r7, r8
 8027a70:	d031      	beq.n	8027ad6 <GATT_Compute_Database_Hash+0xda>
 8027a72:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 8027a76:	2801      	cmp	r0, #1
 8027a78:	d1f8      	bne.n	8027a6c <GATT_Compute_Database_Hash+0x70>
 8027a7a:	46bb      	mov	fp, r7
 8027a7c:	f83b 0f08 	ldrh.w	r0, [fp, #8]!
 8027a80:	eba0 010a 	sub.w	r1, r0, sl
 8027a84:	2905      	cmp	r1, #5
 8027a86:	d20b      	bcs.n	8027aa0 <GATT_Compute_Database_Hash+0xa4>
 8027a88:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027a8c:	f107 011c 	add.w	r1, r7, #28
 8027a90:	f000 fb7c 	bl	802818c <OUTLINED_FUNCTION_3>
 8027a94:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027a98:	4659      	mov	r1, fp
 8027a9a:	f000 fb77 	bl	802818c <OUTLINED_FUNCTION_3>
 8027a9e:	e7e5      	b.n	8027a6c <GATT_Compute_Database_Hash+0x70>
 8027aa0:	f642 0102 	movw	r1, #10242	@ 0x2802
 8027aa4:	1a41      	subs	r1, r0, r1
 8027aa6:	2902      	cmp	r1, #2
 8027aa8:	d302      	bcc.n	8027ab0 <GATT_Compute_Database_Hash+0xb4>
 8027aaa:	f5b0 5f24 	cmp.w	r0, #10496	@ 0x2900
 8027aae:	d1dd      	bne.n	8027a6c <GATT_Compute_Database_Hash+0x70>
 8027ab0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027ab4:	f107 011c 	add.w	r1, r7, #28
 8027ab8:	f000 fb5a 	bl	8028170 <OUTLINED_FUNCTION_0>
 8027abc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027ac0:	4659      	mov	r1, fp
 8027ac2:	f000 fb55 	bl	8028170 <OUTLINED_FUNCTION_0>
 8027ac6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8027aca:	69b9      	ldr	r1, [r7, #24]
 8027acc:	8bfa      	ldrh	r2, [r7, #30]
 8027ace:	4633      	mov	r3, r6
 8027ad0:	4428      	add	r0, r5
 8027ad2:	47a0      	blx	r4
 8027ad4:	e7ca      	b.n	8027a6c <GATT_Compute_Database_Hash+0x70>
 8027ad6:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8027ada:	e7a7      	b.n	8027a2c <GATT_Compute_Database_Hash+0x30>
 8027adc:	b2b9      	uxth	r1, r7
 8027ade:	4628      	mov	r0, r5
 8027ae0:	f5b1 7f28 	cmp.w	r1, #672	@ 0x2a0
 8027ae4:	bf28      	it	cs
 8027ae6:	f44f 7128 	movcs.w	r1, #672	@ 0x2a0
 8027aea:	ae03      	add	r6, sp, #12
 8027aec:	4632      	mov	r2, r6
 8027aee:	f7da fc23 	bl	8002338 <BLEPLAT_AesCmacCompute>
 8027af2:	9801      	ldr	r0, [sp, #4]
 8027af4:	4631      	mov	r1, r6
 8027af6:	2210      	movs	r2, #16
 8027af8:	f003 fe75 	bl	802b7e6 <Memcpy_Rev>
 8027afc:	b00b      	add	sp, #44	@ 0x2c
 8027afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b02:	bf00      	nop

08027b04 <__arm_cp.0_0>:
 8027b04:	08028155 	.word	0x08028155

08027b08 <GATT_Get_Change_Vs_Server_Database>:
 8027b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b0c:	f5ad 7d35 	sub.w	sp, sp, #724	@ 0x2d4
 8027b10:	f8df 4468 	ldr.w	r4, [pc, #1128]	@ 8027f7c <__arm_cp.1_0>
 8027b14:	4683      	mov	fp, r0
 8027b16:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8027b1a:	4615      	mov	r5, r2
 8027b1c:	460e      	mov	r6, r1
 8027b1e:	9008      	str	r0, [sp, #32]
 8027b20:	8c20      	ldrh	r0, [r4, #32]
 8027b22:	f000 0022 	and.w	r0, r0, #34	@ 0x22
 8027b26:	2820      	cmp	r0, #32
 8027b28:	d107      	bne.n	8027b3a <GATT_Get_Change_Vs_Server_Database+0x32>
 8027b2a:	f8df 0454 	ldr.w	r0, [pc, #1108]	@ 8027f80 <__arm_cp.1_1>
 8027b2e:	a90d      	add	r1, sp, #52	@ 0x34
 8027b30:	aa09      	add	r2, sp, #36	@ 0x24
 8027b32:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8027b36:	f7ff ff61 	bl	80279fc <GATT_Compute_Database_Hash>
 8027b3a:	f8bb 0000 	ldrh.w	r0, [fp]
 8027b3e:	a908      	add	r1, sp, #32
 8027b40:	aa0d      	add	r2, sp, #52	@ 0x34
 8027b42:	f001 fd08 	bl	8029556 <SMP_Retrieve_GATT_Data>
 8027b46:	b118      	cbz	r0, 8027b50 <GATT_Get_Change_Vs_Server_Database+0x48>
 8027b48:	f50d 7d35 	add.w	sp, sp, #724	@ 0x2d4
 8027b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b50:	8c20      	ldrh	r0, [r4, #32]
 8027b52:	0681      	lsls	r1, r0, #26
 8027b54:	d40e      	bmi.n	8027b74 <GATT_Get_Change_Vs_Server_Database+0x6c>
 8027b56:	9808      	ldr	r0, [sp, #32]
 8027b58:	2804      	cmp	r0, #4
 8027b5a:	d314      	bcc.n	8027b86 <GATT_Get_Change_Vs_Server_Database+0x7e>
 8027b5c:	3801      	subs	r0, #1
 8027b5e:	2104      	movs	r1, #4
 8027b60:	040a      	lsls	r2, r1, #16
 8027b62:	d012      	beq.n	8027b8a <GATT_Get_Change_Vs_Server_Database+0x82>
 8027b64:	aa0d      	add	r2, sp, #52	@ 0x34
 8027b66:	5c12      	ldrb	r2, [r2, r0]
 8027b68:	2a0b      	cmp	r2, #11
 8027b6a:	d10e      	bne.n	8027b8a <GATT_Get_Change_Vs_Server_Database+0x82>
 8027b6c:	9008      	str	r0, [sp, #32]
 8027b6e:	3901      	subs	r1, #1
 8027b70:	3801      	subs	r0, #1
 8027b72:	e7f5      	b.n	8027b60 <GATT_Get_Change_Vs_Server_Database+0x58>
 8027b74:	0780      	lsls	r0, r0, #30
 8027b76:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8027b7a:	f100 81b3 	bmi.w	8027ee4 <GATT_Get_Change_Vs_Server_Database+0x3dc>
 8027b7e:	9808      	ldr	r0, [sp, #32]
 8027b80:	2810      	cmp	r0, #16
 8027b82:	f080 81b5 	bcs.w	8027ef0 <GATT_Get_Change_Vs_Server_Database+0x3e8>
 8027b86:	2097      	movs	r0, #151	@ 0x97
 8027b88:	e7de      	b.n	8027b48 <GATT_Get_Change_Vs_Server_Database+0x40>
 8027b8a:	f8df 03f4 	ldr.w	r0, [pc, #1012]	@ 8027f80 <__arm_cp.1_1>
 8027b8e:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8027b92:	ae05      	add	r6, sp, #20
 8027b94:	f04f 0800 	mov.w	r8, #0
 8027b98:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8027b9c:	2101      	movs	r1, #1
 8027b9e:	f04f 0a01 	mov.w	sl, #1
 8027ba2:	f8cd b000 	str.w	fp, [sp]
 8027ba6:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8027baa:	9003      	str	r0, [sp, #12]
 8027bac:	2000      	movs	r0, #0
 8027bae:	9004      	str	r0, [sp, #16]
 8027bb0:	ac0d      	add	r4, sp, #52	@ 0x34
 8027bb2:	b2c8      	uxtb	r0, r1
 8027bb4:	2801      	cmp	r0, #1
 8027bb6:	f040 81d1 	bne.w	8027f5c <GATT_Get_Change_Vs_Server_Database+0x454>
 8027bba:	fa1f f788 	uxth.w	r7, r8
 8027bbe:	f10d 001e 	add.w	r0, sp, #30
 8027bc2:	2202      	movs	r2, #2
 8027bc4:	19e5      	adds	r5, r4, r7
 8027bc6:	4629      	mov	r1, r5
 8027bc8:	f7f8 fe3c 	bl	8020844 <ble_memcpy>
 8027bcc:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8027bd0:	4631      	mov	r1, r6
 8027bd2:	aa06      	add	r2, sp, #24
 8027bd4:	f000 f9d6 	bl	8027f84 <GATT_Fetch_Handle>
 8027bd8:	2802      	cmp	r0, #2
 8027bda:	d04d      	beq.n	8027c78 <GATT_Get_Change_Vs_Server_Database+0x170>
 8027bdc:	2801      	cmp	r0, #1
 8027bde:	d16b      	bne.n	8027cb8 <GATT_Get_Change_Vs_Server_Database+0x1b0>
 8027be0:	9804      	ldr	r0, [sp, #16]
 8027be2:	0600      	lsls	r0, r0, #24
 8027be4:	f040 80e0 	bne.w	8027da8 <GATT_Get_Change_Vs_Server_Database+0x2a0>
 8027be8:	f8dd b014 	ldr.w	fp, [sp, #20]
 8027bec:	4628      	mov	r0, r5
 8027bee:	2202      	movs	r2, #2
 8027bf0:	f10b 0628 	add.w	r6, fp, #40	@ 0x28
 8027bf4:	4631      	mov	r1, r6
 8027bf6:	f7f8 fead 	bl	8020954 <ble_memcmp>
 8027bfa:	3702      	adds	r7, #2
 8027bfc:	b9e8      	cbnz	r0, 8027c3a <GATT_Get_Change_Vs_Server_Database+0x132>
 8027bfe:	a80d      	add	r0, sp, #52	@ 0x34
 8027c00:	5dc1      	ldrb	r1, [r0, r7]
 8027c02:	f89b 002c 	ldrb.w	r0, [fp, #44]	@ 0x2c
 8027c06:	4288      	cmp	r0, r1
 8027c08:	d117      	bne.n	8027c3a <GATT_Get_Change_Vs_Server_Database+0x132>
 8027c0a:	2801      	cmp	r0, #1
 8027c0c:	d10a      	bne.n	8027c24 <GATT_Get_Change_Vs_Server_Database+0x11c>
 8027c0e:	1ce9      	adds	r1, r5, #3
 8027c10:	f10b 0008 	add.w	r0, fp, #8
 8027c14:	2202      	movs	r2, #2
 8027c16:	f7f8 fe9d 	bl	8020954 <ble_memcmp>
 8027c1a:	2800      	cmp	r0, #0
 8027c1c:	f000 80c8 	beq.w	8027db0 <GATT_Get_Change_Vs_Server_Database+0x2a8>
 8027c20:	a80d      	add	r0, sp, #52	@ 0x34
 8027c22:	5dc0      	ldrb	r0, [r0, r7]
 8027c24:	2802      	cmp	r0, #2
 8027c26:	d108      	bne.n	8027c3a <GATT_Get_Change_Vs_Server_Database+0x132>
 8027c28:	1ce9      	adds	r1, r5, #3
 8027c2a:	f10b 0008 	add.w	r0, fp, #8
 8027c2e:	2210      	movs	r2, #16
 8027c30:	f7f8 fe90 	bl	8020954 <ble_memcmp>
 8027c34:	2800      	cmp	r0, #0
 8027c36:	f000 80bb 	beq.w	8027db0 <GATT_Get_Change_Vs_Server_Database+0x2a8>
 8027c3a:	fa1f fa8a 	uxth.w	sl, sl
 8027c3e:	8836      	ldrh	r6, [r6, #0]
 8027c40:	fa1f f089 	uxth.w	r0, r9
 8027c44:	45b2      	cmp	sl, r6
 8027c46:	bf98      	it	ls
 8027c48:	46b2      	movls	sl, r6
 8027c4a:	42b0      	cmp	r0, r6
 8027c4c:	bf38      	it	cc
 8027c4e:	4606      	movcc	r6, r0
 8027c50:	a90d      	add	r1, sp, #52	@ 0x34
 8027c52:	5dc8      	ldrb	r0, [r1, r7]
 8027c54:	2801      	cmp	r0, #1
 8027c56:	f04f 0013 	mov.w	r0, #19
 8027c5a:	bf08      	it	eq
 8027c5c:	2005      	moveq	r0, #5
 8027c5e:	f000 fa9a 	bl	8028196 <OUTLINED_FUNCTION_4>
 8027c62:	d94b      	bls.n	8027cfc <GATT_Get_Change_Vs_Server_Database+0x1f4>
 8027c64:	4439      	add	r1, r7
 8027c66:	f10d 001e 	add.w	r0, sp, #30
 8027c6a:	2202      	movs	r2, #2
 8027c6c:	4664      	mov	r4, ip
 8027c6e:	f7f8 fde9 	bl	8020844 <ble_memcpy>
 8027c72:	46a4      	mov	ip, r4
 8027c74:	2000      	movs	r0, #0
 8027c76:	e042      	b.n	8027cfe <GATT_Get_Change_Vs_Server_Database+0x1f6>
 8027c78:	9804      	ldr	r0, [sp, #16]
 8027c7a:	0600      	lsls	r0, r0, #24
 8027c7c:	f040 8094 	bne.w	8027da8 <GATT_Get_Change_Vs_Server_Database+0x2a0>
 8027c80:	9f05      	ldr	r7, [sp, #20]
 8027c82:	4628      	mov	r0, r5
 8027c84:	2202      	movs	r2, #2
 8027c86:	78ae      	ldrb	r6, [r5, #2]
 8027c88:	f107 041c 	add.w	r4, r7, #28
 8027c8c:	4621      	mov	r1, r4
 8027c8e:	f7f8 fe61 	bl	8020954 <ble_memcmp>
 8027c92:	2800      	cmp	r0, #0
 8027c94:	f040 8095 	bne.w	8027dc2 <GATT_Get_Change_Vs_Server_Database+0x2ba>
 8027c98:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 8027c9c:	42b0      	cmp	r0, r6
 8027c9e:	f040 8090 	bne.w	8027dc2 <GATT_Get_Change_Vs_Server_Database+0x2ba>
 8027ca2:	1ce9      	adds	r1, r5, #3
 8027ca4:	2e02      	cmp	r6, #2
 8027ca6:	f000 8085 	beq.w	8027db4 <GATT_Get_Change_Vs_Server_Database+0x2ac>
 8027caa:	2e01      	cmp	r6, #1
 8027cac:	f040 8089 	bne.w	8027dc2 <GATT_Get_Change_Vs_Server_Database+0x2ba>
 8027cb0:	f107 0008 	add.w	r0, r7, #8
 8027cb4:	2202      	movs	r2, #2
 8027cb6:	e080      	b.n	8027dba <GATT_Get_Change_Vs_Server_Database+0x2b2>
 8027cb8:	fa1f fa8a 	uxth.w	sl, sl
 8027cbc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8027cc0:	fa1f f089 	uxth.w	r0, r9
 8027cc4:	458a      	cmp	sl, r1
 8027cc6:	bf98      	it	ls
 8027cc8:	468a      	movls	sl, r1
 8027cca:	4288      	cmp	r0, r1
 8027ccc:	bf38      	it	cc
 8027cce:	4601      	movcc	r1, r0
 8027cd0:	1cb8      	adds	r0, r7, #2
 8027cd2:	5c22      	ldrb	r2, [r4, r0]
 8027cd4:	2a01      	cmp	r2, #1
 8027cd6:	d10e      	bne.n	8027cf6 <GATT_Get_Change_Vs_Server_Database+0x1ee>
 8027cd8:	78ea      	ldrb	r2, [r5, #3]
 8027cda:	792b      	ldrb	r3, [r5, #4]
 8027cdc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8027ce0:	f642 3329 	movw	r3, #11049	@ 0x2b29
 8027ce4:	b292      	uxth	r2, r2
 8027ce6:	429a      	cmp	r2, r3
 8027ce8:	d04f      	beq.n	8027d8a <GATT_Get_Change_Vs_Server_Database+0x282>
 8027cea:	f642 1302 	movw	r3, #10498	@ 0x2902
 8027cee:	429a      	cmp	r2, r3
 8027cf0:	bf08      	it	eq
 8027cf2:	4680      	moveq	r8, r0
 8027cf4:	e04b      	b.n	8027d8e <GATT_Get_Change_Vs_Server_Database+0x286>
 8027cf6:	f108 0813 	add.w	r8, r8, #19
 8027cfa:	e04a      	b.n	8027d92 <GATT_Get_Change_Vs_Server_Database+0x28a>
 8027cfc:	2001      	movs	r0, #1
 8027cfe:	2100      	movs	r1, #0
 8027d00:	9004      	str	r0, [sp, #16]
 8027d02:	45bc      	cmp	ip, r7
 8027d04:	bf98      	it	ls
 8027d06:	2101      	movls	r1, #1
 8027d08:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027d0c:	9803      	ldr	r0, [sp, #12]
 8027d0e:	4583      	cmp	fp, r0
 8027d10:	d04c      	beq.n	8027dac <GATT_Get_Change_Vs_Server_Database+0x2a4>
 8027d12:	f10b 0020 	add.w	r0, fp, #32
 8027d16:	4603      	mov	r3, r0
 8027d18:	681b      	ldr	r3, [r3, #0]
 8027d1a:	4283      	cmp	r3, r0
 8027d1c:	d014      	beq.n	8027d48 <GATT_Get_Change_Vs_Server_Database+0x240>
 8027d1e:	8b9d      	ldrh	r5, [r3, #28]
 8027d20:	42aa      	cmp	r2, r5
 8027d22:	d806      	bhi.n	8027d32 <GATT_Get_Change_Vs_Server_Database+0x22a>
 8027d24:	f04f 0400 	mov.w	r4, #0
 8027d28:	bf38      	it	cc
 8027d2a:	2401      	movcc	r4, #1
 8027d2c:	400c      	ands	r4, r1
 8027d2e:	2c01      	cmp	r4, #1
 8027d30:	d128      	bne.n	8027d84 <GATT_Get_Change_Vs_Server_Database+0x27c>
 8027d32:	fa1f fa8a 	uxth.w	sl, sl
 8027d36:	b2b4      	uxth	r4, r6
 8027d38:	45aa      	cmp	sl, r5
 8027d3a:	bf98      	it	ls
 8027d3c:	46aa      	movls	sl, r5
 8027d3e:	42ac      	cmp	r4, r5
 8027d40:	bf38      	it	cc
 8027d42:	4625      	movcc	r5, r4
 8027d44:	462e      	mov	r6, r5
 8027d46:	e7e7      	b.n	8027d18 <GATT_Get_Change_Vs_Server_Database+0x210>
 8027d48:	f8db b000 	ldr.w	fp, [fp]
 8027d4c:	9803      	ldr	r0, [sp, #12]
 8027d4e:	4583      	cmp	fp, r0
 8027d50:	d0dc      	beq.n	8027d0c <GATT_Get_Change_Vs_Server_Database+0x204>
 8027d52:	f8bb 9028 	ldrh.w	r9, [fp, #40]	@ 0x28
 8027d56:	454a      	cmp	r2, r9
 8027d58:	d806      	bhi.n	8027d68 <GATT_Get_Change_Vs_Server_Database+0x260>
 8027d5a:	f04f 0000 	mov.w	r0, #0
 8027d5e:	bf38      	it	cc
 8027d60:	2001      	movcc	r0, #1
 8027d62:	4008      	ands	r0, r1
 8027d64:	2801      	cmp	r0, #1
 8027d66:	d1d1      	bne.n	8027d0c <GATT_Get_Change_Vs_Server_Database+0x204>
 8027d68:	fa1f fa8a 	uxth.w	sl, sl
 8027d6c:	b2b0      	uxth	r0, r6
 8027d6e:	45ca      	cmp	sl, r9
 8027d70:	bf98      	it	ls
 8027d72:	46ca      	movls	sl, r9
 8027d74:	4548      	cmp	r0, r9
 8027d76:	bf38      	it	cc
 8027d78:	4681      	movcc	r9, r0
 8027d7a:	464e      	mov	r6, r9
 8027d7c:	2001      	movs	r0, #1
 8027d7e:	45bc      	cmp	ip, r7
 8027d80:	d9c4      	bls.n	8027d0c <GATT_Get_Change_Vs_Server_Database+0x204>
 8027d82:	e089      	b.n	8027e98 <GATT_Get_Change_Vs_Server_Database+0x390>
 8027d84:	2001      	movs	r0, #1
 8027d86:	46b1      	mov	r9, r6
 8027d88:	e086      	b.n	8027e98 <GATT_Get_Change_Vs_Server_Database+0x390>
 8027d8a:	f108 0801 	add.w	r8, r8, #1
 8027d8e:	f108 0805 	add.w	r8, r8, #5
 8027d92:	fa1f f788 	uxth.w	r7, r8
 8027d96:	9808      	ldr	r0, [sp, #32]
 8027d98:	9a04      	ldr	r2, [sp, #16]
 8027d9a:	4689      	mov	r9, r1
 8027d9c:	42b8      	cmp	r0, r7
 8027d9e:	f04f 0001 	mov.w	r0, #1
 8027da2:	bf98      	it	ls
 8027da4:	4602      	movls	r2, r0
 8027da6:	9204      	str	r2, [sp, #16]
 8027da8:	2000      	movs	r0, #0
 8027daa:	e077      	b.n	8027e9c <GATT_Get_Change_Vs_Server_Database+0x394>
 8027dac:	2000      	movs	r0, #0
 8027dae:	e7ea      	b.n	8027d86 <GATT_Get_Change_Vs_Server_Database+0x27e>
 8027db0:	464e      	mov	r6, r9
 8027db2:	e74d      	b.n	8027c50 <GATT_Get_Change_Vs_Server_Database+0x148>
 8027db4:	f107 0008 	add.w	r0, r7, #8
 8027db8:	2210      	movs	r2, #16
 8027dba:	f7f8 fdcb 	bl	8020954 <ble_memcmp>
 8027dbe:	2800      	cmp	r0, #0
 8027dc0:	d07a      	beq.n	8027eb8 <GATT_Get_Change_Vs_Server_Database+0x3b0>
 8027dc2:	fa1f fa8a 	uxth.w	sl, sl
 8027dc6:	f8b4 b000 	ldrh.w	fp, [r4]
 8027dca:	fa1f f089 	uxth.w	r0, r9
 8027dce:	463d      	mov	r5, r7
 8027dd0:	45da      	cmp	sl, fp
 8027dd2:	bf98      	it	ls
 8027dd4:	46da      	movls	sl, fp
 8027dd6:	4558      	cmp	r0, fp
 8027dd8:	bf38      	it	cc
 8027dda:	4683      	movcc	fp, r0
 8027ddc:	2013      	movs	r0, #19
 8027dde:	2e01      	cmp	r6, #1
 8027de0:	bf08      	it	eq
 8027de2:	2005      	moveq	r0, #5
 8027de4:	f000 f9d7 	bl	8028196 <OUTLINED_FUNCTION_4>
 8027de8:	d90a      	bls.n	8027e00 <GATT_Get_Change_Vs_Server_Database+0x2f8>
 8027dea:	a80d      	add	r0, sp, #52	@ 0x34
 8027dec:	2202      	movs	r2, #2
 8027dee:	4664      	mov	r4, ip
 8027df0:	19c1      	adds	r1, r0, r7
 8027df2:	f10d 001e 	add.w	r0, sp, #30
 8027df6:	f7f8 fd25 	bl	8020844 <ble_memcpy>
 8027dfa:	46a4      	mov	ip, r4
 8027dfc:	2000      	movs	r0, #0
 8027dfe:	e000      	b.n	8027e02 <GATT_Get_Change_Vs_Server_Database+0x2fa>
 8027e00:	2001      	movs	r0, #1
 8027e02:	2100      	movs	r1, #0
 8027e04:	9004      	str	r0, [sp, #16]
 8027e06:	ae05      	add	r6, sp, #20
 8027e08:	45bc      	cmp	ip, r7
 8027e0a:	bf98      	it	ls
 8027e0c:	2101      	movls	r1, #1
 8027e0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027e12:	682d      	ldr	r5, [r5, #0]
 8027e14:	9b06      	ldr	r3, [sp, #24]
 8027e16:	9803      	ldr	r0, [sp, #12]
 8027e18:	4283      	cmp	r3, r0
 8027e1a:	d049      	beq.n	8027eb0 <GATT_Get_Change_Vs_Server_Database+0x3a8>
 8027e1c:	f103 0020 	add.w	r0, r3, #32
 8027e20:	4285      	cmp	r5, r0
 8027e22:	d016      	beq.n	8027e52 <GATT_Get_Change_Vs_Server_Database+0x34a>
 8027e24:	8bac      	ldrh	r4, [r5, #28]
 8027e26:	42a2      	cmp	r2, r4
 8027e28:	d806      	bhi.n	8027e38 <GATT_Get_Change_Vs_Server_Database+0x330>
 8027e2a:	f04f 0600 	mov.w	r6, #0
 8027e2e:	bf38      	it	cc
 8027e30:	2601      	movcc	r6, #1
 8027e32:	400e      	ands	r6, r1
 8027e34:	2e01      	cmp	r6, #1
 8027e36:	d12d      	bne.n	8027e94 <GATT_Get_Change_Vs_Server_Database+0x38c>
 8027e38:	fa1f fa8a 	uxth.w	sl, sl
 8027e3c:	fa1f f68b 	uxth.w	r6, fp
 8027e40:	45a2      	cmp	sl, r4
 8027e42:	bf98      	it	ls
 8027e44:	46a2      	movls	sl, r4
 8027e46:	42a6      	cmp	r6, r4
 8027e48:	bf38      	it	cc
 8027e4a:	4634      	movcc	r4, r6
 8027e4c:	682d      	ldr	r5, [r5, #0]
 8027e4e:	46a3      	mov	fp, r4
 8027e50:	e7e6      	b.n	8027e20 <GATT_Get_Change_Vs_Server_Database+0x318>
 8027e52:	681b      	ldr	r3, [r3, #0]
 8027e54:	9c03      	ldr	r4, [sp, #12]
 8027e56:	4605      	mov	r5, r0
 8027e58:	ae05      	add	r6, sp, #20
 8027e5a:	42a3      	cmp	r3, r4
 8027e5c:	d0db      	beq.n	8027e16 <GATT_Get_Change_Vs_Server_Database+0x30e>
 8027e5e:	f8b3 9028 	ldrh.w	r9, [r3, #40]	@ 0x28
 8027e62:	6a1d      	ldr	r5, [r3, #32]
 8027e64:	454a      	cmp	r2, r9
 8027e66:	d806      	bhi.n	8027e76 <GATT_Get_Change_Vs_Server_Database+0x36e>
 8027e68:	f04f 0000 	mov.w	r0, #0
 8027e6c:	bf38      	it	cc
 8027e6e:	2001      	movcc	r0, #1
 8027e70:	4008      	ands	r0, r1
 8027e72:	2801      	cmp	r0, #1
 8027e74:	d1cf      	bne.n	8027e16 <GATT_Get_Change_Vs_Server_Database+0x30e>
 8027e76:	fa1f fa8a 	uxth.w	sl, sl
 8027e7a:	fa1f f08b 	uxth.w	r0, fp
 8027e7e:	45ca      	cmp	sl, r9
 8027e80:	bf98      	it	ls
 8027e82:	46ca      	movls	sl, r9
 8027e84:	4548      	cmp	r0, r9
 8027e86:	bf38      	it	cc
 8027e88:	4681      	movcc	r9, r0
 8027e8a:	46cb      	mov	fp, r9
 8027e8c:	2001      	movs	r0, #1
 8027e8e:	45bc      	cmp	ip, r7
 8027e90:	d9c1      	bls.n	8027e16 <GATT_Get_Change_Vs_Server_Database+0x30e>
 8027e92:	e00f      	b.n	8027eb4 <GATT_Get_Change_Vs_Server_Database+0x3ac>
 8027e94:	2001      	movs	r0, #1
 8027e96:	46d9      	mov	r9, fp
 8027e98:	ac0d      	add	r4, sp, #52	@ 0x34
 8027e9a:	ae05      	add	r6, sp, #20
 8027e9c:	9a08      	ldr	r2, [sp, #32]
 8027e9e:	1bd1      	subs	r1, r2, r7
 8027ea0:	2903      	cmp	r1, #3
 8027ea2:	4601      	mov	r1, r0
 8027ea4:	bf88      	it	hi
 8027ea6:	2101      	movhi	r1, #1
 8027ea8:	42ba      	cmp	r2, r7
 8027eaa:	bf98      	it	ls
 8027eac:	4601      	movls	r1, r0
 8027eae:	e680      	b.n	8027bb2 <GATT_Get_Change_Vs_Server_Database+0xaa>
 8027eb0:	2000      	movs	r0, #0
 8027eb2:	46d9      	mov	r9, fp
 8027eb4:	ac0d      	add	r4, sp, #52	@ 0x34
 8027eb6:	e7f1      	b.n	8027e9c <GATT_Get_Change_Vs_Server_Database+0x394>
 8027eb8:	f107 0108 	add.w	r1, r7, #8
 8027ebc:	4630      	mov	r0, r6
 8027ebe:	f7fd fc8f 	bl	80257e0 <GATT_Is_Multiple_Val_Attr>
 8027ec2:	b160      	cbz	r0, 8027ede <GATT_Get_Change_Vs_Server_Database+0x3d6>
 8027ec4:	4638      	mov	r0, r7
 8027ec6:	9900      	ldr	r1, [sp, #0]
 8027ec8:	f7fd fc9c 	bl	8025804 <GATT_Attr_Val>
 8027ecc:	1d69      	adds	r1, r5, #5
 8027ece:	8c3a      	ldrh	r2, [r7, #32]
 8027ed0:	f7f8 fcb8 	bl	8020844 <ble_memcpy>
 8027ed4:	8c38      	ldrh	r0, [r7, #32]
 8027ed6:	463d      	mov	r5, r7
 8027ed8:	46cb      	mov	fp, r9
 8027eda:	4480      	add	r8, r0
 8027edc:	e77e      	b.n	8027ddc <GATT_Get_Change_Vs_Server_Database+0x2d4>
 8027ede:	463d      	mov	r5, r7
 8027ee0:	46cb      	mov	fp, r9
 8027ee2:	e77b      	b.n	8027ddc <GATT_Get_Change_Vs_Server_Database+0x2d4>
 8027ee4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8027ee8:	f04f 0a01 	mov.w	sl, #1
 8027eec:	2700      	movs	r7, #0
 8027eee:	e010      	b.n	8027f12 <GATT_Get_Change_Vs_Server_Database+0x40a>
 8027ef0:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8027ef4:	a809      	add	r0, sp, #36	@ 0x24
 8027ef6:	a90d      	add	r1, sp, #52	@ 0x34
 8027ef8:	2210      	movs	r2, #16
 8027efa:	2710      	movs	r7, #16
 8027efc:	f7f8 fd2a 	bl	8020954 <ble_memcmp>
 8027f00:	2800      	cmp	r0, #0
 8027f02:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8027f06:	bf14      	ite	ne
 8027f08:	2001      	movne	r0, #1
 8027f0a:	f04f 0901 	moveq.w	r9, #1
 8027f0e:	46ca      	mov	sl, r9
 8027f10:	4681      	mov	r9, r0
 8027f12:	f10d 0814 	add.w	r8, sp, #20
 8027f16:	ad06      	add	r5, sp, #24
 8027f18:	b2b8      	uxth	r0, r7
 8027f1a:	9908      	ldr	r1, [sp, #32]
 8027f1c:	1cc7      	adds	r7, r0, #3
 8027f1e:	428f      	cmp	r7, r1
 8027f20:	d81c      	bhi.n	8027f5c <GATT_Get_Change_Vs_Server_Database+0x454>
 8027f22:	aa0d      	add	r2, sp, #52	@ 0x34
 8027f24:	1814      	adds	r4, r2, r0
 8027f26:	5c11      	ldrb	r1, [r2, r0]
 8027f28:	462a      	mov	r2, r5
 8027f2a:	7860      	ldrb	r0, [r4, #1]
 8027f2c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8027f30:	4641      	mov	r1, r8
 8027f32:	b280      	uxth	r0, r0
 8027f34:	f000 f826 	bl	8027f84 <GATT_Fetch_Handle>
 8027f38:	2802      	cmp	r0, #2
 8027f3a:	d1ed      	bne.n	8027f18 <GATT_Get_Change_Vs_Server_Database+0x410>
 8027f3c:	9e05      	ldr	r6, [sp, #20]
 8027f3e:	f896 0023 	ldrb.w	r0, [r6, #35]	@ 0x23
 8027f42:	f106 0108 	add.w	r1, r6, #8
 8027f46:	f7fd fc4b 	bl	80257e0 <GATT_Is_Multiple_Val_Attr>
 8027f4a:	2800      	cmp	r0, #0
 8027f4c:	d0e4      	beq.n	8027f18 <GATT_Get_Change_Vs_Server_Database+0x410>
 8027f4e:	4630      	mov	r0, r6
 8027f50:	4659      	mov	r1, fp
 8027f52:	f7fd fc57 	bl	8025804 <GATT_Attr_Val>
 8027f56:	78a1      	ldrb	r1, [r4, #2]
 8027f58:	7001      	strb	r1, [r0, #0]
 8027f5a:	e7dd      	b.n	8027f18 <GATT_Get_Change_Vs_Server_Database+0x410>
 8027f5c:	fa1f f08a 	uxth.w	r0, sl
 8027f60:	fa1f f189 	uxth.w	r1, r9
 8027f64:	4281      	cmp	r1, r0
 8027f66:	d901      	bls.n	8027f6c <GATT_Get_Change_Vs_Server_Database+0x464>
 8027f68:	2091      	movs	r0, #145	@ 0x91
 8027f6a:	e5ed      	b.n	8027b48 <GATT_Get_Change_Vs_Server_Database+0x40>
 8027f6c:	9801      	ldr	r0, [sp, #4]
 8027f6e:	f8a0 9000 	strh.w	r9, [r0]
 8027f72:	9802      	ldr	r0, [sp, #8]
 8027f74:	f8a0 a000 	strh.w	sl, [r0]
 8027f78:	2000      	movs	r0, #0
 8027f7a:	e5e5      	b.n	8027b48 <GATT_Get_Change_Vs_Server_Database+0x40>

08027f7c <__arm_cp.1_0>:
 8027f7c:	20009fec 	.word	0x20009fec

08027f80 <__arm_cp.1_1>:
 8027f80:	2000a014 	.word	0x2000a014

08027f84 <GATT_Fetch_Handle>:
 8027f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f86:	4b0f      	ldr	r3, [pc, #60]	@ (8027fc4 <__arm_cp.2_0>)
 8027f88:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8027f8c:	461c      	mov	r4, r3
 8027f8e:	6824      	ldr	r4, [r4, #0]
 8027f90:	429c      	cmp	r4, r3
 8027f92:	bf04      	itt	eq
 8027f94:	2000      	moveq	r0, #0
 8027f96:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 8027f98:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
 8027f9a:	4285      	cmp	r5, r0
 8027f9c:	d00d      	beq.n	8027fba <GATT_Fetch_Handle+0x36>
 8027f9e:	f104 0520 	add.w	r5, r4, #32
 8027fa2:	6014      	str	r4, [r2, #0]
 8027fa4:	462e      	mov	r6, r5
 8027fa6:	6836      	ldr	r6, [r6, #0]
 8027fa8:	42ae      	cmp	r6, r5
 8027faa:	d0f0      	beq.n	8027f8e <GATT_Fetch_Handle+0xa>
 8027fac:	8bb7      	ldrh	r7, [r6, #28]
 8027fae:	4287      	cmp	r7, r0
 8027fb0:	bf02      	ittt	eq
 8027fb2:	600e      	streq	r6, [r1, #0]
 8027fb4:	2002      	moveq	r0, #2
 8027fb6:	bdf0      	popeq	{r4, r5, r6, r7, pc}
 8027fb8:	e7f5      	b.n	8027fa6 <GATT_Fetch_Handle+0x22>
 8027fba:	2001      	movs	r0, #1
 8027fbc:	600c      	str	r4, [r1, #0]
 8027fbe:	6013      	str	r3, [r2, #0]
 8027fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027fc2:	bf00      	nop

08027fc4 <__arm_cp.2_0>:
 8027fc4:	2000a014 	.word	0x2000a014

08027fc8 <GATT_Store_Server_Database>:
 8027fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fcc:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 8027fd0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027fd4:	2000      	movs	r0, #0
 8027fd6:	4e5c      	ldr	r6, [pc, #368]	@ (8028148 <__arm_cp.3_0>)
 8027fd8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8027fdc:	485b      	ldr	r0, [pc, #364]	@ (802814c <__arm_cp.3_1>)
 8027fde:	f8d6 71d8 	ldr.w	r7, [r6, #472]	@ 0x1d8
 8027fe2:	8c00      	ldrh	r0, [r0, #32]
 8027fe4:	f000 0022 	and.w	r0, r0, #34	@ 0x22
 8027fe8:	2820      	cmp	r0, #32
 8027fea:	d10f      	bne.n	802800c <GATT_Store_Server_Database+0x44>
 8027fec:	f10d 042a 	add.w	r4, sp, #42	@ 0x2a
 8027ff0:	ad06      	add	r5, sp, #24
 8027ff2:	f506 70e8 	add.w	r0, r6, #464	@ 0x1d0
 8027ff6:	1c61      	adds	r1, r4, #1
 8027ff8:	462a      	mov	r2, r5
 8027ffa:	f7ff fcff 	bl	80279fc <GATT_Compute_Database_Hash>
 8027ffe:	f10d 0316 	add.w	r3, sp, #22
 8028002:	4620      	mov	r0, r4
 8028004:	4629      	mov	r1, r5
 8028006:	2210      	movs	r2, #16
 8028008:	f000 f8a4 	bl	8028154 <GATT_Store>
 802800c:	f8df 9140 	ldr.w	r9, [pc, #320]	@ 8028150 <__arm_cp.3_2>
 8028010:	f506 70ec 	add.w	r0, r6, #472	@ 0x1d8
 8028014:	2497      	movs	r4, #151	@ 0x97
 8028016:	f10d 082a 	add.w	r8, sp, #42	@ 0x2a
 802801a:	f10d 0a16 	add.w	sl, sp, #22
 802801e:	9001      	str	r0, [sp, #4]
 8028020:	9801      	ldr	r0, [sp, #4]
 8028022:	4287      	cmp	r7, r0
 8028024:	d071      	beq.n	802810a <GATT_Store_Server_Database+0x142>
 8028026:	4849      	ldr	r0, [pc, #292]	@ (802814c <__arm_cp.3_1>)
 8028028:	8c00      	ldrh	r0, [r0, #32]
 802802a:	0680      	lsls	r0, r0, #26
 802802c:	d417      	bmi.n	802805e <GATT_Store_Server_Database+0x96>
 802802e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8028032:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8028036:	2202      	movs	r2, #2
 8028038:	f000 f89e 	bl	8028178 <OUTLINED_FUNCTION_1>
 802803c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8028040:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8028044:	2201      	movs	r2, #1
 8028046:	f000 f897 	bl	8028178 <OUTLINED_FUNCTION_1>
 802804a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 802804e:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8028052:	f000 f894 	bl	802817e <OUTLINED_FUNCTION_2>
 8028056:	bf08      	it	eq
 8028058:	2202      	moveq	r2, #2
 802805a:	47c8      	blx	r9
 802805c:	4604      	mov	r4, r0
 802805e:	f107 0b20 	add.w	fp, r7, #32
 8028062:	9702      	str	r7, [sp, #8]
 8028064:	465f      	mov	r7, fp
 8028066:	683f      	ldr	r7, [r7, #0]
 8028068:	455f      	cmp	r7, fp
 802806a:	d04b      	beq.n	8028104 <GATT_Store_Server_Database+0x13c>
 802806c:	4837      	ldr	r0, [pc, #220]	@ (802814c <__arm_cp.3_1>)
 802806e:	8c00      	ldrh	r0, [r0, #32]
 8028070:	0680      	lsls	r0, r0, #26
 8028072:	d417      	bmi.n	80280a4 <GATT_Store_Server_Database+0xdc>
 8028074:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8028078:	f107 011c 	add.w	r1, r7, #28
 802807c:	2202      	movs	r2, #2
 802807e:	f000 f87b 	bl	8028178 <OUTLINED_FUNCTION_1>
 8028082:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8028086:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 802808a:	2201      	movs	r2, #1
 802808c:	f000 f874 	bl	8028178 <OUTLINED_FUNCTION_1>
 8028090:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8028094:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8028098:	f000 f871 	bl	802817e <OUTLINED_FUNCTION_2>
 802809c:	bf08      	it	eq
 802809e:	2202      	moveq	r2, #2
 80280a0:	47c8      	blx	r9
 80280a2:	4604      	mov	r4, r0
 80280a4:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 80280a8:	f107 0108 	add.w	r1, r7, #8
 80280ac:	f7fd fb98 	bl	80257e0 <GATT_Is_Multiple_Val_Attr>
 80280b0:	2800      	cmp	r0, #0
 80280b2:	d0d8      	beq.n	8028066 <GATT_Store_Server_Database+0x9e>
 80280b4:	4638      	mov	r0, r7
 80280b6:	9904      	ldr	r1, [sp, #16]
 80280b8:	8c3d      	ldrh	r5, [r7, #32]
 80280ba:	f7fd fba3 	bl	8025804 <GATT_Attr_Val>
 80280be:	4923      	ldr	r1, [pc, #140]	@ (802814c <__arm_cp.3_1>)
 80280c0:	4606      	mov	r6, r0
 80280c2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80280c6:	8c09      	ldrh	r1, [r1, #32]
 80280c8:	4440      	add	r0, r8
 80280ca:	0689      	lsls	r1, r1, #26
 80280cc:	d402      	bmi.n	80280d4 <GATT_Store_Server_Database+0x10c>
 80280ce:	4631      	mov	r1, r6
 80280d0:	462a      	mov	r2, r5
 80280d2:	e00a      	b.n	80280ea <GATT_Store_Server_Database+0x122>
 80280d4:	f107 011c 	add.w	r1, r7, #28
 80280d8:	2202      	movs	r2, #2
 80280da:	4653      	mov	r3, sl
 80280dc:	f000 f83a 	bl	8028154 <GATT_Store>
 80280e0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80280e4:	4631      	mov	r1, r6
 80280e6:	2201      	movs	r2, #1
 80280e8:	4440      	add	r0, r8
 80280ea:	4653      	mov	r3, sl
 80280ec:	f000 f832 	bl	8028154 <GATT_Store>
 80280f0:	4604      	mov	r4, r0
 80280f2:	9803      	ldr	r0, [sp, #12]
 80280f4:	2800      	cmp	r0, #0
 80280f6:	d0b6      	beq.n	8028066 <GATT_Store_Server_Database+0x9e>
 80280f8:	4630      	mov	r0, r6
 80280fa:	2100      	movs	r1, #0
 80280fc:	462a      	mov	r2, r5
 80280fe:	f7f8 fbf1 	bl	80208e4 <ble_memset>
 8028102:	e7b0      	b.n	8028066 <GATT_Store_Server_Database+0x9e>
 8028104:	9f02      	ldr	r7, [sp, #8]
 8028106:	683f      	ldr	r7, [r7, #0]
 8028108:	e78a      	b.n	8028020 <GATT_Store_Server_Database+0x58>
 802810a:	b9cc      	cbnz	r4, 8028140 <GATT_Store_Server_Database+0x178>
 802810c:	480f      	ldr	r0, [pc, #60]	@ (802814c <__arm_cp.3_1>)
 802810e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8028112:	8c00      	ldrh	r0, [r0, #32]
 8028114:	0680      	lsls	r0, r0, #26
 8028116:	d40c      	bmi.n	8028132 <GATT_Store_Server_Database+0x16a>
 8028118:	0788      	lsls	r0, r1, #30
 802811a:	d00a      	beq.n	8028132 <GATT_Store_Server_Database+0x16a>
 802811c:	f021 0203 	bic.w	r2, r1, #3
 8028120:	eb08 0001 	add.w	r0, r8, r1
 8028124:	1d14      	adds	r4, r2, #4
 8028126:	1a61      	subs	r1, r4, r1
 8028128:	b28a      	uxth	r2, r1
 802812a:	210b      	movs	r1, #11
 802812c:	f7f8 fbda 	bl	80208e4 <ble_memset>
 8028130:	4621      	mov	r1, r4
 8028132:	9804      	ldr	r0, [sp, #16]
 8028134:	b289      	uxth	r1, r1
 8028136:	f10d 022a 	add.w	r2, sp, #42	@ 0x2a
 802813a:	8800      	ldrh	r0, [r0, #0]
 802813c:	f001 f9e0 	bl	8029500 <SMP_Save_GATT_Data>
 8028140:	f50d 7d33 	add.w	sp, sp, #716	@ 0x2cc
 8028144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028148 <__arm_cp.3_0>:
 8028148:	2000a014 	.word	0x2000a014

0802814c <__arm_cp.3_1>:
 802814c:	20009fec 	.word	0x20009fec

08028150 <__arm_cp.3_2>:
 8028150:	08028155 	.word	0x08028155

08028154 <GATT_Store>:
 8028154:	b510      	push	{r4, lr}
 8028156:	881c      	ldrh	r4, [r3, #0]
 8028158:	4414      	add	r4, r2
 802815a:	801c      	strh	r4, [r3, #0]
 802815c:	b2a3      	uxth	r3, r4
 802815e:	f5b3 7f28 	cmp.w	r3, #672	@ 0x2a0
 8028162:	bf84      	itt	hi
 8028164:	2091      	movhi	r0, #145	@ 0x91
 8028166:	bd10      	pophi	{r4, pc}
 8028168:	f7f8 fb6c 	bl	8020844 <ble_memcpy>
 802816c:	2000      	movs	r0, #0
 802816e:	bd10      	pop	{r4, pc}

08028170 <OUTLINED_FUNCTION_0>:
 8028170:	2202      	movs	r2, #2
 8028172:	4633      	mov	r3, r6
 8028174:	4428      	add	r0, r5
 8028176:	4720      	bx	r4

08028178 <OUTLINED_FUNCTION_1>:
 8028178:	4653      	mov	r3, sl
 802817a:	4440      	add	r0, r8
 802817c:	4748      	bx	r9

0802817e <OUTLINED_FUNCTION_2>:
 802817e:	2210      	movs	r2, #16
 8028180:	4653      	mov	r3, sl
 8028182:	2901      	cmp	r1, #1
 8028184:	4440      	add	r0, r8
 8028186:	f107 0108 	add.w	r1, r7, #8
 802818a:	4770      	bx	lr

0802818c <OUTLINED_FUNCTION_3>:
 802818c:	2202      	movs	r2, #2
 802818e:	4633      	mov	r3, r6
 8028190:	4428      	add	r0, r5
 8028192:	f7ff bfdf 	b.w	8028154 <GATT_Store>

08028196 <OUTLINED_FUNCTION_4>:
 8028196:	4480      	add	r8, r0
 8028198:	f8dd c020 	ldr.w	ip, [sp, #32]
 802819c:	fa1f f788 	uxth.w	r7, r8
 80281a0:	45bc      	cmp	ip, r7
 80281a2:	4770      	bx	lr

080281a4 <L2C_MemAlloc>:
 80281a4:	b580      	push	{r7, lr}
 80281a6:	4904      	ldr	r1, [pc, #16]	@ (80281b8 <__arm_cp.0_0>)
 80281a8:	220c      	movs	r2, #12
 80281aa:	7d89      	ldrb	r1, [r1, #22]
 80281ac:	f003 fb31 	bl	802b812 <Mem_Assign>
 80281b0:	4902      	ldr	r1, [pc, #8]	@ (80281bc <__arm_cp.0_1>)
 80281b2:	67c8      	str	r0, [r1, #124]	@ 0x7c
 80281b4:	bd80      	pop	{r7, pc}
 80281b6:	bf00      	nop

080281b8 <__arm_cp.0_0>:
 80281b8:	20009fec 	.word	0x20009fec

080281bc <__arm_cp.0_1>:
 80281bc:	2000a014 	.word	0x2000a014

080281c0 <L2C_Init>:
 80281c0:	4770      	bx	lr

080281c2 <L2C_Send_Data>:
 80281c2:	888b      	ldrh	r3, [r1, #4]
 80281c4:	6a0a      	ldr	r2, [r1, #32]
 80281c6:	3b04      	subs	r3, #4
 80281c8:	7013      	strb	r3, [r2, #0]
 80281ca:	0a1b      	lsrs	r3, r3, #8
 80281cc:	7053      	strb	r3, [r2, #1]
 80281ce:	0a02      	lsrs	r2, r0, #8
 80281d0:	6a0b      	ldr	r3, [r1, #32]
 80281d2:	7098      	strb	r0, [r3, #2]
 80281d4:	2002      	movs	r0, #2
 80281d6:	70da      	strb	r2, [r3, #3]
 80281d8:	7288      	strb	r0, [r1, #10]
 80281da:	4608      	mov	r0, r1
 80281dc:	f7fb bd3e 	b.w	8023c5c <LECTRL_SendAclDataFromHostToController>

080281e0 <L2C_Rx_Data_Handler>:
 80281e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281e2:	4604      	mov	r4, r0
 80281e4:	8900      	ldrh	r0, [r0, #8]
 80281e6:	f10d 0103 	add.w	r1, sp, #3
 80281ea:	f000 f84f 	bl	802828c <L2C_Get_Connection>
 80281ee:	2800      	cmp	r0, #0
 80281f0:	d041      	beq.n	8028276 <L2C_Rx_Data_Handler+0x96>
 80281f2:	7aa7      	ldrb	r7, [r4, #10]
 80281f4:	4605      	mov	r5, r0
 80281f6:	6880      	ldr	r0, [r0, #8]
 80281f8:	2f02      	cmp	r7, #2
 80281fa:	d106      	bne.n	802820a <L2C_Rx_Data_Handler+0x2a>
 80281fc:	b178      	cbz	r0, 802821e <L2C_Rx_Data_Handler+0x3e>
 80281fe:	88e9      	ldrh	r1, [r5, #6]
 8028200:	2695      	movs	r6, #149	@ 0x95
 8028202:	2904      	cmp	r1, #4
 8028204:	d32c      	bcc.n	8028260 <L2C_Rx_Data_Handler+0x80>
 8028206:	2201      	movs	r2, #1
 8028208:	e012      	b.n	8028230 <L2C_Rx_Data_Handler+0x50>
 802820a:	b330      	cbz	r0, 802825a <L2C_Rx_Data_Handler+0x7a>
 802820c:	88a1      	ldrh	r1, [r4, #4]
 802820e:	b149      	cbz	r1, 8028224 <L2C_Rx_Data_Handler+0x44>
 8028210:	88ea      	ldrh	r2, [r5, #6]
 8028212:	4411      	add	r1, r2
 8028214:	80e9      	strh	r1, [r5, #6]
 8028216:	4621      	mov	r1, r4
 8028218:	f000 fb52 	bl	80288c0 <ACL_Append>
 802821c:	e002      	b.n	8028224 <L2C_Rx_Data_Handler+0x44>
 802821e:	88a0      	ldrh	r0, [r4, #4]
 8028220:	60ac      	str	r4, [r5, #8]
 8028222:	80e8      	strh	r0, [r5, #6]
 8028224:	88e9      	ldrh	r1, [r5, #6]
 8028226:	2904      	cmp	r1, #4
 8028228:	d315      	bcc.n	8028256 <L2C_Rx_Data_Handler+0x76>
 802822a:	68a8      	ldr	r0, [r5, #8]
 802822c:	2600      	movs	r6, #0
 802822e:	2200      	movs	r2, #0
 8028230:	6a03      	ldr	r3, [r0, #32]
 8028232:	881b      	ldrh	r3, [r3, #0]
 8028234:	3304      	adds	r3, #4
 8028236:	b29b      	uxth	r3, r3
 8028238:	4299      	cmp	r1, r3
 802823a:	d811      	bhi.n	8028260 <L2C_Rx_Data_Handler+0x80>
 802823c:	d10f      	bne.n	802825e <L2C_Rx_Data_Handler+0x7e>
 802823e:	8081      	strh	r1, [r0, #4]
 8028240:	f000 f83c 	bl	80282bc <L2C_Mux_Acl_Packet>
 8028244:	b1e8      	cbz	r0, 8028282 <L2C_Rx_Data_Handler+0xa2>
 8028246:	68a8      	ldr	r0, [r5, #8]
 8028248:	42a0      	cmp	r0, r4
 802824a:	d102      	bne.n	8028252 <L2C_Rx_Data_Handler+0x72>
 802824c:	2000      	movs	r0, #0
 802824e:	80e8      	strh	r0, [r5, #6]
 8028250:	60a8      	str	r0, [r5, #8]
 8028252:	2695      	movs	r6, #149	@ 0x95
 8028254:	e013      	b.n	802827e <L2C_Rx_Data_Handler+0x9e>
 8028256:	2600      	movs	r6, #0
 8028258:	e00a      	b.n	8028270 <L2C_Rx_Data_Handler+0x90>
 802825a:	2600      	movs	r6, #0
 802825c:	e000      	b.n	8028260 <L2C_Rx_Data_Handler+0x80>
 802825e:	b13a      	cbz	r2, 8028270 <L2C_Rx_Data_Handler+0x90>
 8028260:	2001      	movs	r0, #1
 8028262:	2102      	movs	r1, #2
 8028264:	462a      	mov	r2, r5
 8028266:	f7fb fa61 	bl	802372c <EVT_aci_hal_fw_error>
 802826a:	4628      	mov	r0, r5
 802826c:	f000 f884 	bl	8028378 <L2C_Discard_Recomb_Data>
 8028270:	b92e      	cbnz	r6, 802827e <L2C_Rx_Data_Handler+0x9e>
 8028272:	2f01      	cmp	r7, #1
 8028274:	d103      	bne.n	802827e <L2C_Rx_Data_Handler+0x9e>
 8028276:	4620      	mov	r0, r4
 8028278:	f000 fa68 	bl	802874c <ACL_Release>
 802827c:	2600      	movs	r6, #0
 802827e:	4630      	mov	r0, r6
 8028280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028282:	2000      	movs	r0, #0
 8028284:	80e8      	strh	r0, [r5, #6]
 8028286:	60a8      	str	r0, [r5, #8]
 8028288:	e7f2      	b.n	8028270 <L2C_Rx_Data_Handler+0x90>
	...

0802828c <L2C_Get_Connection>:
 802828c:	b5b0      	push	{r4, r5, r7, lr}
 802828e:	4602      	mov	r2, r0
 8028290:	4808      	ldr	r0, [pc, #32]	@ (80282b4 <__arm_cp.4_0>)
 8028292:	4b09      	ldr	r3, [pc, #36]	@ (80282b8 <__arm_cp.4_1>)
 8028294:	7d9c      	ldrb	r4, [r3, #22]
 8028296:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8028298:	2300      	movs	r3, #0
 802829a:	429c      	cmp	r4, r3
 802829c:	bf04      	itt	eq
 802829e:	2000      	moveq	r0, #0
 80282a0:	bdb0      	popeq	{r4, r5, r7, pc}
 80282a2:	8805      	ldrh	r5, [r0, #0]
 80282a4:	4295      	cmp	r5, r2
 80282a6:	bf04      	itt	eq
 80282a8:	700b      	strbeq	r3, [r1, #0]
 80282aa:	bdb0      	popeq	{r4, r5, r7, pc}
 80282ac:	300c      	adds	r0, #12
 80282ae:	3301      	adds	r3, #1
 80282b0:	e7f3      	b.n	802829a <L2C_Get_Connection+0xe>
 80282b2:	bf00      	nop

080282b4 <__arm_cp.4_0>:
 80282b4:	2000a014 	.word	0x2000a014

080282b8 <__arm_cp.4_1>:
 80282b8:	20009fec 	.word	0x20009fec

080282bc <L2C_Mux_Acl_Packet>:
 80282bc:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 80282be:	4604      	mov	r4, r0
 80282c0:	6a00      	ldr	r0, [r0, #32]
 80282c2:	8840      	ldrh	r0, [r0, #2]
 80282c4:	2806      	cmp	r0, #6
 80282c6:	d007      	beq.n	80282d8 <L2C_Mux_Acl_Packet+0x1c>
 80282c8:	2805      	cmp	r0, #5
 80282ca:	d009      	beq.n	80282e0 <L2C_Mux_Acl_Packet+0x24>
 80282cc:	2804      	cmp	r0, #4
 80282ce:	d109      	bne.n	80282e4 <L2C_Mux_Acl_Packet+0x28>
 80282d0:	4620      	mov	r0, r4
 80282d2:	f7fc fe37 	bl	8024f44 <GATT_L2cap_Data_Handler>
 80282d6:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80282d8:	4620      	mov	r0, r4
 80282da:	f001 f891 	bl	8029400 <SMP_L2cap_Data_Handler>
 80282de:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80282e0:	79a0      	ldrb	r0, [r4, #6]
 80282e2:	b120      	cbz	r0, 80282ee <L2C_Mux_Acl_Packet+0x32>
 80282e4:	4620      	mov	r0, r4
 80282e6:	f000 fa31 	bl	802874c <ACL_Release>
 80282ea:	2000      	movs	r0, #0
 80282ec:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80282ee:	8920      	ldrh	r0, [r4, #8]
 80282f0:	f10d 0107 	add.w	r1, sp, #7
 80282f4:	f7ff ffca 	bl	802828c <L2C_Get_Connection>
 80282f8:	2800      	cmp	r0, #0
 80282fa:	d0f3      	beq.n	80282e4 <L2C_Mux_Acl_Packet+0x28>
 80282fc:	6a20      	ldr	r0, [r4, #32]
 80282fe:	7901      	ldrb	r1, [r0, #4]
 8028300:	2913      	cmp	r1, #19
 8028302:	d01e      	beq.n	8028342 <L2C_Mux_Acl_Packet+0x86>
 8028304:	2912      	cmp	r1, #18
 8028306:	d022      	beq.n	802834e <L2C_Mux_Acl_Packet+0x92>
 8028308:	2901      	cmp	r1, #1
 802830a:	d126      	bne.n	802835a <L2C_Mux_Acl_Packet+0x9e>
 802830c:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8028310:	4a18      	ldr	r2, [pc, #96]	@ (8028374 <__arm_cp.5_0>)
 8028312:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8028316:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8028318:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 802831c:	788a      	ldrb	r2, [r1, #2]
 802831e:	0792      	lsls	r2, r2, #30
 8028320:	d5e0      	bpl.n	80282e4 <L2C_Mux_Acl_Packet+0x28>
 8028322:	78c9      	ldrb	r1, [r1, #3]
 8028324:	7940      	ldrb	r0, [r0, #5]
 8028326:	4281      	cmp	r1, r0
 8028328:	d1dc      	bne.n	80282e4 <L2C_Mux_Acl_Packet+0x28>
 802832a:	4628      	mov	r0, r5
 802832c:	f000 f88e 	bl	802844c <L2C_Increment_Identifier>
 8028330:	4628      	mov	r0, r5
 8028332:	f000 f84f 	bl	80283d4 <L2C_Stop_Timer>
 8028336:	8921      	ldrh	r1, [r4, #8]
 8028338:	2000      	movs	r0, #0
 802833a:	4622      	mov	r2, r4
 802833c:	f7fb fa24 	bl	8023788 <EVT_aci_l2cap_command_reject>
 8028340:	e7d0      	b.n	80282e4 <L2C_Mux_Acl_Packet+0x28>
 8028342:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8028346:	4621      	mov	r1, r4
 8028348:	f000 f928 	bl	802859c <L2C_CPU_Rsp_Rx_Handler>
 802834c:	e00e      	b.n	802836c <L2C_Mux_Acl_Packet+0xb0>
 802834e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8028352:	4621      	mov	r1, r4
 8028354:	f000 f952 	bl	80285fc <L2C_CPU_Req_Rx_Handler>
 8028358:	e008      	b.n	802836c <L2C_Mux_Acl_Packet+0xb0>
 802835a:	7941      	ldrb	r1, [r0, #5]
 802835c:	2200      	movs	r2, #0
 802835e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8028362:	2300      	movs	r3, #0
 8028364:	9200      	str	r2, [sp, #0]
 8028366:	2200      	movs	r2, #0
 8028368:	f000 f8b1 	bl	80284ce <L2C_Send_Command_Reject>
 802836c:	2800      	cmp	r0, #0
 802836e:	d1bd      	bne.n	80282ec <L2C_Mux_Acl_Packet+0x30>
 8028370:	e7b8      	b.n	80282e4 <L2C_Mux_Acl_Packet+0x28>
 8028372:	bf00      	nop

08028374 <__arm_cp.5_0>:
 8028374:	2000a014 	.word	0x2000a014

08028378 <L2C_Discard_Recomb_Data>:
 8028378:	b510      	push	{r4, lr}
 802837a:	4604      	mov	r4, r0
 802837c:	6880      	ldr	r0, [r0, #8]
 802837e:	b120      	cbz	r0, 802838a <L2C_Discard_Recomb_Data+0x12>
 8028380:	f000 f9e4 	bl	802874c <ACL_Release>
 8028384:	2000      	movs	r0, #0
 8028386:	80e0      	strh	r0, [r4, #6]
 8028388:	60a0      	str	r0, [r4, #8]
 802838a:	bd10      	pop	{r4, pc}

0802838c <L2C_Tx_Data_Conplete_Handler>:
 802838c:	f7ff bf96 	b.w	80282bc <L2C_Mux_Acl_Packet>

08028390 <L2C_Connection_Complete_Handler>:
 8028390:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 8028392:	460c      	mov	r4, r1
 8028394:	4605      	mov	r5, r0
 8028396:	f10d 0107 	add.w	r1, sp, #7
 802839a:	2000      	movs	r0, #0
 802839c:	f7ff ff76 	bl	802828c <L2C_Get_Connection>
 80283a0:	b130      	cbz	r0, 80283b0 <L2C_Connection_Complete_Handler+0x20>
 80283a2:	2101      	movs	r1, #1
 80283a4:	8005      	strh	r5, [r0, #0]
 80283a6:	70c1      	strb	r1, [r0, #3]
 80283a8:	fab4 f184 	clz	r1, r4
 80283ac:	0949      	lsrs	r1, r1, #5
 80283ae:	7081      	strb	r1, [r0, #2]
 80283b0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

080283b2 <L2C_Disconnection_Complete_Handler>:
 80283b2:	b51c      	push	{r2, r3, r4, lr}
 80283b4:	f10d 0107 	add.w	r1, sp, #7
 80283b8:	f7ff ff68 	bl	802828c <L2C_Get_Connection>
 80283bc:	b140      	cbz	r0, 80283d0 <L2C_Disconnection_Complete_Handler+0x1e>
 80283be:	4604      	mov	r4, r0
 80283c0:	f7ff ffda 	bl	8028378 <L2C_Discard_Recomb_Data>
 80283c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80283c8:	f000 f804 	bl	80283d4 <L2C_Stop_Timer>
 80283cc:	2000      	movs	r0, #0
 80283ce:	8020      	strh	r0, [r4, #0]
 80283d0:	bd1c      	pop	{r2, r3, r4, pc}
	...

080283d4 <L2C_Stop_Timer>:
 80283d4:	b5b0      	push	{r4, r5, r7, lr}
 80283d6:	4604      	mov	r4, r0
 80283d8:	4807      	ldr	r0, [pc, #28]	@ (80283f8 <__arm_cp.10_0>)
 80283da:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 80283dc:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 80283e0:	f7d9 ffbe 	bl	8002360 <BLEPLAT_TimerStop>
 80283e4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80283e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80283ec:	7881      	ldrb	r1, [r0, #2]
 80283ee:	f001 01f9 	and.w	r1, r1, #249	@ 0xf9
 80283f2:	7081      	strb	r1, [r0, #2]
 80283f4:	bdb0      	pop	{r4, r5, r7, pc}
 80283f6:	bf00      	nop

080283f8 <__arm_cp.10_0>:
 80283f8:	2000a014 	.word	0x2000a014

080283fc <L2C_Start_Timer>:
 80283fc:	b5b0      	push	{r4, r5, r7, lr}
 80283fe:	4604      	mov	r4, r0
 8028400:	4807      	ldr	r0, [pc, #28]	@ (8028420 <__arm_cp.11_0>)
 8028402:	6fc5      	ldr	r5, [r0, #124]	@ 0x7c
 8028404:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8028408:	f7d9 ffa8 	bl	800235c <BLEPLAT_TimerStart>
 802840c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8028410:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8028414:	7881      	ldrb	r1, [r0, #2]
 8028416:	f041 0102 	orr.w	r1, r1, #2
 802841a:	7081      	strb	r1, [r0, #2]
 802841c:	bdb0      	pop	{r4, r5, r7, pc}
 802841e:	bf00      	nop

08028420 <__arm_cp.11_0>:
 8028420:	2000a014 	.word	0x2000a014

08028424 <L2C_Timeout_Cb>:
 8028424:	4908      	ldr	r1, [pc, #32]	@ (8028448 <__arm_cp.12_0>)
 8028426:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802842a:	6fca      	ldr	r2, [r1, #124]	@ 0x7c
 802842c:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 8028430:	b141      	cbz	r1, 8028444 <L2C_Timeout_Cb+0x20>
 8028432:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8028436:	7882      	ldrb	r2, [r0, #2]
 8028438:	f002 02f9 	and.w	r2, r2, #249	@ 0xf9
 802843c:	7082      	strb	r2, [r0, #2]
 802843e:	2001      	movs	r0, #1
 8028440:	f7fb b9b0 	b.w	80237a4 <EVT_aci_l2cap_proc_timeout>
 8028444:	4770      	bx	lr
 8028446:	bf00      	nop

08028448 <__arm_cp.12_0>:
 8028448:	2000a014 	.word	0x2000a014

0802844c <L2C_Increment_Identifier>:
 802844c:	4906      	ldr	r1, [pc, #24]	@ (8028468 <__arm_cp.13_0>)
 802844e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028452:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8028454:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8028458:	78c1      	ldrb	r1, [r0, #3]
 802845a:	3101      	adds	r1, #1
 802845c:	b2ca      	uxtb	r2, r1
 802845e:	428a      	cmp	r2, r1
 8028460:	bf18      	it	ne
 8028462:	2201      	movne	r2, #1
 8028464:	70c2      	strb	r2, [r0, #3]
 8028466:	4770      	bx	lr

08028468 <__arm_cp.13_0>:
 8028468:	2000a014 	.word	0x2000a014

0802846c <L2C_Send_Packet>:
 802846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802846e:	460c      	mov	r4, r1
 8028470:	4912      	ldr	r1, [pc, #72]	@ (80284bc <__arm_cp.14_0>)
 8028472:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8028476:	4616      	mov	r6, r2
 8028478:	461d      	mov	r5, r3
 802847a:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 802847c:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 8028480:	2001      	movs	r0, #1
 8028482:	2c05      	cmp	r4, #5
 8028484:	bf08      	it	eq
 8028486:	2002      	moveq	r0, #2
 8028488:	3204      	adds	r2, #4
 802848a:	b292      	uxth	r2, r2
 802848c:	f000 f928 	bl	80286e0 <ACL_New>
 8028490:	b178      	cbz	r0, 80284b2 <L2C_Send_Packet+0x46>
 8028492:	2104      	movs	r1, #4
 8028494:	4632      	mov	r2, r6
 8028496:	462b      	mov	r3, r5
 8028498:	4607      	mov	r7, r0
 802849a:	f000 f9e4 	bl	8028866 <ACL_Set_Data>
 802849e:	4620      	mov	r0, r4
 80284a0:	4639      	mov	r1, r7
 80284a2:	f7ff fe8e 	bl	80281c2 <L2C_Send_Data>
 80284a6:	b130      	cbz	r0, 80284b6 <L2C_Send_Packet+0x4a>
 80284a8:	4604      	mov	r4, r0
 80284aa:	4638      	mov	r0, r7
 80284ac:	f000 f94e 	bl	802874c <ACL_Release>
 80284b0:	e002      	b.n	80284b8 <L2C_Send_Packet+0x4c>
 80284b2:	2464      	movs	r4, #100	@ 0x64
 80284b4:	e000      	b.n	80284b8 <L2C_Send_Packet+0x4c>
 80284b6:	2400      	movs	r4, #0
 80284b8:	4620      	mov	r0, r4
 80284ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080284bc <__arm_cp.14_0>:
 80284bc:	2000a014 	.word	0x2000a014

080284c0 <L2C_Send_Signaling_Packet>:
 80284c0:	460b      	mov	r3, r1
 80284c2:	8849      	ldrh	r1, [r1, #2]
 80284c4:	3104      	adds	r1, #4
 80284c6:	b28a      	uxth	r2, r1
 80284c8:	2105      	movs	r1, #5
 80284ca:	f7ff bfcf 	b.w	802846c <L2C_Send_Packet>

080284ce <L2C_Send_Command_Reject>:
 80284ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80284d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80284d4:	2302      	movs	r3, #2
 80284d6:	9c06      	ldr	r4, [sp, #24]
 80284d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80284dc:	2a02      	cmp	r2, #2
 80284de:	f8ad 400e 	strh.w	r4, [sp, #14]
 80284e2:	bf08      	it	eq
 80284e4:	2306      	moveq	r3, #6
 80284e6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80284ea:	0209      	lsls	r1, r1, #8
 80284ec:	3101      	adds	r1, #1
 80284ee:	f8ad 1006 	strh.w	r1, [sp, #6]
 80284f2:	f10d 0106 	add.w	r1, sp, #6
 80284f6:	f7ff ffe3 	bl	80284c0 <L2C_Send_Signaling_Packet>
 80284fa:	b004      	add	sp, #16
 80284fc:	bd10      	pop	{r4, pc}

080284fe <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ>:
 80284fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028500:	b085      	sub	sp, #20
 8028502:	460d      	mov	r5, r1
 8028504:	f10d 0113 	add.w	r1, sp, #19
 8028508:	461f      	mov	r7, r3
 802850a:	4616      	mov	r6, r2
 802850c:	f7ff febe 	bl	802828c <L2C_Get_Connection>
 8028510:	4604      	mov	r4, r0
 8028512:	2092      	movs	r0, #146	@ 0x92
 8028514:	f5b6 6f48 	cmp.w	r6, #3200	@ 0xc80
 8028518:	d808      	bhi.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 802851a:	2d06      	cmp	r5, #6
 802851c:	d306      	bcc.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 802851e:	b12c      	cbz	r4, 802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 8028520:	2092      	movs	r0, #146	@ 0x92
 8028522:	42b5      	cmp	r5, r6
 8028524:	bf9c      	itt	ls
 8028526:	08b9      	lsrls	r1, r7, #2
 8028528:	297c      	cmpls	r1, #124	@ 0x7c
 802852a:	d901      	bls.n	8028530 <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x32>
 802852c:	b005      	add	sp, #20
 802852e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028530:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8028532:	2092      	movs	r0, #146	@ 0x92
 8028534:	f640 4376 	movw	r3, #3190	@ 0xc76
 8028538:	f1a1 020a 	sub.w	r2, r1, #10
 802853c:	429a      	cmp	r2, r3
 802853e:	d8f5      	bhi.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 8028540:	1c7a      	adds	r2, r7, #1
 8028542:	008b      	lsls	r3, r1, #2
 8028544:	4372      	muls	r2, r6
 8028546:	429a      	cmp	r2, r3
 8028548:	d8f0      	bhi.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 802854a:	78a0      	ldrb	r0, [r4, #2]
 802854c:	0780      	lsls	r0, r0, #30
 802854e:	d001      	beq.n	8028554 <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x56>
 8028550:	200c      	movs	r0, #12
 8028552:	e7eb      	b.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 8028554:	2008      	movs	r0, #8
 8028556:	f8ad 1010 	strh.w	r1, [sp, #16]
 802855a:	f10d 0106 	add.w	r1, sp, #6
 802855e:	f8ad 700e 	strh.w	r7, [sp, #14]
 8028562:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028566:	f8ad 500a 	strh.w	r5, [sp, #10]
 802856a:	f8ad 0008 	strh.w	r0, [sp, #8]
 802856e:	78e0      	ldrb	r0, [r4, #3]
 8028570:	0200      	lsls	r0, r0, #8
 8028572:	3012      	adds	r0, #18
 8028574:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028578:	f89d 0013 	ldrb.w	r0, [sp, #19]
 802857c:	f7ff ffa0 	bl	80284c0 <L2C_Send_Signaling_Packet>
 8028580:	2800      	cmp	r0, #0
 8028582:	d1d3      	bne.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>
 8028584:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8028588:	f247 5130 	movw	r1, #30000	@ 0x7530
 802858c:	f7ff ff36 	bl	80283fc <L2C_Start_Timer>
 8028590:	78a0      	ldrb	r0, [r4, #2]
 8028592:	f040 0004 	orr.w	r0, r0, #4
 8028596:	70a0      	strb	r0, [r4, #2]
 8028598:	2000      	movs	r0, #0
 802859a:	e7c7      	b.n	802852c <ACI_L2CAP_CONNECTION_PARAMETER_UPDATE_REQ+0x2e>

0802859c <L2C_CPU_Rsp_Rx_Handler>:
 802859c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802859e:	460d      	mov	r5, r1
 80285a0:	4915      	ldr	r1, [pc, #84]	@ (80285f8 <__arm_cp.1_0>)
 80285a2:	4604      	mov	r4, r0
 80285a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80285a8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80285aa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80285ae:	7882      	ldrb	r2, [r0, #2]
 80285b0:	07d1      	lsls	r1, r2, #31
 80285b2:	6a29      	ldr	r1, [r5, #32]
 80285b4:	7949      	ldrb	r1, [r1, #5]
 80285b6:	d101      	bne.n	80285bc <L2C_CPU_Rsp_Rx_Handler+0x20>
 80285b8:	0752      	lsls	r2, r2, #29
 80285ba:	d409      	bmi.n	80285d0 <L2C_CPU_Rsp_Rx_Handler+0x34>
 80285bc:	2000      	movs	r0, #0
 80285be:	2200      	movs	r2, #0
 80285c0:	2300      	movs	r3, #0
 80285c2:	9000      	str	r0, [sp, #0]
 80285c4:	4620      	mov	r0, r4
 80285c6:	f7ff ff82 	bl	80284ce <L2C_Send_Command_Reject>
 80285ca:	4604      	mov	r4, r0
 80285cc:	4620      	mov	r0, r4
 80285ce:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 80285d0:	78c0      	ldrb	r0, [r0, #3]
 80285d2:	4281      	cmp	r1, r0
 80285d4:	d10d      	bne.n	80285f2 <L2C_CPU_Rsp_Rx_Handler+0x56>
 80285d6:	4620      	mov	r0, r4
 80285d8:	f7ff ff38 	bl	802844c <L2C_Increment_Identifier>
 80285dc:	4620      	mov	r0, r4
 80285de:	f7ff fef9 	bl	80283d4 <L2C_Stop_Timer>
 80285e2:	6a28      	ldr	r0, [r5, #32]
 80285e4:	8929      	ldrh	r1, [r5, #8]
 80285e6:	2400      	movs	r4, #0
 80285e8:	8902      	ldrh	r2, [r0, #8]
 80285ea:	2000      	movs	r0, #0
 80285ec:	f7fb f8a4 	bl	8023738 <EVT_aci_l2cap_connection_update_resp>
 80285f0:	e7ec      	b.n	80285cc <L2C_CPU_Rsp_Rx_Handler+0x30>
 80285f2:	2400      	movs	r4, #0
 80285f4:	e7ea      	b.n	80285cc <L2C_CPU_Rsp_Rx_Handler+0x30>
 80285f6:	bf00      	nop

080285f8 <__arm_cp.1_0>:
 80285f8:	2000a014 	.word	0x2000a014

080285fc <L2C_CPU_Req_Rx_Handler>:
 80285fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80285fe:	4b15      	ldr	r3, [pc, #84]	@ (8028654 <__arm_cp.2_0>)
 8028600:	460a      	mov	r2, r1
 8028602:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8028606:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8028608:	eb03 0781 	add.w	r7, r3, r1, lsl #2
 802860c:	463e      	mov	r6, r7
 802860e:	f816 1f02 	ldrb.w	r1, [r6, #2]!
 8028612:	070b      	lsls	r3, r1, #28
 8028614:	6a13      	ldr	r3, [r2, #32]
 8028616:	795c      	ldrb	r4, [r3, #5]
 8028618:	d40c      	bmi.n	8028634 <L2C_CPU_Req_Rx_Handler+0x38>
 802861a:	07c9      	lsls	r1, r1, #31
 802861c:	d00f      	beq.n	802863e <L2C_CPU_Req_Rx_Handler+0x42>
 802861e:	8911      	ldrh	r1, [r2, #8]
 8028620:	2000      	movs	r0, #0
 8028622:	2500      	movs	r5, #0
 8028624:	f7fb f896 	bl	8023754 <EVT_aci_l2cap_connection_update_req>
 8028628:	7830      	ldrb	r0, [r6, #0]
 802862a:	713c      	strb	r4, [r7, #4]
 802862c:	f040 0008 	orr.w	r0, r0, #8
 8028630:	7030      	strb	r0, [r6, #0]
 8028632:	e00c      	b.n	802864e <L2C_CPU_Req_Rx_Handler+0x52>
 8028634:	7939      	ldrb	r1, [r7, #4]
 8028636:	42a1      	cmp	r1, r4
 8028638:	d101      	bne.n	802863e <L2C_CPU_Req_Rx_Handler+0x42>
 802863a:	2500      	movs	r5, #0
 802863c:	e007      	b.n	802864e <L2C_CPU_Req_Rx_Handler+0x52>
 802863e:	2100      	movs	r1, #0
 8028640:	2200      	movs	r2, #0
 8028642:	2300      	movs	r3, #0
 8028644:	9100      	str	r1, [sp, #0]
 8028646:	4621      	mov	r1, r4
 8028648:	f7ff ff41 	bl	80284ce <L2C_Send_Command_Reject>
 802864c:	4605      	mov	r5, r0
 802864e:	4628      	mov	r0, r5
 8028650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028652:	bf00      	nop

08028654 <__arm_cp.2_0>:
 8028654:	2000a014 	.word	0x2000a014

08028658 <ACL_MemAlloc>:
 8028658:	b570      	push	{r4, r5, r6, lr}
 802865a:	4d08      	ldr	r5, [pc, #32]	@ (802867c <__arm_cp.0_0>)
 802865c:	2224      	movs	r2, #36	@ 0x24
 802865e:	4604      	mov	r4, r0
 8028660:	8b29      	ldrh	r1, [r5, #24]
 8028662:	f003 f8d6 	bl	802b812 <Mem_Assign>
 8028666:	4e06      	ldr	r6, [pc, #24]	@ (8028680 <__arm_cp.0_1>)
 8028668:	2204      	movs	r2, #4
 802866a:	67b0      	str	r0, [r6, #120]	@ 0x78
 802866c:	8b28      	ldrh	r0, [r5, #24]
 802866e:	3001      	adds	r0, #1
 8028670:	b281      	uxth	r1, r0
 8028672:	4620      	mov	r0, r4
 8028674:	f003 f8cd 	bl	802b812 <Mem_Assign>
 8028678:	6770      	str	r0, [r6, #116]	@ 0x74
 802867a:	bd70      	pop	{r4, r5, r6, pc}

0802867c <__arm_cp.0_0>:
 802867c:	20009fec 	.word	0x20009fec

08028680 <__arm_cp.0_1>:
 8028680:	2000a014 	.word	0x2000a014

08028684 <ACL_Init>:
 8028684:	b510      	push	{r4, lr}
 8028686:	4a15      	ldr	r2, [pc, #84]	@ (80286dc <__arm_cp.1_1>)
 8028688:	2401      	movs	r4, #1
 802868a:	4813      	ldr	r0, [pc, #76]	@ (80286d8 <__arm_cp.1_0>)
 802868c:	2100      	movs	r1, #0
 802868e:	8b53      	ldrh	r3, [r2, #26]
 8028690:	f8a0 1068 	strh.w	r1, [r0, #104]	@ 0x68
 8028694:	8b11      	ldrh	r1, [r2, #24]
 8028696:	7d92      	ldrb	r2, [r2, #22]
 8028698:	3323      	adds	r3, #35	@ 0x23
 802869a:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
 802869e:	eb04 1453 	add.w	r4, r4, r3, lsr #5
 80286a2:	f8a0 4066 	strh.w	r4, [r0, #102]	@ 0x66
 80286a6:	2402      	movs	r4, #2
 80286a8:	eb04 1353 	add.w	r3, r4, r3, lsr #5
 80286ac:	435a      	muls	r2, r3
 80286ae:	3201      	adds	r2, #1
 80286b0:	f8a0 2064 	strh.w	r2, [r0, #100]	@ 0x64
 80286b4:	b171      	cbz	r1, 80286d4 <ACL_Init+0x50>
 80286b6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80286b8:	2201      	movs	r2, #1
 80286ba:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 80286bc:	4291      	cmp	r1, r2
 80286be:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 80286c2:	d005      	beq.n	80286d0 <ACL_Init+0x4c>
 80286c4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80286c8:	3201      	adds	r2, #1
 80286ca:	621c      	str	r4, [r3, #32]
 80286cc:	4623      	mov	r3, r4
 80286ce:	e7f4      	b.n	80286ba <ACL_Init+0x36>
 80286d0:	2000      	movs	r0, #0
 80286d2:	6218      	str	r0, [r3, #32]
 80286d4:	bd10      	pop	{r4, pc}
 80286d6:	bf00      	nop

080286d8 <__arm_cp.1_0>:
 80286d8:	2000a014 	.word	0x2000a014

080286dc <__arm_cp.1_1>:
 80286dc:	20009fec 	.word	0x20009fec

080286e0 <ACL_New>:
 80286e0:	b570      	push	{r4, r5, r6, lr}
 80286e2:	460e      	mov	r6, r1
 80286e4:	4605      	mov	r5, r0
 80286e6:	f102 001f 	add.w	r0, r2, #31
 80286ea:	2101      	movs	r1, #1
 80286ec:	4614      	mov	r4, r2
 80286ee:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 80286f2:	4628      	mov	r0, r5
 80286f4:	f000 f806 	bl	8028704 <ACL_Alloc>
 80286f8:	b110      	cbz	r0, 8028700 <ACL_New+0x20>
 80286fa:	8106      	strh	r6, [r0, #8]
 80286fc:	7185      	strb	r5, [r0, #6]
 80286fe:	8084      	strh	r4, [r0, #4]
 8028700:	bd70      	pop	{r4, r5, r6, pc}
	...

08028704 <ACL_Alloc>:
 8028704:	b5b0      	push	{r4, r5, r7, lr}
 8028706:	460c      	mov	r4, r1
 8028708:	4605      	mov	r5, r0
 802870a:	f000 f92d 	bl	8028968 <ACL_Available_Blocks>
 802870e:	42a0      	cmp	r0, r4
 8028710:	bf3c      	itt	cc
 8028712:	2000      	movcc	r0, #0
 8028714:	bdb0      	popcc	{r4, r5, r7, pc}
 8028716:	480c      	ldr	r0, [pc, #48]	@ (8028748 <__arm_cp.3_0>)
 8028718:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 802871c:	f8b1 206a 	ldrh.w	r2, [r1, #106]	@ 0x6a
 8028720:	4422      	add	r2, r4
 8028722:	f8a1 206a 	strh.w	r2, [r1, #106]	@ 0x6a
 8028726:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8028728:	f8b0 1070 	ldrh.w	r1, [r0, #112]	@ 0x70
 802872c:	1b09      	subs	r1, r1, r4
 802872e:	f8a0 1070 	strh.w	r1, [r0, #112]	@ 0x70
 8028732:	b289      	uxth	r1, r1
 8028734:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8028738:	6840      	ldr	r0, [r0, #4]
 802873a:	bf1e      	ittt	ne
 802873c:	f852 1021 	ldrne.w	r1, [r2, r1, lsl #2]
 8028740:	2200      	movne	r2, #0
 8028742:	620a      	strne	r2, [r1, #32]
 8028744:	bdb0      	pop	{r4, r5, r7, pc}
 8028746:	bf00      	nop

08028748 <__arm_cp.3_0>:
 8028748:	2000a014 	.word	0x2000a014

0802874c <ACL_Release>:
 802874c:	7981      	ldrb	r1, [r0, #6]
 802874e:	f000 b801 	b.w	8028754 <ACL_Free>
	...

08028754 <ACL_Free>:
 8028754:	b570      	push	{r4, r5, r6, lr}
 8028756:	4a0f      	ldr	r2, [pc, #60]	@ (8028794 <__arm_cp.5_0>)
 8028758:	f8b2 3070 	ldrh.w	r3, [r2, #112]	@ 0x70
 802875c:	b11b      	cbz	r3, 8028766 <ACL_Free+0x12>
 802875e:	6f54      	ldr	r4, [r2, #116]	@ 0x74
 8028760:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8028764:	6220      	str	r0, [r4, #32]
 8028766:	461c      	mov	r4, r3
 8028768:	b140      	cbz	r0, 802877c <ACL_Free+0x28>
 802876a:	3401      	adds	r4, #1
 802876c:	6f55      	ldr	r5, [r2, #116]	@ 0x74
 802876e:	b2a6      	uxth	r6, r4
 8028770:	f8a2 4070 	strh.w	r4, [r2, #112]	@ 0x70
 8028774:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
 8028778:	6a00      	ldr	r0, [r0, #32]
 802877a:	e7f5      	b.n	8028768 <ACL_Free+0x14>
 802877c:	f001 0103 	and.w	r1, r1, #3
 8028780:	1b18      	subs	r0, r3, r4
 8028782:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8028786:	f8b1 206a 	ldrh.w	r2, [r1, #106]	@ 0x6a
 802878a:	4410      	add	r0, r2
 802878c:	f8a1 006a 	strh.w	r0, [r1, #106]	@ 0x6a
 8028790:	bd70      	pop	{r4, r5, r6, pc}
 8028792:	bf00      	nop

08028794 <__arm_cp.5_0>:
 8028794:	2000a014 	.word	0x2000a014

08028798 <ACL_Resize>:
 8028798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802879a:	1d0d      	adds	r5, r1, #4
 802879c:	4604      	mov	r4, r0
 802879e:	6a00      	ldr	r0, [r0, #32]
 80287a0:	2100      	movs	r1, #0
 80287a2:	b2aa      	uxth	r2, r5
 80287a4:	4606      	mov	r6, r0
 80287a6:	b168      	cbz	r0, 80287c4 <ACL_Resize+0x2c>
 80287a8:	3120      	adds	r1, #32
 80287aa:	4607      	mov	r7, r0
 80287ac:	6a00      	ldr	r0, [r0, #32]
 80287ae:	b28b      	uxth	r3, r1
 80287b0:	463e      	mov	r6, r7
 80287b2:	4293      	cmp	r3, r2
 80287b4:	d3f7      	bcc.n	80287a6 <ACL_Resize+0xe>
 80287b6:	b178      	cbz	r0, 80287d8 <ACL_Resize+0x40>
 80287b8:	79a1      	ldrb	r1, [r4, #6]
 80287ba:	f7ff ffcb 	bl	8028754 <ACL_Free>
 80287be:	2000      	movs	r0, #0
 80287c0:	6238      	str	r0, [r7, #32]
 80287c2:	e009      	b.n	80287d8 <ACL_Resize+0x40>
 80287c4:	b288      	uxth	r0, r1
 80287c6:	1a10      	subs	r0, r2, r0
 80287c8:	301f      	adds	r0, #31
 80287ca:	f3c0 114f 	ubfx	r1, r0, #5, #16
 80287ce:	79a0      	ldrb	r0, [r4, #6]
 80287d0:	f7ff ff98 	bl	8028704 <ACL_Alloc>
 80287d4:	b118      	cbz	r0, 80287de <ACL_Resize+0x46>
 80287d6:	6230      	str	r0, [r6, #32]
 80287d8:	2000      	movs	r0, #0
 80287da:	80a5      	strh	r5, [r4, #4]
 80287dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80287de:	2091      	movs	r0, #145	@ 0x91
 80287e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080287e2 <ACL_Cmp_Data>:
 80287e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80287e4:	461d      	mov	r5, r3
 80287e6:	4614      	mov	r4, r2
 80287e8:	4606      	mov	r6, r0
 80287ea:	0420      	lsls	r0, r4, #16
 80287ec:	bf04      	itt	eq
 80287ee:	2000      	moveq	r0, #0
 80287f0:	bdf8      	popeq	{r3, r4, r5, r6, r7, pc}
 80287f2:	6a36      	ldr	r6, [r6, #32]
 80287f4:	b1ae      	cbz	r6, 8028822 <ACL_Cmp_Data+0x40>
 80287f6:	b288      	uxth	r0, r1
 80287f8:	2820      	cmp	r0, #32
 80287fa:	d301      	bcc.n	8028800 <ACL_Cmp_Data+0x1e>
 80287fc:	3920      	subs	r1, #32
 80287fe:	e7f4      	b.n	80287ea <ACL_Cmp_Data+0x8>
 8028800:	f1c1 0120 	rsb	r1, r1, #32
 8028804:	b2a7      	uxth	r7, r4
 8028806:	4430      	add	r0, r6
 8028808:	b289      	uxth	r1, r1
 802880a:	42b9      	cmp	r1, r7
 802880c:	bf38      	it	cc
 802880e:	460f      	movcc	r7, r1
 8028810:	4629      	mov	r1, r5
 8028812:	463a      	mov	r2, r7
 8028814:	f7f8 f89e 	bl	8020954 <ble_memcmp>
 8028818:	b920      	cbnz	r0, 8028824 <ACL_Cmp_Data+0x42>
 802881a:	1be4      	subs	r4, r4, r7
 802881c:	443d      	add	r5, r7
 802881e:	2100      	movs	r1, #0
 8028820:	e7e3      	b.n	80287ea <ACL_Cmp_Data+0x8>
 8028822:	b2a0      	uxth	r0, r4
 8028824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08028826 <ACL_Get_Data>:
 8028826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028828:	461c      	mov	r4, r3
 802882a:	4615      	mov	r5, r2
 802882c:	4606      	mov	r6, r0
 802882e:	e014      	b.n	802885a <ACL_Get_Data+0x34>
 8028830:	b288      	uxth	r0, r1
 8028832:	2820      	cmp	r0, #32
 8028834:	d301      	bcc.n	802883a <ACL_Get_Data+0x14>
 8028836:	3920      	subs	r1, #32
 8028838:	e00f      	b.n	802885a <ACL_Get_Data+0x34>
 802883a:	1832      	adds	r2, r6, r0
 802883c:	f1c1 0020 	rsb	r0, r1, #32
 8028840:	b2af      	uxth	r7, r5
 8028842:	b280      	uxth	r0, r0
 8028844:	4611      	mov	r1, r2
 8028846:	42b8      	cmp	r0, r7
 8028848:	bf38      	it	cc
 802884a:	4607      	movcc	r7, r0
 802884c:	4620      	mov	r0, r4
 802884e:	463a      	mov	r2, r7
 8028850:	f7f7 fff8 	bl	8020844 <ble_memcpy>
 8028854:	1bed      	subs	r5, r5, r7
 8028856:	443c      	add	r4, r7
 8028858:	2100      	movs	r1, #0
 802885a:	0428      	lsls	r0, r5, #16
 802885c:	bf1c      	itt	ne
 802885e:	6a36      	ldrne	r6, [r6, #32]
 8028860:	2e00      	cmpne	r6, #0
 8028862:	d1e5      	bne.n	8028830 <ACL_Get_Data+0xa>
 8028864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08028866 <ACL_Set_Data>:
 8028866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028868:	461c      	mov	r4, r3
 802886a:	4615      	mov	r5, r2
 802886c:	4606      	mov	r6, r0
 802886e:	e013      	b.n	8028898 <ACL_Set_Data+0x32>
 8028870:	b288      	uxth	r0, r1
 8028872:	2820      	cmp	r0, #32
 8028874:	d301      	bcc.n	802887a <ACL_Set_Data+0x14>
 8028876:	3920      	subs	r1, #32
 8028878:	e00e      	b.n	8028898 <ACL_Set_Data+0x32>
 802887a:	f1c1 0120 	rsb	r1, r1, #32
 802887e:	b2af      	uxth	r7, r5
 8028880:	4430      	add	r0, r6
 8028882:	b289      	uxth	r1, r1
 8028884:	42b9      	cmp	r1, r7
 8028886:	bf38      	it	cc
 8028888:	460f      	movcc	r7, r1
 802888a:	4621      	mov	r1, r4
 802888c:	463a      	mov	r2, r7
 802888e:	f7f7 ffd9 	bl	8020844 <ble_memcpy>
 8028892:	1bed      	subs	r5, r5, r7
 8028894:	443c      	add	r4, r7
 8028896:	2100      	movs	r1, #0
 8028898:	0428      	lsls	r0, r5, #16
 802889a:	bf1c      	itt	ne
 802889c:	6a36      	ldrne	r6, [r6, #32]
 802889e:	2e00      	cmpne	r6, #0
 80288a0:	d1e6      	bne.n	8028870 <ACL_Set_Data+0xa>
 80288a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080288a4 <ACL_Copy_Data>:
 80288a4:	b5b0      	push	{r4, r5, r7, lr}
 80288a6:	460c      	mov	r4, r1
 80288a8:	4605      	mov	r5, r0
 80288aa:	6a2d      	ldr	r5, [r5, #32]
 80288ac:	b13d      	cbz	r5, 80288be <ACL_Copy_Data+0x1a>
 80288ae:	6a24      	ldr	r4, [r4, #32]
 80288b0:	b12c      	cbz	r4, 80288be <ACL_Copy_Data+0x1a>
 80288b2:	4628      	mov	r0, r5
 80288b4:	4621      	mov	r1, r4
 80288b6:	2220      	movs	r2, #32
 80288b8:	f7f7 ffc4 	bl	8020844 <ble_memcpy>
 80288bc:	e7f5      	b.n	80288aa <ACL_Copy_Data+0x6>
 80288be:	bdb0      	pop	{r4, r5, r7, pc}

080288c0 <ACL_Append>:
 80288c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288c4:	b089      	sub	sp, #36	@ 0x24
 80288c6:	4680      	mov	r8, r0
 80288c8:	6a02      	ldr	r2, [r0, #32]
 80288ca:	4610      	mov	r0, r2
 80288cc:	6a12      	ldr	r2, [r2, #32]
 80288ce:	2a00      	cmp	r2, #0
 80288d0:	d1fb      	bne.n	80288ca <ACL_Append+0xa>
 80288d2:	6a0a      	ldr	r2, [r1, #32]
 80288d4:	6202      	str	r2, [r0, #32]
 80288d6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80288da:	888a      	ldrh	r2, [r1, #4]
 80288dc:	18d4      	adds	r4, r2, r3
 80288de:	f8a8 4004 	strh.w	r4, [r8, #4]
 80288e2:	2400      	movs	r4, #0
 80288e4:	f013 051f 	ands.w	r5, r3, #31
 80288e8:	620c      	str	r4, [r1, #32]
 80288ea:	808c      	strh	r4, [r1, #4]
 80288ec:	d02a      	beq.n	8028944 <ACL_Append+0x84>
 80288ee:	f002 011f 	and.w	r1, r2, #31
 80288f2:	f10d 0904 	add.w	r9, sp, #4
 80288f6:	f8df a054 	ldr.w	sl, [pc, #84]	@ 802894c <__arm_cp.12_0>
 80288fa:	f1c5 0720 	rsb	r7, r5, #32
 80288fe:	9100      	str	r1, [sp, #0]
 8028900:	eba9 0105 	sub.w	r1, r9, r5
 8028904:	f101 0b20 	add.w	fp, r1, #32
 8028908:	6a01      	ldr	r1, [r0, #32]
 802890a:	4604      	mov	r4, r0
 802890c:	4648      	mov	r0, r9
 802890e:	2220      	movs	r2, #32
 8028910:	460e      	mov	r6, r1
 8028912:	47d0      	blx	sl
 8028914:	1960      	adds	r0, r4, r5
 8028916:	4649      	mov	r1, r9
 8028918:	463a      	mov	r2, r7
 802891a:	47d0      	blx	sl
 802891c:	4630      	mov	r0, r6
 802891e:	4659      	mov	r1, fp
 8028920:	462a      	mov	r2, r5
 8028922:	47d0      	blx	sl
 8028924:	6a31      	ldr	r1, [r6, #32]
 8028926:	4630      	mov	r0, r6
 8028928:	2900      	cmp	r1, #0
 802892a:	d1ee      	bne.n	802890a <ACL_Append+0x4a>
 802892c:	9800      	ldr	r0, [sp, #0]
 802892e:	b148      	cbz	r0, 8028944 <ACL_Append+0x84>
 8028930:	4428      	add	r0, r5
 8028932:	2820      	cmp	r0, #32
 8028934:	d806      	bhi.n	8028944 <ACL_Append+0x84>
 8028936:	f898 1006 	ldrb.w	r1, [r8, #6]
 802893a:	4630      	mov	r0, r6
 802893c:	f7ff ff0a 	bl	8028754 <ACL_Free>
 8028940:	2000      	movs	r0, #0
 8028942:	6220      	str	r0, [r4, #32]
 8028944:	b009      	add	sp, #36	@ 0x24
 8028946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802894a:	bf00      	nop

0802894c <__arm_cp.12_0>:
 802894c:	08020845 	.word	0x08020845

08028950 <ACL_Tx_Pool_Size>:
 8028950:	b510      	push	{r4, lr}
 8028952:	3023      	adds	r0, #35	@ 0x23
 8028954:	2101      	movs	r1, #1
 8028956:	eb01 1450 	add.w	r4, r1, r0, lsr #5
 802895a:	2001      	movs	r0, #1
 802895c:	f000 f804 	bl	8028968 <ACL_Available_Blocks>
 8028960:	fbb0 f0f4 	udiv	r0, r0, r4
 8028964:	bd10      	pop	{r4, pc}
	...

08028968 <ACL_Available_Blocks>:
 8028968:	b510      	push	{r4, lr}
 802896a:	490f      	ldr	r1, [pc, #60]	@ (80289a8 <__arm_cp.14_0>)
 802896c:	f8b1 2070 	ldrh.w	r2, [r1, #112]	@ 0x70
 8028970:	b1ba      	cbz	r2, 80289a2 <ACL_Available_Blocks+0x3a>
 8028972:	fab0 f380 	clz	r3, r0
 8028976:	095b      	lsrs	r3, r3, #5
 8028978:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802897c:	f8b3 406a 	ldrh.w	r4, [r3, #106]	@ 0x6a
 8028980:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8028984:	1b1b      	subs	r3, r3, r4
 8028986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802898a:	1ad2      	subs	r2, r2, r3
 802898c:	2802      	cmp	r0, #2
 802898e:	d009      	beq.n	80289a4 <ACL_Available_Blocks+0x3c>
 8028990:	f8b1 006e 	ldrh.w	r0, [r1, #110]	@ 0x6e
 8028994:	f8b1 1068 	ldrh.w	r1, [r1, #104]	@ 0x68
 8028998:	1a08      	subs	r0, r1, r0
 802899a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 802899e:	1a12      	subs	r2, r2, r0
 80289a0:	e000      	b.n	80289a4 <ACL_Available_Blocks+0x3c>
 80289a2:	2200      	movs	r2, #0
 80289a4:	b290      	uxth	r0, r2
 80289a6:	bd10      	pop	{r4, pc}

080289a8 <__arm_cp.14_0>:
 80289a8:	2000a014 	.word	0x2000a014

080289ac <ACL_Get_Count>:
 80289ac:	2100      	movs	r1, #0
 80289ae:	460a      	mov	r2, r1
 80289b0:	3101      	adds	r1, #1
 80289b2:	6a00      	ldr	r0, [r0, #32]
 80289b4:	2800      	cmp	r0, #0
 80289b6:	d1fa      	bne.n	80289ae <ACL_Get_Count+0x2>
 80289b8:	b290      	uxth	r0, r2
 80289ba:	4770      	bx	lr

080289bc <ACL_List_Insert_Tail>:
 80289bc:	2200      	movs	r2, #0
 80289be:	600a      	str	r2, [r1, #0]
 80289c0:	6802      	ldr	r2, [r0, #0]
 80289c2:	2a00      	cmp	r2, #0
 80289c4:	4602      	mov	r2, r0
 80289c6:	bf18      	it	ne
 80289c8:	6842      	ldrne	r2, [r0, #4]
 80289ca:	6011      	str	r1, [r2, #0]
 80289cc:	6041      	str	r1, [r0, #4]
 80289ce:	4770      	bx	lr

080289d0 <ACL_List_Insert_Head>:
 80289d0:	6802      	ldr	r2, [r0, #0]
 80289d2:	600a      	str	r2, [r1, #0]
 80289d4:	b902      	cbnz	r2, 80289d8 <ACL_List_Insert_Head+0x8>
 80289d6:	6041      	str	r1, [r0, #4]
 80289d8:	6001      	str	r1, [r0, #0]
 80289da:	4770      	bx	lr

080289dc <ACL_List_Remove>:
 80289dc:	6803      	ldr	r3, [r0, #0]
 80289de:	428b      	cmp	r3, r1
 80289e0:	d00a      	beq.n	80289f8 <ACL_List_Remove+0x1c>
 80289e2:	461a      	mov	r2, r3
 80289e4:	681b      	ldr	r3, [r3, #0]
 80289e6:	428b      	cmp	r3, r1
 80289e8:	d1fb      	bne.n	80289e2 <ACL_List_Remove+0x6>
 80289ea:	680b      	ldr	r3, [r1, #0]
 80289ec:	6013      	str	r3, [r2, #0]
 80289ee:	6843      	ldr	r3, [r0, #4]
 80289f0:	428b      	cmp	r3, r1
 80289f2:	bf08      	it	eq
 80289f4:	6042      	streq	r2, [r0, #4]
 80289f6:	e002      	b.n	80289fe <ACL_List_Remove+0x22>
 80289f8:	6809      	ldr	r1, [r1, #0]
 80289fa:	6001      	str	r1, [r0, #0]
 80289fc:	b101      	cbz	r1, 8028a00 <ACL_List_Remove+0x24>
 80289fe:	4770      	bx	lr
 8028a00:	2100      	movs	r1, #0
 8028a02:	6041      	str	r1, [r0, #4]
 8028a04:	4770      	bx	lr

08028a06 <SDB_Get_Sec_Record>:
 8028a06:	b51c      	push	{r2, r3, r4, lr}
 8028a08:	460b      	mov	r3, r1
 8028a0a:	2150      	movs	r1, #80	@ 0x50
 8028a0c:	2200      	movs	r2, #0
 8028a0e:	2400      	movs	r4, #0
 8028a10:	9100      	str	r1, [sp, #0]
 8028a12:	2100      	movs	r1, #0
 8028a14:	f7d9 fc7c 	bl	8002310 <BLEPLAT_NvmGet>
 8028a18:	3003      	adds	r0, #3
 8028a1a:	bf08      	it	eq
 8028a1c:	245c      	moveq	r4, #92	@ 0x5c
 8028a1e:	4620      	mov	r0, r4
 8028a20:	bd1c      	pop	{r2, r3, r4, pc}

08028a22 <SDB_Read_Sec_Record>:
 8028a22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028a26:	4614      	mov	r4, r2
 8028a28:	4689      	mov	r9, r1
 8028a2a:	4606      	mov	r6, r0
 8028a2c:	b139      	cbz	r1, 8028a3e <SDB_Read_Sec_Record+0x1c>
 8028a2e:	7970      	ldrb	r0, [r6, #5]
 8028a30:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8028a34:	3840      	subs	r0, #64	@ 0x40
 8028a36:	fab0 f080 	clz	r0, r0
 8028a3a:	0945      	lsrs	r5, r0, #5
 8028a3c:	e000      	b.n	8028a40 <SDB_Read_Sec_Record+0x1e>
 8028a3e:	2500      	movs	r5, #0
 8028a40:	f104 071e 	add.w	r7, r4, #30
 8028a44:	f104 083e 	add.w	r8, r4, #62	@ 0x3e
 8028a48:	2100      	movs	r1, #0
 8028a4a:	b2c8      	uxtb	r0, r1
 8028a4c:	4621      	mov	r1, r4
 8028a4e:	f7ff ffda 	bl	8028a06 <SDB_Get_Sec_Record>
 8028a52:	b9b0      	cbnz	r0, 8028a82 <SDB_Read_Sec_Record+0x60>
 8028a54:	b125      	cbz	r5, 8028a60 <SDB_Read_Sec_Record+0x3e>
 8028a56:	4638      	mov	r0, r7
 8028a58:	4631      	mov	r1, r6
 8028a5a:	f002 fea8 	bl	802b7ae <RndAddr_Check_Resolvable_Address>
 8028a5e:	e00a      	b.n	8028a76 <SDB_Read_Sec_Record+0x54>
 8028a60:	7860      	ldrb	r0, [r4, #1]
 8028a62:	2101      	movs	r1, #1
 8028a64:	f000 0001 	and.w	r0, r0, #1
 8028a68:	4548      	cmp	r0, r9
 8028a6a:	d1ee      	bne.n	8028a4a <SDB_Read_Sec_Record+0x28>
 8028a6c:	4640      	mov	r0, r8
 8028a6e:	4631      	mov	r1, r6
 8028a70:	2206      	movs	r2, #6
 8028a72:	f7f7 ff6f 	bl	8020954 <ble_memcmp>
 8028a76:	2101      	movs	r1, #1
 8028a78:	2800      	cmp	r0, #0
 8028a7a:	d1e6      	bne.n	8028a4a <SDB_Read_Sec_Record+0x28>
 8028a7c:	2000      	movs	r0, #0
 8028a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028a82:	205c      	movs	r0, #92	@ 0x5c
 8028a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08028a88 <SDB_Get_Number_Of_Sec_Records>:
 8028a88:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 8028a8a:	2400      	movs	r4, #0
 8028a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8028a90:	2000      	movs	r0, #0
 8028a92:	b2c0      	uxtb	r0, r0
 8028a94:	2100      	movs	r1, #0
 8028a96:	2200      	movs	r2, #0
 8028a98:	2300      	movs	r3, #0
 8028a9a:	9400      	str	r4, [sp, #0]
 8028a9c:	f7d9 fc38 	bl	8002310 <BLEPLAT_NvmGet>
 8028aa0:	3003      	adds	r0, #3
 8028aa2:	f105 0501 	add.w	r5, r5, #1
 8028aa6:	f04f 0001 	mov.w	r0, #1
 8028aaa:	d1f2      	bne.n	8028a92 <SDB_Get_Number_Of_Sec_Records+0xa>
 8028aac:	b2e8      	uxtb	r0, r5
 8028aae:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

08028ab0 <ACI_GAP_CLEAR_SECURITY_DB>:
 8028ab0:	b580      	push	{r7, lr}
 8028ab2:	2003      	movs	r0, #3
 8028ab4:	f7d9 fc36 	bl	8002324 <BLEPLAT_NvmDiscard>
 8028ab8:	2000      	movs	r0, #0
 8028aba:	bd80      	pop	{r7, pc}

08028abc <SDB_Find_Gatt_Record>:
 8028abc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028ac0:	ae01      	add	r6, sp, #4
 8028ac2:	4688      	mov	r8, r1
 8028ac4:	4605      	mov	r5, r0
 8028ac6:	2100      	movs	r1, #0
 8028ac8:	240c      	movs	r4, #12
 8028aca:	1c77      	adds	r7, r6, #1
 8028acc:	b2c8      	uxtb	r0, r1
 8028ace:	2101      	movs	r1, #1
 8028ad0:	2200      	movs	r2, #0
 8028ad2:	4633      	mov	r3, r6
 8028ad4:	9400      	str	r4, [sp, #0]
 8028ad6:	f7d9 fc1b 	bl	8002310 <BLEPLAT_NvmGet>
 8028ada:	3003      	adds	r0, #3
 8028adc:	d00c      	beq.n	8028af8 <SDB_Find_Gatt_Record+0x3c>
 8028ade:	4638      	mov	r0, r7
 8028ae0:	4629      	mov	r1, r5
 8028ae2:	2206      	movs	r2, #6
 8028ae4:	f7f7 ff36 	bl	8020954 <ble_memcmp>
 8028ae8:	2101      	movs	r1, #1
 8028aea:	2800      	cmp	r0, #0
 8028aec:	d1ee      	bne.n	8028acc <SDB_Find_Gatt_Record+0x10>
 8028aee:	9803      	ldr	r0, [sp, #12]
 8028af0:	f8c8 0000 	str.w	r0, [r8]
 8028af4:	2000      	movs	r0, #0
 8028af6:	e001      	b.n	8028afc <SDB_Find_Gatt_Record+0x40>
 8028af8:	f06f 0002 	mvn.w	r0, #2
 8028afc:	b004      	add	sp, #16
 8028afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028b02 <SDB_Write_Sec_Record>:
 8028b02:	b570      	push	{r4, r5, r6, lr}
 8028b04:	b096      	sub	sp, #88	@ 0x58
 8028b06:	4604      	mov	r4, r0
 8028b08:	7840      	ldrb	r0, [r0, #1]
 8028b0a:	aa02      	add	r2, sp, #8
 8028b0c:	f104 063e 	add.w	r6, r4, #62	@ 0x3e
 8028b10:	f000 0101 	and.w	r1, r0, #1
 8028b14:	4630      	mov	r0, r6
 8028b16:	f7ff ff84 	bl	8028a22 <SDB_Read_Sec_Record>
 8028b1a:	b168      	cbz	r0, 8028b38 <SDB_Write_Sec_Record+0x36>
 8028b1c:	7860      	ldrb	r0, [r4, #1]
 8028b1e:	2810      	cmp	r0, #16
 8028b20:	d359      	bcc.n	8028bd6 <SDB_Write_Sec_Record+0xd4>
 8028b22:	2500      	movs	r5, #0
 8028b24:	f000 f90a 	bl	8028d3c <OUTLINED_FUNCTION_0>
 8028b28:	1c41      	adds	r1, r0, #1
 8028b2a:	d04f      	beq.n	8028bcc <SDB_Write_Sec_Record+0xca>
 8028b2c:	3004      	adds	r0, #4
 8028b2e:	d152      	bne.n	8028bd6 <SDB_Write_Sec_Record+0xd4>
 8028b30:	2000      	movs	r0, #0
 8028b32:	f000 f852 	bl	8028bda <SDB_Warning_Event>
 8028b36:	e04e      	b.n	8028bd6 <SDB_Write_Sec_Record+0xd4>
 8028b38:	ad02      	add	r5, sp, #8
 8028b3a:	4620      	mov	r0, r4
 8028b3c:	2250      	movs	r2, #80	@ 0x50
 8028b3e:	4629      	mov	r1, r5
 8028b40:	f7f7 ff08 	bl	8020954 <ble_memcmp>
 8028b44:	2800      	cmp	r0, #0
 8028b46:	d046      	beq.n	8028bd6 <SDB_Write_Sec_Record+0xd4>
 8028b48:	f000 f8ff 	bl	8028d4a <OUTLINED_FUNCTION_1>
 8028b4c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8028b50:	78e0      	ldrb	r0, [r4, #3]
 8028b52:	4288      	cmp	r0, r1
 8028b54:	d1e2      	bne.n	8028b1c <SDB_Write_Sec_Record+0x1a>
 8028b56:	7860      	ldrb	r0, [r4, #1]
 8028b58:	06c1      	lsls	r1, r0, #27
 8028b5a:	d40e      	bmi.n	8028b7a <SDB_Write_Sec_Record+0x78>
 8028b5c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8028b60:	06c9      	lsls	r1, r1, #27
 8028b62:	d50a      	bpl.n	8028b7a <SDB_Write_Sec_Record+0x78>
 8028b64:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8028b68:	f105 0144 	add.w	r1, r5, #68	@ 0x44
 8028b6c:	2202      	movs	r2, #2
 8028b6e:	f7f7 fe69 	bl	8020844 <ble_memcpy>
 8028b72:	7860      	ldrb	r0, [r4, #1]
 8028b74:	f040 0010 	orr.w	r0, r0, #16
 8028b78:	7060      	strb	r0, [r4, #1]
 8028b7a:	0681      	lsls	r1, r0, #26
 8028b7c:	d414      	bmi.n	8028ba8 <SDB_Write_Sec_Record+0xa6>
 8028b7e:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8028b82:	0689      	lsls	r1, r1, #26
 8028b84:	d510      	bpl.n	8028ba8 <SDB_Write_Sec_Record+0xa6>
 8028b86:	f104 001e 	add.w	r0, r4, #30
 8028b8a:	f105 011e 	add.w	r1, r5, #30
 8028b8e:	2210      	movs	r2, #16
 8028b90:	f7f7 fe58 	bl	8020844 <ble_memcpy>
 8028b94:	f105 013e 	add.w	r1, r5, #62	@ 0x3e
 8028b98:	4630      	mov	r0, r6
 8028b9a:	2206      	movs	r2, #6
 8028b9c:	f7f7 fe52 	bl	8020844 <ble_memcpy>
 8028ba0:	7860      	ldrb	r0, [r4, #1]
 8028ba2:	f040 0020 	orr.w	r0, r0, #32
 8028ba6:	7060      	strb	r0, [r4, #1]
 8028ba8:	0640      	lsls	r0, r0, #25
 8028baa:	d4ba      	bmi.n	8028b22 <SDB_Write_Sec_Record+0x20>
 8028bac:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8028bb0:	0640      	lsls	r0, r0, #25
 8028bb2:	d5b3      	bpl.n	8028b1c <SDB_Write_Sec_Record+0x1a>
 8028bb4:	f104 002e 	add.w	r0, r4, #46	@ 0x2e
 8028bb8:	f105 012e 	add.w	r1, r5, #46	@ 0x2e
 8028bbc:	2210      	movs	r2, #16
 8028bbe:	f7f7 fe41 	bl	8020844 <ble_memcpy>
 8028bc2:	7860      	ldrb	r0, [r4, #1]
 8028bc4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8028bc8:	7060      	strb	r0, [r4, #1]
 8028bca:	e7aa      	b.n	8028b22 <SDB_Write_Sec_Record+0x20>
 8028bcc:	2003      	movs	r0, #3
 8028bce:	f7d9 fba9 	bl	8002324 <BLEPLAT_NvmDiscard>
 8028bd2:	f000 f8b3 	bl	8028d3c <OUTLINED_FUNCTION_0>
 8028bd6:	b016      	add	sp, #88	@ 0x58
 8028bd8:	bd70      	pop	{r4, r5, r6, pc}

08028bda <SDB_Warning_Event>:
 8028bda:	b5e0      	push	{r5, r6, r7, lr}
 8028bdc:	f88d 0007 	strb.w	r0, [sp, #7]
 8028be0:	f10d 0207 	add.w	r2, sp, #7
 8028be4:	2003      	movs	r0, #3
 8028be6:	2101      	movs	r1, #1
 8028be8:	f7fa fda0 	bl	802372c <EVT_aci_hal_fw_error>
 8028bec:	bd8c      	pop	{r2, r3, r7, pc}

08028bee <SDB_Write_Gatt_Data>:
 8028bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028bf2:	b09c      	sub	sp, #112	@ 0x70
 8028bf4:	461c      	mov	r4, r3
 8028bf6:	4617      	mov	r7, r2
 8028bf8:	460d      	mov	r5, r1
 8028bfa:	4606      	mov	r6, r0
 8028bfc:	b191      	cbz	r1, 8028c24 <SDB_Write_Gatt_Data+0x36>
 8028bfe:	7970      	ldrb	r0, [r6, #5]
 8028c00:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 8028c04:	2840      	cmp	r0, #64	@ 0x40
 8028c06:	d10d      	bne.n	8028c24 <SDB_Write_Gatt_Data+0x36>
 8028c08:	f10d 0808 	add.w	r8, sp, #8
 8028c0c:	4630      	mov	r0, r6
 8028c0e:	4629      	mov	r1, r5
 8028c10:	4642      	mov	r2, r8
 8028c12:	f7ff ff06 	bl	8028a22 <SDB_Read_Sec_Record>
 8028c16:	2800      	cmp	r0, #0
 8028c18:	d167      	bne.n	8028cea <SDB_Write_Gatt_Data+0xfc>
 8028c1a:	f108 013e 	add.w	r1, r8, #62	@ 0x3e
 8028c1e:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
 8028c22:	e002      	b.n	8028c2a <SDB_Write_Gatt_Data+0x3c>
 8028c24:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
 8028c28:	4631      	mov	r1, r6
 8028c2a:	2206      	movs	r2, #6
 8028c2c:	f7f7 fe0a 	bl	8020844 <ble_memcpy>
 8028c30:	f10d 006a 	add.w	r0, sp, #106	@ 0x6a
 8028c34:	a919      	add	r1, sp, #100	@ 0x64
 8028c36:	f7ff ff41 	bl	8028abc <SDB_Find_Gatt_Record>
 8028c3a:	b958      	cbnz	r0, 8028c54 <SDB_Write_Gatt_Data+0x66>
 8028c3c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8028c3e:	42b8      	cmp	r0, r7
 8028c40:	d106      	bne.n	8028c50 <SDB_Write_Gatt_Data+0x62>
 8028c42:	b2ba      	uxth	r2, r7
 8028c44:	200c      	movs	r0, #12
 8028c46:	4621      	mov	r1, r4
 8028c48:	f7d9 fb6a 	bl	8002320 <BLEPLAT_NvmCompare>
 8028c4c:	2800      	cmp	r0, #0
 8028c4e:	d04e      	beq.n	8028cee <SDB_Write_Gatt_Data+0x100>
 8028c50:	f000 f87b 	bl	8028d4a <OUTLINED_FUNCTION_1>
 8028c54:	20fe      	movs	r0, #254	@ 0xfe
 8028c56:	f89d 106b 	ldrb.w	r1, [sp, #107]	@ 0x6b
 8028c5a:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
 8028c5e:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 8028c62:	9718      	str	r7, [sp, #96]	@ 0x60
 8028c64:	b2bf      	uxth	r7, r7
 8028c66:	f88d 0058 	strb.w	r0, [sp, #88]	@ 0x58
 8028c6a:	f89d 006a 	ldrb.w	r0, [sp, #106]	@ 0x6a
 8028c6e:	9700      	str	r7, [sp, #0]
 8028c70:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8028c74:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8028c78:	f88d 105a 	strb.w	r1, [sp, #90]	@ 0x5a
 8028c7c:	220c      	movs	r2, #12
 8028c7e:	4623      	mov	r3, r4
 8028c80:	f88d 0059 	strb.w	r0, [sp, #89]	@ 0x59
 8028c84:	f89d 006e 	ldrb.w	r0, [sp, #110]	@ 0x6e
 8028c88:	f88d 005d 	strb.w	r0, [sp, #93]	@ 0x5d
 8028c8c:	20ff      	movs	r0, #255	@ 0xff
 8028c8e:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 8028c92:	f89d 006f 	ldrb.w	r0, [sp, #111]	@ 0x6f
 8028c96:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8028c9a:	a916      	add	r1, sp, #88	@ 0x58
 8028c9c:	2001      	movs	r0, #1
 8028c9e:	f7d9 fb2f 	bl	8002300 <BLEPLAT_NvmAdd>
 8028ca2:	b320      	cbz	r0, 8028cee <SDB_Write_Gatt_Data+0x100>
 8028ca4:	1c41      	adds	r1, r0, #1
 8028ca6:	d005      	beq.n	8028cb4 <SDB_Write_Gatt_Data+0xc6>
 8028ca8:	3004      	adds	r0, #4
 8028caa:	d11e      	bne.n	8028cea <SDB_Write_Gatt_Data+0xfc>
 8028cac:	2001      	movs	r0, #1
 8028cae:	f7ff ff94 	bl	8028bda <SDB_Warning_Event>
 8028cb2:	e01c      	b.n	8028cee <SDB_Write_Gatt_Data+0x100>
 8028cb4:	aa02      	add	r2, sp, #8
 8028cb6:	4630      	mov	r0, r6
 8028cb8:	4629      	mov	r1, r5
 8028cba:	f7ff feb2 	bl	8028a22 <SDB_Read_Sec_Record>
 8028cbe:	4605      	mov	r5, r0
 8028cc0:	2003      	movs	r0, #3
 8028cc2:	f7d9 fb2f 	bl	8002324 <BLEPLAT_NvmDiscard>
 8028cc6:	b945      	cbnz	r5, 8028cda <SDB_Write_Gatt_Data+0xec>
 8028cc8:	2000      	movs	r0, #0
 8028cca:	2250      	movs	r2, #80	@ 0x50
 8028ccc:	2300      	movs	r3, #0
 8028cce:	9000      	str	r0, [sp, #0]
 8028cd0:	a902      	add	r1, sp, #8
 8028cd2:	2000      	movs	r0, #0
 8028cd4:	f7d9 fb14 	bl	8002300 <BLEPLAT_NvmAdd>
 8028cd8:	b938      	cbnz	r0, 8028cea <SDB_Write_Gatt_Data+0xfc>
 8028cda:	9700      	str	r7, [sp, #0]
 8028cdc:	a916      	add	r1, sp, #88	@ 0x58
 8028cde:	2001      	movs	r0, #1
 8028ce0:	220c      	movs	r2, #12
 8028ce2:	4623      	mov	r3, r4
 8028ce4:	f7d9 fb0c 	bl	8002300 <BLEPLAT_NvmAdd>
 8028ce8:	b108      	cbz	r0, 8028cee <SDB_Write_Gatt_Data+0x100>
 8028cea:	2097      	movs	r0, #151	@ 0x97
 8028cec:	e000      	b.n	8028cf0 <SDB_Write_Gatt_Data+0x102>
 8028cee:	2000      	movs	r0, #0
 8028cf0:	b01c      	add	sp, #112	@ 0x70
 8028cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028cf6 <SDB_Read_Gatt_Data>:
 8028cf6:	b570      	push	{r4, r5, r6, lr}
 8028cf8:	b096      	sub	sp, #88	@ 0x58
 8028cfa:	ae02      	add	r6, sp, #8
 8028cfc:	4615      	mov	r5, r2
 8028cfe:	461c      	mov	r4, r3
 8028d00:	4632      	mov	r2, r6
 8028d02:	f7ff fe8e 	bl	8028a22 <SDB_Read_Sec_Record>
 8028d06:	b928      	cbnz	r0, 8028d14 <SDB_Read_Gatt_Data+0x1e>
 8028d08:	f106 003e 	add.w	r0, r6, #62	@ 0x3e
 8028d0c:	a901      	add	r1, sp, #4
 8028d0e:	f7ff fed5 	bl	8028abc <SDB_Find_Gatt_Record>
 8028d12:	b110      	cbz	r0, 8028d1a <SDB_Read_Gatt_Data+0x24>
 8028d14:	205c      	movs	r0, #92	@ 0x5c
 8028d16:	b016      	add	sp, #88	@ 0x58
 8028d18:	bd70      	pop	{r4, r5, r6, pc}
 8028d1a:	6829      	ldr	r1, [r5, #0]
 8028d1c:	9801      	ldr	r0, [sp, #4]
 8028d1e:	4288      	cmp	r0, r1
 8028d20:	d901      	bls.n	8028d26 <SDB_Read_Gatt_Data+0x30>
 8028d22:	2098      	movs	r0, #152	@ 0x98
 8028d24:	e7f7      	b.n	8028d16 <SDB_Read_Gatt_Data+0x20>
 8028d26:	6028      	str	r0, [r5, #0]
 8028d28:	b280      	uxth	r0, r0
 8028d2a:	2101      	movs	r1, #1
 8028d2c:	220c      	movs	r2, #12
 8028d2e:	4623      	mov	r3, r4
 8028d30:	9000      	str	r0, [sp, #0]
 8028d32:	2002      	movs	r0, #2
 8028d34:	f7d9 faec 	bl	8002310 <BLEPLAT_NvmGet>
 8028d38:	2000      	movs	r0, #0
 8028d3a:	e7ec      	b.n	8028d16 <SDB_Read_Gatt_Data+0x20>

08028d3c <OUTLINED_FUNCTION_0>:
 8028d3c:	2000      	movs	r0, #0
 8028d3e:	4621      	mov	r1, r4
 8028d40:	2250      	movs	r2, #80	@ 0x50
 8028d42:	2300      	movs	r3, #0
 8028d44:	9500      	str	r5, [sp, #0]
 8028d46:	f7d9 badb 	b.w	8002300 <BLEPLAT_NvmAdd>

08028d4a <OUTLINED_FUNCTION_1>:
 8028d4a:	2002      	movs	r0, #2
 8028d4c:	f7d9 baea 	b.w	8002324 <BLEPLAT_NvmDiscard>

08028d50 <SMA_Compute_EDIV>:
 8028d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d54:	b08e      	sub	sp, #56	@ 0x38
 8028d56:	4605      	mov	r5, r0
 8028d58:	2003      	movs	r0, #3
 8028d5a:	f10d 0804 	add.w	r8, sp, #4
 8028d5e:	460e      	mov	r6, r1
 8028d60:	4614      	mov	r4, r2
 8028d62:	f10d 0116 	add.w	r1, sp, #22
 8028d66:	f8ad 0016 	strh.w	r0, [sp, #22]
 8028d6a:	2000      	movs	r0, #0
 8028d6c:	4643      	mov	r3, r8
 8028d6e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8028d72:	4814      	ldr	r0, [pc, #80]	@ (8028dc4 <__arm_cp.0_0>)
 8028d74:	aa05      	add	r2, sp, #20
 8028d76:	3018      	adds	r0, #24
 8028d78:	f000 f826 	bl	8028dc8 <SMA_Diversify>
 8028d7c:	af0a      	add	r7, sp, #40	@ 0x28
 8028d7e:	2100      	movs	r1, #0
 8028d80:	2210      	movs	r2, #16
 8028d82:	4638      	mov	r0, r7
 8028d84:	f7f7 fdae 	bl	80208e4 <ble_memset>
 8028d88:	4638      	mov	r0, r7
 8028d8a:	4631      	mov	r1, r6
 8028d8c:	2208      	movs	r2, #8
 8028d8e:	f7f7 fd59 	bl	8020844 <ble_memcpy>
 8028d92:	ae06      	add	r6, sp, #24
 8028d94:	4640      	mov	r0, r8
 8028d96:	4639      	mov	r1, r7
 8028d98:	4632      	mov	r2, r6
 8028d9a:	f7d9 fac7 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 8028d9e:	f10d 0002 	add.w	r0, sp, #2
 8028da2:	4631      	mov	r1, r6
 8028da4:	2202      	movs	r2, #2
 8028da6:	f7f7 fd4d 	bl	8020844 <ble_memcpy>
 8028daa:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8028dae:	7828      	ldrb	r0, [r5, #0]
 8028db0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8028db4:	4048      	eors	r0, r1
 8028db6:	7020      	strb	r0, [r4, #0]
 8028db8:	7868      	ldrb	r0, [r5, #1]
 8028dba:	4050      	eors	r0, r2
 8028dbc:	7060      	strb	r0, [r4, #1]
 8028dbe:	b00e      	add	sp, #56	@ 0x38
 8028dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08028dc4 <__arm_cp.0_0>:
 8028dc4:	2000a014 	.word	0x2000a014

08028dc8 <SMA_Diversify>:
 8028dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028dca:	2400      	movs	r4, #0
 8028dcc:	9403      	str	r4, [sp, #12]
 8028dce:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8028dd2:	780c      	ldrb	r4, [r1, #0]
 8028dd4:	7849      	ldrb	r1, [r1, #1]
 8028dd6:	f88d 1001 	strb.w	r1, [sp, #1]
 8028dda:	7811      	ldrb	r1, [r2, #0]
 8028ddc:	7852      	ldrb	r2, [r2, #1]
 8028dde:	f88d 4000 	strb.w	r4, [sp]
 8028de2:	f88d 1002 	strb.w	r1, [sp, #2]
 8028de6:	f88d 2003 	strb.w	r2, [sp, #3]
 8028dea:	4669      	mov	r1, sp
 8028dec:	461a      	mov	r2, r3
 8028dee:	f7d9 fa9d 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 8028df2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08028df4 <SMA_Generate_STK>:
 8028df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028df6:	b085      	sub	sp, #20
 8028df8:	af01      	add	r7, sp, #4
 8028dfa:	4615      	mov	r5, r2
 8028dfc:	4606      	mov	r6, r0
 8028dfe:	2208      	movs	r2, #8
 8028e00:	461c      	mov	r4, r3
 8028e02:	f107 0008 	add.w	r0, r7, #8
 8028e06:	f7f7 fd1d 	bl	8020844 <ble_memcpy>
 8028e0a:	4638      	mov	r0, r7
 8028e0c:	4629      	mov	r1, r5
 8028e0e:	2208      	movs	r2, #8
 8028e10:	f7f7 fd18 	bl	8020844 <ble_memcpy>
 8028e14:	4630      	mov	r0, r6
 8028e16:	4639      	mov	r1, r7
 8028e18:	4622      	mov	r2, r4
 8028e1a:	f7d9 fa87 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 8028e1e:	b005      	add	sp, #20
 8028e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08028e24 <SMA_Compute_Confirm_Value>:
 8028e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e28:	b088      	sub	sp, #32
 8028e2a:	4680      	mov	r8, r0
 8028e2c:	ae04      	add	r6, sp, #16
 8028e2e:	4f25      	ldr	r7, [pc, #148]	@ (8028ec4 <__arm_cp.3_0>)
 8028e30:	4614      	mov	r4, r2
 8028e32:	460d      	mov	r5, r1
 8028e34:	2207      	movs	r2, #7
 8028e36:	f106 0009 	add.w	r0, r6, #9
 8028e3a:	f108 0117 	add.w	r1, r8, #23
 8028e3e:	47b8      	blx	r7
 8028e40:	1cb0      	adds	r0, r6, #2
 8028e42:	f108 0110 	add.w	r1, r8, #16
 8028e46:	2207      	movs	r2, #7
 8028e48:	47b8      	blx	r7
 8028e4a:	1c70      	adds	r0, r6, #1
 8028e4c:	f108 0125 	add.w	r1, r8, #37	@ 0x25
 8028e50:	2201      	movs	r2, #1
 8028e52:	47b8      	blx	r7
 8028e54:	f108 011e 	add.w	r1, r8, #30
 8028e58:	4630      	mov	r0, r6
 8028e5a:	2201      	movs	r2, #1
 8028e5c:	47b8      	blx	r7
 8028e5e:	2000      	movs	r0, #0
 8028e60:	466f      	mov	r7, sp
 8028e62:	2810      	cmp	r0, #16
 8028e64:	d005      	beq.n	8028e72 <SMA_Compute_Confirm_Value+0x4e>
 8028e66:	5c29      	ldrb	r1, [r5, r0]
 8028e68:	5c32      	ldrb	r2, [r6, r0]
 8028e6a:	4051      	eors	r1, r2
 8028e6c:	5439      	strb	r1, [r7, r0]
 8028e6e:	3001      	adds	r0, #1
 8028e70:	e7f7      	b.n	8028e62 <SMA_Compute_Confirm_Value+0x3e>
 8028e72:	4640      	mov	r0, r8
 8028e74:	4639      	mov	r1, r7
 8028e76:	4622      	mov	r2, r4
 8028e78:	f7d9 fa58 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 8028e7c:	f106 000c 	add.w	r0, r6, #12
 8028e80:	2100      	movs	r1, #0
 8028e82:	2204      	movs	r2, #4
 8028e84:	2500      	movs	r5, #0
 8028e86:	f7f7 fd2d 	bl	80208e4 <ble_memset>
 8028e8a:	1db0      	adds	r0, r6, #6
 8028e8c:	f108 011f 	add.w	r1, r8, #31
 8028e90:	2206      	movs	r2, #6
 8028e92:	f7f7 fcd7 	bl	8020844 <ble_memcpy>
 8028e96:	f108 0126 	add.w	r1, r8, #38	@ 0x26
 8028e9a:	4630      	mov	r0, r6
 8028e9c:	2206      	movs	r2, #6
 8028e9e:	f7f7 fcd1 	bl	8020844 <ble_memcpy>
 8028ea2:	2d10      	cmp	r5, #16
 8028ea4:	d005      	beq.n	8028eb2 <SMA_Compute_Confirm_Value+0x8e>
 8028ea6:	5d60      	ldrb	r0, [r4, r5]
 8028ea8:	5d71      	ldrb	r1, [r6, r5]
 8028eaa:	4048      	eors	r0, r1
 8028eac:	5578      	strb	r0, [r7, r5]
 8028eae:	3501      	adds	r5, #1
 8028eb0:	e7f7      	b.n	8028ea2 <SMA_Compute_Confirm_Value+0x7e>
 8028eb2:	4669      	mov	r1, sp
 8028eb4:	4640      	mov	r0, r8
 8028eb6:	4622      	mov	r2, r4
 8028eb8:	f7d9 fa38 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 8028ebc:	b008      	add	sp, #32
 8028ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028ec2:	bf00      	nop

08028ec4 <__arm_cp.3_0>:
 8028ec4:	08020845 	.word	0x08020845

08028ec8 <SMA_Generate_LTK>:
 8028ec8:	b5e0      	push	{r5, r6, r7, lr}
 8028eca:	460b      	mov	r3, r1
 8028ecc:	4601      	mov	r1, r0
 8028ece:	2000      	movs	r0, #0
 8028ed0:	f10d 0206 	add.w	r2, sp, #6
 8028ed4:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028ed8:	4802      	ldr	r0, [pc, #8]	@ (8028ee4 <__arm_cp.4_0>)
 8028eda:	3008      	adds	r0, #8
 8028edc:	f7ff ff74 	bl	8028dc8 <SMA_Diversify>
 8028ee0:	bd8c      	pop	{r2, r3, r7, pc}
 8028ee2:	bf00      	nop

08028ee4 <__arm_cp.4_0>:
 8028ee4:	2000a014 	.word	0x2000a014

08028ee8 <SMA_Generate_CSRK>:
 8028ee8:	b5e0      	push	{r5, r6, r7, lr}
 8028eea:	460b      	mov	r3, r1
 8028eec:	4601      	mov	r1, r0
 8028eee:	2001      	movs	r0, #1
 8028ef0:	f10d 0206 	add.w	r2, sp, #6
 8028ef4:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028ef8:	4802      	ldr	r0, [pc, #8]	@ (8028f04 <__arm_cp.5_0>)
 8028efa:	3008      	adds	r0, #8
 8028efc:	f7ff ff64 	bl	8028dc8 <SMA_Diversify>
 8028f00:	bd8c      	pop	{r2, r3, r7, pc}
 8028f02:	bf00      	nop

08028f04 <__arm_cp.5_0>:
 8028f04:	2000a014 	.word	0x2000a014

08028f08 <SMA_Generate_IRK>:
 8028f08:	b5e0      	push	{r5, r6, r7, lr}
 8028f0a:	4603      	mov	r3, r0
 8028f0c:	2001      	movs	r0, #1
 8028f0e:	f10d 0106 	add.w	r1, sp, #6
 8028f12:	f8ad 0006 	strh.w	r0, [sp, #6]
 8028f16:	2000      	movs	r0, #0
 8028f18:	f8ad 0004 	strh.w	r0, [sp, #4]
 8028f1c:	4802      	ldr	r0, [pc, #8]	@ (8028f28 <__arm_cp.6_0>)
 8028f1e:	aa01      	add	r2, sp, #4
 8028f20:	3018      	adds	r0, #24
 8028f22:	f7ff ff51 	bl	8028dc8 <SMA_Diversify>
 8028f26:	bd8c      	pop	{r2, r3, r7, pc}

08028f28 <__arm_cp.6_0>:
 8028f28:	2000a014 	.word	0x2000a014

08028f2c <SMA_SC_Gen_f4_Confirm>:
 8028f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f30:	b09a      	sub	sp, #104	@ 0x68
 8028f32:	f10d 0827 	add.w	r8, sp, #39	@ 0x27
 8028f36:	4f12      	ldr	r7, [pc, #72]	@ (8028f80 <__arm_cp.7_0>)
 8028f38:	4615      	mov	r5, r2
 8028f3a:	460e      	mov	r6, r1
 8028f3c:	4601      	mov	r1, r0
 8028f3e:	2220      	movs	r2, #32
 8028f40:	461c      	mov	r4, r3
 8028f42:	4640      	mov	r0, r8
 8028f44:	47b8      	blx	r7
 8028f46:	f108 0020 	add.w	r0, r8, #32
 8028f4a:	4631      	mov	r1, r6
 8028f4c:	2220      	movs	r2, #32
 8028f4e:	47b8      	blx	r7
 8028f50:	f88d 4067 	strb.w	r4, [sp, #103]	@ 0x67
 8028f54:	f10d 0417 	add.w	r4, sp, #23
 8028f58:	4629      	mov	r1, r5
 8028f5a:	2210      	movs	r2, #16
 8028f5c:	4620      	mov	r0, r4
 8028f5e:	47b8      	blx	r7
 8028f60:	f10d 0507 	add.w	r5, sp, #7
 8028f64:	4620      	mov	r0, r4
 8028f66:	4641      	mov	r1, r8
 8028f68:	2241      	movs	r2, #65	@ 0x41
 8028f6a:	462b      	mov	r3, r5
 8028f6c:	f000 f80a 	bl	8028f84 <SMA_Cmac>
 8028f70:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8028f72:	4629      	mov	r1, r5
 8028f74:	2210      	movs	r2, #16
 8028f76:	47b8      	blx	r7
 8028f78:	b01a      	add	sp, #104	@ 0x68
 8028f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028f7e:	bf00      	nop

08028f80 <__arm_cp.7_0>:
 8028f80:	0802b7e7 	.word	0x0802b7e7

08028f84 <SMA_Cmac>:
 8028f84:	b570      	push	{r4, r5, r6, lr}
 8028f86:	461c      	mov	r4, r3
 8028f88:	4615      	mov	r5, r2
 8028f8a:	460e      	mov	r6, r1
 8028f8c:	f7d9 f9d2 	bl	8002334 <BLEPLAT_AesCmacSetKey>
 8028f90:	4630      	mov	r0, r6
 8028f92:	4629      	mov	r1, r5
 8028f94:	4622      	mov	r2, r4
 8028f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028f9a:	f7d9 b9cd 	b.w	8002338 <BLEPLAT_AesCmacCompute>
	...

08028fa0 <SMA_SC_Gen_f5_Keys>:
 8028fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fa4:	b0a3      	sub	sp, #140	@ 0x8c
 8028fa6:	f10d 0b54 	add.w	fp, sp, #84	@ 0x54
 8028faa:	460d      	mov	r5, r1
 8028fac:	4606      	mov	r6, r0
 8028fae:	2135      	movs	r1, #53	@ 0x35
 8028fb0:	4699      	mov	r9, r3
 8028fb2:	4692      	mov	sl, r2
 8028fb4:	4658      	mov	r0, fp
 8028fb6:	f002 fcd3 	bl	802b960 <__aeabi_memclr>
 8028fba:	2001      	movs	r0, #1
 8028fbc:	4c26      	ldr	r4, [pc, #152]	@ (8029058 <__arm_cp.9_0>)
 8028fbe:	4631      	mov	r1, r6
 8028fc0:	2220      	movs	r2, #32
 8028fc2:	f88d 0087 	strb.w	r0, [sp, #135]	@ 0x87
 8028fc6:	2065      	movs	r0, #101	@ 0x65
 8028fc8:	f88d 0058 	strb.w	r0, [sp, #88]	@ 0x58
 8028fcc:	f646 4074 	movw	r0, #27764	@ 0x6c74
 8028fd0:	f8ad 0056 	strh.w	r0, [sp, #86]	@ 0x56
 8028fd4:	2062      	movs	r0, #98	@ 0x62
 8028fd6:	f88d 0055 	strb.w	r0, [sp, #85]	@ 0x55
 8028fda:	af09      	add	r7, sp, #36	@ 0x24
 8028fdc:	4638      	mov	r0, r7
 8028fde:	47a0      	blx	r4
 8028fe0:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 8028fe4:	481d      	ldr	r0, [pc, #116]	@ (802905c <__arm_cp.9_1>)
 8028fe6:	4e1e      	ldr	r6, [pc, #120]	@ (8029060 <__arm_cp.9_2>)
 8028fe8:	4639      	mov	r1, r7
 8028fea:	2220      	movs	r2, #32
 8028fec:	4643      	mov	r3, r8
 8028fee:	47b0      	blx	r6
 8028ff0:	f10b 0005 	add.w	r0, fp, #5
 8028ff4:	4629      	mov	r1, r5
 8028ff6:	2210      	movs	r2, #16
 8028ff8:	47a0      	blx	r4
 8028ffa:	f10b 0015 	add.w	r0, fp, #21
 8028ffe:	4651      	mov	r1, sl
 8029000:	2210      	movs	r2, #16
 8029002:	47a0      	blx	r4
 8029004:	f10b 0026 	add.w	r0, fp, #38	@ 0x26
 8029008:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802900a:	2206      	movs	r2, #6
 802900c:	f88d 9079 	strb.w	r9, [sp, #121]	@ 0x79
 8029010:	47a0      	blx	r4
 8029012:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8029014:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 8029016:	2206      	movs	r2, #6
 8029018:	f88d 0080 	strb.w	r0, [sp, #128]	@ 0x80
 802901c:	f10b 002d 	add.w	r0, fp, #45	@ 0x2d
 8029020:	47a0      	blx	r4
 8029022:	ad05      	add	r5, sp, #20
 8029024:	4640      	mov	r0, r8
 8029026:	4659      	mov	r1, fp
 8029028:	2235      	movs	r2, #53	@ 0x35
 802902a:	462b      	mov	r3, r5
 802902c:	47b0      	blx	r6
 802902e:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8029030:	4629      	mov	r1, r5
 8029032:	2210      	movs	r2, #16
 8029034:	47a0      	blx	r4
 8029036:	2001      	movs	r0, #1
 8029038:	4659      	mov	r1, fp
 802903a:	2235      	movs	r2, #53	@ 0x35
 802903c:	f88d 0054 	strb.w	r0, [sp, #84]	@ 0x54
 8029040:	ad01      	add	r5, sp, #4
 8029042:	4640      	mov	r0, r8
 8029044:	462b      	mov	r3, r5
 8029046:	47b0      	blx	r6
 8029048:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 802904a:	4629      	mov	r1, r5
 802904c:	2210      	movs	r2, #16
 802904e:	47a0      	blx	r4
 8029050:	b023      	add	sp, #140	@ 0x8c
 8029052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029056:	bf00      	nop

08029058 <__arm_cp.9_0>:
 8029058:	0802b7e7 	.word	0x0802b7e7

0802905c <__arm_cp.9_1>:
 802905c:	0802e7dc 	.word	0x0802e7dc

08029060 <__arm_cp.9_2>:
 8029060:	08028f85 	.word	0x08028f85

08029064 <SMA_SC_Gen_f6_Check_Val>:
 8029064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029068:	b09a      	sub	sp, #104	@ 0x68
 802906a:	f10d 0427 	add.w	r4, sp, #39	@ 0x27
 802906e:	4d1d      	ldr	r5, [pc, #116]	@ (80290e4 <__arm_cp.10_0>)
 8029070:	4617      	mov	r7, r2
 8029072:	4680      	mov	r8, r0
 8029074:	2210      	movs	r2, #16
 8029076:	461e      	mov	r6, r3
 8029078:	4620      	mov	r0, r4
 802907a:	47a8      	blx	r5
 802907c:	f104 0010 	add.w	r0, r4, #16
 8029080:	4639      	mov	r1, r7
 8029082:	2210      	movs	r2, #16
 8029084:	47a8      	blx	r5
 8029086:	f104 0020 	add.w	r0, r4, #32
 802908a:	4631      	mov	r1, r6
 802908c:	2210      	movs	r2, #16
 802908e:	47a8      	blx	r5
 8029090:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8029094:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8029096:	2203      	movs	r2, #3
 8029098:	47a8      	blx	r5
 802909a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 802909c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 802909e:	2206      	movs	r2, #6
 80290a0:	f88d 005a 	strb.w	r0, [sp, #90]	@ 0x5a
 80290a4:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80290a8:	47a8      	blx	r5
 80290aa:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80290ac:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80290ae:	2206      	movs	r2, #6
 80290b0:	f88d 0061 	strb.w	r0, [sp, #97]	@ 0x61
 80290b4:	f104 003b 	add.w	r0, r4, #59	@ 0x3b
 80290b8:	47a8      	blx	r5
 80290ba:	f10d 0607 	add.w	r6, sp, #7
 80290be:	4641      	mov	r1, r8
 80290c0:	2210      	movs	r2, #16
 80290c2:	4630      	mov	r0, r6
 80290c4:	47a8      	blx	r5
 80290c6:	f10d 0717 	add.w	r7, sp, #23
 80290ca:	4630      	mov	r0, r6
 80290cc:	4621      	mov	r1, r4
 80290ce:	2241      	movs	r2, #65	@ 0x41
 80290d0:	463b      	mov	r3, r7
 80290d2:	f7ff ff57 	bl	8028f84 <SMA_Cmac>
 80290d6:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80290d8:	4639      	mov	r1, r7
 80290da:	2210      	movs	r2, #16
 80290dc:	47a8      	blx	r5
 80290de:	b01a      	add	sp, #104	@ 0x68
 80290e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080290e4 <__arm_cp.10_0>:
 80290e4:	0802b7e7 	.word	0x0802b7e7

080290e8 <SMA_SC_Gen_g2_NumComp_Val>:
 80290e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80290ec:	b09c      	sub	sp, #112	@ 0x70
 80290ee:	f10d 0820 	add.w	r8, sp, #32
 80290f2:	4c13      	ldr	r4, [pc, #76]	@ (8029140 <__arm_cp.11_0>)
 80290f4:	4615      	mov	r5, r2
 80290f6:	460f      	mov	r7, r1
 80290f8:	4601      	mov	r1, r0
 80290fa:	2220      	movs	r2, #32
 80290fc:	461e      	mov	r6, r3
 80290fe:	4640      	mov	r0, r8
 8029100:	47a0      	blx	r4
 8029102:	f108 0020 	add.w	r0, r8, #32
 8029106:	4639      	mov	r1, r7
 8029108:	2220      	movs	r2, #32
 802910a:	47a0      	blx	r4
 802910c:	f108 0040 	add.w	r0, r8, #64	@ 0x40
 8029110:	4631      	mov	r1, r6
 8029112:	2210      	movs	r2, #16
 8029114:	47a0      	blx	r4
 8029116:	ae04      	add	r6, sp, #16
 8029118:	4629      	mov	r1, r5
 802911a:	2210      	movs	r2, #16
 802911c:	4630      	mov	r0, r6
 802911e:	47a0      	blx	r4
 8029120:	466d      	mov	r5, sp
 8029122:	4630      	mov	r0, r6
 8029124:	4641      	mov	r1, r8
 8029126:	2250      	movs	r2, #80	@ 0x50
 8029128:	462b      	mov	r3, r5
 802912a:	f7ff ff2b 	bl	8028f84 <SMA_Cmac>
 802912e:	f105 010c 	add.w	r1, r5, #12
 8029132:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8029134:	2204      	movs	r2, #4
 8029136:	47a0      	blx	r4
 8029138:	b01c      	add	sp, #112	@ 0x70
 802913a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802913e:	bf00      	nop

08029140 <__arm_cp.11_0>:
 8029140:	0802b7e7 	.word	0x0802b7e7

08029144 <SMA_CMAC_Generate_Tag>:
 8029144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029148:	b091      	sub	sp, #68	@ 0x44
 802914a:	4681      	mov	r9, r0
 802914c:	2000      	movs	r0, #0
 802914e:	4615      	mov	r5, r2
 8029150:	468a      	mov	sl, r1
 8029152:	469b      	mov	fp, r3
 8029154:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 8029158:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 802915c:	ae0d      	add	r6, sp, #52	@ 0x34
 802915e:	af09      	add	r7, sp, #36	@ 0x24
 8029160:	f000 f8a3 	bl	80292aa <OUTLINED_FUNCTION_1>
 8029164:	f99d 8033 	ldrsb.w	r8, [sp, #51]	@ 0x33
 8029168:	ac05      	add	r4, sp, #20
 802916a:	4638      	mov	r0, r7
 802916c:	4621      	mov	r1, r4
 802916e:	f000 f882 	bl	8029276 <SMA_left_shift>
 8029172:	f1b8 3fff 	cmp.w	r8, #4294967295
 8029176:	dd66      	ble.n	8029246 <SMA_CMAC_Generate_Tag+0x102>
 8029178:	f99d 8023 	ldrsb.w	r8, [sp, #35]	@ 0x23
 802917c:	a805      	add	r0, sp, #20
 802917e:	ac01      	add	r4, sp, #4
 8029180:	4621      	mov	r1, r4
 8029182:	f000 f878 	bl	8029276 <SMA_left_shift>
 8029186:	f1b8 3fff 	cmp.w	r8, #4294967295
 802918a:	dd68      	ble.n	802925e <SMA_CMAC_Generate_Tag+0x11a>
 802918c:	4630      	mov	r0, r6
 802918e:	2100      	movs	r1, #0
 8029190:	2210      	movs	r2, #16
 8029192:	f04f 0800 	mov.w	r8, #0
 8029196:	f7f7 fba5 	bl	80208e4 <ble_memset>
 802919a:	b2ec      	uxtb	r4, r5
 802919c:	2c11      	cmp	r4, #17
 802919e:	d319      	bcc.n	80291d4 <SMA_CMAC_Generate_Tag+0x90>
 80291a0:	f048 0004 	orr.w	r0, r8, #4
 80291a4:	2210      	movs	r2, #16
 80291a6:	463b      	mov	r3, r7
 80291a8:	f000 f87b 	bl	80292a2 <OUTLINED_FUNCTION_0>
 80291ac:	2000      	movs	r0, #0
 80291ae:	2810      	cmp	r0, #16
 80291b0:	d005      	beq.n	80291be <SMA_CMAC_Generate_Tag+0x7a>
 80291b2:	5c39      	ldrb	r1, [r7, r0]
 80291b4:	5c32      	ldrb	r2, [r6, r0]
 80291b6:	4051      	eors	r1, r2
 80291b8:	5431      	strb	r1, [r6, r0]
 80291ba:	3001      	adds	r0, #1
 80291bc:	e7f7      	b.n	80291ae <SMA_CMAC_Generate_Tag+0x6a>
 80291be:	f000 f874 	bl	80292aa <OUTLINED_FUNCTION_1>
 80291c2:	4630      	mov	r0, r6
 80291c4:	4639      	mov	r1, r7
 80291c6:	2210      	movs	r2, #16
 80291c8:	f7f7 fb3c 	bl	8020844 <ble_memcpy>
 80291cc:	3d10      	subs	r5, #16
 80291ce:	f108 0810 	add.w	r8, r8, #16
 80291d2:	e7e2      	b.n	802919a <SMA_CMAC_Generate_Tag+0x56>
 80291d4:	2c10      	cmp	r4, #16
 80291d6:	d107      	bne.n	80291e8 <SMA_CMAC_Generate_Tag+0xa4>
 80291d8:	f048 0004 	orr.w	r0, r8, #4
 80291dc:	ab09      	add	r3, sp, #36	@ 0x24
 80291de:	2210      	movs	r2, #16
 80291e0:	f000 f85f 	bl	80292a2 <OUTLINED_FUNCTION_0>
 80291e4:	a805      	add	r0, sp, #20
 80291e6:	e01a      	b.n	802921e <SMA_CMAC_Generate_Tag+0xda>
 80291e8:	f8cd b000 	str.w	fp, [sp]
 80291ec:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 80291f0:	2100      	movs	r1, #0
 80291f2:	2210      	movs	r2, #16
 80291f4:	4658      	mov	r0, fp
 80291f6:	f7f7 fb75 	bl	80208e4 <ble_memset>
 80291fa:	0628      	lsls	r0, r5, #24
 80291fc:	d008      	beq.n	8029210 <SMA_CMAC_Generate_Tag+0xcc>
 80291fe:	ebab 0004 	sub.w	r0, fp, r4
 8029202:	4622      	mov	r2, r4
 8029204:	f100 0310 	add.w	r3, r0, #16
 8029208:	f048 0004 	orr.w	r0, r8, #4
 802920c:	f000 f849 	bl	80292a2 <OUTLINED_FUNCTION_0>
 8029210:	ebab 0004 	sub.w	r0, fp, r4
 8029214:	2180      	movs	r1, #128	@ 0x80
 8029216:	73c1      	strb	r1, [r0, #15]
 8029218:	a801      	add	r0, sp, #4
 802921a:	f8dd b000 	ldr.w	fp, [sp]
 802921e:	2100      	movs	r1, #0
 8029220:	2910      	cmp	r1, #16
 8029222:	d007      	beq.n	8029234 <SMA_CMAC_Generate_Tag+0xf0>
 8029224:	5c7a      	ldrb	r2, [r7, r1]
 8029226:	5c43      	ldrb	r3, [r0, r1]
 8029228:	405a      	eors	r2, r3
 802922a:	5c73      	ldrb	r3, [r6, r1]
 802922c:	405a      	eors	r2, r3
 802922e:	5472      	strb	r2, [r6, r1]
 8029230:	3101      	adds	r1, #1
 8029232:	e7f5      	b.n	8029220 <SMA_CMAC_Generate_Tag+0xdc>
 8029234:	a90d      	add	r1, sp, #52	@ 0x34
 8029236:	4648      	mov	r0, r9
 8029238:	465a      	mov	r2, fp
 802923a:	f7d9 f877 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 802923e:	2000      	movs	r0, #0
 8029240:	b011      	add	sp, #68	@ 0x44
 8029242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029246:	2087      	movs	r0, #135	@ 0x87
 8029248:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 802924c:	2000      	movs	r0, #0
 802924e:	280f      	cmp	r0, #15
 8029250:	d092      	beq.n	8029178 <SMA_CMAC_Generate_Tag+0x34>
 8029252:	5c21      	ldrb	r1, [r4, r0]
 8029254:	5c32      	ldrb	r2, [r6, r0]
 8029256:	4051      	eors	r1, r2
 8029258:	5421      	strb	r1, [r4, r0]
 802925a:	3001      	adds	r0, #1
 802925c:	e7f7      	b.n	802924e <SMA_CMAC_Generate_Tag+0x10a>
 802925e:	2087      	movs	r0, #135	@ 0x87
 8029260:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 8029264:	2000      	movs	r0, #0
 8029266:	280f      	cmp	r0, #15
 8029268:	d090      	beq.n	802918c <SMA_CMAC_Generate_Tag+0x48>
 802926a:	5c21      	ldrb	r1, [r4, r0]
 802926c:	5c32      	ldrb	r2, [r6, r0]
 802926e:	4051      	eors	r1, r2
 8029270:	5421      	strb	r1, [r4, r0]
 8029272:	3001      	adds	r0, #1
 8029274:	e7f7      	b.n	8029266 <SMA_CMAC_Generate_Tag+0x122>

08029276 <SMA_left_shift>:
 8029276:	b510      	push	{r4, lr}
 8029278:	7802      	ldrb	r2, [r0, #0]
 802927a:	0052      	lsls	r2, r2, #1
 802927c:	f801 2b01 	strb.w	r2, [r1], #1
 8029280:	2200      	movs	r2, #0
 8029282:	2a0f      	cmp	r2, #15
 8029284:	bf08      	it	eq
 8029286:	bd10      	popeq	{r4, pc}
 8029288:	1883      	adds	r3, r0, r2
 802928a:	785b      	ldrb	r3, [r3, #1]
 802928c:	005b      	lsls	r3, r3, #1
 802928e:	548b      	strb	r3, [r1, r2]
 8029290:	5684      	ldrsb	r4, [r0, r2]
 8029292:	f1b4 3fff 	cmp.w	r4, #4294967295
 8029296:	bfdc      	itt	le
 8029298:	f043 0301 	orrle.w	r3, r3, #1
 802929c:	548b      	strble	r3, [r1, r2]
 802929e:	3201      	adds	r2, #1
 80292a0:	e7ef      	b.n	8029282 <SMA_left_shift+0xc>

080292a2 <OUTLINED_FUNCTION_0>:
 80292a2:	b281      	uxth	r1, r0
 80292a4:	4650      	mov	r0, sl
 80292a6:	f7ff babe 	b.w	8028826 <ACL_Get_Data>

080292aa <OUTLINED_FUNCTION_1>:
 80292aa:	4648      	mov	r0, r9
 80292ac:	4631      	mov	r1, r6
 80292ae:	463a      	mov	r2, r7
 80292b0:	f7d9 b83c 	b.w	800232c <BLEPLAT_AesEcbEncrypt>

080292b4 <SMP_MemAlloc>:
 80292b4:	b580      	push	{r7, lr}
 80292b6:	4904      	ldr	r1, [pc, #16]	@ (80292c8 <__arm_cp.0_0>)
 80292b8:	2280      	movs	r2, #128	@ 0x80
 80292ba:	7d89      	ldrb	r1, [r1, #22]
 80292bc:	f002 faa9 	bl	802b812 <Mem_Assign>
 80292c0:	4902      	ldr	r1, [pc, #8]	@ (80292cc <__arm_cp.0_1>)
 80292c2:	f8c1 00b8 	str.w	r0, [r1, #184]	@ 0xb8
 80292c6:	bd80      	pop	{r7, pc}

080292c8 <__arm_cp.0_0>:
 80292c8:	20009fec 	.word	0x20009fec

080292cc <__arm_cp.0_1>:
 80292cc:	2000a014 	.word	0x2000a014

080292d0 <SMP_Init>:
 80292d0:	4806      	ldr	r0, [pc, #24]	@ (80292ec <__arm_cp.1_0>)
 80292d2:	2100      	movs	r1, #0
 80292d4:	f880 1090 	strb.w	r1, [r0, #144]	@ 0x90
 80292d8:	2101      	movs	r1, #1
 80292da:	f880 1095 	strb.w	r1, [r0, #149]	@ 0x95
 80292de:	f880 1092 	strb.w	r1, [r0, #146]	@ 0x92
 80292e2:	4903      	ldr	r1, [pc, #12]	@ (80292f0 <__arm_cp.1_1>)
 80292e4:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
 80292e8:	4770      	bx	lr
 80292ea:	bf00      	nop

080292ec <__arm_cp.1_0>:
 80292ec:	2000a014 	.word	0x2000a014

080292f0 <__arm_cp.1_1>:
 80292f0:	10070101 	.word	0x10070101

080292f4 <SMP_Get_Identity_Address_Type>:
 80292f4:	4801      	ldr	r0, [pc, #4]	@ (80292fc <__arm_cp.2_0>)
 80292f6:	f890 0091 	ldrb.w	r0, [r0, #145]	@ 0x91
 80292fa:	4770      	bx	lr

080292fc <__arm_cp.2_0>:
 80292fc:	2000a014 	.word	0x2000a014

08029300 <SMP_Connection_Complete_Handler>:
 8029300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029304:	4e27      	ldr	r6, [pc, #156]	@ (80293a4 <__arm_cp.3_0>)
 8029306:	4605      	mov	r5, r0
 8029308:	f896 0094 	ldrb.w	r0, [r6, #148]	@ 0x94
 802930c:	07c0      	lsls	r0, r0, #31
 802930e:	d147      	bne.n	80293a0 <SMP_Connection_Complete_Handler+0xa0>
 8029310:	4825      	ldr	r0, [pc, #148]	@ (80293a8 <__arm_cp.3_1>)
 8029312:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8029316:	f8d6 70b8 	ldr.w	r7, [r6, #184]	@ 0xb8
 802931a:	469b      	mov	fp, r3
 802931c:	4690      	mov	r8, r2
 802931e:	468a      	mov	sl, r1
 8029320:	2400      	movs	r4, #0
 8029322:	7d80      	ldrb	r0, [r0, #22]
 8029324:	01c0      	lsls	r0, r0, #7
 8029326:	42a0      	cmp	r0, r4
 8029328:	d03a      	beq.n	80293a0 <SMP_Connection_Complete_Handler+0xa0>
 802932a:	5b39      	ldrh	r1, [r7, r4]
 802932c:	b109      	cbz	r1, 8029332 <SMP_Connection_Complete_Handler+0x32>
 802932e:	3480      	adds	r4, #128	@ 0x80
 8029330:	e7f9      	b.n	8029326 <SMP_Connection_Complete_Handler+0x26>
 8029332:	f1b9 0f00 	cmp.w	r9, #0
 8029336:	d004      	beq.n	8029342 <SMP_Connection_Complete_Handler+0x42>
 8029338:	4648      	mov	r0, r9
 802933a:	2106      	movs	r1, #6
 802933c:	f002 fa45 	bl	802b7ca <Is_Empty>
 8029340:	b130      	cbz	r0, 8029350 <SMP_Connection_Complete_Handler+0x50>
 8029342:	f896 9036 	ldrb.w	r9, [r6, #54]	@ 0x36
 8029346:	f1b9 0f00 	cmp.w	r9, #0
 802934a:	bf18      	it	ne
 802934c:	362e      	addne	r6, #46	@ 0x2e
 802934e:	e002      	b.n	8029356 <SMP_Connection_Complete_Handler+0x56>
 8029350:	464e      	mov	r6, r9
 8029352:	f04f 0901 	mov.w	r9, #1
 8029356:	533d      	strh	r5, [r7, r4]
 8029358:	443c      	add	r4, r7
 802935a:	f04f 30ff 	mov.w	r0, #4294967295
 802935e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8029360:	2000      	movs	r0, #0
 8029362:	f884 a01f 	strb.w	sl, [r4, #31]
 8029366:	f884 0020 	strb.w	r0, [r4, #32]
 802936a:	4658      	mov	r0, fp
 802936c:	f001 fdc0 	bl	802aef0 <SMP_Get_Rep_Attempts_Timeout_Status>
 8029370:	4d0e      	ldr	r5, [pc, #56]	@ (80293ac <__arm_cp.3_2>)
 8029372:	7620      	strb	r0, [r4, #24]
 8029374:	f104 000a 	add.w	r0, r4, #10
 8029378:	4631      	mov	r1, r6
 802937a:	2206      	movs	r2, #6
 802937c:	f884 9009 	strb.w	r9, [r4, #9]
 8029380:	47a8      	blx	r5
 8029382:	1ce0      	adds	r0, r4, #3
 8029384:	4659      	mov	r1, fp
 8029386:	2206      	movs	r2, #6
 8029388:	f884 8002 	strb.w	r8, [r4, #2]
 802938c:	47a8      	blx	r5
 802938e:	f104 0011 	add.w	r0, r4, #17
 8029392:	4659      	mov	r1, fp
 8029394:	2206      	movs	r2, #6
 8029396:	f884 8010 	strb.w	r8, [r4, #16]
 802939a:	47a8      	blx	r5
 802939c:	2010      	movs	r0, #16
 802939e:	75e0      	strb	r0, [r4, #23]
 80293a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293a4 <__arm_cp.3_0>:
 80293a4:	2000a014 	.word	0x2000a014

080293a8 <__arm_cp.3_1>:
 80293a8:	20009fec 	.word	0x20009fec

080293ac <__arm_cp.3_2>:
 80293ac:	08020845 	.word	0x08020845

080293b0 <SMP_Disconnection_Complete_Handler>:
 80293b0:	b580      	push	{r7, lr}
 80293b2:	f000 f987 	bl	80296c4 <OUTLINED_FUNCTION_0>
 80293b6:	d003      	beq.n	80293c0 <SMP_Disconnection_Complete_Handler+0x10>
 80293b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80293bc:	f001 baf2 	b.w	802a9a4 <SMP_Stop_Pairing_At_Disconnect>
 80293c0:	bd80      	pop	{r7, pc}
	...

080293c4 <SMP_Get_Remote_Device>:
 80293c4:	b1a8      	cbz	r0, 80293f2 <SMP_Get_Remote_Device+0x2e>
 80293c6:	490c      	ldr	r1, [pc, #48]	@ (80293f8 <__arm_cp.5_0>)
 80293c8:	f891 2094 	ldrb.w	r2, [r1, #148]	@ 0x94
 80293cc:	07d2      	lsls	r2, r2, #31
 80293ce:	d110      	bne.n	80293f2 <SMP_Get_Remote_Device+0x2e>
 80293d0:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 80293d4:	f1a1 0280 	sub.w	r2, r1, #128	@ 0x80
 80293d8:	4908      	ldr	r1, [pc, #32]	@ (80293fc <__arm_cp.5_1>)
 80293da:	7d89      	ldrb	r1, [r1, #22]
 80293dc:	1c4b      	adds	r3, r1, #1
 80293de:	3b01      	subs	r3, #1
 80293e0:	d007      	beq.n	80293f2 <SMP_Get_Remote_Device+0x2e>
 80293e2:	f102 0180 	add.w	r1, r2, #128	@ 0x80
 80293e6:	f8b2 2080 	ldrh.w	r2, [r2, #128]	@ 0x80
 80293ea:	4282      	cmp	r2, r0
 80293ec:	460a      	mov	r2, r1
 80293ee:	d1f6      	bne.n	80293de <SMP_Get_Remote_Device+0x1a>
 80293f0:	e000      	b.n	80293f4 <SMP_Get_Remote_Device+0x30>
 80293f2:	2100      	movs	r1, #0
 80293f4:	4608      	mov	r0, r1
 80293f6:	4770      	bx	lr

080293f8 <__arm_cp.5_0>:
 80293f8:	2000a014 	.word	0x2000a014

080293fc <__arm_cp.5_1>:
 80293fc:	20009fec 	.word	0x20009fec

08029400 <SMP_L2cap_Data_Handler>:
 8029400:	b510      	push	{r4, lr}
 8029402:	4604      	mov	r4, r0
 8029404:	8900      	ldrh	r0, [r0, #8]
 8029406:	f000 f95d 	bl	80296c4 <OUTLINED_FUNCTION_0>
 802940a:	d01d      	beq.n	8029448 <SMP_L2cap_Data_Handler+0x48>
 802940c:	79a1      	ldrb	r1, [r4, #6]
 802940e:	b141      	cbz	r1, 8029422 <SMP_L2cap_Data_Handler+0x22>
 8029410:	0749      	lsls	r1, r1, #29
 8029412:	d419      	bmi.n	8029448 <SMP_L2cap_Data_Handler+0x48>
 8029414:	6a21      	ldr	r1, [r4, #32]
 8029416:	7909      	ldrb	r1, [r1, #4]
 8029418:	290b      	cmp	r1, #11
 802941a:	d10c      	bne.n	8029436 <SMP_L2cap_Data_Handler+0x36>
 802941c:	f001 f94e 	bl	802a6bc <SMP_SR_Security_Req_TX_Complete_Handler>
 8029420:	e00b      	b.n	802943a <SMP_L2cap_Data_Handler+0x3a>
 8029422:	88a0      	ldrh	r0, [r4, #4]
 8029424:	3804      	subs	r0, #4
 8029426:	2841      	cmp	r0, #65	@ 0x41
 8029428:	d80e      	bhi.n	8029448 <SMP_L2cap_Data_Handler+0x48>
 802942a:	480a      	ldr	r0, [pc, #40]	@ (8029454 <__arm_cp.6_0>)
 802942c:	4621      	mov	r1, r4
 802942e:	3080      	adds	r0, #128	@ 0x80
 8029430:	f7ff fac4 	bl	80289bc <ACL_List_Insert_Tail>
 8029434:	e00b      	b.n	802944e <SMP_L2cap_Data_Handler+0x4e>
 8029436:	f001 fa17 	bl	802a868 <SMP_Key_Dist_Tx_Complete_Handler>
 802943a:	4806      	ldr	r0, [pc, #24]	@ (8029454 <__arm_cp.6_0>)
 802943c:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8029440:	f001 01fb 	and.w	r1, r1, #251	@ 0xfb
 8029444:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8029448:	4620      	mov	r0, r4
 802944a:	f7ff f97f 	bl	802874c <ACL_Release>
 802944e:	2000      	movs	r0, #0
 8029450:	bd10      	pop	{r4, pc}
 8029452:	bf00      	nop

08029454 <__arm_cp.6_0>:
 8029454:	2000a014 	.word	0x2000a014

08029458 <SMP_Process>:
 8029458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802945a:	4e1b      	ldr	r6, [pc, #108]	@ (80294c8 <__arm_cp.7_0>)
 802945c:	4c1b      	ldr	r4, [pc, #108]	@ (80294cc <__arm_cp.7_1>)
 802945e:	2500      	movs	r5, #0
 8029460:	2700      	movs	r7, #0
 8029462:	f896 0039 	ldrb.w	r0, [r6, #57]	@ 0x39
 8029466:	f040 0004 	orr.w	r0, r0, #4
 802946a:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 802946e:	7da0      	ldrb	r0, [r4, #22]
 8029470:	4287      	cmp	r7, r0
 8029472:	d20a      	bcs.n	802948a <SMP_Process+0x32>
 8029474:	f8d6 10b8 	ldr.w	r1, [r6, #184]	@ 0xb8
 8029478:	5b4a      	ldrh	r2, [r1, r5]
 802947a:	b11a      	cbz	r2, 8029484 <SMP_Process+0x2c>
 802947c:	1948      	adds	r0, r1, r5
 802947e:	f000 f99b 	bl	80297b8 <SMP_Pairing_Process>
 8029482:	7da0      	ldrb	r0, [r4, #22]
 8029484:	3580      	adds	r5, #128	@ 0x80
 8029486:	3701      	adds	r7, #1
 8029488:	e7f2      	b.n	8029470 <SMP_Process+0x18>
 802948a:	f001 fdb1 	bl	802aff0 <SMP_SC_Public_Key_Generation_Process>
 802948e:	f106 0480 	add.w	r4, r6, #128	@ 0x80
 8029492:	f8d6 5080 	ldr.w	r5, [r6, #128]	@ 0x80
 8029496:	b185      	cbz	r5, 80294ba <SMP_Process+0x62>
 8029498:	4620      	mov	r0, r4
 802949a:	4629      	mov	r1, r5
 802949c:	f7ff fa9e 	bl	80289dc <ACL_List_Remove>
 80294a0:	8928      	ldrh	r0, [r5, #8]
 80294a2:	f000 f90f 	bl	80296c4 <OUTLINED_FUNCTION_0>
 80294a6:	d004      	beq.n	80294b2 <SMP_Process+0x5a>
 80294a8:	4601      	mov	r1, r0
 80294aa:	4628      	mov	r0, r5
 80294ac:	f000 fcd4 	bl	8029e58 <SMP_Process_Rx_Packet>
 80294b0:	b920      	cbnz	r0, 80294bc <SMP_Process+0x64>
 80294b2:	4628      	mov	r0, r5
 80294b4:	f7ff f94a 	bl	802874c <ACL_Release>
 80294b8:	e7eb      	b.n	8029492 <SMP_Process+0x3a>
 80294ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80294bc:	4620      	mov	r0, r4
 80294be:	4629      	mov	r1, r5
 80294c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80294c4:	f7ff ba84 	b.w	80289d0 <ACL_List_Insert_Head>

080294c8 <__arm_cp.7_0>:
 80294c8:	2000a014 	.word	0x2000a014

080294cc <__arm_cp.7_1>:
 80294cc:	20009fec 	.word	0x20009fec

080294d0 <SMP_Flush_Rx_Packets>:
 80294d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80294d2:	4604      	mov	r4, r0
 80294d4:	4809      	ldr	r0, [pc, #36]	@ (80294fc <__arm_cp.8_0>)
 80294d6:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
 80294da:	f100 0580 	add.w	r5, r0, #128	@ 0x80
 80294de:	b167      	cbz	r7, 80294fa <SMP_Flush_Rx_Packets+0x2a>
 80294e0:	463e      	mov	r6, r7
 80294e2:	683f      	ldr	r7, [r7, #0]
 80294e4:	8930      	ldrh	r0, [r6, #8]
 80294e6:	42a0      	cmp	r0, r4
 80294e8:	d1f9      	bne.n	80294de <SMP_Flush_Rx_Packets+0xe>
 80294ea:	4628      	mov	r0, r5
 80294ec:	4631      	mov	r1, r6
 80294ee:	f7ff fa75 	bl	80289dc <ACL_List_Remove>
 80294f2:	4630      	mov	r0, r6
 80294f4:	f7ff f92a 	bl	802874c <ACL_Release>
 80294f8:	e7f1      	b.n	80294de <SMP_Flush_Rx_Packets+0xe>
 80294fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080294fc <__arm_cp.8_0>:
 80294fc:	2000a014 	.word	0x2000a014

08029500 <SMP_Save_GATT_Data>:
 8029500:	b570      	push	{r4, r5, r6, lr}
 8029502:	4614      	mov	r4, r2
 8029504:	460d      	mov	r5, r1
 8029506:	f000 f8dd 	bl	80296c4 <OUTLINED_FUNCTION_0>
 802950a:	d003      	beq.n	8029514 <SMP_Save_GATT_Data+0x14>
 802950c:	4606      	mov	r6, r0
 802950e:	f000 f80c 	bl	802952a <SMP_Is_Bonded>
 8029512:	b108      	cbz	r0, 8029518 <SMP_Save_GATT_Data+0x18>
 8029514:	205e      	movs	r0, #94	@ 0x5e
 8029516:	bd70      	pop	{r4, r5, r6, pc}
 8029518:	f106 0011 	add.w	r0, r6, #17
 802951c:	7c31      	ldrb	r1, [r6, #16]
 802951e:	462a      	mov	r2, r5
 8029520:	4623      	mov	r3, r4
 8029522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029526:	f7ff bb62 	b.w	8028bee <SDB_Write_Gatt_Data>

0802952a <SMP_Is_Bonded>:
 802952a:	b510      	push	{r4, lr}
 802952c:	b094      	sub	sp, #80	@ 0x50
 802952e:	4604      	mov	r4, r0
 8029530:	7c01      	ldrb	r1, [r0, #16]
 8029532:	3011      	adds	r0, #17
 8029534:	466a      	mov	r2, sp
 8029536:	f7ff fa74 	bl	8028a22 <SDB_Read_Sec_Record>
 802953a:	b148      	cbz	r0, 8029550 <SMP_Is_Bonded+0x26>
 802953c:	7de0      	ldrb	r0, [r4, #23]
 802953e:	28f1      	cmp	r0, #241	@ 0xf1
 8029540:	d104      	bne.n	802954c <SMP_Is_Bonded+0x22>
 8029542:	7f20      	ldrb	r0, [r4, #28]
 8029544:	07c1      	lsls	r1, r0, #31
 8029546:	d001      	beq.n	802954c <SMP_Is_Bonded+0x22>
 8029548:	0780      	lsls	r0, r0, #30
 802954a:	d401      	bmi.n	8029550 <SMP_Is_Bonded+0x26>
 802954c:	205e      	movs	r0, #94	@ 0x5e
 802954e:	e000      	b.n	8029552 <SMP_Is_Bonded+0x28>
 8029550:	2000      	movs	r0, #0
 8029552:	b014      	add	sp, #80	@ 0x50
 8029554:	bd10      	pop	{r4, pc}

08029556 <SMP_Retrieve_GATT_Data>:
 8029556:	b570      	push	{r4, r5, r6, lr}
 8029558:	4614      	mov	r4, r2
 802955a:	460d      	mov	r5, r1
 802955c:	f000 f8b2 	bl	80296c4 <OUTLINED_FUNCTION_0>
 8029560:	d003      	beq.n	802956a <SMP_Retrieve_GATT_Data+0x14>
 8029562:	4606      	mov	r6, r0
 8029564:	f7ff ffe1 	bl	802952a <SMP_Is_Bonded>
 8029568:	b108      	cbz	r0, 802956e <SMP_Retrieve_GATT_Data+0x18>
 802956a:	205e      	movs	r0, #94	@ 0x5e
 802956c:	bd70      	pop	{r4, r5, r6, pc}
 802956e:	f106 0011 	add.w	r0, r6, #17
 8029572:	7c31      	ldrb	r1, [r6, #16]
 8029574:	462a      	mov	r2, r5
 8029576:	4623      	mov	r3, r4
 8029578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802957c:	f7ff bbbb 	b.w	8028cf6 <SDB_Read_Gatt_Data>

08029580 <SMP_Get_Sec_Status>:
 8029580:	b510      	push	{r4, lr}
 8029582:	460c      	mov	r4, r1
 8029584:	f000 f89e 	bl	80296c4 <OUTLINED_FUNCTION_0>
 8029588:	d006      	beq.n	8029598 <SMP_Get_Sec_Status+0x18>
 802958a:	7e01      	ldrb	r1, [r0, #24]
 802958c:	7f80      	ldrb	r0, [r0, #30]
 802958e:	42a0      	cmp	r0, r4
 8029590:	bf38      	it	cc
 8029592:	f041 0108 	orrcc.w	r1, r1, #8
 8029596:	e000      	b.n	802959a <SMP_Get_Sec_Status+0x1a>
 8029598:	2100      	movs	r1, #0
 802959a:	b2c8      	uxtb	r0, r1
 802959c:	bd10      	pop	{r4, pc}

0802959e <SMP_Forget_Device>:
 802959e:	b580      	push	{r7, lr}
 80295a0:	f000 f890 	bl	80296c4 <OUTLINED_FUNCTION_0>
 80295a4:	d005      	beq.n	80295b2 <SMP_Forget_Device+0x14>
 80295a6:	f890 1020 	ldrb.w	r1, [r0, #32]
 80295aa:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80295ae:	f880 1020 	strb.w	r1, [r0, #32]
 80295b2:	bd80      	pop	{r7, pc}

080295b4 <ACI_GAP_SET_IO_CAPABILITY>:
 80295b4:	2804      	cmp	r0, #4
 80295b6:	bf8f      	iteee	hi
 80295b8:	2092      	movhi	r0, #146	@ 0x92
 80295ba:	4902      	ldrls	r1, [pc, #8]	@ (80295c4 <__arm_cp.15_0>)
 80295bc:	f881 0095 	strbls.w	r0, [r1, #149]	@ 0x95
 80295c0:	2000      	movls	r0, #0
 80295c2:	4770      	bx	lr

080295c4 <__arm_cp.15_0>:
 80295c4:	2000a014 	.word	0x2000a014

080295c8 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT>:
 80295c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80295cc:	2801      	cmp	r0, #1
 80295ce:	bf9c      	itt	ls
 80295d0:	460d      	movls	r5, r1
 80295d2:	2901      	cmpls	r1, #1
 80295d4:	d902      	bls.n	80295dc <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0x14>
 80295d6:	2092      	movs	r0, #146	@ 0x92
 80295d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80295e0:	f1b8 0f07 	cmp.w	r8, #7
 80295e4:	d3f7      	bcc.n	80295d6 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0xe>
 80295e6:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80295ea:	f1b9 0f10 	cmp.w	r9, #16
 80295ee:	d8f2      	bhi.n	80295d6 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0xe>
 80295f0:	45c1      	cmp	r9, r8
 80295f2:	d3f0      	bcc.n	80295d6 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0xe>
 80295f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80295f8:	f1ba 0f01 	cmp.w	sl, #1
 80295fc:	d8eb      	bhi.n	80295d6 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0xe>
 80295fe:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8029602:	4604      	mov	r4, r0
 8029604:	4814      	ldr	r0, [pc, #80]	@ (8029658 <__arm_cp.16_0>)
 8029606:	4583      	cmp	fp, r0
 8029608:	bf9c      	itt	ls
 802960a:	980e      	ldrls	r0, [sp, #56]	@ 0x38
 802960c:	2801      	cmpls	r0, #1
 802960e:	d8e2      	bhi.n	80295d6 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0xe>
 8029610:	2a02      	cmp	r2, #2
 8029612:	4616      	mov	r6, r2
 8029614:	bf9c      	itt	ls
 8029616:	461f      	movls	r7, r3
 8029618:	2b01      	cmpls	r3, #1
 802961a:	d8dc      	bhi.n	80295d6 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0xe>
 802961c:	f000 ff10 	bl	802a440 <SMP_Ongoing_Pairing>
 8029620:	b110      	cbz	r0, 8029628 <ACI_GAP_SET_AUTHENTICATION_REQUIREMENT+0x60>
 8029622:	200c      	movs	r0, #12
 8029624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029628:	480c      	ldr	r0, [pc, #48]	@ (802965c <__arm_cp.16_1>)
 802962a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802962c:	f880 7093 	strb.w	r7, [r0, #147]	@ 0x93
 8029630:	f880 6092 	strb.w	r6, [r0, #146]	@ 0x92
 8029634:	f880 5089 	strb.w	r5, [r0, #137]	@ 0x89
 8029638:	f880 4088 	strb.w	r4, [r0, #136]	@ 0x88
 802963c:	f880 a090 	strb.w	sl, [r0, #144]	@ 0x90
 8029640:	f880 908b 	strb.w	r9, [r0, #139]	@ 0x8b
 8029644:	f880 808a 	strb.w	r8, [r0, #138]	@ 0x8a
 8029648:	f880 1091 	strb.w	r1, [r0, #145]	@ 0x91
 802964c:	f8c0 b08c 	str.w	fp, [r0, #140]	@ 0x8c
 8029650:	2000      	movs	r0, #0
 8029652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029656:	bf00      	nop

08029658 <__arm_cp.16_0>:
 8029658:	000f423f 	.word	0x000f423f

0802965c <__arm_cp.16_1>:
 802965c:	2000a014 	.word	0x2000a014

08029660 <ACI_GAP_ALLOW_REBOND>:
 8029660:	b580      	push	{r7, lr}
 8029662:	f000 f82f 	bl	80296c4 <OUTLINED_FUNCTION_0>
 8029666:	d00c      	beq.n	8029682 <ACI_GAP_ALLOW_REBOND+0x22>
 8029668:	f890 1020 	ldrb.w	r1, [r0, #32]
 802966c:	f001 020c 	and.w	r2, r1, #12
 8029670:	2a08      	cmp	r2, #8
 8029672:	bf11      	iteee	ne
 8029674:	200c      	movne	r0, #12
 8029676:	f041 010c 	orreq.w	r1, r1, #12
 802967a:	f880 1020 	strbeq.w	r1, [r0, #32]
 802967e:	2000      	moveq	r0, #0
 8029680:	bd80      	pop	{r7, pc}
 8029682:	2002      	movs	r0, #2
 8029684:	bd80      	pop	{r7, pc}
	...

08029688 <ACI_GAP_PASS_KEY_RESP>:
 8029688:	b510      	push	{r4, lr}
 802968a:	460c      	mov	r4, r1
 802968c:	f7ff fe9a 	bl	80293c4 <SMP_Get_Remote_Device>
 8029690:	490a      	ldr	r1, [pc, #40]	@ (80296bc <__arm_cp.20_0>)
 8029692:	428c      	cmp	r4, r1
 8029694:	bf84      	itt	hi
 8029696:	2092      	movhi	r0, #146	@ 0x92
 8029698:	bd10      	pophi	{r4, pc}
 802969a:	b168      	cbz	r0, 80296b8 <ACI_GAP_PASS_KEY_RESP+0x30>
 802969c:	7e41      	ldrb	r1, [r0, #25]
 802969e:	2902      	cmp	r1, #2
 80296a0:	bf1c      	itt	ne
 80296a2:	200c      	movne	r0, #12
 80296a4:	bd10      	popne	{r4, pc}
 80296a6:	4906      	ldr	r1, [pc, #24]	@ (80296c0 <__arm_cp.20_1>)
 80296a8:	f8c1 408c 	str.w	r4, [r1, #140]	@ 0x8c
 80296ac:	7f41      	ldrb	r1, [r0, #29]
 80296ae:	f041 0110 	orr.w	r1, r1, #16
 80296b2:	7741      	strb	r1, [r0, #29]
 80296b4:	2000      	movs	r0, #0
 80296b6:	bd10      	pop	{r4, pc}
 80296b8:	2002      	movs	r0, #2
 80296ba:	bd10      	pop	{r4, pc}

080296bc <__arm_cp.20_0>:
 80296bc:	000f423f 	.word	0x000f423f

080296c0 <__arm_cp.20_1>:
 80296c0:	2000a014 	.word	0x2000a014

080296c4 <OUTLINED_FUNCTION_0>:
 80296c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80296c8:	f7ff fe7c 	bl	80293c4 <SMP_Get_Remote_Device>
 80296cc:	2800      	cmp	r0, #0
 80296ce:	f85d eb08 	ldr.w	lr, [sp], #8
 80296d2:	4770      	bx	lr

080296d4 <SMP_Check_Remote_OOB_Data_Presence>:
 80296d4:	b510      	push	{r4, lr}
 80296d6:	4604      	mov	r4, r0
 80296d8:	7881      	ldrb	r1, [r0, #2]
 80296da:	4808      	ldr	r0, [pc, #32]	@ (80296fc <__arm_cp.0_0>)
 80296dc:	f890 20d5 	ldrb.w	r2, [r0, #213]	@ 0xd5
 80296e0:	428a      	cmp	r2, r1
 80296e2:	d105      	bne.n	80296f0 <SMP_Check_Remote_OOB_Data_Presence+0x1c>
 80296e4:	30d6      	adds	r0, #214	@ 0xd6
 80296e6:	1ce1      	adds	r1, r4, #3
 80296e8:	2206      	movs	r2, #6
 80296ea:	f7f7 f933 	bl	8020954 <ble_memcmp>
 80296ee:	b100      	cbz	r0, 80296f2 <SMP_Check_Remote_OOB_Data_Presence+0x1e>
 80296f0:	bd10      	pop	{r4, pc}
 80296f2:	7ea0      	ldrb	r0, [r4, #26]
 80296f4:	f040 0001 	orr.w	r0, r0, #1
 80296f8:	76a0      	strb	r0, [r4, #26]
 80296fa:	bd10      	pop	{r4, pc}

080296fc <__arm_cp.0_0>:
 80296fc:	2000a014 	.word	0x2000a014

08029700 <SMP_Clear_Remote_OOB_Data>:
 8029700:	4802      	ldr	r0, [pc, #8]	@ (802970c <__arm_cp.1_0>)
 8029702:	2100      	movs	r1, #0
 8029704:	2228      	movs	r2, #40	@ 0x28
 8029706:	30d4      	adds	r0, #212	@ 0xd4
 8029708:	f7f7 b8ec 	b.w	80208e4 <ble_memset>

0802970c <__arm_cp.1_0>:
 802970c:	2000a014 	.word	0x2000a014

08029710 <SMP_Init_OOB_SC>:
 8029710:	b580      	push	{r7, lr}
 8029712:	4805      	ldr	r0, [pc, #20]	@ (8029728 <__arm_cp.4_0>)
 8029714:	2110      	movs	r1, #16
 8029716:	3098      	adds	r0, #152	@ 0x98
 8029718:	f002 f857 	bl	802b7ca <Is_Empty>
 802971c:	b118      	cbz	r0, 8029726 <SMP_Init_OOB_SC+0x16>
 802971e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8029722:	f000 b803 	b.w	802972c <SMP_Generate_Local_OOB_SC_Random>
 8029726:	bd80      	pop	{r7, pc}

08029728 <__arm_cp.4_0>:
 8029728:	2000a014 	.word	0x2000a014

0802972c <SMP_Generate_Local_OOB_SC_Random>:
 802972c:	4802      	ldr	r0, [pc, #8]	@ (8029738 <__arm_cp.5_0>)
 802972e:	f100 0198 	add.w	r1, r0, #152	@ 0x98
 8029732:	2004      	movs	r0, #4
 8029734:	f7d8 bdf8 	b.w	8002328 <BLEPLAT_RngGet>

08029738 <__arm_cp.5_0>:
 8029738:	2000a014 	.word	0x2000a014

0802973c <SMP_OOB_SC_Authentication_Stage_1>:
 802973c:	b570      	push	{r4, r5, r6, lr}
 802973e:	b086      	sub	sp, #24
 8029740:	4604      	mov	r4, r0
 8029742:	7e80      	ldrb	r0, [r0, #26]
 8029744:	07c0      	lsls	r0, r0, #31
 8029746:	d101      	bne.n	802974c <SMP_OOB_SC_Authentication_Stage_1+0x10>
 8029748:	2400      	movs	r4, #0
 802974a:	e01d      	b.n	8029788 <SMP_OOB_SC_Authentication_Stage_1+0x4c>
 802974c:	4e10      	ldr	r6, [pc, #64]	@ (8029790 <__arm_cp.6_0>)
 802974e:	ad02      	add	r5, sp, #8
 8029750:	2300      	movs	r3, #0
 8029752:	9500      	str	r5, [sp, #0]
 8029754:	f506 70ae 	add.w	r0, r6, #348	@ 0x15c
 8029758:	f106 02dc 	add.w	r2, r6, #220	@ 0xdc
 802975c:	4601      	mov	r1, r0
 802975e:	f7ff fbe5 	bl	8028f2c <SMA_SC_Gen_f4_Confirm>
 8029762:	f106 00ec 	add.w	r0, r6, #236	@ 0xec
 8029766:	4629      	mov	r1, r5
 8029768:	2210      	movs	r2, #16
 802976a:	f7f7 f8f3 	bl	8020954 <ble_memcmp>
 802976e:	b108      	cbz	r0, 8029774 <SMP_OOB_SC_Authentication_Stage_1+0x38>
 8029770:	2404      	movs	r4, #4
 8029772:	e009      	b.n	8029788 <SMP_OOB_SC_Authentication_Stage_1+0x4c>
 8029774:	7ea0      	ldrb	r0, [r4, #26]
 8029776:	0780      	lsls	r0, r0, #30
 8029778:	d4e6      	bmi.n	8029748 <SMP_OOB_SC_Authentication_Stage_1+0xc>
 802977a:	f106 0098 	add.w	r0, r6, #152	@ 0x98
 802977e:	2100      	movs	r1, #0
 8029780:	2210      	movs	r2, #16
 8029782:	2400      	movs	r4, #0
 8029784:	f7f7 f8ae 	bl	80208e4 <ble_memset>
 8029788:	4620      	mov	r0, r4
 802978a:	b006      	add	sp, #24
 802978c:	bd70      	pop	{r4, r5, r6, pc}
 802978e:	bf00      	nop

08029790 <__arm_cp.6_0>:
 8029790:	2000a014 	.word	0x2000a014

08029794 <SMP_Get_OOB_SC_Random>:
 8029794:	4b07      	ldr	r3, [pc, #28]	@ (80297b4 <__arm_cp.7_0>)
 8029796:	b131      	cbz	r1, 80297a6 <SMP_Get_OOB_SC_Random+0x12>
 8029798:	7e80      	ldrb	r0, [r0, #26]
 802979a:	07c0      	lsls	r0, r0, #31
 802979c:	bf08      	it	eq
 802979e:	4770      	bxeq	lr
 80297a0:	f103 01dc 	add.w	r1, r3, #220	@ 0xdc
 80297a4:	e001      	b.n	80297aa <SMP_Get_OOB_SC_Random+0x16>
 80297a6:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 80297aa:	4610      	mov	r0, r2
 80297ac:	2210      	movs	r2, #16
 80297ae:	f7f7 b849 	b.w	8020844 <ble_memcpy>
 80297b2:	bf00      	nop

080297b4 <__arm_cp.7_0>:
 80297b4:	2000a014 	.word	0x2000a014

080297b8 <SMP_Pairing_Process>:
 80297b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80297ba:	b099      	sub	sp, #100	@ 0x64
 80297bc:	4604      	mov	r4, r0
 80297be:	f890 0020 	ldrb.w	r0, [r0, #32]
 80297c2:	06c0      	lsls	r0, r0, #27
 80297c4:	d55b      	bpl.n	802987e <SMP_Pairing_Process+0xc6>
 80297c6:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 80297ca:	a801      	add	r0, sp, #4
 80297cc:	2210      	movs	r2, #16
 80297ce:	4629      	mov	r1, r5
 80297d0:	f7f7 f838 	bl	8020844 <ble_memcpy>
 80297d4:	7de0      	ldrb	r0, [r4, #23]
 80297d6:	28bc      	cmp	r0, #188	@ 0xbc
 80297d8:	d032      	beq.n	8029840 <SMP_Pairing_Process+0x88>
 80297da:	28f1      	cmp	r0, #241	@ 0xf1
 80297dc:	d111      	bne.n	8029802 <SMP_Pairing_Process+0x4a>
 80297de:	7fe0      	ldrb	r0, [r4, #31]
 80297e0:	0700      	lsls	r0, r0, #28
 80297e2:	d42d      	bmi.n	8029840 <SMP_Pairing_Process+0x88>
 80297e4:	f104 0644 	add.w	r6, r4, #68	@ 0x44
 80297e8:	af05      	add	r7, sp, #20
 80297ea:	4629      	mov	r1, r5
 80297ec:	4630      	mov	r0, r6
 80297ee:	463a      	mov	r2, r7
 80297f0:	f7ff faae 	bl	8028d50 <SMA_Compute_EDIV>
 80297f4:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 80297f8:	4638      	mov	r0, r7
 80297fa:	2202      	movs	r2, #2
 80297fc:	f7f7 f8aa 	bl	8020954 <ble_memcmp>
 8029800:	b1d0      	cbz	r0, 8029838 <SMP_Pairing_Process+0x80>
 8029802:	7e20      	ldrb	r0, [r4, #24]
 8029804:	f894 1020 	ldrb.w	r1, [r4, #32]
 8029808:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 802980c:	7620      	strb	r0, [r4, #24]
 802980e:	0788      	lsls	r0, r1, #30
 8029810:	d00e      	beq.n	8029830 <SMP_Pairing_Process+0x78>
 8029812:	4620      	mov	r0, r4
 8029814:	f001 f812 	bl	802a83c <SMP_Stop_Timer>
 8029818:	f894 0020 	ldrb.w	r0, [r4, #32]
 802981c:	8821      	ldrh	r1, [r4, #0]
 802981e:	2203      	movs	r2, #3
 8029820:	2306      	movs	r3, #6
 8029822:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8029826:	f884 0020 	strb.w	r0, [r4, #32]
 802982a:	2001      	movs	r0, #1
 802982c:	f7fa f828 	bl	8023880 <EVT_aci_gap_pairing_complete>
 8029830:	8820      	ldrh	r0, [r4, #0]
 8029832:	f7fa fb41 	bl	8023eb8 <HCI_LE_LONG_TERM_KEY_REQUEST_NEGATIVE_REPLY>
 8029836:	e011      	b.n	802985c <SMP_Pairing_Process+0xa4>
 8029838:	4630      	mov	r0, r6
 802983a:	4629      	mov	r1, r5
 802983c:	f7ff fb44 	bl	8028ec8 <SMA_Generate_LTK>
 8029840:	ae05      	add	r6, sp, #20
 8029842:	4629      	mov	r1, r5
 8029844:	2210      	movs	r2, #16
 8029846:	4630      	mov	r0, r6
 8029848:	f7f6 fffc 	bl	8020844 <ble_memcpy>
 802984c:	4620      	mov	r0, r4
 802984e:	4631      	mov	r1, r6
 8029850:	f000 ff91 	bl	802a776 <SMP_Crop_Key>
 8029854:	8820      	ldrh	r0, [r4, #0]
 8029856:	4631      	mov	r1, r6
 8029858:	f7fa fb36 	bl	8023ec8 <HCI_LE_LONG_TERM_KEY_REQUEST_REPLY>
 802985c:	283a      	cmp	r0, #58	@ 0x3a
 802985e:	d108      	bne.n	8029872 <SMP_Pairing_Process+0xba>
 8029860:	a901      	add	r1, sp, #4
 8029862:	4628      	mov	r0, r5
 8029864:	f001 fa8b 	bl	802ad7e <OUTLINED_FUNCTION_5>
 8029868:	f8df 0378 	ldr.w	r0, [pc, #888]	@ 8029be4 <__arm_cp.0_0>
 802986c:	f001 fa77 	bl	802ad5e <OUTLINED_FUNCTION_2>
 8029870:	e005      	b.n	802987e <SMP_Pairing_Process+0xc6>
 8029872:	f894 0020 	ldrb.w	r0, [r4, #32]
 8029876:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 802987a:	f884 0020 	strb.w	r0, [r4, #32]
 802987e:	7de0      	ldrb	r0, [r4, #23]
 8029880:	f1a0 01d1 	sub.w	r1, r0, #209	@ 0xd1
 8029884:	2905      	cmp	r1, #5
 8029886:	d335      	bcc.n	80298f4 <SMP_Pairing_Process+0x13c>
 8029888:	2800      	cmp	r0, #0
 802988a:	f000 8111 	beq.w	8029ab0 <SMP_Pairing_Process+0x2f8>
 802988e:	28fe      	cmp	r0, #254	@ 0xfe
 8029890:	d067      	beq.n	8029962 <SMP_Pairing_Process+0x1aa>
 8029892:	2880      	cmp	r0, #128	@ 0x80
 8029894:	d071      	beq.n	802997a <SMP_Pairing_Process+0x1c2>
 8029896:	28ac      	cmp	r0, #172	@ 0xac
 8029898:	f000 8080 	beq.w	802999c <SMP_Pairing_Process+0x1e4>
 802989c:	28cf      	cmp	r0, #207	@ 0xcf
 802989e:	f000 8082 	beq.w	80299a6 <SMP_Pairing_Process+0x1ee>
 80298a2:	28e0      	cmp	r0, #224	@ 0xe0
 80298a4:	f000 8083 	beq.w	80299ae <SMP_Pairing_Process+0x1f6>
 80298a8:	28f1      	cmp	r0, #241	@ 0xf1
 80298aa:	f000 8101 	beq.w	8029ab0 <SMP_Pairing_Process+0x2f8>
 80298ae:	2810      	cmp	r0, #16
 80298b0:	f040 80c9 	bne.w	8029a46 <SMP_Pairing_Process+0x28e>
 80298b4:	78a1      	ldrb	r1, [r4, #2]
 80298b6:	ae05      	add	r6, sp, #20
 80298b8:	1ce0      	adds	r0, r4, #3
 80298ba:	4632      	mov	r2, r6
 80298bc:	f7ff f8b1 	bl	8028a22 <SDB_Read_Sec_Record>
 80298c0:	2800      	cmp	r0, #0
 80298c2:	f000 80f7 	beq.w	8029ab4 <SMP_Pairing_Process+0x2fc>
 80298c6:	48c7      	ldr	r0, [pc, #796]	@ (8029be4 <__arm_cp.0_0>)
 80298c8:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80298cc:	b180      	cbz	r0, 80298f0 <SMP_Pairing_Process+0x138>
 80298ce:	7fe0      	ldrb	r0, [r4, #31]
 80298d0:	07c0      	lsls	r0, r0, #31
 80298d2:	d00d      	beq.n	80298f0 <SMP_Pairing_Process+0x138>
 80298d4:	f7ff f8d8 	bl	8028a88 <SDB_Get_Number_Of_Sec_Records>
 80298d8:	b150      	cbz	r0, 80298f0 <SMP_Pairing_Process+0x138>
 80298da:	78a0      	ldrb	r0, [r4, #2]
 80298dc:	b140      	cbz	r0, 80298f0 <SMP_Pairing_Process+0x138>
 80298de:	7a20      	ldrb	r0, [r4, #8]
 80298e0:	f000 00c0 	and.w	r0, r0, #192	@ 0xc0
 80298e4:	2840      	cmp	r0, #64	@ 0x40
 80298e6:	d103      	bne.n	80298f0 <SMP_Pairing_Process+0x138>
 80298e8:	8821      	ldrh	r1, [r4, #0]
 80298ea:	2001      	movs	r0, #1
 80298ec:	f7f9 ffa8 	bl	8023840 <EVT_aci_gap_addr_not_resolved>
 80298f0:	2000      	movs	r0, #0
 80298f2:	e0a6      	b.n	8029a42 <SMP_Pairing_Process+0x28a>
 80298f4:	2000      	movs	r0, #0
 80298f6:	2111      	movs	r1, #17
 80298f8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80298fc:	4620      	mov	r0, r4
 80298fe:	f001 fa41 	bl	802ad84 <OUTLINED_FUNCTION_6>
 8029902:	f000 809f 	beq.w	8029a44 <SMP_Pairing_Process+0x28c>
 8029906:	4605      	mov	r5, r0
 8029908:	f894 0020 	ldrb.w	r0, [r4, #32]
 802990c:	0640      	lsls	r0, r0, #25
 802990e:	d409      	bmi.n	8029924 <SMP_Pairing_Process+0x16c>
 8029910:	f001 ff88 	bl	802b824 <Rand32>
 8029914:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44
 8029918:	f894 0020 	ldrb.w	r0, [r4, #32]
 802991c:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8029920:	f884 0020 	strb.w	r0, [r4, #32]
 8029924:	7de0      	ldrb	r0, [r4, #23]
 8029926:	38d1      	subs	r0, #209	@ 0xd1
 8029928:	2804      	cmp	r0, #4
 802992a:	f200 8085 	bhi.w	8029a38 <SMP_Pairing_Process+0x280>
 802992e:	e8df f000 	tbb	[pc, r0]
 8029932:	4203      	.short	0x4203
 8029934:	0072615a 	.word	0x0072615a
 8029938:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 802993c:	2002      	movs	r0, #2
 802993e:	f7d8 fcf3 	bl	8002328 <BLEPLAT_RngGet>
 8029942:	ae05      	add	r6, sp, #20
 8029944:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8029948:	4631      	mov	r1, r6
 802994a:	f7ff fabd 	bl	8028ec8 <SMA_Generate_LTK>
 802994e:	4620      	mov	r0, r4
 8029950:	4631      	mov	r1, r6
 8029952:	f000 ff10 	bl	802a776 <SMP_Crop_Key>
 8029956:	6a28      	ldr	r0, [r5, #32]
 8029958:	2106      	movs	r1, #6
 802995a:	7101      	strb	r1, [r0, #4]
 802995c:	2015      	movs	r0, #21
 802995e:	80a8      	strh	r0, [r5, #4]
 8029960:	e064      	b.n	8029a2c <SMP_Pairing_Process+0x274>
 8029962:	f994 0020 	ldrsb.w	r0, [r4, #32]
 8029966:	f1b0 3fff 	cmp.w	r0, #4294967295
 802996a:	f300 809b 	bgt.w	8029aa4 <SMP_Pairing_Process+0x2ec>
 802996e:	4620      	mov	r0, r4
 8029970:	2100      	movs	r1, #0
 8029972:	2280      	movs	r2, #128	@ 0x80
 8029974:	f7f6 ffb6 	bl	80208e4 <ble_memset>
 8029978:	e064      	b.n	8029a44 <SMP_Pairing_Process+0x28c>
 802997a:	7fe0      	ldrb	r0, [r4, #31]
 802997c:	0700      	lsls	r0, r0, #28
 802997e:	d504      	bpl.n	802998a <SMP_Pairing_Process+0x1d2>
 8029980:	4620      	mov	r0, r4
 8029982:	f001 fb67 	bl	802b054 <SMP_SC_Public_Key_Exchanged>
 8029986:	2800      	cmp	r0, #0
 8029988:	d05c      	beq.n	8029a44 <SMP_Pairing_Process+0x28c>
 802998a:	7e60      	ldrb	r0, [r4, #25]
 802998c:	2802      	cmp	r0, #2
 802998e:	d102      	bne.n	8029996 <SMP_Pairing_Process+0x1de>
 8029990:	7f60      	ldrb	r0, [r4, #29]
 8029992:	06c0      	lsls	r0, r0, #27
 8029994:	d556      	bpl.n	8029a44 <SMP_Pairing_Process+0x28c>
 8029996:	2081      	movs	r0, #129	@ 0x81
 8029998:	75e0      	strb	r0, [r4, #23]
 802999a:	e056      	b.n	8029a4a <SMP_Pairing_Process+0x292>
 802999c:	4620      	mov	r0, r4
 802999e:	2100      	movs	r1, #0
 80299a0:	f000 f924 	bl	8029bec <SMP_MI_Enable_Encryption>
 80299a4:	e04e      	b.n	8029a44 <SMP_Pairing_Process+0x28c>
 80299a6:	4620      	mov	r0, r4
 80299a8:	f000 f964 	bl	8029c74 <SMP_Key_Dist_Start>
 80299ac:	e04a      	b.n	8029a44 <SMP_Pairing_Process+0x28c>
 80299ae:	4620      	mov	r0, r4
 80299b0:	f000 f992 	bl	8029cd8 <SMP_Pairing_Success>
 80299b4:	e046      	b.n	8029a44 <SMP_Pairing_Process+0x28c>
 80299b6:	200f      	movs	r0, #15
 80299b8:	2107      	movs	r1, #7
 80299ba:	f104 062c 	add.w	r6, r4, #44	@ 0x2c
 80299be:	80a8      	strh	r0, [r5, #4]
 80299c0:	6a28      	ldr	r0, [r5, #32]
 80299c2:	7101      	strb	r1, [r0, #4]
 80299c4:	af01      	add	r7, sp, #4
 80299c6:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 80299ca:	4631      	mov	r1, r6
 80299cc:	463a      	mov	r2, r7
 80299ce:	f7ff f9bf 	bl	8028d50 <SMA_Compute_EDIV>
 80299d2:	4628      	mov	r0, r5
 80299d4:	2105      	movs	r1, #5
 80299d6:	2202      	movs	r2, #2
 80299d8:	463b      	mov	r3, r7
 80299da:	f7fe ff44 	bl	8028866 <ACL_Set_Data>
 80299de:	4628      	mov	r0, r5
 80299e0:	2107      	movs	r1, #7
 80299e2:	2208      	movs	r2, #8
 80299e4:	e025      	b.n	8029a32 <SMP_Pairing_Process+0x27a>
 80299e6:	ae05      	add	r6, sp, #20
 80299e8:	4630      	mov	r0, r6
 80299ea:	f7ff fa8d 	bl	8028f08 <SMA_Generate_IRK>
 80299ee:	2015      	movs	r0, #21
 80299f0:	2108      	movs	r1, #8
 80299f2:	e018      	b.n	8029a26 <SMP_Pairing_Process+0x26e>
 80299f4:	200c      	movs	r0, #12
 80299f6:	4b7b      	ldr	r3, [pc, #492]	@ (8029be4 <__arm_cp.0_0>)
 80299f8:	6a29      	ldr	r1, [r5, #32]
 80299fa:	2209      	movs	r2, #9
 80299fc:	80a8      	strh	r0, [r5, #4]
 80299fe:	f893 0036 	ldrb.w	r0, [r3, #54]	@ 0x36
 8029a02:	710a      	strb	r2, [r1, #4]
 8029a04:	6a29      	ldr	r1, [r5, #32]
 8029a06:	2800      	cmp	r0, #0
 8029a08:	7148      	strb	r0, [r1, #5]
 8029a0a:	bf18      	it	ne
 8029a0c:	332e      	addne	r3, #46	@ 0x2e
 8029a0e:	4628      	mov	r0, r5
 8029a10:	2106      	movs	r1, #6
 8029a12:	2206      	movs	r2, #6
 8029a14:	e00e      	b.n	8029a34 <SMP_Pairing_Process+0x27c>
 8029a16:	ae05      	add	r6, sp, #20
 8029a18:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8029a1c:	4631      	mov	r1, r6
 8029a1e:	f7ff fa63 	bl	8028ee8 <SMA_Generate_CSRK>
 8029a22:	2015      	movs	r0, #21
 8029a24:	210a      	movs	r1, #10
 8029a26:	80a8      	strh	r0, [r5, #4]
 8029a28:	6a28      	ldr	r0, [r5, #32]
 8029a2a:	7101      	strb	r1, [r0, #4]
 8029a2c:	4628      	mov	r0, r5
 8029a2e:	2105      	movs	r1, #5
 8029a30:	2210      	movs	r2, #16
 8029a32:	4633      	mov	r3, r6
 8029a34:	f7fe ff17 	bl	8028866 <ACL_Set_Data>
 8029a38:	4628      	mov	r0, r5
 8029a3a:	f001 f997 	bl	802ad6c <OUTLINED_FUNCTION_3>
 8029a3e:	b908      	cbnz	r0, 8029a44 <SMP_Pairing_Process+0x28c>
 8029a40:	20dd      	movs	r0, #221	@ 0xdd
 8029a42:	75e0      	strb	r0, [r4, #23]
 8029a44:	7de0      	ldrb	r0, [r4, #23]
 8029a46:	2881      	cmp	r0, #129	@ 0x81
 8029a48:	d12c      	bne.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029a4a:	7fe0      	ldrb	r0, [r4, #31]
 8029a4c:	07c0      	lsls	r0, r0, #31
 8029a4e:	d10b      	bne.n	8029a68 <SMP_Pairing_Process+0x2b0>
 8029a50:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8029a54:	2004      	movs	r0, #4
 8029a56:	f7d8 fc67 	bl	8002328 <BLEPLAT_RngGet>
 8029a5a:	7fe0      	ldrb	r0, [r4, #31]
 8029a5c:	0700      	lsls	r0, r0, #28
 8029a5e:	d417      	bmi.n	8029a90 <SMP_Pairing_Process+0x2d8>
 8029a60:	4620      	mov	r0, r4
 8029a62:	f001 f871 	bl	802ab48 <SMP_MI_Send_Pairing_Confirm>
 8029a66:	e01d      	b.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029a68:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8029a6c:	2004      	movs	r0, #4
 8029a6e:	f7d8 fc5b 	bl	8002328 <BLEPLAT_RngGet>
 8029a72:	7fe0      	ldrb	r0, [r4, #31]
 8029a74:	0700      	lsls	r0, r0, #28
 8029a76:	d513      	bpl.n	8029aa0 <SMP_Pairing_Process+0x2e8>
 8029a78:	7e60      	ldrb	r0, [r4, #25]
 8029a7a:	3801      	subs	r0, #1
 8029a7c:	2803      	cmp	r0, #3
 8029a7e:	d811      	bhi.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029a80:	e8df f000 	tbb	[pc, r0]
 8029a84:	02948b02 	.word	0x02948b02
 8029a88:	4620      	mov	r0, r4
 8029a8a:	f001 f939 	bl	802ad00 <SMP_SR_Send_Pairing_Confirm>
 8029a8e:	e009      	b.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029a90:	7e60      	ldrb	r0, [r4, #25]
 8029a92:	3801      	subs	r0, #1
 8029a94:	2803      	cmp	r0, #3
 8029a96:	d805      	bhi.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029a98:	e8df f000 	tbb	[pc, r0]
 8029a9c:	02958e02 	.word	0x02958e02
 8029aa0:	2082      	movs	r0, #130	@ 0x82
 8029aa2:	75e0      	strb	r0, [r4, #23]
 8029aa4:	7fe0      	ldrb	r0, [r4, #31]
 8029aa6:	0700      	lsls	r0, r0, #28
 8029aa8:	bf44      	itt	mi
 8029aaa:	4620      	movmi	r0, r4
 8029aac:	f001 fd00 	blmi	802b4b0 <SMP_SC_Phase_2_Process>
 8029ab0:	b019      	add	sp, #100	@ 0x64
 8029ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029ab4:	2001      	movs	r0, #1
 8029ab6:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8029aba:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
 8029abe:	7720      	strb	r0, [r4, #28]
 8029ac0:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8029ac4:	77a1      	strb	r1, [r4, #30]
 8029ac6:	b241      	sxtb	r1, r0
 8029ac8:	2900      	cmp	r1, #0
 8029aca:	f000 0160 	and.w	r1, r0, #96	@ 0x60
 8029ace:	bf48      	it	mi
 8029ad0:	f042 0210 	orrmi.w	r2, r2, #16
 8029ad4:	4311      	orrs	r1, r2
 8029ad6:	06c0      	lsls	r0, r0, #27
 8029ad8:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 8029adc:	d505      	bpl.n	8029aea <SMP_Pairing_Process+0x332>
 8029ade:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8029ae2:	f040 0001 	orr.w	r0, r0, #1
 8029ae6:	f884 0023 	strb.w	r0, [r4, #35]	@ 0x23
 8029aea:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 8029aee:	f106 050e 	add.w	r5, r6, #14
 8029af2:	4f3d      	ldr	r7, [pc, #244]	@ (8029be8 <__arm_cp.0_1>)
 8029af4:	2210      	movs	r2, #16
 8029af6:	e9c4 0109 	strd	r0, r1, [r4, #36]	@ 0x24
 8029afa:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8029afe:	4629      	mov	r1, r5
 8029b00:	47b8      	blx	r7
 8029b02:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 8029b06:	f106 011e 	add.w	r1, r6, #30
 8029b0a:	2210      	movs	r2, #16
 8029b0c:	47b8      	blx	r7
 8029b0e:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8029b12:	f106 012e 	add.w	r1, r6, #46	@ 0x2e
 8029b16:	2210      	movs	r2, #16
 8029b18:	47b8      	blx	r7
 8029b1a:	f104 0044 	add.w	r0, r4, #68	@ 0x44
 8029b1e:	f106 0144 	add.w	r1, r6, #68	@ 0x44
 8029b22:	2202      	movs	r2, #2
 8029b24:	47b8      	blx	r7
 8029b26:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8029b2a:	1db1      	adds	r1, r6, #6
 8029b2c:	2208      	movs	r2, #8
 8029b2e:	47b8      	blx	r7
 8029b30:	f104 0046 	add.w	r0, r4, #70	@ 0x46
 8029b34:	1d31      	adds	r1, r6, #4
 8029b36:	2202      	movs	r2, #2
 8029b38:	47b8      	blx	r7
 8029b3a:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8029b3e:	0781      	lsls	r1, r0, #30
 8029b40:	bf42      	ittt	mi
 8029b42:	7e21      	ldrbmi	r1, [r4, #24]
 8029b44:	f041 0120 	orrmi.w	r1, r1, #32
 8029b48:	7621      	strbmi	r1, [r4, #24]
 8029b4a:	0741      	lsls	r1, r0, #29
 8029b4c:	bf42      	ittt	mi
 8029b4e:	7e21      	ldrbmi	r1, [r4, #24]
 8029b50:	f041 0140 	orrmi.w	r1, r1, #64	@ 0x40
 8029b54:	7621      	strbmi	r1, [r4, #24]
 8029b56:	0700      	lsls	r0, r0, #28
 8029b58:	bf42      	ittt	mi
 8029b5a:	7e20      	ldrbmi	r0, [r4, #24]
 8029b5c:	f040 0080 	orrmi.w	r0, r0, #128	@ 0x80
 8029b60:	7620      	strbmi	r0, [r4, #24]
 8029b62:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8029b66:	0701      	lsls	r1, r0, #28
 8029b68:	d50a      	bpl.n	8029b80 <SMP_Pairing_Process+0x3c8>
 8029b6a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029b6e:	7fe1      	ldrb	r1, [r4, #31]
 8029b70:	2210      	movs	r2, #16
 8029b72:	4308      	orrs	r0, r1
 8029b74:	4629      	mov	r1, r5
 8029b76:	77e0      	strb	r0, [r4, #31]
 8029b78:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8029b7c:	f7f6 fe62 	bl	8020844 <ble_memcpy>
 8029b80:	20f1      	movs	r0, #241	@ 0xf1
 8029b82:	75e0      	strb	r0, [r4, #23]
 8029b84:	f994 0018 	ldrsb.w	r0, [r4, #24]
 8029b88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029b8c:	f73f af5a 	bgt.w	8029a44 <SMP_Pairing_Process+0x28c>
 8029b90:	8821      	ldrh	r1, [r4, #0]
 8029b92:	2001      	movs	r0, #1
 8029b94:	f7f9 fe82 	bl	802389c <EVT_aci_gap_authorization_req>
 8029b98:	e754      	b.n	8029a44 <SMP_Pairing_Process+0x28c>
 8029b9a:	2082      	movs	r0, #130	@ 0x82
 8029b9c:	75e0      	strb	r0, [r4, #23]
 8029b9e:	4811      	ldr	r0, [pc, #68]	@ (8029be4 <__arm_cp.0_0>)
 8029ba0:	f890 119c 	ldrb.w	r1, [r0, #412]	@ 0x19c
 8029ba4:	3101      	adds	r1, #1
 8029ba6:	f880 119c 	strb.w	r1, [r0, #412]	@ 0x19c
 8029baa:	e77b      	b.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029bac:	4620      	mov	r0, r4
 8029bae:	f7ff fdc5 	bl	802973c <SMP_OOB_SC_Authentication_Stage_1>
 8029bb2:	b960      	cbnz	r0, 8029bce <SMP_Pairing_Process+0x416>
 8029bb4:	2083      	movs	r0, #131	@ 0x83
 8029bb6:	e774      	b.n	8029aa2 <SMP_Pairing_Process+0x2ea>
 8029bb8:	480a      	ldr	r0, [pc, #40]	@ (8029be4 <__arm_cp.0_0>)
 8029bba:	f890 119c 	ldrb.w	r1, [r0, #412]	@ 0x19c
 8029bbe:	3101      	adds	r1, #1
 8029bc0:	f880 119c 	strb.w	r1, [r0, #412]	@ 0x19c
 8029bc4:	e74c      	b.n	8029a60 <SMP_Pairing_Process+0x2a8>
 8029bc6:	4620      	mov	r0, r4
 8029bc8:	f7ff fdb8 	bl	802973c <SMP_OOB_SC_Authentication_Stage_1>
 8029bcc:	b128      	cbz	r0, 8029bda <SMP_Pairing_Process+0x422>
 8029bce:	4601      	mov	r1, r0
 8029bd0:	4620      	mov	r0, r4
 8029bd2:	2201      	movs	r2, #1
 8029bd4:	f000 fe84 	bl	802a8e0 <SMP_Send_Pairing_Failed>
 8029bd8:	e764      	b.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029bda:	4620      	mov	r0, r4
 8029bdc:	f000 ffd5 	bl	802ab8a <SMP_MI_Send_Pairing_Random>
 8029be0:	e760      	b.n	8029aa4 <SMP_Pairing_Process+0x2ec>
 8029be2:	bf00      	nop

08029be4 <__arm_cp.0_0>:
 8029be4:	2000a014 	.word	0x2000a014

08029be8 <__arm_cp.0_1>:
 8029be8:	08020845 	.word	0x08020845

08029bec <SMP_MI_Enable_Encryption>:
 8029bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029bee:	4604      	mov	r4, r0
 8029bf0:	2000      	movs	r0, #0
 8029bf2:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8029bf6:	e9cd 0000 	strd	r0, r0, [sp]
 8029bfa:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8029bfe:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8029c02:	b119      	cbz	r1, 8029c0c <SMP_MI_Enable_Encryption+0x20>
 8029c04:	f040 0001 	orr.w	r0, r0, #1
 8029c08:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 8029c0c:	21ac      	movs	r1, #172	@ 0xac
 8029c0e:	07c0      	lsls	r0, r0, #31
 8029c10:	75e1      	strb	r1, [r4, #23]
 8029c12:	d009      	beq.n	8029c28 <SMP_MI_Enable_Encryption+0x3c>
 8029c14:	7fe0      	ldrb	r0, [r4, #31]
 8029c16:	0700      	lsls	r0, r0, #28
 8029c18:	d406      	bmi.n	8029c28 <SMP_MI_Enable_Encryption+0x3c>
 8029c1a:	4622      	mov	r2, r4
 8029c1c:	f812 0f46 	ldrb.w	r0, [r2, #70]!
 8029c20:	f102 030a 	add.w	r3, r2, #10
 8029c24:	1c91      	adds	r1, r2, #2
 8029c26:	e002      	b.n	8029c2e <SMP_MI_Enable_Encryption+0x42>
 8029c28:	4669      	mov	r1, sp
 8029c2a:	2000      	movs	r0, #0
 8029c2c:	460a      	mov	r2, r1
 8029c2e:	7852      	ldrb	r2, [r2, #1]
 8029c30:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8029c34:	b282      	uxth	r2, r0
 8029c36:	8820      	ldrh	r0, [r4, #0]
 8029c38:	f7fa f94d 	bl	8023ed6 <HCI_LE_ENABLE_ENCRYPTION>
 8029c3c:	283a      	cmp	r0, #58	@ 0x3a
 8029c3e:	d011      	beq.n	8029c64 <SMP_MI_Enable_Encryption+0x78>
 8029c40:	b9a0      	cbnz	r0, 8029c6c <SMP_MI_Enable_Encryption+0x80>
 8029c42:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8029c46:	f010 0101 	ands.w	r1, r0, #1
 8029c4a:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8029c4e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8029c52:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 8029c56:	f06f 000e 	mvn.w	r0, #14
 8029c5a:	bf08      	it	eq
 8029c5c:	f06f 0052 	mvneq.w	r0, #82	@ 0x52
 8029c60:	75e0      	strb	r0, [r4, #23]
 8029c62:	e002      	b.n	8029c6a <SMP_MI_Enable_Encryption+0x7e>
 8029c64:	4802      	ldr	r0, [pc, #8]	@ (8029c70 <__arm_cp.1_0>)
 8029c66:	f001 f87a 	bl	802ad5e <OUTLINED_FUNCTION_2>
 8029c6a:	2000      	movs	r0, #0
 8029c6c:	b004      	add	sp, #16
 8029c6e:	bd10      	pop	{r4, pc}

08029c70 <__arm_cp.1_0>:
 8029c70:	2000a014 	.word	0x2000a014

08029c74 <SMP_Key_Dist_Start>:
 8029c74:	b570      	push	{r4, r5, r6, lr}
 8029c76:	7fc6      	ldrb	r6, [r0, #31]
 8029c78:	4604      	mov	r4, r0
 8029c7a:	f016 0501 	ands.w	r5, r6, #1
 8029c7e:	bf04      	itt	eq
 8029c80:	7de0      	ldrbeq	r0, [r4, #23]
 8029c82:	28cf      	cmpeq	r0, #207	@ 0xcf
 8029c84:	d01e      	beq.n	8029cc4 <SMP_Key_Dist_Start+0x50>
 8029c86:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8029c8a:	0731      	lsls	r1, r6, #28
 8029c8c:	d401      	bmi.n	8029c92 <SMP_Key_Dist_Start+0x1e>
 8029c8e:	07c1      	lsls	r1, r0, #31
 8029c90:	d112      	bne.n	8029cb8 <SMP_Key_Dist_Start+0x44>
 8029c92:	0781      	lsls	r1, r0, #30
 8029c94:	d40e      	bmi.n	8029cb4 <SMP_Key_Dist_Start+0x40>
 8029c96:	f010 0004 	ands.w	r0, r0, #4
 8029c9a:	f06f 001f 	mvn.w	r0, #31
 8029c9e:	bf18      	it	ne
 8029ca0:	f06f 002a 	mvnne.w	r0, #42	@ 0x2a
 8029ca4:	d109      	bne.n	8029cba <SMP_Key_Dist_Start+0x46>
 8029ca6:	b145      	cbz	r5, 8029cba <SMP_Key_Dist_Start+0x46>
 8029ca8:	4620      	mov	r0, r4
 8029caa:	f000 fe0a 	bl	802a8c2 <SMP_Key_Dist_Peer_Keys_To_receive>
 8029cae:	b970      	cbnz	r0, 8029cce <SMP_Key_Dist_Start+0x5a>
 8029cb0:	20e0      	movs	r0, #224	@ 0xe0
 8029cb2:	e002      	b.n	8029cba <SMP_Key_Dist_Start+0x46>
 8029cb4:	20d3      	movs	r0, #211	@ 0xd3
 8029cb6:	e000      	b.n	8029cba <SMP_Key_Dist_Start+0x46>
 8029cb8:	20d1      	movs	r0, #209	@ 0xd1
 8029cba:	75e0      	strb	r0, [r4, #23]
 8029cbc:	4805      	ldr	r0, [pc, #20]	@ (8029cd4 <__arm_cp.2_0>)
 8029cbe:	f001 f84e 	bl	802ad5e <OUTLINED_FUNCTION_2>
 8029cc2:	bd70      	pop	{r4, r5, r6, pc}
 8029cc4:	4620      	mov	r0, r4
 8029cc6:	f000 fdfc 	bl	802a8c2 <SMP_Key_Dist_Peer_Keys_To_receive>
 8029cca:	2800      	cmp	r0, #0
 8029ccc:	d0db      	beq.n	8029c86 <SMP_Key_Dist_Start+0x12>
 8029cce:	20d0      	movs	r0, #208	@ 0xd0
 8029cd0:	75e0      	strb	r0, [r4, #23]
 8029cd2:	bd70      	pop	{r4, r5, r6, pc}

08029cd4 <__arm_cp.2_0>:
 8029cd4:	2000a014 	.word	0x2000a014

08029cd8 <SMP_Pairing_Success>:
 8029cd8:	b5b0      	push	{r4, r5, r7, lr}
 8029cda:	b094      	sub	sp, #80	@ 0x50
 8029cdc:	4604      	mov	r4, r0
 8029cde:	f000 fdad 	bl	802a83c <SMP_Stop_Timer>
 8029ce2:	7f20      	ldrb	r0, [r4, #28]
 8029ce4:	07c1      	lsls	r1, r0, #31
 8029ce6:	f000 8091 	beq.w	8029e0c <SMP_Pairing_Success+0x134>
 8029cea:	0780      	lsls	r0, r0, #30
 8029cec:	f140 808e 	bpl.w	8029e0c <SMP_Pairing_Success+0x134>
 8029cf0:	466d      	mov	r5, sp
 8029cf2:	2100      	movs	r1, #0
 8029cf4:	2250      	movs	r2, #80	@ 0x50
 8029cf6:	4628      	mov	r0, r5
 8029cf8:	f7f6 fdf4 	bl	80208e4 <ble_memset>
 8029cfc:	20fe      	movs	r0, #254	@ 0xfe
 8029cfe:	f104 0111 	add.w	r1, r4, #17
 8029d02:	2206      	movs	r2, #6
 8029d04:	f88d 0000 	strb.w	r0, [sp]
 8029d08:	7fa0      	ldrb	r0, [r4, #30]
 8029d0a:	f88d 0003 	strb.w	r0, [sp, #3]
 8029d0e:	f105 003e 	add.w	r0, r5, #62	@ 0x3e
 8029d12:	f7f6 fd97 	bl	8020844 <ble_memcpy>
 8029d16:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8029d1a:	7c20      	ldrb	r0, [r4, #16]
 8029d1c:	f894 1022 	ldrb.w	r1, [r4, #34]	@ 0x22
 8029d20:	4310      	orrs	r0, r2
 8029d22:	f88d 0001 	strb.w	r0, [sp, #1]
 8029d26:	06c8      	lsls	r0, r1, #27
 8029d28:	d515      	bpl.n	8029d56 <SMP_Pairing_Success+0x7e>
 8029d2a:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
 8029d2e:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8029d32:	2208      	movs	r2, #8
 8029d34:	f8ad 0004 	strh.w	r0, [sp, #4]
 8029d38:	1da8      	adds	r0, r5, #6
 8029d3a:	f7f6 fd83 	bl	8020844 <ble_memcpy>
 8029d3e:	f105 000e 	add.w	r0, r5, #14
 8029d42:	f104 0150 	add.w	r1, r4, #80	@ 0x50
 8029d46:	f001 f81a 	bl	802ad7e <OUTLINED_FUNCTION_5>
 8029d4a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8029d4e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8029d52:	f88d 0001 	strb.w	r0, [sp, #1]
 8029d56:	7fe0      	ldrb	r0, [r4, #31]
 8029d58:	0701      	lsls	r1, r0, #28
 8029d5a:	d507      	bpl.n	8029d6c <SMP_Pairing_Success+0x94>
 8029d5c:	f88d 0002 	strb.w	r0, [sp, #2]
 8029d60:	f105 000e 	add.w	r0, r5, #14
 8029d64:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8029d68:	f001 f809 	bl	802ad7e <OUTLINED_FUNCTION_5>
 8029d6c:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8029d70:	f010 0f05 	tst.w	r0, #5
 8029d74:	d00c      	beq.n	8029d90 <SMP_Pairing_Success+0xb8>
 8029d76:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 8029d7a:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8029d7e:	2202      	movs	r2, #2
 8029d80:	f7f6 fd60 	bl	8020844 <ble_memcpy>
 8029d84:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8029d88:	f040 0010 	orr.w	r0, r0, #16
 8029d8c:	f88d 0001 	strb.w	r0, [sp, #1]
 8029d90:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 8029d94:	0681      	lsls	r1, r0, #26
 8029d96:	d50d      	bpl.n	8029db4 <SMP_Pairing_Success+0xdc>
 8029d98:	f105 001e 	add.w	r0, r5, #30
 8029d9c:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 8029da0:	f000 ffed 	bl	802ad7e <OUTLINED_FUNCTION_5>
 8029da4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8029da8:	f040 0020 	orr.w	r0, r0, #32
 8029dac:	f88d 0001 	strb.w	r0, [sp, #1]
 8029db0:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 8029db4:	0640      	lsls	r0, r0, #25
 8029db6:	d50b      	bpl.n	8029dd0 <SMP_Pairing_Success+0xf8>
 8029db8:	f105 002e 	add.w	r0, r5, #46	@ 0x2e
 8029dbc:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 8029dc0:	f000 ffdd 	bl	802ad7e <OUTLINED_FUNCTION_5>
 8029dc4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8029dc8:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8029dcc:	f88d 0001 	strb.w	r0, [sp, #1]
 8029dd0:	7e21      	ldrb	r1, [r4, #24]
 8029dd2:	b248      	sxtb	r0, r1
 8029dd4:	068a      	lsls	r2, r1, #26
 8029dd6:	d403      	bmi.n	8029de0 <SMP_Pairing_Success+0x108>
 8029dd8:	0649      	lsls	r1, r1, #25
 8029dda:	d507      	bpl.n	8029dec <SMP_Pairing_Success+0x114>
 8029ddc:	2104      	movs	r1, #4
 8029dde:	e000      	b.n	8029de2 <SMP_Pairing_Success+0x10a>
 8029de0:	2102      	movs	r1, #2
 8029de2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8029de6:	4311      	orrs	r1, r2
 8029de8:	f88d 1001 	strb.w	r1, [sp, #1]
 8029dec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029df0:	dc05      	bgt.n	8029dfe <SMP_Pairing_Success+0x126>
 8029df2:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8029df6:	f040 0008 	orr.w	r0, r0, #8
 8029dfa:	f88d 0001 	strb.w	r0, [sp, #1]
 8029dfe:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	@ 0x24
 8029e02:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8029e06:	4668      	mov	r0, sp
 8029e08:	f7fe fe7b 	bl	8028b02 <SDB_Write_Sec_Record>
 8029e0c:	7e60      	ldrb	r0, [r4, #25]
 8029e0e:	2803      	cmp	r0, #3
 8029e10:	bf08      	it	eq
 8029e12:	f7ff fc75 	bleq	8029700 <SMP_Clear_Remote_OOB_Data>
 8029e16:	f894 0020 	ldrb.w	r0, [r4, #32]
 8029e1a:	2100      	movs	r1, #0
 8029e1c:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 8029e20:	f884 0020 	strb.w	r0, [r4, #32]
 8029e24:	4620      	mov	r0, r4
 8029e26:	f000 fd17 	bl	802a858 <SMP_Pairing_End>
 8029e2a:	1ce0      	adds	r0, r4, #3
 8029e2c:	f001 f88e 	bl	802af4c <SMP_Clear_Rep_Attempts_Timeout_Status>
 8029e30:	20f1      	movs	r0, #241	@ 0xf1
 8029e32:	8821      	ldrh	r1, [r4, #0]
 8029e34:	2200      	movs	r2, #0
 8029e36:	2300      	movs	r3, #0
 8029e38:	75e0      	strb	r0, [r4, #23]
 8029e3a:	2001      	movs	r0, #1
 8029e3c:	f7f9 fd20 	bl	8023880 <EVT_aci_gap_pairing_complete>
 8029e40:	f994 0018 	ldrsb.w	r0, [r4, #24]
 8029e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8029e48:	dc03      	bgt.n	8029e52 <SMP_Pairing_Success+0x17a>
 8029e4a:	8821      	ldrh	r1, [r4, #0]
 8029e4c:	2001      	movs	r0, #1
 8029e4e:	f7f9 fd25 	bl	802389c <EVT_aci_gap_authorization_req>
 8029e52:	b014      	add	sp, #80	@ 0x50
 8029e54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08029e58 <SMP_Process_Rx_Packet>:
 8029e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e5c:	b085      	sub	sp, #20
 8029e5e:	460c      	mov	r4, r1
 8029e60:	6a06      	ldr	r6, [r0, #32]
 8029e62:	4605      	mov	r5, r0
 8029e64:	7fe7      	ldrb	r7, [r4, #31]
 8029e66:	7931      	ldrb	r1, [r6, #4]
 8029e68:	07f8      	lsls	r0, r7, #31
 8029e6a:	d155      	bne.n	8029f18 <SMP_Process_Rx_Packet+0xc0>
 8029e6c:	1e88      	subs	r0, r1, #2
 8029e6e:	2809      	cmp	r0, #9
 8029e70:	f200 80c1 	bhi.w	8029ff6 <SMP_Process_Rx_Packet+0x19e>
 8029e74:	e8df f010 	tbh	[pc, r0, lsl #1]
 8029e78:	0115000a 	.word	0x0115000a
 8029e7c:	00bf011c 	.word	0x00bf011c
 8029e80:	00bf00bf 	.word	0x00bf00bf
 8029e84:	00bf00bf 	.word	0x00bf00bf
 8029e88:	012d00bf 	.word	0x012d00bf
 8029e8c:	7de0      	ldrb	r0, [r4, #23]
 8029e8e:	2820      	cmp	r0, #32
 8029e90:	f040 8266 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 8029e94:	4628      	mov	r0, r5
 8029e96:	f000 fdb1 	bl	802a9fc <SMP_Check_Rx_Pairing_Parameters>
 8029e9a:	4601      	mov	r1, r0
 8029e9c:	2800      	cmp	r0, #0
 8029e9e:	f040 8269 	bne.w	802a374 <SMP_Process_Rx_Packet+0x51c>
 8029ea2:	0738      	lsls	r0, r7, #28
 8029ea4:	d511      	bpl.n	8029eca <SMP_Process_Rx_Packet+0x72>
 8029ea6:	f8df 1594 	ldr.w	r1, [pc, #1428]	@ 802a43c <__arm_cp.4_0>
 8029eaa:	79f0      	ldrb	r0, [r6, #7]
 8029eac:	f891 1092 	ldrb.w	r1, [r1, #146]	@ 0x92
 8029eb0:	2902      	cmp	r1, #2
 8029eb2:	bf08      	it	eq
 8029eb4:	f010 0108 	andseq.w	r1, r0, #8
 8029eb8:	f000 816d 	beq.w	802a196 <SMP_Process_Rx_Packet+0x33e>
 8029ebc:	f040 00e7 	orr.w	r0, r0, #231	@ 0xe7
 8029ec0:	4038      	ands	r0, r7
 8029ec2:	77e0      	strb	r0, [r4, #31]
 8029ec4:	0700      	lsls	r0, r0, #28
 8029ec6:	f100 824f 	bmi.w	802a368 <SMP_Process_Rx_Packet+0x510>
 8029eca:	2681      	movs	r6, #129	@ 0x81
 8029ecc:	7f20      	ldrb	r0, [r4, #28]
 8029ece:	7f61      	ldrb	r1, [r4, #29]
 8029ed0:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8029ed4:	7720      	strb	r0, [r4, #28]
 8029ed6:	f001 00fb 	and.w	r0, r1, #251	@ 0xfb
 8029eda:	4621      	mov	r1, r4
 8029edc:	7760      	strb	r0, [r4, #29]
 8029ede:	aa01      	add	r2, sp, #4
 8029ee0:	4628      	mov	r0, r5
 8029ee2:	f000 fda5 	bl	802aa30 <SMP_Get_Rx_Pairing_Parameters>
 8029ee6:	4620      	mov	r0, r4
 8029ee8:	f000 fdd2 	bl	802aa90 <SMP_Set_Key_Generation_Method>
 8029eec:	4601      	mov	r1, r0
 8029eee:	7e60      	ldrb	r0, [r4, #25]
 8029ef0:	2802      	cmp	r0, #2
 8029ef2:	d104      	bne.n	8029efe <SMP_Process_Rx_Packet+0xa6>
 8029ef4:	7f60      	ldrb	r0, [r4, #29]
 8029ef6:	06c0      	lsls	r0, r0, #27
 8029ef8:	bf58      	it	pl
 8029efa:	f06f 067f 	mvnpl.w	r6, #127	@ 0x7f
 8029efe:	2900      	cmp	r1, #0
 8029f00:	f040 8238 	bne.w	802a374 <SMP_Process_Rx_Packet+0x51c>
 8029f04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8029f08:	a901      	add	r1, sp, #4
 8029f0a:	2203      	movs	r2, #3
 8029f0c:	f7f6 fc9a 	bl	8020844 <ble_memcpy>
 8029f10:	f8df 0528 	ldr.w	r0, [pc, #1320]	@ 802a43c <__arm_cp.4_0>
 8029f14:	75e6      	strb	r6, [r4, #23]
 8029f16:	e12b      	b.n	802a170 <SMP_Process_Rx_Packet+0x318>
 8029f18:	2904      	cmp	r1, #4
 8029f1a:	d075      	beq.n	802a008 <SMP_Process_Rx_Packet+0x1b0>
 8029f1c:	2903      	cmp	r1, #3
 8029f1e:	f000 8090 	beq.w	802a042 <SMP_Process_Rx_Packet+0x1ea>
 8029f22:	2901      	cmp	r1, #1
 8029f24:	d167      	bne.n	8029ff6 <SMP_Process_Rx_Packet+0x19e>
 8029f26:	7de0      	ldrb	r0, [r4, #23]
 8029f28:	28f1      	cmp	r0, #241	@ 0xf1
 8029f2a:	bf18      	it	ne
 8029f2c:	2800      	cmpne	r0, #0
 8029f2e:	f040 8217 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 8029f32:	f894 1020 	ldrb.w	r1, [r4, #32]
 8029f36:	f001 0003 	and.w	r0, r1, #3
 8029f3a:	2801      	cmp	r0, #1
 8029f3c:	f000 80b6 	beq.w	802a0ac <SMP_Process_Rx_Packet+0x254>
 8029f40:	0788      	lsls	r0, r1, #30
 8029f42:	d516      	bpl.n	8029f72 <SMP_Process_Rx_Packet+0x11a>
 8029f44:	f041 0003 	orr.w	r0, r1, #3
 8029f48:	f001 010c 	and.w	r1, r1, #12
 8029f4c:	2904      	cmp	r1, #4
 8029f4e:	f884 0020 	strb.w	r0, [r4, #32]
 8029f52:	d109      	bne.n	8029f68 <SMP_Process_Rx_Packet+0x110>
 8029f54:	f000 00f3 	and.w	r0, r0, #243	@ 0xf3
 8029f58:	3008      	adds	r0, #8
 8029f5a:	f884 0020 	strb.w	r0, [r4, #32]
 8029f5e:	2001      	movs	r0, #1
 8029f60:	f7f9 fc84 	bl	802386c <EVT_aci_gap_bond_lost>
 8029f64:	f894 0020 	ldrb.w	r0, [r4, #32]
 8029f68:	f000 000c 	and.w	r0, r0, #12
 8029f6c:	2808      	cmp	r0, #8
 8029f6e:	f000 809d 	beq.w	802a0ac <SMP_Process_Rx_Packet+0x254>
 8029f72:	4620      	mov	r0, r4
 8029f74:	2107      	movs	r1, #7
 8029f76:	f000 ff05 	bl	802ad84 <OUTLINED_FUNCTION_6>
 8029f7a:	f000 80e8 	beq.w	802a14e <SMP_Process_Rx_Packet+0x2f6>
 8029f7e:	4606      	mov	r6, r0
 8029f80:	7e20      	ldrb	r0, [r4, #24]
 8029f82:	07c0      	lsls	r0, r0, #31
 8029f84:	f040 8191 	bne.w	802a2aa <SMP_Process_Rx_Packet+0x452>
 8029f88:	4628      	mov	r0, r5
 8029f8a:	f000 fd37 	bl	802a9fc <SMP_Check_Rx_Pairing_Parameters>
 8029f8e:	4607      	mov	r7, r0
 8029f90:	2800      	cmp	r0, #0
 8029f92:	f040 818b 	bne.w	802a2ac <SMP_Process_Rx_Packet+0x454>
 8029f96:	f8df 24a4 	ldr.w	r2, [pc, #1188]	@ 802a43c <__arm_cp.4_0>
 8029f9a:	6a28      	ldr	r0, [r5, #32]
 8029f9c:	79c0      	ldrb	r0, [r0, #7]
 8029f9e:	f892 1092 	ldrb.w	r1, [r2, #146]	@ 0x92
 8029fa2:	2902      	cmp	r1, #2
 8029fa4:	bf08      	it	eq
 8029fa6:	f010 0308 	andseq.w	r3, r0, #8
 8029faa:	f000 81f7 	beq.w	802a39c <SMP_Process_Rx_Packet+0x544>
 8029fae:	f892 a089 	ldrb.w	sl, [r2, #137]	@ 0x89
 8029fb2:	2704      	movs	r7, #4
 8029fb4:	f892 3088 	ldrb.w	r3, [r2, #136]	@ 0x88
 8029fb8:	f892 2093 	ldrb.w	r2, [r2, #147]	@ 0x93
 8029fbc:	ea41 0151 	orr.w	r1, r1, r1, lsr #1
 8029fc0:	ea07 078a 	and.w	r7, r7, sl, lsl #2
 8029fc4:	f003 0b01 	and.w	fp, r3, #1
 8029fc8:	f361 07c3 	bfi	r7, r1, #3, #1
 8029fcc:	f002 0101 	and.w	r1, r2, #1
 8029fd0:	7fe2      	ldrb	r2, [r4, #31]
 8029fd2:	ea47 1101 	orr.w	r1, r7, r1, lsl #4
 8029fd6:	f002 0201 	and.w	r2, r2, #1
 8029fda:	eb01 090b 	add.w	r9, r1, fp
 8029fde:	ea00 0009 	and.w	r0, r0, r9
 8029fe2:	f000 0118 	and.w	r1, r0, #24
 8029fe6:	0700      	lsls	r0, r0, #28
 8029fe8:	4411      	add	r1, r2
 8029fea:	77e1      	strb	r1, [r4, #31]
 8029fec:	f100 81d8 	bmi.w	802a3a0 <SMP_Process_Rx_Packet+0x548>
 8029ff0:	f04f 0881 	mov.w	r8, #129	@ 0x81
 8029ff4:	e1dd      	b.n	802a3b2 <SMP_Process_Rx_Packet+0x55a>
 8029ff6:	0738      	lsls	r0, r7, #28
 8029ff8:	d433      	bmi.n	802a062 <SMP_Process_Rx_Packet+0x20a>
 8029ffa:	1f88      	subs	r0, r1, #6
 8029ffc:	2805      	cmp	r0, #5
 8029ffe:	d341      	bcc.n	802a084 <SMP_Process_Rx_Packet+0x22c>
 802a000:	2905      	cmp	r1, #5
 802a002:	f040 81ad 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a006:	e0a4      	b.n	802a152 <SMP_Process_Rx_Packet+0x2fa>
 802a008:	7de0      	ldrb	r0, [r4, #23]
 802a00a:	2883      	cmp	r0, #131	@ 0x83
 802a00c:	f040 81a8 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a010:	4620      	mov	r0, r4
 802a012:	2111      	movs	r1, #17
 802a014:	f000 feb6 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802a018:	f000 8099 	beq.w	802a14e <SMP_Process_Rx_Packet+0x2f6>
 802a01c:	4606      	mov	r6, r0
 802a01e:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 802a022:	f000 fe91 	bl	802ad48 <OUTLINED_FUNCTION_0>
 802a026:	7fe0      	ldrb	r0, [r4, #31]
 802a028:	0700      	lsls	r0, r0, #28
 802a02a:	f100 80a8 	bmi.w	802a17e <SMP_Process_Rx_Packet+0x326>
 802a02e:	ad01      	add	r5, sp, #4
 802a030:	4620      	mov	r0, r4
 802a032:	2101      	movs	r1, #1
 802a034:	462a      	mov	r2, r5
 802a036:	f000 fdc1 	bl	802abbc <SMP_LP_Compute_Confirm_Value>
 802a03a:	f000 fe9a 	bl	802ad72 <OUTLINED_FUNCTION_4>
 802a03e:	25bc      	movs	r5, #188	@ 0xbc
 802a040:	e158      	b.n	802a2f4 <SMP_Process_Rx_Packet+0x49c>
 802a042:	7de0      	ldrb	r0, [r4, #23]
 802a044:	f1a0 0180 	sub.w	r1, r0, #128	@ 0x80
 802a048:	2902      	cmp	r1, #2
 802a04a:	d32f      	bcc.n	802a0ac <SMP_Process_Rx_Packet+0x254>
 802a04c:	2882      	cmp	r0, #130	@ 0x82
 802a04e:	f040 8187 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a052:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802a056:	f000 fe77 	bl	802ad48 <OUTLINED_FUNCTION_0>
 802a05a:	4620      	mov	r0, r4
 802a05c:	f000 fe50 	bl	802ad00 <SMP_SR_Send_Pairing_Confirm>
 802a060:	e17f      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a062:	1f4a      	subs	r2, r1, #5
 802a064:	2000      	movs	r0, #0
 802a066:	2a09      	cmp	r2, #9
 802a068:	f200 817b 	bhi.w	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a06c:	e8df f012 	tbh	[pc, r2, lsl #1]
 802a070:	000a0071 	.word	0x000a0071
 802a074:	000a000a 	.word	0x000a000a
 802a078:	000a000a 	.word	0x000a000a
 802a07c:	010e0179 	.word	0x010e0179
 802a080:	01180113 	.word	0x01180113
 802a084:	7de0      	ldrb	r0, [r4, #23]
 802a086:	28d0      	cmp	r0, #208	@ 0xd0
 802a088:	f040 816a 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a08c:	1f88      	subs	r0, r1, #6
 802a08e:	2803      	cmp	r0, #3
 802a090:	f200 8083 	bhi.w	802a19a <SMP_Process_Rx_Packet+0x342>
 802a094:	e8df f000 	tbb	[pc, r0]
 802a098:	b4aa9102 	.word	0xb4aa9102
 802a09c:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 802a0a0:	e0ab      	b.n	802a1fa <SMP_Process_Rx_Packet+0x3a2>
 802a0a2:	7de0      	ldrb	r0, [r4, #23]
 802a0a4:	f1a0 0180 	sub.w	r1, r0, #128	@ 0x80
 802a0a8:	2902      	cmp	r1, #2
 802a0aa:	d245      	bcs.n	802a138 <SMP_Process_Rx_Packet+0x2e0>
 802a0ac:	2093      	movs	r0, #147	@ 0x93
 802a0ae:	e158      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a0b0:	7de0      	ldrb	r0, [r4, #23]
 802a0b2:	2883      	cmp	r0, #131	@ 0x83
 802a0b4:	f040 8154 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a0b8:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802a0bc:	f000 fe44 	bl	802ad48 <OUTLINED_FUNCTION_0>
 802a0c0:	7fe0      	ldrb	r0, [r4, #31]
 802a0c2:	0700      	lsls	r0, r0, #28
 802a0c4:	d44e      	bmi.n	802a164 <SMP_Process_Rx_Packet+0x30c>
 802a0c6:	aa01      	add	r2, sp, #4
 802a0c8:	4620      	mov	r0, r4
 802a0ca:	2103      	movs	r1, #3
 802a0cc:	f000 fd76 	bl	802abbc <SMP_LP_Compute_Confirm_Value>
 802a0d0:	e0c1      	b.n	802a256 <SMP_Process_Rx_Packet+0x3fe>
 802a0d2:	7de0      	ldrb	r0, [r4, #23]
 802a0d4:	28f1      	cmp	r0, #241	@ 0xf1
 802a0d6:	bf18      	it	ne
 802a0d8:	2800      	cmpne	r0, #0
 802a0da:	f040 8141 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a0de:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802a0e2:	06c0      	lsls	r0, r0, #27
 802a0e4:	f100 813c 	bmi.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a0e8:	4620      	mov	r0, r4
 802a0ea:	f000 f9dd 	bl	802a4a8 <SMP_Reset_Timer>
 802a0ee:	6a28      	ldr	r0, [r5, #32]
 802a0f0:	7943      	ldrb	r3, [r0, #5]
 802a0f2:	48d2      	ldr	r0, [pc, #840]	@ (802a43c <__arm_cp.4_0>)
 802a0f4:	f890 0092 	ldrb.w	r0, [r0, #146]	@ 0x92
 802a0f8:	2802      	cmp	r0, #2
 802a0fa:	bf08      	it	eq
 802a0fc:	f013 0008 	andseq.w	r0, r3, #8
 802a100:	d049      	beq.n	802a196 <SMP_Process_Rx_Packet+0x33e>
 802a102:	7de0      	ldrb	r0, [r4, #23]
 802a104:	28f1      	cmp	r0, #241	@ 0xf1
 802a106:	bf03      	ittte	eq
 802a108:	7e20      	ldrbeq	r0, [r4, #24]
 802a10a:	f010 0f60 	tsteq.w	r0, #96	@ 0x60
 802a10e:	f3c3 0180 	ubfxeq	r1, r3, #2, #1
 802a112:	2100      	movne	r1, #0
 802a114:	2200      	movs	r2, #0
 802a116:	8820      	ldrh	r0, [r4, #0]
 802a118:	f000 f9dc 	bl	802a4d4 <SMP_MI_Send_Pairing_Request>
 802a11c:	2800      	cmp	r0, #0
 802a11e:	f000 8120 	beq.w	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a122:	2859      	cmp	r0, #89	@ 0x59
 802a124:	f000 810c 	beq.w	802a340 <SMP_Process_Rx_Packet+0x4e8>
 802a128:	2864      	cmp	r0, #100	@ 0x64
 802a12a:	f000 811a 	beq.w	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a12e:	2108      	movs	r1, #8
 802a130:	2838      	cmp	r0, #56	@ 0x38
 802a132:	bf08      	it	eq
 802a134:	2105      	moveq	r1, #5
 802a136:	e11d      	b.n	802a374 <SMP_Process_Rx_Packet+0x51c>
 802a138:	2882      	cmp	r0, #130	@ 0x82
 802a13a:	f040 8111 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a13e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802a142:	f000 fe01 	bl	802ad48 <OUTLINED_FUNCTION_0>
 802a146:	4620      	mov	r0, r4
 802a148:	f000 fd1f 	bl	802ab8a <SMP_MI_Send_Pairing_Random>
 802a14c:	e109      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a14e:	2064      	movs	r0, #100	@ 0x64
 802a150:	e107      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a152:	7e20      	ldrb	r0, [r4, #24]
 802a154:	07c0      	lsls	r0, r0, #31
 802a156:	f040 8103 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a15a:	7971      	ldrb	r1, [r6, #5]
 802a15c:	4620      	mov	r0, r4
 802a15e:	f000 fbdc 	bl	802a91a <SMP_Pairing_Failed>
 802a162:	e0fd      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a164:	7e60      	ldrb	r0, [r4, #25]
 802a166:	2803      	cmp	r0, #3
 802a168:	d170      	bne.n	802a24c <SMP_Process_Rx_Packet+0x3f4>
 802a16a:	2091      	movs	r0, #145	@ 0x91
 802a16c:	75e0      	strb	r0, [r4, #23]
 802a16e:	48b3      	ldr	r0, [pc, #716]	@ (802a43c <__arm_cp.4_0>)
 802a170:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802a174:	f001 01fb 	and.w	r1, r1, #251	@ 0xfb
 802a178:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 802a17c:	e0f0      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a17e:	7e60      	ldrb	r0, [r4, #25]
 802a180:	2802      	cmp	r0, #2
 802a182:	f000 80a6 	beq.w	802a2d2 <SMP_Process_Rx_Packet+0x47a>
 802a186:	2804      	cmp	r0, #4
 802a188:	f040 80bc 	bne.w	802a304 <SMP_Process_Rx_Packet+0x4ac>
 802a18c:	4620      	mov	r0, r4
 802a18e:	f001 f93b 	bl	802b408 <SMP_SC_Generate_Num_Comparison_Event>
 802a192:	2590      	movs	r5, #144	@ 0x90
 802a194:	e0b7      	b.n	802a306 <SMP_Process_Rx_Packet+0x4ae>
 802a196:	2103      	movs	r1, #3
 802a198:	e0ec      	b.n	802a374 <SMP_Process_Rx_Packet+0x51c>
 802a19a:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a19e:	0740      	lsls	r0, r0, #29
 802a1a0:	f140 80de 	bpl.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a1a4:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802a1a8:	f000 fdce 	bl	802ad48 <OUTLINED_FUNCTION_0>
 802a1ac:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a1b0:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802a1b4:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
 802a1b8:	e0c8      	b.n	802a34c <SMP_Process_Rx_Packet+0x4f4>
 802a1ba:	7970      	ldrb	r0, [r6, #5]
 802a1bc:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 802a1c0:	2107      	movs	r1, #7
 802a1c2:	2208      	movs	r2, #8
 802a1c4:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 802a1c8:	6a28      	ldr	r0, [r5, #32]
 802a1ca:	7980      	ldrb	r0, [r0, #6]
 802a1cc:	f884 0047 	strb.w	r0, [r4, #71]	@ 0x47
 802a1d0:	4628      	mov	r0, r5
 802a1d2:	f7fe fb28 	bl	8028826 <ACL_Get_Data>
 802a1d6:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a1da:	f040 0110 	orr.w	r1, r0, #16
 802a1de:	f010 0f06 	tst.w	r0, #6
 802a1e2:	f884 1022 	strb.w	r1, [r4, #34]	@ 0x22
 802a1e6:	f040 80bb 	bne.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a1ea:	e0af      	b.n	802a34c <SMP_Process_Rx_Packet+0x4f4>
 802a1ec:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a1f0:	0780      	lsls	r0, r0, #30
 802a1f2:	f140 80b5 	bpl.w	802a360 <SMP_Process_Rx_Packet+0x508>
 802a1f6:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 802a1fa:	f000 fda5 	bl	802ad48 <OUTLINED_FUNCTION_0>
 802a1fe:	e0af      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a200:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a204:	0780      	lsls	r0, r0, #30
 802a206:	f04f 0000 	mov.w	r0, #0
 802a20a:	f140 80aa 	bpl.w	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a20e:	f8ad 0008 	strh.w	r0, [sp, #8]
 802a212:	9001      	str	r0, [sp, #4]
 802a214:	ab01      	add	r3, sp, #4
 802a216:	4628      	mov	r0, r5
 802a218:	2106      	movs	r1, #6
 802a21a:	2206      	movs	r2, #6
 802a21c:	f7fe fae1 	bl	80287e2 <ACL_Cmp_Data>
 802a220:	2800      	cmp	r0, #0
 802a222:	f000 808f 	beq.w	802a344 <SMP_Process_Rx_Packet+0x4ec>
 802a226:	6a28      	ldr	r0, [r5, #32]
 802a228:	f104 0311 	add.w	r3, r4, #17
 802a22c:	2106      	movs	r1, #6
 802a22e:	2206      	movs	r2, #6
 802a230:	7940      	ldrb	r0, [r0, #5]
 802a232:	f000 0001 	and.w	r0, r0, #1
 802a236:	7420      	strb	r0, [r4, #16]
 802a238:	4628      	mov	r0, r5
 802a23a:	f7fe faf4 	bl	8028826 <ACL_Get_Data>
 802a23e:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a242:	f040 0020 	orr.w	r0, r0, #32
 802a246:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
 802a24a:	e07d      	b.n	802a348 <SMP_Process_Rx_Packet+0x4f0>
 802a24c:	aa01      	add	r2, sp, #4
 802a24e:	4620      	mov	r0, r4
 802a250:	2103      	movs	r1, #3
 802a252:	f001 f8ab 	bl	802b3ac <SMP_SC_Compute_Confirm_Value>
 802a256:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802a25a:	a801      	add	r0, sp, #4
 802a25c:	2210      	movs	r2, #16
 802a25e:	f7f6 fb79 	bl	8020954 <ble_memcmp>
 802a262:	b110      	cbz	r0, 802a26a <SMP_Process_Rx_Packet+0x412>
 802a264:	4620      	mov	r0, r4
 802a266:	2104      	movs	r1, #4
 802a268:	e085      	b.n	802a376 <SMP_Process_Rx_Packet+0x51e>
 802a26a:	4874      	ldr	r0, [pc, #464]	@ (802a43c <__arm_cp.4_0>)
 802a26c:	7fa2      	ldrb	r2, [r4, #30]
 802a26e:	f890 108b 	ldrb.w	r1, [r0, #139]	@ 0x8b
 802a272:	428a      	cmp	r2, r1
 802a274:	bf88      	it	hi
 802a276:	77a1      	strbhi	r1, [r4, #30]
 802a278:	7fe1      	ldrb	r1, [r4, #31]
 802a27a:	0709      	lsls	r1, r1, #28
 802a27c:	d41c      	bmi.n	802a2b8 <SMP_Process_Rx_Packet+0x460>
 802a27e:	4620      	mov	r0, r4
 802a280:	f000 fd2e 	bl	802ace0 <SMP_LP_Generate_STK>
 802a284:	4620      	mov	r0, r4
 802a286:	f000 fa67 	bl	802a758 <SMP_MI_Start_Encryption>
 802a28a:	e06a      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a28c:	4628      	mov	r0, r5
 802a28e:	4621      	mov	r1, r4
 802a290:	f000 ff58 	bl	802b144 <SMP_SC_Pairing_Public_Key_Rx_Handler>
 802a294:	e065      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a296:	4628      	mov	r0, r5
 802a298:	4621      	mov	r1, r4
 802a29a:	f000 ffaf 	bl	802b1fc <SMP_SC_Pairing_DHKey_Check_Rx_Handler>
 802a29e:	e060      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a2a0:	4628      	mov	r0, r5
 802a2a2:	4621      	mov	r1, r4
 802a2a4:	f000 fe8c 	bl	802afc0 <SMP_SC_Keypress_Notification_Rx_Handler>
 802a2a8:	e05b      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a2aa:	2709      	movs	r7, #9
 802a2ac:	4630      	mov	r0, r6
 802a2ae:	f7fe fa4d 	bl	802874c <ACL_Release>
 802a2b2:	4620      	mov	r0, r4
 802a2b4:	4639      	mov	r1, r7
 802a2b6:	e05e      	b.n	802a376 <SMP_Process_Rx_Packet+0x51e>
 802a2b8:	7e61      	ldrb	r1, [r4, #25]
 802a2ba:	2901      	cmp	r1, #1
 802a2bc:	d05f      	beq.n	802a37e <SMP_Process_Rx_Packet+0x526>
 802a2be:	2902      	cmp	r1, #2
 802a2c0:	d060      	beq.n	802a384 <SMP_Process_Rx_Packet+0x52c>
 802a2c2:	2904      	cmp	r1, #4
 802a2c4:	d14c      	bne.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a2c6:	2090      	movs	r0, #144	@ 0x90
 802a2c8:	75e0      	strb	r0, [r4, #23]
 802a2ca:	4620      	mov	r0, r4
 802a2cc:	f001 f89c 	bl	802b408 <SMP_SC_Generate_Num_Comparison_Event>
 802a2d0:	e046      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a2d2:	ad01      	add	r5, sp, #4
 802a2d4:	4620      	mov	r0, r4
 802a2d6:	2101      	movs	r1, #1
 802a2d8:	462a      	mov	r2, r5
 802a2da:	f001 f867 	bl	802b3ac <SMP_SC_Compute_Confirm_Value>
 802a2de:	f000 fd48 	bl	802ad72 <OUTLINED_FUNCTION_4>
 802a2e2:	4956      	ldr	r1, [pc, #344]	@ (802a43c <__arm_cp.4_0>)
 802a2e4:	f06f 056e 	mvn.w	r5, #110	@ 0x6e
 802a2e8:	f891 119c 	ldrb.w	r1, [r1, #412]	@ 0x19c
 802a2ec:	2914      	cmp	r1, #20
 802a2ee:	bf38      	it	cc
 802a2f0:	f06f 057e 	mvncc.w	r5, #126	@ 0x7e
 802a2f4:	b138      	cbz	r0, 802a306 <SMP_Process_Rx_Packet+0x4ae>
 802a2f6:	4630      	mov	r0, r6
 802a2f8:	f7fe fa28 	bl	802874c <ACL_Release>
 802a2fc:	4620      	mov	r0, r4
 802a2fe:	2104      	movs	r1, #4
 802a300:	2201      	movs	r2, #1
 802a302:	e039      	b.n	802a378 <SMP_Process_Rx_Packet+0x520>
 802a304:	2591      	movs	r5, #145	@ 0x91
 802a306:	6a30      	ldr	r0, [r6, #32]
 802a308:	2104      	movs	r1, #4
 802a30a:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802a30e:	2210      	movs	r2, #16
 802a310:	7101      	strb	r1, [r0, #4]
 802a312:	4630      	mov	r0, r6
 802a314:	2105      	movs	r1, #5
 802a316:	f7fe faa6 	bl	8028866 <ACL_Set_Data>
 802a31a:	4630      	mov	r0, r6
 802a31c:	f000 fd26 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802a320:	b9f8      	cbnz	r0, 802a362 <SMP_Process_Rx_Packet+0x50a>
 802a322:	4846      	ldr	r0, [pc, #280]	@ (802a43c <__arm_cp.4_0>)
 802a324:	75e5      	strb	r5, [r4, #23]
 802a326:	7fa1      	ldrb	r1, [r4, #30]
 802a328:	f890 008b 	ldrb.w	r0, [r0, #139]	@ 0x8b
 802a32c:	4281      	cmp	r1, r0
 802a32e:	bf88      	it	hi
 802a330:	77a0      	strbhi	r0, [r4, #30]
 802a332:	7fe0      	ldrb	r0, [r4, #31]
 802a334:	0700      	lsls	r0, r0, #28
 802a336:	d413      	bmi.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a338:	4620      	mov	r0, r4
 802a33a:	f000 fcd1 	bl	802ace0 <SMP_LP_Generate_STK>
 802a33e:	e00f      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a340:	2109      	movs	r1, #9
 802a342:	e017      	b.n	802a374 <SMP_Process_Rx_Packet+0x51c>
 802a344:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a348:	0740      	lsls	r0, r0, #29
 802a34a:	d409      	bmi.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a34c:	7fe0      	ldrb	r0, [r4, #31]
 802a34e:	07c0      	lsls	r0, r0, #31
 802a350:	d103      	bne.n	802a35a <SMP_Process_Rx_Packet+0x502>
 802a352:	4620      	mov	r0, r4
 802a354:	f7ff fc8e 	bl	8029c74 <SMP_Key_Dist_Start>
 802a358:	e002      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a35a:	4620      	mov	r0, r4
 802a35c:	f7ff fcbc 	bl	8029cd8 <SMP_Pairing_Success>
 802a360:	2000      	movs	r0, #0
 802a362:	b005      	add	sp, #20
 802a364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a368:	4620      	mov	r0, r4
 802a36a:	f000 fdf3 	bl	802af54 <SMP_SC_Pairing_Start>
 802a36e:	4601      	mov	r1, r0
 802a370:	2800      	cmp	r0, #0
 802a372:	d061      	beq.n	802a438 <SMP_Process_Rx_Packet+0x5e0>
 802a374:	4620      	mov	r0, r4
 802a376:	2200      	movs	r2, #0
 802a378:	f000 fab2 	bl	802a8e0 <SMP_Send_Pairing_Failed>
 802a37c:	e7f1      	b.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a37e:	2191      	movs	r1, #145	@ 0x91
 802a380:	75e1      	strb	r1, [r4, #23]
 802a382:	e6f5      	b.n	802a170 <SMP_Process_Rx_Packet+0x318>
 802a384:	f890 219c 	ldrb.w	r2, [r0, #412]	@ 0x19c
 802a388:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802a38c:	f06f 036e 	mvn.w	r3, #110	@ 0x6e
 802a390:	2a14      	cmp	r2, #20
 802a392:	bf38      	it	cc
 802a394:	f06f 037e 	mvncc.w	r3, #126	@ 0x7e
 802a398:	75e3      	strb	r3, [r4, #23]
 802a39a:	e6eb      	b.n	802a174 <SMP_Process_Rx_Packet+0x31c>
 802a39c:	2703      	movs	r7, #3
 802a39e:	e785      	b.n	802a2ac <SMP_Process_Rx_Packet+0x454>
 802a3a0:	4620      	mov	r0, r4
 802a3a2:	f000 fdd7 	bl	802af54 <SMP_SC_Pairing_Start>
 802a3a6:	4607      	mov	r7, r0
 802a3a8:	2800      	cmp	r0, #0
 802a3aa:	f47f af7f 	bne.w	802a2ac <SMP_Process_Rx_Packet+0x454>
 802a3ae:	f04f 0880 	mov.w	r8, #128	@ 0x80
 802a3b2:	4620      	mov	r0, r4
 802a3b4:	f7ff f98e 	bl	80296d4 <SMP_Check_Remote_OOB_Data_Presence>
 802a3b8:	f00a 0001 	and.w	r0, sl, #1
 802a3bc:	4621      	mov	r1, r4
 802a3be:	7760      	strb	r0, [r4, #29]
 802a3c0:	ea4f 004b 	mov.w	r0, fp, lsl #1
 802a3c4:	7720      	strb	r0, [r4, #28]
 802a3c6:	aa01      	add	r2, sp, #4
 802a3c8:	4628      	mov	r0, r5
 802a3ca:	f000 fb31 	bl	802aa30 <SMP_Get_Rx_Pairing_Parameters>
 802a3ce:	4620      	mov	r0, r4
 802a3d0:	f000 fb5e 	bl	802aa90 <SMP_Set_Key_Generation_Method>
 802a3d4:	4607      	mov	r7, r0
 802a3d6:	2800      	cmp	r0, #0
 802a3d8:	f47f af68 	bne.w	802a2ac <SMP_Process_Rx_Packet+0x454>
 802a3dc:	7e60      	ldrb	r0, [r4, #25]
 802a3de:	2802      	cmp	r0, #2
 802a3e0:	d104      	bne.n	802a3ec <SMP_Process_Rx_Packet+0x594>
 802a3e2:	7f60      	ldrb	r0, [r4, #29]
 802a3e4:	06c0      	lsls	r0, r0, #27
 802a3e6:	bf58      	it	pl
 802a3e8:	f06f 087f 	mvnpl.w	r8, #127	@ 0x7f
 802a3ec:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a3f0:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 802a3f4:	f88d 9007 	strb.w	r9, [sp, #7]
 802a3f8:	2202      	movs	r2, #2
 802a3fa:	f000 0007 	and.w	r0, r0, #7
 802a3fe:	f88d 0008 	strb.w	r0, [sp, #8]
 802a402:	f001 0007 	and.w	r0, r1, #7
 802a406:	4621      	mov	r1, r4
 802a408:	f88d 0009 	strb.w	r0, [sp, #9]
 802a40c:	ab01      	add	r3, sp, #4
 802a40e:	4630      	mov	r0, r6
 802a410:	f000 fad6 	bl	802a9c0 <SMP_Build_Pairing_Packet>
 802a414:	4630      	mov	r0, r6
 802a416:	f000 fca9 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802a41a:	2800      	cmp	r0, #0
 802a41c:	d1a1      	bne.n	802a362 <SMP_Process_Rx_Packet+0x50a>
 802a41e:	7e20      	ldrb	r0, [r4, #24]
 802a420:	2206      	movs	r2, #6
 802a422:	f000 009f 	and.w	r0, r0, #159	@ 0x9f
 802a426:	7620      	strb	r0, [r4, #24]
 802a428:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802a42c:	a901      	add	r1, sp, #4
 802a42e:	f7f6 fa09 	bl	8020844 <ble_memcpy>
 802a432:	f884 8017 	strb.w	r8, [r4, #23]
 802a436:	e793      	b.n	802a360 <SMP_Process_Rx_Packet+0x508>
 802a438:	2680      	movs	r6, #128	@ 0x80
 802a43a:	e547      	b.n	8029ecc <SMP_Process_Rx_Packet+0x74>

0802a43c <__arm_cp.4_0>:
 802a43c:	2000a014 	.word	0x2000a014

0802a440 <SMP_Ongoing_Pairing>:
 802a440:	b510      	push	{r4, lr}
 802a442:	480a      	ldr	r0, [pc, #40]	@ (802a46c <__arm_cp.5_0>)
 802a444:	2300      	movs	r3, #0
 802a446:	7d81      	ldrb	r1, [r0, #22]
 802a448:	4809      	ldr	r0, [pc, #36]	@ (802a470 <__arm_cp.5_1>)
 802a44a:	f8d0 00b8 	ldr.w	r0, [r0, #184]	@ 0xb8
 802a44e:	3017      	adds	r0, #23
 802a450:	461a      	mov	r2, r3
 802a452:	4299      	cmp	r1, r3
 802a454:	d005      	beq.n	802a462 <SMP_Ongoing_Pairing+0x22>
 802a456:	f810 4b80 	ldrb.w	r4, [r0], #128
 802a45a:	1c53      	adds	r3, r2, #1
 802a45c:	3c20      	subs	r4, #32
 802a45e:	2cc0      	cmp	r4, #192	@ 0xc0
 802a460:	d8f6      	bhi.n	802a450 <SMP_Ongoing_Pairing+0x10>
 802a462:	2000      	movs	r0, #0
 802a464:	428a      	cmp	r2, r1
 802a466:	bf38      	it	cc
 802a468:	2001      	movcc	r0, #1
 802a46a:	bd10      	pop	{r4, pc}

0802a46c <__arm_cp.5_0>:
 802a46c:	20009fec 	.word	0x20009fec

0802a470 <__arm_cp.5_1>:
 802a470:	2000a014 	.word	0x2000a014

0802a474 <SMP_New_PDU>:
 802a474:	8803      	ldrh	r3, [r0, #0]
 802a476:	1d08      	adds	r0, r1, #4
 802a478:	b282      	uxth	r2, r0
 802a47a:	2001      	movs	r0, #1
 802a47c:	4619      	mov	r1, r3
 802a47e:	f7fe b92f 	b.w	80286e0 <ACL_New>

0802a482 <SMP_Send_PDU>:
 802a482:	b570      	push	{r4, r5, r6, lr}
 802a484:	4606      	mov	r6, r0
 802a486:	460d      	mov	r5, r1
 802a488:	2006      	movs	r0, #6
 802a48a:	4631      	mov	r1, r6
 802a48c:	f7fd fe99 	bl	80281c2 <L2C_Send_Data>
 802a490:	4604      	mov	r4, r0
 802a492:	b118      	cbz	r0, 802a49c <SMP_Send_PDU+0x1a>
 802a494:	4630      	mov	r0, r6
 802a496:	f7fe f959 	bl	802874c <ACL_Release>
 802a49a:	e003      	b.n	802a4a4 <SMP_Send_PDU+0x22>
 802a49c:	b115      	cbz	r5, 802a4a4 <SMP_Send_PDU+0x22>
 802a49e:	4628      	mov	r0, r5
 802a4a0:	f000 f802 	bl	802a4a8 <SMP_Reset_Timer>
 802a4a4:	4620      	mov	r0, r4
 802a4a6:	bd70      	pop	{r4, r5, r6, pc}

0802a4a8 <SMP_Reset_Timer>:
 802a4a8:	b510      	push	{r4, lr}
 802a4aa:	4909      	ldr	r1, [pc, #36]	@ (802a4d0 <__arm_cp.8_0>)
 802a4ac:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 802a4b0:	1a40      	subs	r0, r0, r1
 802a4b2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 802a4b6:	ea41 10d0 	orr.w	r0, r1, r0, lsr #7
 802a4ba:	b284      	uxth	r4, r0
 802a4bc:	4620      	mov	r0, r4
 802a4be:	f7d7 ff4f 	bl	8002360 <BLEPLAT_TimerStop>
 802a4c2:	4620      	mov	r0, r4
 802a4c4:	f247 5130 	movw	r1, #30000	@ 0x7530
 802a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a4cc:	f7d7 bf46 	b.w	800235c <BLEPLAT_TimerStart>

0802a4d0 <__arm_cp.8_0>:
 802a4d0:	2000a014 	.word	0x2000a014

0802a4d4 <SMP_MI_Send_Pairing_Request>:
 802a4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4d8:	b085      	sub	sp, #20
 802a4da:	461d      	mov	r5, r3
 802a4dc:	4616      	mov	r6, r2
 802a4de:	460f      	mov	r7, r1
 802a4e0:	f7fe ff70 	bl	80293c4 <SMP_Get_Remote_Device>
 802a4e4:	b330      	cbz	r0, 802a534 <SMP_MI_Send_Pairing_Request+0x60>
 802a4e6:	4604      	mov	r4, r0
 802a4e8:	7fc0      	ldrb	r0, [r0, #31]
 802a4ea:	07c1      	lsls	r1, r0, #31
 802a4ec:	d120      	bne.n	802a530 <SMP_MI_Send_Pairing_Request+0x5c>
 802a4ee:	7de1      	ldrb	r1, [r4, #23]
 802a4f0:	29f1      	cmp	r1, #241	@ 0xf1
 802a4f2:	bf18      	it	ne
 802a4f4:	2900      	cmpne	r1, #0
 802a4f6:	d11b      	bne.n	802a530 <SMP_MI_Send_Pairing_Request+0x5c>
 802a4f8:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
 802a4fc:	06d2      	lsls	r2, r2, #27
 802a4fe:	d417      	bmi.n	802a530 <SMP_MI_Send_Pairing_Request+0x5c>
 802a500:	7e22      	ldrb	r2, [r4, #24]
 802a502:	07d2      	lsls	r2, r2, #31
 802a504:	d11b      	bne.n	802a53e <SMP_MI_Send_Pairing_Request+0x6a>
 802a506:	b93f      	cbnz	r7, 802a518 <SMP_MI_Send_Pairing_Request+0x44>
 802a508:	29f1      	cmp	r1, #241	@ 0xf1
 802a50a:	d105      	bne.n	802a518 <SMP_MI_Send_Pairing_Request+0x44>
 802a50c:	0700      	lsls	r0, r0, #28
 802a50e:	d47c      	bmi.n	802a60a <SMP_MI_Send_Pairing_Request+0x136>
 802a510:	f894 0022 	ldrb.w	r0, [r4, #34]	@ 0x22
 802a514:	06c0      	lsls	r0, r0, #27
 802a516:	d478      	bmi.n	802a60a <SMP_MI_Send_Pairing_Request+0x136>
 802a518:	f8df a108 	ldr.w	sl, [pc, #264]	@ 802a624 <__arm_cp.10_0>
 802a51c:	f89a 0096 	ldrb.w	r0, [sl, #150]	@ 0x96
 802a520:	0740      	lsls	r0, r0, #29
 802a522:	d50e      	bpl.n	802a542 <SMP_MI_Send_Pairing_Request+0x6e>
 802a524:	f89a 0092 	ldrb.w	r0, [sl, #146]	@ 0x92
 802a528:	0780      	lsls	r0, r0, #30
 802a52a:	d00a      	beq.n	802a542 <SMP_MI_Send_Pairing_Request+0x6e>
 802a52c:	2538      	movs	r5, #56	@ 0x38
 802a52e:	e002      	b.n	802a536 <SMP_MI_Send_Pairing_Request+0x62>
 802a530:	250c      	movs	r5, #12
 802a532:	e000      	b.n	802a536 <SMP_MI_Send_Pairing_Request+0x62>
 802a534:	2502      	movs	r5, #2
 802a536:	4628      	mov	r0, r5
 802a538:	b005      	add	sp, #20
 802a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a53e:	2559      	movs	r5, #89	@ 0x59
 802a540:	e7f9      	b.n	802a536 <SMP_MI_Send_Pairing_Request+0x62>
 802a542:	4620      	mov	r0, r4
 802a544:	2107      	movs	r1, #7
 802a546:	f000 fc1d 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802a54a:	d068      	beq.n	802a61e <SMP_MI_Send_Pairing_Request+0x14a>
 802a54c:	4683      	mov	fp, r0
 802a54e:	f89a 0088 	ldrb.w	r0, [sl, #136]	@ 0x88
 802a552:	f89a 7089 	ldrb.w	r7, [sl, #137]	@ 0x89
 802a556:	f89a 8092 	ldrb.w	r8, [sl, #146]	@ 0x92
 802a55a:	f89a a093 	ldrb.w	sl, [sl, #147]	@ 0x93
 802a55e:	f04f 0907 	mov.w	r9, #7
 802a562:	9002      	str	r0, [sp, #8]
 802a564:	4620      	mov	r0, r4
 802a566:	f7ff f8b5 	bl	80296d4 <SMP_Check_Remote_OOB_Data_Presence>
 802a56a:	2e00      	cmp	r6, #0
 802a56c:	f88d 9013 	strb.w	r9, [sp, #19]
 802a570:	f88d 9012 	strb.w	r9, [sp, #18]
 802a574:	bf08      	it	eq
 802a576:	08af      	lsreq	r7, r5, #2
 802a578:	ea48 0158 	orr.w	r1, r8, r8, lsr #1
 802a57c:	f10d 030e 	add.w	r3, sp, #14
 802a580:	2010      	movs	r0, #16
 802a582:	f007 0701 	and.w	r7, r7, #1
 802a586:	2208      	movs	r2, #8
 802a588:	ea00 100a 	and.w	r0, r0, sl, lsl #4
 802a58c:	ea02 0ac1 	and.w	sl, r2, r1, lsl #3
 802a590:	2201      	movs	r2, #1
 802a592:	9001      	str	r0, [sp, #4]
 802a594:	ea40 0087 	orr.w	r0, r0, r7, lsl #2
 802a598:	9902      	ldr	r1, [sp, #8]
 802a59a:	f001 0601 	and.w	r6, r1, #1
 802a59e:	4450      	add	r0, sl
 802a5a0:	4621      	mov	r1, r4
 802a5a2:	4430      	add	r0, r6
 802a5a4:	f88d 0011 	strb.w	r0, [sp, #17]
 802a5a8:	4658      	mov	r0, fp
 802a5aa:	f000 fa09 	bl	802a9c0 <SMP_Build_Pairing_Packet>
 802a5ae:	4658      	mov	r0, fp
 802a5b0:	f000 fbdc 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802a5b4:	4605      	mov	r5, r0
 802a5b6:	2800      	cmp	r0, #0
 802a5b8:	d1bd      	bne.n	802a536 <SMP_MI_Send_Pairing_Request+0x62>
 802a5ba:	7e20      	ldrb	r0, [r4, #24]
 802a5bc:	2500      	movs	r5, #0
 802a5be:	2100      	movs	r1, #0
 802a5c0:	2254      	movs	r2, #84	@ 0x54
 802a5c2:	f000 009f 	and.w	r0, r0, #159	@ 0x9f
 802a5c6:	8465      	strh	r5, [r4, #34]	@ 0x22
 802a5c8:	7620      	strb	r0, [r4, #24]
 802a5ca:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 802a5ce:	f7f6 f989 	bl	80208e4 <ble_memset>
 802a5d2:	7f20      	ldrb	r0, [r4, #28]
 802a5d4:	7f61      	ldrb	r1, [r4, #29]
 802a5d6:	7fe2      	ldrb	r2, [r4, #31]
 802a5d8:	f884 5021 	strb.w	r5, [r4, #33]	@ 0x21
 802a5dc:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 802a5e0:	7720      	strb	r0, [r4, #28]
 802a5e2:	ea41 0007 	orr.w	r0, r1, r7
 802a5e6:	9901      	ldr	r1, [sp, #4]
 802a5e8:	7760      	strb	r0, [r4, #29]
 802a5ea:	f002 0001 	and.w	r0, r2, #1
 802a5ee:	2206      	movs	r2, #6
 802a5f0:	4308      	orrs	r0, r1
 802a5f2:	f10d 010e 	add.w	r1, sp, #14
 802a5f6:	ea40 000a 	orr.w	r0, r0, sl
 802a5fa:	77e0      	strb	r0, [r4, #31]
 802a5fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802a600:	f7f6 f920 	bl	8020844 <ble_memcpy>
 802a604:	2020      	movs	r0, #32
 802a606:	75e0      	strb	r0, [r4, #23]
 802a608:	e795      	b.n	802a536 <SMP_MI_Send_Pairing_Request+0x62>
 802a60a:	2000      	movs	r0, #0
 802a60c:	2101      	movs	r1, #1
 802a60e:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802a612:	4620      	mov	r0, r4
 802a614:	b005      	add	sp, #20
 802a616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a61a:	f7ff bae7 	b.w	8029bec <SMP_MI_Enable_Encryption>
 802a61e:	2564      	movs	r5, #100	@ 0x64
 802a620:	e789      	b.n	802a536 <SMP_MI_Send_Pairing_Request+0x62>
 802a622:	bf00      	nop

0802a624 <__arm_cp.10_0>:
 802a624:	2000a014 	.word	0x2000a014

0802a628 <ACI_GAP_PERIPHERAL_SECURITY_REQ>:
 802a628:	b5b0      	push	{r4, r5, r7, lr}
 802a62a:	f7fe fecb 	bl	80293c4 <SMP_Get_Remote_Device>
 802a62e:	b148      	cbz	r0, 802a644 <ACI_GAP_PERIPHERAL_SECURITY_REQ+0x1c>
 802a630:	4604      	mov	r4, r0
 802a632:	7fc0      	ldrb	r0, [r0, #31]
 802a634:	07c0      	lsls	r0, r0, #31
 802a636:	d003      	beq.n	802a640 <ACI_GAP_PERIPHERAL_SECURITY_REQ+0x18>
 802a638:	f894 0020 	ldrb.w	r0, [r4, #32]
 802a63c:	0780      	lsls	r0, r0, #30
 802a63e:	d003      	beq.n	802a648 <ACI_GAP_PERIPHERAL_SECURITY_REQ+0x20>
 802a640:	200c      	movs	r0, #12
 802a642:	bdb0      	pop	{r4, r5, r7, pc}
 802a644:	2002      	movs	r0, #2
 802a646:	bdb0      	pop	{r4, r5, r7, pc}
 802a648:	7de0      	ldrb	r0, [r4, #23]
 802a64a:	28f1      	cmp	r0, #241	@ 0xf1
 802a64c:	bf18      	it	ne
 802a64e:	2800      	cmpne	r0, #0
 802a650:	d1f6      	bne.n	802a640 <ACI_GAP_PERIPHERAL_SECURITY_REQ+0x18>
 802a652:	7e20      	ldrb	r0, [r4, #24]
 802a654:	07c0      	lsls	r0, r0, #31
 802a656:	bf1c      	itt	ne
 802a658:	2059      	movne	r0, #89	@ 0x59
 802a65a:	bdb0      	popne	{r4, r5, r7, pc}
 802a65c:	4620      	mov	r0, r4
 802a65e:	2102      	movs	r1, #2
 802a660:	f000 fb90 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802a664:	d026      	beq.n	802a6b4 <ACI_GAP_PERIPHERAL_SECURITY_REQ+0x8c>
 802a666:	6a01      	ldr	r1, [r0, #32]
 802a668:	220b      	movs	r2, #11
 802a66a:	710a      	strb	r2, [r1, #4]
 802a66c:	4912      	ldr	r1, [pc, #72]	@ (802a6b8 <__arm_cp.11_0>)
 802a66e:	f891 2088 	ldrb.w	r2, [r1, #136]	@ 0x88
 802a672:	f891 3089 	ldrb.w	r3, [r1, #137]	@ 0x89
 802a676:	f891 5092 	ldrb.w	r5, [r1, #146]	@ 0x92
 802a67a:	f891 1093 	ldrb.w	r1, [r1, #147]	@ 0x93
 802a67e:	f002 0201 	and.w	r2, r2, #1
 802a682:	f001 0101 	and.w	r1, r1, #1
 802a686:	f363 0282 	bfi	r2, r3, #2, #1
 802a68a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 802a68e:	ea45 0255 	orr.w	r2, r5, r5, lsr #1
 802a692:	f002 0201 	and.w	r2, r2, #1
 802a696:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
 802a69a:	6a02      	ldr	r2, [r0, #32]
 802a69c:	7151      	strb	r1, [r2, #5]
 802a69e:	f000 fb65 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802a6a2:	b930      	cbnz	r0, 802a6b2 <ACI_GAP_PERIPHERAL_SECURITY_REQ+0x8a>
 802a6a4:	f894 0020 	ldrb.w	r0, [r4, #32]
 802a6a8:	f040 0001 	orr.w	r0, r0, #1
 802a6ac:	f884 0020 	strb.w	r0, [r4, #32]
 802a6b0:	2000      	movs	r0, #0
 802a6b2:	bdb0      	pop	{r4, r5, r7, pc}
 802a6b4:	2064      	movs	r0, #100	@ 0x64
 802a6b6:	bdb0      	pop	{r4, r5, r7, pc}

0802a6b8 <__arm_cp.11_0>:
 802a6b8:	2000a014 	.word	0x2000a014

0802a6bc <SMP_SR_Security_Req_TX_Complete_Handler>:
 802a6bc:	b510      	push	{r4, lr}
 802a6be:	4604      	mov	r4, r0
 802a6c0:	f890 0020 	ldrb.w	r0, [r0, #32]
 802a6c4:	f000 0103 	and.w	r1, r0, #3
 802a6c8:	2901      	cmp	r1, #1
 802a6ca:	d117      	bne.n	802a6fc <SMP_SR_Security_Req_TX_Complete_Handler+0x40>
 802a6cc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a6d0:	3002      	adds	r0, #2
 802a6d2:	f884 0020 	strb.w	r0, [r4, #32]
 802a6d6:	2000      	movs	r0, #0
 802a6d8:	f7f9 f8be 	bl	8023858 <EVT_aci_gap_peripheral_security_initiated>
 802a6dc:	7de0      	ldrb	r0, [r4, #23]
 802a6de:	28f1      	cmp	r0, #241	@ 0xf1
 802a6e0:	d10c      	bne.n	802a6fc <SMP_SR_Security_Req_TX_Complete_Handler+0x40>
 802a6e2:	7fe0      	ldrb	r0, [r4, #31]
 802a6e4:	0700      	lsls	r0, r0, #28
 802a6e6:	d403      	bmi.n	802a6f0 <SMP_SR_Security_Req_TX_Complete_Handler+0x34>
 802a6e8:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802a6ec:	07c0      	lsls	r0, r0, #31
 802a6ee:	d005      	beq.n	802a6fc <SMP_SR_Security_Req_TX_Complete_Handler+0x40>
 802a6f0:	f894 0020 	ldrb.w	r0, [r4, #32]
 802a6f4:	f040 0004 	orr.w	r0, r0, #4
 802a6f8:	f884 0020 	strb.w	r0, [r4, #32]
 802a6fc:	bd10      	pop	{r4, pc}
	...

0802a700 <SMP_LTK_Request_Handler>:
 802a700:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802a702:	460c      	mov	r4, r1
 802a704:	4913      	ldr	r1, [pc, #76]	@ (802a754 <__arm_cp.14_0>)
 802a706:	f8ad 2006 	strh.w	r2, [sp, #6]
 802a70a:	f891 1094 	ldrb.w	r1, [r1, #148]	@ 0x94
 802a70e:	07c9      	lsls	r1, r1, #31
 802a710:	bf1c      	itt	ne
 802a712:	2001      	movne	r0, #1
 802a714:	bdbc      	popne	{r2, r3, r4, r5, r7, pc}
 802a716:	f7fe fe55 	bl	80293c4 <SMP_Get_Remote_Device>
 802a71a:	b1c8      	cbz	r0, 802a750 <SMP_LTK_Request_Handler+0x50>
 802a71c:	4605      	mov	r5, r0
 802a71e:	7dc0      	ldrb	r0, [r0, #23]
 802a720:	f895 1020 	ldrb.w	r1, [r5, #32]
 802a724:	28bc      	cmp	r0, #188	@ 0xbc
 802a726:	f041 0110 	orr.w	r1, r1, #16
 802a72a:	f885 1020 	strb.w	r1, [r5, #32]
 802a72e:	d00f      	beq.n	802a750 <SMP_LTK_Request_Handler+0x50>
 802a730:	7fe8      	ldrb	r0, [r5, #31]
 802a732:	0700      	lsls	r0, r0, #28
 802a734:	d40c      	bmi.n	802a750 <SMP_LTK_Request_Handler+0x50>
 802a736:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 802a73a:	4621      	mov	r1, r4
 802a73c:	2208      	movs	r2, #8
 802a73e:	f7f6 f881 	bl	8020844 <ble_memcpy>
 802a742:	f105 003c 	add.w	r0, r5, #60	@ 0x3c
 802a746:	f10d 0106 	add.w	r1, sp, #6
 802a74a:	2202      	movs	r2, #2
 802a74c:	f7f6 f87a 	bl	8020844 <ble_memcpy>
 802a750:	2000      	movs	r0, #0
 802a752:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802a754 <__arm_cp.14_0>:
 802a754:	2000a014 	.word	0x2000a014

0802a758 <SMP_MI_Start_Encryption>:
 802a758:	b510      	push	{r4, lr}
 802a75a:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 802a75e:	4604      	mov	r4, r0
 802a760:	f000 f809 	bl	802a776 <SMP_Crop_Key>
 802a764:	4620      	mov	r0, r4
 802a766:	f7ff fe9f 	bl	802a4a8 <SMP_Reset_Timer>
 802a76a:	4620      	mov	r0, r4
 802a76c:	2100      	movs	r1, #0
 802a76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a772:	f7ff ba3b 	b.w	8029bec <SMP_MI_Enable_Encryption>

0802a776 <SMP_Crop_Key>:
 802a776:	7f82      	ldrb	r2, [r0, #30]
 802a778:	1888      	adds	r0, r1, r2
 802a77a:	f1c2 0110 	rsb	r1, r2, #16
 802a77e:	b28a      	uxth	r2, r1
 802a780:	2100      	movs	r1, #0
 802a782:	f7f6 b8af 	b.w	80208e4 <ble_memset>

0802a786 <SMP_Encryption_Update_Handler>:
 802a786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a78a:	4680      	mov	r8, r0
 802a78c:	4610      	mov	r0, r2
 802a78e:	461e      	mov	r6, r3
 802a790:	4615      	mov	r5, r2
 802a792:	460f      	mov	r7, r1
 802a794:	f7fe fe16 	bl	80293c4 <SMP_Get_Remote_Device>
 802a798:	2800      	cmp	r0, #0
 802a79a:	d040      	beq.n	802a81e <SMP_Encryption_Update_Handler+0x98>
 802a79c:	4604      	mov	r4, r0
 802a79e:	b18f      	cbz	r7, 802a7c4 <SMP_Encryption_Update_Handler+0x3e>
 802a7a0:	4620      	mov	r0, r4
 802a7a2:	f000 f84b 	bl	802a83c <SMP_Stop_Timer>
 802a7a6:	4620      	mov	r0, r4
 802a7a8:	2102      	movs	r1, #2
 802a7aa:	f000 f855 	bl	802a858 <SMP_Pairing_End>
 802a7ae:	f1b8 0f00 	cmp.w	r8, #0
 802a7b2:	d105      	bne.n	802a7c0 <SMP_Encryption_Update_Handler+0x3a>
 802a7b4:	2000      	movs	r0, #0
 802a7b6:	4629      	mov	r1, r5
 802a7b8:	2203      	movs	r2, #3
 802a7ba:	463b      	mov	r3, r7
 802a7bc:	f7f9 f860 	bl	8023880 <EVT_aci_gap_pairing_complete>
 802a7c0:	2000      	movs	r0, #0
 802a7c2:	e01a      	b.n	802a7fa <SMP_Encryption_Update_Handler+0x74>
 802a7c4:	7e20      	ldrb	r0, [r4, #24]
 802a7c6:	b16e      	cbz	r6, 802a7e4 <SMP_Encryption_Update_Handler+0x5e>
 802a7c8:	f040 0110 	orr.w	r1, r0, #16
 802a7cc:	7621      	strb	r1, [r4, #24]
 802a7ce:	7e61      	ldrb	r1, [r4, #25]
 802a7d0:	2902      	cmp	r1, #2
 802a7d2:	d30a      	bcc.n	802a7ea <SMP_Encryption_Update_Handler+0x64>
 802a7d4:	7fe1      	ldrb	r1, [r4, #31]
 802a7d6:	0709      	lsls	r1, r1, #28
 802a7d8:	bf54      	ite	pl
 802a7da:	f040 0030 	orrpl.w	r0, r0, #48	@ 0x30
 802a7de:	f040 0050 	orrmi.w	r0, r0, #80	@ 0x50
 802a7e2:	e001      	b.n	802a7e8 <SMP_Encryption_Update_Handler+0x62>
 802a7e4:	f000 008f 	and.w	r0, r0, #143	@ 0x8f
 802a7e8:	7620      	strb	r0, [r4, #24]
 802a7ea:	7de0      	ldrb	r0, [r4, #23]
 802a7ec:	28ad      	cmp	r0, #173	@ 0xad
 802a7ee:	d003      	beq.n	802a7f8 <SMP_Encryption_Update_Handler+0x72>
 802a7f0:	28f1      	cmp	r0, #241	@ 0xf1
 802a7f2:	d016      	beq.n	802a822 <SMP_Encryption_Update_Handler+0x9c>
 802a7f4:	28bc      	cmp	r0, #188	@ 0xbc
 802a7f6:	d101      	bne.n	802a7fc <SMP_Encryption_Update_Handler+0x76>
 802a7f8:	20cf      	movs	r0, #207	@ 0xcf
 802a7fa:	75e0      	strb	r0, [r4, #23]
 802a7fc:	7fe0      	ldrb	r0, [r4, #31]
 802a7fe:	07c0      	lsls	r0, r0, #31
 802a800:	d107      	bne.n	802a812 <SMP_Encryption_Update_Handler+0x8c>
 802a802:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 802a806:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 802a80a:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
 802a80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a812:	f894 0020 	ldrb.w	r0, [r4, #32]
 802a816:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 802a81a:	f884 0020 	strb.w	r0, [r4, #32]
 802a81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a822:	4620      	mov	r0, r4
 802a824:	f000 f80a 	bl	802a83c <SMP_Stop_Timer>
 802a828:	f1b8 0f00 	cmp.w	r8, #0
 802a82c:	d1e6      	bne.n	802a7fc <SMP_Encryption_Update_Handler+0x76>
 802a82e:	2000      	movs	r0, #0
 802a830:	4629      	mov	r1, r5
 802a832:	2200      	movs	r2, #0
 802a834:	2300      	movs	r3, #0
 802a836:	f7f9 f823 	bl	8023880 <EVT_aci_gap_pairing_complete>
 802a83a:	e7df      	b.n	802a7fc <SMP_Encryption_Update_Handler+0x76>

0802a83c <SMP_Stop_Timer>:
 802a83c:	4905      	ldr	r1, [pc, #20]	@ (802a854 <__arm_cp.18_0>)
 802a83e:	f8d1 10b8 	ldr.w	r1, [r1, #184]	@ 0xb8
 802a842:	1a40      	subs	r0, r0, r1
 802a844:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 802a848:	ea41 10d0 	orr.w	r0, r1, r0, lsr #7
 802a84c:	b280      	uxth	r0, r0
 802a84e:	f7d7 bd87 	b.w	8002360 <BLEPLAT_TimerStop>
 802a852:	bf00      	nop

0802a854 <__arm_cp.18_0>:
 802a854:	2000a014 	.word	0x2000a014

0802a858 <SMP_Pairing_End>:
 802a858:	7dc2      	ldrb	r2, [r0, #23]
 802a85a:	3a20      	subs	r2, #32
 802a85c:	2ac0      	cmp	r2, #192	@ 0xc0
 802a85e:	bf98      	it	ls
 802a860:	f000 be9a 	bls.w	802b598 <SMP_SC_Pairing_End>
 802a864:	4770      	bx	lr
	...

0802a868 <SMP_Key_Dist_Tx_Complete_Handler>:
 802a868:	b510      	push	{r4, lr}
 802a86a:	4604      	mov	r4, r0
 802a86c:	7dc0      	ldrb	r0, [r0, #23]
 802a86e:	28dd      	cmp	r0, #221	@ 0xdd
 802a870:	d126      	bne.n	802a8c0 <SMP_Key_Dist_Tx_Complete_Handler+0x58>
 802a872:	1f88      	subs	r0, r1, #6
 802a874:	2804      	cmp	r0, #4
 802a876:	d823      	bhi.n	802a8c0 <SMP_Key_Dist_Tx_Complete_Handler+0x58>
 802a878:	e8df f000 	tbb	[pc, r0]
 802a87c:	051c0803 	.word	0x051c0803
 802a880:	000e      	.short	0x000e
 802a882:	20d2      	movs	r0, #210	@ 0xd2
 802a884:	e01b      	b.n	802a8be <SMP_Key_Dist_Tx_Complete_Handler+0x56>
 802a886:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802a88a:	e003      	b.n	802a894 <SMP_Key_Dist_Tx_Complete_Handler+0x2c>
 802a88c:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 802a890:	0781      	lsls	r1, r0, #30
 802a892:	d413      	bmi.n	802a8bc <SMP_Key_Dist_Tx_Complete_Handler+0x54>
 802a894:	0740      	lsls	r0, r0, #29
 802a896:	d40f      	bmi.n	802a8b8 <SMP_Key_Dist_Tx_Complete_Handler+0x50>
 802a898:	7fe0      	ldrb	r0, [r4, #31]
 802a89a:	07c0      	lsls	r0, r0, #31
 802a89c:	d005      	beq.n	802a8aa <SMP_Key_Dist_Tx_Complete_Handler+0x42>
 802a89e:	4620      	mov	r0, r4
 802a8a0:	f000 f80f 	bl	802a8c2 <SMP_Key_Dist_Peer_Keys_To_receive>
 802a8a4:	b108      	cbz	r0, 802a8aa <SMP_Key_Dist_Tx_Complete_Handler+0x42>
 802a8a6:	20d0      	movs	r0, #208	@ 0xd0
 802a8a8:	e009      	b.n	802a8be <SMP_Key_Dist_Tx_Complete_Handler+0x56>
 802a8aa:	4620      	mov	r0, r4
 802a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a8b0:	f7ff ba12 	b.w	8029cd8 <SMP_Pairing_Success>
 802a8b4:	20d4      	movs	r0, #212	@ 0xd4
 802a8b6:	e002      	b.n	802a8be <SMP_Key_Dist_Tx_Complete_Handler+0x56>
 802a8b8:	20d5      	movs	r0, #213	@ 0xd5
 802a8ba:	e000      	b.n	802a8be <SMP_Key_Dist_Tx_Complete_Handler+0x56>
 802a8bc:	20d3      	movs	r0, #211	@ 0xd3
 802a8be:	75e0      	strb	r0, [r4, #23]
 802a8c0:	bd10      	pop	{r4, pc}

0802a8c2 <SMP_Key_Dist_Peer_Keys_To_receive>:
 802a8c2:	7fc2      	ldrb	r2, [r0, #31]
 802a8c4:	f890 1022 	ldrb.w	r1, [r0, #34]	@ 0x22
 802a8c8:	0710      	lsls	r0, r2, #28
 802a8ca:	d402      	bmi.n	802a8d2 <SMP_Key_Dist_Peer_Keys_To_receive+0x10>
 802a8cc:	b131      	cbz	r1, 802a8dc <SMP_Key_Dist_Peer_Keys_To_receive+0x1a>
 802a8ce:	2001      	movs	r0, #1
 802a8d0:	4770      	bx	lr
 802a8d2:	2000      	movs	r0, #0
 802a8d4:	2901      	cmp	r1, #1
 802a8d6:	bf88      	it	hi
 802a8d8:	2001      	movhi	r0, #1
 802a8da:	4770      	bx	lr
 802a8dc:	2000      	movs	r0, #0
 802a8de:	4770      	bx	lr

0802a8e0 <SMP_Send_Pairing_Failed>:
 802a8e0:	b570      	push	{r4, r5, r6, lr}
 802a8e2:	460c      	mov	r4, r1
 802a8e4:	2102      	movs	r1, #2
 802a8e6:	4616      	mov	r6, r2
 802a8e8:	4605      	mov	r5, r0
 802a8ea:	f000 fa4b 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802a8ee:	d00a      	beq.n	802a906 <SMP_Send_Pairing_Failed+0x26>
 802a8f0:	2106      	movs	r1, #6
 802a8f2:	2205      	movs	r2, #5
 802a8f4:	8081      	strh	r1, [r0, #4]
 802a8f6:	6a01      	ldr	r1, [r0, #32]
 802a8f8:	710a      	strb	r2, [r1, #4]
 802a8fa:	6a01      	ldr	r1, [r0, #32]
 802a8fc:	714c      	strb	r4, [r1, #5]
 802a8fe:	2100      	movs	r1, #0
 802a900:	f7ff fdbf 	bl	802a482 <SMP_Send_PDU>
 802a904:	e000      	b.n	802a908 <SMP_Send_Pairing_Failed+0x28>
 802a906:	2064      	movs	r0, #100	@ 0x64
 802a908:	b90e      	cbnz	r6, 802a90e <SMP_Send_Pairing_Failed+0x2e>
 802a90a:	b100      	cbz	r0, 802a90e <SMP_Send_Pairing_Failed+0x2e>
 802a90c:	bd70      	pop	{r4, r5, r6, pc}
 802a90e:	4628      	mov	r0, r5
 802a910:	4621      	mov	r1, r4
 802a912:	f000 f802 	bl	802a91a <SMP_Pairing_Failed>
 802a916:	2000      	movs	r0, #0
 802a918:	bd70      	pop	{r4, r5, r6, pc}

0802a91a <SMP_Pairing_Failed>:
 802a91a:	b5b0      	push	{r4, r5, r7, lr}
 802a91c:	460c      	mov	r4, r1
 802a91e:	4605      	mov	r5, r0
 802a920:	f7ff ff8c 	bl	802a83c <SMP_Stop_Timer>
 802a924:	7de8      	ldrb	r0, [r5, #23]
 802a926:	28f1      	cmp	r0, #241	@ 0xf1
 802a928:	d013      	beq.n	802a952 <SMP_Pairing_Failed+0x38>
 802a92a:	4628      	mov	r0, r5
 802a92c:	2102      	movs	r1, #2
 802a92e:	f7ff ff93 	bl	802a858 <SMP_Pairing_End>
 802a932:	8828      	ldrh	r0, [r5, #0]
 802a934:	f7fe fdcc 	bl	80294d0 <SMP_Flush_Rx_Packets>
 802a938:	4628      	mov	r0, r5
 802a93a:	f000 fa2b 	bl	802ad94 <SMP_Rep_Attempts_Protection>
 802a93e:	2000      	movs	r0, #0
 802a940:	7fe9      	ldrb	r1, [r5, #31]
 802a942:	75e8      	strb	r0, [r5, #23]
 802a944:	7f68      	ldrb	r0, [r5, #29]
 802a946:	f001 0101 	and.w	r1, r1, #1
 802a94a:	f000 002f 	and.w	r0, r0, #47	@ 0x2f
 802a94e:	77e9      	strb	r1, [r5, #31]
 802a950:	7768      	strb	r0, [r5, #29]
 802a952:	2000      	movs	r0, #0
 802a954:	8829      	ldrh	r1, [r5, #0]
 802a956:	2202      	movs	r2, #2
 802a958:	4623      	mov	r3, r4
 802a95a:	f885 0020 	strb.w	r0, [r5, #32]
 802a95e:	2001      	movs	r0, #1
 802a960:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802a964:	f7f8 bf8c 	b.w	8023880 <EVT_aci_gap_pairing_complete>

0802a968 <SMP_Timeout_Cb>:
 802a968:	b570      	push	{r4, r5, r6, lr}
 802a96a:	4604      	mov	r4, r0
 802a96c:	01c5      	lsls	r5, r0, #7
 802a96e:	480c      	ldr	r0, [pc, #48]	@ (802a9a0 <__arm_cp.24_0>)
 802a970:	2201      	movs	r2, #1
 802a972:	2300      	movs	r3, #0
 802a974:	f8d0 60b8 	ldr.w	r6, [r0, #184]	@ 0xb8
 802a978:	2001      	movs	r0, #1
 802a97a:	5b71      	ldrh	r1, [r6, r5]
 802a97c:	f7f8 ff80 	bl	8023880 <EVT_aci_gap_pairing_complete>
 802a980:	eb06 14c4 	add.w	r4, r6, r4, lsl #7
 802a984:	2102      	movs	r1, #2
 802a986:	4620      	mov	r0, r4
 802a988:	f7ff ff66 	bl	802a858 <SMP_Pairing_End>
 802a98c:	5b70      	ldrh	r0, [r6, r5]
 802a98e:	f7fe fd9f 	bl	80294d0 <SMP_Flush_Rx_Packets>
 802a992:	4620      	mov	r0, r4
 802a994:	2100      	movs	r1, #0
 802a996:	2280      	movs	r2, #128	@ 0x80
 802a998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a99c:	f7f5 bfa2 	b.w	80208e4 <ble_memset>

0802a9a0 <__arm_cp.24_0>:
 802a9a0:	2000a014 	.word	0x2000a014

0802a9a4 <SMP_Stop_Pairing_At_Disconnect>:
 802a9a4:	b510      	push	{r4, lr}
 802a9a6:	4604      	mov	r4, r0
 802a9a8:	f7ff ff48 	bl	802a83c <SMP_Stop_Timer>
 802a9ac:	4620      	mov	r0, r4
 802a9ae:	2102      	movs	r1, #2
 802a9b0:	f7ff ff52 	bl	802a858 <SMP_Pairing_End>
 802a9b4:	8820      	ldrh	r0, [r4, #0]
 802a9b6:	f7fe fd8b 	bl	80294d0 <SMP_Flush_Rx_Packets>
 802a9ba:	20fe      	movs	r0, #254	@ 0xfe
 802a9bc:	75e0      	strb	r0, [r4, #23]
 802a9be:	bd10      	pop	{r4, pc}

0802a9c0 <SMP_Build_Pairing_Packet>:
 802a9c0:	b5b0      	push	{r4, r5, r7, lr}
 802a9c2:	6a04      	ldr	r4, [r0, #32]
 802a9c4:	7122      	strb	r2, [r4, #4]
 802a9c6:	4a0c      	ldr	r2, [pc, #48]	@ (802a9f8 <__arm_cp.26_0>)
 802a9c8:	6a05      	ldr	r5, [r0, #32]
 802a9ca:	f892 4095 	ldrb.w	r4, [r2, #149]	@ 0x95
 802a9ce:	716c      	strb	r4, [r5, #5]
 802a9d0:	7e89      	ldrb	r1, [r1, #26]
 802a9d2:	6a04      	ldr	r4, [r0, #32]
 802a9d4:	f001 0101 	and.w	r1, r1, #1
 802a9d8:	71a1      	strb	r1, [r4, #6]
 802a9da:	78d9      	ldrb	r1, [r3, #3]
 802a9dc:	6a04      	ldr	r4, [r0, #32]
 802a9de:	71e1      	strb	r1, [r4, #7]
 802a9e0:	f892 108b 	ldrb.w	r1, [r2, #139]	@ 0x8b
 802a9e4:	6a02      	ldr	r2, [r0, #32]
 802a9e6:	7211      	strb	r1, [r2, #8]
 802a9e8:	7919      	ldrb	r1, [r3, #4]
 802a9ea:	6a02      	ldr	r2, [r0, #32]
 802a9ec:	7251      	strb	r1, [r2, #9]
 802a9ee:	7959      	ldrb	r1, [r3, #5]
 802a9f0:	6a00      	ldr	r0, [r0, #32]
 802a9f2:	7281      	strb	r1, [r0, #10]
 802a9f4:	bdb0      	pop	{r4, r5, r7, pc}
 802a9f6:	bf00      	nop

0802a9f8 <__arm_cp.26_0>:
 802a9f8:	2000a014 	.word	0x2000a014

0802a9fc <SMP_Check_Rx_Pairing_Parameters>:
 802a9fc:	6a00      	ldr	r0, [r0, #32]
 802a9fe:	7941      	ldrb	r1, [r0, #5]
 802aa00:	2904      	cmp	r1, #4
 802aa02:	bf9c      	itt	ls
 802aa04:	7981      	ldrbls	r1, [r0, #6]
 802aa06:	2901      	cmpls	r1, #1
 802aa08:	d901      	bls.n	802aa0e <SMP_Check_Rx_Pairing_Parameters+0x12>
 802aa0a:	200a      	movs	r0, #10
 802aa0c:	4770      	bx	lr
 802aa0e:	79c1      	ldrb	r1, [r0, #7]
 802aa10:	0789      	lsls	r1, r1, #30
 802aa12:	d4fa      	bmi.n	802aa0a <SMP_Check_Rx_Pairing_Parameters+0xe>
 802aa14:	4905      	ldr	r1, [pc, #20]	@ (802aa2c <__arm_cp.27_0>)
 802aa16:	7a00      	ldrb	r0, [r0, #8]
 802aa18:	f891 108a 	ldrb.w	r1, [r1, #138]	@ 0x8a
 802aa1c:	4288      	cmp	r0, r1
 802aa1e:	d303      	bcc.n	802aa28 <SMP_Check_Rx_Pairing_Parameters+0x2c>
 802aa20:	2811      	cmp	r0, #17
 802aa22:	bf3c      	itt	cc
 802aa24:	2000      	movcc	r0, #0
 802aa26:	4770      	bxcc	lr
 802aa28:	2006      	movs	r0, #6
 802aa2a:	4770      	bx	lr

0802aa2c <__arm_cp.27_0>:
 802aa2c:	2000a014 	.word	0x2000a014

0802aa30 <SMP_Get_Rx_Pairing_Parameters>:
 802aa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 802aa32:	6a00      	ldr	r0, [r0, #32]
 802aa34:	7943      	ldrb	r3, [r0, #5]
 802aa36:	76cb      	strb	r3, [r1, #27]
 802aa38:	7983      	ldrb	r3, [r0, #6]
 802aa3a:	2b01      	cmp	r3, #1
 802aa3c:	bf02      	ittt	eq
 802aa3e:	7e8b      	ldrbeq	r3, [r1, #26]
 802aa40:	f043 0302 	orreq.w	r3, r3, #2
 802aa44:	768b      	strbeq	r3, [r1, #26]
 802aa46:	79c6      	ldrb	r6, [r0, #7]
 802aa48:	7f0b      	ldrb	r3, [r1, #28]
 802aa4a:	7f4c      	ldrb	r4, [r1, #29]
 802aa4c:	7fcd      	ldrb	r5, [r1, #31]
 802aa4e:	f006 0701 	and.w	r7, r6, #1
 802aa52:	433b      	orrs	r3, r7
 802aa54:	770b      	strb	r3, [r1, #28]
 802aa56:	f006 0304 	and.w	r3, r6, #4
 802aa5a:	4323      	orrs	r3, r4
 802aa5c:	774b      	strb	r3, [r1, #29]
 802aa5e:	7a03      	ldrb	r3, [r0, #8]
 802aa60:	778b      	strb	r3, [r1, #30]
 802aa62:	f015 0301 	ands.w	r3, r5, #1
 802aa66:	7a43      	ldrb	r3, [r0, #9]
 802aa68:	7a80      	ldrb	r0, [r0, #10]
 802aa6a:	4604      	mov	r4, r0
 802aa6c:	bf08      	it	eq
 802aa6e:	461c      	moveq	r4, r3
 802aa70:	f004 0407 	and.w	r4, r4, #7
 802aa74:	f881 4023 	strb.w	r4, [r1, #35]	@ 0x23
 802aa78:	461c      	mov	r4, r3
 802aa7a:	bf08      	it	eq
 802aa7c:	4604      	moveq	r4, r0
 802aa7e:	f004 0407 	and.w	r4, r4, #7
 802aa82:	f881 4022 	strb.w	r4, [r1, #34]	@ 0x22
 802aa86:	7090      	strb	r0, [r2, #2]
 802aa88:	7053      	strb	r3, [r2, #1]
 802aa8a:	7016      	strb	r6, [r2, #0]
 802aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0802aa90 <SMP_Set_Key_Generation_Method>:
 802aa90:	b5b0      	push	{r4, r5, r7, lr}
 802aa92:	7e81      	ldrb	r1, [r0, #26]
 802aa94:	4604      	mov	r4, r0
 802aa96:	07c8      	lsls	r0, r1, #31
 802aa98:	d001      	beq.n	802aa9e <SMP_Set_Key_Generation_Method+0xe>
 802aa9a:	0788      	lsls	r0, r1, #30
 802aa9c:	d420      	bmi.n	802aae0 <SMP_Set_Key_Generation_Method+0x50>
 802aa9e:	7fe0      	ldrb	r0, [r4, #31]
 802aaa0:	f010 0008 	ands.w	r0, r0, #8
 802aaa4:	d004      	beq.n	802aab0 <SMP_Set_Key_Generation_Method+0x20>
 802aaa6:	0789      	lsls	r1, r1, #30
 802aaa8:	d002      	beq.n	802aab0 <SMP_Set_Key_Generation_Method+0x20>
 802aaaa:	2003      	movs	r0, #3
 802aaac:	7660      	strb	r0, [r4, #25]
 802aaae:	e01c      	b.n	802aaea <SMP_Set_Key_Generation_Method+0x5a>
 802aab0:	7f61      	ldrb	r1, [r4, #29]
 802aab2:	f011 0f05 	tst.w	r1, #5
 802aab6:	d011      	beq.n	802aadc <SMP_Set_Key_Generation_Method+0x4c>
 802aab8:	7ee1      	ldrb	r1, [r4, #27]
 802aaba:	4b21      	ldr	r3, [pc, #132]	@ (802ab40 <__arm_cp.29_0>)
 802aabc:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 802aac0:	4413      	add	r3, r2
 802aac2:	4a20      	ldr	r2, [pc, #128]	@ (802ab44 <__arm_cp.29_1>)
 802aac4:	f892 5095 	ldrb.w	r5, [r2, #149]	@ 0x95
 802aac8:	5d5b      	ldrb	r3, [r3, r5]
 802aaca:	7663      	strb	r3, [r4, #25]
 802aacc:	b9a3      	cbnz	r3, 802aaf8 <SMP_Set_Key_Generation_Method+0x68>
 802aace:	b978      	cbnz	r0, 802aaf0 <SMP_Set_Key_Generation_Method+0x60>
 802aad0:	2901      	cmp	r1, #1
 802aad2:	d10f      	bne.n	802aaf4 <SMP_Set_Key_Generation_Method+0x64>
 802aad4:	f892 0095 	ldrb.w	r0, [r2, #149]	@ 0x95
 802aad8:	2801      	cmp	r0, #1
 802aada:	d10b      	bne.n	802aaf4 <SMP_Set_Key_Generation_Method+0x64>
 802aadc:	2001      	movs	r0, #1
 802aade:	e00a      	b.n	802aaf6 <SMP_Set_Key_Generation_Method+0x66>
 802aae0:	2003      	movs	r0, #3
 802aae2:	7660      	strb	r0, [r4, #25]
 802aae4:	7fe0      	ldrb	r0, [r4, #31]
 802aae6:	0700      	lsls	r0, r0, #28
 802aae8:	d506      	bpl.n	802aaf8 <SMP_Set_Key_Generation_Method+0x68>
 802aaea:	f7fe fe11 	bl	8029710 <SMP_Init_OOB_SC>
 802aaee:	e003      	b.n	802aaf8 <SMP_Set_Key_Generation_Method+0x68>
 802aaf0:	2004      	movs	r0, #4
 802aaf2:	e000      	b.n	802aaf6 <SMP_Set_Key_Generation_Method+0x66>
 802aaf4:	2002      	movs	r0, #2
 802aaf6:	7660      	strb	r0, [r4, #25]
 802aaf8:	4812      	ldr	r0, [pc, #72]	@ (802ab44 <__arm_cp.29_1>)
 802aafa:	7e61      	ldrb	r1, [r4, #25]
 802aafc:	f890 2089 	ldrb.w	r2, [r0, #137]	@ 0x89
 802ab00:	07d2      	lsls	r2, r2, #31
 802ab02:	d003      	beq.n	802ab0c <SMP_Set_Key_Generation_Method+0x7c>
 802ab04:	2901      	cmp	r1, #1
 802ab06:	bf04      	itt	eq
 802ab08:	2003      	moveq	r0, #3
 802ab0a:	bdb0      	popeq	{r4, r5, r7, pc}
 802ab0c:	2902      	cmp	r1, #2
 802ab0e:	d114      	bne.n	802ab3a <SMP_Set_Key_Generation_Method+0xaa>
 802ab10:	7fe1      	ldrb	r1, [r4, #31]
 802ab12:	0709      	lsls	r1, r1, #28
 802ab14:	bf44      	itt	mi
 802ab16:	2100      	movmi	r1, #0
 802ab18:	f880 119c 	strbmi.w	r1, [r0, #412]	@ 0x19c
 802ab1c:	f890 0090 	ldrb.w	r0, [r0, #144]	@ 0x90
 802ab20:	b138      	cbz	r0, 802ab32 <SMP_Set_Key_Generation_Method+0xa2>
 802ab22:	8821      	ldrh	r1, [r4, #0]
 802ab24:	2001      	movs	r0, #1
 802ab26:	f7f8 fe67 	bl	80237f8 <EVT_aci_gap_pass_key_req>
 802ab2a:	7f60      	ldrb	r0, [r4, #29]
 802ab2c:	f000 00ef 	and.w	r0, r0, #239	@ 0xef
 802ab30:	e002      	b.n	802ab38 <SMP_Set_Key_Generation_Method+0xa8>
 802ab32:	7f60      	ldrb	r0, [r4, #29]
 802ab34:	f040 0010 	orr.w	r0, r0, #16
 802ab38:	7760      	strb	r0, [r4, #29]
 802ab3a:	2000      	movs	r0, #0
 802ab3c:	bdb0      	pop	{r4, r5, r7, pc}
 802ab3e:	bf00      	nop

0802ab40 <__arm_cp.29_0>:
 802ab40:	0802e7ec 	.word	0x0802e7ec

0802ab44 <__arm_cp.29_1>:
 802ab44:	2000a014 	.word	0x2000a014

0802ab48 <SMP_MI_Send_Pairing_Confirm>:
 802ab48:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 802ab4a:	2111      	movs	r1, #17
 802ab4c:	4604      	mov	r4, r0
 802ab4e:	f000 f919 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802ab52:	d016      	beq.n	802ab82 <SMP_MI_Send_Pairing_Confirm+0x3a>
 802ab54:	4605      	mov	r5, r0
 802ab56:	7fe0      	ldrb	r0, [r4, #31]
 802ab58:	466a      	mov	r2, sp
 802ab5a:	0700      	lsls	r0, r0, #28
 802ab5c:	d404      	bmi.n	802ab68 <SMP_MI_Send_Pairing_Confirm+0x20>
 802ab5e:	4620      	mov	r0, r4
 802ab60:	2100      	movs	r1, #0
 802ab62:	f000 f82b 	bl	802abbc <SMP_LP_Compute_Confirm_Value>
 802ab66:	e003      	b.n	802ab70 <SMP_MI_Send_Pairing_Confirm+0x28>
 802ab68:	4620      	mov	r0, r4
 802ab6a:	2100      	movs	r1, #0
 802ab6c:	f000 fc1e 	bl	802b3ac <SMP_SC_Compute_Confirm_Value>
 802ab70:	6a28      	ldr	r0, [r5, #32]
 802ab72:	2103      	movs	r1, #3
 802ab74:	466b      	mov	r3, sp
 802ab76:	f000 f8ec 	bl	802ad52 <OUTLINED_FUNCTION_1>
 802ab7a:	4628      	mov	r0, r5
 802ab7c:	f000 f8f6 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802ab80:	b100      	cbz	r0, 802ab84 <SMP_MI_Send_Pairing_Confirm+0x3c>
 802ab82:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
 802ab84:	2082      	movs	r0, #130	@ 0x82
 802ab86:	75e0      	strb	r0, [r4, #23]
 802ab88:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}

0802ab8a <SMP_MI_Send_Pairing_Random>:
 802ab8a:	b5b0      	push	{r4, r5, r7, lr}
 802ab8c:	2111      	movs	r1, #17
 802ab8e:	4604      	mov	r4, r0
 802ab90:	f000 f8f8 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802ab94:	d00b      	beq.n	802abae <SMP_MI_Send_Pairing_Random+0x24>
 802ab96:	4605      	mov	r5, r0
 802ab98:	6a00      	ldr	r0, [r0, #32]
 802ab9a:	2104      	movs	r1, #4
 802ab9c:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 802aba0:	f000 f8d7 	bl	802ad52 <OUTLINED_FUNCTION_1>
 802aba4:	4628      	mov	r0, r5
 802aba6:	f000 f8e1 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802abaa:	b110      	cbz	r0, 802abb2 <SMP_MI_Send_Pairing_Random+0x28>
 802abac:	bdb0      	pop	{r4, r5, r7, pc}
 802abae:	2064      	movs	r0, #100	@ 0x64
 802abb0:	bdb0      	pop	{r4, r5, r7, pc}
 802abb2:	2083      	movs	r0, #131	@ 0x83
 802abb4:	75e0      	strb	r0, [r4, #23]
 802abb6:	2000      	movs	r0, #0
 802abb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802abbc <SMP_LP_Compute_Confirm_Value>:
 802abbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802abc0:	b08b      	sub	sp, #44	@ 0x2c
 802abc2:	466f      	mov	r7, sp
 802abc4:	4689      	mov	r9, r1
 802abc6:	4690      	mov	r8, r2
 802abc8:	4605      	mov	r5, r0
 802abca:	4639      	mov	r1, r7
 802abcc:	f000 f864 	bl	802ac98 <SMP_LP_Get_TK>
 802abd0:	7fea      	ldrb	r2, [r5, #31]
 802abd2:	f105 010a 	add.w	r1, r5, #10
 802abd6:	f107 0617 	add.w	r6, r7, #23
 802abda:	f107 0410 	add.w	r4, r7, #16
 802abde:	7a68      	ldrb	r0, [r5, #9]
 802abe0:	07d2      	lsls	r2, r2, #31
 802abe2:	d10d      	bne.n	802ac00 <SMP_LP_Compute_Confirm_Value+0x44>
 802abe4:	f88d 001e 	strb.w	r0, [sp, #30]
 802abe8:	f107 001f 	add.w	r0, r7, #31
 802abec:	2206      	movs	r2, #6
 802abee:	f7f5 fe29 	bl	8020844 <ble_memcpy>
 802abf2:	78a8      	ldrb	r0, [r5, #2]
 802abf4:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 802abf8:	f107 0026 	add.w	r0, r7, #38	@ 0x26
 802abfc:	4637      	mov	r7, r6
 802abfe:	e00d      	b.n	802ac1c <SMP_LP_Compute_Confirm_Value+0x60>
 802ac00:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 802ac04:	f107 0026 	add.w	r0, r7, #38	@ 0x26
 802ac08:	2206      	movs	r2, #6
 802ac0a:	f7f5 fe1b 	bl	8020844 <ble_memcpy>
 802ac0e:	78a8      	ldrb	r0, [r5, #2]
 802ac10:	f88d 001e 	strb.w	r0, [sp, #30]
 802ac14:	f107 001f 	add.w	r0, r7, #31
 802ac18:	4627      	mov	r7, r4
 802ac1a:	4634      	mov	r4, r6
 802ac1c:	1ce9      	adds	r1, r5, #3
 802ac1e:	2206      	movs	r2, #6
 802ac20:	f7f5 fe10 	bl	8020844 <ble_memcpy>
 802ac24:	2002      	movs	r0, #2
 802ac26:	7ee9      	ldrb	r1, [r5, #27]
 802ac28:	f895 3050 	ldrb.w	r3, [r5, #80]	@ 0x50
 802ac2c:	7faa      	ldrb	r2, [r5, #30]
 802ac2e:	f88d 0017 	strb.w	r0, [sp, #23]
 802ac32:	2001      	movs	r0, #1
 802ac34:	f88d 0010 	strb.w	r0, [sp, #16]
 802ac38:	7079      	strb	r1, [r7, #1]
 802ac3a:	f895 1051 	ldrb.w	r1, [r5, #81]	@ 0x51
 802ac3e:	7ea8      	ldrb	r0, [r5, #26]
 802ac40:	713a      	strb	r2, [r7, #4]
 802ac42:	70fb      	strb	r3, [r7, #3]
 802ac44:	4642      	mov	r2, r8
 802ac46:	7179      	strb	r1, [r7, #5]
 802ac48:	f895 1052 	ldrb.w	r1, [r5, #82]	@ 0x52
 802ac4c:	71b9      	strb	r1, [r7, #6]
 802ac4e:	f3c0 0140 	ubfx	r1, r0, #1, #1
 802ac52:	f000 0001 	and.w	r0, r0, #1
 802ac56:	70a0      	strb	r0, [r4, #2]
 802ac58:	f895 0053 	ldrb.w	r0, [r5, #83]	@ 0x53
 802ac5c:	70b9      	strb	r1, [r7, #2]
 802ac5e:	70e0      	strb	r0, [r4, #3]
 802ac60:	480c      	ldr	r0, [pc, #48]	@ (802ac94 <__arm_cp.32_0>)
 802ac62:	f890 1095 	ldrb.w	r1, [r0, #149]	@ 0x95
 802ac66:	f890 008b 	ldrb.w	r0, [r0, #139]	@ 0x8b
 802ac6a:	7120      	strb	r0, [r4, #4]
 802ac6c:	f895 0054 	ldrb.w	r0, [r5, #84]	@ 0x54
 802ac70:	7061      	strb	r1, [r4, #1]
 802ac72:	f105 0170 	add.w	r1, r5, #112	@ 0x70
 802ac76:	7160      	strb	r0, [r4, #5]
 802ac78:	f895 0055 	ldrb.w	r0, [r5, #85]	@ 0x55
 802ac7c:	71a0      	strb	r0, [r4, #6]
 802ac7e:	ea5f 7089 	movs.w	r0, r9, lsl #30
 802ac82:	bf58      	it	pl
 802ac84:	f105 0160 	addpl.w	r1, r5, #96	@ 0x60
 802ac88:	4668      	mov	r0, sp
 802ac8a:	f7fe f8cb 	bl	8028e24 <SMA_Compute_Confirm_Value>
 802ac8e:	b00b      	add	sp, #44	@ 0x2c
 802ac90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0802ac94 <__arm_cp.32_0>:
 802ac94:	2000a014 	.word	0x2000a014

0802ac98 <SMP_LP_Get_TK>:
 802ac98:	b5b0      	push	{r4, r5, r7, lr}
 802ac9a:	4605      	mov	r5, r0
 802ac9c:	460c      	mov	r4, r1
 802ac9e:	4608      	mov	r0, r1
 802aca0:	2100      	movs	r1, #0
 802aca2:	2210      	movs	r2, #16
 802aca4:	f7f5 fe1e 	bl	80208e4 <ble_memset>
 802aca8:	7e68      	ldrb	r0, [r5, #25]
 802acaa:	2803      	cmp	r0, #3
 802acac:	d00c      	beq.n	802acc8 <SMP_LP_Get_TK+0x30>
 802acae:	2802      	cmp	r0, #2
 802acb0:	d109      	bne.n	802acc6 <SMP_LP_Get_TK+0x2e>
 802acb2:	480a      	ldr	r0, [pc, #40]	@ (802acdc <__arm_cp.33_0>)
 802acb4:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 802acb8:	0e01      	lsrs	r1, r0, #24
 802acba:	7020      	strb	r0, [r4, #0]
 802acbc:	70e1      	strb	r1, [r4, #3]
 802acbe:	0c01      	lsrs	r1, r0, #16
 802acc0:	0a00      	lsrs	r0, r0, #8
 802acc2:	70a1      	strb	r1, [r4, #2]
 802acc4:	7060      	strb	r0, [r4, #1]
 802acc6:	bdb0      	pop	{r4, r5, r7, pc}
 802acc8:	4804      	ldr	r0, [pc, #16]	@ (802acdc <__arm_cp.33_0>)
 802acca:	2210      	movs	r2, #16
 802accc:	f100 0198 	add.w	r1, r0, #152	@ 0x98
 802acd0:	4620      	mov	r0, r4
 802acd2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802acd6:	f7f5 bdb5 	b.w	8020844 <ble_memcpy>
 802acda:	bf00      	nop

0802acdc <__arm_cp.33_0>:
 802acdc:	2000a014 	.word	0x2000a014

0802ace0 <SMP_LP_Generate_STK>:
 802ace0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 802ace2:	466d      	mov	r5, sp
 802ace4:	4604      	mov	r4, r0
 802ace6:	4629      	mov	r1, r5
 802ace8:	f7ff ffd6 	bl	802ac98 <SMP_LP_Get_TK>
 802acec:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802acf0:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 802acf4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 802acf8:	4628      	mov	r0, r5
 802acfa:	f7fe f87b 	bl	8028df4 <SMA_Generate_STK>
 802acfe:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}

0802ad00 <SMP_SR_Send_Pairing_Confirm>:
 802ad00:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
 802ad02:	2111      	movs	r1, #17
 802ad04:	4604      	mov	r4, r0
 802ad06:	f000 f83d 	bl	802ad84 <OUTLINED_FUNCTION_6>
 802ad0a:	d009      	beq.n	802ad20 <SMP_SR_Send_Pairing_Confirm+0x20>
 802ad0c:	4605      	mov	r5, r0
 802ad0e:	7fe0      	ldrb	r0, [r4, #31]
 802ad10:	466a      	mov	r2, sp
 802ad12:	0700      	lsls	r0, r0, #28
 802ad14:	d406      	bmi.n	802ad24 <SMP_SR_Send_Pairing_Confirm+0x24>
 802ad16:	4620      	mov	r0, r4
 802ad18:	2102      	movs	r1, #2
 802ad1a:	f7ff ff4f 	bl	802abbc <SMP_LP_Compute_Confirm_Value>
 802ad1e:	e005      	b.n	802ad2c <SMP_SR_Send_Pairing_Confirm+0x2c>
 802ad20:	2064      	movs	r0, #100	@ 0x64
 802ad22:	e00f      	b.n	802ad44 <SMP_SR_Send_Pairing_Confirm+0x44>
 802ad24:	4620      	mov	r0, r4
 802ad26:	2102      	movs	r1, #2
 802ad28:	f000 fb40 	bl	802b3ac <SMP_SC_Compute_Confirm_Value>
 802ad2c:	6a28      	ldr	r0, [r5, #32]
 802ad2e:	2103      	movs	r1, #3
 802ad30:	466b      	mov	r3, sp
 802ad32:	f000 f80e 	bl	802ad52 <OUTLINED_FUNCTION_1>
 802ad36:	4628      	mov	r0, r5
 802ad38:	f000 f818 	bl	802ad6c <OUTLINED_FUNCTION_3>
 802ad3c:	b910      	cbnz	r0, 802ad44 <SMP_SR_Send_Pairing_Confirm+0x44>
 802ad3e:	2083      	movs	r0, #131	@ 0x83
 802ad40:	75e0      	strb	r0, [r4, #23]
 802ad42:	2000      	movs	r0, #0
 802ad44:	b004      	add	sp, #16
 802ad46:	bdb0      	pop	{r4, r5, r7, pc}

0802ad48 <OUTLINED_FUNCTION_0>:
 802ad48:	4628      	mov	r0, r5
 802ad4a:	2105      	movs	r1, #5
 802ad4c:	2210      	movs	r2, #16
 802ad4e:	f7fd bd6a 	b.w	8028826 <ACL_Get_Data>

0802ad52 <OUTLINED_FUNCTION_1>:
 802ad52:	2210      	movs	r2, #16
 802ad54:	7101      	strb	r1, [r0, #4]
 802ad56:	4628      	mov	r0, r5
 802ad58:	2105      	movs	r1, #5
 802ad5a:	f7fd bd84 	b.w	8028866 <ACL_Set_Data>

0802ad5e <OUTLINED_FUNCTION_2>:
 802ad5e:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 802ad62:	f001 01fb 	and.w	r1, r1, #251	@ 0xfb
 802ad66:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 802ad6a:	4770      	bx	lr

0802ad6c <OUTLINED_FUNCTION_3>:
 802ad6c:	4621      	mov	r1, r4
 802ad6e:	f7ff bb88 	b.w	802a482 <SMP_Send_PDU>

0802ad72 <OUTLINED_FUNCTION_4>:
 802ad72:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802ad76:	4628      	mov	r0, r5
 802ad78:	2210      	movs	r2, #16
 802ad7a:	f7f5 bdeb 	b.w	8020954 <ble_memcmp>

0802ad7e <OUTLINED_FUNCTION_5>:
 802ad7e:	2210      	movs	r2, #16
 802ad80:	f7f5 bd60 	b.w	8020844 <ble_memcpy>

0802ad84 <OUTLINED_FUNCTION_6>:
 802ad84:	f84d ed08 	str.w	lr, [sp, #-8]!
 802ad88:	f7ff fb74 	bl	802a474 <SMP_New_PDU>
 802ad8c:	2800      	cmp	r0, #0
 802ad8e:	f85d eb08 	ldr.w	lr, [sp], #8
 802ad92:	4770      	bx	lr

0802ad94 <SMP_Rep_Attempts_Protection>:
 802ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ad96:	493b      	ldr	r1, [pc, #236]	@ (802ae84 <__arm_cp.0_0>)
 802ad98:	f891 2094 	ldrb.w	r2, [r1, #148]	@ 0x94
 802ad9c:	0792      	lsls	r2, r2, #30
 802ad9e:	d40c      	bmi.n	802adba <SMP_Rep_Attempts_Protection+0x26>
 802ada0:	7dc2      	ldrb	r2, [r0, #23]
 802ada2:	2af1      	cmp	r2, #241	@ 0xf1
 802ada4:	d009      	beq.n	802adba <SMP_Rep_Attempts_Protection+0x26>
 802ada6:	7fc3      	ldrb	r3, [r0, #31]
 802ada8:	07dc      	lsls	r4, r3, #31
 802adaa:	f04f 0482 	mov.w	r4, #130	@ 0x82
 802adae:	bf08      	it	eq
 802adb0:	2480      	moveq	r4, #128	@ 0x80
 802adb2:	4294      	cmp	r4, r2
 802adb4:	d302      	bcc.n	802adbc <SMP_Rep_Attempts_Protection+0x28>
 802adb6:	2b40      	cmp	r3, #64	@ 0x40
 802adb8:	d200      	bcs.n	802adbc <SMP_Rep_Attempts_Protection+0x28>
 802adba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802adbc:	7e02      	ldrb	r2, [r0, #24]
 802adbe:	f101 06bc 	add.w	r6, r1, #188	@ 0xbc
 802adc2:	1cc4      	adds	r4, r0, #3
 802adc4:	2700      	movs	r7, #0
 802adc6:	f042 0201 	orr.w	r2, r2, #1
 802adca:	4635      	mov	r5, r6
 802adcc:	7602      	strb	r2, [r0, #24]
 802adce:	1cf8      	adds	r0, r7, #3
 802add0:	d008      	beq.n	802ade4 <SMP_Rep_Attempts_Protection+0x50>
 802add2:	1ca8      	adds	r0, r5, #2
 802add4:	4621      	mov	r1, r4
 802add6:	2206      	movs	r2, #6
 802add8:	f7f5 fdbc 	bl	8020954 <ble_memcmp>
 802addc:	b158      	cbz	r0, 802adf6 <SMP_Rep_Attempts_Protection+0x62>
 802adde:	3508      	adds	r5, #8
 802ade0:	3f01      	subs	r7, #1
 802ade2:	e7f4      	b.n	802adce <SMP_Rep_Attempts_Protection+0x3a>
 802ade4:	2500      	movs	r5, #0
 802ade6:	4630      	mov	r0, r6
 802ade8:	2d03      	cmp	r5, #3
 802adea:	d01b      	beq.n	802ae24 <SMP_Rep_Attempts_Protection+0x90>
 802adec:	7801      	ldrb	r1, [r0, #0]
 802adee:	b319      	cbz	r1, 802ae38 <SMP_Rep_Attempts_Protection+0xa4>
 802adf0:	3008      	adds	r0, #8
 802adf2:	3501      	adds	r5, #1
 802adf4:	e7f8      	b.n	802ade8 <SMP_Rep_Attempts_Protection+0x54>
 802adf6:	427c      	negs	r4, r7
 802adf8:	200d      	movs	r0, #13
 802adfa:	f360 241f 	bfi	r4, r0, #8, #24
 802adfe:	4620      	mov	r0, r4
 802ae00:	f7d7 faae 	bl	8002360 <BLEPLAT_TimerStop>
 802ae04:	7829      	ldrb	r1, [r5, #0]
 802ae06:	f001 003f 	and.w	r0, r1, #63	@ 0x3f
 802ae0a:	f060 027f 	orn	r2, r0, #127	@ 0x7f
 802ae0e:	0793      	lsls	r3, r2, #30
 802ae10:	702a      	strb	r2, [r5, #0]
 802ae12:	d413      	bmi.n	802ae3c <SMP_Rep_Attempts_Protection+0xa8>
 802ae14:	b2d2      	uxtb	r2, r2
 802ae16:	07d2      	lsls	r2, r2, #31
 802ae18:	d114      	bne.n	802ae44 <SMP_Rep_Attempts_Protection+0xb0>
 802ae1a:	f060 007e 	orn	r0, r0, #126	@ 0x7e
 802ae1e:	f643 2198 	movw	r1, #15000	@ 0x3a98
 802ae22:	e015      	b.n	802ae50 <SMP_Rep_Attempts_Protection+0xbc>
 802ae24:	2500      	movs	r5, #0
 802ae26:	4630      	mov	r0, r6
 802ae28:	2d03      	cmp	r5, #3
 802ae2a:	d014      	beq.n	802ae56 <SMP_Rep_Attempts_Protection+0xc2>
 802ae2c:	7801      	ldrb	r1, [r0, #0]
 802ae2e:	0649      	lsls	r1, r1, #25
 802ae30:	d402      	bmi.n	802ae38 <SMP_Rep_Attempts_Protection+0xa4>
 802ae32:	3008      	adds	r0, #8
 802ae34:	3501      	adds	r5, #1
 802ae36:	e7f7      	b.n	802ae28 <SMP_Rep_Attempts_Protection+0x94>
 802ae38:	4606      	mov	r6, r0
 802ae3a:	e011      	b.n	802ae60 <SMP_Rep_Attempts_Protection+0xcc>
 802ae3c:	f060 007e 	orn	r0, r0, #126	@ 0x7e
 802ae40:	4911      	ldr	r1, [pc, #68]	@ (802ae88 <__arm_cp.0_1>)
 802ae42:	e005      	b.n	802ae50 <SMP_Rep_Attempts_Protection+0xbc>
 802ae44:	f001 003c 	and.w	r0, r1, #60	@ 0x3c
 802ae48:	f64a 71c8 	movw	r1, #45000	@ 0xafc8
 802ae4c:	f060 007d 	orn	r0, r0, #125	@ 0x7d
 802ae50:	7028      	strb	r0, [r5, #0]
 802ae52:	b2a0      	uxth	r0, r4
 802ae54:	e011      	b.n	802ae7a <SMP_Rep_Attempts_Protection+0xe6>
 802ae56:	f44f 6050 	mov.w	r0, #3328	@ 0xd00
 802ae5a:	f7d7 fa81 	bl	8002360 <BLEPLAT_TimerStop>
 802ae5e:	2500      	movs	r5, #0
 802ae60:	1cb0      	adds	r0, r6, #2
 802ae62:	4621      	mov	r1, r4
 802ae64:	2206      	movs	r2, #6
 802ae66:	f7f5 fced 	bl	8020844 <ble_memcpy>
 802ae6a:	2080      	movs	r0, #128	@ 0x80
 802ae6c:	f241 3188 	movw	r1, #5000	@ 0x1388
 802ae70:	7030      	strb	r0, [r6, #0]
 802ae72:	200d      	movs	r0, #13
 802ae74:	f360 251f 	bfi	r5, r0, #8, #24
 802ae78:	4628      	mov	r0, r5
 802ae7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ae7e:	f7d7 ba6d 	b.w	800235c <BLEPLAT_TimerStart>
 802ae82:	bf00      	nop

0802ae84 <__arm_cp.0_0>:
 802ae84:	2000a014 	.word	0x2000a014

0802ae88 <__arm_cp.0_1>:
 802ae88:	00020f58 	.word	0x00020f58

0802ae8c <SMP_Rep_Attempts_Timeout_Cb>:
 802ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ae90:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 802aee8 <__arm_cp.1_0>
 802ae94:	2201      	movs	r2, #1
 802ae96:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 802aeec <__arm_cp.1_1>
 802ae9a:	2700      	movs	r7, #0
 802ae9c:	2600      	movs	r6, #0
 802ae9e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
 802aea2:	f890 10bc 	ldrb.w	r1, [r0, #188]	@ 0xbc
 802aea6:	f100 04be 	add.w	r4, r0, #190	@ 0xbe
 802aeaa:	f362 119f 	bfi	r1, r2, #6, #26
 802aeae:	f880 10bc 	strb.w	r1, [r0, #188]	@ 0xbc
 802aeb2:	f898 1016 	ldrb.w	r1, [r8, #22]
 802aeb6:	428e      	cmp	r6, r1
 802aeb8:	bf28      	it	cs
 802aeba:	e8bd 83f8 	ldmiacs.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802aebe:	f8d9 00b8 	ldr.w	r0, [r9, #184]	@ 0xb8
 802aec2:	5bc2      	ldrh	r2, [r0, r7]
 802aec4:	b162      	cbz	r2, 802aee0 <SMP_Rep_Attempts_Timeout_Cb+0x54>
 802aec6:	19c5      	adds	r5, r0, r7
 802aec8:	4621      	mov	r1, r4
 802aeca:	2206      	movs	r2, #6
 802aecc:	1ce8      	adds	r0, r5, #3
 802aece:	f7f5 fd41 	bl	8020954 <ble_memcmp>
 802aed2:	f898 1016 	ldrb.w	r1, [r8, #22]
 802aed6:	b918      	cbnz	r0, 802aee0 <SMP_Rep_Attempts_Timeout_Cb+0x54>
 802aed8:	7e28      	ldrb	r0, [r5, #24]
 802aeda:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 802aede:	7628      	strb	r0, [r5, #24]
 802aee0:	3780      	adds	r7, #128	@ 0x80
 802aee2:	3601      	adds	r6, #1
 802aee4:	e7e7      	b.n	802aeb6 <SMP_Rep_Attempts_Timeout_Cb+0x2a>
 802aee6:	bf00      	nop

0802aee8 <__arm_cp.1_0>:
 802aee8:	2000a014 	.word	0x2000a014

0802aeec <__arm_cp.1_1>:
 802aeec:	20009fec 	.word	0x20009fec

0802aef0 <SMP_Get_Rep_Attempts_Timeout_Status>:
 802aef0:	2100      	movs	r1, #0
 802aef2:	f000 b801 	b.w	802aef8 <SMP_Search_Rep_Attempts_List>
	...

0802aef8 <SMP_Search_Rep_Attempts_List>:
 802aef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aefa:	4607      	mov	r7, r0
 802aefc:	4812      	ldr	r0, [pc, #72]	@ (802af48 <__arm_cp.3_0>)
 802aefe:	460e      	mov	r6, r1
 802af00:	2500      	movs	r5, #0
 802af02:	f100 04bc 	add.w	r4, r0, #188	@ 0xbc
 802af06:	2d03      	cmp	r5, #3
 802af08:	d019      	beq.n	802af3e <SMP_Search_Rep_Attempts_List+0x46>
 802af0a:	1ca0      	adds	r0, r4, #2
 802af0c:	4639      	mov	r1, r7
 802af0e:	2206      	movs	r2, #6
 802af10:	f7f5 fd20 	bl	8020954 <ble_memcmp>
 802af14:	b110      	cbz	r0, 802af1c <SMP_Search_Rep_Attempts_List+0x24>
 802af16:	3408      	adds	r4, #8
 802af18:	3501      	adds	r5, #1
 802af1a:	e7f4      	b.n	802af06 <SMP_Search_Rep_Attempts_List+0xe>
 802af1c:	b15e      	cbz	r6, 802af36 <SMP_Search_Rep_Attempts_List+0x3e>
 802af1e:	200d      	movs	r0, #13
 802af20:	f360 251f 	bfi	r5, r0, #8, #24
 802af24:	4628      	mov	r0, r5
 802af26:	f7d7 fa1b 	bl	8002360 <BLEPLAT_TimerStop>
 802af2a:	4620      	mov	r0, r4
 802af2c:	2100      	movs	r1, #0
 802af2e:	2208      	movs	r2, #8
 802af30:	f7f5 fcd8 	bl	80208e4 <ble_memset>
 802af34:	e003      	b.n	802af3e <SMP_Search_Rep_Attempts_List+0x46>
 802af36:	f994 0000 	ldrsb.w	r0, [r4]
 802af3a:	2800      	cmp	r0, #0
 802af3c:	d401      	bmi.n	802af42 <SMP_Search_Rep_Attempts_List+0x4a>
 802af3e:	2000      	movs	r0, #0
 802af40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802af42:	2001      	movs	r0, #1
 802af44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802af46:	bf00      	nop

0802af48 <__arm_cp.3_0>:
 802af48:	2000a014 	.word	0x2000a014

0802af4c <SMP_Clear_Rep_Attempts_Timeout_Status>:
 802af4c:	2101      	movs	r1, #1
 802af4e:	f7ff bfd3 	b.w	802aef8 <SMP_Search_Rep_Attempts_List>
	...

0802af54 <SMP_SC_Pairing_Start>:
 802af54:	b510      	push	{r4, lr}
 802af56:	4604      	mov	r4, r0
 802af58:	8800      	ldrh	r0, [r0, #0]
 802af5a:	f000 f813 	bl	802af84 <SMP_Is_Another_SC_Pairing_Ongoing>
 802af5e:	b108      	cbz	r0, 802af64 <SMP_SC_Pairing_Start+0x10>
 802af60:	2005      	movs	r0, #5
 802af62:	bd10      	pop	{r4, pc}
 802af64:	7fe0      	ldrb	r0, [r4, #31]
 802af66:	f040 0002 	orr.w	r0, r0, #2
 802af6a:	77e0      	strb	r0, [r4, #31]
 802af6c:	4804      	ldr	r0, [pc, #16]	@ (802af80 <__arm_cp.0_0>)
 802af6e:	f890 1096 	ldrb.w	r1, [r0, #150]	@ 0x96
 802af72:	f041 0104 	orr.w	r1, r1, #4
 802af76:	f880 1096 	strb.w	r1, [r0, #150]	@ 0x96
 802af7a:	2000      	movs	r0, #0
 802af7c:	bd10      	pop	{r4, pc}
 802af7e:	bf00      	nop

0802af80 <__arm_cp.0_0>:
 802af80:	2000a014 	.word	0x2000a014

0802af84 <SMP_Is_Another_SC_Pairing_Ongoing>:
 802af84:	b510      	push	{r4, lr}
 802af86:	4a0d      	ldr	r2, [pc, #52]	@ (802afbc <__arm_cp.1_1>)
 802af88:	490b      	ldr	r1, [pc, #44]	@ (802afb8 <__arm_cp.1_0>)
 802af8a:	f8d2 20b8 	ldr.w	r2, [r2, #184]	@ 0xb8
 802af8e:	7d89      	ldrb	r1, [r1, #22]
 802af90:	f102 031f 	add.w	r3, r2, #31
 802af94:	2200      	movs	r2, #0
 802af96:	4291      	cmp	r1, r2
 802af98:	d009      	beq.n	802afae <SMP_Is_Another_SC_Pairing_Ongoing+0x2a>
 802af9a:	f833 4c1f 	ldrh.w	r4, [r3, #-31]
 802af9e:	4284      	cmp	r4, r0
 802afa0:	d002      	beq.n	802afa8 <SMP_Is_Another_SC_Pairing_Ongoing+0x24>
 802afa2:	781c      	ldrb	r4, [r3, #0]
 802afa4:	07a4      	lsls	r4, r4, #30
 802afa6:	d402      	bmi.n	802afae <SMP_Is_Another_SC_Pairing_Ongoing+0x2a>
 802afa8:	3380      	adds	r3, #128	@ 0x80
 802afaa:	3201      	adds	r2, #1
 802afac:	e7f3      	b.n	802af96 <SMP_Is_Another_SC_Pairing_Ongoing+0x12>
 802afae:	2000      	movs	r0, #0
 802afb0:	428a      	cmp	r2, r1
 802afb2:	bf38      	it	cc
 802afb4:	2001      	movcc	r0, #1
 802afb6:	bd10      	pop	{r4, pc}

0802afb8 <__arm_cp.1_0>:
 802afb8:	20009fec 	.word	0x20009fec

0802afbc <__arm_cp.1_1>:
 802afbc:	2000a014 	.word	0x2000a014

0802afc0 <SMP_SC_Keypress_Notification_Rx_Handler>:
 802afc0:	b580      	push	{r7, lr}
 802afc2:	7fca      	ldrb	r2, [r1, #31]
 802afc4:	06d2      	lsls	r2, r2, #27
 802afc6:	d505      	bpl.n	802afd4 <SMP_SC_Keypress_Notification_Rx_Handler+0x14>
 802afc8:	7e4a      	ldrb	r2, [r1, #25]
 802afca:	2a02      	cmp	r2, #2
 802afcc:	bf04      	itt	eq
 802afce:	7eca      	ldrbeq	r2, [r1, #27]
 802afd0:	2a02      	cmpeq	r2, #2
 802afd2:	d001      	beq.n	802afd8 <SMP_SC_Keypress_Notification_Rx_Handler+0x18>
 802afd4:	2000      	movs	r0, #0
 802afd6:	bd80      	pop	{r7, pc}
 802afd8:	f991 2017 	ldrsb.w	r2, [r1, #23]
 802afdc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 802afe0:	dcf8      	bgt.n	802afd4 <SMP_SC_Keypress_Notification_Rx_Handler+0x14>
 802afe2:	6a00      	ldr	r0, [r0, #32]
 802afe4:	8809      	ldrh	r1, [r1, #0]
 802afe6:	7942      	ldrb	r2, [r0, #5]
 802afe8:	2001      	movs	r0, #1
 802afea:	f7f8 fc1d 	bl	8023828 <EVT_aci_gap_keypress_notification>
 802afee:	e7f1      	b.n	802afd4 <SMP_SC_Keypress_Notification_Rx_Handler+0x14>

0802aff0 <SMP_SC_Public_Key_Generation_Process>:
 802aff0:	b510      	push	{r4, lr}
 802aff2:	4c09      	ldr	r4, [pc, #36]	@ (802b018 <__arm_cp.4_0>)
 802aff4:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 802aff8:	f000 00d0 	and.w	r0, r0, #208	@ 0xd0
 802affc:	2840      	cmp	r0, #64	@ 0x40
 802affe:	d102      	bne.n	802b006 <SMP_SC_Public_Key_Generation_Process+0x16>
 802b000:	f7f9 fb42 	bl	8024688 <HCI_LE_READ_LOCAL_P256_PUBLIC_KEY>
 802b004:	b100      	cbz	r0, 802b008 <SMP_SC_Public_Key_Generation_Process+0x18>
 802b006:	bd10      	pop	{r4, pc}
 802b008:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 802b00c:	2102      	movs	r1, #2
 802b00e:	f361 109f 	bfi	r0, r1, #6, #26
 802b012:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
 802b016:	bd10      	pop	{r4, pc}

0802b018 <__arm_cp.4_0>:
 802b018:	2000a014 	.word	0x2000a014

0802b01c <SMP_Read_Local_P256key_Complete_Handler>:
 802b01c:	4a08      	ldr	r2, [pc, #32]	@ (802b040 <__arm_cp.5_0>)
 802b01e:	f892 3096 	ldrb.w	r3, [r2, #150]	@ 0x96
 802b022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802b026:	f882 3096 	strb.w	r3, [r2, #150]	@ 0x96
 802b02a:	b120      	cbz	r0, 802b036 <SMP_Read_Local_P256key_Complete_Handler+0x1a>
 802b02c:	f043 0040 	orr.w	r0, r3, #64	@ 0x40
 802b030:	f882 0096 	strb.w	r0, [r2, #150]	@ 0x96
 802b034:	4770      	bx	lr
 802b036:	f502 708e 	add.w	r0, r2, #284	@ 0x11c
 802b03a:	2240      	movs	r2, #64	@ 0x40
 802b03c:	f7f5 bc02 	b.w	8020844 <ble_memcpy>

0802b040 <__arm_cp.5_0>:
 802b040:	2000a014 	.word	0x2000a014

0802b044 <SMP_SC_Local_Public_Key_Unavailable>:
 802b044:	4802      	ldr	r0, [pc, #8]	@ (802b050 <__arm_cp.6_0>)
 802b046:	2140      	movs	r1, #64	@ 0x40
 802b048:	f500 708e 	add.w	r0, r0, #284	@ 0x11c
 802b04c:	f000 bbbd 	b.w	802b7ca <Is_Empty>

0802b050 <__arm_cp.6_0>:
 802b050:	2000a014 	.word	0x2000a014

0802b054 <SMP_SC_Public_Key_Exchanged>:
 802b054:	b510      	push	{r4, lr}
 802b056:	4604      	mov	r4, r0
 802b058:	f7ff fff4 	bl	802b044 <SMP_SC_Local_Public_Key_Unavailable>
 802b05c:	b148      	cbz	r0, 802b072 <SMP_SC_Public_Key_Exchanged+0x1e>
 802b05e:	4811      	ldr	r0, [pc, #68]	@ (802b0a4 <__arm_cp.7_0>)
 802b060:	f990 1096 	ldrsb.w	r1, [r0, #150]	@ 0x96
 802b064:	2900      	cmp	r1, #0
 802b066:	d41b      	bmi.n	802b0a0 <SMP_SC_Public_Key_Exchanged+0x4c>
 802b068:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 802b06c:	f880 1096 	strb.w	r1, [r0, #150]	@ 0x96
 802b070:	e016      	b.n	802b0a0 <SMP_SC_Public_Key_Exchanged+0x4c>
 802b072:	7fe0      	ldrb	r0, [r4, #31]
 802b074:	f000 01c0 	and.w	r1, r0, #192	@ 0xc0
 802b078:	29c0      	cmp	r1, #192	@ 0xc0
 802b07a:	bf04      	itt	eq
 802b07c:	2001      	moveq	r0, #1
 802b07e:	bd10      	popeq	{r4, pc}
 802b080:	f010 0f41 	tst.w	r0, #65	@ 0x41
 802b084:	d006      	beq.n	802b094 <SMP_SC_Public_Key_Exchanged+0x40>
 802b086:	07c1      	lsls	r1, r0, #31
 802b088:	d00a      	beq.n	802b0a0 <SMP_SC_Public_Key_Exchanged+0x4c>
 802b08a:	b240      	sxtb	r0, r0
 802b08c:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b090:	dc06      	bgt.n	802b0a0 <SMP_SC_Public_Key_Exchanged+0x4c>
 802b092:	e002      	b.n	802b09a <SMP_SC_Public_Key_Exchanged+0x46>
 802b094:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 802b098:	77e0      	strb	r0, [r4, #31]
 802b09a:	4620      	mov	r0, r4
 802b09c:	f000 f804 	bl	802b0a8 <SMP_SC_Send_Pairing_Public_Key>
 802b0a0:	2000      	movs	r0, #0
 802b0a2:	bd10      	pop	{r4, pc}

0802b0a4 <__arm_cp.7_0>:
 802b0a4:	2000a014 	.word	0x2000a014

0802b0a8 <SMP_SC_Send_Pairing_Public_Key>:
 802b0a8:	b5b0      	push	{r4, r5, r7, lr}
 802b0aa:	2141      	movs	r1, #65	@ 0x41
 802b0ac:	4604      	mov	r4, r0
 802b0ae:	f7ff f9e1 	bl	802a474 <SMP_New_PDU>
 802b0b2:	b180      	cbz	r0, 802b0d6 <SMP_SC_Send_Pairing_Public_Key+0x2e>
 802b0b4:	4605      	mov	r5, r0
 802b0b6:	6a00      	ldr	r0, [r0, #32]
 802b0b8:	210c      	movs	r1, #12
 802b0ba:	2240      	movs	r2, #64	@ 0x40
 802b0bc:	7101      	strb	r1, [r0, #4]
 802b0be:	4809      	ldr	r0, [pc, #36]	@ (802b0e4 <__arm_cp.8_0>)
 802b0c0:	2105      	movs	r1, #5
 802b0c2:	f500 738e 	add.w	r3, r0, #284	@ 0x11c
 802b0c6:	4628      	mov	r0, r5
 802b0c8:	f7fd fbcd 	bl	8028866 <ACL_Set_Data>
 802b0cc:	4628      	mov	r0, r5
 802b0ce:	4621      	mov	r1, r4
 802b0d0:	f7ff f9d7 	bl	802a482 <SMP_Send_PDU>
 802b0d4:	b100      	cbz	r0, 802b0d8 <SMP_SC_Send_Pairing_Public_Key+0x30>
 802b0d6:	bdb0      	pop	{r4, r5, r7, pc}
 802b0d8:	7fe0      	ldrb	r0, [r4, #31]
 802b0da:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802b0de:	77e0      	strb	r0, [r4, #31]
 802b0e0:	bdb0      	pop	{r4, r5, r7, pc}
 802b0e2:	bf00      	nop

0802b0e4 <__arm_cp.8_0>:
 802b0e4:	2000a014 	.word	0x2000a014

0802b0e8 <SMP_Generate_DHkey_Complete_Handler>:
 802b0e8:	b510      	push	{r4, lr}
 802b0ea:	4c14      	ldr	r4, [pc, #80]	@ (802b13c <__arm_cp.9_0>)
 802b0ec:	f894 2096 	ldrb.w	r2, [r4, #150]	@ 0x96
 802b0f0:	06d2      	lsls	r2, r2, #27
 802b0f2:	d521      	bpl.n	802b138 <SMP_Generate_DHkey_Complete_Handler+0x50>
 802b0f4:	b168      	cbz	r0, 802b112 <SMP_Generate_DHkey_Complete_Handler+0x2a>
 802b0f6:	4812      	ldr	r0, [pc, #72]	@ (802b140 <__arm_cp.9_1>)
 802b0f8:	7d81      	ldrb	r1, [r0, #22]
 802b0fa:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 802b0fe:	b1d9      	cbz	r1, 802b138 <SMP_Generate_DHkey_Complete_Handler+0x50>
 802b100:	8802      	ldrh	r2, [r0, #0]
 802b102:	b11a      	cbz	r2, 802b10c <SMP_Generate_DHkey_Complete_Handler+0x24>
 802b104:	f890 2020 	ldrb.w	r2, [r0, #32]
 802b108:	0692      	lsls	r2, r2, #26
 802b10a:	d40c      	bmi.n	802b126 <SMP_Generate_DHkey_Complete_Handler+0x3e>
 802b10c:	3080      	adds	r0, #128	@ 0x80
 802b10e:	3901      	subs	r1, #1
 802b110:	e7f5      	b.n	802b0fe <SMP_Generate_DHkey_Complete_Handler+0x16>
 802b112:	f104 00fc 	add.w	r0, r4, #252	@ 0xfc
 802b116:	2220      	movs	r2, #32
 802b118:	f7f5 fb94 	bl	8020844 <ble_memcpy>
 802b11c:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 802b120:	f040 0020 	orr.w	r0, r0, #32
 802b124:	e006      	b.n	802b134 <SMP_Generate_DHkey_Complete_Handler+0x4c>
 802b126:	210b      	movs	r1, #11
 802b128:	f000 fa88 	bl	802b63c <OUTLINED_FUNCTION_0>
 802b12c:	f894 0096 	ldrb.w	r0, [r4, #150]	@ 0x96
 802b130:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
 802b134:	f884 0096 	strb.w	r0, [r4, #150]	@ 0x96
 802b138:	bd10      	pop	{r4, pc}
 802b13a:	bf00      	nop

0802b13c <__arm_cp.9_0>:
 802b13c:	2000a014 	.word	0x2000a014

0802b140 <__arm_cp.9_1>:
 802b140:	20009fec 	.word	0x20009fec

0802b144 <SMP_SC_Pairing_Public_Key_Rx_Handler>:
 802b144:	b570      	push	{r4, r5, r6, lr}
 802b146:	460c      	mov	r4, r1
 802b148:	7dc9      	ldrb	r1, [r1, #23]
 802b14a:	2980      	cmp	r1, #128	@ 0x80
 802b14c:	d150      	bne.n	802b1f0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xac>
 802b14e:	f994 101f 	ldrsb.w	r1, [r4, #31]
 802b152:	2900      	cmp	r1, #0
 802b154:	d44c      	bmi.n	802b1f0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xac>
 802b156:	b2c9      	uxtb	r1, r1
 802b158:	f011 0f41 	tst.w	r1, #65	@ 0x41
 802b15c:	d048      	beq.n	802b1f0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xac>
 802b15e:	4e25      	ldr	r6, [pc, #148]	@ (802b1f4 <__arm_cp.10_0>)
 802b160:	f896 1096 	ldrb.w	r1, [r6, #150]	@ 0x96
 802b164:	f011 0f90 	tst.w	r1, #144	@ 0x90
 802b168:	bf1c      	itt	ne
 802b16a:	2038      	movne	r0, #56	@ 0x38
 802b16c:	bd70      	popne	{r4, r5, r6, pc}
 802b16e:	f506 75ae 	add.w	r5, r6, #348	@ 0x15c
 802b172:	2105      	movs	r1, #5
 802b174:	2240      	movs	r2, #64	@ 0x40
 802b176:	462b      	mov	r3, r5
 802b178:	f7fd fb55 	bl	8028826 <ACL_Get_Data>
 802b17c:	f896 0035 	ldrb.w	r0, [r6, #53]	@ 0x35
 802b180:	2801      	cmp	r0, #1
 802b182:	d006      	beq.n	802b192 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x4e>
 802b184:	f506 718e 	add.w	r1, r6, #284	@ 0x11c
 802b188:	4628      	mov	r0, r5
 802b18a:	2220      	movs	r2, #32
 802b18c:	f7f5 fbe2 	bl	8020954 <ble_memcmp>
 802b190:	b340      	cbz	r0, 802b1e4 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xa0>
 802b192:	f896 0094 	ldrb.w	r0, [r6, #148]	@ 0x94
 802b196:	0740      	lsls	r0, r0, #29
 802b198:	d505      	bpl.n	802b1a6 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x62>
 802b19a:	4917      	ldr	r1, [pc, #92]	@ (802b1f8 <__arm_cp.10_1>)
 802b19c:	4628      	mov	r0, r5
 802b19e:	2240      	movs	r2, #64	@ 0x40
 802b1a0:	f7f5 fbd8 	bl	8020954 <ble_memcmp>
 802b1a4:	b300      	cbz	r0, 802b1e8 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xa4>
 802b1a6:	4628      	mov	r0, r5
 802b1a8:	f7f9 fa9e 	bl	80246e8 <HCI_LE_GENERATE_DHKEY>
 802b1ac:	283a      	cmp	r0, #58	@ 0x3a
 802b1ae:	d020      	beq.n	802b1f2 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xae>
 802b1b0:	b9b0      	cbnz	r0, 802b1e0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0x9c>
 802b1b2:	f896 1096 	ldrb.w	r1, [r6, #150]	@ 0x96
 802b1b6:	f896 0039 	ldrb.w	r0, [r6, #57]	@ 0x39
 802b1ba:	f894 2020 	ldrb.w	r2, [r4, #32]
 802b1be:	f041 0110 	orr.w	r1, r1, #16
 802b1c2:	f000 00fb 	and.w	r0, r0, #251	@ 0xfb
 802b1c6:	f886 1096 	strb.w	r1, [r6, #150]	@ 0x96
 802b1ca:	7fe1      	ldrb	r1, [r4, #31]
 802b1cc:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 802b1d0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 802b1d4:	77e1      	strb	r1, [r4, #31]
 802b1d6:	f042 0120 	orr.w	r1, r2, #32
 802b1da:	f884 1020 	strb.w	r1, [r4, #32]
 802b1de:	e007      	b.n	802b1f0 <SMP_SC_Pairing_Public_Key_Rx_Handler+0xac>
 802b1e0:	2108      	movs	r1, #8
 802b1e2:	e002      	b.n	802b1ea <SMP_SC_Pairing_Public_Key_Rx_Handler+0xa6>
 802b1e4:	210b      	movs	r1, #11
 802b1e6:	e000      	b.n	802b1ea <SMP_SC_Pairing_Public_Key_Rx_Handler+0xa6>
 802b1e8:	210a      	movs	r1, #10
 802b1ea:	4620      	mov	r0, r4
 802b1ec:	f000 fa26 	bl	802b63c <OUTLINED_FUNCTION_0>
 802b1f0:	2000      	movs	r0, #0
 802b1f2:	bd70      	pop	{r4, r5, r6, pc}

0802b1f4 <__arm_cp.10_0>:
 802b1f4:	2000a014 	.word	0x2000a014

0802b1f8 <__arm_cp.10_1>:
 802b1f8:	0802e808 	.word	0x0802e808

0802b1fc <SMP_SC_Pairing_DHKey_Check_Rx_Handler>:
 802b1fc:	b570      	push	{r4, r5, r6, lr}
 802b1fe:	b088      	sub	sp, #32
 802b200:	460c      	mov	r4, r1
 802b202:	7dc9      	ldrb	r1, [r1, #23]
 802b204:	f1a1 0290 	sub.w	r2, r1, #144	@ 0x90
 802b208:	2a02      	cmp	r2, #2
 802b20a:	d201      	bcs.n	802b210 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x14>
 802b20c:	2093      	movs	r0, #147	@ 0x93
 802b20e:	e019      	b.n	802b244 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x48>
 802b210:	2992      	cmp	r1, #146	@ 0x92
 802b212:	d116      	bne.n	802b242 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x46>
 802b214:	ad04      	add	r5, sp, #16
 802b216:	2105      	movs	r1, #5
 802b218:	2210      	movs	r2, #16
 802b21a:	462b      	mov	r3, r5
 802b21c:	f7fd fb03 	bl	8028826 <ACL_Get_Data>
 802b220:	466e      	mov	r6, sp
 802b222:	4620      	mov	r0, r4
 802b224:	2100      	movs	r1, #0
 802b226:	4632      	mov	r2, r6
 802b228:	f000 f81a 	bl	802b260 <SMP_SC_Compute_DHKey_Check>
 802b22c:	4628      	mov	r0, r5
 802b22e:	4631      	mov	r1, r6
 802b230:	2210      	movs	r2, #16
 802b232:	f7f5 fb8f 	bl	8020954 <ble_memcmp>
 802b236:	b138      	cbz	r0, 802b248 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x4c>
 802b238:	4620      	mov	r0, r4
 802b23a:	210b      	movs	r1, #11
 802b23c:	f000 f9fe 	bl	802b63c <OUTLINED_FUNCTION_0>
 802b240:	e000      	b.n	802b244 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x48>
 802b242:	2000      	movs	r0, #0
 802b244:	b008      	add	sp, #32
 802b246:	bd70      	pop	{r4, r5, r6, pc}
 802b248:	7fe0      	ldrb	r0, [r4, #31]
 802b24a:	07c0      	lsls	r0, r0, #31
 802b24c:	d103      	bne.n	802b256 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x5a>
 802b24e:	4620      	mov	r0, r4
 802b250:	f7ff fa82 	bl	802a758 <SMP_MI_Start_Encryption>
 802b254:	e7f6      	b.n	802b244 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x48>
 802b256:	4620      	mov	r0, r4
 802b258:	f000 f882 	bl	802b360 <SMP_SC_Send_Pairing_DHKey_Check>
 802b25c:	e7f2      	b.n	802b244 <SMP_SC_Pairing_DHKey_Check_Rx_Handler+0x48>
	...

0802b260 <SMP_SC_Compute_DHKey_Check>:
 802b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b264:	b090      	sub	sp, #64	@ 0x40
 802b266:	4690      	mov	r8, r2
 802b268:	460e      	mov	r6, r1
 802b26a:	4605      	mov	r5, r0
 802b26c:	f10d 0022 	add.w	r0, sp, #34	@ 0x22
 802b270:	2100      	movs	r1, #0
 802b272:	2210      	movs	r2, #16
 802b274:	f7f5 fb36 	bl	80208e4 <ble_memset>
 802b278:	7e68      	ldrb	r0, [r5, #25]
 802b27a:	2803      	cmp	r0, #3
 802b27c:	d010      	beq.n	802b2a0 <SMP_SC_Compute_DHKey_Check+0x40>
 802b27e:	2802      	cmp	r0, #2
 802b280:	d114      	bne.n	802b2ac <SMP_SC_Compute_DHKey_Check+0x4c>
 802b282:	4836      	ldr	r0, [pc, #216]	@ (802b35c <__arm_cp.12_0>)
 802b284:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 802b288:	0e01      	lsrs	r1, r0, #24
 802b28a:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 802b28e:	f88d 1025 	strb.w	r1, [sp, #37]	@ 0x25
 802b292:	0c01      	lsrs	r1, r0, #16
 802b294:	0a00      	lsrs	r0, r0, #8
 802b296:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 802b29a:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23
 802b29e:	e005      	b.n	802b2ac <SMP_SC_Compute_DHKey_Check+0x4c>
 802b2a0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 802b2a4:	4628      	mov	r0, r5
 802b2a6:	4631      	mov	r1, r6
 802b2a8:	f7fe fa74 	bl	8029794 <SMP_Get_OOB_SC_Random>
 802b2ac:	b146      	cbz	r6, 802b2c0 <SMP_SC_Compute_DHKey_Check+0x60>
 802b2ae:	482b      	ldr	r0, [pc, #172]	@ (802b35c <__arm_cp.12_0>)
 802b2b0:	7ea9      	ldrb	r1, [r5, #26]
 802b2b2:	f890 0095 	ldrb.w	r0, [r0, #149]	@ 0x95
 802b2b6:	f88d 001f 	strb.w	r0, [sp, #31]
 802b2ba:	f105 0053 	add.w	r0, r5, #83	@ 0x53
 802b2be:	e006      	b.n	802b2ce <SMP_SC_Compute_DHKey_Check+0x6e>
 802b2c0:	7ea9      	ldrb	r1, [r5, #26]
 802b2c2:	7eea      	ldrb	r2, [r5, #27]
 802b2c4:	f105 0050 	add.w	r0, r5, #80	@ 0x50
 802b2c8:	0849      	lsrs	r1, r1, #1
 802b2ca:	f88d 201f 	strb.w	r2, [sp, #31]
 802b2ce:	7800      	ldrb	r0, [r0, #0]
 802b2d0:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 802b2d4:	f001 0001 	and.w	r0, r1, #1
 802b2d8:	f88d 0020 	strb.w	r0, [sp, #32]
 802b2dc:	7fe8      	ldrb	r0, [r5, #31]
 802b2de:	f000 0001 	and.w	r0, r0, #1
 802b2e2:	b106      	cbz	r6, 802b2e6 <SMP_SC_Compute_DHKey_Check+0x86>
 802b2e4:	b108      	cbz	r0, 802b2ea <SMP_SC_Compute_DHKey_Check+0x8a>
 802b2e6:	b128      	cbz	r0, 802b2f4 <SMP_SC_Compute_DHKey_Check+0x94>
 802b2e8:	b926      	cbnz	r6, 802b2f4 <SMP_SC_Compute_DHKey_Check+0x94>
 802b2ea:	f105 0770 	add.w	r7, r5, #112	@ 0x70
 802b2ee:	f105 0460 	add.w	r4, r5, #96	@ 0x60
 802b2f2:	e003      	b.n	802b2fc <SMP_SC_Compute_DHKey_Check+0x9c>
 802b2f4:	f105 0760 	add.w	r7, r5, #96	@ 0x60
 802b2f8:	f105 0470 	add.w	r4, r5, #112	@ 0x70
 802b2fc:	b146      	cbz	r6, 802b310 <SMP_SC_Compute_DHKey_Check+0xb0>
 802b2fe:	f10d 0032 	add.w	r0, sp, #50	@ 0x32
 802b302:	f10d 013f 	add.w	r1, sp, #63	@ 0x3f
 802b306:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 802b30a:	9000      	str	r0, [sp, #0]
 802b30c:	aa0e      	add	r2, sp, #56	@ 0x38
 802b30e:	e007      	b.n	802b320 <SMP_SC_Compute_DHKey_Check+0xc0>
 802b310:	a80e      	add	r0, sp, #56	@ 0x38
 802b312:	f10d 013e 	add.w	r1, sp, #62	@ 0x3e
 802b316:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 802b31a:	f10d 033f 	add.w	r3, sp, #63	@ 0x3f
 802b31e:	9000      	str	r0, [sp, #0]
 802b320:	4628      	mov	r0, r5
 802b322:	f000 f977 	bl	802b614 <SMP_SC_Phase_2AS2_Set_Addresses>
 802b326:	f89d 003f 	ldrb.w	r0, [sp, #63]	@ 0x3f
 802b32a:	f10d 051f 	add.w	r5, sp, #31
 802b32e:	f89d 103e 	ldrb.w	r1, [sp, #62]	@ 0x3e
 802b332:	ab0e      	add	r3, sp, #56	@ 0x38
 802b334:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 802b338:	e9cd 2804 	strd	r2, r8, [sp, #16]
 802b33c:	463a      	mov	r2, r7
 802b33e:	e9cd 5000 	strd	r5, r0, [sp]
 802b342:	4806      	ldr	r0, [pc, #24]	@ (802b35c <__arm_cp.12_0>)
 802b344:	e9cd 3102 	strd	r3, r1, [sp, #8]
 802b348:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 802b34c:	4621      	mov	r1, r4
 802b34e:	30fc      	adds	r0, #252	@ 0xfc
 802b350:	f7fd fe88 	bl	8029064 <SMA_SC_Gen_f6_Check_Val>
 802b354:	b010      	add	sp, #64	@ 0x40
 802b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b35a:	bf00      	nop

0802b35c <__arm_cp.12_0>:
 802b35c:	2000a014 	.word	0x2000a014

0802b360 <SMP_SC_Send_Pairing_DHKey_Check>:
 802b360:	b5b0      	push	{r4, r5, r7, lr}
 802b362:	2111      	movs	r1, #17
 802b364:	4604      	mov	r4, r0
 802b366:	f7ff f885 	bl	802a474 <SMP_New_PDU>
 802b36a:	b1d0      	cbz	r0, 802b3a2 <SMP_SC_Send_Pairing_DHKey_Check+0x42>
 802b36c:	4605      	mov	r5, r0
 802b36e:	6a00      	ldr	r0, [r0, #32]
 802b370:	210d      	movs	r1, #13
 802b372:	2210      	movs	r2, #16
 802b374:	7101      	strb	r1, [r0, #4]
 802b376:	480c      	ldr	r0, [pc, #48]	@ (802b3a8 <__arm_cp.13_0>)
 802b378:	2105      	movs	r1, #5
 802b37a:	f500 7386 	add.w	r3, r0, #268	@ 0x10c
 802b37e:	4628      	mov	r0, r5
 802b380:	f7fd fa71 	bl	8028866 <ACL_Set_Data>
 802b384:	4628      	mov	r0, r5
 802b386:	4621      	mov	r1, r4
 802b388:	f7ff f87b 	bl	802a482 <SMP_Send_PDU>
 802b38c:	b938      	cbnz	r0, 802b39e <SMP_SC_Send_Pairing_DHKey_Check+0x3e>
 802b38e:	7fe0      	ldrb	r0, [r4, #31]
 802b390:	07c0      	lsls	r0, r0, #31
 802b392:	f06f 0043 	mvn.w	r0, #67	@ 0x43
 802b396:	bf08      	it	eq
 802b398:	f06f 006d 	mvneq.w	r0, #109	@ 0x6d
 802b39c:	75e0      	strb	r0, [r4, #23]
 802b39e:	2000      	movs	r0, #0
 802b3a0:	bdb0      	pop	{r4, r5, r7, pc}
 802b3a2:	2064      	movs	r0, #100	@ 0x64
 802b3a4:	bdb0      	pop	{r4, r5, r7, pc}
 802b3a6:	bf00      	nop

0802b3a8 <__arm_cp.13_0>:
 802b3a8:	2000a014 	.word	0x2000a014

0802b3ac <SMP_SC_Compute_Confirm_Value>:
 802b3ac:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802b3ae:	7e43      	ldrb	r3, [r0, #25]
 802b3b0:	2b02      	cmp	r3, #2
 802b3b2:	d10b      	bne.n	802b3cc <SMP_SC_Compute_Confirm_Value+0x20>
 802b3b4:	4b12      	ldr	r3, [pc, #72]	@ (802b400 <__arm_cp.14_0>)
 802b3b6:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 802b3ba:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
 802b3be:	3b01      	subs	r3, #1
 802b3c0:	fa24 f303 	lsr.w	r3, r4, r3
 802b3c4:	4c0f      	ldr	r4, [pc, #60]	@ (802b404 <__arm_cp.14_1>)
 802b3c6:	f364 035f 	bfi	r3, r4, #1, #31
 802b3ca:	e000      	b.n	802b3ce <SMP_SC_Compute_Confirm_Value+0x22>
 802b3cc:	2300      	movs	r3, #0
 802b3ce:	9200      	str	r2, [sp, #0]
 802b3d0:	f011 0201 	ands.w	r2, r1, #1
 802b3d4:	b2db      	uxtb	r3, r3
 802b3d6:	4a0a      	ldr	r2, [pc, #40]	@ (802b400 <__arm_cp.14_0>)
 802b3d8:	f502 748e 	add.w	r4, r2, #284	@ 0x11c
 802b3dc:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 802b3e0:	4615      	mov	r5, r2
 802b3e2:	bf04      	itt	eq
 802b3e4:	4625      	moveq	r5, r4
 802b3e6:	4614      	moveq	r4, r2
 802b3e8:	0789      	lsls	r1, r1, #30
 802b3ea:	f100 0270 	add.w	r2, r0, #112	@ 0x70
 802b3ee:	bf58      	it	pl
 802b3f0:	f100 0260 	addpl.w	r2, r0, #96	@ 0x60
 802b3f4:	4628      	mov	r0, r5
 802b3f6:	4621      	mov	r1, r4
 802b3f8:	f7fd fd98 	bl	8028f2c <SMA_SC_Gen_f4_Confirm>
 802b3fc:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
 802b3fe:	bf00      	nop

0802b400 <__arm_cp.14_0>:
 802b400:	2000a014 	.word	0x2000a014

0802b404 <__arm_cp.14_1>:
 802b404:	7fffffc0 	.word	0x7fffffc0

0802b408 <SMP_SC_Generate_Num_Comparison_Event>:
 802b408:	b51c      	push	{r2, r3, r4, lr}
 802b40a:	4a18      	ldr	r2, [pc, #96]	@ (802b46c <__arm_cp.15_0>)
 802b40c:	4604      	mov	r4, r0
 802b40e:	7fc0      	ldrb	r0, [r0, #31]
 802b410:	a901      	add	r1, sp, #4
 802b412:	9100      	str	r1, [sp, #0]
 802b414:	f010 0001 	ands.w	r0, r0, #1
 802b418:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 802b41c:	f502 718e 	add.w	r1, r2, #284	@ 0x11c
 802b420:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 802b424:	4610      	mov	r0, r2
 802b426:	bf04      	itt	eq
 802b428:	4608      	moveq	r0, r1
 802b42a:	4611      	moveq	r1, r2
 802b42c:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 802b430:	f7fd fe5a 	bl	80290e8 <SMA_SC_Gen_g2_NumComp_Val>
 802b434:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802b438:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802b43c:	7f60      	ldrb	r0, [r4, #29]
 802b43e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 802b442:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802b446:	0412      	lsls	r2, r2, #16
 802b448:	7760      	strb	r0, [r4, #29]
 802b44a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 802b44e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 802b452:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802b456:	4408      	add	r0, r1
 802b458:	4905      	ldr	r1, [pc, #20]	@ (802b470 <__arm_cp.15_1>)
 802b45a:	fbb0 f2f1 	udiv	r2, r0, r1
 802b45e:	fb02 0211 	mls	r2, r2, r1, r0
 802b462:	8821      	ldrh	r1, [r4, #0]
 802b464:	2001      	movs	r0, #1
 802b466:	f7f8 f9d3 	bl	8023810 <EVT_aci_gap_numeric_comparison_value>
 802b46a:	bd1c      	pop	{r2, r3, r4, pc}

0802b46c <__arm_cp.15_0>:
 802b46c:	2000a014 	.word	0x2000a014

0802b470 <__arm_cp.15_1>:
 802b470:	000f4240 	.word	0x000f4240

0802b474 <ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO>:
 802b474:	b510      	push	{r4, lr}
 802b476:	2901      	cmp	r1, #1
 802b478:	bf84      	itt	hi
 802b47a:	2092      	movhi	r0, #146	@ 0x92
 802b47c:	bd10      	pophi	{r4, pc}
 802b47e:	460c      	mov	r4, r1
 802b480:	f7fd ffa0 	bl	80293c4 <SMP_Get_Remote_Device>
 802b484:	b138      	cbz	r0, 802b496 <ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO+0x22>
 802b486:	7dc1      	ldrb	r1, [r0, #23]
 802b488:	2990      	cmp	r1, #144	@ 0x90
 802b48a:	bf04      	itt	eq
 802b48c:	7e41      	ldrbeq	r1, [r0, #25]
 802b48e:	2904      	cmpeq	r1, #4
 802b490:	d003      	beq.n	802b49a <ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO+0x26>
 802b492:	200c      	movs	r0, #12
 802b494:	bd10      	pop	{r4, pc}
 802b496:	2002      	movs	r0, #2
 802b498:	bd10      	pop	{r4, pc}
 802b49a:	2140      	movs	r1, #64	@ 0x40
 802b49c:	2c00      	cmp	r4, #0
 802b49e:	bf08      	it	eq
 802b4a0:	f06f 017f 	mvneq.w	r1, #127	@ 0x7f
 802b4a4:	7f42      	ldrb	r2, [r0, #29]
 802b4a6:	4311      	orrs	r1, r2
 802b4a8:	7741      	strb	r1, [r0, #29]
 802b4aa:	2000      	movs	r0, #0
 802b4ac:	bd10      	pop	{r4, pc}
	...

0802b4b0 <SMP_SC_Phase_2_Process>:
 802b4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b4b2:	b091      	sub	sp, #68	@ 0x44
 802b4b4:	4604      	mov	r4, r0
 802b4b6:	7dc0      	ldrb	r0, [r0, #23]
 802b4b8:	2890      	cmp	r0, #144	@ 0x90
 802b4ba:	d10b      	bne.n	802b4d4 <SMP_SC_Phase_2_Process+0x24>
 802b4bc:	7f60      	ldrb	r0, [r4, #29]
 802b4be:	0641      	lsls	r1, r0, #25
 802b4c0:	d40b      	bmi.n	802b4da <SMP_SC_Phase_2_Process+0x2a>
 802b4c2:	b240      	sxtb	r0, r0
 802b4c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 802b4c8:	dc61      	bgt.n	802b58e <SMP_SC_Phase_2_Process+0xde>
 802b4ca:	4620      	mov	r0, r4
 802b4cc:	210c      	movs	r1, #12
 802b4ce:	f000 f8b5 	bl	802b63c <OUTLINED_FUNCTION_0>
 802b4d2:	7de0      	ldrb	r0, [r4, #23]
 802b4d4:	2891      	cmp	r0, #145	@ 0x91
 802b4d6:	d002      	beq.n	802b4de <SMP_SC_Phase_2_Process+0x2e>
 802b4d8:	e059      	b.n	802b58e <SMP_SC_Phase_2_Process+0xde>
 802b4da:	2091      	movs	r0, #145	@ 0x91
 802b4dc:	75e0      	strb	r0, [r4, #23]
 802b4de:	4e2d      	ldr	r6, [pc, #180]	@ (802b594 <__arm_cp.17_0>)
 802b4e0:	f896 0096 	ldrb.w	r0, [r6, #150]	@ 0x96
 802b4e4:	f000 0030 	and.w	r0, r0, #48	@ 0x30
 802b4e8:	2830      	cmp	r0, #48	@ 0x30
 802b4ea:	d150      	bne.n	802b58e <SMP_SC_Phase_2_Process+0xde>
 802b4ec:	f106 05fc 	add.w	r5, r6, #252	@ 0xfc
 802b4f0:	f10d 0016 	add.w	r0, sp, #22
 802b4f4:	2220      	movs	r2, #32
 802b4f6:	4629      	mov	r1, r5
 802b4f8:	f7f5 f9a4 	bl	8020844 <ble_memcpy>
 802b4fc:	7fe0      	ldrb	r0, [r4, #31]
 802b4fe:	07c0      	lsls	r0, r0, #31
 802b500:	d108      	bne.n	802b514 <SMP_SC_Phase_2_Process+0x64>
 802b502:	f10d 0036 	add.w	r0, sp, #54	@ 0x36
 802b506:	f10d 0143 	add.w	r1, sp, #67	@ 0x43
 802b50a:	f10d 0342 	add.w	r3, sp, #66	@ 0x42
 802b50e:	9000      	str	r0, [sp, #0]
 802b510:	aa0f      	add	r2, sp, #60	@ 0x3c
 802b512:	e007      	b.n	802b524 <SMP_SC_Phase_2_Process+0x74>
 802b514:	a80f      	add	r0, sp, #60	@ 0x3c
 802b516:	f10d 0142 	add.w	r1, sp, #66	@ 0x42
 802b51a:	f10d 0236 	add.w	r2, sp, #54	@ 0x36
 802b51e:	f10d 0343 	add.w	r3, sp, #67	@ 0x43
 802b522:	9000      	str	r0, [sp, #0]
 802b524:	4620      	mov	r0, r4
 802b526:	f000 f875 	bl	802b614 <SMP_SC_Phase_2AS2_Set_Addresses>
 802b52a:	f89d 0042 	ldrb.w	r0, [sp, #66]	@ 0x42
 802b52e:	f89d 3043 	ldrb.w	r3, [sp, #67]	@ 0x43
 802b532:	af0f      	add	r7, sp, #60	@ 0x3c
 802b534:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 802b538:	f10d 0236 	add.w	r2, sp, #54	@ 0x36
 802b53c:	e9cd 2502 	strd	r2, r5, [sp, #8]
 802b540:	9104      	str	r1, [sp, #16]
 802b542:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 802b546:	f104 0270 	add.w	r2, r4, #112	@ 0x70
 802b54a:	e9cd 7000 	strd	r7, r0, [sp]
 802b54e:	f10d 0016 	add.w	r0, sp, #22
 802b552:	f7fd fd25 	bl	8028fa0 <SMA_SC_Gen_f5_Keys>
 802b556:	f506 7286 	add.w	r2, r6, #268	@ 0x10c
 802b55a:	4620      	mov	r0, r4
 802b55c:	2101      	movs	r1, #1
 802b55e:	f7ff fe7f 	bl	802b260 <SMP_SC_Compute_DHKey_Check>
 802b562:	7fe0      	ldrb	r0, [r4, #31]
 802b564:	07c0      	lsls	r0, r0, #31
 802b566:	d10a      	bne.n	802b57e <SMP_SC_Phase_2_Process+0xce>
 802b568:	4620      	mov	r0, r4
 802b56a:	f7ff fef9 	bl	802b360 <SMP_SC_Send_Pairing_DHKey_Check>
 802b56e:	b140      	cbz	r0, 802b582 <SMP_SC_Phase_2_Process+0xd2>
 802b570:	f10d 0116 	add.w	r1, sp, #22
 802b574:	4628      	mov	r0, r5
 802b576:	2220      	movs	r2, #32
 802b578:	f7f5 f964 	bl	8020844 <ble_memcpy>
 802b57c:	e007      	b.n	802b58e <SMP_SC_Phase_2_Process+0xde>
 802b57e:	2092      	movs	r0, #146	@ 0x92
 802b580:	75e0      	strb	r0, [r4, #23]
 802b582:	f896 0096 	ldrb.w	r0, [r6, #150]	@ 0x96
 802b586:	f000 00cf 	and.w	r0, r0, #207	@ 0xcf
 802b58a:	f886 0096 	strb.w	r0, [r6, #150]	@ 0x96
 802b58e:	b011      	add	sp, #68	@ 0x44
 802b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b592:	bf00      	nop

0802b594 <__arm_cp.17_0>:
 802b594:	2000a014 	.word	0x2000a014

0802b598 <SMP_SC_Pairing_End>:
 802b598:	b570      	push	{r4, r5, r6, lr}
 802b59a:	7fc6      	ldrb	r6, [r0, #31]
 802b59c:	4605      	mov	r5, r0
 802b59e:	0730      	lsls	r0, r6, #28
 802b5a0:	d535      	bpl.n	802b60e <SMP_SC_Pairing_End+0x76>
 802b5a2:	8828      	ldrh	r0, [r5, #0]
 802b5a4:	460c      	mov	r4, r1
 802b5a6:	f7ff fced 	bl	802af84 <SMP_Is_Another_SC_Pairing_Ongoing>
 802b5aa:	f006 01fd 	and.w	r1, r6, #253	@ 0xfd
 802b5ae:	77e9      	strb	r1, [r5, #31]
 802b5b0:	b930      	cbnz	r0, 802b5c0 <SMP_SC_Pairing_End+0x28>
 802b5b2:	4917      	ldr	r1, [pc, #92]	@ (802b610 <__arm_cp.18_0>)
 802b5b4:	f891 2096 	ldrb.w	r2, [r1, #150]	@ 0x96
 802b5b8:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 802b5bc:	f881 2096 	strb.w	r2, [r1, #150]	@ 0x96
 802b5c0:	4913      	ldr	r1, [pc, #76]	@ (802b610 <__arm_cp.18_0>)
 802b5c2:	f891 2097 	ldrb.w	r2, [r1, #151]	@ 0x97
 802b5c6:	b154      	cbz	r4, 802b5de <SMP_SC_Pairing_End+0x46>
 802b5c8:	3210      	adds	r2, #16
 802b5ca:	f881 2097 	strb.w	r2, [r1, #151]	@ 0x97
 802b5ce:	b948      	cbnz	r0, 802b5e4 <SMP_SC_Pairing_End+0x4c>
 802b5d0:	f891 0096 	ldrb.w	r0, [r1, #150]	@ 0x96
 802b5d4:	f000 00cf 	and.w	r0, r0, #207	@ 0xcf
 802b5d8:	f881 0096 	strb.w	r0, [r1, #150]	@ 0x96
 802b5dc:	e002      	b.n	802b5e4 <SMP_SC_Pairing_End+0x4c>
 802b5de:	3201      	adds	r2, #1
 802b5e0:	f881 2097 	strb.w	r2, [r1, #151]	@ 0x97
 802b5e4:	f002 000f 	and.w	r0, r2, #15
 802b5e8:	2303      	movs	r3, #3
 802b5ea:	b2d2      	uxtb	r2, r2
 802b5ec:	fbb0 f0f3 	udiv	r0, r0, r3
 802b5f0:	eb00 1012 	add.w	r0, r0, r2, lsr #4
 802b5f4:	2803      	cmp	r0, #3
 802b5f6:	d30a      	bcc.n	802b60e <SMP_SC_Pairing_End+0x76>
 802b5f8:	f991 0096 	ldrsb.w	r0, [r1, #150]	@ 0x96
 802b5fc:	2800      	cmp	r0, #0
 802b5fe:	d403      	bmi.n	802b608 <SMP_SC_Pairing_End+0x70>
 802b600:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 802b604:	f881 0096 	strb.w	r0, [r1, #150]	@ 0x96
 802b608:	2000      	movs	r0, #0
 802b60a:	f881 0097 	strb.w	r0, [r1, #151]	@ 0x97
 802b60e:	bd70      	pop	{r4, r5, r6, pc}

0802b610 <__arm_cp.18_0>:
 802b610:	2000a014 	.word	0x2000a014

0802b614 <SMP_SC_Phase_2AS2_Set_Addresses>:
 802b614:	b5b0      	push	{r4, r5, r7, lr}
 802b616:	4605      	mov	r5, r0
 802b618:	7a40      	ldrb	r0, [r0, #9]
 802b61a:	461c      	mov	r4, r3
 802b61c:	7008      	strb	r0, [r1, #0]
 802b61e:	4610      	mov	r0, r2
 802b620:	f105 010a 	add.w	r1, r5, #10
 802b624:	2206      	movs	r2, #6
 802b626:	f7f5 f90d 	bl	8020844 <ble_memcpy>
 802b62a:	78a8      	ldrb	r0, [r5, #2]
 802b62c:	1ce9      	adds	r1, r5, #3
 802b62e:	2206      	movs	r2, #6
 802b630:	7020      	strb	r0, [r4, #0]
 802b632:	9804      	ldr	r0, [sp, #16]
 802b634:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 802b638:	f7f5 b904 	b.w	8020844 <ble_memcpy>

0802b63c <OUTLINED_FUNCTION_0>:
 802b63c:	2201      	movs	r2, #1
 802b63e:	f7ff b94f 	b.w	802a8e0 <SMP_Send_Pairing_Failed>

0802b642 <SMP_Validate_Signed_Packet>:
 802b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b646:	b08c      	sub	sp, #48	@ 0x30
 802b648:	460d      	mov	r5, r1
 802b64a:	888e      	ldrh	r6, [r1, #4]
 802b64c:	f7fd feba 	bl	80293c4 <SMP_Get_Remote_Device>
 802b650:	b130      	cbz	r0, 802b660 <SMP_Validate_Signed_Packet+0x1e>
 802b652:	4604      	mov	r4, r0
 802b654:	f890 0022 	ldrb.w	r0, [r0, #34]	@ 0x22
 802b658:	0640      	lsls	r0, r0, #25
 802b65a:	d403      	bmi.n	802b664 <SMP_Validate_Signed_Packet+0x22>
 802b65c:	205a      	movs	r0, #90	@ 0x5a
 802b65e:	e037      	b.n	802b6d0 <SMP_Validate_Signed_Packet+0x8e>
 802b660:	2002      	movs	r0, #2
 802b662:	e035      	b.n	802b6d0 <SMP_Validate_Signed_Packet+0x8e>
 802b664:	f104 0170 	add.w	r1, r4, #112	@ 0x70
 802b668:	a804      	add	r0, sp, #16
 802b66a:	2210      	movs	r2, #16
 802b66c:	f7f5 f8ea 	bl	8020844 <ble_memcpy>
 802b670:	f1a6 070c 	sub.w	r7, r6, #12
 802b674:	f10d 0804 	add.w	r8, sp, #4
 802b678:	4628      	mov	r0, r5
 802b67a:	220c      	movs	r2, #12
 802b67c:	b2b9      	uxth	r1, r7
 802b67e:	4643      	mov	r3, r8
 802b680:	f7fd f8d1 	bl	8028826 <ACL_Get_Data>
 802b684:	f89d 2006 	ldrb.w	r2, [sp, #6]
 802b688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 802b68c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 802b690:	f89d 0004 	ldrb.w	r0, [sp, #4]
 802b694:	0412      	lsls	r2, r2, #16
 802b696:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 802b69a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 802b69e:	180e      	adds	r6, r1, r0
 802b6a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802b6a2:	1c41      	adds	r1, r0, #1
 802b6a4:	d001      	beq.n	802b6aa <SMP_Validate_Signed_Packet+0x68>
 802b6a6:	4286      	cmp	r6, r0
 802b6a8:	d90e      	bls.n	802b6c8 <SMP_Validate_Signed_Packet+0x86>
 802b6aa:	b2fa      	uxtb	r2, r7
 802b6ac:	a804      	add	r0, sp, #16
 802b6ae:	af08      	add	r7, sp, #32
 802b6b0:	4629      	mov	r1, r5
 802b6b2:	463b      	mov	r3, r7
 802b6b4:	f7fd fd46 	bl	8029144 <SMA_CMAC_Generate_Tag>
 802b6b8:	f108 0004 	add.w	r0, r8, #4
 802b6bc:	f107 0108 	add.w	r1, r7, #8
 802b6c0:	2208      	movs	r2, #8
 802b6c2:	f7f5 f947 	bl	8020954 <ble_memcmp>
 802b6c6:	b108      	cbz	r0, 802b6cc <SMP_Validate_Signed_Packet+0x8a>
 802b6c8:	2005      	movs	r0, #5
 802b6ca:	e001      	b.n	802b6d0 <SMP_Validate_Signed_Packet+0x8e>
 802b6cc:	2000      	movs	r0, #0
 802b6ce:	62a6      	str	r6, [r4, #40]	@ 0x28
 802b6d0:	b00c      	add	sp, #48	@ 0x30
 802b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802b6d6 <CList_Insert>:
 802b6d6:	6842      	ldr	r2, [r0, #4]
 802b6d8:	e9c1 0200 	strd	r0, r2, [r1]
 802b6dc:	6842      	ldr	r2, [r0, #4]
 802b6de:	6041      	str	r1, [r0, #4]
 802b6e0:	6011      	str	r1, [r2, #0]
 802b6e2:	4770      	bx	lr

0802b6e4 <CList_Remove>:
 802b6e4:	e9d0 1200 	ldrd	r1, r2, [r0]
 802b6e8:	6011      	str	r1, [r2, #0]
 802b6ea:	6800      	ldr	r0, [r0, #0]
 802b6ec:	6042      	str	r2, [r0, #4]
 802b6ee:	4770      	bx	lr

0802b6f0 <CList_Get_Size>:
 802b6f0:	b510      	push	{r4, lr}
 802b6f2:	2200      	movs	r2, #0
 802b6f4:	4603      	mov	r3, r0
 802b6f6:	4614      	mov	r4, r2
 802b6f8:	3201      	adds	r2, #1
 802b6fa:	681b      	ldr	r3, [r3, #0]
 802b6fc:	4283      	cmp	r3, r0
 802b6fe:	d1fa      	bne.n	802b6f6 <CList_Get_Size+0x6>
 802b700:	800c      	strh	r4, [r1, #0]
 802b702:	bd10      	pop	{r4, pc}

0802b704 <RndAddr_Generate_Static_Address>:
 802b704:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802b706:	466d      	mov	r5, sp
 802b708:	4604      	mov	r4, r0
 802b70a:	2002      	movs	r0, #2
 802b70c:	4629      	mov	r1, r5
 802b70e:	f7d6 fe0b 	bl	8002328 <BLEPLAT_RngGet>
 802b712:	9801      	ldr	r0, [sp, #4]
 802b714:	4629      	mov	r1, r5
 802b716:	2206      	movs	r2, #6
 802b718:	f440 4040 	orr.w	r0, r0, #49152	@ 0xc000
 802b71c:	9001      	str	r0, [sp, #4]
 802b71e:	4620      	mov	r0, r4
 802b720:	f7f5 f890 	bl	8020844 <ble_memcpy>
 802b724:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

0802b728 <RndAddr_Generate_Non_Resolvable_Address>:
 802b728:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 802b72a:	4e11      	ldr	r6, [pc, #68]	@ (802b770 <__arm_cp.1_0>)
 802b72c:	4604      	mov	r4, r0
 802b72e:	ad01      	add	r5, sp, #4
 802b730:	f643 77ff 	movw	r7, #16383	@ 0x3fff
 802b734:	2002      	movs	r0, #2
 802b736:	4629      	mov	r1, r5
 802b738:	f7d6 fdf6 	bl	8002328 <BLEPLAT_RngGet>
 802b73c:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 802b740:	f36f 319f 	bfc	r1, #14, #18
 802b744:	ea50 0201 	orrs.w	r2, r0, r1
 802b748:	9102      	str	r1, [sp, #8]
 802b74a:	d0f3      	beq.n	802b734 <RndAddr_Generate_Non_Resolvable_Address+0xc>
 802b74c:	42b9      	cmp	r1, r7
 802b74e:	d101      	bne.n	802b754 <RndAddr_Generate_Non_Resolvable_Address+0x2c>
 802b750:	3001      	adds	r0, #1
 802b752:	d0ef      	beq.n	802b734 <RndAddr_Generate_Non_Resolvable_Address+0xc>
 802b754:	4628      	mov	r0, r5
 802b756:	4631      	mov	r1, r6
 802b758:	2206      	movs	r2, #6
 802b75a:	f7f5 f8fb 	bl	8020954 <ble_memcmp>
 802b75e:	2800      	cmp	r0, #0
 802b760:	d0e8      	beq.n	802b734 <RndAddr_Generate_Non_Resolvable_Address+0xc>
 802b762:	a901      	add	r1, sp, #4
 802b764:	4620      	mov	r0, r4
 802b766:	2206      	movs	r2, #6
 802b768:	f7f5 f86c 	bl	8020844 <ble_memcpy>
 802b76c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802b76e:	bf00      	nop

0802b770 <__arm_cp.1_0>:
 802b770:	2000a014 	.word	0x2000a014

0802b774 <RndAddr_Calculate_Address_Hash>:
 802b774:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b776:	b089      	sub	sp, #36	@ 0x24
 802b778:	af05      	add	r7, sp, #20
 802b77a:	4614      	mov	r4, r2
 802b77c:	460d      	mov	r5, r1
 802b77e:	4606      	mov	r6, r0
 802b780:	2100      	movs	r1, #0
 802b782:	2210      	movs	r2, #16
 802b784:	4638      	mov	r0, r7
 802b786:	f7f5 f8ad 	bl	80208e4 <ble_memset>
 802b78a:	4638      	mov	r0, r7
 802b78c:	4629      	mov	r1, r5
 802b78e:	2203      	movs	r2, #3
 802b790:	f7f5 f858 	bl	8020844 <ble_memcpy>
 802b794:	ad01      	add	r5, sp, #4
 802b796:	4630      	mov	r0, r6
 802b798:	4639      	mov	r1, r7
 802b79a:	462a      	mov	r2, r5
 802b79c:	f7d6 fdc6 	bl	800232c <BLEPLAT_AesEcbEncrypt>
 802b7a0:	4620      	mov	r0, r4
 802b7a2:	4629      	mov	r1, r5
 802b7a4:	2203      	movs	r2, #3
 802b7a6:	f7f5 f84d 	bl	8020844 <ble_memcpy>
 802b7aa:	b009      	add	sp, #36	@ 0x24
 802b7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802b7ae <RndAddr_Check_Resolvable_Address>:
 802b7ae:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
 802b7b0:	f10d 0505 	add.w	r5, sp, #5
 802b7b4:	460c      	mov	r4, r1
 802b7b6:	3103      	adds	r1, #3
 802b7b8:	462a      	mov	r2, r5
 802b7ba:	f7ff ffdb 	bl	802b774 <RndAddr_Calculate_Address_Hash>
 802b7be:	4628      	mov	r0, r5
 802b7c0:	4621      	mov	r1, r4
 802b7c2:	2203      	movs	r2, #3
 802b7c4:	f7f5 f8c6 	bl	8020954 <ble_memcmp>
 802b7c8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

0802b7ca <Is_Empty>:
 802b7ca:	b510      	push	{r4, lr}
 802b7cc:	2300      	movs	r3, #0
 802b7ce:	461a      	mov	r2, r3
 802b7d0:	4299      	cmp	r1, r3
 802b7d2:	d003      	beq.n	802b7dc <Is_Empty+0x12>
 802b7d4:	5c84      	ldrb	r4, [r0, r2]
 802b7d6:	1c53      	adds	r3, r2, #1
 802b7d8:	2c00      	cmp	r4, #0
 802b7da:	d0f8      	beq.n	802b7ce <Is_Empty+0x4>
 802b7dc:	2000      	movs	r0, #0
 802b7de:	428a      	cmp	r2, r1
 802b7e0:	bf28      	it	cs
 802b7e2:	2001      	movcs	r0, #1
 802b7e4:	bd10      	pop	{r4, pc}

0802b7e6 <Memcpy_Rev>:
 802b7e6:	3801      	subs	r0, #1
 802b7e8:	b122      	cbz	r2, 802b7f4 <Memcpy_Rev+0xe>
 802b7ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b7ee:	5483      	strb	r3, [r0, r2]
 802b7f0:	3a01      	subs	r2, #1
 802b7f2:	e7f9      	b.n	802b7e8 <Memcpy_Rev+0x2>
 802b7f4:	4770      	bx	lr

0802b7f6 <Memcmp_Rev>:
 802b7f6:	b570      	push	{r4, r5, r6, lr}
 802b7f8:	3a01      	subs	r2, #1
 802b7fa:	2300      	movs	r3, #0
 802b7fc:	5c8c      	ldrb	r4, [r1, r2]
 802b7fe:	5c85      	ldrb	r5, [r0, r2]
 802b800:	3a01      	subs	r2, #1
 802b802:	f143 0600 	adc.w	r6, r3, #0
 802b806:	42a5      	cmp	r5, r4
 802b808:	d101      	bne.n	802b80e <Memcmp_Rev+0x18>
 802b80a:	2e00      	cmp	r6, #0
 802b80c:	d1f6      	bne.n	802b7fc <Memcmp_Rev+0x6>
 802b80e:	1b28      	subs	r0, r5, r4
 802b810:	bd70      	pop	{r4, r5, r6, pc}

0802b812 <Mem_Assign>:
 802b812:	4351      	muls	r1, r2
 802b814:	3103      	adds	r1, #3
 802b816:	f021 0203 	bic.w	r2, r1, #3
 802b81a:	6801      	ldr	r1, [r0, #0]
 802b81c:	440a      	add	r2, r1
 802b81e:	6002      	str	r2, [r0, #0]
 802b820:	4608      	mov	r0, r1
 802b822:	4770      	bx	lr

0802b824 <Rand32>:
 802b824:	b5e0      	push	{r5, r6, r7, lr}
 802b826:	a901      	add	r1, sp, #4
 802b828:	2001      	movs	r0, #1
 802b82a:	f7d6 fd7d 	bl	8002328 <BLEPLAT_RngGet>
 802b82e:	9801      	ldr	r0, [sp, #4]
 802b830:	bd8c      	pop	{r2, r3, r7, pc}

0802b832 <_vsniprintf_r>:
 802b832:	b530      	push	{r4, r5, lr}
 802b834:	4614      	mov	r4, r2
 802b836:	b09b      	sub	sp, #108	@ 0x6c
 802b838:	4605      	mov	r5, r0
 802b83a:	461a      	mov	r2, r3
 802b83c:	2c00      	cmp	r4, #0
 802b83e:	da05      	bge.n	802b84c <_vsniprintf_r+0x1a>
 802b840:	238b      	movs	r3, #139	@ 0x8b
 802b842:	6003      	str	r3, [r0, #0]
 802b844:	f04f 30ff 	mov.w	r0, #4294967295
 802b848:	b01b      	add	sp, #108	@ 0x6c
 802b84a:	bd30      	pop	{r4, r5, pc}
 802b84c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802b850:	9100      	str	r1, [sp, #0]
 802b852:	9104      	str	r1, [sp, #16]
 802b854:	4669      	mov	r1, sp
 802b856:	f8ad 300c 	strh.w	r3, [sp, #12]
 802b85a:	bf14      	ite	ne
 802b85c:	f104 33ff 	addne.w	r3, r4, #4294967295
 802b860:	4623      	moveq	r3, r4
 802b862:	9302      	str	r3, [sp, #8]
 802b864:	9305      	str	r3, [sp, #20]
 802b866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802b86a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802b86e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802b870:	f000 f8e2 	bl	802ba38 <_svfiprintf_r>
 802b874:	1c43      	adds	r3, r0, #1
 802b876:	bfbc      	itt	lt
 802b878:	238b      	movlt	r3, #139	@ 0x8b
 802b87a:	602b      	strlt	r3, [r5, #0]
 802b87c:	2c00      	cmp	r4, #0
 802b87e:	d0e3      	beq.n	802b848 <_vsniprintf_r+0x16>
 802b880:	9b00      	ldr	r3, [sp, #0]
 802b882:	2200      	movs	r2, #0
 802b884:	701a      	strb	r2, [r3, #0]
 802b886:	e7df      	b.n	802b848 <_vsniprintf_r+0x16>

0802b888 <vsniprintf>:
 802b888:	b507      	push	{r0, r1, r2, lr}
 802b88a:	9300      	str	r3, [sp, #0]
 802b88c:	4613      	mov	r3, r2
 802b88e:	460a      	mov	r2, r1
 802b890:	4601      	mov	r1, r0
 802b892:	4803      	ldr	r0, [pc, #12]	@ (802b8a0 <vsniprintf+0x18>)
 802b894:	6800      	ldr	r0, [r0, #0]
 802b896:	f7ff ffcc 	bl	802b832 <_vsniprintf_r>
 802b89a:	b003      	add	sp, #12
 802b89c:	f85d fb04 	ldr.w	pc, [sp], #4
 802b8a0:	20000548 	.word	0x20000548

0802b8a4 <memcmp>:
 802b8a4:	3901      	subs	r1, #1
 802b8a6:	4402      	add	r2, r0
 802b8a8:	b510      	push	{r4, lr}
 802b8aa:	4290      	cmp	r0, r2
 802b8ac:	d101      	bne.n	802b8b2 <memcmp+0xe>
 802b8ae:	2000      	movs	r0, #0
 802b8b0:	e005      	b.n	802b8be <memcmp+0x1a>
 802b8b2:	7803      	ldrb	r3, [r0, #0]
 802b8b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802b8b8:	42a3      	cmp	r3, r4
 802b8ba:	d001      	beq.n	802b8c0 <memcmp+0x1c>
 802b8bc:	1b18      	subs	r0, r3, r4
 802b8be:	bd10      	pop	{r4, pc}
 802b8c0:	3001      	adds	r0, #1
 802b8c2:	e7f2      	b.n	802b8aa <memcmp+0x6>

0802b8c4 <memmove>:
 802b8c4:	4288      	cmp	r0, r1
 802b8c6:	b510      	push	{r4, lr}
 802b8c8:	eb01 0402 	add.w	r4, r1, r2
 802b8cc:	d902      	bls.n	802b8d4 <memmove+0x10>
 802b8ce:	4284      	cmp	r4, r0
 802b8d0:	4623      	mov	r3, r4
 802b8d2:	d807      	bhi.n	802b8e4 <memmove+0x20>
 802b8d4:	1e43      	subs	r3, r0, #1
 802b8d6:	42a1      	cmp	r1, r4
 802b8d8:	d008      	beq.n	802b8ec <memmove+0x28>
 802b8da:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b8de:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b8e2:	e7f8      	b.n	802b8d6 <memmove+0x12>
 802b8e4:	4402      	add	r2, r0
 802b8e6:	4601      	mov	r1, r0
 802b8e8:	428a      	cmp	r2, r1
 802b8ea:	d100      	bne.n	802b8ee <memmove+0x2a>
 802b8ec:	bd10      	pop	{r4, pc}
 802b8ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b8f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b8f6:	e7f7      	b.n	802b8e8 <memmove+0x24>

0802b8f8 <memset>:
 802b8f8:	4402      	add	r2, r0
 802b8fa:	4603      	mov	r3, r0
 802b8fc:	4293      	cmp	r3, r2
 802b8fe:	d100      	bne.n	802b902 <memset+0xa>
 802b900:	4770      	bx	lr
 802b902:	f803 1b01 	strb.w	r1, [r3], #1
 802b906:	e7f9      	b.n	802b8fc <memset+0x4>

0802b908 <__errno>:
 802b908:	4b01      	ldr	r3, [pc, #4]	@ (802b910 <__errno+0x8>)
 802b90a:	6818      	ldr	r0, [r3, #0]
 802b90c:	4770      	bx	lr
 802b90e:	bf00      	nop
 802b910:	20000548 	.word	0x20000548

0802b914 <__libc_init_array>:
 802b914:	b570      	push	{r4, r5, r6, lr}
 802b916:	4d0d      	ldr	r5, [pc, #52]	@ (802b94c <__libc_init_array+0x38>)
 802b918:	2600      	movs	r6, #0
 802b91a:	4c0d      	ldr	r4, [pc, #52]	@ (802b950 <__libc_init_array+0x3c>)
 802b91c:	1b64      	subs	r4, r4, r5
 802b91e:	10a4      	asrs	r4, r4, #2
 802b920:	42a6      	cmp	r6, r4
 802b922:	d109      	bne.n	802b938 <__libc_init_array+0x24>
 802b924:	4d0b      	ldr	r5, [pc, #44]	@ (802b954 <__libc_init_array+0x40>)
 802b926:	2600      	movs	r6, #0
 802b928:	4c0b      	ldr	r4, [pc, #44]	@ (802b958 <__libc_init_array+0x44>)
 802b92a:	f000 fc61 	bl	802c1f0 <_init>
 802b92e:	1b64      	subs	r4, r4, r5
 802b930:	10a4      	asrs	r4, r4, #2
 802b932:	42a6      	cmp	r6, r4
 802b934:	d105      	bne.n	802b942 <__libc_init_array+0x2e>
 802b936:	bd70      	pop	{r4, r5, r6, pc}
 802b938:	f855 3b04 	ldr.w	r3, [r5], #4
 802b93c:	3601      	adds	r6, #1
 802b93e:	4798      	blx	r3
 802b940:	e7ee      	b.n	802b920 <__libc_init_array+0xc>
 802b942:	f855 3b04 	ldr.w	r3, [r5], #4
 802b946:	3601      	adds	r6, #1
 802b948:	4798      	blx	r3
 802b94a:	e7f2      	b.n	802b932 <__libc_init_array+0x1e>
 802b94c:	0802e884 	.word	0x0802e884
 802b950:	0802e884 	.word	0x0802e884
 802b954:	0802e884 	.word	0x0802e884
 802b958:	0802e888 	.word	0x0802e888

0802b95c <__aeabi_memcpy>:
 802b95c:	f000 b803 	b.w	802b966 <memcpy>

0802b960 <__aeabi_memclr>:
 802b960:	2200      	movs	r2, #0
 802b962:	f7d4 bc1d 	b.w	80001a0 <__aeabi_memset>

0802b966 <memcpy>:
 802b966:	440a      	add	r2, r1
 802b968:	1e43      	subs	r3, r0, #1
 802b96a:	4291      	cmp	r1, r2
 802b96c:	d100      	bne.n	802b970 <memcpy+0xa>
 802b96e:	4770      	bx	lr
 802b970:	b510      	push	{r4, lr}
 802b972:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b976:	4291      	cmp	r1, r2
 802b978:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b97c:	d1f9      	bne.n	802b972 <memcpy+0xc>
 802b97e:	bd10      	pop	{r4, pc}

0802b980 <__ssputs_r>:
 802b980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b984:	461f      	mov	r7, r3
 802b986:	688e      	ldr	r6, [r1, #8]
 802b988:	4682      	mov	sl, r0
 802b98a:	460c      	mov	r4, r1
 802b98c:	42be      	cmp	r6, r7
 802b98e:	4690      	mov	r8, r2
 802b990:	680b      	ldr	r3, [r1, #0]
 802b992:	d82d      	bhi.n	802b9f0 <__ssputs_r+0x70>
 802b994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b998:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802b99c:	d026      	beq.n	802b9ec <__ssputs_r+0x6c>
 802b99e:	6965      	ldr	r5, [r4, #20]
 802b9a0:	6909      	ldr	r1, [r1, #16]
 802b9a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b9a6:	eba3 0901 	sub.w	r9, r3, r1
 802b9aa:	1c7b      	adds	r3, r7, #1
 802b9ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b9b0:	444b      	add	r3, r9
 802b9b2:	106d      	asrs	r5, r5, #1
 802b9b4:	429d      	cmp	r5, r3
 802b9b6:	bf38      	it	cc
 802b9b8:	461d      	movcc	r5, r3
 802b9ba:	0553      	lsls	r3, r2, #21
 802b9bc:	d527      	bpl.n	802ba0e <__ssputs_r+0x8e>
 802b9be:	4629      	mov	r1, r5
 802b9c0:	f000 fb42 	bl	802c048 <_malloc_r>
 802b9c4:	4606      	mov	r6, r0
 802b9c6:	b360      	cbz	r0, 802ba22 <__ssputs_r+0xa2>
 802b9c8:	464a      	mov	r2, r9
 802b9ca:	6921      	ldr	r1, [r4, #16]
 802b9cc:	f7ff ffcb 	bl	802b966 <memcpy>
 802b9d0:	89a3      	ldrh	r3, [r4, #12]
 802b9d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802b9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b9da:	81a3      	strh	r3, [r4, #12]
 802b9dc:	6126      	str	r6, [r4, #16]
 802b9de:	444e      	add	r6, r9
 802b9e0:	6165      	str	r5, [r4, #20]
 802b9e2:	eba5 0509 	sub.w	r5, r5, r9
 802b9e6:	6026      	str	r6, [r4, #0]
 802b9e8:	463e      	mov	r6, r7
 802b9ea:	60a5      	str	r5, [r4, #8]
 802b9ec:	42be      	cmp	r6, r7
 802b9ee:	d900      	bls.n	802b9f2 <__ssputs_r+0x72>
 802b9f0:	463e      	mov	r6, r7
 802b9f2:	4632      	mov	r2, r6
 802b9f4:	4641      	mov	r1, r8
 802b9f6:	6820      	ldr	r0, [r4, #0]
 802b9f8:	f7ff ff64 	bl	802b8c4 <memmove>
 802b9fc:	68a3      	ldr	r3, [r4, #8]
 802b9fe:	2000      	movs	r0, #0
 802ba00:	1b9b      	subs	r3, r3, r6
 802ba02:	60a3      	str	r3, [r4, #8]
 802ba04:	6823      	ldr	r3, [r4, #0]
 802ba06:	4433      	add	r3, r6
 802ba08:	6023      	str	r3, [r4, #0]
 802ba0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ba0e:	462a      	mov	r2, r5
 802ba10:	f000 fba6 	bl	802c160 <_realloc_r>
 802ba14:	4606      	mov	r6, r0
 802ba16:	2800      	cmp	r0, #0
 802ba18:	d1e0      	bne.n	802b9dc <__ssputs_r+0x5c>
 802ba1a:	6921      	ldr	r1, [r4, #16]
 802ba1c:	4650      	mov	r0, sl
 802ba1e:	f000 faa7 	bl	802bf70 <_free_r>
 802ba22:	230c      	movs	r3, #12
 802ba24:	f04f 30ff 	mov.w	r0, #4294967295
 802ba28:	f8ca 3000 	str.w	r3, [sl]
 802ba2c:	89a3      	ldrh	r3, [r4, #12]
 802ba2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ba32:	81a3      	strh	r3, [r4, #12]
 802ba34:	e7e9      	b.n	802ba0a <__ssputs_r+0x8a>
	...

0802ba38 <_svfiprintf_r>:
 802ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ba3c:	4698      	mov	r8, r3
 802ba3e:	898b      	ldrh	r3, [r1, #12]
 802ba40:	b09d      	sub	sp, #116	@ 0x74
 802ba42:	4607      	mov	r7, r0
 802ba44:	061b      	lsls	r3, r3, #24
 802ba46:	460d      	mov	r5, r1
 802ba48:	4614      	mov	r4, r2
 802ba4a:	d510      	bpl.n	802ba6e <_svfiprintf_r+0x36>
 802ba4c:	690b      	ldr	r3, [r1, #16]
 802ba4e:	b973      	cbnz	r3, 802ba6e <_svfiprintf_r+0x36>
 802ba50:	2140      	movs	r1, #64	@ 0x40
 802ba52:	f000 faf9 	bl	802c048 <_malloc_r>
 802ba56:	6028      	str	r0, [r5, #0]
 802ba58:	6128      	str	r0, [r5, #16]
 802ba5a:	b930      	cbnz	r0, 802ba6a <_svfiprintf_r+0x32>
 802ba5c:	230c      	movs	r3, #12
 802ba5e:	603b      	str	r3, [r7, #0]
 802ba60:	f04f 30ff 	mov.w	r0, #4294967295
 802ba64:	b01d      	add	sp, #116	@ 0x74
 802ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba6a:	2340      	movs	r3, #64	@ 0x40
 802ba6c:	616b      	str	r3, [r5, #20]
 802ba6e:	2300      	movs	r3, #0
 802ba70:	f8cd 800c 	str.w	r8, [sp, #12]
 802ba74:	f04f 0901 	mov.w	r9, #1
 802ba78:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 802bc1c <_svfiprintf_r+0x1e4>
 802ba7c:	9309      	str	r3, [sp, #36]	@ 0x24
 802ba7e:	2320      	movs	r3, #32
 802ba80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802ba84:	2330      	movs	r3, #48	@ 0x30
 802ba86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802ba8a:	4623      	mov	r3, r4
 802ba8c:	469a      	mov	sl, r3
 802ba8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ba92:	b10a      	cbz	r2, 802ba98 <_svfiprintf_r+0x60>
 802ba94:	2a25      	cmp	r2, #37	@ 0x25
 802ba96:	d1f9      	bne.n	802ba8c <_svfiprintf_r+0x54>
 802ba98:	ebba 0b04 	subs.w	fp, sl, r4
 802ba9c:	d00b      	beq.n	802bab6 <_svfiprintf_r+0x7e>
 802ba9e:	465b      	mov	r3, fp
 802baa0:	4622      	mov	r2, r4
 802baa2:	4629      	mov	r1, r5
 802baa4:	4638      	mov	r0, r7
 802baa6:	f7ff ff6b 	bl	802b980 <__ssputs_r>
 802baaa:	3001      	adds	r0, #1
 802baac:	f000 80a7 	beq.w	802bbfe <_svfiprintf_r+0x1c6>
 802bab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bab2:	445a      	add	r2, fp
 802bab4:	9209      	str	r2, [sp, #36]	@ 0x24
 802bab6:	f89a 3000 	ldrb.w	r3, [sl]
 802baba:	2b00      	cmp	r3, #0
 802babc:	f000 809f 	beq.w	802bbfe <_svfiprintf_r+0x1c6>
 802bac0:	2300      	movs	r3, #0
 802bac2:	f04f 32ff 	mov.w	r2, #4294967295
 802bac6:	f10a 0a01 	add.w	sl, sl, #1
 802baca:	9304      	str	r3, [sp, #16]
 802bacc:	9307      	str	r3, [sp, #28]
 802bace:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802bad2:	931a      	str	r3, [sp, #104]	@ 0x68
 802bad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802bad8:	4654      	mov	r4, sl
 802bada:	2205      	movs	r2, #5
 802badc:	484f      	ldr	r0, [pc, #316]	@ (802bc1c <_svfiprintf_r+0x1e4>)
 802bade:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bae2:	f000 fa37 	bl	802bf54 <memchr>
 802bae6:	9a04      	ldr	r2, [sp, #16]
 802bae8:	b9d8      	cbnz	r0, 802bb22 <_svfiprintf_r+0xea>
 802baea:	06d0      	lsls	r0, r2, #27
 802baec:	bf44      	itt	mi
 802baee:	2320      	movmi	r3, #32
 802baf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802baf4:	0711      	lsls	r1, r2, #28
 802baf6:	bf44      	itt	mi
 802baf8:	232b      	movmi	r3, #43	@ 0x2b
 802bafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802bafe:	f89a 3000 	ldrb.w	r3, [sl]
 802bb02:	2b2a      	cmp	r3, #42	@ 0x2a
 802bb04:	d015      	beq.n	802bb32 <_svfiprintf_r+0xfa>
 802bb06:	9a07      	ldr	r2, [sp, #28]
 802bb08:	4654      	mov	r4, sl
 802bb0a:	2000      	movs	r0, #0
 802bb0c:	f04f 0c0a 	mov.w	ip, #10
 802bb10:	4621      	mov	r1, r4
 802bb12:	f811 3b01 	ldrb.w	r3, [r1], #1
 802bb16:	3b30      	subs	r3, #48	@ 0x30
 802bb18:	2b09      	cmp	r3, #9
 802bb1a:	d94b      	bls.n	802bbb4 <_svfiprintf_r+0x17c>
 802bb1c:	b1b0      	cbz	r0, 802bb4c <_svfiprintf_r+0x114>
 802bb1e:	9207      	str	r2, [sp, #28]
 802bb20:	e014      	b.n	802bb4c <_svfiprintf_r+0x114>
 802bb22:	eba0 0308 	sub.w	r3, r0, r8
 802bb26:	46a2      	mov	sl, r4
 802bb28:	fa09 f303 	lsl.w	r3, r9, r3
 802bb2c:	4313      	orrs	r3, r2
 802bb2e:	9304      	str	r3, [sp, #16]
 802bb30:	e7d2      	b.n	802bad8 <_svfiprintf_r+0xa0>
 802bb32:	9b03      	ldr	r3, [sp, #12]
 802bb34:	1d19      	adds	r1, r3, #4
 802bb36:	681b      	ldr	r3, [r3, #0]
 802bb38:	2b00      	cmp	r3, #0
 802bb3a:	9103      	str	r1, [sp, #12]
 802bb3c:	bfbb      	ittet	lt
 802bb3e:	425b      	neglt	r3, r3
 802bb40:	f042 0202 	orrlt.w	r2, r2, #2
 802bb44:	9307      	strge	r3, [sp, #28]
 802bb46:	9307      	strlt	r3, [sp, #28]
 802bb48:	bfb8      	it	lt
 802bb4a:	9204      	strlt	r2, [sp, #16]
 802bb4c:	7823      	ldrb	r3, [r4, #0]
 802bb4e:	2b2e      	cmp	r3, #46	@ 0x2e
 802bb50:	d10a      	bne.n	802bb68 <_svfiprintf_r+0x130>
 802bb52:	7863      	ldrb	r3, [r4, #1]
 802bb54:	2b2a      	cmp	r3, #42	@ 0x2a
 802bb56:	d132      	bne.n	802bbbe <_svfiprintf_r+0x186>
 802bb58:	9b03      	ldr	r3, [sp, #12]
 802bb5a:	3402      	adds	r4, #2
 802bb5c:	1d1a      	adds	r2, r3, #4
 802bb5e:	681b      	ldr	r3, [r3, #0]
 802bb60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802bb64:	9203      	str	r2, [sp, #12]
 802bb66:	9305      	str	r3, [sp, #20]
 802bb68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802bc2c <_svfiprintf_r+0x1f4>
 802bb6c:	2203      	movs	r2, #3
 802bb6e:	7821      	ldrb	r1, [r4, #0]
 802bb70:	4650      	mov	r0, sl
 802bb72:	f000 f9ef 	bl	802bf54 <memchr>
 802bb76:	b138      	cbz	r0, 802bb88 <_svfiprintf_r+0x150>
 802bb78:	eba0 000a 	sub.w	r0, r0, sl
 802bb7c:	2240      	movs	r2, #64	@ 0x40
 802bb7e:	9b04      	ldr	r3, [sp, #16]
 802bb80:	3401      	adds	r4, #1
 802bb82:	4082      	lsls	r2, r0
 802bb84:	4313      	orrs	r3, r2
 802bb86:	9304      	str	r3, [sp, #16]
 802bb88:	f814 1b01 	ldrb.w	r1, [r4], #1
 802bb8c:	2206      	movs	r2, #6
 802bb8e:	4824      	ldr	r0, [pc, #144]	@ (802bc20 <_svfiprintf_r+0x1e8>)
 802bb90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802bb94:	f000 f9de 	bl	802bf54 <memchr>
 802bb98:	2800      	cmp	r0, #0
 802bb9a:	d036      	beq.n	802bc0a <_svfiprintf_r+0x1d2>
 802bb9c:	4b21      	ldr	r3, [pc, #132]	@ (802bc24 <_svfiprintf_r+0x1ec>)
 802bb9e:	bb1b      	cbnz	r3, 802bbe8 <_svfiprintf_r+0x1b0>
 802bba0:	9b03      	ldr	r3, [sp, #12]
 802bba2:	3307      	adds	r3, #7
 802bba4:	f023 0307 	bic.w	r3, r3, #7
 802bba8:	3308      	adds	r3, #8
 802bbaa:	9303      	str	r3, [sp, #12]
 802bbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802bbae:	4433      	add	r3, r6
 802bbb0:	9309      	str	r3, [sp, #36]	@ 0x24
 802bbb2:	e76a      	b.n	802ba8a <_svfiprintf_r+0x52>
 802bbb4:	fb0c 3202 	mla	r2, ip, r2, r3
 802bbb8:	460c      	mov	r4, r1
 802bbba:	2001      	movs	r0, #1
 802bbbc:	e7a8      	b.n	802bb10 <_svfiprintf_r+0xd8>
 802bbbe:	2300      	movs	r3, #0
 802bbc0:	3401      	adds	r4, #1
 802bbc2:	f04f 0c0a 	mov.w	ip, #10
 802bbc6:	4619      	mov	r1, r3
 802bbc8:	9305      	str	r3, [sp, #20]
 802bbca:	4620      	mov	r0, r4
 802bbcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 802bbd0:	3a30      	subs	r2, #48	@ 0x30
 802bbd2:	2a09      	cmp	r2, #9
 802bbd4:	d903      	bls.n	802bbde <_svfiprintf_r+0x1a6>
 802bbd6:	2b00      	cmp	r3, #0
 802bbd8:	d0c6      	beq.n	802bb68 <_svfiprintf_r+0x130>
 802bbda:	9105      	str	r1, [sp, #20]
 802bbdc:	e7c4      	b.n	802bb68 <_svfiprintf_r+0x130>
 802bbde:	fb0c 2101 	mla	r1, ip, r1, r2
 802bbe2:	4604      	mov	r4, r0
 802bbe4:	2301      	movs	r3, #1
 802bbe6:	e7f0      	b.n	802bbca <_svfiprintf_r+0x192>
 802bbe8:	ab03      	add	r3, sp, #12
 802bbea:	462a      	mov	r2, r5
 802bbec:	a904      	add	r1, sp, #16
 802bbee:	4638      	mov	r0, r7
 802bbf0:	9300      	str	r3, [sp, #0]
 802bbf2:	4b0d      	ldr	r3, [pc, #52]	@ (802bc28 <_svfiprintf_r+0x1f0>)
 802bbf4:	f3af 8000 	nop.w
 802bbf8:	1c42      	adds	r2, r0, #1
 802bbfa:	4606      	mov	r6, r0
 802bbfc:	d1d6      	bne.n	802bbac <_svfiprintf_r+0x174>
 802bbfe:	89ab      	ldrh	r3, [r5, #12]
 802bc00:	065b      	lsls	r3, r3, #25
 802bc02:	f53f af2d 	bmi.w	802ba60 <_svfiprintf_r+0x28>
 802bc06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802bc08:	e72c      	b.n	802ba64 <_svfiprintf_r+0x2c>
 802bc0a:	ab03      	add	r3, sp, #12
 802bc0c:	462a      	mov	r2, r5
 802bc0e:	a904      	add	r1, sp, #16
 802bc10:	4638      	mov	r0, r7
 802bc12:	9300      	str	r3, [sp, #0]
 802bc14:	4b04      	ldr	r3, [pc, #16]	@ (802bc28 <_svfiprintf_r+0x1f0>)
 802bc16:	f000 f87d 	bl	802bd14 <_printf_i>
 802bc1a:	e7ed      	b.n	802bbf8 <_svfiprintf_r+0x1c0>
 802bc1c:	0802e848 	.word	0x0802e848
 802bc20:	0802e852 	.word	0x0802e852
 802bc24:	00000000 	.word	0x00000000
 802bc28:	0802b981 	.word	0x0802b981
 802bc2c:	0802e84e 	.word	0x0802e84e

0802bc30 <_printf_common>:
 802bc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bc34:	4616      	mov	r6, r2
 802bc36:	4698      	mov	r8, r3
 802bc38:	688a      	ldr	r2, [r1, #8]
 802bc3a:	4607      	mov	r7, r0
 802bc3c:	690b      	ldr	r3, [r1, #16]
 802bc3e:	460c      	mov	r4, r1
 802bc40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802bc44:	4293      	cmp	r3, r2
 802bc46:	bfb8      	it	lt
 802bc48:	4613      	movlt	r3, r2
 802bc4a:	6033      	str	r3, [r6, #0]
 802bc4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802bc50:	b10a      	cbz	r2, 802bc56 <_printf_common+0x26>
 802bc52:	3301      	adds	r3, #1
 802bc54:	6033      	str	r3, [r6, #0]
 802bc56:	6823      	ldr	r3, [r4, #0]
 802bc58:	0699      	lsls	r1, r3, #26
 802bc5a:	bf42      	ittt	mi
 802bc5c:	6833      	ldrmi	r3, [r6, #0]
 802bc5e:	3302      	addmi	r3, #2
 802bc60:	6033      	strmi	r3, [r6, #0]
 802bc62:	6825      	ldr	r5, [r4, #0]
 802bc64:	f015 0506 	ands.w	r5, r5, #6
 802bc68:	d106      	bne.n	802bc78 <_printf_common+0x48>
 802bc6a:	f104 0a19 	add.w	sl, r4, #25
 802bc6e:	68e3      	ldr	r3, [r4, #12]
 802bc70:	6832      	ldr	r2, [r6, #0]
 802bc72:	1a9b      	subs	r3, r3, r2
 802bc74:	42ab      	cmp	r3, r5
 802bc76:	dc2b      	bgt.n	802bcd0 <_printf_common+0xa0>
 802bc78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802bc7c:	6822      	ldr	r2, [r4, #0]
 802bc7e:	3b00      	subs	r3, #0
 802bc80:	bf18      	it	ne
 802bc82:	2301      	movne	r3, #1
 802bc84:	0692      	lsls	r2, r2, #26
 802bc86:	d430      	bmi.n	802bcea <_printf_common+0xba>
 802bc88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802bc8c:	4641      	mov	r1, r8
 802bc8e:	4638      	mov	r0, r7
 802bc90:	47c8      	blx	r9
 802bc92:	3001      	adds	r0, #1
 802bc94:	d023      	beq.n	802bcde <_printf_common+0xae>
 802bc96:	6823      	ldr	r3, [r4, #0]
 802bc98:	341a      	adds	r4, #26
 802bc9a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802bc9e:	f003 0306 	and.w	r3, r3, #6
 802bca2:	2b04      	cmp	r3, #4
 802bca4:	bf0a      	itet	eq
 802bca6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802bcaa:	2500      	movne	r5, #0
 802bcac:	6833      	ldreq	r3, [r6, #0]
 802bcae:	f04f 0600 	mov.w	r6, #0
 802bcb2:	bf08      	it	eq
 802bcb4:	1aed      	subeq	r5, r5, r3
 802bcb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802bcba:	bf08      	it	eq
 802bcbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802bcc0:	4293      	cmp	r3, r2
 802bcc2:	bfc4      	itt	gt
 802bcc4:	1a9b      	subgt	r3, r3, r2
 802bcc6:	18ed      	addgt	r5, r5, r3
 802bcc8:	42b5      	cmp	r5, r6
 802bcca:	d11a      	bne.n	802bd02 <_printf_common+0xd2>
 802bccc:	2000      	movs	r0, #0
 802bcce:	e008      	b.n	802bce2 <_printf_common+0xb2>
 802bcd0:	2301      	movs	r3, #1
 802bcd2:	4652      	mov	r2, sl
 802bcd4:	4641      	mov	r1, r8
 802bcd6:	4638      	mov	r0, r7
 802bcd8:	47c8      	blx	r9
 802bcda:	3001      	adds	r0, #1
 802bcdc:	d103      	bne.n	802bce6 <_printf_common+0xb6>
 802bcde:	f04f 30ff 	mov.w	r0, #4294967295
 802bce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bce6:	3501      	adds	r5, #1
 802bce8:	e7c1      	b.n	802bc6e <_printf_common+0x3e>
 802bcea:	18e1      	adds	r1, r4, r3
 802bcec:	1c5a      	adds	r2, r3, #1
 802bcee:	2030      	movs	r0, #48	@ 0x30
 802bcf0:	3302      	adds	r3, #2
 802bcf2:	4422      	add	r2, r4
 802bcf4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802bcf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802bcfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802bd00:	e7c2      	b.n	802bc88 <_printf_common+0x58>
 802bd02:	2301      	movs	r3, #1
 802bd04:	4622      	mov	r2, r4
 802bd06:	4641      	mov	r1, r8
 802bd08:	4638      	mov	r0, r7
 802bd0a:	47c8      	blx	r9
 802bd0c:	3001      	adds	r0, #1
 802bd0e:	d0e6      	beq.n	802bcde <_printf_common+0xae>
 802bd10:	3601      	adds	r6, #1
 802bd12:	e7d9      	b.n	802bcc8 <_printf_common+0x98>

0802bd14 <_printf_i>:
 802bd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802bd18:	7e0f      	ldrb	r7, [r1, #24]
 802bd1a:	4691      	mov	r9, r2
 802bd1c:	4680      	mov	r8, r0
 802bd1e:	460c      	mov	r4, r1
 802bd20:	2f78      	cmp	r7, #120	@ 0x78
 802bd22:	469a      	mov	sl, r3
 802bd24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802bd26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802bd2a:	d807      	bhi.n	802bd3c <_printf_i+0x28>
 802bd2c:	2f62      	cmp	r7, #98	@ 0x62
 802bd2e:	d80a      	bhi.n	802bd46 <_printf_i+0x32>
 802bd30:	2f00      	cmp	r7, #0
 802bd32:	f000 80d2 	beq.w	802beda <_printf_i+0x1c6>
 802bd36:	2f58      	cmp	r7, #88	@ 0x58
 802bd38:	f000 80b9 	beq.w	802beae <_printf_i+0x19a>
 802bd3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bd40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802bd44:	e03a      	b.n	802bdbc <_printf_i+0xa8>
 802bd46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802bd4a:	2b15      	cmp	r3, #21
 802bd4c:	d8f6      	bhi.n	802bd3c <_printf_i+0x28>
 802bd4e:	a101      	add	r1, pc, #4	@ (adr r1, 802bd54 <_printf_i+0x40>)
 802bd50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802bd54:	0802bdad 	.word	0x0802bdad
 802bd58:	0802bdc1 	.word	0x0802bdc1
 802bd5c:	0802bd3d 	.word	0x0802bd3d
 802bd60:	0802bd3d 	.word	0x0802bd3d
 802bd64:	0802bd3d 	.word	0x0802bd3d
 802bd68:	0802bd3d 	.word	0x0802bd3d
 802bd6c:	0802bdc1 	.word	0x0802bdc1
 802bd70:	0802bd3d 	.word	0x0802bd3d
 802bd74:	0802bd3d 	.word	0x0802bd3d
 802bd78:	0802bd3d 	.word	0x0802bd3d
 802bd7c:	0802bd3d 	.word	0x0802bd3d
 802bd80:	0802bec1 	.word	0x0802bec1
 802bd84:	0802bdeb 	.word	0x0802bdeb
 802bd88:	0802be7b 	.word	0x0802be7b
 802bd8c:	0802bd3d 	.word	0x0802bd3d
 802bd90:	0802bd3d 	.word	0x0802bd3d
 802bd94:	0802bee3 	.word	0x0802bee3
 802bd98:	0802bd3d 	.word	0x0802bd3d
 802bd9c:	0802bdeb 	.word	0x0802bdeb
 802bda0:	0802bd3d 	.word	0x0802bd3d
 802bda4:	0802bd3d 	.word	0x0802bd3d
 802bda8:	0802be83 	.word	0x0802be83
 802bdac:	6833      	ldr	r3, [r6, #0]
 802bdae:	1d1a      	adds	r2, r3, #4
 802bdb0:	681b      	ldr	r3, [r3, #0]
 802bdb2:	6032      	str	r2, [r6, #0]
 802bdb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bdb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802bdbc:	2301      	movs	r3, #1
 802bdbe:	e09d      	b.n	802befc <_printf_i+0x1e8>
 802bdc0:	6833      	ldr	r3, [r6, #0]
 802bdc2:	6820      	ldr	r0, [r4, #0]
 802bdc4:	1d19      	adds	r1, r3, #4
 802bdc6:	6031      	str	r1, [r6, #0]
 802bdc8:	0606      	lsls	r6, r0, #24
 802bdca:	d501      	bpl.n	802bdd0 <_printf_i+0xbc>
 802bdcc:	681d      	ldr	r5, [r3, #0]
 802bdce:	e003      	b.n	802bdd8 <_printf_i+0xc4>
 802bdd0:	0645      	lsls	r5, r0, #25
 802bdd2:	d5fb      	bpl.n	802bdcc <_printf_i+0xb8>
 802bdd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 802bdd8:	2d00      	cmp	r5, #0
 802bdda:	da03      	bge.n	802bde4 <_printf_i+0xd0>
 802bddc:	232d      	movs	r3, #45	@ 0x2d
 802bdde:	426d      	negs	r5, r5
 802bde0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bde4:	4859      	ldr	r0, [pc, #356]	@ (802bf4c <_printf_i+0x238>)
 802bde6:	230a      	movs	r3, #10
 802bde8:	e011      	b.n	802be0e <_printf_i+0xfa>
 802bdea:	6821      	ldr	r1, [r4, #0]
 802bdec:	6833      	ldr	r3, [r6, #0]
 802bdee:	0608      	lsls	r0, r1, #24
 802bdf0:	f853 5b04 	ldr.w	r5, [r3], #4
 802bdf4:	d402      	bmi.n	802bdfc <_printf_i+0xe8>
 802bdf6:	0649      	lsls	r1, r1, #25
 802bdf8:	bf48      	it	mi
 802bdfa:	b2ad      	uxthmi	r5, r5
 802bdfc:	2f6f      	cmp	r7, #111	@ 0x6f
 802bdfe:	6033      	str	r3, [r6, #0]
 802be00:	4852      	ldr	r0, [pc, #328]	@ (802bf4c <_printf_i+0x238>)
 802be02:	bf14      	ite	ne
 802be04:	230a      	movne	r3, #10
 802be06:	2308      	moveq	r3, #8
 802be08:	2100      	movs	r1, #0
 802be0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802be0e:	6866      	ldr	r6, [r4, #4]
 802be10:	2e00      	cmp	r6, #0
 802be12:	60a6      	str	r6, [r4, #8]
 802be14:	bfa2      	ittt	ge
 802be16:	6821      	ldrge	r1, [r4, #0]
 802be18:	f021 0104 	bicge.w	r1, r1, #4
 802be1c:	6021      	strge	r1, [r4, #0]
 802be1e:	b90d      	cbnz	r5, 802be24 <_printf_i+0x110>
 802be20:	2e00      	cmp	r6, #0
 802be22:	d04b      	beq.n	802bebc <_printf_i+0x1a8>
 802be24:	4616      	mov	r6, r2
 802be26:	fbb5 f1f3 	udiv	r1, r5, r3
 802be2a:	fb03 5711 	mls	r7, r3, r1, r5
 802be2e:	5dc7      	ldrb	r7, [r0, r7]
 802be30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802be34:	462f      	mov	r7, r5
 802be36:	460d      	mov	r5, r1
 802be38:	42bb      	cmp	r3, r7
 802be3a:	d9f4      	bls.n	802be26 <_printf_i+0x112>
 802be3c:	2b08      	cmp	r3, #8
 802be3e:	d10b      	bne.n	802be58 <_printf_i+0x144>
 802be40:	6823      	ldr	r3, [r4, #0]
 802be42:	07df      	lsls	r7, r3, #31
 802be44:	d508      	bpl.n	802be58 <_printf_i+0x144>
 802be46:	6923      	ldr	r3, [r4, #16]
 802be48:	6861      	ldr	r1, [r4, #4]
 802be4a:	4299      	cmp	r1, r3
 802be4c:	bfde      	ittt	le
 802be4e:	2330      	movle	r3, #48	@ 0x30
 802be50:	f806 3c01 	strble.w	r3, [r6, #-1]
 802be54:	f106 36ff 	addle.w	r6, r6, #4294967295
 802be58:	1b92      	subs	r2, r2, r6
 802be5a:	6122      	str	r2, [r4, #16]
 802be5c:	464b      	mov	r3, r9
 802be5e:	aa03      	add	r2, sp, #12
 802be60:	4621      	mov	r1, r4
 802be62:	4640      	mov	r0, r8
 802be64:	f8cd a000 	str.w	sl, [sp]
 802be68:	f7ff fee2 	bl	802bc30 <_printf_common>
 802be6c:	3001      	adds	r0, #1
 802be6e:	d14a      	bne.n	802bf06 <_printf_i+0x1f2>
 802be70:	f04f 30ff 	mov.w	r0, #4294967295
 802be74:	b004      	add	sp, #16
 802be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802be7a:	6823      	ldr	r3, [r4, #0]
 802be7c:	f043 0320 	orr.w	r3, r3, #32
 802be80:	6023      	str	r3, [r4, #0]
 802be82:	2778      	movs	r7, #120	@ 0x78
 802be84:	4832      	ldr	r0, [pc, #200]	@ (802bf50 <_printf_i+0x23c>)
 802be86:	6823      	ldr	r3, [r4, #0]
 802be88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802be8c:	061f      	lsls	r7, r3, #24
 802be8e:	6831      	ldr	r1, [r6, #0]
 802be90:	f851 5b04 	ldr.w	r5, [r1], #4
 802be94:	d402      	bmi.n	802be9c <_printf_i+0x188>
 802be96:	065f      	lsls	r7, r3, #25
 802be98:	bf48      	it	mi
 802be9a:	b2ad      	uxthmi	r5, r5
 802be9c:	6031      	str	r1, [r6, #0]
 802be9e:	07d9      	lsls	r1, r3, #31
 802bea0:	bf44      	itt	mi
 802bea2:	f043 0320 	orrmi.w	r3, r3, #32
 802bea6:	6023      	strmi	r3, [r4, #0]
 802bea8:	b11d      	cbz	r5, 802beb2 <_printf_i+0x19e>
 802beaa:	2310      	movs	r3, #16
 802beac:	e7ac      	b.n	802be08 <_printf_i+0xf4>
 802beae:	4827      	ldr	r0, [pc, #156]	@ (802bf4c <_printf_i+0x238>)
 802beb0:	e7e9      	b.n	802be86 <_printf_i+0x172>
 802beb2:	6823      	ldr	r3, [r4, #0]
 802beb4:	f023 0320 	bic.w	r3, r3, #32
 802beb8:	6023      	str	r3, [r4, #0]
 802beba:	e7f6      	b.n	802beaa <_printf_i+0x196>
 802bebc:	4616      	mov	r6, r2
 802bebe:	e7bd      	b.n	802be3c <_printf_i+0x128>
 802bec0:	6833      	ldr	r3, [r6, #0]
 802bec2:	6825      	ldr	r5, [r4, #0]
 802bec4:	1d18      	adds	r0, r3, #4
 802bec6:	6961      	ldr	r1, [r4, #20]
 802bec8:	6030      	str	r0, [r6, #0]
 802beca:	062e      	lsls	r6, r5, #24
 802becc:	681b      	ldr	r3, [r3, #0]
 802bece:	d501      	bpl.n	802bed4 <_printf_i+0x1c0>
 802bed0:	6019      	str	r1, [r3, #0]
 802bed2:	e002      	b.n	802beda <_printf_i+0x1c6>
 802bed4:	0668      	lsls	r0, r5, #25
 802bed6:	d5fb      	bpl.n	802bed0 <_printf_i+0x1bc>
 802bed8:	8019      	strh	r1, [r3, #0]
 802beda:	2300      	movs	r3, #0
 802bedc:	4616      	mov	r6, r2
 802bede:	6123      	str	r3, [r4, #16]
 802bee0:	e7bc      	b.n	802be5c <_printf_i+0x148>
 802bee2:	6833      	ldr	r3, [r6, #0]
 802bee4:	2100      	movs	r1, #0
 802bee6:	1d1a      	adds	r2, r3, #4
 802bee8:	6032      	str	r2, [r6, #0]
 802beea:	681e      	ldr	r6, [r3, #0]
 802beec:	6862      	ldr	r2, [r4, #4]
 802beee:	4630      	mov	r0, r6
 802bef0:	f000 f830 	bl	802bf54 <memchr>
 802bef4:	b108      	cbz	r0, 802befa <_printf_i+0x1e6>
 802bef6:	1b80      	subs	r0, r0, r6
 802bef8:	6060      	str	r0, [r4, #4]
 802befa:	6863      	ldr	r3, [r4, #4]
 802befc:	6123      	str	r3, [r4, #16]
 802befe:	2300      	movs	r3, #0
 802bf00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bf04:	e7aa      	b.n	802be5c <_printf_i+0x148>
 802bf06:	6923      	ldr	r3, [r4, #16]
 802bf08:	4632      	mov	r2, r6
 802bf0a:	4649      	mov	r1, r9
 802bf0c:	4640      	mov	r0, r8
 802bf0e:	47d0      	blx	sl
 802bf10:	3001      	adds	r0, #1
 802bf12:	d0ad      	beq.n	802be70 <_printf_i+0x15c>
 802bf14:	6823      	ldr	r3, [r4, #0]
 802bf16:	079b      	lsls	r3, r3, #30
 802bf18:	d413      	bmi.n	802bf42 <_printf_i+0x22e>
 802bf1a:	68e0      	ldr	r0, [r4, #12]
 802bf1c:	9b03      	ldr	r3, [sp, #12]
 802bf1e:	4298      	cmp	r0, r3
 802bf20:	bfb8      	it	lt
 802bf22:	4618      	movlt	r0, r3
 802bf24:	e7a6      	b.n	802be74 <_printf_i+0x160>
 802bf26:	2301      	movs	r3, #1
 802bf28:	4632      	mov	r2, r6
 802bf2a:	4649      	mov	r1, r9
 802bf2c:	4640      	mov	r0, r8
 802bf2e:	47d0      	blx	sl
 802bf30:	3001      	adds	r0, #1
 802bf32:	d09d      	beq.n	802be70 <_printf_i+0x15c>
 802bf34:	3501      	adds	r5, #1
 802bf36:	68e3      	ldr	r3, [r4, #12]
 802bf38:	9903      	ldr	r1, [sp, #12]
 802bf3a:	1a5b      	subs	r3, r3, r1
 802bf3c:	42ab      	cmp	r3, r5
 802bf3e:	dcf2      	bgt.n	802bf26 <_printf_i+0x212>
 802bf40:	e7eb      	b.n	802bf1a <_printf_i+0x206>
 802bf42:	2500      	movs	r5, #0
 802bf44:	f104 0619 	add.w	r6, r4, #25
 802bf48:	e7f5      	b.n	802bf36 <_printf_i+0x222>
 802bf4a:	bf00      	nop
 802bf4c:	0802e859 	.word	0x0802e859
 802bf50:	0802e86a 	.word	0x0802e86a

0802bf54 <memchr>:
 802bf54:	b2c9      	uxtb	r1, r1
 802bf56:	4603      	mov	r3, r0
 802bf58:	4402      	add	r2, r0
 802bf5a:	b510      	push	{r4, lr}
 802bf5c:	4293      	cmp	r3, r2
 802bf5e:	4618      	mov	r0, r3
 802bf60:	d101      	bne.n	802bf66 <memchr+0x12>
 802bf62:	2000      	movs	r0, #0
 802bf64:	e003      	b.n	802bf6e <memchr+0x1a>
 802bf66:	7804      	ldrb	r4, [r0, #0]
 802bf68:	3301      	adds	r3, #1
 802bf6a:	428c      	cmp	r4, r1
 802bf6c:	d1f6      	bne.n	802bf5c <memchr+0x8>
 802bf6e:	bd10      	pop	{r4, pc}

0802bf70 <_free_r>:
 802bf70:	b538      	push	{r3, r4, r5, lr}
 802bf72:	4605      	mov	r5, r0
 802bf74:	2900      	cmp	r1, #0
 802bf76:	d041      	beq.n	802bffc <_free_r+0x8c>
 802bf78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bf7c:	1f0c      	subs	r4, r1, #4
 802bf7e:	2b00      	cmp	r3, #0
 802bf80:	bfb8      	it	lt
 802bf82:	18e4      	addlt	r4, r4, r3
 802bf84:	f000 f8e0 	bl	802c148 <__malloc_lock>
 802bf88:	4a1d      	ldr	r2, [pc, #116]	@ (802c000 <_free_r+0x90>)
 802bf8a:	6813      	ldr	r3, [r2, #0]
 802bf8c:	b933      	cbnz	r3, 802bf9c <_free_r+0x2c>
 802bf8e:	6063      	str	r3, [r4, #4]
 802bf90:	6014      	str	r4, [r2, #0]
 802bf92:	4628      	mov	r0, r5
 802bf94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bf98:	f000 b8dc 	b.w	802c154 <__malloc_unlock>
 802bf9c:	42a3      	cmp	r3, r4
 802bf9e:	d908      	bls.n	802bfb2 <_free_r+0x42>
 802bfa0:	6820      	ldr	r0, [r4, #0]
 802bfa2:	1821      	adds	r1, r4, r0
 802bfa4:	428b      	cmp	r3, r1
 802bfa6:	bf01      	itttt	eq
 802bfa8:	6819      	ldreq	r1, [r3, #0]
 802bfaa:	685b      	ldreq	r3, [r3, #4]
 802bfac:	1809      	addeq	r1, r1, r0
 802bfae:	6021      	streq	r1, [r4, #0]
 802bfb0:	e7ed      	b.n	802bf8e <_free_r+0x1e>
 802bfb2:	461a      	mov	r2, r3
 802bfb4:	685b      	ldr	r3, [r3, #4]
 802bfb6:	b10b      	cbz	r3, 802bfbc <_free_r+0x4c>
 802bfb8:	42a3      	cmp	r3, r4
 802bfba:	d9fa      	bls.n	802bfb2 <_free_r+0x42>
 802bfbc:	6811      	ldr	r1, [r2, #0]
 802bfbe:	1850      	adds	r0, r2, r1
 802bfc0:	42a0      	cmp	r0, r4
 802bfc2:	d10b      	bne.n	802bfdc <_free_r+0x6c>
 802bfc4:	6820      	ldr	r0, [r4, #0]
 802bfc6:	4401      	add	r1, r0
 802bfc8:	1850      	adds	r0, r2, r1
 802bfca:	6011      	str	r1, [r2, #0]
 802bfcc:	4283      	cmp	r3, r0
 802bfce:	d1e0      	bne.n	802bf92 <_free_r+0x22>
 802bfd0:	6818      	ldr	r0, [r3, #0]
 802bfd2:	685b      	ldr	r3, [r3, #4]
 802bfd4:	4408      	add	r0, r1
 802bfd6:	6053      	str	r3, [r2, #4]
 802bfd8:	6010      	str	r0, [r2, #0]
 802bfda:	e7da      	b.n	802bf92 <_free_r+0x22>
 802bfdc:	d902      	bls.n	802bfe4 <_free_r+0x74>
 802bfde:	230c      	movs	r3, #12
 802bfe0:	602b      	str	r3, [r5, #0]
 802bfe2:	e7d6      	b.n	802bf92 <_free_r+0x22>
 802bfe4:	6820      	ldr	r0, [r4, #0]
 802bfe6:	1821      	adds	r1, r4, r0
 802bfe8:	428b      	cmp	r3, r1
 802bfea:	bf02      	ittt	eq
 802bfec:	6819      	ldreq	r1, [r3, #0]
 802bfee:	685b      	ldreq	r3, [r3, #4]
 802bff0:	1809      	addeq	r1, r1, r0
 802bff2:	6063      	str	r3, [r4, #4]
 802bff4:	bf08      	it	eq
 802bff6:	6021      	streq	r1, [r4, #0]
 802bff8:	6054      	str	r4, [r2, #4]
 802bffa:	e7ca      	b.n	802bf92 <_free_r+0x22>
 802bffc:	bd38      	pop	{r3, r4, r5, pc}
 802bffe:	bf00      	nop
 802c000:	2000a278 	.word	0x2000a278

0802c004 <sbrk_aligned>:
 802c004:	b570      	push	{r4, r5, r6, lr}
 802c006:	4e0f      	ldr	r6, [pc, #60]	@ (802c044 <sbrk_aligned+0x40>)
 802c008:	460c      	mov	r4, r1
 802c00a:	4605      	mov	r5, r0
 802c00c:	6831      	ldr	r1, [r6, #0]
 802c00e:	b911      	cbnz	r1, 802c016 <sbrk_aligned+0x12>
 802c010:	f000 f8d4 	bl	802c1bc <_sbrk_r>
 802c014:	6030      	str	r0, [r6, #0]
 802c016:	4621      	mov	r1, r4
 802c018:	4628      	mov	r0, r5
 802c01a:	f000 f8cf 	bl	802c1bc <_sbrk_r>
 802c01e:	1c43      	adds	r3, r0, #1
 802c020:	d103      	bne.n	802c02a <sbrk_aligned+0x26>
 802c022:	f04f 34ff 	mov.w	r4, #4294967295
 802c026:	4620      	mov	r0, r4
 802c028:	bd70      	pop	{r4, r5, r6, pc}
 802c02a:	1cc4      	adds	r4, r0, #3
 802c02c:	f024 0403 	bic.w	r4, r4, #3
 802c030:	42a0      	cmp	r0, r4
 802c032:	d0f8      	beq.n	802c026 <sbrk_aligned+0x22>
 802c034:	1a21      	subs	r1, r4, r0
 802c036:	4628      	mov	r0, r5
 802c038:	f000 f8c0 	bl	802c1bc <_sbrk_r>
 802c03c:	3001      	adds	r0, #1
 802c03e:	d1f2      	bne.n	802c026 <sbrk_aligned+0x22>
 802c040:	e7ef      	b.n	802c022 <sbrk_aligned+0x1e>
 802c042:	bf00      	nop
 802c044:	2000a274 	.word	0x2000a274

0802c048 <_malloc_r>:
 802c048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c04c:	1ccd      	adds	r5, r1, #3
 802c04e:	4606      	mov	r6, r0
 802c050:	f025 0503 	bic.w	r5, r5, #3
 802c054:	3508      	adds	r5, #8
 802c056:	2d0c      	cmp	r5, #12
 802c058:	bf38      	it	cc
 802c05a:	250c      	movcc	r5, #12
 802c05c:	2d00      	cmp	r5, #0
 802c05e:	db01      	blt.n	802c064 <_malloc_r+0x1c>
 802c060:	42a9      	cmp	r1, r5
 802c062:	d904      	bls.n	802c06e <_malloc_r+0x26>
 802c064:	230c      	movs	r3, #12
 802c066:	6033      	str	r3, [r6, #0]
 802c068:	2000      	movs	r0, #0
 802c06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c06e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802c144 <_malloc_r+0xfc>
 802c072:	f000 f869 	bl	802c148 <__malloc_lock>
 802c076:	f8d8 3000 	ldr.w	r3, [r8]
 802c07a:	461c      	mov	r4, r3
 802c07c:	bb44      	cbnz	r4, 802c0d0 <_malloc_r+0x88>
 802c07e:	4629      	mov	r1, r5
 802c080:	4630      	mov	r0, r6
 802c082:	f7ff ffbf 	bl	802c004 <sbrk_aligned>
 802c086:	1c43      	adds	r3, r0, #1
 802c088:	4604      	mov	r4, r0
 802c08a:	d158      	bne.n	802c13e <_malloc_r+0xf6>
 802c08c:	f8d8 4000 	ldr.w	r4, [r8]
 802c090:	4627      	mov	r7, r4
 802c092:	2f00      	cmp	r7, #0
 802c094:	d143      	bne.n	802c11e <_malloc_r+0xd6>
 802c096:	2c00      	cmp	r4, #0
 802c098:	d04b      	beq.n	802c132 <_malloc_r+0xea>
 802c09a:	6823      	ldr	r3, [r4, #0]
 802c09c:	4639      	mov	r1, r7
 802c09e:	4630      	mov	r0, r6
 802c0a0:	eb04 0903 	add.w	r9, r4, r3
 802c0a4:	f000 f88a 	bl	802c1bc <_sbrk_r>
 802c0a8:	4581      	cmp	r9, r0
 802c0aa:	d142      	bne.n	802c132 <_malloc_r+0xea>
 802c0ac:	6821      	ldr	r1, [r4, #0]
 802c0ae:	4630      	mov	r0, r6
 802c0b0:	1a6d      	subs	r5, r5, r1
 802c0b2:	4629      	mov	r1, r5
 802c0b4:	f7ff ffa6 	bl	802c004 <sbrk_aligned>
 802c0b8:	3001      	adds	r0, #1
 802c0ba:	d03a      	beq.n	802c132 <_malloc_r+0xea>
 802c0bc:	6823      	ldr	r3, [r4, #0]
 802c0be:	442b      	add	r3, r5
 802c0c0:	6023      	str	r3, [r4, #0]
 802c0c2:	f8d8 3000 	ldr.w	r3, [r8]
 802c0c6:	685a      	ldr	r2, [r3, #4]
 802c0c8:	bb62      	cbnz	r2, 802c124 <_malloc_r+0xdc>
 802c0ca:	f8c8 7000 	str.w	r7, [r8]
 802c0ce:	e00f      	b.n	802c0f0 <_malloc_r+0xa8>
 802c0d0:	6822      	ldr	r2, [r4, #0]
 802c0d2:	1b52      	subs	r2, r2, r5
 802c0d4:	d420      	bmi.n	802c118 <_malloc_r+0xd0>
 802c0d6:	2a0b      	cmp	r2, #11
 802c0d8:	d917      	bls.n	802c10a <_malloc_r+0xc2>
 802c0da:	1961      	adds	r1, r4, r5
 802c0dc:	42a3      	cmp	r3, r4
 802c0de:	6025      	str	r5, [r4, #0]
 802c0e0:	bf18      	it	ne
 802c0e2:	6059      	strne	r1, [r3, #4]
 802c0e4:	6863      	ldr	r3, [r4, #4]
 802c0e6:	bf08      	it	eq
 802c0e8:	f8c8 1000 	streq.w	r1, [r8]
 802c0ec:	5162      	str	r2, [r4, r5]
 802c0ee:	604b      	str	r3, [r1, #4]
 802c0f0:	4630      	mov	r0, r6
 802c0f2:	f000 f82f 	bl	802c154 <__malloc_unlock>
 802c0f6:	f104 000b 	add.w	r0, r4, #11
 802c0fa:	1d23      	adds	r3, r4, #4
 802c0fc:	f020 0007 	bic.w	r0, r0, #7
 802c100:	1ac2      	subs	r2, r0, r3
 802c102:	bf1c      	itt	ne
 802c104:	1a1b      	subne	r3, r3, r0
 802c106:	50a3      	strne	r3, [r4, r2]
 802c108:	e7af      	b.n	802c06a <_malloc_r+0x22>
 802c10a:	6862      	ldr	r2, [r4, #4]
 802c10c:	42a3      	cmp	r3, r4
 802c10e:	bf0c      	ite	eq
 802c110:	f8c8 2000 	streq.w	r2, [r8]
 802c114:	605a      	strne	r2, [r3, #4]
 802c116:	e7eb      	b.n	802c0f0 <_malloc_r+0xa8>
 802c118:	4623      	mov	r3, r4
 802c11a:	6864      	ldr	r4, [r4, #4]
 802c11c:	e7ae      	b.n	802c07c <_malloc_r+0x34>
 802c11e:	463c      	mov	r4, r7
 802c120:	687f      	ldr	r7, [r7, #4]
 802c122:	e7b6      	b.n	802c092 <_malloc_r+0x4a>
 802c124:	461a      	mov	r2, r3
 802c126:	685b      	ldr	r3, [r3, #4]
 802c128:	42a3      	cmp	r3, r4
 802c12a:	d1fb      	bne.n	802c124 <_malloc_r+0xdc>
 802c12c:	2300      	movs	r3, #0
 802c12e:	6053      	str	r3, [r2, #4]
 802c130:	e7de      	b.n	802c0f0 <_malloc_r+0xa8>
 802c132:	230c      	movs	r3, #12
 802c134:	4630      	mov	r0, r6
 802c136:	6033      	str	r3, [r6, #0]
 802c138:	f000 f80c 	bl	802c154 <__malloc_unlock>
 802c13c:	e794      	b.n	802c068 <_malloc_r+0x20>
 802c13e:	6005      	str	r5, [r0, #0]
 802c140:	e7d6      	b.n	802c0f0 <_malloc_r+0xa8>
 802c142:	bf00      	nop
 802c144:	2000a278 	.word	0x2000a278

0802c148 <__malloc_lock>:
 802c148:	4801      	ldr	r0, [pc, #4]	@ (802c150 <__malloc_lock+0x8>)
 802c14a:	f000 b847 	b.w	802c1dc <__retarget_lock_acquire_recursive>
 802c14e:	bf00      	nop
 802c150:	2000a27c 	.word	0x2000a27c

0802c154 <__malloc_unlock>:
 802c154:	4801      	ldr	r0, [pc, #4]	@ (802c15c <__malloc_unlock+0x8>)
 802c156:	f000 b842 	b.w	802c1de <__retarget_lock_release_recursive>
 802c15a:	bf00      	nop
 802c15c:	2000a27c 	.word	0x2000a27c

0802c160 <_realloc_r>:
 802c160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c164:	4680      	mov	r8, r0
 802c166:	4615      	mov	r5, r2
 802c168:	460c      	mov	r4, r1
 802c16a:	b921      	cbnz	r1, 802c176 <_realloc_r+0x16>
 802c16c:	4611      	mov	r1, r2
 802c16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c172:	f7ff bf69 	b.w	802c048 <_malloc_r>
 802c176:	b92a      	cbnz	r2, 802c184 <_realloc_r+0x24>
 802c178:	f7ff fefa 	bl	802bf70 <_free_r>
 802c17c:	2400      	movs	r4, #0
 802c17e:	4620      	mov	r0, r4
 802c180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c184:	f000 f82c 	bl	802c1e0 <_malloc_usable_size_r>
 802c188:	4285      	cmp	r5, r0
 802c18a:	4606      	mov	r6, r0
 802c18c:	d802      	bhi.n	802c194 <_realloc_r+0x34>
 802c18e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802c192:	d8f4      	bhi.n	802c17e <_realloc_r+0x1e>
 802c194:	4629      	mov	r1, r5
 802c196:	4640      	mov	r0, r8
 802c198:	f7ff ff56 	bl	802c048 <_malloc_r>
 802c19c:	4607      	mov	r7, r0
 802c19e:	2800      	cmp	r0, #0
 802c1a0:	d0ec      	beq.n	802c17c <_realloc_r+0x1c>
 802c1a2:	42b5      	cmp	r5, r6
 802c1a4:	462a      	mov	r2, r5
 802c1a6:	4621      	mov	r1, r4
 802c1a8:	bf28      	it	cs
 802c1aa:	4632      	movcs	r2, r6
 802c1ac:	f7ff fbdb 	bl	802b966 <memcpy>
 802c1b0:	4621      	mov	r1, r4
 802c1b2:	4640      	mov	r0, r8
 802c1b4:	463c      	mov	r4, r7
 802c1b6:	f7ff fedb 	bl	802bf70 <_free_r>
 802c1ba:	e7e0      	b.n	802c17e <_realloc_r+0x1e>

0802c1bc <_sbrk_r>:
 802c1bc:	b538      	push	{r3, r4, r5, lr}
 802c1be:	2300      	movs	r3, #0
 802c1c0:	4d05      	ldr	r5, [pc, #20]	@ (802c1d8 <_sbrk_r+0x1c>)
 802c1c2:	4604      	mov	r4, r0
 802c1c4:	4608      	mov	r0, r1
 802c1c6:	602b      	str	r3, [r5, #0]
 802c1c8:	f7d4 ff28 	bl	800101c <_sbrk>
 802c1cc:	1c43      	adds	r3, r0, #1
 802c1ce:	d102      	bne.n	802c1d6 <_sbrk_r+0x1a>
 802c1d0:	682b      	ldr	r3, [r5, #0]
 802c1d2:	b103      	cbz	r3, 802c1d6 <_sbrk_r+0x1a>
 802c1d4:	6023      	str	r3, [r4, #0]
 802c1d6:	bd38      	pop	{r3, r4, r5, pc}
 802c1d8:	2000a280 	.word	0x2000a280

0802c1dc <__retarget_lock_acquire_recursive>:
 802c1dc:	4770      	bx	lr

0802c1de <__retarget_lock_release_recursive>:
 802c1de:	4770      	bx	lr

0802c1e0 <_malloc_usable_size_r>:
 802c1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c1e4:	1f18      	subs	r0, r3, #4
 802c1e6:	2b00      	cmp	r3, #0
 802c1e8:	bfbc      	itt	lt
 802c1ea:	580b      	ldrlt	r3, [r1, r0]
 802c1ec:	18c0      	addlt	r0, r0, r3
 802c1ee:	4770      	bx	lr

0802c1f0 <_init>:
 802c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1f2:	bf00      	nop
 802c1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c1f6:	bc08      	pop	{r3}
 802c1f8:	469e      	mov	lr, r3
 802c1fa:	4770      	bx	lr

0802c1fc <_fini>:
 802c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c1fe:	bf00      	nop
 802c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c202:	bc08      	pop	{r3}
 802c204:	469e      	mov	lr, r3
 802c206:	4770      	bx	lr
